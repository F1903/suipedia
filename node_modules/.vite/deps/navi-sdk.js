import {
  require_crypto
} from "./chunk-M6HAR4WH.js";
import {
  Field,
  aInRange,
  bytesToNumberBE,
  concatBytes,
  createCurve,
  createHasher as createHasher2,
  ed25519,
  ensureBytes,
  graphql_exports,
  inRange,
  init_ed25519,
  init_graphql,
  init_hash_to_curve,
  init_modular,
  init_sha2,
  init_sha256,
  init_shortw_utils,
  init_utils as init_utils2,
  init_weierstrass,
  isogenyMap,
  mapToCurveSimpleSWU,
  mod,
  numberToBytesBE,
  pow2,
  require_poseidon_lite,
  sha256,
  sha2562
} from "./chunk-TA5EY45A.js";
import {
  Hash,
  abytes,
  aexists,
  anumber,
  aoutput,
  clean,
  createHasher,
  createXOFer,
  init_u64,
  init_utils,
  randomBytes,
  rotlBH,
  rotlBL,
  rotlSH,
  rotlSL,
  split,
  swap32IfBE,
  toBytes,
  u32
} from "./chunk-CFRW25M2.js";
import {
  __commonJS,
  __esm,
  __export,
  __privateAdd,
  __privateGet,
  __privateMethod,
  __privateSet,
  __privateWrapper,
  __publicField,
  __require,
  __toCommonJS,
  __toESM
} from "./chunk-OL46QLBJ.js";

// node_modules/@noble/hashes/crypto.js
var require_crypto2 = __commonJS({
  "node_modules/@noble/hashes/crypto.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.crypto = void 0;
    exports2.crypto = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
  }
});

// node_modules/@noble/hashes/utils.js
var require_utils = __commonJS({
  "node_modules/@noble/hashes/utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.wrapXOFConstructorWithOpts = exports2.wrapConstructorWithOpts = exports2.wrapConstructor = exports2.Hash = exports2.nextTick = exports2.swap32IfBE = exports2.byteSwapIfBE = exports2.swap8IfBE = exports2.isLE = void 0;
    exports2.isBytes = isBytes;
    exports2.anumber = anumber2;
    exports2.abytes = abytes2;
    exports2.ahash = ahash;
    exports2.aexists = aexists2;
    exports2.aoutput = aoutput2;
    exports2.u8 = u82;
    exports2.u32 = u323;
    exports2.clean = clean2;
    exports2.createView = createView;
    exports2.rotr = rotr;
    exports2.rotl = rotl;
    exports2.byteSwap = byteSwap;
    exports2.byteSwap32 = byteSwap32;
    exports2.bytesToHex = bytesToHex;
    exports2.hexToBytes = hexToBytes;
    exports2.asyncLoop = asyncLoop;
    exports2.utf8ToBytes = utf8ToBytes;
    exports2.bytesToUtf8 = bytesToUtf8;
    exports2.toBytes = toBytes2;
    exports2.kdfInputToBytes = kdfInputToBytes;
    exports2.concatBytes = concatBytes2;
    exports2.checkOpts = checkOpts;
    exports2.createHasher = createHasher3;
    exports2.createOptHasher = createOptHasher;
    exports2.createXOFer = createXOFer2;
    exports2.randomBytes = randomBytes2;
    var crypto_1 = require_crypto2();
    function isBytes(a) {
      return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === "Uint8Array";
    }
    function anumber2(n) {
      if (!Number.isSafeInteger(n) || n < 0)
        throw new Error("positive integer expected, got " + n);
    }
    function abytes2(b, ...lengths) {
      if (!isBytes(b))
        throw new Error("Uint8Array expected");
      if (lengths.length > 0 && !lengths.includes(b.length))
        throw new Error("Uint8Array expected of length " + lengths + ", got length=" + b.length);
    }
    function ahash(h) {
      if (typeof h !== "function" || typeof h.create !== "function")
        throw new Error("Hash should be wrapped by utils.createHasher");
      anumber2(h.outputLen);
      anumber2(h.blockLen);
    }
    function aexists2(instance2, checkFinished = true) {
      if (instance2.destroyed)
        throw new Error("Hash instance has been destroyed");
      if (checkFinished && instance2.finished)
        throw new Error("Hash#digest() has already been called");
    }
    function aoutput2(out, instance2) {
      abytes2(out);
      const min = instance2.outputLen;
      if (out.length < min) {
        throw new Error("digestInto() expects output buffer of length at least " + min);
      }
    }
    function u82(arr) {
      return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
    }
    function u323(arr) {
      return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
    }
    function clean2(...arrays) {
      for (let i = 0; i < arrays.length; i++) {
        arrays[i].fill(0);
      }
    }
    function createView(arr) {
      return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
    }
    function rotr(word, shift) {
      return word << 32 - shift | word >>> shift;
    }
    function rotl(word, shift) {
      return word << shift | word >>> 32 - shift >>> 0;
    }
    exports2.isLE = (() => new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68)();
    function byteSwap(word) {
      return word << 24 & 4278190080 | word << 8 & 16711680 | word >>> 8 & 65280 | word >>> 24 & 255;
    }
    exports2.swap8IfBE = exports2.isLE ? (n) => n : (n) => byteSwap(n);
    exports2.byteSwapIfBE = exports2.swap8IfBE;
    function byteSwap32(arr) {
      for (let i = 0; i < arr.length; i++) {
        arr[i] = byteSwap(arr[i]);
      }
      return arr;
    }
    exports2.swap32IfBE = exports2.isLE ? (u) => u : byteSwap32;
    var hasHexBuiltin = (() => (
      // @ts-ignore
      typeof Uint8Array.from([]).toHex === "function" && typeof Uint8Array.fromHex === "function"
    ))();
    var hexes = Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
    function bytesToHex(bytes) {
      abytes2(bytes);
      if (hasHexBuiltin)
        return bytes.toHex();
      let hex = "";
      for (let i = 0; i < bytes.length; i++) {
        hex += hexes[bytes[i]];
      }
      return hex;
    }
    var asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
    function asciiToBase16(ch) {
      if (ch >= asciis._0 && ch <= asciis._9)
        return ch - asciis._0;
      if (ch >= asciis.A && ch <= asciis.F)
        return ch - (asciis.A - 10);
      if (ch >= asciis.a && ch <= asciis.f)
        return ch - (asciis.a - 10);
      return;
    }
    function hexToBytes(hex) {
      if (typeof hex !== "string")
        throw new Error("hex string expected, got " + typeof hex);
      if (hasHexBuiltin)
        return Uint8Array.fromHex(hex);
      const hl = hex.length;
      const al = hl / 2;
      if (hl % 2)
        throw new Error("hex string expected, got unpadded hex of length " + hl);
      const array2 = new Uint8Array(al);
      for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
        const n1 = asciiToBase16(hex.charCodeAt(hi));
        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));
        if (n1 === void 0 || n2 === void 0) {
          const char = hex[hi] + hex[hi + 1];
          throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
        }
        array2[ai] = n1 * 16 + n2;
      }
      return array2;
    }
    var nextTick = async () => {
    };
    exports2.nextTick = nextTick;
    async function asyncLoop(iters, tick, cb) {
      let ts = Date.now();
      for (let i = 0; i < iters; i++) {
        cb(i);
        const diff = Date.now() - ts;
        if (diff >= 0 && diff < tick)
          continue;
        await (0, exports2.nextTick)();
        ts += diff;
      }
    }
    function utf8ToBytes(str) {
      if (typeof str !== "string")
        throw new Error("string expected");
      return new Uint8Array(new TextEncoder().encode(str));
    }
    function bytesToUtf8(bytes) {
      return new TextDecoder().decode(bytes);
    }
    function toBytes2(data) {
      if (typeof data === "string")
        data = utf8ToBytes(data);
      abytes2(data);
      return data;
    }
    function kdfInputToBytes(data) {
      if (typeof data === "string")
        data = utf8ToBytes(data);
      abytes2(data);
      return data;
    }
    function concatBytes2(...arrays) {
      let sum = 0;
      for (let i = 0; i < arrays.length; i++) {
        const a = arrays[i];
        abytes2(a);
        sum += a.length;
      }
      const res = new Uint8Array(sum);
      for (let i = 0, pad = 0; i < arrays.length; i++) {
        const a = arrays[i];
        res.set(a, pad);
        pad += a.length;
      }
      return res;
    }
    function checkOpts(defaults, opts) {
      if (opts !== void 0 && {}.toString.call(opts) !== "[object Object]")
        throw new Error("options should be object or undefined");
      const merged = Object.assign(defaults, opts);
      return merged;
    }
    var Hash2 = class {
    };
    exports2.Hash = Hash2;
    function createHasher3(hashCons) {
      const hashC = (msg) => hashCons().update(toBytes2(msg)).digest();
      const tmp = hashCons();
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = () => hashCons();
      return hashC;
    }
    function createOptHasher(hashCons) {
      const hashC = (msg, opts) => hashCons(opts).update(toBytes2(msg)).digest();
      const tmp = hashCons({});
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = (opts) => hashCons(opts);
      return hashC;
    }
    function createXOFer2(hashCons) {
      const hashC = (msg, opts) => hashCons(opts).update(toBytes2(msg)).digest();
      const tmp = hashCons({});
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = (opts) => hashCons(opts);
      return hashC;
    }
    exports2.wrapConstructor = createHasher3;
    exports2.wrapConstructorWithOpts = createOptHasher;
    exports2.wrapXOFConstructorWithOpts = createXOFer2;
    function randomBytes2(bytesLength = 32) {
      if (crypto_1.crypto && typeof crypto_1.crypto.getRandomValues === "function") {
        return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength));
      }
      if (crypto_1.crypto && typeof crypto_1.crypto.randomBytes === "function") {
        return Uint8Array.from(crypto_1.crypto.randomBytes(bytesLength));
      }
      throw new Error("crypto.getRandomValues must be defined");
    }
  }
});

// node_modules/@noble/hashes/_md.js
var require_md = __commonJS({
  "node_modules/@noble/hashes/_md.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SHA512_IV = exports2.SHA384_IV = exports2.SHA224_IV = exports2.SHA256_IV = exports2.HashMD = void 0;
    exports2.setBigUint64 = setBigUint64;
    exports2.Chi = Chi;
    exports2.Maj = Maj;
    var utils_ts_1 = require_utils();
    function setBigUint64(view, byteOffset, value, isLE) {
      if (typeof view.setBigUint64 === "function")
        return view.setBigUint64(byteOffset, value, isLE);
      const _32n = BigInt(32);
      const _u32_max = BigInt(4294967295);
      const wh = Number(value >> _32n & _u32_max);
      const wl = Number(value & _u32_max);
      const h = isLE ? 4 : 0;
      const l = isLE ? 0 : 4;
      view.setUint32(byteOffset + h, wh, isLE);
      view.setUint32(byteOffset + l, wl, isLE);
    }
    function Chi(a, b, c) {
      return a & b ^ ~a & c;
    }
    function Maj(a, b, c) {
      return a & b ^ a & c ^ b & c;
    }
    var HashMD = class extends utils_ts_1.Hash {
      constructor(blockLen, outputLen, padOffset, isLE) {
        super();
        this.finished = false;
        this.length = 0;
        this.pos = 0;
        this.destroyed = false;
        this.blockLen = blockLen;
        this.outputLen = outputLen;
        this.padOffset = padOffset;
        this.isLE = isLE;
        this.buffer = new Uint8Array(blockLen);
        this.view = (0, utils_ts_1.createView)(this.buffer);
      }
      update(data) {
        (0, utils_ts_1.aexists)(this);
        data = (0, utils_ts_1.toBytes)(data);
        (0, utils_ts_1.abytes)(data);
        const { view, buffer, blockLen } = this;
        const len = data.length;
        for (let pos = 0; pos < len; ) {
          const take = Math.min(blockLen - this.pos, len - pos);
          if (take === blockLen) {
            const dataView = (0, utils_ts_1.createView)(data);
            for (; blockLen <= len - pos; pos += blockLen)
              this.process(dataView, pos);
            continue;
          }
          buffer.set(data.subarray(pos, pos + take), this.pos);
          this.pos += take;
          pos += take;
          if (this.pos === blockLen) {
            this.process(view, 0);
            this.pos = 0;
          }
        }
        this.length += data.length;
        this.roundClean();
        return this;
      }
      digestInto(out) {
        (0, utils_ts_1.aexists)(this);
        (0, utils_ts_1.aoutput)(out, this);
        this.finished = true;
        const { buffer, view, blockLen, isLE } = this;
        let { pos } = this;
        buffer[pos++] = 128;
        (0, utils_ts_1.clean)(this.buffer.subarray(pos));
        if (this.padOffset > blockLen - pos) {
          this.process(view, 0);
          pos = 0;
        }
        for (let i = pos; i < blockLen; i++)
          buffer[i] = 0;
        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);
        this.process(view, 0);
        const oview = (0, utils_ts_1.createView)(out);
        const len = this.outputLen;
        if (len % 4)
          throw new Error("_sha2: outputLen should be aligned to 32bit");
        const outLen = len / 4;
        const state = this.get();
        if (outLen > state.length)
          throw new Error("_sha2: outputLen bigger than state");
        for (let i = 0; i < outLen; i++)
          oview.setUint32(4 * i, state[i], isLE);
      }
      digest() {
        const { buffer, outputLen } = this;
        this.digestInto(buffer);
        const res = buffer.slice(0, outputLen);
        this.destroy();
        return res;
      }
      _cloneInto(to) {
        to || (to = new this.constructor());
        to.set(...this.get());
        const { blockLen, buffer, length, finished: finished2, destroyed, pos } = this;
        to.destroyed = destroyed;
        to.finished = finished2;
        to.length = length;
        to.pos = pos;
        if (length % blockLen)
          to.buffer.set(buffer);
        return to;
      }
      clone() {
        return this._cloneInto();
      }
    };
    exports2.HashMD = HashMD;
    exports2.SHA256_IV = Uint32Array.from([
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ]);
    exports2.SHA224_IV = Uint32Array.from([
      3238371032,
      914150663,
      812702999,
      4144912697,
      4290775857,
      1750603025,
      1694076839,
      3204075428
    ]);
    exports2.SHA384_IV = Uint32Array.from([
      3418070365,
      3238371032,
      1654270250,
      914150663,
      2438529370,
      812702999,
      355462360,
      4144912697,
      1731405415,
      4290775857,
      2394180231,
      1750603025,
      3675008525,
      1694076839,
      1203062813,
      3204075428
    ]);
    exports2.SHA512_IV = Uint32Array.from([
      1779033703,
      4089235720,
      3144134277,
      2227873595,
      1013904242,
      4271175723,
      2773480762,
      1595750129,
      1359893119,
      2917565137,
      2600822924,
      725511199,
      528734635,
      4215389547,
      1541459225,
      327033209
    ]);
  }
});

// node_modules/@noble/hashes/_u64.js
var require_u64 = __commonJS({
  "node_modules/@noble/hashes/_u64.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toBig = exports2.shrSL = exports2.shrSH = exports2.rotrSL = exports2.rotrSH = exports2.rotrBL = exports2.rotrBH = exports2.rotr32L = exports2.rotr32H = exports2.rotlSL = exports2.rotlSH = exports2.rotlBL = exports2.rotlBH = exports2.add5L = exports2.add5H = exports2.add4L = exports2.add4H = exports2.add3L = exports2.add3H = void 0;
    exports2.add = add;
    exports2.fromBig = fromBig;
    exports2.split = split2;
    var U32_MASK64 = BigInt(2 ** 32 - 1);
    var _32n = BigInt(32);
    function fromBig(n, le = false) {
      if (le)
        return { h: Number(n & U32_MASK64), l: Number(n >> _32n & U32_MASK64) };
      return { h: Number(n >> _32n & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
    }
    function split2(lst, le = false) {
      const len = lst.length;
      let Ah = new Uint32Array(len);
      let Al = new Uint32Array(len);
      for (let i = 0; i < len; i++) {
        const { h, l } = fromBig(lst[i], le);
        [Ah[i], Al[i]] = [h, l];
      }
      return [Ah, Al];
    }
    var toBig = (h, l) => BigInt(h >>> 0) << _32n | BigInt(l >>> 0);
    exports2.toBig = toBig;
    var shrSH = (h, _l, s) => h >>> s;
    exports2.shrSH = shrSH;
    var shrSL = (h, l, s) => h << 32 - s | l >>> s;
    exports2.shrSL = shrSL;
    var rotrSH = (h, l, s) => h >>> s | l << 32 - s;
    exports2.rotrSH = rotrSH;
    var rotrSL = (h, l, s) => h << 32 - s | l >>> s;
    exports2.rotrSL = rotrSL;
    var rotrBH = (h, l, s) => h << 64 - s | l >>> s - 32;
    exports2.rotrBH = rotrBH;
    var rotrBL = (h, l, s) => h >>> s - 32 | l << 64 - s;
    exports2.rotrBL = rotrBL;
    var rotr32H = (_h, l) => l;
    exports2.rotr32H = rotr32H;
    var rotr32L = (h, _l) => h;
    exports2.rotr32L = rotr32L;
    var rotlSH2 = (h, l, s) => h << s | l >>> 32 - s;
    exports2.rotlSH = rotlSH2;
    var rotlSL2 = (h, l, s) => l << s | h >>> 32 - s;
    exports2.rotlSL = rotlSL2;
    var rotlBH2 = (h, l, s) => l << s - 32 | h >>> 64 - s;
    exports2.rotlBH = rotlBH2;
    var rotlBL2 = (h, l, s) => h << s - 32 | l >>> 64 - s;
    exports2.rotlBL = rotlBL2;
    function add(Ah, Al, Bh, Bl) {
      const l = (Al >>> 0) + (Bl >>> 0);
      return { h: Ah + Bh + (l / 2 ** 32 | 0) | 0, l: l | 0 };
    }
    var add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
    exports2.add3L = add3L;
    var add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
    exports2.add3H = add3H;
    var add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
    exports2.add4L = add4L;
    var add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
    exports2.add4H = add4H;
    var add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
    exports2.add5L = add5L;
    var add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
    exports2.add5H = add5H;
    var u642 = {
      fromBig,
      split: split2,
      toBig,
      shrSH,
      shrSL,
      rotrSH,
      rotrSL,
      rotrBH,
      rotrBL,
      rotr32H,
      rotr32L,
      rotlSH: rotlSH2,
      rotlSL: rotlSL2,
      rotlBH: rotlBH2,
      rotlBL: rotlBL2,
      add,
      add3L,
      add3H,
      add4L,
      add4H,
      add5H,
      add5L
    };
    exports2.default = u642;
  }
});

// node_modules/@noble/hashes/sha2.js
var require_sha2 = __commonJS({
  "node_modules/@noble/hashes/sha2.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sha512_224 = exports2.sha512_256 = exports2.sha384 = exports2.sha512 = exports2.sha224 = exports2.sha256 = exports2.SHA512_256 = exports2.SHA512_224 = exports2.SHA384 = exports2.SHA512 = exports2.SHA224 = exports2.SHA256 = void 0;
    var _md_ts_1 = require_md();
    var u642 = require_u64();
    var utils_ts_1 = require_utils();
    var SHA256_K = Uint32Array.from([
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ]);
    var SHA256_W = new Uint32Array(64);
    var SHA256 = class extends _md_ts_1.HashMD {
      constructor(outputLen = 32) {
        super(64, outputLen, 8, false);
        this.A = _md_ts_1.SHA256_IV[0] | 0;
        this.B = _md_ts_1.SHA256_IV[1] | 0;
        this.C = _md_ts_1.SHA256_IV[2] | 0;
        this.D = _md_ts_1.SHA256_IV[3] | 0;
        this.E = _md_ts_1.SHA256_IV[4] | 0;
        this.F = _md_ts_1.SHA256_IV[5] | 0;
        this.G = _md_ts_1.SHA256_IV[6] | 0;
        this.H = _md_ts_1.SHA256_IV[7] | 0;
      }
      get() {
        const { A, B, C, D, E, F, G, H } = this;
        return [A, B, C, D, E, F, G, H];
      }
      // prettier-ignore
      set(A, B, C, D, E, F, G, H) {
        this.A = A | 0;
        this.B = B | 0;
        this.C = C | 0;
        this.D = D | 0;
        this.E = E | 0;
        this.F = F | 0;
        this.G = G | 0;
        this.H = H | 0;
      }
      process(view, offset2) {
        for (let i = 0; i < 16; i++, offset2 += 4)
          SHA256_W[i] = view.getUint32(offset2, false);
        for (let i = 16; i < 64; i++) {
          const W15 = SHA256_W[i - 15];
          const W2 = SHA256_W[i - 2];
          const s0 = (0, utils_ts_1.rotr)(W15, 7) ^ (0, utils_ts_1.rotr)(W15, 18) ^ W15 >>> 3;
          const s1 = (0, utils_ts_1.rotr)(W2, 17) ^ (0, utils_ts_1.rotr)(W2, 19) ^ W2 >>> 10;
          SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;
        }
        let { A, B, C, D, E, F, G, H } = this;
        for (let i = 0; i < 64; i++) {
          const sigma1 = (0, utils_ts_1.rotr)(E, 6) ^ (0, utils_ts_1.rotr)(E, 11) ^ (0, utils_ts_1.rotr)(E, 25);
          const T1 = H + sigma1 + (0, _md_ts_1.Chi)(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;
          const sigma0 = (0, utils_ts_1.rotr)(A, 2) ^ (0, utils_ts_1.rotr)(A, 13) ^ (0, utils_ts_1.rotr)(A, 22);
          const T2 = sigma0 + (0, _md_ts_1.Maj)(A, B, C) | 0;
          H = G;
          G = F;
          F = E;
          E = D + T1 | 0;
          D = C;
          C = B;
          B = A;
          A = T1 + T2 | 0;
        }
        A = A + this.A | 0;
        B = B + this.B | 0;
        C = C + this.C | 0;
        D = D + this.D | 0;
        E = E + this.E | 0;
        F = F + this.F | 0;
        G = G + this.G | 0;
        H = H + this.H | 0;
        this.set(A, B, C, D, E, F, G, H);
      }
      roundClean() {
        (0, utils_ts_1.clean)(SHA256_W);
      }
      destroy() {
        this.set(0, 0, 0, 0, 0, 0, 0, 0);
        (0, utils_ts_1.clean)(this.buffer);
      }
    };
    exports2.SHA256 = SHA256;
    var SHA224 = class extends SHA256 {
      constructor() {
        super(28);
        this.A = _md_ts_1.SHA224_IV[0] | 0;
        this.B = _md_ts_1.SHA224_IV[1] | 0;
        this.C = _md_ts_1.SHA224_IV[2] | 0;
        this.D = _md_ts_1.SHA224_IV[3] | 0;
        this.E = _md_ts_1.SHA224_IV[4] | 0;
        this.F = _md_ts_1.SHA224_IV[5] | 0;
        this.G = _md_ts_1.SHA224_IV[6] | 0;
        this.H = _md_ts_1.SHA224_IV[7] | 0;
      }
    };
    exports2.SHA224 = SHA224;
    var K512 = (() => u642.split([
      "0x428a2f98d728ae22",
      "0x7137449123ef65cd",
      "0xb5c0fbcfec4d3b2f",
      "0xe9b5dba58189dbbc",
      "0x3956c25bf348b538",
      "0x59f111f1b605d019",
      "0x923f82a4af194f9b",
      "0xab1c5ed5da6d8118",
      "0xd807aa98a3030242",
      "0x12835b0145706fbe",
      "0x243185be4ee4b28c",
      "0x550c7dc3d5ffb4e2",
      "0x72be5d74f27b896f",
      "0x80deb1fe3b1696b1",
      "0x9bdc06a725c71235",
      "0xc19bf174cf692694",
      "0xe49b69c19ef14ad2",
      "0xefbe4786384f25e3",
      "0x0fc19dc68b8cd5b5",
      "0x240ca1cc77ac9c65",
      "0x2de92c6f592b0275",
      "0x4a7484aa6ea6e483",
      "0x5cb0a9dcbd41fbd4",
      "0x76f988da831153b5",
      "0x983e5152ee66dfab",
      "0xa831c66d2db43210",
      "0xb00327c898fb213f",
      "0xbf597fc7beef0ee4",
      "0xc6e00bf33da88fc2",
      "0xd5a79147930aa725",
      "0x06ca6351e003826f",
      "0x142929670a0e6e70",
      "0x27b70a8546d22ffc",
      "0x2e1b21385c26c926",
      "0x4d2c6dfc5ac42aed",
      "0x53380d139d95b3df",
      "0x650a73548baf63de",
      "0x766a0abb3c77b2a8",
      "0x81c2c92e47edaee6",
      "0x92722c851482353b",
      "0xa2bfe8a14cf10364",
      "0xa81a664bbc423001",
      "0xc24b8b70d0f89791",
      "0xc76c51a30654be30",
      "0xd192e819d6ef5218",
      "0xd69906245565a910",
      "0xf40e35855771202a",
      "0x106aa07032bbd1b8",
      "0x19a4c116b8d2d0c8",
      "0x1e376c085141ab53",
      "0x2748774cdf8eeb99",
      "0x34b0bcb5e19b48a8",
      "0x391c0cb3c5c95a63",
      "0x4ed8aa4ae3418acb",
      "0x5b9cca4f7763e373",
      "0x682e6ff3d6b2b8a3",
      "0x748f82ee5defb2fc",
      "0x78a5636f43172f60",
      "0x84c87814a1f0ab72",
      "0x8cc702081a6439ec",
      "0x90befffa23631e28",
      "0xa4506cebde82bde9",
      "0xbef9a3f7b2c67915",
      "0xc67178f2e372532b",
      "0xca273eceea26619c",
      "0xd186b8c721c0c207",
      "0xeada7dd6cde0eb1e",
      "0xf57d4f7fee6ed178",
      "0x06f067aa72176fba",
      "0x0a637dc5a2c898a6",
      "0x113f9804bef90dae",
      "0x1b710b35131c471b",
      "0x28db77f523047d84",
      "0x32caab7b40c72493",
      "0x3c9ebe0a15c9bebc",
      "0x431d67c49c100d4c",
      "0x4cc5d4becb3e42b6",
      "0x597f299cfc657e2a",
      "0x5fcb6fab3ad6faec",
      "0x6c44198c4a475817"
    ].map((n) => BigInt(n))))();
    var SHA512_Kh = (() => K512[0])();
    var SHA512_Kl = (() => K512[1])();
    var SHA512_W_H = new Uint32Array(80);
    var SHA512_W_L = new Uint32Array(80);
    var SHA512 = class extends _md_ts_1.HashMD {
      constructor(outputLen = 64) {
        super(128, outputLen, 16, false);
        this.Ah = _md_ts_1.SHA512_IV[0] | 0;
        this.Al = _md_ts_1.SHA512_IV[1] | 0;
        this.Bh = _md_ts_1.SHA512_IV[2] | 0;
        this.Bl = _md_ts_1.SHA512_IV[3] | 0;
        this.Ch = _md_ts_1.SHA512_IV[4] | 0;
        this.Cl = _md_ts_1.SHA512_IV[5] | 0;
        this.Dh = _md_ts_1.SHA512_IV[6] | 0;
        this.Dl = _md_ts_1.SHA512_IV[7] | 0;
        this.Eh = _md_ts_1.SHA512_IV[8] | 0;
        this.El = _md_ts_1.SHA512_IV[9] | 0;
        this.Fh = _md_ts_1.SHA512_IV[10] | 0;
        this.Fl = _md_ts_1.SHA512_IV[11] | 0;
        this.Gh = _md_ts_1.SHA512_IV[12] | 0;
        this.Gl = _md_ts_1.SHA512_IV[13] | 0;
        this.Hh = _md_ts_1.SHA512_IV[14] | 0;
        this.Hl = _md_ts_1.SHA512_IV[15] | 0;
      }
      // prettier-ignore
      get() {
        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
      }
      // prettier-ignore
      set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
        this.Ah = Ah | 0;
        this.Al = Al | 0;
        this.Bh = Bh | 0;
        this.Bl = Bl | 0;
        this.Ch = Ch | 0;
        this.Cl = Cl | 0;
        this.Dh = Dh | 0;
        this.Dl = Dl | 0;
        this.Eh = Eh | 0;
        this.El = El | 0;
        this.Fh = Fh | 0;
        this.Fl = Fl | 0;
        this.Gh = Gh | 0;
        this.Gl = Gl | 0;
        this.Hh = Hh | 0;
        this.Hl = Hl | 0;
      }
      process(view, offset2) {
        for (let i = 0; i < 16; i++, offset2 += 4) {
          SHA512_W_H[i] = view.getUint32(offset2);
          SHA512_W_L[i] = view.getUint32(offset2 += 4);
        }
        for (let i = 16; i < 80; i++) {
          const W15h = SHA512_W_H[i - 15] | 0;
          const W15l = SHA512_W_L[i - 15] | 0;
          const s0h = u642.rotrSH(W15h, W15l, 1) ^ u642.rotrSH(W15h, W15l, 8) ^ u642.shrSH(W15h, W15l, 7);
          const s0l = u642.rotrSL(W15h, W15l, 1) ^ u642.rotrSL(W15h, W15l, 8) ^ u642.shrSL(W15h, W15l, 7);
          const W2h = SHA512_W_H[i - 2] | 0;
          const W2l = SHA512_W_L[i - 2] | 0;
          const s1h = u642.rotrSH(W2h, W2l, 19) ^ u642.rotrBH(W2h, W2l, 61) ^ u642.shrSH(W2h, W2l, 6);
          const s1l = u642.rotrSL(W2h, W2l, 19) ^ u642.rotrBL(W2h, W2l, 61) ^ u642.shrSL(W2h, W2l, 6);
          const SUMl = u642.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);
          const SUMh = u642.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);
          SHA512_W_H[i] = SUMh | 0;
          SHA512_W_L[i] = SUMl | 0;
        }
        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
        for (let i = 0; i < 80; i++) {
          const sigma1h = u642.rotrSH(Eh, El, 14) ^ u642.rotrSH(Eh, El, 18) ^ u642.rotrBH(Eh, El, 41);
          const sigma1l = u642.rotrSL(Eh, El, 14) ^ u642.rotrSL(Eh, El, 18) ^ u642.rotrBL(Eh, El, 41);
          const CHIh = Eh & Fh ^ ~Eh & Gh;
          const CHIl = El & Fl ^ ~El & Gl;
          const T1ll = u642.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);
          const T1h = u642.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);
          const T1l = T1ll | 0;
          const sigma0h = u642.rotrSH(Ah, Al, 28) ^ u642.rotrBH(Ah, Al, 34) ^ u642.rotrBH(Ah, Al, 39);
          const sigma0l = u642.rotrSL(Ah, Al, 28) ^ u642.rotrBL(Ah, Al, 34) ^ u642.rotrBL(Ah, Al, 39);
          const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;
          const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;
          Hh = Gh | 0;
          Hl = Gl | 0;
          Gh = Fh | 0;
          Gl = Fl | 0;
          Fh = Eh | 0;
          Fl = El | 0;
          ({ h: Eh, l: El } = u642.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
          Dh = Ch | 0;
          Dl = Cl | 0;
          Ch = Bh | 0;
          Cl = Bl | 0;
          Bh = Ah | 0;
          Bl = Al | 0;
          const All = u642.add3L(T1l, sigma0l, MAJl);
          Ah = u642.add3H(All, T1h, sigma0h, MAJh);
          Al = All | 0;
        }
        ({ h: Ah, l: Al } = u642.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
        ({ h: Bh, l: Bl } = u642.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
        ({ h: Ch, l: Cl } = u642.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
        ({ h: Dh, l: Dl } = u642.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
        ({ h: Eh, l: El } = u642.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
        ({ h: Fh, l: Fl } = u642.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
        ({ h: Gh, l: Gl } = u642.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
        ({ h: Hh, l: Hl } = u642.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
      }
      roundClean() {
        (0, utils_ts_1.clean)(SHA512_W_H, SHA512_W_L);
      }
      destroy() {
        (0, utils_ts_1.clean)(this.buffer);
        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      }
    };
    exports2.SHA512 = SHA512;
    var SHA384 = class extends SHA512 {
      constructor() {
        super(48);
        this.Ah = _md_ts_1.SHA384_IV[0] | 0;
        this.Al = _md_ts_1.SHA384_IV[1] | 0;
        this.Bh = _md_ts_1.SHA384_IV[2] | 0;
        this.Bl = _md_ts_1.SHA384_IV[3] | 0;
        this.Ch = _md_ts_1.SHA384_IV[4] | 0;
        this.Cl = _md_ts_1.SHA384_IV[5] | 0;
        this.Dh = _md_ts_1.SHA384_IV[6] | 0;
        this.Dl = _md_ts_1.SHA384_IV[7] | 0;
        this.Eh = _md_ts_1.SHA384_IV[8] | 0;
        this.El = _md_ts_1.SHA384_IV[9] | 0;
        this.Fh = _md_ts_1.SHA384_IV[10] | 0;
        this.Fl = _md_ts_1.SHA384_IV[11] | 0;
        this.Gh = _md_ts_1.SHA384_IV[12] | 0;
        this.Gl = _md_ts_1.SHA384_IV[13] | 0;
        this.Hh = _md_ts_1.SHA384_IV[14] | 0;
        this.Hl = _md_ts_1.SHA384_IV[15] | 0;
      }
    };
    exports2.SHA384 = SHA384;
    var T224_IV = Uint32Array.from([
      2352822216,
      424955298,
      1944164710,
      2312950998,
      502970286,
      855612546,
      1738396948,
      1479516111,
      258812777,
      2077511080,
      2011393907,
      79989058,
      1067287976,
      1780299464,
      286451373,
      2446758561
    ]);
    var T256_IV = Uint32Array.from([
      573645204,
      4230739756,
      2673172387,
      3360449730,
      596883563,
      1867755857,
      2520282905,
      1497426621,
      2519219938,
      2827943907,
      3193839141,
      1401305490,
      721525244,
      746961066,
      246885852,
      2177182882
    ]);
    var SHA512_224 = class extends SHA512 {
      constructor() {
        super(28);
        this.Ah = T224_IV[0] | 0;
        this.Al = T224_IV[1] | 0;
        this.Bh = T224_IV[2] | 0;
        this.Bl = T224_IV[3] | 0;
        this.Ch = T224_IV[4] | 0;
        this.Cl = T224_IV[5] | 0;
        this.Dh = T224_IV[6] | 0;
        this.Dl = T224_IV[7] | 0;
        this.Eh = T224_IV[8] | 0;
        this.El = T224_IV[9] | 0;
        this.Fh = T224_IV[10] | 0;
        this.Fl = T224_IV[11] | 0;
        this.Gh = T224_IV[12] | 0;
        this.Gl = T224_IV[13] | 0;
        this.Hh = T224_IV[14] | 0;
        this.Hl = T224_IV[15] | 0;
      }
    };
    exports2.SHA512_224 = SHA512_224;
    var SHA512_256 = class extends SHA512 {
      constructor() {
        super(32);
        this.Ah = T256_IV[0] | 0;
        this.Al = T256_IV[1] | 0;
        this.Bh = T256_IV[2] | 0;
        this.Bl = T256_IV[3] | 0;
        this.Ch = T256_IV[4] | 0;
        this.Cl = T256_IV[5] | 0;
        this.Dh = T256_IV[6] | 0;
        this.Dl = T256_IV[7] | 0;
        this.Eh = T256_IV[8] | 0;
        this.El = T256_IV[9] | 0;
        this.Fh = T256_IV[10] | 0;
        this.Fl = T256_IV[11] | 0;
        this.Gh = T256_IV[12] | 0;
        this.Gl = T256_IV[13] | 0;
        this.Hh = T256_IV[14] | 0;
        this.Hl = T256_IV[15] | 0;
      }
    };
    exports2.SHA512_256 = SHA512_256;
    exports2.sha256 = (0, utils_ts_1.createHasher)(() => new SHA256());
    exports2.sha224 = (0, utils_ts_1.createHasher)(() => new SHA224());
    exports2.sha512 = (0, utils_ts_1.createHasher)(() => new SHA512());
    exports2.sha384 = (0, utils_ts_1.createHasher)(() => new SHA384());
    exports2.sha512_256 = (0, utils_ts_1.createHasher)(() => new SHA512_256());
    exports2.sha512_224 = (0, utils_ts_1.createHasher)(() => new SHA512_224());
  }
});

// node_modules/@noble/curves/abstract/utils.js
var require_utils2 = __commonJS({
  "node_modules/@noble/curves/abstract/utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.notImplemented = exports2.bitMask = void 0;
    exports2.isBytes = isBytes;
    exports2.abytes = abytes2;
    exports2.abool = abool;
    exports2.numberToHexUnpadded = numberToHexUnpadded;
    exports2.hexToNumber = hexToNumber;
    exports2.bytesToHex = bytesToHex;
    exports2.hexToBytes = hexToBytes;
    exports2.bytesToNumberBE = bytesToNumberBE2;
    exports2.bytesToNumberLE = bytesToNumberLE;
    exports2.numberToBytesBE = numberToBytesBE2;
    exports2.numberToBytesLE = numberToBytesLE;
    exports2.numberToVarBytesBE = numberToVarBytesBE;
    exports2.ensureBytes = ensureBytes2;
    exports2.concatBytes = concatBytes2;
    exports2.equalBytes = equalBytes;
    exports2.utf8ToBytes = utf8ToBytes;
    exports2.inRange = inRange3;
    exports2.aInRange = aInRange2;
    exports2.bitLen = bitLen;
    exports2.bitGet = bitGet;
    exports2.bitSet = bitSet;
    exports2.createHmacDrbg = createHmacDrbg;
    exports2.validateObject = validateObject;
    exports2.memoized = memoized;
    var _0n3 = BigInt(0);
    var _1n3 = BigInt(1);
    function isBytes(a) {
      return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === "Uint8Array";
    }
    function abytes2(item) {
      if (!isBytes(item))
        throw new Error("Uint8Array expected");
    }
    function abool(title, value) {
      if (typeof value !== "boolean")
        throw new Error(title + " boolean expected, got " + value);
    }
    function numberToHexUnpadded(num2) {
      const hex = num2.toString(16);
      return hex.length & 1 ? "0" + hex : hex;
    }
    function hexToNumber(hex) {
      if (typeof hex !== "string")
        throw new Error("hex string expected, got " + typeof hex);
      return hex === "" ? _0n3 : BigInt("0x" + hex);
    }
    var hasHexBuiltin = (
      // @ts-ignore
      typeof Uint8Array.from([]).toHex === "function" && typeof Uint8Array.fromHex === "function"
    );
    var hexes = Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
    function bytesToHex(bytes) {
      abytes2(bytes);
      if (hasHexBuiltin)
        return bytes.toHex();
      let hex = "";
      for (let i = 0; i < bytes.length; i++) {
        hex += hexes[bytes[i]];
      }
      return hex;
    }
    var asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
    function asciiToBase16(ch) {
      if (ch >= asciis._0 && ch <= asciis._9)
        return ch - asciis._0;
      if (ch >= asciis.A && ch <= asciis.F)
        return ch - (asciis.A - 10);
      if (ch >= asciis.a && ch <= asciis.f)
        return ch - (asciis.a - 10);
      return;
    }
    function hexToBytes(hex) {
      if (typeof hex !== "string")
        throw new Error("hex string expected, got " + typeof hex);
      if (hasHexBuiltin)
        return Uint8Array.fromHex(hex);
      const hl = hex.length;
      const al = hl / 2;
      if (hl % 2)
        throw new Error("hex string expected, got unpadded hex of length " + hl);
      const array2 = new Uint8Array(al);
      for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
        const n1 = asciiToBase16(hex.charCodeAt(hi));
        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));
        if (n1 === void 0 || n2 === void 0) {
          const char = hex[hi] + hex[hi + 1];
          throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
        }
        array2[ai] = n1 * 16 + n2;
      }
      return array2;
    }
    function bytesToNumberBE2(bytes) {
      return hexToNumber(bytesToHex(bytes));
    }
    function bytesToNumberLE(bytes) {
      abytes2(bytes);
      return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));
    }
    function numberToBytesBE2(n, len) {
      return hexToBytes(n.toString(16).padStart(len * 2, "0"));
    }
    function numberToBytesLE(n, len) {
      return numberToBytesBE2(n, len).reverse();
    }
    function numberToVarBytesBE(n) {
      return hexToBytes(numberToHexUnpadded(n));
    }
    function ensureBytes2(title, hex, expectedLength) {
      let res;
      if (typeof hex === "string") {
        try {
          res = hexToBytes(hex);
        } catch (e) {
          throw new Error(title + " must be hex string or Uint8Array, cause: " + e);
        }
      } else if (isBytes(hex)) {
        res = Uint8Array.from(hex);
      } else {
        throw new Error(title + " must be hex string or Uint8Array");
      }
      const len = res.length;
      if (typeof expectedLength === "number" && len !== expectedLength)
        throw new Error(title + " of length " + expectedLength + " expected, got " + len);
      return res;
    }
    function concatBytes2(...arrays) {
      let sum = 0;
      for (let i = 0; i < arrays.length; i++) {
        const a = arrays[i];
        abytes2(a);
        sum += a.length;
      }
      const res = new Uint8Array(sum);
      for (let i = 0, pad = 0; i < arrays.length; i++) {
        const a = arrays[i];
        res.set(a, pad);
        pad += a.length;
      }
      return res;
    }
    function equalBytes(a, b) {
      if (a.length !== b.length)
        return false;
      let diff = 0;
      for (let i = 0; i < a.length; i++)
        diff |= a[i] ^ b[i];
      return diff === 0;
    }
    function utf8ToBytes(str) {
      if (typeof str !== "string")
        throw new Error("string expected");
      return new Uint8Array(new TextEncoder().encode(str));
    }
    var isPosBig = (n) => typeof n === "bigint" && _0n3 <= n;
    function inRange3(n, min, max) {
      return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;
    }
    function aInRange2(title, n, min, max) {
      if (!inRange3(n, min, max))
        throw new Error("expected valid " + title + ": " + min + " <= n < " + max + ", got " + n);
    }
    function bitLen(n) {
      let len;
      for (len = 0; n > _0n3; n >>= _1n3, len += 1)
        ;
      return len;
    }
    function bitGet(n, pos) {
      return n >> BigInt(pos) & _1n3;
    }
    function bitSet(n, pos, value) {
      return n | (value ? _1n3 : _0n3) << BigInt(pos);
    }
    var bitMask = (n) => (_1n3 << BigInt(n)) - _1n3;
    exports2.bitMask = bitMask;
    var u8n = (len) => new Uint8Array(len);
    var u8fr = (arr) => Uint8Array.from(arr);
    function createHmacDrbg(hashLen, qByteLen, hmacFn) {
      if (typeof hashLen !== "number" || hashLen < 2)
        throw new Error("hashLen must be a number");
      if (typeof qByteLen !== "number" || qByteLen < 2)
        throw new Error("qByteLen must be a number");
      if (typeof hmacFn !== "function")
        throw new Error("hmacFn must be a function");
      let v = u8n(hashLen);
      let k = u8n(hashLen);
      let i = 0;
      const reset = () => {
        v.fill(1);
        k.fill(0);
        i = 0;
      };
      const h = (...b) => hmacFn(k, v, ...b);
      const reseed = (seed = u8n(0)) => {
        k = h(u8fr([0]), seed);
        v = h();
        if (seed.length === 0)
          return;
        k = h(u8fr([1]), seed);
        v = h();
      };
      const gen2 = () => {
        if (i++ >= 1e3)
          throw new Error("drbg: tried 1000 values");
        let len = 0;
        const out = [];
        while (len < qByteLen) {
          v = h();
          const sl = v.slice();
          out.push(sl);
          len += v.length;
        }
        return concatBytes2(...out);
      };
      const genUntil = (seed, pred) => {
        reset();
        reseed(seed);
        let res = void 0;
        while (!(res = pred(gen2())))
          reseed();
        reset();
        return res;
      };
      return genUntil;
    }
    var validatorFns = {
      bigint: (val) => typeof val === "bigint",
      function: (val) => typeof val === "function",
      boolean: (val) => typeof val === "boolean",
      string: (val) => typeof val === "string",
      stringOrUint8Array: (val) => typeof val === "string" || isBytes(val),
      isSafeInteger: (val) => Number.isSafeInteger(val),
      array: (val) => Array.isArray(val),
      field: (val, object) => object.Fp.isValid(val),
      hash: (val) => typeof val === "function" && Number.isSafeInteger(val.outputLen)
    };
    function validateObject(object, validators, optValidators = {}) {
      const checkField = (fieldName, type2, isOptional) => {
        const checkVal = validatorFns[type2];
        if (typeof checkVal !== "function")
          throw new Error("invalid validator function");
        const val = object[fieldName];
        if (isOptional && val === void 0)
          return;
        if (!checkVal(val, object)) {
          throw new Error("param " + String(fieldName) + " is invalid. Expected " + type2 + ", got " + val);
        }
      };
      for (const [fieldName, type2] of Object.entries(validators))
        checkField(fieldName, type2, false);
      for (const [fieldName, type2] of Object.entries(optValidators))
        checkField(fieldName, type2, true);
      return object;
    }
    var notImplemented = () => {
      throw new Error("not implemented");
    };
    exports2.notImplemented = notImplemented;
    function memoized(fn) {
      const map = /* @__PURE__ */ new WeakMap();
      return (arg, ...args) => {
        const val = map.get(arg);
        if (val !== void 0)
          return val;
        const computed = fn(arg, ...args);
        map.set(arg, computed);
        return computed;
      };
    }
  }
});

// node_modules/@noble/curves/abstract/modular.js
var require_modular = __commonJS({
  "node_modules/@noble/curves/abstract/modular.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isNegativeLE = void 0;
    exports2.mod = mod2;
    exports2.pow = pow;
    exports2.pow2 = pow22;
    exports2.invert = invert;
    exports2.tonelliShanks = tonelliShanks;
    exports2.FpSqrt = FpSqrt;
    exports2.validateField = validateField;
    exports2.FpPow = FpPow;
    exports2.FpInvertBatch = FpInvertBatch;
    exports2.FpDiv = FpDiv;
    exports2.FpLegendre = FpLegendre;
    exports2.FpIsSquare = FpIsSquare;
    exports2.nLength = nLength;
    exports2.Field = Field2;
    exports2.FpSqrtOdd = FpSqrtOdd;
    exports2.FpSqrtEven = FpSqrtEven;
    exports2.hashToPrivateScalar = hashToPrivateScalar;
    exports2.getFieldBytesLength = getFieldBytesLength;
    exports2.getMinHashLength = getMinHashLength;
    exports2.mapHashToField = mapHashToField;
    var utils_1 = require_utils();
    var utils_ts_1 = require_utils2();
    var _0n3 = BigInt(0);
    var _1n3 = BigInt(1);
    var _2n3 = BigInt(2);
    var _3n = BigInt(3);
    var _4n = BigInt(4);
    var _5n = BigInt(5);
    var _8n = BigInt(8);
    var _9n = BigInt(9);
    var _16n = BigInt(16);
    function mod2(a, b) {
      const result = a % b;
      return result >= _0n3 ? result : b + result;
    }
    function pow(num2, power, modulo) {
      if (power < _0n3)
        throw new Error("invalid exponent, negatives unsupported");
      if (modulo <= _0n3)
        throw new Error("invalid modulus");
      if (modulo === _1n3)
        return _0n3;
      let res = _1n3;
      while (power > _0n3) {
        if (power & _1n3)
          res = res * num2 % modulo;
        num2 = num2 * num2 % modulo;
        power >>= _1n3;
      }
      return res;
    }
    function pow22(x, power, modulo) {
      let res = x;
      while (power-- > _0n3) {
        res *= res;
        res %= modulo;
      }
      return res;
    }
    function invert(number2, modulo) {
      if (number2 === _0n3)
        throw new Error("invert: expected non-zero number");
      if (modulo <= _0n3)
        throw new Error("invert: expected positive modulus, got " + modulo);
      let a = mod2(number2, modulo);
      let b = modulo;
      let x = _0n3, y = _1n3, u = _1n3, v = _0n3;
      while (a !== _0n3) {
        const q = b / a;
        const r = b % a;
        const m = x - u * q;
        const n = y - v * q;
        b = a, a = r, x = u, y = v, u = m, v = n;
      }
      const gcd = b;
      if (gcd !== _1n3)
        throw new Error("invert: does not exist");
      return mod2(x, modulo);
    }
    function tonelliShanks(P) {
      let Q = P - _1n3;
      let S = 0;
      while (Q % _2n3 === _0n3) {
        Q /= _2n3;
        S++;
      }
      let Z = _2n3;
      const _Fp = Field2(P);
      while (Z < P && FpIsSquare(_Fp, Z)) {
        if (Z++ > 1e3)
          throw new Error("Cannot find square root: probably non-prime P");
      }
      if (S === 1) {
        const p1div4 = (P + _1n3) / _4n;
        return function tonelliFast(Fp, n) {
          const root2 = Fp.pow(n, p1div4);
          if (!Fp.eql(Fp.sqr(root2), n))
            throw new Error("Cannot find square root");
          return root2;
        };
      }
      const Q1div2 = (Q + _1n3) / _2n3;
      return function tonelliSlow(Fp, n) {
        if (!FpIsSquare(Fp, n))
          throw new Error("Cannot find square root");
        let r = S;
        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q);
        let x = Fp.pow(n, Q1div2);
        let b = Fp.pow(n, Q);
        while (!Fp.eql(b, Fp.ONE)) {
          if (Fp.eql(b, Fp.ZERO))
            return Fp.ZERO;
          let m = 1;
          for (let t2 = Fp.sqr(b); m < r; m++) {
            if (Fp.eql(t2, Fp.ONE))
              break;
            t2 = Fp.sqr(t2);
          }
          const ge = Fp.pow(g, _1n3 << BigInt(r - m - 1));
          g = Fp.sqr(ge);
          x = Fp.mul(x, ge);
          b = Fp.mul(b, g);
          r = m;
        }
        return x;
      };
    }
    function FpSqrt(P) {
      if (P % _4n === _3n) {
        return function sqrt3mod4(Fp, n) {
          const p1div4 = (P + _1n3) / _4n;
          const root2 = Fp.pow(n, p1div4);
          if (!Fp.eql(Fp.sqr(root2), n))
            throw new Error("Cannot find square root");
          return root2;
        };
      }
      if (P % _8n === _5n) {
        return function sqrt5mod8(Fp, n) {
          const n2 = Fp.mul(n, _2n3);
          const c1 = (P - _5n) / _8n;
          const v = Fp.pow(n2, c1);
          const nv = Fp.mul(n, v);
          const i = Fp.mul(Fp.mul(nv, _2n3), v);
          const root2 = Fp.mul(nv, Fp.sub(i, Fp.ONE));
          if (!Fp.eql(Fp.sqr(root2), n))
            throw new Error("Cannot find square root");
          return root2;
        };
      }
      if (P % _16n === _9n) {
      }
      return tonelliShanks(P);
    }
    var isNegativeLE = (num2, modulo) => (mod2(num2, modulo) & _1n3) === _1n3;
    exports2.isNegativeLE = isNegativeLE;
    var FIELD_FIELDS = [
      "create",
      "isValid",
      "is0",
      "neg",
      "inv",
      "sqrt",
      "sqr",
      "eql",
      "add",
      "sub",
      "mul",
      "pow",
      "div",
      "addN",
      "subN",
      "mulN",
      "sqrN"
    ];
    function validateField(field) {
      const initial = {
        ORDER: "bigint",
        MASK: "bigint",
        BYTES: "isSafeInteger",
        BITS: "isSafeInteger"
      };
      const opts = FIELD_FIELDS.reduce((map, val) => {
        map[val] = "function";
        return map;
      }, initial);
      return (0, utils_ts_1.validateObject)(field, opts);
    }
    function FpPow(Fp, num2, power) {
      if (power < _0n3)
        throw new Error("invalid exponent, negatives unsupported");
      if (power === _0n3)
        return Fp.ONE;
      if (power === _1n3)
        return num2;
      let p = Fp.ONE;
      let d = num2;
      while (power > _0n3) {
        if (power & _1n3)
          p = Fp.mul(p, d);
        d = Fp.sqr(d);
        power >>= _1n3;
      }
      return p;
    }
    function FpInvertBatch(Fp, nums, passZero = false) {
      const inverted = new Array(nums.length).fill(passZero ? Fp.ZERO : void 0);
      const multipliedAcc = nums.reduce((acc, num2, i) => {
        if (Fp.is0(num2))
          return acc;
        inverted[i] = acc;
        return Fp.mul(acc, num2);
      }, Fp.ONE);
      const invertedAcc = Fp.inv(multipliedAcc);
      nums.reduceRight((acc, num2, i) => {
        if (Fp.is0(num2))
          return acc;
        inverted[i] = Fp.mul(acc, inverted[i]);
        return Fp.mul(acc, num2);
      }, invertedAcc);
      return inverted;
    }
    function FpDiv(Fp, lhs, rhs) {
      return Fp.mul(lhs, typeof rhs === "bigint" ? invert(rhs, Fp.ORDER) : Fp.inv(rhs));
    }
    function FpLegendre(Fp, n) {
      const legc = (Fp.ORDER - _1n3) / _2n3;
      const powered = Fp.pow(n, legc);
      const yes = Fp.eql(powered, Fp.ONE);
      const zero = Fp.eql(powered, Fp.ZERO);
      const no = Fp.eql(powered, Fp.neg(Fp.ONE));
      if (!yes && !zero && !no)
        throw new Error("Cannot find square root: probably non-prime P");
      return yes ? 1 : zero ? 0 : -1;
    }
    function FpIsSquare(Fp, n) {
      const l = FpLegendre(Fp, n);
      return l === 0 || l === 1;
    }
    function nLength(n, nBitLength) {
      if (nBitLength !== void 0)
        (0, utils_1.anumber)(nBitLength);
      const _nBitLength = nBitLength !== void 0 ? nBitLength : n.toString(2).length;
      const nByteLength = Math.ceil(_nBitLength / 8);
      return { nBitLength: _nBitLength, nByteLength };
    }
    function Field2(ORDER, bitLen, isLE = false, redef = {}) {
      if (ORDER <= _0n3)
        throw new Error("invalid field: expected ORDER > 0, got " + ORDER);
      const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);
      if (BYTES > 2048)
        throw new Error("invalid field: expected ORDER of <= 2048 bytes");
      let sqrtP;
      const f2 = Object.freeze({
        ORDER,
        isLE,
        BITS,
        BYTES,
        MASK: (0, utils_ts_1.bitMask)(BITS),
        ZERO: _0n3,
        ONE: _1n3,
        create: (num2) => mod2(num2, ORDER),
        isValid: (num2) => {
          if (typeof num2 !== "bigint")
            throw new Error("invalid field element: expected bigint, got " + typeof num2);
          return _0n3 <= num2 && num2 < ORDER;
        },
        is0: (num2) => num2 === _0n3,
        isOdd: (num2) => (num2 & _1n3) === _1n3,
        neg: (num2) => mod2(-num2, ORDER),
        eql: (lhs, rhs) => lhs === rhs,
        sqr: (num2) => mod2(num2 * num2, ORDER),
        add: (lhs, rhs) => mod2(lhs + rhs, ORDER),
        sub: (lhs, rhs) => mod2(lhs - rhs, ORDER),
        mul: (lhs, rhs) => mod2(lhs * rhs, ORDER),
        pow: (num2, power) => FpPow(f2, num2, power),
        div: (lhs, rhs) => mod2(lhs * invert(rhs, ORDER), ORDER),
        // Same as above, but doesn't normalize
        sqrN: (num2) => num2 * num2,
        addN: (lhs, rhs) => lhs + rhs,
        subN: (lhs, rhs) => lhs - rhs,
        mulN: (lhs, rhs) => lhs * rhs,
        inv: (num2) => invert(num2, ORDER),
        sqrt: redef.sqrt || ((n) => {
          if (!sqrtP)
            sqrtP = FpSqrt(ORDER);
          return sqrtP(f2, n);
        }),
        toBytes: (num2) => isLE ? (0, utils_ts_1.numberToBytesLE)(num2, BYTES) : (0, utils_ts_1.numberToBytesBE)(num2, BYTES),
        fromBytes: (bytes) => {
          if (bytes.length !== BYTES)
            throw new Error("Field.fromBytes: expected " + BYTES + " bytes, got " + bytes.length);
          return isLE ? (0, utils_ts_1.bytesToNumberLE)(bytes) : (0, utils_ts_1.bytesToNumberBE)(bytes);
        },
        // TODO: we don't need it here, move out to separate fn
        invertBatch: (lst) => FpInvertBatch(f2, lst),
        // We can't move this out because Fp6, Fp12 implement it
        // and it's unclear what to return in there.
        cmov: (a, b, c) => c ? b : a
      });
      return Object.freeze(f2);
    }
    function FpSqrtOdd(Fp, elm) {
      if (!Fp.isOdd)
        throw new Error("Field doesn't have isOdd");
      const root2 = Fp.sqrt(elm);
      return Fp.isOdd(root2) ? root2 : Fp.neg(root2);
    }
    function FpSqrtEven(Fp, elm) {
      if (!Fp.isOdd)
        throw new Error("Field doesn't have isOdd");
      const root2 = Fp.sqrt(elm);
      return Fp.isOdd(root2) ? Fp.neg(root2) : root2;
    }
    function hashToPrivateScalar(hash, groupOrder, isLE = false) {
      hash = (0, utils_ts_1.ensureBytes)("privateHash", hash);
      const hashLen = hash.length;
      const minLen = nLength(groupOrder).nByteLength + 8;
      if (minLen < 24 || hashLen < minLen || hashLen > 1024)
        throw new Error("hashToPrivateScalar: expected " + minLen + "-1024 bytes of input, got " + hashLen);
      const num2 = isLE ? (0, utils_ts_1.bytesToNumberLE)(hash) : (0, utils_ts_1.bytesToNumberBE)(hash);
      return mod2(num2, groupOrder - _1n3) + _1n3;
    }
    function getFieldBytesLength(fieldOrder) {
      if (typeof fieldOrder !== "bigint")
        throw new Error("field order must be bigint");
      const bitLength = fieldOrder.toString(2).length;
      return Math.ceil(bitLength / 8);
    }
    function getMinHashLength(fieldOrder) {
      const length = getFieldBytesLength(fieldOrder);
      return length + Math.ceil(length / 2);
    }
    function mapHashToField(key, fieldOrder, isLE = false) {
      const len = key.length;
      const fieldLen = getFieldBytesLength(fieldOrder);
      const minLen = getMinHashLength(fieldOrder);
      if (len < 16 || len < minLen || len > 1024)
        throw new Error("expected " + minLen + "-1024 bytes of input, got " + len);
      const num2 = isLE ? (0, utils_ts_1.bytesToNumberLE)(key) : (0, utils_ts_1.bytesToNumberBE)(key);
      const reduced = mod2(num2, fieldOrder - _1n3) + _1n3;
      return isLE ? (0, utils_ts_1.numberToBytesLE)(reduced, fieldLen) : (0, utils_ts_1.numberToBytesBE)(reduced, fieldLen);
    }
  }
});

// node_modules/@noble/curves/abstract/curve.js
var require_curve = __commonJS({
  "node_modules/@noble/curves/abstract/curve.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.wNAF = wNAF;
    exports2.pippenger = pippenger;
    exports2.precomputeMSMUnsafe = precomputeMSMUnsafe;
    exports2.validateBasic = validateBasic;
    var modular_ts_1 = require_modular();
    var utils_ts_1 = require_utils2();
    var _0n3 = BigInt(0);
    var _1n3 = BigInt(1);
    function constTimeNegate(condition, item) {
      const neg = item.negate();
      return condition ? neg : item;
    }
    function validateW(W, bits) {
      if (!Number.isSafeInteger(W) || W <= 0 || W > bits)
        throw new Error("invalid window size, expected [1.." + bits + "], got W=" + W);
    }
    function calcWOpts(W, scalarBits) {
      validateW(W, scalarBits);
      const windows = Math.ceil(scalarBits / W) + 1;
      const windowSize = 2 ** (W - 1);
      const maxNumber = 2 ** W;
      const mask2 = (0, utils_ts_1.bitMask)(W);
      const shiftBy = BigInt(W);
      return { windows, windowSize, mask: mask2, maxNumber, shiftBy };
    }
    function calcOffsets(n, window2, wOpts) {
      const { windowSize, mask: mask2, maxNumber, shiftBy } = wOpts;
      let wbits = Number(n & mask2);
      let nextN = n >> shiftBy;
      if (wbits > windowSize) {
        wbits -= maxNumber;
        nextN += _1n3;
      }
      const offsetStart = window2 * windowSize;
      const offset2 = offsetStart + Math.abs(wbits) - 1;
      const isZero = wbits === 0;
      const isNeg = wbits < 0;
      const isNegF = window2 % 2 !== 0;
      const offsetF = offsetStart;
      return { nextN, offset: offset2, isZero, isNeg, isNegF, offsetF };
    }
    function validateMSMPoints(points, c) {
      if (!Array.isArray(points))
        throw new Error("array expected");
      points.forEach((p, i) => {
        if (!(p instanceof c))
          throw new Error("invalid point at index " + i);
      });
    }
    function validateMSMScalars(scalars, field) {
      if (!Array.isArray(scalars))
        throw new Error("array of scalars expected");
      scalars.forEach((s, i) => {
        if (!field.isValid(s))
          throw new Error("invalid scalar at index " + i);
      });
    }
    var pointPrecomputes = /* @__PURE__ */ new WeakMap();
    var pointWindowSizes = /* @__PURE__ */ new WeakMap();
    function getW(P) {
      return pointWindowSizes.get(P) || 1;
    }
    function wNAF(c, bits) {
      return {
        constTimeNegate,
        hasPrecomputes(elm) {
          return getW(elm) !== 1;
        },
        // non-const time multiplication ladder
        unsafeLadder(elm, n, p = c.ZERO) {
          let d = elm;
          while (n > _0n3) {
            if (n & _1n3)
              p = p.add(d);
            d = d.double();
            n >>= _1n3;
          }
          return p;
        },
        /**
         * Creates a wNAF precomputation window. Used for caching.
         * Default window size is set by `utils.precompute()` and is equal to 8.
         * Number of precomputed points depends on the curve size:
         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
         * - 𝑊 is the window size
         * - 𝑛 is the bitlength of the curve order.
         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
         * @param elm Point instance
         * @param W window size
         * @returns precomputed point tables flattened to a single array
         */
        precomputeWindow(elm, W) {
          const { windows, windowSize } = calcWOpts(W, bits);
          const points = [];
          let p = elm;
          let base = p;
          for (let window2 = 0; window2 < windows; window2++) {
            base = p;
            points.push(base);
            for (let i = 1; i < windowSize; i++) {
              base = base.add(p);
              points.push(base);
            }
            p = base.double();
          }
          return points;
        },
        /**
         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
         * @param W window size
         * @param precomputes precomputed tables
         * @param n scalar (we don't check here, but should be less than curve order)
         * @returns real and fake (for const-time) points
         */
        wNAF(W, precomputes, n) {
          let p = c.ZERO;
          let f2 = c.BASE;
          const wo = calcWOpts(W, bits);
          for (let window2 = 0; window2 < wo.windows; window2++) {
            const { nextN, offset: offset2, isZero, isNeg, isNegF, offsetF } = calcOffsets(n, window2, wo);
            n = nextN;
            if (isZero) {
              f2 = f2.add(constTimeNegate(isNegF, precomputes[offsetF]));
            } else {
              p = p.add(constTimeNegate(isNeg, precomputes[offset2]));
            }
          }
          return { p, f: f2 };
        },
        /**
         * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.
         * @param W window size
         * @param precomputes precomputed tables
         * @param n scalar (we don't check here, but should be less than curve order)
         * @param acc accumulator point to add result of multiplication
         * @returns point
         */
        wNAFUnsafe(W, precomputes, n, acc = c.ZERO) {
          const wo = calcWOpts(W, bits);
          for (let window2 = 0; window2 < wo.windows; window2++) {
            if (n === _0n3)
              break;
            const { nextN, offset: offset2, isZero, isNeg } = calcOffsets(n, window2, wo);
            n = nextN;
            if (isZero) {
              continue;
            } else {
              const item = precomputes[offset2];
              acc = acc.add(isNeg ? item.negate() : item);
            }
          }
          return acc;
        },
        getPrecomputes(W, P, transform) {
          let comp = pointPrecomputes.get(P);
          if (!comp) {
            comp = this.precomputeWindow(P, W);
            if (W !== 1)
              pointPrecomputes.set(P, transform(comp));
          }
          return comp;
        },
        wNAFCached(P, n, transform) {
          const W = getW(P);
          return this.wNAF(W, this.getPrecomputes(W, P, transform), n);
        },
        wNAFCachedUnsafe(P, n, transform, prev) {
          const W = getW(P);
          if (W === 1)
            return this.unsafeLadder(P, n, prev);
          return this.wNAFUnsafe(W, this.getPrecomputes(W, P, transform), n, prev);
        },
        // We calculate precomputes for elliptic curve point multiplication
        // using windowed method. This specifies window size and
        // stores precomputed values. Usually only base point would be precomputed.
        setWindowSize(P, W) {
          validateW(W, bits);
          pointWindowSizes.set(P, W);
          pointPrecomputes.delete(P);
        }
      };
    }
    function pippenger(c, fieldN, points, scalars) {
      validateMSMPoints(points, c);
      validateMSMScalars(scalars, fieldN);
      if (points.length !== scalars.length)
        throw new Error("arrays of points and scalars must have equal length");
      const zero = c.ZERO;
      const wbits = (0, utils_ts_1.bitLen)(BigInt(points.length));
      const windowSize = wbits > 12 ? wbits - 3 : wbits > 4 ? wbits - 2 : wbits ? 2 : 1;
      const MASK = (0, utils_ts_1.bitMask)(windowSize);
      const buckets = new Array(Number(MASK) + 1).fill(zero);
      const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;
      let sum = zero;
      for (let i = lastBits; i >= 0; i -= windowSize) {
        buckets.fill(zero);
        for (let j = 0; j < scalars.length; j++) {
          const scalar = scalars[j];
          const wbits2 = Number(scalar >> BigInt(i) & MASK);
          buckets[wbits2] = buckets[wbits2].add(points[j]);
        }
        let resI = zero;
        for (let j = buckets.length - 1, sumI = zero; j > 0; j--) {
          sumI = sumI.add(buckets[j]);
          resI = resI.add(sumI);
        }
        sum = sum.add(resI);
        if (i !== 0)
          for (let j = 0; j < windowSize; j++)
            sum = sum.double();
      }
      return sum;
    }
    function precomputeMSMUnsafe(c, fieldN, points, windowSize) {
      validateW(windowSize, fieldN.BITS);
      validateMSMPoints(points, c);
      const zero = c.ZERO;
      const tableSize = 2 ** windowSize - 1;
      const chunks = Math.ceil(fieldN.BITS / windowSize);
      const MASK = (0, utils_ts_1.bitMask)(windowSize);
      const tables = points.map((p) => {
        const res = [];
        for (let i = 0, acc = p; i < tableSize; i++) {
          res.push(acc);
          acc = acc.add(p);
        }
        return res;
      });
      return (scalars) => {
        validateMSMScalars(scalars, fieldN);
        if (scalars.length > points.length)
          throw new Error("array of scalars must be smaller than array of points");
        let res = zero;
        for (let i = 0; i < chunks; i++) {
          if (res !== zero)
            for (let j = 0; j < windowSize; j++)
              res = res.double();
          const shiftBy = BigInt(chunks * windowSize - (i + 1) * windowSize);
          for (let j = 0; j < scalars.length; j++) {
            const n = scalars[j];
            const curr = Number(n >> shiftBy & MASK);
            if (!curr)
              continue;
            res = res.add(tables[j][curr - 1]);
          }
        }
        return res;
      };
    }
    function validateBasic(curve) {
      (0, modular_ts_1.validateField)(curve.Fp);
      (0, utils_ts_1.validateObject)(curve, {
        n: "bigint",
        h: "bigint",
        Gx: "field",
        Gy: "field"
      }, {
        nBitLength: "isSafeInteger",
        nByteLength: "isSafeInteger"
      });
      return Object.freeze({
        ...(0, modular_ts_1.nLength)(curve.n, curve.nBitLength),
        ...curve,
        ...{ p: curve.Fp.ORDER }
      });
    }
  }
});

// node_modules/@noble/curves/abstract/edwards.js
var require_edwards = __commonJS({
  "node_modules/@noble/curves/abstract/edwards.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.twistedEdwards = twistedEdwards;
    var curve_ts_1 = require_curve();
    var modular_ts_1 = require_modular();
    var utils_ts_1 = require_utils2();
    var _0n3 = BigInt(0);
    var _1n3 = BigInt(1);
    var _2n3 = BigInt(2);
    var _8n = BigInt(8);
    var VERIFY_DEFAULT = { zip215: true };
    function validateOpts(curve) {
      const opts = (0, curve_ts_1.validateBasic)(curve);
      (0, utils_ts_1.validateObject)(curve, {
        hash: "function",
        a: "bigint",
        d: "bigint",
        randomBytes: "function"
      }, {
        adjustScalarBytes: "function",
        domain: "function",
        uvRatio: "function",
        mapToCurve: "function"
      });
      return Object.freeze({ ...opts });
    }
    function twistedEdwards(curveDef) {
      const CURVE = validateOpts(curveDef);
      const { Fp, n: CURVE_ORDER, prehash, hash: cHash, randomBytes: randomBytes2, nByteLength, h: cofactor } = CURVE;
      const MASK = _2n3 << BigInt(nByteLength * 8) - _1n3;
      const modP2 = Fp.create;
      const Fn = (0, modular_ts_1.Field)(CURVE.n, CURVE.nBitLength);
      const uvRatio = CURVE.uvRatio || ((u, v) => {
        try {
          return { isValid: true, value: Fp.sqrt(u * Fp.inv(v)) };
        } catch (e) {
          return { isValid: false, value: _0n3 };
        }
      });
      const adjustScalarBytes = CURVE.adjustScalarBytes || ((bytes) => bytes);
      const domain = CURVE.domain || ((data, ctx, phflag) => {
        (0, utils_ts_1.abool)("phflag", phflag);
        if (ctx.length || phflag)
          throw new Error("Contexts/pre-hash are not supported");
        return data;
      });
      function aCoordinate(title, n, banZero = false) {
        const min = banZero ? _1n3 : _0n3;
        (0, utils_ts_1.aInRange)("coordinate " + title, n, min, MASK);
      }
      function aextpoint(other) {
        if (!(other instanceof Point2))
          throw new Error("ExtendedPoint expected");
      }
      const toAffineMemo = (0, utils_ts_1.memoized)((p, iz) => {
        const { ex: x, ey: y, ez: z } = p;
        const is0 = p.is0();
        if (iz == null)
          iz = is0 ? _8n : Fp.inv(z);
        const ax = modP2(x * iz);
        const ay = modP2(y * iz);
        const zz = modP2(z * iz);
        if (is0)
          return { x: _0n3, y: _1n3 };
        if (zz !== _1n3)
          throw new Error("invZ was invalid");
        return { x: ax, y: ay };
      });
      const assertValidMemo = (0, utils_ts_1.memoized)((p) => {
        const { a, d } = CURVE;
        if (p.is0())
          throw new Error("bad point: ZERO");
        const { ex: X, ey: Y, ez: Z, et: T } = p;
        const X2 = modP2(X * X);
        const Y2 = modP2(Y * Y);
        const Z2 = modP2(Z * Z);
        const Z4 = modP2(Z2 * Z2);
        const aX2 = modP2(X2 * a);
        const left = modP2(Z2 * modP2(aX2 + Y2));
        const right = modP2(Z4 + modP2(d * modP2(X2 * Y2)));
        if (left !== right)
          throw new Error("bad point: equation left != right (1)");
        const XY = modP2(X * Y);
        const ZT = modP2(Z * T);
        if (XY !== ZT)
          throw new Error("bad point: equation left != right (2)");
        return true;
      });
      class Point2 {
        constructor(ex, ey, ez, et) {
          aCoordinate("x", ex);
          aCoordinate("y", ey);
          aCoordinate("z", ez, true);
          aCoordinate("t", et);
          this.ex = ex;
          this.ey = ey;
          this.ez = ez;
          this.et = et;
          Object.freeze(this);
        }
        get x() {
          return this.toAffine().x;
        }
        get y() {
          return this.toAffine().y;
        }
        static fromAffine(p) {
          if (p instanceof Point2)
            throw new Error("extended point not allowed");
          const { x, y } = p || {};
          aCoordinate("x", x);
          aCoordinate("y", y);
          return new Point2(x, y, _1n3, modP2(x * y));
        }
        static normalizeZ(points) {
          const toInv = (0, modular_ts_1.FpInvertBatch)(Fp, points.map((p) => p.ez));
          return points.map((p, i) => p.toAffine(toInv[i])).map(Point2.fromAffine);
        }
        // Multiscalar Multiplication
        static msm(points, scalars) {
          return (0, curve_ts_1.pippenger)(Point2, Fn, points, scalars);
        }
        // "Private method", don't use it directly
        _setWindowSize(windowSize) {
          wnaf.setWindowSize(this, windowSize);
        }
        // Not required for fromHex(), which always creates valid points.
        // Could be useful for fromAffine().
        assertValidity() {
          assertValidMemo(this);
        }
        // Compare one point to another.
        equals(other) {
          aextpoint(other);
          const { ex: X1, ey: Y1, ez: Z1 } = this;
          const { ex: X2, ey: Y2, ez: Z2 } = other;
          const X1Z2 = modP2(X1 * Z2);
          const X2Z1 = modP2(X2 * Z1);
          const Y1Z2 = modP2(Y1 * Z2);
          const Y2Z1 = modP2(Y2 * Z1);
          return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;
        }
        is0() {
          return this.equals(Point2.ZERO);
        }
        negate() {
          return new Point2(modP2(-this.ex), this.ey, this.ez, modP2(-this.et));
        }
        // Fast algo for doubling Extended Point.
        // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd
        // Cost: 4M + 4S + 1*a + 6add + 1*2.
        double() {
          const { a } = CURVE;
          const { ex: X1, ey: Y1, ez: Z1 } = this;
          const A = modP2(X1 * X1);
          const B = modP2(Y1 * Y1);
          const C = modP2(_2n3 * modP2(Z1 * Z1));
          const D = modP2(a * A);
          const x1y1 = X1 + Y1;
          const E = modP2(modP2(x1y1 * x1y1) - A - B);
          const G2 = D + B;
          const F = G2 - C;
          const H = D - B;
          const X3 = modP2(E * F);
          const Y3 = modP2(G2 * H);
          const T3 = modP2(E * H);
          const Z3 = modP2(F * G2);
          return new Point2(X3, Y3, Z3, T3);
        }
        // Fast algo for adding 2 Extended Points.
        // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd
        // Cost: 9M + 1*a + 1*d + 7add.
        add(other) {
          aextpoint(other);
          const { a, d } = CURVE;
          const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;
          const { ex: X2, ey: Y2, ez: Z2, et: T2 } = other;
          const A = modP2(X1 * X2);
          const B = modP2(Y1 * Y2);
          const C = modP2(T1 * d * T2);
          const D = modP2(Z1 * Z2);
          const E = modP2((X1 + Y1) * (X2 + Y2) - A - B);
          const F = D - C;
          const G2 = D + C;
          const H = modP2(B - a * A);
          const X3 = modP2(E * F);
          const Y3 = modP2(G2 * H);
          const T3 = modP2(E * H);
          const Z3 = modP2(F * G2);
          return new Point2(X3, Y3, Z3, T3);
        }
        subtract(other) {
          return this.add(other.negate());
        }
        wNAF(n) {
          return wnaf.wNAFCached(this, n, Point2.normalizeZ);
        }
        // Constant-time multiplication.
        multiply(scalar) {
          const n = scalar;
          (0, utils_ts_1.aInRange)("scalar", n, _1n3, CURVE_ORDER);
          const { p, f: f2 } = this.wNAF(n);
          return Point2.normalizeZ([p, f2])[0];
        }
        // Non-constant-time multiplication. Uses double-and-add algorithm.
        // It's faster, but should only be used when you don't care about
        // an exposed private key e.g. sig verification.
        // Does NOT allow scalars higher than CURVE.n.
        // Accepts optional accumulator to merge with multiply (important for sparse scalars)
        multiplyUnsafe(scalar, acc = Point2.ZERO) {
          const n = scalar;
          (0, utils_ts_1.aInRange)("scalar", n, _0n3, CURVE_ORDER);
          if (n === _0n3)
            return I;
          if (this.is0() || n === _1n3)
            return this;
          return wnaf.wNAFCachedUnsafe(this, n, Point2.normalizeZ, acc);
        }
        // Checks if point is of small order.
        // If you add something to small order point, you will have "dirty"
        // point with torsion component.
        // Multiplies point by cofactor and checks if the result is 0.
        isSmallOrder() {
          return this.multiplyUnsafe(cofactor).is0();
        }
        // Multiplies point by curve order and checks if the result is 0.
        // Returns `false` is the point is dirty.
        isTorsionFree() {
          return wnaf.unsafeLadder(this, CURVE_ORDER).is0();
        }
        // Converts Extended point to default (x, y) coordinates.
        // Can accept precomputed Z^-1 - for example, from invertBatch.
        toAffine(iz) {
          return toAffineMemo(this, iz);
        }
        clearCofactor() {
          const { h: cofactor2 } = CURVE;
          if (cofactor2 === _1n3)
            return this;
          return this.multiplyUnsafe(cofactor2);
        }
        // Converts hash string or Uint8Array to Point.
        // Uses algo from RFC8032 5.1.3.
        static fromHex(hex, zip215 = false) {
          const { d, a } = CURVE;
          const len = Fp.BYTES;
          hex = (0, utils_ts_1.ensureBytes)("pointHex", hex, len);
          (0, utils_ts_1.abool)("zip215", zip215);
          const normed = hex.slice();
          const lastByte = hex[len - 1];
          normed[len - 1] = lastByte & ~128;
          const y = (0, utils_ts_1.bytesToNumberLE)(normed);
          const max = zip215 ? MASK : Fp.ORDER;
          (0, utils_ts_1.aInRange)("pointHex.y", y, _0n3, max);
          const y2 = modP2(y * y);
          const u = modP2(y2 - _1n3);
          const v = modP2(d * y2 - a);
          let { isValid, value: x } = uvRatio(u, v);
          if (!isValid)
            throw new Error("Point.fromHex: invalid y coordinate");
          const isXOdd = (x & _1n3) === _1n3;
          const isLastByteOdd = (lastByte & 128) !== 0;
          if (!zip215 && x === _0n3 && isLastByteOdd)
            throw new Error("Point.fromHex: x=0 and x_0=1");
          if (isLastByteOdd !== isXOdd)
            x = modP2(-x);
          return Point2.fromAffine({ x, y });
        }
        static fromPrivateKey(privKey) {
          const { scalar } = getPrivateScalar(privKey);
          return G.multiply(scalar);
        }
        toRawBytes() {
          const { x, y } = this.toAffine();
          const bytes = (0, utils_ts_1.numberToBytesLE)(y, Fp.BYTES);
          bytes[bytes.length - 1] |= x & _1n3 ? 128 : 0;
          return bytes;
        }
        toHex() {
          return (0, utils_ts_1.bytesToHex)(this.toRawBytes());
        }
      }
      Point2.BASE = new Point2(CURVE.Gx, CURVE.Gy, _1n3, modP2(CURVE.Gx * CURVE.Gy));
      Point2.ZERO = new Point2(_0n3, _1n3, _1n3, _0n3);
      const { BASE: G, ZERO: I } = Point2;
      const wnaf = (0, curve_ts_1.wNAF)(Point2, nByteLength * 8);
      function modN2(a) {
        return (0, modular_ts_1.mod)(a, CURVE_ORDER);
      }
      function modN_LE(hash) {
        return modN2((0, utils_ts_1.bytesToNumberLE)(hash));
      }
      function getPrivateScalar(key) {
        const len = Fp.BYTES;
        key = (0, utils_ts_1.ensureBytes)("private key", key, len);
        const hashed = (0, utils_ts_1.ensureBytes)("hashed private key", cHash(key), 2 * len);
        const head = adjustScalarBytes(hashed.slice(0, len));
        const prefix = hashed.slice(len, 2 * len);
        const scalar = modN_LE(head);
        return { head, prefix, scalar };
      }
      function getExtendedPublicKey(key) {
        const { head, prefix, scalar } = getPrivateScalar(key);
        const point = G.multiply(scalar);
        const pointBytes = point.toRawBytes();
        return { head, prefix, scalar, point, pointBytes };
      }
      function getPublicKey2(privKey) {
        return getExtendedPublicKey(privKey).pointBytes;
      }
      function hashDomainToScalar(context = Uint8Array.of(), ...msgs) {
        const msg = (0, utils_ts_1.concatBytes)(...msgs);
        return modN_LE(cHash(domain(msg, (0, utils_ts_1.ensureBytes)("context", context), !!prehash)));
      }
      function sign2(msg, privKey, options = {}) {
        msg = (0, utils_ts_1.ensureBytes)("message", msg);
        if (prehash)
          msg = prehash(msg);
        const { prefix, scalar, pointBytes } = getExtendedPublicKey(privKey);
        const r = hashDomainToScalar(options.context, prefix, msg);
        const R = G.multiply(r).toRawBytes();
        const k = hashDomainToScalar(options.context, R, pointBytes, msg);
        const s = modN2(r + k * scalar);
        (0, utils_ts_1.aInRange)("signature.s", s, _0n3, CURVE_ORDER);
        const res = (0, utils_ts_1.concatBytes)(R, (0, utils_ts_1.numberToBytesLE)(s, Fp.BYTES));
        return (0, utils_ts_1.ensureBytes)("result", res, Fp.BYTES * 2);
      }
      const verifyOpts = VERIFY_DEFAULT;
      function verify2(sig, msg, publicKey2, options = verifyOpts) {
        const { context, zip215 } = options;
        const len = Fp.BYTES;
        sig = (0, utils_ts_1.ensureBytes)("signature", sig, 2 * len);
        msg = (0, utils_ts_1.ensureBytes)("message", msg);
        publicKey2 = (0, utils_ts_1.ensureBytes)("publicKey", publicKey2, len);
        if (zip215 !== void 0)
          (0, utils_ts_1.abool)("zip215", zip215);
        if (prehash)
          msg = prehash(msg);
        const s = (0, utils_ts_1.bytesToNumberLE)(sig.slice(len, 2 * len));
        let A, R, SB;
        try {
          A = Point2.fromHex(publicKey2, zip215);
          R = Point2.fromHex(sig.slice(0, len), zip215);
          SB = G.multiplyUnsafe(s);
        } catch (error) {
          return false;
        }
        if (!zip215 && A.isSmallOrder())
          return false;
        const k = hashDomainToScalar(context, R.toRawBytes(), A.toRawBytes(), msg);
        const RkA = R.add(A.multiplyUnsafe(k));
        return RkA.subtract(SB).clearCofactor().equals(Point2.ZERO);
      }
      G._setWindowSize(8);
      const utils = {
        getExtendedPublicKey,
        /** ed25519 priv keys are uniform 32b. No need to check for modulo bias, like in secp256k1. */
        randomPrivateKey: () => randomBytes2(Fp.BYTES),
        /**
         * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT
         * values. This slows down first getPublicKey() by milliseconds (see Speed section),
         * but allows to speed-up subsequent getPublicKey() calls up to 20x.
         * @param windowSize 2, 4, 8, 16
         */
        precompute(windowSize = 8, point = Point2.BASE) {
          point._setWindowSize(windowSize);
          point.multiply(BigInt(3));
          return point;
        }
      };
      return {
        CURVE,
        getPublicKey: getPublicKey2,
        sign: sign2,
        verify: verify2,
        ExtendedPoint: Point2,
        utils
      };
    }
  }
});

// node_modules/@noble/curves/abstract/hash-to-curve.js
var require_hash_to_curve = __commonJS({
  "node_modules/@noble/curves/abstract/hash-to-curve.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.expand_message_xmd = expand_message_xmd;
    exports2.expand_message_xof = expand_message_xof;
    exports2.hash_to_field = hash_to_field;
    exports2.isogenyMap = isogenyMap2;
    exports2.createHasher = createHasher3;
    var modular_ts_1 = require_modular();
    var utils_ts_1 = require_utils2();
    var os2ip = utils_ts_1.bytesToNumberBE;
    function i2osp(value, length) {
      anum(value);
      anum(length);
      if (value < 0 || value >= 1 << 8 * length)
        throw new Error("invalid I2OSP input: " + value);
      const res = Array.from({ length }).fill(0);
      for (let i = length - 1; i >= 0; i--) {
        res[i] = value & 255;
        value >>>= 8;
      }
      return new Uint8Array(res);
    }
    function strxor(a, b) {
      const arr = new Uint8Array(a.length);
      for (let i = 0; i < a.length; i++) {
        arr[i] = a[i] ^ b[i];
      }
      return arr;
    }
    function anum(item) {
      if (!Number.isSafeInteger(item))
        throw new Error("number expected");
    }
    function expand_message_xmd(msg, DST, lenInBytes, H) {
      (0, utils_ts_1.abytes)(msg);
      (0, utils_ts_1.abytes)(DST);
      anum(lenInBytes);
      if (DST.length > 255)
        DST = H((0, utils_ts_1.concatBytes)((0, utils_ts_1.utf8ToBytes)("H2C-OVERSIZE-DST-"), DST));
      const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;
      const ell = Math.ceil(lenInBytes / b_in_bytes);
      if (lenInBytes > 65535 || ell > 255)
        throw new Error("expand_message_xmd: invalid lenInBytes");
      const DST_prime = (0, utils_ts_1.concatBytes)(DST, i2osp(DST.length, 1));
      const Z_pad = i2osp(0, r_in_bytes);
      const l_i_b_str = i2osp(lenInBytes, 2);
      const b = new Array(ell);
      const b_0 = H((0, utils_ts_1.concatBytes)(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));
      b[0] = H((0, utils_ts_1.concatBytes)(b_0, i2osp(1, 1), DST_prime));
      for (let i = 1; i <= ell; i++) {
        const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];
        b[i] = H((0, utils_ts_1.concatBytes)(...args));
      }
      const pseudo_random_bytes = (0, utils_ts_1.concatBytes)(...b);
      return pseudo_random_bytes.slice(0, lenInBytes);
    }
    function expand_message_xof(msg, DST, lenInBytes, k, H) {
      (0, utils_ts_1.abytes)(msg);
      (0, utils_ts_1.abytes)(DST);
      anum(lenInBytes);
      if (DST.length > 255) {
        const dkLen = Math.ceil(2 * k / 8);
        DST = H.create({ dkLen }).update((0, utils_ts_1.utf8ToBytes)("H2C-OVERSIZE-DST-")).update(DST).digest();
      }
      if (lenInBytes > 65535 || DST.length > 255)
        throw new Error("expand_message_xof: invalid lenInBytes");
      return H.create({ dkLen: lenInBytes }).update(msg).update(i2osp(lenInBytes, 2)).update(DST).update(i2osp(DST.length, 1)).digest();
    }
    function hash_to_field(msg, count, options) {
      (0, utils_ts_1.validateObject)(options, {
        DST: "stringOrUint8Array",
        p: "bigint",
        m: "isSafeInteger",
        k: "isSafeInteger",
        hash: "hash"
      });
      const { p, k, m, hash, expand, DST: _DST } = options;
      (0, utils_ts_1.abytes)(msg);
      anum(count);
      const DST = typeof _DST === "string" ? (0, utils_ts_1.utf8ToBytes)(_DST) : _DST;
      const log2p = p.toString(2).length;
      const L = Math.ceil((log2p + k) / 8);
      const len_in_bytes = count * m * L;
      let prb;
      if (expand === "xmd") {
        prb = expand_message_xmd(msg, DST, len_in_bytes, hash);
      } else if (expand === "xof") {
        prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);
      } else if (expand === "_internal_pass") {
        prb = msg;
      } else {
        throw new Error('expand must be "xmd" or "xof"');
      }
      const u = new Array(count);
      for (let i = 0; i < count; i++) {
        const e = new Array(m);
        for (let j = 0; j < m; j++) {
          const elm_offset = L * (j + i * m);
          const tv = prb.subarray(elm_offset, elm_offset + L);
          e[j] = (0, modular_ts_1.mod)(os2ip(tv), p);
        }
        u[i] = e;
      }
      return u;
    }
    function isogenyMap2(field, map) {
      const coeff = map.map((i) => Array.from(i).reverse());
      return (x, y) => {
        const [xn, xd, yn, yd] = coeff.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));
        const [xd_inv, yd_inv] = (0, modular_ts_1.FpInvertBatch)(field, [xd, yd], true);
        x = field.mul(xn, xd_inv);
        y = field.mul(y, field.mul(yn, yd_inv));
        return { x, y };
      };
    }
    function createHasher3(Point2, mapToCurve, defaults) {
      if (typeof mapToCurve !== "function")
        throw new Error("mapToCurve() must be defined");
      function map(num2) {
        return Point2.fromAffine(mapToCurve(num2));
      }
      function clear(initial) {
        const P = initial.clearCofactor();
        if (P.equals(Point2.ZERO))
          return Point2.ZERO;
        P.assertValidity();
        return P;
      }
      return {
        defaults,
        // Encodes byte string to elliptic curve.
        // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
        hashToCurve(msg, options) {
          const u = hash_to_field(msg, 2, { ...defaults, DST: defaults.DST, ...options });
          const u0 = map(u[0]);
          const u1 = map(u[1]);
          return clear(u0.add(u1));
        },
        // Encodes byte string to elliptic curve.
        // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
        encodeToCurve(msg, options) {
          const u = hash_to_field(msg, 1, { ...defaults, DST: defaults.encodeDST, ...options });
          return clear(map(u[0]));
        },
        // Same as encodeToCurve, but without hash
        mapToCurve(scalars) {
          if (!Array.isArray(scalars))
            throw new Error("expected array of bigints");
          for (const i of scalars)
            if (typeof i !== "bigint")
              throw new Error("expected array of bigints");
          return clear(map(scalars));
        }
      };
    }
  }
});

// node_modules/@noble/curves/abstract/montgomery.js
var require_montgomery = __commonJS({
  "node_modules/@noble/curves/abstract/montgomery.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.montgomery = montgomery;
    var modular_ts_1 = require_modular();
    var utils_ts_1 = require_utils2();
    var _0n3 = BigInt(0);
    var _1n3 = BigInt(1);
    function validateOpts(curve) {
      (0, utils_ts_1.validateObject)(curve, {
        a: "bigint"
      }, {
        montgomeryBits: "isSafeInteger",
        nByteLength: "isSafeInteger",
        adjustScalarBytes: "function",
        domain: "function",
        powPminus2: "function",
        Gu: "bigint"
      });
      return Object.freeze({ ...curve });
    }
    function montgomery(curveDef) {
      const CURVE = validateOpts(curveDef);
      const { P } = CURVE;
      const Fp = (0, modular_ts_1.Field)(P);
      const modP2 = (n) => (0, modular_ts_1.mod)(n, P);
      const montgomeryBits = CURVE.montgomeryBits;
      const montgomeryBytes = Math.ceil(montgomeryBits / 8);
      const fieldLen = CURVE.nByteLength;
      const adjustScalarBytes = CURVE.adjustScalarBytes || ((bytes) => bytes);
      const powPminus2 = CURVE.powPminus2 || ((x) => Fp.pow(x, P - BigInt(2)));
      function cswap(swap, x_2, x_3) {
        const dummy = modP2(swap * (x_2 - x_3));
        x_2 = modP2(x_2 - dummy);
        x_3 = modP2(x_3 + dummy);
        return [x_2, x_3];
      }
      const a24 = (CURVE.a - BigInt(2)) / BigInt(4);
      function montgomeryLadder(u, scalar) {
        (0, utils_ts_1.aInRange)("u", u, _0n3, P);
        (0, utils_ts_1.aInRange)("scalar", scalar, _0n3, P);
        const k = scalar;
        const x_1 = u;
        let x_2 = _1n3;
        let z_2 = _0n3;
        let x_3 = u;
        let z_3 = _1n3;
        let swap = _0n3;
        let sw;
        for (let t = BigInt(montgomeryBits - 1); t >= _0n3; t--) {
          const k_t = k >> t & _1n3;
          swap ^= k_t;
          sw = cswap(swap, x_2, x_3);
          x_2 = sw[0];
          x_3 = sw[1];
          sw = cswap(swap, z_2, z_3);
          z_2 = sw[0];
          z_3 = sw[1];
          swap = k_t;
          const A = x_2 + z_2;
          const AA = modP2(A * A);
          const B = x_2 - z_2;
          const BB = modP2(B * B);
          const E = AA - BB;
          const C = x_3 + z_3;
          const D = x_3 - z_3;
          const DA = modP2(D * A);
          const CB = modP2(C * B);
          const dacb = DA + CB;
          const da_cb = DA - CB;
          x_3 = modP2(dacb * dacb);
          z_3 = modP2(x_1 * modP2(da_cb * da_cb));
          x_2 = modP2(AA * BB);
          z_2 = modP2(E * (AA + modP2(a24 * E)));
        }
        sw = cswap(swap, x_2, x_3);
        x_2 = sw[0];
        x_3 = sw[1];
        sw = cswap(swap, z_2, z_3);
        z_2 = sw[0];
        z_3 = sw[1];
        const z2 = powPminus2(z_2);
        return modP2(x_2 * z2);
      }
      function encodeUCoordinate(u) {
        return (0, utils_ts_1.numberToBytesLE)(modP2(u), montgomeryBytes);
      }
      function decodeUCoordinate(uEnc) {
        const u = (0, utils_ts_1.ensureBytes)("u coordinate", uEnc, montgomeryBytes);
        if (fieldLen === 32)
          u[31] &= 127;
        return (0, utils_ts_1.bytesToNumberLE)(u);
      }
      function decodeScalar(n) {
        const bytes = (0, utils_ts_1.ensureBytes)("scalar", n);
        const len = bytes.length;
        if (len !== montgomeryBytes && len !== fieldLen) {
          let valid = "" + montgomeryBytes + " or " + fieldLen;
          throw new Error("invalid scalar, expected " + valid + " bytes, got " + len);
        }
        return (0, utils_ts_1.bytesToNumberLE)(adjustScalarBytes(bytes));
      }
      function scalarMult(scalar, u) {
        const pointU = decodeUCoordinate(u);
        const _scalar = decodeScalar(scalar);
        const pu = montgomeryLadder(pointU, _scalar);
        if (pu === _0n3)
          throw new Error("invalid private or public key received");
        return encodeUCoordinate(pu);
      }
      const GuBytes = encodeUCoordinate(CURVE.Gu);
      function scalarMultBase(scalar) {
        return scalarMult(scalar, GuBytes);
      }
      return {
        scalarMult,
        scalarMultBase,
        getSharedSecret: (privateKey, publicKey2) => scalarMult(privateKey, publicKey2),
        getPublicKey: (privateKey) => scalarMultBase(privateKey),
        utils: { randomPrivateKey: () => CURVE.randomBytes(CURVE.nByteLength) },
        GuBytes
      };
    }
  }
});

// node_modules/@noble/curves/ed25519.js
var require_ed25519 = __commonJS({
  "node_modules/@noble/curves/ed25519.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hash_to_ristretto255 = exports2.hashToRistretto255 = exports2.RistrettoPoint = exports2.encodeToCurve = exports2.hashToCurve = exports2.ed25519_hasher = exports2.edwardsToMontgomery = exports2.x25519 = exports2.ed25519ph = exports2.ed25519ctx = exports2.ed25519 = exports2.ED25519_TORSION_SUBGROUP = void 0;
    exports2.edwardsToMontgomeryPub = edwardsToMontgomeryPub;
    exports2.edwardsToMontgomeryPriv = edwardsToMontgomeryPriv;
    var sha2_1 = require_sha2();
    var utils_1 = require_utils();
    var curve_ts_1 = require_curve();
    var edwards_ts_1 = require_edwards();
    var hash_to_curve_ts_1 = require_hash_to_curve();
    var modular_ts_1 = require_modular();
    var montgomery_ts_1 = require_montgomery();
    var utils_ts_1 = require_utils2();
    var ED25519_P = BigInt("57896044618658097711785492504343953926634992332820282019728792003956564819949");
    var ED25519_SQRT_M1 = BigInt("19681161376707505956807079304988542015446066515923890162744021073123829784752");
    var _0n3 = BigInt(0);
    var _1n3 = BigInt(1);
    var _2n3 = BigInt(2);
    var _3n = BigInt(3);
    var _5n = BigInt(5);
    var _8n = BigInt(8);
    function ed25519_pow_2_252_3(x) {
      const _10n = BigInt(10), _20n = BigInt(20), _40n = BigInt(40), _80n = BigInt(80);
      const P = ED25519_P;
      const x2 = x * x % P;
      const b2 = x2 * x % P;
      const b4 = (0, modular_ts_1.pow2)(b2, _2n3, P) * b2 % P;
      const b5 = (0, modular_ts_1.pow2)(b4, _1n3, P) * x % P;
      const b10 = (0, modular_ts_1.pow2)(b5, _5n, P) * b5 % P;
      const b20 = (0, modular_ts_1.pow2)(b10, _10n, P) * b10 % P;
      const b40 = (0, modular_ts_1.pow2)(b20, _20n, P) * b20 % P;
      const b80 = (0, modular_ts_1.pow2)(b40, _40n, P) * b40 % P;
      const b160 = (0, modular_ts_1.pow2)(b80, _80n, P) * b80 % P;
      const b240 = (0, modular_ts_1.pow2)(b160, _80n, P) * b80 % P;
      const b250 = (0, modular_ts_1.pow2)(b240, _10n, P) * b10 % P;
      const pow_p_5_8 = (0, modular_ts_1.pow2)(b250, _2n3, P) * x % P;
      return { pow_p_5_8, b2 };
    }
    function adjustScalarBytes(bytes) {
      bytes[0] &= 248;
      bytes[31] &= 127;
      bytes[31] |= 64;
      return bytes;
    }
    function uvRatio(u, v) {
      const P = ED25519_P;
      const v32 = (0, modular_ts_1.mod)(v * v * v, P);
      const v7 = (0, modular_ts_1.mod)(v32 * v32 * v, P);
      const pow = ed25519_pow_2_252_3(u * v7).pow_p_5_8;
      let x = (0, modular_ts_1.mod)(u * v32 * pow, P);
      const vx2 = (0, modular_ts_1.mod)(v * x * x, P);
      const root1 = x;
      const root2 = (0, modular_ts_1.mod)(x * ED25519_SQRT_M1, P);
      const useRoot1 = vx2 === u;
      const useRoot2 = vx2 === (0, modular_ts_1.mod)(-u, P);
      const noRoot = vx2 === (0, modular_ts_1.mod)(-u * ED25519_SQRT_M1, P);
      if (useRoot1)
        x = root1;
      if (useRoot2 || noRoot)
        x = root2;
      if ((0, modular_ts_1.isNegativeLE)(x, P))
        x = (0, modular_ts_1.mod)(-x, P);
      return { isValid: useRoot1 || useRoot2, value: x };
    }
    exports2.ED25519_TORSION_SUBGROUP = [
      "0100000000000000000000000000000000000000000000000000000000000000",
      "c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a",
      "0000000000000000000000000000000000000000000000000000000000000080",
      "26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05",
      "ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f",
      "26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa"
    ];
    var Fp = (() => (0, modular_ts_1.Field)(ED25519_P, void 0, true))();
    var ed25519Defaults = (() => ({
      // Removing Fp.create() will still work, and is 10% faster on sign
      a: Fp.create(BigInt(-1)),
      // d is -121665/121666 a.k.a. Fp.neg(121665 * Fp.inv(121666))
      d: BigInt("37095705934669439343138083508754565189542113879843219016388785533085940283555"),
      // Finite field 2n**255n - 19n
      Fp,
      // Subgroup order 2n**252n + 27742317777372353535851937790883648493n;
      n: BigInt("7237005577332262213973186563042994240857116359379907606001950938285454250989"),
      h: _8n,
      Gx: BigInt("15112221349535400772501151409588531511454012693041857206046113283949847762202"),
      Gy: BigInt("46316835694926478169428394003475163141307993866256225615783033603165251855960"),
      hash: sha2_1.sha512,
      randomBytes: utils_1.randomBytes,
      adjustScalarBytes,
      // dom2
      // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.
      // Constant-time, u/√v
      uvRatio
    }))();
    exports2.ed25519 = (() => (0, edwards_ts_1.twistedEdwards)(ed25519Defaults))();
    function ed25519_domain(data, ctx, phflag) {
      if (ctx.length > 255)
        throw new Error("Context is too big");
      return (0, utils_1.concatBytes)((0, utils_1.utf8ToBytes)("SigEd25519 no Ed25519 collisions"), new Uint8Array([phflag ? 1 : 0, ctx.length]), ctx, data);
    }
    exports2.ed25519ctx = (() => (0, edwards_ts_1.twistedEdwards)({
      ...ed25519Defaults,
      domain: ed25519_domain
    }))();
    exports2.ed25519ph = (() => (0, edwards_ts_1.twistedEdwards)(Object.assign({}, ed25519Defaults, {
      domain: ed25519_domain,
      prehash: sha2_1.sha512
    })))();
    exports2.x25519 = (() => (0, montgomery_ts_1.montgomery)({
      P: ED25519_P,
      a: BigInt(486662),
      montgomeryBits: 255,
      // n is 253 bits
      nByteLength: 32,
      Gu: BigInt(9),
      powPminus2: (x) => {
        const P = ED25519_P;
        const { pow_p_5_8, b2 } = ed25519_pow_2_252_3(x);
        return (0, modular_ts_1.mod)((0, modular_ts_1.pow2)(pow_p_5_8, _3n, P) * b2, P);
      },
      adjustScalarBytes,
      randomBytes: utils_1.randomBytes
    }))();
    function edwardsToMontgomeryPub(edwardsPub) {
      const { y } = exports2.ed25519.ExtendedPoint.fromHex(edwardsPub);
      const _1n4 = BigInt(1);
      return Fp.toBytes(Fp.create((_1n4 + y) * Fp.inv(_1n4 - y)));
    }
    exports2.edwardsToMontgomery = edwardsToMontgomeryPub;
    function edwardsToMontgomeryPriv(edwardsPriv) {
      const hashed = ed25519Defaults.hash(edwardsPriv.subarray(0, 32));
      return ed25519Defaults.adjustScalarBytes(hashed).subarray(0, 32);
    }
    var ELL2_C1 = (() => (Fp.ORDER + _3n) / _8n)();
    var ELL2_C2 = (() => Fp.pow(_2n3, ELL2_C1))();
    var ELL2_C3 = (() => Fp.sqrt(Fp.neg(Fp.ONE)))();
    function map_to_curve_elligator2_curve25519(u) {
      const ELL2_C4 = (Fp.ORDER - _5n) / _8n;
      const ELL2_J = BigInt(486662);
      let tv1 = Fp.sqr(u);
      tv1 = Fp.mul(tv1, _2n3);
      let xd = Fp.add(tv1, Fp.ONE);
      let x1n = Fp.neg(ELL2_J);
      let tv2 = Fp.sqr(xd);
      let gxd = Fp.mul(tv2, xd);
      let gx1 = Fp.mul(tv1, ELL2_J);
      gx1 = Fp.mul(gx1, x1n);
      gx1 = Fp.add(gx1, tv2);
      gx1 = Fp.mul(gx1, x1n);
      let tv3 = Fp.sqr(gxd);
      tv2 = Fp.sqr(tv3);
      tv3 = Fp.mul(tv3, gxd);
      tv3 = Fp.mul(tv3, gx1);
      tv2 = Fp.mul(tv2, tv3);
      let y11 = Fp.pow(tv2, ELL2_C4);
      y11 = Fp.mul(y11, tv3);
      let y12 = Fp.mul(y11, ELL2_C3);
      tv2 = Fp.sqr(y11);
      tv2 = Fp.mul(tv2, gxd);
      let e1 = Fp.eql(tv2, gx1);
      let y1 = Fp.cmov(y12, y11, e1);
      let x2n = Fp.mul(x1n, tv1);
      let y21 = Fp.mul(y11, u);
      y21 = Fp.mul(y21, ELL2_C2);
      let y22 = Fp.mul(y21, ELL2_C3);
      let gx2 = Fp.mul(gx1, tv1);
      tv2 = Fp.sqr(y21);
      tv2 = Fp.mul(tv2, gxd);
      let e2 = Fp.eql(tv2, gx2);
      let y2 = Fp.cmov(y22, y21, e2);
      tv2 = Fp.sqr(y1);
      tv2 = Fp.mul(tv2, gxd);
      let e3 = Fp.eql(tv2, gx1);
      let xn = Fp.cmov(x2n, x1n, e3);
      let y = Fp.cmov(y2, y1, e3);
      let e4 = Fp.isOdd(y);
      y = Fp.cmov(y, Fp.neg(y), e3 !== e4);
      return { xMn: xn, xMd: xd, yMn: y, yMd: _1n3 };
    }
    var ELL2_C1_EDWARDS = (() => (0, modular_ts_1.FpSqrtEven)(Fp, Fp.neg(BigInt(486664))))();
    function map_to_curve_elligator2_edwards25519(u) {
      const { xMn, xMd, yMn, yMd } = map_to_curve_elligator2_curve25519(u);
      let xn = Fp.mul(xMn, yMd);
      xn = Fp.mul(xn, ELL2_C1_EDWARDS);
      let xd = Fp.mul(xMd, yMn);
      let yn = Fp.sub(xMn, xMd);
      let yd = Fp.add(xMn, xMd);
      let tv1 = Fp.mul(xd, yd);
      let e = Fp.eql(tv1, Fp.ZERO);
      xn = Fp.cmov(xn, Fp.ZERO, e);
      xd = Fp.cmov(xd, Fp.ONE, e);
      yn = Fp.cmov(yn, Fp.ONE, e);
      yd = Fp.cmov(yd, Fp.ONE, e);
      const [xd_inv, yd_inv] = (0, modular_ts_1.FpInvertBatch)(Fp, [xd, yd], true);
      return { x: Fp.mul(xn, xd_inv), y: Fp.mul(yn, yd_inv) };
    }
    exports2.ed25519_hasher = (() => (0, hash_to_curve_ts_1.createHasher)(exports2.ed25519.ExtendedPoint, (scalars) => map_to_curve_elligator2_edwards25519(scalars[0]), {
      DST: "edwards25519_XMD:SHA-512_ELL2_RO_",
      encodeDST: "edwards25519_XMD:SHA-512_ELL2_NU_",
      p: Fp.ORDER,
      m: 1,
      k: 128,
      expand: "xmd",
      hash: sha2_1.sha512
    }))();
    exports2.hashToCurve = (() => exports2.ed25519_hasher.hashToCurve)();
    exports2.encodeToCurve = (() => exports2.ed25519_hasher.encodeToCurve)();
    function aristp(other) {
      if (!(other instanceof RistPoint))
        throw new Error("RistrettoPoint expected");
    }
    var SQRT_M1 = ED25519_SQRT_M1;
    var SQRT_AD_MINUS_ONE = BigInt("25063068953384623474111414158702152701244531502492656460079210482610430750235");
    var INVSQRT_A_MINUS_D = BigInt("54469307008909316920995813868745141605393597292927456921205312896311721017578");
    var ONE_MINUS_D_SQ = BigInt("1159843021668779879193775521855586647937357759715417654439879720876111806838");
    var D_MINUS_ONE_SQ = BigInt("40440834346308536858101042469323190826248399146238708352240133220865137265952");
    var invertSqrt = (number2) => uvRatio(_1n3, number2);
    var MAX_255B = BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    var bytes255ToNumberLE = (bytes) => exports2.ed25519.CURVE.Fp.create((0, utils_ts_1.bytesToNumberLE)(bytes) & MAX_255B);
    function calcElligatorRistrettoMap(r0) {
      const { d } = exports2.ed25519.CURVE;
      const P = exports2.ed25519.CURVE.Fp.ORDER;
      const mod2 = exports2.ed25519.CURVE.Fp.create;
      const r = mod2(SQRT_M1 * r0 * r0);
      const Ns = mod2((r + _1n3) * ONE_MINUS_D_SQ);
      let c = BigInt(-1);
      const D = mod2((c - d * r) * mod2(r + d));
      let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D);
      let s_ = mod2(s * r0);
      if (!(0, modular_ts_1.isNegativeLE)(s_, P))
        s_ = mod2(-s_);
      if (!Ns_D_is_sq)
        s = s_;
      if (!Ns_D_is_sq)
        c = r;
      const Nt = mod2(c * (r - _1n3) * D_MINUS_ONE_SQ - D);
      const s2 = s * s;
      const W0 = mod2((s + s) * D);
      const W1 = mod2(Nt * SQRT_AD_MINUS_ONE);
      const W2 = mod2(_1n3 - s2);
      const W3 = mod2(_1n3 + s2);
      return new exports2.ed25519.ExtendedPoint(mod2(W0 * W3), mod2(W2 * W1), mod2(W1 * W3), mod2(W0 * W2));
    }
    var RistPoint = class _RistPoint {
      // Private property to discourage combining ExtendedPoint + RistrettoPoint
      // Always use Ristretto encoding/decoding instead.
      constructor(ep) {
        this.ep = ep;
      }
      static fromAffine(ap) {
        return new _RistPoint(exports2.ed25519.ExtendedPoint.fromAffine(ap));
      }
      /**
       * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.
       * The hash-to-group operation applies Elligator twice and adds the results.
       * **Note:** this is one-way map, there is no conversion from point to hash.
       * https://ristretto.group/formulas/elligator.html
       * @param hex 64-byte output of a hash function
       */
      static hashToCurve(hex) {
        hex = (0, utils_ts_1.ensureBytes)("ristrettoHash", hex, 64);
        const r1 = bytes255ToNumberLE(hex.slice(0, 32));
        const R1 = calcElligatorRistrettoMap(r1);
        const r2 = bytes255ToNumberLE(hex.slice(32, 64));
        const R2 = calcElligatorRistrettoMap(r2);
        return new _RistPoint(R1.add(R2));
      }
      /**
       * Converts ristretto-encoded string to ristretto point.
       * https://ristretto.group/formulas/decoding.html
       * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding
       */
      static fromHex(hex) {
        hex = (0, utils_ts_1.ensureBytes)("ristrettoHex", hex, 32);
        const { a, d } = exports2.ed25519.CURVE;
        const P = exports2.ed25519.CURVE.Fp.ORDER;
        const mod2 = exports2.ed25519.CURVE.Fp.create;
        const emsg = "RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint";
        const s = bytes255ToNumberLE(hex);
        if (!(0, utils_ts_1.equalBytes)((0, utils_ts_1.numberToBytesLE)(s, 32), hex) || (0, modular_ts_1.isNegativeLE)(s, P))
          throw new Error(emsg);
        const s2 = mod2(s * s);
        const u1 = mod2(_1n3 + a * s2);
        const u2 = mod2(_1n3 - a * s2);
        const u1_2 = mod2(u1 * u1);
        const u2_2 = mod2(u2 * u2);
        const v = mod2(a * d * u1_2 - u2_2);
        const { isValid, value: I } = invertSqrt(mod2(v * u2_2));
        const Dx = mod2(I * u2);
        const Dy = mod2(I * Dx * v);
        let x = mod2((s + s) * Dx);
        if ((0, modular_ts_1.isNegativeLE)(x, P))
          x = mod2(-x);
        const y = mod2(u1 * Dy);
        const t = mod2(x * y);
        if (!isValid || (0, modular_ts_1.isNegativeLE)(t, P) || y === _0n3)
          throw new Error(emsg);
        return new _RistPoint(new exports2.ed25519.ExtendedPoint(x, y, _1n3, t));
      }
      static msm(points, scalars) {
        const Fn = (0, modular_ts_1.Field)(exports2.ed25519.CURVE.n, exports2.ed25519.CURVE.nBitLength);
        return (0, curve_ts_1.pippenger)(_RistPoint, Fn, points, scalars);
      }
      /**
       * Encodes ristretto point to Uint8Array.
       * https://ristretto.group/formulas/encoding.html
       */
      toRawBytes() {
        let { ex: x, ey: y, ez: z, et: t } = this.ep;
        const P = exports2.ed25519.CURVE.Fp.ORDER;
        const mod2 = exports2.ed25519.CURVE.Fp.create;
        const u1 = mod2(mod2(z + y) * mod2(z - y));
        const u2 = mod2(x * y);
        const u2sq = mod2(u2 * u2);
        const { value: invsqrt } = invertSqrt(mod2(u1 * u2sq));
        const D1 = mod2(invsqrt * u1);
        const D2 = mod2(invsqrt * u2);
        const zInv = mod2(D1 * D2 * t);
        let D;
        if ((0, modular_ts_1.isNegativeLE)(t * zInv, P)) {
          let _x = mod2(y * SQRT_M1);
          let _y = mod2(x * SQRT_M1);
          x = _x;
          y = _y;
          D = mod2(D1 * INVSQRT_A_MINUS_D);
        } else {
          D = D2;
        }
        if ((0, modular_ts_1.isNegativeLE)(x * zInv, P))
          y = mod2(-y);
        let s = mod2((z - y) * D);
        if ((0, modular_ts_1.isNegativeLE)(s, P))
          s = mod2(-s);
        return (0, utils_ts_1.numberToBytesLE)(s, 32);
      }
      toHex() {
        return (0, utils_ts_1.bytesToHex)(this.toRawBytes());
      }
      toString() {
        return this.toHex();
      }
      // Compare one point to another.
      equals(other) {
        aristp(other);
        const { ex: X1, ey: Y1 } = this.ep;
        const { ex: X2, ey: Y2 } = other.ep;
        const mod2 = exports2.ed25519.CURVE.Fp.create;
        const one = mod2(X1 * Y2) === mod2(Y1 * X2);
        const two = mod2(Y1 * Y2) === mod2(X1 * X2);
        return one || two;
      }
      add(other) {
        aristp(other);
        return new _RistPoint(this.ep.add(other.ep));
      }
      subtract(other) {
        aristp(other);
        return new _RistPoint(this.ep.subtract(other.ep));
      }
      multiply(scalar) {
        return new _RistPoint(this.ep.multiply(scalar));
      }
      multiplyUnsafe(scalar) {
        return new _RistPoint(this.ep.multiplyUnsafe(scalar));
      }
      double() {
        return new _RistPoint(this.ep.double());
      }
      negate() {
        return new _RistPoint(this.ep.negate());
      }
    };
    exports2.RistrettoPoint = (() => {
      if (!RistPoint.BASE)
        RistPoint.BASE = new RistPoint(exports2.ed25519.ExtendedPoint.BASE);
      if (!RistPoint.ZERO)
        RistPoint.ZERO = new RistPoint(exports2.ed25519.ExtendedPoint.ZERO);
      return RistPoint;
    })();
    var hashToRistretto255 = (msg, options) => {
      const d = options.DST;
      const DST = typeof d === "string" ? (0, utils_1.utf8ToBytes)(d) : d;
      const uniform_bytes = (0, hash_to_curve_ts_1.expand_message_xmd)(msg, DST, 64, sha2_1.sha512);
      const P = RistPoint.hashToCurve(uniform_bytes);
      return P;
    };
    exports2.hashToRistretto255 = hashToRistretto255;
    exports2.hash_to_ristretto255 = exports2.hashToRistretto255;
  }
});

// node_modules/@scure/base/lib/index.js
var require_lib = __commonJS({
  "node_modules/@scure/base/lib/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bytes = exports2.stringToBytes = exports2.str = exports2.bytesToString = exports2.hex = exports2.utf8 = exports2.bech32m = exports2.bech32 = exports2.base58check = exports2.createBase58check = exports2.base58xmr = exports2.base58xrp = exports2.base58flickr = exports2.base58 = exports2.base64urlnopad = exports2.base64url = exports2.base64nopad = exports2.base64 = exports2.base32crockford = exports2.base32hexnopad = exports2.base32hex = exports2.base32nopad = exports2.base32 = exports2.base16 = exports2.utils = void 0;
    function isBytes(a) {
      return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === "Uint8Array";
    }
    function abytes2(b, ...lengths) {
      if (!isBytes(b))
        throw new Error("Uint8Array expected");
      if (lengths.length > 0 && !lengths.includes(b.length))
        throw new Error("Uint8Array expected of length " + lengths + ", got length=" + b.length);
    }
    function isArrayOf(isString, arr) {
      if (!Array.isArray(arr))
        return false;
      if (arr.length === 0)
        return true;
      if (isString) {
        return arr.every((item) => typeof item === "string");
      } else {
        return arr.every((item) => Number.isSafeInteger(item));
      }
    }
    function afn(input) {
      if (typeof input !== "function")
        throw new Error("function expected");
      return true;
    }
    function astr(label, input) {
      if (typeof input !== "string")
        throw new Error(`${label}: string expected`);
      return true;
    }
    function anumber2(n) {
      if (!Number.isSafeInteger(n))
        throw new Error(`invalid integer: ${n}`);
    }
    function aArr(input) {
      if (!Array.isArray(input))
        throw new Error("array expected");
    }
    function astrArr(label, input) {
      if (!isArrayOf(true, input))
        throw new Error(`${label}: array of strings expected`);
    }
    function anumArr(label, input) {
      if (!isArrayOf(false, input))
        throw new Error(`${label}: array of numbers expected`);
    }
    function chain(...args) {
      const id = (a) => a;
      const wrap = (a, b) => (c) => a(b(c));
      const encode2 = args.map((x) => x.encode).reduceRight(wrap, id);
      const decode2 = args.map((x) => x.decode).reduce(wrap, id);
      return { encode: encode2, decode: decode2 };
    }
    function alphabet(letters) {
      const lettersA = typeof letters === "string" ? letters.split("") : letters;
      const len = lettersA.length;
      astrArr("alphabet", lettersA);
      const indexes = new Map(lettersA.map((l, i) => [l, i]));
      return {
        encode: (digits) => {
          aArr(digits);
          return digits.map((i) => {
            if (!Number.isSafeInteger(i) || i < 0 || i >= len)
              throw new Error(`alphabet.encode: digit index outside alphabet "${i}". Allowed: ${letters}`);
            return lettersA[i];
          });
        },
        decode: (input) => {
          aArr(input);
          return input.map((letter) => {
            astr("alphabet.decode", letter);
            const i = indexes.get(letter);
            if (i === void 0)
              throw new Error(`Unknown letter: "${letter}". Allowed: ${letters}`);
            return i;
          });
        }
      };
    }
    function join(separator = "") {
      astr("join", separator);
      return {
        encode: (from) => {
          astrArr("join.decode", from);
          return from.join(separator);
        },
        decode: (to) => {
          astr("join.decode", to);
          return to.split(separator);
        }
      };
    }
    function padding(bits, chr = "=") {
      anumber2(bits);
      astr("padding", chr);
      return {
        encode(data) {
          astrArr("padding.encode", data);
          while (data.length * bits % 8)
            data.push(chr);
          return data;
        },
        decode(input) {
          astrArr("padding.decode", input);
          let end = input.length;
          if (end * bits % 8)
            throw new Error("padding: invalid, string should have whole number of bytes");
          for (; end > 0 && input[end - 1] === chr; end--) {
            const last = end - 1;
            const byte = last * bits;
            if (byte % 8 === 0)
              throw new Error("padding: invalid, string has too much padding");
          }
          return input.slice(0, end);
        }
      };
    }
    function normalize(fn) {
      afn(fn);
      return { encode: (from) => from, decode: (to) => fn(to) };
    }
    function convertRadix(data, from, to) {
      if (from < 2)
        throw new Error(`convertRadix: invalid from=${from}, base cannot be less than 2`);
      if (to < 2)
        throw new Error(`convertRadix: invalid to=${to}, base cannot be less than 2`);
      aArr(data);
      if (!data.length)
        return [];
      let pos = 0;
      const res = [];
      const digits = Array.from(data, (d) => {
        anumber2(d);
        if (d < 0 || d >= from)
          throw new Error(`invalid integer: ${d}`);
        return d;
      });
      const dlen = digits.length;
      while (true) {
        let carry = 0;
        let done = true;
        for (let i = pos; i < dlen; i++) {
          const digit = digits[i];
          const fromCarry = from * carry;
          const digitBase = fromCarry + digit;
          if (!Number.isSafeInteger(digitBase) || fromCarry / from !== carry || digitBase - digit !== fromCarry) {
            throw new Error("convertRadix: carry overflow");
          }
          const div = digitBase / to;
          carry = digitBase % to;
          const rounded = Math.floor(div);
          digits[i] = rounded;
          if (!Number.isSafeInteger(rounded) || rounded * to + carry !== digitBase)
            throw new Error("convertRadix: carry overflow");
          if (!done)
            continue;
          else if (!rounded)
            pos = i;
          else
            done = false;
        }
        res.push(carry);
        if (done)
          break;
      }
      for (let i = 0; i < data.length - 1 && data[i] === 0; i++)
        res.push(0);
      return res.reverse();
    }
    var gcd = (a, b) => b === 0 ? a : gcd(b, a % b);
    var radix2carry = (from, to) => from + (to - gcd(from, to));
    var powers = (() => {
      let res = [];
      for (let i = 0; i < 40; i++)
        res.push(2 ** i);
      return res;
    })();
    function convertRadix2(data, from, to, padding2) {
      aArr(data);
      if (from <= 0 || from > 32)
        throw new Error(`convertRadix2: wrong from=${from}`);
      if (to <= 0 || to > 32)
        throw new Error(`convertRadix2: wrong to=${to}`);
      if (radix2carry(from, to) > 32) {
        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);
      }
      let carry = 0;
      let pos = 0;
      const max = powers[from];
      const mask2 = powers[to] - 1;
      const res = [];
      for (const n of data) {
        anumber2(n);
        if (n >= max)
          throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);
        carry = carry << from | n;
        if (pos + from > 32)
          throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);
        pos += from;
        for (; pos >= to; pos -= to)
          res.push((carry >> pos - to & mask2) >>> 0);
        const pow = powers[pos];
        if (pow === void 0)
          throw new Error("invalid carry");
        carry &= pow - 1;
      }
      carry = carry << to - pos & mask2;
      if (!padding2 && pos >= from)
        throw new Error("Excess padding");
      if (!padding2 && carry > 0)
        throw new Error(`Non-zero padding: ${carry}`);
      if (padding2 && pos > 0)
        res.push(carry >>> 0);
      return res;
    }
    function radix(num2) {
      anumber2(num2);
      const _256 = 2 ** 8;
      return {
        encode: (bytes) => {
          if (!isBytes(bytes))
            throw new Error("radix.encode input should be Uint8Array");
          return convertRadix(Array.from(bytes), _256, num2);
        },
        decode: (digits) => {
          anumArr("radix.decode", digits);
          return Uint8Array.from(convertRadix(digits, num2, _256));
        }
      };
    }
    function radix2(bits, revPadding = false) {
      anumber2(bits);
      if (bits <= 0 || bits > 32)
        throw new Error("radix2: bits should be in (0..32]");
      if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)
        throw new Error("radix2: carry overflow");
      return {
        encode: (bytes) => {
          if (!isBytes(bytes))
            throw new Error("radix2.encode input should be Uint8Array");
          return convertRadix2(Array.from(bytes), 8, bits, !revPadding);
        },
        decode: (digits) => {
          anumArr("radix2.decode", digits);
          return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));
        }
      };
    }
    function unsafeWrapper(fn) {
      afn(fn);
      return function(...args) {
        try {
          return fn.apply(null, args);
        } catch (e) {
        }
      };
    }
    function checksum(len, fn) {
      anumber2(len);
      afn(fn);
      return {
        encode(data) {
          if (!isBytes(data))
            throw new Error("checksum.encode: input should be Uint8Array");
          const sum = fn(data).slice(0, len);
          const res = new Uint8Array(data.length + len);
          res.set(data);
          res.set(sum, data.length);
          return res;
        },
        decode(data) {
          if (!isBytes(data))
            throw new Error("checksum.decode: input should be Uint8Array");
          const payload = data.slice(0, -len);
          const oldChecksum = data.slice(-len);
          const newChecksum = fn(payload).slice(0, len);
          for (let i = 0; i < len; i++)
            if (newChecksum[i] !== oldChecksum[i])
              throw new Error("Invalid checksum");
          return payload;
        }
      };
    }
    exports2.utils = {
      alphabet,
      chain,
      checksum,
      convertRadix,
      convertRadix2,
      radix,
      radix2,
      join,
      padding
    };
    exports2.base16 = chain(radix2(4), alphabet("0123456789ABCDEF"), join(""));
    exports2.base32 = chain(radix2(5), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), padding(5), join(""));
    exports2.base32nopad = chain(radix2(5), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), join(""));
    exports2.base32hex = chain(radix2(5), alphabet("0123456789ABCDEFGHIJKLMNOPQRSTUV"), padding(5), join(""));
    exports2.base32hexnopad = chain(radix2(5), alphabet("0123456789ABCDEFGHIJKLMNOPQRSTUV"), join(""));
    exports2.base32crockford = chain(radix2(5), alphabet("0123456789ABCDEFGHJKMNPQRSTVWXYZ"), join(""), normalize((s) => s.toUpperCase().replace(/O/g, "0").replace(/[IL]/g, "1")));
    var hasBase64Builtin = (() => typeof Uint8Array.from([]).toBase64 === "function" && typeof Uint8Array.fromBase64 === "function")();
    exports2.base64 = hasBase64Builtin ? {
      encode(b) {
        abytes2(b);
        return b.toBase64();
      },
      decode(s) {
        astr("base64", s);
        return Uint8Array.fromBase64(s, { lastChunkHandling: "strict" });
      }
    } : chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), padding(6), join(""));
    exports2.base64nopad = chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), join(""));
    exports2.base64url = hasBase64Builtin ? {
      encode(b) {
        abytes2(b);
        return b.toBase64({ alphabet: "base64url" });
      },
      decode(s) {
        astr("base64", s);
        return Uint8Array.fromBase64(s, { alphabet: "base64url" });
      }
    } : chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), padding(6), join(""));
    exports2.base64urlnopad = chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), join(""));
    var genBase58 = (abc) => chain(radix(58), alphabet(abc), join(""));
    exports2.base58 = genBase58("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
    exports2.base58flickr = genBase58("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ");
    exports2.base58xrp = genBase58("rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz");
    var XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];
    exports2.base58xmr = {
      encode(data) {
        let res = "";
        for (let i = 0; i < data.length; i += 8) {
          const block = data.subarray(i, i + 8);
          res += exports2.base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], "1");
        }
        return res;
      },
      decode(str) {
        let res = [];
        for (let i = 0; i < str.length; i += 11) {
          const slice = str.slice(i, i + 11);
          const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);
          const block = exports2.base58.decode(slice);
          for (let j = 0; j < block.length - blockLen; j++) {
            if (block[j] !== 0)
              throw new Error("base58xmr: wrong padding");
          }
          res = res.concat(Array.from(block.slice(block.length - blockLen)));
        }
        return Uint8Array.from(res);
      }
    };
    var createBase58check = (sha2563) => chain(checksum(4, (data) => sha2563(sha2563(data))), exports2.base58);
    exports2.createBase58check = createBase58check;
    exports2.base58check = exports2.createBase58check;
    var BECH_ALPHABET = chain(alphabet("qpzry9x8gf2tvdw0s3jn54khce6mua7l"), join(""));
    var POLYMOD_GENERATORS = [996825010, 642813549, 513874426, 1027748829, 705979059];
    function bech32Polymod(pre) {
      const b = pre >> 25;
      let chk = (pre & 33554431) << 5;
      for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {
        if ((b >> i & 1) === 1)
          chk ^= POLYMOD_GENERATORS[i];
      }
      return chk;
    }
    function bechChecksum(prefix, words, encodingConst = 1) {
      const len = prefix.length;
      let chk = 1;
      for (let i = 0; i < len; i++) {
        const c = prefix.charCodeAt(i);
        if (c < 33 || c > 126)
          throw new Error(`Invalid prefix (${prefix})`);
        chk = bech32Polymod(chk) ^ c >> 5;
      }
      chk = bech32Polymod(chk);
      for (let i = 0; i < len; i++)
        chk = bech32Polymod(chk) ^ prefix.charCodeAt(i) & 31;
      for (let v of words)
        chk = bech32Polymod(chk) ^ v;
      for (let i = 0; i < 6; i++)
        chk = bech32Polymod(chk);
      chk ^= encodingConst;
      return BECH_ALPHABET.encode(convertRadix2([chk % powers[30]], 30, 5, false));
    }
    function genBech32(encoding) {
      const ENCODING_CONST = encoding === "bech32" ? 1 : 734539939;
      const _words = radix2(5);
      const fromWords = _words.decode;
      const toWords = _words.encode;
      const fromWordsUnsafe = unsafeWrapper(fromWords);
      function encode2(prefix, words, limit = 90) {
        astr("bech32.encode prefix", prefix);
        if (isBytes(words))
          words = Array.from(words);
        anumArr("bech32.encode", words);
        const plen = prefix.length;
        if (plen === 0)
          throw new TypeError(`Invalid prefix length ${plen}`);
        const actualLength = plen + 7 + words.length;
        if (limit !== false && actualLength > limit)
          throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);
        const lowered = prefix.toLowerCase();
        const sum = bechChecksum(lowered, words, ENCODING_CONST);
        return `${lowered}1${BECH_ALPHABET.encode(words)}${sum}`;
      }
      function decode2(str, limit = 90) {
        astr("bech32.decode input", str);
        const slen = str.length;
        if (slen < 8 || limit !== false && slen > limit)
          throw new TypeError(`invalid string length: ${slen} (${str}). Expected (8..${limit})`);
        const lowered = str.toLowerCase();
        if (str !== lowered && str !== str.toUpperCase())
          throw new Error(`String must be lowercase or uppercase`);
        const sepIndex = lowered.lastIndexOf("1");
        if (sepIndex === 0 || sepIndex === -1)
          throw new Error(`Letter "1" must be present between prefix and data only`);
        const prefix = lowered.slice(0, sepIndex);
        const data = lowered.slice(sepIndex + 1);
        if (data.length < 6)
          throw new Error("Data must be at least 6 characters long");
        const words = BECH_ALPHABET.decode(data).slice(0, -6);
        const sum = bechChecksum(prefix, words, ENCODING_CONST);
        if (!data.endsWith(sum))
          throw new Error(`Invalid checksum in ${str}: expected "${sum}"`);
        return { prefix, words };
      }
      const decodeUnsafe = unsafeWrapper(decode2);
      function decodeToBytes(str) {
        const { prefix, words } = decode2(str, false);
        return { prefix, words, bytes: fromWords(words) };
      }
      function encodeFromBytes(prefix, bytes) {
        return encode2(prefix, toWords(bytes));
      }
      return {
        encode: encode2,
        decode: decode2,
        encodeFromBytes,
        decodeToBytes,
        decodeUnsafe,
        fromWords,
        fromWordsUnsafe,
        toWords
      };
    }
    exports2.bech32 = genBech32("bech32");
    exports2.bech32m = genBech32("bech32m");
    exports2.utf8 = {
      encode: (data) => new TextDecoder().decode(data),
      decode: (str) => new TextEncoder().encode(str)
    };
    var hasHexBuiltin = (() => typeof Uint8Array.from([]).toHex === "function" && typeof Uint8Array.fromHex === "function")();
    var hexBuiltin = {
      encode(data) {
        abytes2(data);
        return data.toHex();
      },
      decode(s) {
        astr("hex", s);
        return Uint8Array.fromHex(s);
      }
    };
    exports2.hex = hasHexBuiltin ? hexBuiltin : chain(radix2(4), alphabet("0123456789abcdef"), join(""), normalize((s) => {
      if (typeof s !== "string" || s.length % 2 !== 0)
        throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);
      return s.toLowerCase();
    }));
    var CODERS = {
      utf8: exports2.utf8,
      hex: exports2.hex,
      base16: exports2.base16,
      base32: exports2.base32,
      base64: exports2.base64,
      base64url: exports2.base64url,
      base58: exports2.base58,
      base58xmr: exports2.base58xmr
    };
    var coderTypeError = "Invalid encoding type. Available types: utf8, hex, base16, base32, base64, base64url, base58, base58xmr";
    var bytesToString = (type2, bytes) => {
      if (typeof type2 !== "string" || !CODERS.hasOwnProperty(type2))
        throw new TypeError(coderTypeError);
      if (!isBytes(bytes))
        throw new TypeError("bytesToString() expects Uint8Array");
      return CODERS[type2].encode(bytes);
    };
    exports2.bytesToString = bytesToString;
    exports2.str = exports2.bytesToString;
    var stringToBytes2 = (type2, str) => {
      if (!CODERS.hasOwnProperty(type2))
        throw new TypeError(coderTypeError);
      if (typeof str !== "string")
        throw new TypeError("stringToBytes() expects string");
      return CODERS[type2].decode(str);
    };
    exports2.stringToBytes = stringToBytes2;
    exports2.bytes = exports2.stringToBytes;
  }
});

// node_modules/@mysten/bcs/dist/cjs/b58.js
var require_b58 = __commonJS({
  "node_modules/@mysten/bcs/dist/cjs/b58.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var b58_exports = {};
    __export2(b58_exports, {
      fromB58: () => fromB58,
      fromBase58: () => fromBase58,
      toB58: () => toB58,
      toBase58: () => toBase58
    });
    module2.exports = __toCommonJS2(b58_exports);
    var import_base = require_lib();
    var toBase58 = (buffer) => import_base.base58.encode(buffer);
    var fromBase58 = (str) => import_base.base58.decode(str);
    var toB58 = toBase58;
    var fromB58 = fromBase58;
  }
});

// node_modules/@mysten/bcs/dist/cjs/b64.js
var require_b64 = __commonJS({
  "node_modules/@mysten/bcs/dist/cjs/b64.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var b64_exports = {};
    __export2(b64_exports, {
      fromB64: () => fromB64,
      fromBase64: () => fromBase64,
      toB64: () => toB64,
      toBase64: () => toBase64
    });
    module2.exports = __toCommonJS2(b64_exports);
    function fromBase64(base64String) {
      return Uint8Array.from(atob(base64String), (char) => char.charCodeAt(0));
    }
    var CHUNK_SIZE2 = 8192;
    function toBase64(bytes) {
      if (bytes.length < CHUNK_SIZE2) {
        return btoa(String.fromCharCode(...bytes));
      }
      let output = "";
      for (var i = 0; i < bytes.length; i += CHUNK_SIZE2) {
        const chunk = bytes.slice(i, i + CHUNK_SIZE2);
        output += String.fromCharCode(...chunk);
      }
      return btoa(output);
    }
    var toB64 = toBase64;
    var fromB64 = fromBase64;
  }
});

// node_modules/@mysten/bcs/dist/cjs/hex.js
var require_hex = __commonJS({
  "node_modules/@mysten/bcs/dist/cjs/hex.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var hex_exports = {};
    __export2(hex_exports, {
      fromHEX: () => fromHEX,
      fromHex: () => fromHex,
      toHEX: () => toHEX,
      toHex: () => toHex
    });
    module2.exports = __toCommonJS2(hex_exports);
    function fromHex(hexStr) {
      var _a;
      const normalized = hexStr.startsWith("0x") ? hexStr.slice(2) : hexStr;
      const padded = normalized.length % 2 === 0 ? normalized : `0${normalized}`;
      const intArr = ((_a = padded.match(/[0-9a-fA-F]{2}/g)) == null ? void 0 : _a.map((byte) => parseInt(byte, 16))) ?? [];
      if (intArr.length !== padded.length / 2) {
        throw new Error(`Invalid hex string ${hexStr}`);
      }
      return Uint8Array.from(intArr);
    }
    function toHex(bytes) {
      return bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, "0"), "");
    }
    var toHEX = toHex;
    var fromHEX = fromHex;
  }
});

// node_modules/@mysten/bcs/dist/cjs/uleb.js
var require_uleb = __commonJS({
  "node_modules/@mysten/bcs/dist/cjs/uleb.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var uleb_exports = {};
    __export2(uleb_exports, {
      ulebDecode: () => ulebDecode,
      ulebEncode: () => ulebEncode
    });
    module2.exports = __toCommonJS2(uleb_exports);
    function ulebEncode(num2) {
      let arr = [];
      let len = 0;
      if (num2 === 0) {
        return [0];
      }
      while (num2 > 0) {
        arr[len] = num2 & 127;
        if (num2 >>= 7) {
          arr[len] |= 128;
        }
        len += 1;
      }
      return arr;
    }
    function ulebDecode(arr) {
      let total = 0;
      let shift = 0;
      let len = 0;
      while (true) {
        let byte = arr[len];
        len += 1;
        total |= (byte & 127) << shift;
        if ((byte & 128) === 0) {
          break;
        }
        shift += 7;
      }
      return {
        value: total,
        length: len
      };
    }
  }
});

// node_modules/@mysten/bcs/dist/cjs/reader.js
var require_reader = __commonJS({
  "node_modules/@mysten/bcs/dist/cjs/reader.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var reader_exports = {};
    __export2(reader_exports, {
      BcsReader: () => BcsReader
    });
    module2.exports = __toCommonJS2(reader_exports);
    var import_uleb = require_uleb();
    var BcsReader = class {
      /**
       * @param {Uint8Array} data Data to use as a buffer.
       */
      constructor(data) {
        this.bytePosition = 0;
        this.dataView = new DataView(data.buffer);
      }
      /**
       * Shift current cursor position by `bytes`.
       *
       * @param {Number} bytes Number of bytes to
       * @returns {this} Self for possible chaining.
       */
      shift(bytes) {
        this.bytePosition += bytes;
        return this;
      }
      /**
       * Read U8 value from the buffer and shift cursor by 1.
       * @returns
       */
      read8() {
        let value = this.dataView.getUint8(this.bytePosition);
        this.shift(1);
        return value;
      }
      /**
       * Read U16 value from the buffer and shift cursor by 2.
       * @returns
       */
      read16() {
        let value = this.dataView.getUint16(this.bytePosition, true);
        this.shift(2);
        return value;
      }
      /**
       * Read U32 value from the buffer and shift cursor by 4.
       * @returns
       */
      read32() {
        let value = this.dataView.getUint32(this.bytePosition, true);
        this.shift(4);
        return value;
      }
      /**
       * Read U64 value from the buffer and shift cursor by 8.
       * @returns
       */
      read64() {
        let value1 = this.read32();
        let value2 = this.read32();
        let result = value2.toString(16) + value1.toString(16).padStart(8, "0");
        return BigInt("0x" + result).toString(10);
      }
      /**
       * Read U128 value from the buffer and shift cursor by 16.
       */
      read128() {
        let value1 = BigInt(this.read64());
        let value2 = BigInt(this.read64());
        let result = value2.toString(16) + value1.toString(16).padStart(16, "0");
        return BigInt("0x" + result).toString(10);
      }
      /**
       * Read U128 value from the buffer and shift cursor by 32.
       * @returns
       */
      read256() {
        let value1 = BigInt(this.read128());
        let value2 = BigInt(this.read128());
        let result = value2.toString(16) + value1.toString(16).padStart(32, "0");
        return BigInt("0x" + result).toString(10);
      }
      /**
       * Read `num` number of bytes from the buffer and shift cursor by `num`.
       * @param num Number of bytes to read.
       */
      readBytes(num2) {
        let start = this.bytePosition + this.dataView.byteOffset;
        let value = new Uint8Array(this.dataView.buffer, start, num2);
        this.shift(num2);
        return value;
      }
      /**
       * Read ULEB value - an integer of varying size. Used for enum indexes and
       * vector lengths.
       * @returns {Number} The ULEB value.
       */
      readULEB() {
        let start = this.bytePosition + this.dataView.byteOffset;
        let buffer = new Uint8Array(this.dataView.buffer, start);
        let { value, length } = (0, import_uleb.ulebDecode)(buffer);
        this.shift(length);
        return value;
      }
      /**
       * Read a BCS vector: read a length and then apply function `cb` X times
       * where X is the length of the vector, defined as ULEB in BCS bytes.
       * @param cb Callback to process elements of vector.
       * @returns {Array<Any>} Array of the resulting values, returned by callback.
       */
      readVec(cb) {
        let length = this.readULEB();
        let result = [];
        for (let i = 0; i < length; i++) {
          result.push(cb(this, i, length));
        }
        return result;
      }
    };
  }
});

// node_modules/@mysten/bcs/dist/cjs/utils.js
var require_utils3 = __commonJS({
  "node_modules/@mysten/bcs/dist/cjs/utils.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var utils_exports = {};
    __export2(utils_exports, {
      decodeStr: () => decodeStr,
      encodeStr: () => encodeStr,
      splitGenericParameters: () => splitGenericParameters
    });
    module2.exports = __toCommonJS2(utils_exports);
    var import_b58 = require_b58();
    var import_b64 = require_b64();
    var import_hex = require_hex();
    function encodeStr(data, encoding) {
      switch (encoding) {
        case "base58":
          return (0, import_b58.toBase58)(data);
        case "base64":
          return (0, import_b64.toBase64)(data);
        case "hex":
          return (0, import_hex.toHex)(data);
        default:
          throw new Error("Unsupported encoding, supported values are: base64, hex");
      }
    }
    function decodeStr(data, encoding) {
      switch (encoding) {
        case "base58":
          return (0, import_b58.fromBase58)(data);
        case "base64":
          return (0, import_b64.fromBase64)(data);
        case "hex":
          return (0, import_hex.fromHex)(data);
        default:
          throw new Error("Unsupported encoding, supported values are: base64, hex");
      }
    }
    function splitGenericParameters(str, genericSeparators = ["<", ">"]) {
      const [left, right] = genericSeparators;
      const tok = [];
      let word = "";
      let nestedAngleBrackets = 0;
      for (let i = 0; i < str.length; i++) {
        const char = str[i];
        if (char === left) {
          nestedAngleBrackets++;
        }
        if (char === right) {
          nestedAngleBrackets--;
        }
        if (nestedAngleBrackets === 0 && char === ",") {
          tok.push(word.trim());
          word = "";
          continue;
        }
        word += char;
      }
      tok.push(word.trim());
      return tok;
    }
  }
});

// node_modules/@mysten/bcs/dist/cjs/writer.js
var require_writer = __commonJS({
  "node_modules/@mysten/bcs/dist/cjs/writer.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var writer_exports = {};
    __export2(writer_exports, {
      BcsWriter: () => BcsWriter
    });
    module2.exports = __toCommonJS2(writer_exports);
    var import_uleb = require_uleb();
    var import_utils4 = require_utils3();
    var BcsWriter = class {
      constructor({
        initialSize = 1024,
        maxSize = Infinity,
        allocateSize = 1024
      } = {}) {
        this.bytePosition = 0;
        this.size = initialSize;
        this.maxSize = maxSize;
        this.allocateSize = allocateSize;
        this.dataView = new DataView(new ArrayBuffer(initialSize));
      }
      ensureSizeOrGrow(bytes) {
        const requiredSize = this.bytePosition + bytes;
        if (requiredSize > this.size) {
          const nextSize = Math.min(this.maxSize, this.size + this.allocateSize);
          if (requiredSize > nextSize) {
            throw new Error(
              `Attempting to serialize to BCS, but buffer does not have enough size. Allocated size: ${this.size}, Max size: ${this.maxSize}, Required size: ${requiredSize}`
            );
          }
          this.size = nextSize;
          const nextBuffer = new ArrayBuffer(this.size);
          new Uint8Array(nextBuffer).set(new Uint8Array(this.dataView.buffer));
          this.dataView = new DataView(nextBuffer);
        }
      }
      /**
       * Shift current cursor position by `bytes`.
       *
       * @param {Number} bytes Number of bytes to
       * @returns {this} Self for possible chaining.
       */
      shift(bytes) {
        this.bytePosition += bytes;
        return this;
      }
      /**
       * Write a U8 value into a buffer and shift cursor position by 1.
       * @param {Number} value Value to write.
       * @returns {this}
       */
      write8(value) {
        this.ensureSizeOrGrow(1);
        this.dataView.setUint8(this.bytePosition, Number(value));
        return this.shift(1);
      }
      /**
       * Write a U16 value into a buffer and shift cursor position by 2.
       * @param {Number} value Value to write.
       * @returns {this}
       */
      write16(value) {
        this.ensureSizeOrGrow(2);
        this.dataView.setUint16(this.bytePosition, Number(value), true);
        return this.shift(2);
      }
      /**
       * Write a U32 value into a buffer and shift cursor position by 4.
       * @param {Number} value Value to write.
       * @returns {this}
       */
      write32(value) {
        this.ensureSizeOrGrow(4);
        this.dataView.setUint32(this.bytePosition, Number(value), true);
        return this.shift(4);
      }
      /**
       * Write a U64 value into a buffer and shift cursor position by 8.
       * @param {bigint} value Value to write.
       * @returns {this}
       */
      write64(value) {
        toLittleEndian(BigInt(value), 8).forEach((el) => this.write8(el));
        return this;
      }
      /**
       * Write a U128 value into a buffer and shift cursor position by 16.
       *
       * @param {bigint} value Value to write.
       * @returns {this}
       */
      write128(value) {
        toLittleEndian(BigInt(value), 16).forEach((el) => this.write8(el));
        return this;
      }
      /**
       * Write a U256 value into a buffer and shift cursor position by 16.
       *
       * @param {bigint} value Value to write.
       * @returns {this}
       */
      write256(value) {
        toLittleEndian(BigInt(value), 32).forEach((el) => this.write8(el));
        return this;
      }
      /**
       * Write a ULEB value into a buffer and shift cursor position by number of bytes
       * written.
       * @param {Number} value Value to write.
       * @returns {this}
       */
      writeULEB(value) {
        (0, import_uleb.ulebEncode)(value).forEach((el) => this.write8(el));
        return this;
      }
      /**
       * Write a vector into a buffer by first writing the vector length and then calling
       * a callback on each passed value.
       *
       * @param {Array<Any>} vector Array of elements to write.
       * @param {WriteVecCb} cb Callback to call on each element of the vector.
       * @returns {this}
       */
      writeVec(vector, cb) {
        this.writeULEB(vector.length);
        Array.from(vector).forEach((el, i) => cb(this, el, i, vector.length));
        return this;
      }
      /**
       * Adds support for iterations over the object.
       * @returns {Uint8Array}
       */
      *[Symbol.iterator]() {
        for (let i = 0; i < this.bytePosition; i++) {
          yield this.dataView.getUint8(i);
        }
        return this.toBytes();
      }
      /**
       * Get underlying buffer taking only value bytes (in case initial buffer size was bigger).
       * @returns {Uint8Array} Resulting bcs.
       */
      toBytes() {
        return new Uint8Array(this.dataView.buffer.slice(0, this.bytePosition));
      }
      /**
       * Represent data as 'hex' or 'base64'
       * @param encoding Encoding to use: 'base64' or 'hex'
       */
      toString(encoding) {
        return (0, import_utils4.encodeStr)(this.toBytes(), encoding);
      }
    };
    function toLittleEndian(bigint, size) {
      let result = new Uint8Array(size);
      let i = 0;
      while (bigint > 0) {
        result[i] = Number(bigint % BigInt(256));
        bigint = bigint / BigInt(256);
        i += 1;
      }
      return result;
    }
  }
});

// node_modules/@mysten/bcs/dist/cjs/bcs-type.js
var require_bcs_type = __commonJS({
  "node_modules/@mysten/bcs/dist/cjs/bcs-type.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __typeError = (msg) => {
      throw TypeError(msg);
    };
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
    var __privateGet2 = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
    var __privateAdd2 = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
    var __privateSet2 = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
    var bcs_type_exports = {};
    __export2(bcs_type_exports, {
      BcsType: () => BcsType,
      SerializedBcs: () => SerializedBcs,
      bigUIntBcsType: () => bigUIntBcsType,
      dynamicSizeBcsType: () => dynamicSizeBcsType,
      fixedSizeBcsType: () => fixedSizeBcsType,
      isSerializedBcs: () => isSerializedBcs,
      lazyBcsType: () => lazyBcsType,
      stringLikeBcsType: () => stringLikeBcsType,
      uIntBcsType: () => uIntBcsType
    });
    module2.exports = __toCommonJS2(bcs_type_exports);
    var import_b58 = require_b58();
    var import_b64 = require_b64();
    var import_hex = require_hex();
    var import_reader = require_reader();
    var import_uleb = require_uleb();
    var import_writer = require_writer();
    var _write;
    var _serialize;
    var _schema;
    var _bytes;
    var _BcsType = class _BcsType2 {
      constructor(options) {
        __privateAdd2(this, _write);
        __privateAdd2(this, _serialize);
        this.name = options.name;
        this.read = options.read;
        this.serializedSize = options.serializedSize ?? (() => null);
        __privateSet2(this, _write, options.write);
        __privateSet2(this, _serialize, options.serialize ?? ((value, options2) => {
          const writer = new import_writer.BcsWriter({
            initialSize: this.serializedSize(value) ?? void 0,
            ...options2
          });
          __privateGet2(this, _write).call(this, value, writer);
          return writer.toBytes();
        }));
        this.validate = options.validate ?? (() => {
        });
      }
      write(value, writer) {
        this.validate(value);
        __privateGet2(this, _write).call(this, value, writer);
      }
      serialize(value, options) {
        this.validate(value);
        return new SerializedBcs(this, __privateGet2(this, _serialize).call(this, value, options));
      }
      parse(bytes) {
        const reader = new import_reader.BcsReader(bytes);
        return this.read(reader);
      }
      fromHex(hex) {
        return this.parse((0, import_hex.fromHex)(hex));
      }
      fromBase58(b64) {
        return this.parse((0, import_b58.fromBase58)(b64));
      }
      fromBase64(b64) {
        return this.parse((0, import_b64.fromBase64)(b64));
      }
      transform({
        name,
        input,
        output,
        validate: validate3
      }) {
        return new _BcsType2({
          name: name ?? this.name,
          read: (reader) => output ? output(this.read(reader)) : this.read(reader),
          write: (value, writer) => __privateGet2(this, _write).call(this, input ? input(value) : value, writer),
          serializedSize: (value) => this.serializedSize(input ? input(value) : value),
          serialize: (value, options) => __privateGet2(this, _serialize).call(this, input ? input(value) : value, options),
          validate: (value) => {
            validate3 == null ? void 0 : validate3(value);
            this.validate(input ? input(value) : value);
          }
        });
      }
    };
    _write = /* @__PURE__ */ new WeakMap();
    _serialize = /* @__PURE__ */ new WeakMap();
    var BcsType = _BcsType;
    var SERIALIZED_BCS_BRAND = Symbol.for("@mysten/serialized-bcs");
    function isSerializedBcs(obj) {
      return !!obj && typeof obj === "object" && obj[SERIALIZED_BCS_BRAND] === true;
    }
    var SerializedBcs = class {
      constructor(type2, schema) {
        __privateAdd2(this, _schema);
        __privateAdd2(this, _bytes);
        __privateSet2(this, _schema, type2);
        __privateSet2(this, _bytes, schema);
      }
      // Used to brand SerializedBcs so that they can be identified, even between multiple copies
      // of the @mysten/bcs package are installed
      get [SERIALIZED_BCS_BRAND]() {
        return true;
      }
      toBytes() {
        return __privateGet2(this, _bytes);
      }
      toHex() {
        return (0, import_hex.toHex)(__privateGet2(this, _bytes));
      }
      toBase64() {
        return (0, import_b64.toBase64)(__privateGet2(this, _bytes));
      }
      toBase58() {
        return (0, import_b58.toBase58)(__privateGet2(this, _bytes));
      }
      parse() {
        return __privateGet2(this, _schema).parse(__privateGet2(this, _bytes));
      }
    };
    _schema = /* @__PURE__ */ new WeakMap();
    _bytes = /* @__PURE__ */ new WeakMap();
    function fixedSizeBcsType({
      size,
      ...options
    }) {
      return new BcsType({
        ...options,
        serializedSize: () => size
      });
    }
    function uIntBcsType({
      readMethod,
      writeMethod,
      ...options
    }) {
      return fixedSizeBcsType({
        ...options,
        read: (reader) => reader[readMethod](),
        write: (value, writer) => writer[writeMethod](value),
        validate: (value) => {
          var _a;
          if (value < 0 || value > options.maxValue) {
            throw new TypeError(
              `Invalid ${options.name} value: ${value}. Expected value in range 0-${options.maxValue}`
            );
          }
          (_a = options.validate) == null ? void 0 : _a.call(options, value);
        }
      });
    }
    function bigUIntBcsType({
      readMethod,
      writeMethod,
      ...options
    }) {
      return fixedSizeBcsType({
        ...options,
        read: (reader) => reader[readMethod](),
        write: (value, writer) => writer[writeMethod](BigInt(value)),
        validate: (val) => {
          var _a;
          const value = BigInt(val);
          if (value < 0 || value > options.maxValue) {
            throw new TypeError(
              `Invalid ${options.name} value: ${value}. Expected value in range 0-${options.maxValue}`
            );
          }
          (_a = options.validate) == null ? void 0 : _a.call(options, value);
        }
      });
    }
    function dynamicSizeBcsType({
      serialize: serialize2,
      ...options
    }) {
      const type2 = new BcsType({
        ...options,
        serialize: serialize2,
        write: (value, writer) => {
          for (const byte of type2.serialize(value).toBytes()) {
            writer.write8(byte);
          }
        }
      });
      return type2;
    }
    function stringLikeBcsType({
      toBytes: toBytes2,
      fromBytes,
      ...options
    }) {
      return new BcsType({
        ...options,
        read: (reader) => {
          const length = reader.readULEB();
          const bytes = reader.readBytes(length);
          return fromBytes(bytes);
        },
        write: (hex, writer) => {
          const bytes = toBytes2(hex);
          writer.writeULEB(bytes.length);
          for (let i = 0; i < bytes.length; i++) {
            writer.write8(bytes[i]);
          }
        },
        serialize: (value) => {
          const bytes = toBytes2(value);
          const size = (0, import_uleb.ulebEncode)(bytes.length);
          const result = new Uint8Array(size.length + bytes.length);
          result.set(size, 0);
          result.set(bytes, size.length);
          return result;
        },
        validate: (value) => {
          var _a;
          if (typeof value !== "string") {
            throw new TypeError(`Invalid ${options.name} value: ${value}. Expected string`);
          }
          (_a = options.validate) == null ? void 0 : _a.call(options, value);
        }
      });
    }
    function lazyBcsType(cb) {
      let lazyType = null;
      function getType() {
        if (!lazyType) {
          lazyType = cb();
        }
        return lazyType;
      }
      return new BcsType({
        name: "lazy",
        read: (data) => getType().read(data),
        serializedSize: (value) => getType().serializedSize(value),
        write: (value, writer) => getType().write(value, writer),
        serialize: (value, options) => getType().serialize(value, options).toBytes()
      });
    }
  }
});

// node_modules/@mysten/bcs/dist/cjs/bcs.js
var require_bcs = __commonJS({
  "node_modules/@mysten/bcs/dist/cjs/bcs.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var bcs_exports = {};
    __export2(bcs_exports, {
      bcs: () => bcs
    });
    module2.exports = __toCommonJS2(bcs_exports);
    var import_bcs_type = require_bcs_type();
    var import_uleb = require_uleb();
    var bcs = {
      /**
       * Creates a BcsType that can be used to read and write an 8-bit unsigned integer.
       * @example
       * bcs.u8().serialize(255).toBytes() // Uint8Array [ 255 ]
       */
      u8(options) {
        return (0, import_bcs_type.uIntBcsType)({
          name: "u8",
          readMethod: "read8",
          writeMethod: "write8",
          size: 1,
          maxValue: 2 ** 8 - 1,
          ...options
        });
      },
      /**
       * Creates a BcsType that can be used to read and write a 16-bit unsigned integer.
       * @example
       * bcs.u16().serialize(65535).toBytes() // Uint8Array [ 255, 255 ]
       */
      u16(options) {
        return (0, import_bcs_type.uIntBcsType)({
          name: "u16",
          readMethod: "read16",
          writeMethod: "write16",
          size: 2,
          maxValue: 2 ** 16 - 1,
          ...options
        });
      },
      /**
       * Creates a BcsType that can be used to read and write a 32-bit unsigned integer.
       * @example
       * bcs.u32().serialize(4294967295).toBytes() // Uint8Array [ 255, 255, 255, 255 ]
       */
      u32(options) {
        return (0, import_bcs_type.uIntBcsType)({
          name: "u32",
          readMethod: "read32",
          writeMethod: "write32",
          size: 4,
          maxValue: 2 ** 32 - 1,
          ...options
        });
      },
      /**
       * Creates a BcsType that can be used to read and write a 64-bit unsigned integer.
       * @example
       * bcs.u64().serialize(1).toBytes() // Uint8Array [ 1, 0, 0, 0, 0, 0, 0, 0 ]
       */
      u64(options) {
        return (0, import_bcs_type.bigUIntBcsType)({
          name: "u64",
          readMethod: "read64",
          writeMethod: "write64",
          size: 8,
          maxValue: 2n ** 64n - 1n,
          ...options
        });
      },
      /**
       * Creates a BcsType that can be used to read and write a 128-bit unsigned integer.
       * @example
       * bcs.u128().serialize(1).toBytes() // Uint8Array [ 1, ..., 0 ]
       */
      u128(options) {
        return (0, import_bcs_type.bigUIntBcsType)({
          name: "u128",
          readMethod: "read128",
          writeMethod: "write128",
          size: 16,
          maxValue: 2n ** 128n - 1n,
          ...options
        });
      },
      /**
       * Creates a BcsType that can be used to read and write a 256-bit unsigned integer.
       * @example
       * bcs.u256().serialize(1).toBytes() // Uint8Array [ 1, ..., 0 ]
       */
      u256(options) {
        return (0, import_bcs_type.bigUIntBcsType)({
          name: "u256",
          readMethod: "read256",
          writeMethod: "write256",
          size: 32,
          maxValue: 2n ** 256n - 1n,
          ...options
        });
      },
      /**
       * Creates a BcsType that can be used to read and write boolean values.
       * @example
       * bcs.bool().serialize(true).toBytes() // Uint8Array [ 1 ]
       */
      bool(options) {
        return (0, import_bcs_type.fixedSizeBcsType)({
          name: "bool",
          size: 1,
          read: (reader) => reader.read8() === 1,
          write: (value, writer) => writer.write8(value ? 1 : 0),
          ...options,
          validate: (value) => {
            var _a;
            (_a = options == null ? void 0 : options.validate) == null ? void 0 : _a.call(options, value);
            if (typeof value !== "boolean") {
              throw new TypeError(`Expected boolean, found ${typeof value}`);
            }
          }
        });
      },
      /**
       * Creates a BcsType that can be used to read and write unsigned LEB encoded integers
       * @example
       *
       */
      uleb128(options) {
        return (0, import_bcs_type.dynamicSizeBcsType)({
          name: "uleb128",
          read: (reader) => reader.readULEB(),
          serialize: (value) => {
            return Uint8Array.from((0, import_uleb.ulebEncode)(value));
          },
          ...options
        });
      },
      /**
       * Creates a BcsType representing a fixed length byte array
       * @param size The number of bytes this types represents
       * @example
       * bcs.bytes(3).serialize(new Uint8Array([1, 2, 3])).toBytes() // Uint8Array [1, 2, 3]
       */
      bytes(size, options) {
        return (0, import_bcs_type.fixedSizeBcsType)({
          name: `bytes[${size}]`,
          size,
          read: (reader) => reader.readBytes(size),
          write: (value, writer) => {
            const array2 = new Uint8Array(value);
            for (let i = 0; i < size; i++) {
              writer.write8(array2[i] ?? 0);
            }
          },
          ...options,
          validate: (value) => {
            var _a;
            (_a = options == null ? void 0 : options.validate) == null ? void 0 : _a.call(options, value);
            if (!value || typeof value !== "object" || !("length" in value)) {
              throw new TypeError(`Expected array, found ${typeof value}`);
            }
            if (value.length !== size) {
              throw new TypeError(`Expected array of length ${size}, found ${value.length}`);
            }
          }
        });
      },
      /**
       * Creates a BcsType representing a variable length byte array
       *
       * @example
       * bcs.byteVector().serialize([1, 2, 3]).toBytes() // Uint8Array [3, 1, 2, 3]
       */
      byteVector(options) {
        return new import_bcs_type.BcsType({
          name: `bytesVector`,
          read: (reader) => {
            const length = reader.readULEB();
            return reader.readBytes(length);
          },
          write: (value, writer) => {
            const array2 = new Uint8Array(value);
            writer.writeULEB(array2.length);
            for (let i = 0; i < array2.length; i++) {
              writer.write8(array2[i] ?? 0);
            }
          },
          ...options,
          serializedSize: (value) => {
            const length = "length" in value ? value.length : null;
            return length == null ? null : (0, import_uleb.ulebEncode)(length).length + length;
          },
          validate: (value) => {
            var _a;
            (_a = options == null ? void 0 : options.validate) == null ? void 0 : _a.call(options, value);
            if (!value || typeof value !== "object" || !("length" in value)) {
              throw new TypeError(`Expected array, found ${typeof value}`);
            }
          }
        });
      },
      /**
       * Creates a BcsType that can ser/de string values.  Strings will be UTF-8 encoded
       * @example
       * bcs.string().serialize('a').toBytes() // Uint8Array [ 1, 97 ]
       */
      string(options) {
        return (0, import_bcs_type.stringLikeBcsType)({
          name: "string",
          toBytes: (value) => new TextEncoder().encode(value),
          fromBytes: (bytes) => new TextDecoder().decode(bytes),
          ...options
        });
      },
      /**
       * Creates a BcsType that represents a fixed length array of a given type
       * @param size The number of elements in the array
       * @param type The BcsType of each element in the array
       * @example
       * bcs.fixedArray(3, bcs.u8()).serialize([1, 2, 3]).toBytes() // Uint8Array [ 1, 2, 3 ]
       */
      fixedArray(size, type2, options) {
        return new import_bcs_type.BcsType({
          name: `${type2.name}[${size}]`,
          read: (reader) => {
            const result = new Array(size);
            for (let i = 0; i < size; i++) {
              result[i] = type2.read(reader);
            }
            return result;
          },
          write: (value, writer) => {
            for (const item of value) {
              type2.write(item, writer);
            }
          },
          ...options,
          validate: (value) => {
            var _a;
            (_a = options == null ? void 0 : options.validate) == null ? void 0 : _a.call(options, value);
            if (!value || typeof value !== "object" || !("length" in value)) {
              throw new TypeError(`Expected array, found ${typeof value}`);
            }
            if (value.length !== size) {
              throw new TypeError(`Expected array of length ${size}, found ${value.length}`);
            }
          }
        });
      },
      /**
       * Creates a BcsType representing an optional value
       * @param type The BcsType of the optional value
       * @example
       * bcs.option(bcs.u8()).serialize(null).toBytes() // Uint8Array [ 0 ]
       * bcs.option(bcs.u8()).serialize(1).toBytes() // Uint8Array [ 1, 1 ]
       */
      option(type2) {
        return bcs.enum(`Option<${type2.name}>`, {
          None: null,
          Some: type2
        }).transform({
          input: (value) => {
            if (value == null) {
              return { None: true };
            }
            return { Some: value };
          },
          output: (value) => {
            if (value.$kind === "Some") {
              return value.Some;
            }
            return null;
          }
        });
      },
      /**
       * Creates a BcsType representing a variable length vector of a given type
       * @param type The BcsType of each element in the vector
       *
       * @example
       * bcs.vector(bcs.u8()).toBytes([1, 2, 3]) // Uint8Array [ 3, 1, 2, 3 ]
       */
      vector(type2, options) {
        return new import_bcs_type.BcsType({
          name: `vector<${type2.name}>`,
          read: (reader) => {
            const length = reader.readULEB();
            const result = new Array(length);
            for (let i = 0; i < length; i++) {
              result[i] = type2.read(reader);
            }
            return result;
          },
          write: (value, writer) => {
            writer.writeULEB(value.length);
            for (const item of value) {
              type2.write(item, writer);
            }
          },
          ...options,
          validate: (value) => {
            var _a;
            (_a = options == null ? void 0 : options.validate) == null ? void 0 : _a.call(options, value);
            if (!value || typeof value !== "object" || !("length" in value)) {
              throw new TypeError(`Expected array, found ${typeof value}`);
            }
          }
        });
      },
      /**
       * Creates a BcsType representing a tuple of a given set of types
       * @param types The BcsTypes for each element in the tuple
       *
       * @example
       * const tuple = bcs.tuple([bcs.u8(), bcs.string(), bcs.bool()])
       * tuple.serialize([1, 'a', true]).toBytes() // Uint8Array [ 1, 1, 97, 1 ]
       */
      tuple(types, options) {
        return new import_bcs_type.BcsType({
          name: `(${types.map((t) => t.name).join(", ")})`,
          serializedSize: (values) => {
            let total = 0;
            for (let i = 0; i < types.length; i++) {
              const size = types[i].serializedSize(values[i]);
              if (size == null) {
                return null;
              }
              total += size;
            }
            return total;
          },
          read: (reader) => {
            const result = [];
            for (const type2 of types) {
              result.push(type2.read(reader));
            }
            return result;
          },
          write: (value, writer) => {
            for (let i = 0; i < types.length; i++) {
              types[i].write(value[i], writer);
            }
          },
          ...options,
          validate: (value) => {
            var _a;
            (_a = options == null ? void 0 : options.validate) == null ? void 0 : _a.call(options, value);
            if (!Array.isArray(value)) {
              throw new TypeError(`Expected array, found ${typeof value}`);
            }
            if (value.length !== types.length) {
              throw new TypeError(`Expected array of length ${types.length}, found ${value.length}`);
            }
          }
        });
      },
      /**
       * Creates a BcsType representing a struct of a given set of fields
       * @param name The name of the struct
       * @param fields The fields of the struct. The order of the fields affects how data is serialized and deserialized
       *
       * @example
       * const struct = bcs.struct('MyStruct', {
       *  a: bcs.u8(),
       *  b: bcs.string(),
       * })
       * struct.serialize({ a: 1, b: 'a' }).toBytes() // Uint8Array [ 1, 1, 97 ]
       */
      struct(name, fields, options) {
        const canonicalOrder = Object.entries(fields);
        return new import_bcs_type.BcsType({
          name,
          serializedSize: (values) => {
            let total = 0;
            for (const [field, type2] of canonicalOrder) {
              const size = type2.serializedSize(values[field]);
              if (size == null) {
                return null;
              }
              total += size;
            }
            return total;
          },
          read: (reader) => {
            const result = {};
            for (const [field, type2] of canonicalOrder) {
              result[field] = type2.read(reader);
            }
            return result;
          },
          write: (value, writer) => {
            for (const [field, type2] of canonicalOrder) {
              type2.write(value[field], writer);
            }
          },
          ...options,
          validate: (value) => {
            var _a;
            (_a = options == null ? void 0 : options.validate) == null ? void 0 : _a.call(options, value);
            if (typeof value !== "object" || value == null) {
              throw new TypeError(`Expected object, found ${typeof value}`);
            }
          }
        });
      },
      /**
       * Creates a BcsType representing an enum of a given set of options
       * @param name The name of the enum
       * @param values The values of the enum. The order of the values affects how data is serialized and deserialized.
       * null can be used to represent a variant with no data.
       *
       * @example
       * const enum = bcs.enum('MyEnum', {
       *   A: bcs.u8(),
       *   B: bcs.string(),
       *   C: null,
       * })
       * enum.serialize({ A: 1 }).toBytes() // Uint8Array [ 0, 1 ]
       * enum.serialize({ B: 'a' }).toBytes() // Uint8Array [ 1, 1, 97 ]
       * enum.serialize({ C: true }).toBytes() // Uint8Array [ 2 ]
       */
      enum(name, values, options) {
        const canonicalOrder = Object.entries(values);
        return new import_bcs_type.BcsType({
          name,
          read: (reader) => {
            const index = reader.readULEB();
            const enumEntry = canonicalOrder[index];
            if (!enumEntry) {
              throw new TypeError(`Unknown value ${index} for enum ${name}`);
            }
            const [kind, type2] = enumEntry;
            return {
              [kind]: (type2 == null ? void 0 : type2.read(reader)) ?? true,
              $kind: kind
            };
          },
          write: (value, writer) => {
            const [name2, val] = Object.entries(value).filter(
              ([name3]) => Object.hasOwn(values, name3)
            )[0];
            for (let i = 0; i < canonicalOrder.length; i++) {
              const [optionName, optionType] = canonicalOrder[i];
              if (optionName === name2) {
                writer.writeULEB(i);
                optionType == null ? void 0 : optionType.write(val, writer);
                return;
              }
            }
          },
          ...options,
          validate: (value) => {
            var _a;
            (_a = options == null ? void 0 : options.validate) == null ? void 0 : _a.call(options, value);
            if (typeof value !== "object" || value == null) {
              throw new TypeError(`Expected object, found ${typeof value}`);
            }
            const keys = Object.keys(value).filter(
              (k) => value[k] !== void 0 && Object.hasOwn(values, k)
            );
            if (keys.length !== 1) {
              throw new TypeError(
                `Expected object with one key, but found ${keys.length} for type ${name}}`
              );
            }
            const [variant] = keys;
            if (!Object.hasOwn(values, variant)) {
              throw new TypeError(`Invalid enum variant ${variant}`);
            }
          }
        });
      },
      /**
       * Creates a BcsType representing a map of a given key and value type
       * @param keyType The BcsType of the key
       * @param valueType The BcsType of the value
       * @example
       * const map = bcs.map(bcs.u8(), bcs.string())
       * map.serialize(new Map([[2, 'a']])).toBytes() // Uint8Array [ 1, 2, 1, 97 ]
       */
      map(keyType, valueType) {
        return bcs.vector(bcs.tuple([keyType, valueType])).transform({
          name: `Map<${keyType.name}, ${valueType.name}>`,
          input: (value) => {
            return [...value.entries()];
          },
          output: (value) => {
            const result = /* @__PURE__ */ new Map();
            for (const [key, val] of value) {
              result.set(key, val);
            }
            return result;
          }
        });
      },
      /**
       * Creates a BcsType that wraps another BcsType which is lazily evaluated. This is useful for creating recursive types.
       * @param cb A callback that returns the BcsType
       */
      lazy(cb) {
        return (0, import_bcs_type.lazyBcsType)(cb);
      }
    };
  }
});

// node_modules/@mysten/bcs/dist/cjs/index.js
var require_cjs = __commonJS({
  "node_modules/@mysten/bcs/dist/cjs/index.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var index_exports = {};
    __export2(index_exports, {
      BcsReader: () => import_reader.BcsReader,
      BcsType: () => import_bcs_type.BcsType,
      BcsWriter: () => import_writer.BcsWriter,
      SerializedBcs: () => import_bcs_type.SerializedBcs,
      bcs: () => import_bcs.bcs,
      decodeStr: () => import_utils4.decodeStr,
      encodeStr: () => import_utils4.encodeStr,
      fromB58: () => import_b58.fromB58,
      fromB64: () => import_b64.fromB64,
      fromBase58: () => import_b58.fromBase58,
      fromBase64: () => import_b64.fromBase64,
      fromHEX: () => import_hex.fromHEX,
      fromHex: () => import_hex.fromHex,
      isSerializedBcs: () => import_bcs_type.isSerializedBcs,
      splitGenericParameters: () => import_utils4.splitGenericParameters,
      toB58: () => import_b58.toB58,
      toB64: () => import_b64.toB64,
      toBase58: () => import_b58.toBase58,
      toBase64: () => import_b64.toBase64,
      toHEX: () => import_hex.toHEX,
      toHex: () => import_hex.toHex
    });
    module2.exports = __toCommonJS2(index_exports);
    var import_b58 = require_b58();
    var import_b64 = require_b64();
    var import_bcs_type = require_bcs_type();
    var import_bcs = require_bcs();
    var import_hex = require_hex();
    var import_reader = require_reader();
    var import_utils4 = require_utils3();
    var import_writer = require_writer();
  }
});

// node_modules/@noble/hashes/_blake.js
var require_blake = __commonJS({
  "node_modules/@noble/hashes/_blake.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BSIGMA = void 0;
    exports2.G1s = G1s;
    exports2.G2s = G2s;
    var utils_ts_1 = require_utils();
    exports2.BSIGMA = Uint8Array.from([
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      14,
      10,
      4,
      8,
      9,
      15,
      13,
      6,
      1,
      12,
      0,
      2,
      11,
      7,
      5,
      3,
      11,
      8,
      12,
      0,
      5,
      2,
      15,
      13,
      10,
      14,
      3,
      6,
      7,
      1,
      9,
      4,
      7,
      9,
      3,
      1,
      13,
      12,
      11,
      14,
      2,
      6,
      5,
      10,
      4,
      0,
      15,
      8,
      9,
      0,
      5,
      7,
      2,
      4,
      10,
      15,
      14,
      1,
      11,
      12,
      6,
      8,
      3,
      13,
      2,
      12,
      6,
      10,
      0,
      11,
      8,
      3,
      4,
      13,
      7,
      5,
      15,
      14,
      1,
      9,
      12,
      5,
      1,
      15,
      14,
      13,
      4,
      10,
      0,
      7,
      6,
      3,
      9,
      2,
      8,
      11,
      13,
      11,
      7,
      14,
      12,
      1,
      3,
      9,
      5,
      0,
      15,
      4,
      8,
      6,
      2,
      10,
      6,
      15,
      14,
      9,
      11,
      3,
      0,
      8,
      12,
      2,
      13,
      7,
      1,
      4,
      10,
      5,
      10,
      2,
      8,
      4,
      7,
      6,
      1,
      5,
      15,
      11,
      9,
      14,
      3,
      12,
      13,
      0,
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      14,
      10,
      4,
      8,
      9,
      15,
      13,
      6,
      1,
      12,
      0,
      2,
      11,
      7,
      5,
      3,
      // Blake1, unused in others
      11,
      8,
      12,
      0,
      5,
      2,
      15,
      13,
      10,
      14,
      3,
      6,
      7,
      1,
      9,
      4,
      7,
      9,
      3,
      1,
      13,
      12,
      11,
      14,
      2,
      6,
      5,
      10,
      4,
      0,
      15,
      8,
      9,
      0,
      5,
      7,
      2,
      4,
      10,
      15,
      14,
      1,
      11,
      12,
      6,
      8,
      3,
      13,
      2,
      12,
      6,
      10,
      0,
      11,
      8,
      3,
      4,
      13,
      7,
      5,
      15,
      14,
      1,
      9
    ]);
    function G1s(a, b, c, d, x) {
      a = a + b + x | 0;
      d = (0, utils_ts_1.rotr)(d ^ a, 16);
      c = c + d | 0;
      b = (0, utils_ts_1.rotr)(b ^ c, 12);
      return { a, b, c, d };
    }
    function G2s(a, b, c, d, x) {
      a = a + b + x | 0;
      d = (0, utils_ts_1.rotr)(d ^ a, 8);
      c = c + d | 0;
      b = (0, utils_ts_1.rotr)(b ^ c, 7);
      return { a, b, c, d };
    }
  }
});

// node_modules/@noble/hashes/blake2.js
var require_blake2 = __commonJS({
  "node_modules/@noble/hashes/blake2.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.blake2s = exports2.BLAKE2s = exports2.blake2b = exports2.BLAKE2b = exports2.BLAKE2 = void 0;
    exports2.compress = compress;
    var _blake_ts_1 = require_blake();
    var _md_ts_1 = require_md();
    var u642 = require_u64();
    var utils_ts_1 = require_utils();
    var B2B_IV = Uint32Array.from([
      4089235720,
      1779033703,
      2227873595,
      3144134277,
      4271175723,
      1013904242,
      1595750129,
      2773480762,
      2917565137,
      1359893119,
      725511199,
      2600822924,
      4215389547,
      528734635,
      327033209,
      1541459225
    ]);
    var BBUF = new Uint32Array(32);
    function G1b(a, b, c, d, msg, x) {
      const Xl = msg[x], Xh = msg[x + 1];
      let Al = BBUF[2 * a], Ah = BBUF[2 * a + 1];
      let Bl = BBUF[2 * b], Bh = BBUF[2 * b + 1];
      let Cl = BBUF[2 * c], Ch = BBUF[2 * c + 1];
      let Dl = BBUF[2 * d], Dh = BBUF[2 * d + 1];
      let ll = u642.add3L(Al, Bl, Xl);
      Ah = u642.add3H(ll, Ah, Bh, Xh);
      Al = ll | 0;
      ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
      ({ Dh, Dl } = { Dh: u642.rotr32H(Dh, Dl), Dl: u642.rotr32L(Dh, Dl) });
      ({ h: Ch, l: Cl } = u642.add(Ch, Cl, Dh, Dl));
      ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
      ({ Bh, Bl } = { Bh: u642.rotrSH(Bh, Bl, 24), Bl: u642.rotrSL(Bh, Bl, 24) });
      BBUF[2 * a] = Al, BBUF[2 * a + 1] = Ah;
      BBUF[2 * b] = Bl, BBUF[2 * b + 1] = Bh;
      BBUF[2 * c] = Cl, BBUF[2 * c + 1] = Ch;
      BBUF[2 * d] = Dl, BBUF[2 * d + 1] = Dh;
    }
    function G2b(a, b, c, d, msg, x) {
      const Xl = msg[x], Xh = msg[x + 1];
      let Al = BBUF[2 * a], Ah = BBUF[2 * a + 1];
      let Bl = BBUF[2 * b], Bh = BBUF[2 * b + 1];
      let Cl = BBUF[2 * c], Ch = BBUF[2 * c + 1];
      let Dl = BBUF[2 * d], Dh = BBUF[2 * d + 1];
      let ll = u642.add3L(Al, Bl, Xl);
      Ah = u642.add3H(ll, Ah, Bh, Xh);
      Al = ll | 0;
      ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
      ({ Dh, Dl } = { Dh: u642.rotrSH(Dh, Dl, 16), Dl: u642.rotrSL(Dh, Dl, 16) });
      ({ h: Ch, l: Cl } = u642.add(Ch, Cl, Dh, Dl));
      ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
      ({ Bh, Bl } = { Bh: u642.rotrBH(Bh, Bl, 63), Bl: u642.rotrBL(Bh, Bl, 63) });
      BBUF[2 * a] = Al, BBUF[2 * a + 1] = Ah;
      BBUF[2 * b] = Bl, BBUF[2 * b + 1] = Bh;
      BBUF[2 * c] = Cl, BBUF[2 * c + 1] = Ch;
      BBUF[2 * d] = Dl, BBUF[2 * d + 1] = Dh;
    }
    function checkBlake2Opts(outputLen, opts = {}, keyLen, saltLen, persLen) {
      (0, utils_ts_1.anumber)(keyLen);
      if (outputLen < 0 || outputLen > keyLen)
        throw new Error("outputLen bigger than keyLen");
      const { key, salt, personalization } = opts;
      if (key !== void 0 && (key.length < 1 || key.length > keyLen))
        throw new Error("key length must be undefined or 1.." + keyLen);
      if (salt !== void 0 && salt.length !== saltLen)
        throw new Error("salt must be undefined or " + saltLen);
      if (personalization !== void 0 && personalization.length !== persLen)
        throw new Error("personalization must be undefined or " + persLen);
    }
    var BLAKE2 = class extends utils_ts_1.Hash {
      constructor(blockLen, outputLen) {
        super();
        this.finished = false;
        this.destroyed = false;
        this.length = 0;
        this.pos = 0;
        (0, utils_ts_1.anumber)(blockLen);
        (0, utils_ts_1.anumber)(outputLen);
        this.blockLen = blockLen;
        this.outputLen = outputLen;
        this.buffer = new Uint8Array(blockLen);
        this.buffer32 = (0, utils_ts_1.u32)(this.buffer);
      }
      update(data) {
        (0, utils_ts_1.aexists)(this);
        data = (0, utils_ts_1.toBytes)(data);
        (0, utils_ts_1.abytes)(data);
        const { blockLen, buffer, buffer32 } = this;
        const len = data.length;
        const offset2 = data.byteOffset;
        const buf = data.buffer;
        for (let pos = 0; pos < len; ) {
          if (this.pos === blockLen) {
            (0, utils_ts_1.swap32IfBE)(buffer32);
            this.compress(buffer32, 0, false);
            (0, utils_ts_1.swap32IfBE)(buffer32);
            this.pos = 0;
          }
          const take = Math.min(blockLen - this.pos, len - pos);
          const dataOffset = offset2 + pos;
          if (take === blockLen && !(dataOffset % 4) && pos + take < len) {
            const data32 = new Uint32Array(buf, dataOffset, Math.floor((len - pos) / 4));
            (0, utils_ts_1.swap32IfBE)(data32);
            for (let pos32 = 0; pos + blockLen < len; pos32 += buffer32.length, pos += blockLen) {
              this.length += blockLen;
              this.compress(data32, pos32, false);
            }
            (0, utils_ts_1.swap32IfBE)(data32);
            continue;
          }
          buffer.set(data.subarray(pos, pos + take), this.pos);
          this.pos += take;
          this.length += take;
          pos += take;
        }
        return this;
      }
      digestInto(out) {
        (0, utils_ts_1.aexists)(this);
        (0, utils_ts_1.aoutput)(out, this);
        const { pos, buffer32 } = this;
        this.finished = true;
        (0, utils_ts_1.clean)(this.buffer.subarray(pos));
        (0, utils_ts_1.swap32IfBE)(buffer32);
        this.compress(buffer32, 0, true);
        (0, utils_ts_1.swap32IfBE)(buffer32);
        const out32 = (0, utils_ts_1.u32)(out);
        this.get().forEach((v, i) => out32[i] = (0, utils_ts_1.swap8IfBE)(v));
      }
      digest() {
        const { buffer, outputLen } = this;
        this.digestInto(buffer);
        const res = buffer.slice(0, outputLen);
        this.destroy();
        return res;
      }
      _cloneInto(to) {
        const { buffer, length, finished: finished2, destroyed, outputLen, pos } = this;
        to || (to = new this.constructor({ dkLen: outputLen }));
        to.set(...this.get());
        to.buffer.set(buffer);
        to.destroyed = destroyed;
        to.finished = finished2;
        to.length = length;
        to.pos = pos;
        to.outputLen = outputLen;
        return to;
      }
      clone() {
        return this._cloneInto();
      }
    };
    exports2.BLAKE2 = BLAKE2;
    var BLAKE2b = class extends BLAKE2 {
      constructor(opts = {}) {
        const olen = opts.dkLen === void 0 ? 64 : opts.dkLen;
        super(128, olen);
        this.v0l = B2B_IV[0] | 0;
        this.v0h = B2B_IV[1] | 0;
        this.v1l = B2B_IV[2] | 0;
        this.v1h = B2B_IV[3] | 0;
        this.v2l = B2B_IV[4] | 0;
        this.v2h = B2B_IV[5] | 0;
        this.v3l = B2B_IV[6] | 0;
        this.v3h = B2B_IV[7] | 0;
        this.v4l = B2B_IV[8] | 0;
        this.v4h = B2B_IV[9] | 0;
        this.v5l = B2B_IV[10] | 0;
        this.v5h = B2B_IV[11] | 0;
        this.v6l = B2B_IV[12] | 0;
        this.v6h = B2B_IV[13] | 0;
        this.v7l = B2B_IV[14] | 0;
        this.v7h = B2B_IV[15] | 0;
        checkBlake2Opts(olen, opts, 64, 16, 16);
        let { key, personalization, salt } = opts;
        let keyLength = 0;
        if (key !== void 0) {
          key = (0, utils_ts_1.toBytes)(key);
          keyLength = key.length;
        }
        this.v0l ^= this.outputLen | keyLength << 8 | 1 << 16 | 1 << 24;
        if (salt !== void 0) {
          salt = (0, utils_ts_1.toBytes)(salt);
          const slt = (0, utils_ts_1.u32)(salt);
          this.v4l ^= (0, utils_ts_1.swap8IfBE)(slt[0]);
          this.v4h ^= (0, utils_ts_1.swap8IfBE)(slt[1]);
          this.v5l ^= (0, utils_ts_1.swap8IfBE)(slt[2]);
          this.v5h ^= (0, utils_ts_1.swap8IfBE)(slt[3]);
        }
        if (personalization !== void 0) {
          personalization = (0, utils_ts_1.toBytes)(personalization);
          const pers = (0, utils_ts_1.u32)(personalization);
          this.v6l ^= (0, utils_ts_1.swap8IfBE)(pers[0]);
          this.v6h ^= (0, utils_ts_1.swap8IfBE)(pers[1]);
          this.v7l ^= (0, utils_ts_1.swap8IfBE)(pers[2]);
          this.v7h ^= (0, utils_ts_1.swap8IfBE)(pers[3]);
        }
        if (key !== void 0) {
          const tmp = new Uint8Array(this.blockLen);
          tmp.set(key);
          this.update(tmp);
        }
      }
      // prettier-ignore
      get() {
        let { v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h } = this;
        return [v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h];
      }
      // prettier-ignore
      set(v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h) {
        this.v0l = v0l | 0;
        this.v0h = v0h | 0;
        this.v1l = v1l | 0;
        this.v1h = v1h | 0;
        this.v2l = v2l | 0;
        this.v2h = v2h | 0;
        this.v3l = v3l | 0;
        this.v3h = v3h | 0;
        this.v4l = v4l | 0;
        this.v4h = v4h | 0;
        this.v5l = v5l | 0;
        this.v5h = v5h | 0;
        this.v6l = v6l | 0;
        this.v6h = v6h | 0;
        this.v7l = v7l | 0;
        this.v7h = v7h | 0;
      }
      compress(msg, offset2, isLast) {
        this.get().forEach((v, i) => BBUF[i] = v);
        BBUF.set(B2B_IV, 16);
        let { h, l } = u642.fromBig(BigInt(this.length));
        BBUF[24] = B2B_IV[8] ^ l;
        BBUF[25] = B2B_IV[9] ^ h;
        if (isLast) {
          BBUF[28] = ~BBUF[28];
          BBUF[29] = ~BBUF[29];
        }
        let j = 0;
        const s = _blake_ts_1.BSIGMA;
        for (let i = 0; i < 12; i++) {
          G1b(0, 4, 8, 12, msg, offset2 + 2 * s[j++]);
          G2b(0, 4, 8, 12, msg, offset2 + 2 * s[j++]);
          G1b(1, 5, 9, 13, msg, offset2 + 2 * s[j++]);
          G2b(1, 5, 9, 13, msg, offset2 + 2 * s[j++]);
          G1b(2, 6, 10, 14, msg, offset2 + 2 * s[j++]);
          G2b(2, 6, 10, 14, msg, offset2 + 2 * s[j++]);
          G1b(3, 7, 11, 15, msg, offset2 + 2 * s[j++]);
          G2b(3, 7, 11, 15, msg, offset2 + 2 * s[j++]);
          G1b(0, 5, 10, 15, msg, offset2 + 2 * s[j++]);
          G2b(0, 5, 10, 15, msg, offset2 + 2 * s[j++]);
          G1b(1, 6, 11, 12, msg, offset2 + 2 * s[j++]);
          G2b(1, 6, 11, 12, msg, offset2 + 2 * s[j++]);
          G1b(2, 7, 8, 13, msg, offset2 + 2 * s[j++]);
          G2b(2, 7, 8, 13, msg, offset2 + 2 * s[j++]);
          G1b(3, 4, 9, 14, msg, offset2 + 2 * s[j++]);
          G2b(3, 4, 9, 14, msg, offset2 + 2 * s[j++]);
        }
        this.v0l ^= BBUF[0] ^ BBUF[16];
        this.v0h ^= BBUF[1] ^ BBUF[17];
        this.v1l ^= BBUF[2] ^ BBUF[18];
        this.v1h ^= BBUF[3] ^ BBUF[19];
        this.v2l ^= BBUF[4] ^ BBUF[20];
        this.v2h ^= BBUF[5] ^ BBUF[21];
        this.v3l ^= BBUF[6] ^ BBUF[22];
        this.v3h ^= BBUF[7] ^ BBUF[23];
        this.v4l ^= BBUF[8] ^ BBUF[24];
        this.v4h ^= BBUF[9] ^ BBUF[25];
        this.v5l ^= BBUF[10] ^ BBUF[26];
        this.v5h ^= BBUF[11] ^ BBUF[27];
        this.v6l ^= BBUF[12] ^ BBUF[28];
        this.v6h ^= BBUF[13] ^ BBUF[29];
        this.v7l ^= BBUF[14] ^ BBUF[30];
        this.v7h ^= BBUF[15] ^ BBUF[31];
        (0, utils_ts_1.clean)(BBUF);
      }
      destroy() {
        this.destroyed = true;
        (0, utils_ts_1.clean)(this.buffer32);
        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      }
    };
    exports2.BLAKE2b = BLAKE2b;
    exports2.blake2b = (0, utils_ts_1.createOptHasher)((opts) => new BLAKE2b(opts));
    function compress(s, offset2, msg, rounds, v0, v12, v2, v32, v42, v52, v6, v7, v8, v9, v10, v11, v122, v13, v14, v15) {
      let j = 0;
      for (let i = 0; i < rounds; i++) {
        ({ a: v0, b: v42, c: v8, d: v122 } = (0, _blake_ts_1.G1s)(v0, v42, v8, v122, msg[offset2 + s[j++]]));
        ({ a: v0, b: v42, c: v8, d: v122 } = (0, _blake_ts_1.G2s)(v0, v42, v8, v122, msg[offset2 + s[j++]]));
        ({ a: v12, b: v52, c: v9, d: v13 } = (0, _blake_ts_1.G1s)(v12, v52, v9, v13, msg[offset2 + s[j++]]));
        ({ a: v12, b: v52, c: v9, d: v13 } = (0, _blake_ts_1.G2s)(v12, v52, v9, v13, msg[offset2 + s[j++]]));
        ({ a: v2, b: v6, c: v10, d: v14 } = (0, _blake_ts_1.G1s)(v2, v6, v10, v14, msg[offset2 + s[j++]]));
        ({ a: v2, b: v6, c: v10, d: v14 } = (0, _blake_ts_1.G2s)(v2, v6, v10, v14, msg[offset2 + s[j++]]));
        ({ a: v32, b: v7, c: v11, d: v15 } = (0, _blake_ts_1.G1s)(v32, v7, v11, v15, msg[offset2 + s[j++]]));
        ({ a: v32, b: v7, c: v11, d: v15 } = (0, _blake_ts_1.G2s)(v32, v7, v11, v15, msg[offset2 + s[j++]]));
        ({ a: v0, b: v52, c: v10, d: v15 } = (0, _blake_ts_1.G1s)(v0, v52, v10, v15, msg[offset2 + s[j++]]));
        ({ a: v0, b: v52, c: v10, d: v15 } = (0, _blake_ts_1.G2s)(v0, v52, v10, v15, msg[offset2 + s[j++]]));
        ({ a: v12, b: v6, c: v11, d: v122 } = (0, _blake_ts_1.G1s)(v12, v6, v11, v122, msg[offset2 + s[j++]]));
        ({ a: v12, b: v6, c: v11, d: v122 } = (0, _blake_ts_1.G2s)(v12, v6, v11, v122, msg[offset2 + s[j++]]));
        ({ a: v2, b: v7, c: v8, d: v13 } = (0, _blake_ts_1.G1s)(v2, v7, v8, v13, msg[offset2 + s[j++]]));
        ({ a: v2, b: v7, c: v8, d: v13 } = (0, _blake_ts_1.G2s)(v2, v7, v8, v13, msg[offset2 + s[j++]]));
        ({ a: v32, b: v42, c: v9, d: v14 } = (0, _blake_ts_1.G1s)(v32, v42, v9, v14, msg[offset2 + s[j++]]));
        ({ a: v32, b: v42, c: v9, d: v14 } = (0, _blake_ts_1.G2s)(v32, v42, v9, v14, msg[offset2 + s[j++]]));
      }
      return { v0, v1: v12, v2, v3: v32, v4: v42, v5: v52, v6, v7, v8, v9, v10, v11, v12: v122, v13, v14, v15 };
    }
    var B2S_IV = _md_ts_1.SHA256_IV;
    var BLAKE2s = class extends BLAKE2 {
      constructor(opts = {}) {
        const olen = opts.dkLen === void 0 ? 32 : opts.dkLen;
        super(64, olen);
        this.v0 = B2S_IV[0] | 0;
        this.v1 = B2S_IV[1] | 0;
        this.v2 = B2S_IV[2] | 0;
        this.v3 = B2S_IV[3] | 0;
        this.v4 = B2S_IV[4] | 0;
        this.v5 = B2S_IV[5] | 0;
        this.v6 = B2S_IV[6] | 0;
        this.v7 = B2S_IV[7] | 0;
        checkBlake2Opts(olen, opts, 32, 8, 8);
        let { key, personalization, salt } = opts;
        let keyLength = 0;
        if (key !== void 0) {
          key = (0, utils_ts_1.toBytes)(key);
          keyLength = key.length;
        }
        this.v0 ^= this.outputLen | keyLength << 8 | 1 << 16 | 1 << 24;
        if (salt !== void 0) {
          salt = (0, utils_ts_1.toBytes)(salt);
          const slt = (0, utils_ts_1.u32)(salt);
          this.v4 ^= (0, utils_ts_1.swap8IfBE)(slt[0]);
          this.v5 ^= (0, utils_ts_1.swap8IfBE)(slt[1]);
        }
        if (personalization !== void 0) {
          personalization = (0, utils_ts_1.toBytes)(personalization);
          const pers = (0, utils_ts_1.u32)(personalization);
          this.v6 ^= (0, utils_ts_1.swap8IfBE)(pers[0]);
          this.v7 ^= (0, utils_ts_1.swap8IfBE)(pers[1]);
        }
        if (key !== void 0) {
          (0, utils_ts_1.abytes)(key);
          const tmp = new Uint8Array(this.blockLen);
          tmp.set(key);
          this.update(tmp);
        }
      }
      get() {
        const { v0, v1: v12, v2, v3: v32, v4: v42, v5: v52, v6, v7 } = this;
        return [v0, v12, v2, v32, v42, v52, v6, v7];
      }
      // prettier-ignore
      set(v0, v12, v2, v32, v42, v52, v6, v7) {
        this.v0 = v0 | 0;
        this.v1 = v12 | 0;
        this.v2 = v2 | 0;
        this.v3 = v32 | 0;
        this.v4 = v42 | 0;
        this.v5 = v52 | 0;
        this.v6 = v6 | 0;
        this.v7 = v7 | 0;
      }
      compress(msg, offset2, isLast) {
        const { h, l } = u642.fromBig(BigInt(this.length));
        const { v0, v1: v12, v2, v3: v32, v4: v42, v5: v52, v6, v7, v8, v9, v10, v11, v12: v122, v13, v14, v15 } = compress(_blake_ts_1.BSIGMA, offset2, msg, 10, this.v0, this.v1, this.v2, this.v3, this.v4, this.v5, this.v6, this.v7, B2S_IV[0], B2S_IV[1], B2S_IV[2], B2S_IV[3], l ^ B2S_IV[4], h ^ B2S_IV[5], isLast ? ~B2S_IV[6] : B2S_IV[6], B2S_IV[7]);
        this.v0 ^= v0 ^ v8;
        this.v1 ^= v12 ^ v9;
        this.v2 ^= v2 ^ v10;
        this.v3 ^= v32 ^ v11;
        this.v4 ^= v42 ^ v122;
        this.v5 ^= v52 ^ v13;
        this.v6 ^= v6 ^ v14;
        this.v7 ^= v7 ^ v15;
      }
      destroy() {
        this.destroyed = true;
        (0, utils_ts_1.clean)(this.buffer32);
        this.set(0, 0, 0, 0, 0, 0, 0, 0);
      }
    };
    exports2.BLAKE2s = BLAKE2s;
    exports2.blake2s = (0, utils_ts_1.createOptHasher)((opts) => new BLAKE2s(opts));
  }
});

// node_modules/@noble/hashes/blake2b.js
var require_blake2b = __commonJS({
  "node_modules/@noble/hashes/blake2b.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.blake2b = exports2.BLAKE2b = void 0;
    var blake2_ts_1 = require_blake2();
    exports2.BLAKE2b = blake2_ts_1.BLAKE2b;
    exports2.blake2b = blake2_ts_1.blake2b;
  }
});

// node_modules/@mysten/sui/dist/cjs/utils/suins.js
var require_suins = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/utils/suins.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var suins_exports = {};
    __export2(suins_exports, {
      isValidSuiNSName: () => isValidSuiNSName,
      normalizeSuiNSName: () => normalizeSuiNSName
    });
    module2.exports = __toCommonJS2(suins_exports);
    var SUI_NS_NAME_REGEX = /^(?!.*(^(?!@)|[-.@])($|[-.@]))(?:[a-z0-9-]{0,63}(?:\.[a-z0-9-]{0,63})*)?@[a-z0-9-]{0,63}$/i;
    var SUI_NS_DOMAIN_REGEX = /^(?!.*(^|[-.])($|[-.]))(?:[a-z0-9-]{0,63}\.)+sui$/i;
    var MAX_SUI_NS_NAME_LENGTH = 235;
    function isValidSuiNSName(name) {
      if (name.length > MAX_SUI_NS_NAME_LENGTH) {
        return false;
      }
      if (name.includes("@")) {
        return SUI_NS_NAME_REGEX.test(name);
      }
      return SUI_NS_DOMAIN_REGEX.test(name);
    }
    function normalizeSuiNSName(name, format = "at") {
      const lowerCase = name.toLowerCase();
      let parts;
      if (lowerCase.includes("@")) {
        if (!SUI_NS_NAME_REGEX.test(lowerCase)) {
          throw new Error(`Invalid SuiNS name ${name}`);
        }
        const [labels, domain] = lowerCase.split("@");
        parts = [...labels ? labels.split(".") : [], domain];
      } else {
        if (!SUI_NS_DOMAIN_REGEX.test(lowerCase)) {
          throw new Error(`Invalid SuiNS name ${name}`);
        }
        parts = lowerCase.split(".").slice(0, -1);
      }
      if (format === "dot") {
        return `${parts.join(".")}.sui`;
      }
      return `${parts.slice(0, -1).join(".")}@${parts[parts.length - 1]}`;
    }
  }
});

// node_modules/@mysten/sui/dist/cjs/utils/move-registry.js
var require_move_registry = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/utils/move-registry.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var move_registry_exports = {};
    __export2(move_registry_exports, {
      isValidNamedPackage: () => isValidNamedPackage,
      isValidNamedType: () => isValidNamedType
    });
    module2.exports = __toCommonJS2(move_registry_exports);
    var import_suins = require_suins();
    var NAME_PATTERN = /^([a-z0-9]+(?:-[a-z0-9]+)*)$/;
    var VERSION_REGEX = /^\d+$/;
    var MAX_APP_SIZE = 64;
    var NAME_SEPARATOR = "/";
    var isValidNamedPackage = (name) => {
      const parts = name.split(NAME_SEPARATOR);
      if (parts.length < 2 || parts.length > 3) return false;
      const [org, app, version2] = parts;
      if (version2 !== void 0 && !VERSION_REGEX.test(version2)) return false;
      if (!(0, import_suins.isValidSuiNSName)(org)) return false;
      return NAME_PATTERN.test(app) && app.length < MAX_APP_SIZE;
    };
    var isValidNamedType = (type2) => {
      const splitType = type2.split(/::|<|>|,/);
      for (const t of splitType) {
        if (t.includes(NAME_SEPARATOR) && !isValidNamedPackage(t)) return false;
      }
      return true;
    };
  }
});

// node_modules/@mysten/sui/dist/cjs/utils/sui-types.js
var require_sui_types = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/utils/sui-types.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var sui_types_exports = {};
    __export2(sui_types_exports, {
      SUI_ADDRESS_LENGTH: () => SUI_ADDRESS_LENGTH,
      isValidSuiAddress: () => isValidSuiAddress,
      isValidSuiObjectId: () => isValidSuiObjectId,
      isValidTransactionDigest: () => isValidTransactionDigest,
      normalizeStructTag: () => normalizeStructTag,
      normalizeSuiAddress: () => normalizeSuiAddress,
      normalizeSuiObjectId: () => normalizeSuiObjectId,
      parseStructTag: () => parseStructTag
    });
    module2.exports = __toCommonJS2(sui_types_exports);
    var import_bcs = require_cjs();
    var import_move_registry = require_move_registry();
    var TX_DIGEST_LENGTH = 32;
    function isValidTransactionDigest(value) {
      try {
        const buffer = (0, import_bcs.fromBase58)(value);
        return buffer.length === TX_DIGEST_LENGTH;
      } catch (e) {
        return false;
      }
    }
    var SUI_ADDRESS_LENGTH = 32;
    function isValidSuiAddress(value) {
      return isHex(value) && getHexByteLength(value) === SUI_ADDRESS_LENGTH;
    }
    function isValidSuiObjectId(value) {
      return isValidSuiAddress(value);
    }
    function parseTypeTag(type2) {
      if (!type2.includes("::")) return type2;
      return parseStructTag(type2);
    }
    function parseStructTag(type2) {
      const [address, module22] = type2.split("::");
      const isMvrPackage = (0, import_move_registry.isValidNamedPackage)(address);
      const rest = type2.slice(address.length + module22.length + 4);
      const name = rest.includes("<") ? rest.slice(0, rest.indexOf("<")) : rest;
      const typeParams = rest.includes("<") ? (0, import_bcs.splitGenericParameters)(rest.slice(rest.indexOf("<") + 1, rest.lastIndexOf(">"))).map(
        (typeParam) => parseTypeTag(typeParam.trim())
      ) : [];
      return {
        address: isMvrPackage ? address : normalizeSuiAddress(address),
        module: module22,
        name,
        typeParams
      };
    }
    function normalizeStructTag(type2) {
      const { address, module: module22, name, typeParams } = typeof type2 === "string" ? parseStructTag(type2) : type2;
      const formattedTypeParams = (typeParams == null ? void 0 : typeParams.length) > 0 ? `<${typeParams.map(
        (typeParam) => typeof typeParam === "string" ? typeParam : normalizeStructTag(typeParam)
      ).join(",")}>` : "";
      return `${address}::${module22}::${name}${formattedTypeParams}`;
    }
    function normalizeSuiAddress(value, forceAdd0x = false) {
      let address = value.toLowerCase();
      if (!forceAdd0x && address.startsWith("0x")) {
        address = address.slice(2);
      }
      return `0x${address.padStart(SUI_ADDRESS_LENGTH * 2, "0")}`;
    }
    function normalizeSuiObjectId(value, forceAdd0x = false) {
      return normalizeSuiAddress(value, forceAdd0x);
    }
    function isHex(value) {
      return /^(0x|0X)?[a-fA-F0-9]+$/.test(value) && value.length % 2 === 0;
    }
    function getHexByteLength(value) {
      return /^(0x|0X)/.test(value) ? (value.length - 2) / 2 : value.length / 2;
    }
  }
});

// node_modules/@mysten/sui/dist/cjs/bcs/type-tag-serializer.js
var require_type_tag_serializer = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/bcs/type-tag-serializer.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var type_tag_serializer_exports = {};
    __export2(type_tag_serializer_exports, {
      TypeTagSerializer: () => TypeTagSerializer
    });
    module2.exports = __toCommonJS2(type_tag_serializer_exports);
    var import_bcs = require_cjs();
    var import_sui_types = require_sui_types();
    var VECTOR_REGEX = /^vector<(.+)>$/;
    var STRUCT_REGEX = /^([^:]+)::([^:]+)::([^<]+)(<(.+)>)?/;
    var TypeTagSerializer = class _TypeTagSerializer {
      static parseFromStr(str, normalizeAddress = false) {
        if (str === "address") {
          return { address: null };
        } else if (str === "bool") {
          return { bool: null };
        } else if (str === "u8") {
          return { u8: null };
        } else if (str === "u16") {
          return { u16: null };
        } else if (str === "u32") {
          return { u32: null };
        } else if (str === "u64") {
          return { u64: null };
        } else if (str === "u128") {
          return { u128: null };
        } else if (str === "u256") {
          return { u256: null };
        } else if (str === "signer") {
          return { signer: null };
        }
        const vectorMatch = str.match(VECTOR_REGEX);
        if (vectorMatch) {
          return {
            vector: _TypeTagSerializer.parseFromStr(vectorMatch[1], normalizeAddress)
          };
        }
        const structMatch = str.match(STRUCT_REGEX);
        if (structMatch) {
          const address = normalizeAddress ? (0, import_sui_types.normalizeSuiAddress)(structMatch[1]) : structMatch[1];
          return {
            struct: {
              address,
              module: structMatch[2],
              name: structMatch[3],
              typeParams: structMatch[5] === void 0 ? [] : _TypeTagSerializer.parseStructTypeArgs(structMatch[5], normalizeAddress)
            }
          };
        }
        throw new Error(`Encountered unexpected token when parsing type args for ${str}`);
      }
      static parseStructTypeArgs(str, normalizeAddress = false) {
        return (0, import_bcs.splitGenericParameters)(str).map(
          (tok) => _TypeTagSerializer.parseFromStr(tok, normalizeAddress)
        );
      }
      static tagToString(tag) {
        if ("bool" in tag) {
          return "bool";
        }
        if ("u8" in tag) {
          return "u8";
        }
        if ("u16" in tag) {
          return "u16";
        }
        if ("u32" in tag) {
          return "u32";
        }
        if ("u64" in tag) {
          return "u64";
        }
        if ("u128" in tag) {
          return "u128";
        }
        if ("u256" in tag) {
          return "u256";
        }
        if ("address" in tag) {
          return "address";
        }
        if ("signer" in tag) {
          return "signer";
        }
        if ("vector" in tag) {
          return `vector<${_TypeTagSerializer.tagToString(tag.vector)}>`;
        }
        if ("struct" in tag) {
          const struct2 = tag.struct;
          const typeParams = struct2.typeParams.map(_TypeTagSerializer.tagToString).join(", ");
          return `${struct2.address}::${struct2.module}::${struct2.name}${typeParams ? `<${typeParams}>` : ""}`;
        }
        throw new Error("Invalid TypeTag");
      }
    };
  }
});

// node_modules/@mysten/sui/dist/cjs/bcs/bcs.js
var require_bcs2 = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/bcs/bcs.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var bcs_exports = {};
    __export2(bcs_exports, {
      Address: () => Address,
      AppId: () => AppId,
      Argument: () => Argument,
      CallArg: () => CallArg,
      Command: () => Command,
      CompressedSignature: () => CompressedSignature,
      GasData: () => GasData,
      Intent: () => Intent,
      IntentMessage: () => IntentMessage,
      IntentScope: () => IntentScope,
      IntentVersion: () => IntentVersion,
      MultiSig: () => MultiSig,
      MultiSigPkMap: () => MultiSigPkMap,
      MultiSigPublicKey: () => MultiSigPublicKey,
      ObjectArg: () => ObjectArg,
      ObjectDigest: () => ObjectDigest,
      Owner: () => Owner,
      PasskeyAuthenticator: () => PasskeyAuthenticator,
      ProgrammableMoveCall: () => ProgrammableMoveCall,
      ProgrammableTransaction: () => ProgrammableTransaction,
      PublicKey: () => PublicKey2,
      SenderSignedData: () => SenderSignedData,
      SenderSignedTransaction: () => SenderSignedTransaction,
      SharedObjectRef: () => SharedObjectRef,
      StructTag: () => StructTag,
      SuiObjectRef: () => SuiObjectRef,
      TransactionData: () => TransactionData,
      TransactionDataV1: () => TransactionDataV1,
      TransactionExpiration: () => TransactionExpiration,
      TransactionKind: () => TransactionKind,
      TypeTag: () => TypeTag,
      base64String: () => base64String
    });
    module2.exports = __toCommonJS2(bcs_exports);
    var import_bcs = require_cjs();
    var import_sui_types = require_sui_types();
    var import_type_tag_serializer = require_type_tag_serializer();
    function unsafe_u64(options) {
      return import_bcs.bcs.u64({
        name: "unsafe_u64",
        ...options
      }).transform({
        input: (val) => val,
        output: (val) => Number(val)
      });
    }
    function optionEnum(type2) {
      return import_bcs.bcs.enum("Option", {
        None: null,
        Some: type2
      });
    }
    var Address = import_bcs.bcs.bytes(import_sui_types.SUI_ADDRESS_LENGTH).transform({
      validate: (val) => {
        const address = typeof val === "string" ? val : (0, import_bcs.toHex)(val);
        if (!address || !(0, import_sui_types.isValidSuiAddress)((0, import_sui_types.normalizeSuiAddress)(address))) {
          throw new Error(`Invalid Sui address ${address}`);
        }
      },
      input: (val) => typeof val === "string" ? (0, import_bcs.fromHex)((0, import_sui_types.normalizeSuiAddress)(val)) : val,
      output: (val) => (0, import_sui_types.normalizeSuiAddress)((0, import_bcs.toHex)(val))
    });
    var ObjectDigest = import_bcs.bcs.vector(import_bcs.bcs.u8()).transform({
      name: "ObjectDigest",
      input: (value) => (0, import_bcs.fromBase58)(value),
      output: (value) => (0, import_bcs.toBase58)(new Uint8Array(value)),
      validate: (value) => {
        if ((0, import_bcs.fromBase58)(value).length !== 32) {
          throw new Error("ObjectDigest must be 32 bytes");
        }
      }
    });
    var SuiObjectRef = import_bcs.bcs.struct("SuiObjectRef", {
      objectId: Address,
      version: import_bcs.bcs.u64(),
      digest: ObjectDigest
    });
    var SharedObjectRef = import_bcs.bcs.struct("SharedObjectRef", {
      objectId: Address,
      initialSharedVersion: import_bcs.bcs.u64(),
      mutable: import_bcs.bcs.bool()
    });
    var ObjectArg = import_bcs.bcs.enum("ObjectArg", {
      ImmOrOwnedObject: SuiObjectRef,
      SharedObject: SharedObjectRef,
      Receiving: SuiObjectRef
    });
    var Owner = import_bcs.bcs.enum("Owner", {
      AddressOwner: Address,
      ObjectOwner: Address,
      Shared: import_bcs.bcs.struct("Shared", {
        initialSharedVersion: import_bcs.bcs.u64()
      }),
      Immutable: null,
      ConsensusV2: import_bcs.bcs.struct("ConsensusV2", {
        authenticator: import_bcs.bcs.enum("Authenticator", {
          SingleOwner: Address
        }),
        startVersion: import_bcs.bcs.u64()
      })
    });
    var CallArg = import_bcs.bcs.enum("CallArg", {
      Pure: import_bcs.bcs.struct("Pure", {
        bytes: import_bcs.bcs.vector(import_bcs.bcs.u8()).transform({
          input: (val) => typeof val === "string" ? (0, import_bcs.fromBase64)(val) : val,
          output: (val) => (0, import_bcs.toBase64)(new Uint8Array(val))
        })
      }),
      Object: ObjectArg
    });
    var InnerTypeTag = import_bcs.bcs.enum("TypeTag", {
      bool: null,
      u8: null,
      u64: null,
      u128: null,
      address: null,
      signer: null,
      vector: import_bcs.bcs.lazy(() => InnerTypeTag),
      struct: import_bcs.bcs.lazy(() => StructTag),
      u16: null,
      u32: null,
      u256: null
    });
    var TypeTag = InnerTypeTag.transform({
      input: (typeTag) => typeof typeTag === "string" ? import_type_tag_serializer.TypeTagSerializer.parseFromStr(typeTag, true) : typeTag,
      output: (typeTag) => import_type_tag_serializer.TypeTagSerializer.tagToString(typeTag)
    });
    var Argument = import_bcs.bcs.enum("Argument", {
      GasCoin: null,
      Input: import_bcs.bcs.u16(),
      Result: import_bcs.bcs.u16(),
      NestedResult: import_bcs.bcs.tuple([import_bcs.bcs.u16(), import_bcs.bcs.u16()])
    });
    var ProgrammableMoveCall = import_bcs.bcs.struct("ProgrammableMoveCall", {
      package: Address,
      module: import_bcs.bcs.string(),
      function: import_bcs.bcs.string(),
      typeArguments: import_bcs.bcs.vector(TypeTag),
      arguments: import_bcs.bcs.vector(Argument)
    });
    var Command = import_bcs.bcs.enum("Command", {
      /**
       * A Move Call - any public Move function can be called via
       * this transaction. The results can be used that instant to pass
       * into the next transaction.
       */
      MoveCall: ProgrammableMoveCall,
      /**
       * Transfer vector of objects to a receiver.
       */
      TransferObjects: import_bcs.bcs.struct("TransferObjects", {
        objects: import_bcs.bcs.vector(Argument),
        address: Argument
      }),
      // /**
      //  * Split `amount` from a `coin`.
      //  */
      SplitCoins: import_bcs.bcs.struct("SplitCoins", {
        coin: Argument,
        amounts: import_bcs.bcs.vector(Argument)
      }),
      // /**
      //  * Merge Vector of Coins (`sources`) into a `destination`.
      //  */
      MergeCoins: import_bcs.bcs.struct("MergeCoins", {
        destination: Argument,
        sources: import_bcs.bcs.vector(Argument)
      }),
      // /**
      //  * Publish a Move module.
      //  */
      Publish: import_bcs.bcs.struct("Publish", {
        modules: import_bcs.bcs.vector(
          import_bcs.bcs.vector(import_bcs.bcs.u8()).transform({
            input: (val) => typeof val === "string" ? (0, import_bcs.fromBase64)(val) : val,
            output: (val) => (0, import_bcs.toBase64)(new Uint8Array(val))
          })
        ),
        dependencies: import_bcs.bcs.vector(Address)
      }),
      // /**
      //  * Build a vector of objects using the input arguments.
      //  * It is impossible to export construct a `vector<T: key>` otherwise,
      //  * so this call serves a utility function.
      //  */
      MakeMoveVec: import_bcs.bcs.struct("MakeMoveVec", {
        type: optionEnum(TypeTag).transform({
          input: (val) => val === null ? {
            None: true
          } : {
            Some: val
          },
          output: (val) => val.Some ?? null
        }),
        elements: import_bcs.bcs.vector(Argument)
      }),
      Upgrade: import_bcs.bcs.struct("Upgrade", {
        modules: import_bcs.bcs.vector(
          import_bcs.bcs.vector(import_bcs.bcs.u8()).transform({
            input: (val) => typeof val === "string" ? (0, import_bcs.fromBase64)(val) : val,
            output: (val) => (0, import_bcs.toBase64)(new Uint8Array(val))
          })
        ),
        dependencies: import_bcs.bcs.vector(Address),
        package: Address,
        ticket: Argument
      })
    });
    var ProgrammableTransaction = import_bcs.bcs.struct("ProgrammableTransaction", {
      inputs: import_bcs.bcs.vector(CallArg),
      commands: import_bcs.bcs.vector(Command)
    });
    var TransactionKind = import_bcs.bcs.enum("TransactionKind", {
      ProgrammableTransaction,
      ChangeEpoch: null,
      Genesis: null,
      ConsensusCommitPrologue: null
    });
    var TransactionExpiration = import_bcs.bcs.enum("TransactionExpiration", {
      None: null,
      Epoch: unsafe_u64()
    });
    var StructTag = import_bcs.bcs.struct("StructTag", {
      address: Address,
      module: import_bcs.bcs.string(),
      name: import_bcs.bcs.string(),
      typeParams: import_bcs.bcs.vector(InnerTypeTag)
    });
    var GasData = import_bcs.bcs.struct("GasData", {
      payment: import_bcs.bcs.vector(SuiObjectRef),
      owner: Address,
      price: import_bcs.bcs.u64(),
      budget: import_bcs.bcs.u64()
    });
    var TransactionDataV1 = import_bcs.bcs.struct("TransactionDataV1", {
      kind: TransactionKind,
      sender: Address,
      gasData: GasData,
      expiration: TransactionExpiration
    });
    var TransactionData = import_bcs.bcs.enum("TransactionData", {
      V1: TransactionDataV1
    });
    var IntentScope = import_bcs.bcs.enum("IntentScope", {
      TransactionData: null,
      TransactionEffects: null,
      CheckpointSummary: null,
      PersonalMessage: null
    });
    var IntentVersion = import_bcs.bcs.enum("IntentVersion", {
      V0: null
    });
    var AppId = import_bcs.bcs.enum("AppId", {
      Sui: null
    });
    var Intent = import_bcs.bcs.struct("Intent", {
      scope: IntentScope,
      version: IntentVersion,
      appId: AppId
    });
    function IntentMessage(T) {
      return import_bcs.bcs.struct(`IntentMessage<${T.name}>`, {
        intent: Intent,
        value: T
      });
    }
    var CompressedSignature = import_bcs.bcs.enum("CompressedSignature", {
      ED25519: import_bcs.bcs.fixedArray(64, import_bcs.bcs.u8()),
      Secp256k1: import_bcs.bcs.fixedArray(64, import_bcs.bcs.u8()),
      Secp256r1: import_bcs.bcs.fixedArray(64, import_bcs.bcs.u8()),
      ZkLogin: import_bcs.bcs.vector(import_bcs.bcs.u8())
    });
    var PublicKey2 = import_bcs.bcs.enum("PublicKey", {
      ED25519: import_bcs.bcs.fixedArray(32, import_bcs.bcs.u8()),
      Secp256k1: import_bcs.bcs.fixedArray(33, import_bcs.bcs.u8()),
      Secp256r1: import_bcs.bcs.fixedArray(33, import_bcs.bcs.u8()),
      ZkLogin: import_bcs.bcs.vector(import_bcs.bcs.u8())
    });
    var MultiSigPkMap = import_bcs.bcs.struct("MultiSigPkMap", {
      pubKey: PublicKey2,
      weight: import_bcs.bcs.u8()
    });
    var MultiSigPublicKey = import_bcs.bcs.struct("MultiSigPublicKey", {
      pk_map: import_bcs.bcs.vector(MultiSigPkMap),
      threshold: import_bcs.bcs.u16()
    });
    var MultiSig = import_bcs.bcs.struct("MultiSig", {
      sigs: import_bcs.bcs.vector(CompressedSignature),
      bitmap: import_bcs.bcs.u16(),
      multisig_pk: MultiSigPublicKey
    });
    var base64String = import_bcs.bcs.vector(import_bcs.bcs.u8()).transform({
      input: (val) => typeof val === "string" ? (0, import_bcs.fromBase64)(val) : val,
      output: (val) => (0, import_bcs.toBase64)(new Uint8Array(val))
    });
    var SenderSignedTransaction = import_bcs.bcs.struct("SenderSignedTransaction", {
      intentMessage: IntentMessage(TransactionData),
      txSignatures: import_bcs.bcs.vector(base64String)
    });
    var SenderSignedData = import_bcs.bcs.vector(SenderSignedTransaction, {
      name: "SenderSignedData"
    });
    var PasskeyAuthenticator = import_bcs.bcs.struct("PasskeyAuthenticator", {
      authenticatorData: import_bcs.bcs.vector(import_bcs.bcs.u8()),
      clientDataJson: import_bcs.bcs.string(),
      userSignature: import_bcs.bcs.vector(import_bcs.bcs.u8())
    });
  }
});

// node_modules/@mysten/sui/dist/cjs/bcs/effects.js
var require_effects = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/bcs/effects.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var effects_exports = {};
    __export2(effects_exports, {
      TransactionEffects: () => TransactionEffects
    });
    module2.exports = __toCommonJS2(effects_exports);
    var import_bcs = require_cjs();
    var import_bcs2 = require_bcs2();
    var PackageUpgradeError = import_bcs.bcs.enum("PackageUpgradeError", {
      UnableToFetchPackage: import_bcs.bcs.struct("UnableToFetchPackage", { packageId: import_bcs2.Address }),
      NotAPackage: import_bcs.bcs.struct("NotAPackage", { objectId: import_bcs2.Address }),
      IncompatibleUpgrade: null,
      DigestDoesNotMatch: import_bcs.bcs.struct("DigestDoesNotMatch", { digest: import_bcs.bcs.vector(import_bcs.bcs.u8()) }),
      UnknownUpgradePolicy: import_bcs.bcs.struct("UnknownUpgradePolicy", { policy: import_bcs.bcs.u8() }),
      PackageIDDoesNotMatch: import_bcs.bcs.struct("PackageIDDoesNotMatch", {
        packageId: import_bcs2.Address,
        ticketId: import_bcs2.Address
      })
    });
    var ModuleId = import_bcs.bcs.struct("ModuleId", {
      address: import_bcs2.Address,
      name: import_bcs.bcs.string()
    });
    var MoveLocation = import_bcs.bcs.struct("MoveLocation", {
      module: ModuleId,
      function: import_bcs.bcs.u16(),
      instruction: import_bcs.bcs.u16(),
      functionName: import_bcs.bcs.option(import_bcs.bcs.string())
    });
    var CommandArgumentError = import_bcs.bcs.enum("CommandArgumentError", {
      TypeMismatch: null,
      InvalidBCSBytes: null,
      InvalidUsageOfPureArg: null,
      InvalidArgumentToPrivateEntryFunction: null,
      IndexOutOfBounds: import_bcs.bcs.struct("IndexOutOfBounds", { idx: import_bcs.bcs.u16() }),
      SecondaryIndexOutOfBounds: import_bcs.bcs.struct("SecondaryIndexOutOfBounds", {
        resultIdx: import_bcs.bcs.u16(),
        secondaryIdx: import_bcs.bcs.u16()
      }),
      InvalidResultArity: import_bcs.bcs.struct("InvalidResultArity", { resultIdx: import_bcs.bcs.u16() }),
      InvalidGasCoinUsage: null,
      InvalidValueUsage: null,
      InvalidObjectByValue: null,
      InvalidObjectByMutRef: null,
      SharedObjectOperationNotAllowed: null
    });
    var TypeArgumentError = import_bcs.bcs.enum("TypeArgumentError", {
      TypeNotFound: null,
      ConstraintNotSatisfied: null
    });
    var ExecutionFailureStatus = import_bcs.bcs.enum("ExecutionFailureStatus", {
      InsufficientGas: null,
      InvalidGasObject: null,
      InvariantViolation: null,
      FeatureNotYetSupported: null,
      MoveObjectTooBig: import_bcs.bcs.struct("MoveObjectTooBig", {
        objectSize: import_bcs.bcs.u64(),
        maxObjectSize: import_bcs.bcs.u64()
      }),
      MovePackageTooBig: import_bcs.bcs.struct("MovePackageTooBig", {
        objectSize: import_bcs.bcs.u64(),
        maxObjectSize: import_bcs.bcs.u64()
      }),
      CircularObjectOwnership: import_bcs.bcs.struct("CircularObjectOwnership", { object: import_bcs2.Address }),
      InsufficientCoinBalance: null,
      CoinBalanceOverflow: null,
      PublishErrorNonZeroAddress: null,
      SuiMoveVerificationError: null,
      MovePrimitiveRuntimeError: import_bcs.bcs.option(MoveLocation),
      MoveAbort: import_bcs.bcs.tuple([MoveLocation, import_bcs.bcs.u64()]),
      VMVerificationOrDeserializationError: null,
      VMInvariantViolation: null,
      FunctionNotFound: null,
      ArityMismatch: null,
      TypeArityMismatch: null,
      NonEntryFunctionInvoked: null,
      CommandArgumentError: import_bcs.bcs.struct("CommandArgumentError", {
        argIdx: import_bcs.bcs.u16(),
        kind: CommandArgumentError
      }),
      TypeArgumentError: import_bcs.bcs.struct("TypeArgumentError", {
        argumentIdx: import_bcs.bcs.u16(),
        kind: TypeArgumentError
      }),
      UnusedValueWithoutDrop: import_bcs.bcs.struct("UnusedValueWithoutDrop", {
        resultIdx: import_bcs.bcs.u16(),
        secondaryIdx: import_bcs.bcs.u16()
      }),
      InvalidPublicFunctionReturnType: import_bcs.bcs.struct("InvalidPublicFunctionReturnType", {
        idx: import_bcs.bcs.u16()
      }),
      InvalidTransferObject: null,
      EffectsTooLarge: import_bcs.bcs.struct("EffectsTooLarge", { currentSize: import_bcs.bcs.u64(), maxSize: import_bcs.bcs.u64() }),
      PublishUpgradeMissingDependency: null,
      PublishUpgradeDependencyDowngrade: null,
      PackageUpgradeError: import_bcs.bcs.struct("PackageUpgradeError", { upgradeError: PackageUpgradeError }),
      WrittenObjectsTooLarge: import_bcs.bcs.struct("WrittenObjectsTooLarge", {
        currentSize: import_bcs.bcs.u64(),
        maxSize: import_bcs.bcs.u64()
      }),
      CertificateDenied: null,
      SuiMoveVerificationTimedout: null,
      SharedObjectOperationNotAllowed: null,
      InputObjectDeleted: null,
      ExecutionCancelledDueToSharedObjectCongestion: import_bcs.bcs.struct(
        "ExecutionCancelledDueToSharedObjectCongestion",
        {
          congestedObjects: import_bcs.bcs.vector(import_bcs2.Address)
        }
      ),
      AddressDeniedForCoin: import_bcs.bcs.struct("AddressDeniedForCoin", {
        address: import_bcs2.Address,
        coinType: import_bcs.bcs.string()
      }),
      CoinTypeGlobalPause: import_bcs.bcs.struct("CoinTypeGlobalPause", { coinType: import_bcs.bcs.string() }),
      ExecutionCancelledDueToRandomnessUnavailable: null
    });
    var ExecutionStatus = import_bcs.bcs.enum("ExecutionStatus", {
      Success: null,
      Failed: import_bcs.bcs.struct("ExecutionFailed", {
        error: ExecutionFailureStatus,
        command: import_bcs.bcs.option(import_bcs.bcs.u64())
      })
    });
    var GasCostSummary = import_bcs.bcs.struct("GasCostSummary", {
      computationCost: import_bcs.bcs.u64(),
      storageCost: import_bcs.bcs.u64(),
      storageRebate: import_bcs.bcs.u64(),
      nonRefundableStorageFee: import_bcs.bcs.u64()
    });
    var TransactionEffectsV1 = import_bcs.bcs.struct("TransactionEffectsV1", {
      status: ExecutionStatus,
      executedEpoch: import_bcs.bcs.u64(),
      gasUsed: GasCostSummary,
      modifiedAtVersions: import_bcs.bcs.vector(import_bcs.bcs.tuple([import_bcs2.Address, import_bcs.bcs.u64()])),
      sharedObjects: import_bcs.bcs.vector(import_bcs2.SuiObjectRef),
      transactionDigest: import_bcs2.ObjectDigest,
      created: import_bcs.bcs.vector(import_bcs.bcs.tuple([import_bcs2.SuiObjectRef, import_bcs2.Owner])),
      mutated: import_bcs.bcs.vector(import_bcs.bcs.tuple([import_bcs2.SuiObjectRef, import_bcs2.Owner])),
      unwrapped: import_bcs.bcs.vector(import_bcs.bcs.tuple([import_bcs2.SuiObjectRef, import_bcs2.Owner])),
      deleted: import_bcs.bcs.vector(import_bcs2.SuiObjectRef),
      unwrappedThenDeleted: import_bcs.bcs.vector(import_bcs2.SuiObjectRef),
      wrapped: import_bcs.bcs.vector(import_bcs2.SuiObjectRef),
      gasObject: import_bcs.bcs.tuple([import_bcs2.SuiObjectRef, import_bcs2.Owner]),
      eventsDigest: import_bcs.bcs.option(import_bcs2.ObjectDigest),
      dependencies: import_bcs.bcs.vector(import_bcs2.ObjectDigest)
    });
    var VersionDigest = import_bcs.bcs.tuple([import_bcs.bcs.u64(), import_bcs2.ObjectDigest]);
    var ObjectIn = import_bcs.bcs.enum("ObjectIn", {
      NotExist: null,
      Exist: import_bcs.bcs.tuple([VersionDigest, import_bcs2.Owner])
    });
    var ObjectOut = import_bcs.bcs.enum("ObjectOut", {
      NotExist: null,
      ObjectWrite: import_bcs.bcs.tuple([import_bcs2.ObjectDigest, import_bcs2.Owner]),
      PackageWrite: VersionDigest
    });
    var IDOperation = import_bcs.bcs.enum("IDOperation", {
      None: null,
      Created: null,
      Deleted: null
    });
    var EffectsObjectChange = import_bcs.bcs.struct("EffectsObjectChange", {
      inputState: ObjectIn,
      outputState: ObjectOut,
      idOperation: IDOperation
    });
    var UnchangedSharedKind = import_bcs.bcs.enum("UnchangedSharedKind", {
      ReadOnlyRoot: VersionDigest,
      MutateDeleted: import_bcs.bcs.u64(),
      ReadDeleted: import_bcs.bcs.u64(),
      Cancelled: import_bcs.bcs.u64(),
      PerEpochConfig: null
    });
    var TransactionEffectsV2 = import_bcs.bcs.struct("TransactionEffectsV2", {
      status: ExecutionStatus,
      executedEpoch: import_bcs.bcs.u64(),
      gasUsed: GasCostSummary,
      transactionDigest: import_bcs2.ObjectDigest,
      gasObjectIndex: import_bcs.bcs.option(import_bcs.bcs.u32()),
      eventsDigest: import_bcs.bcs.option(import_bcs2.ObjectDigest),
      dependencies: import_bcs.bcs.vector(import_bcs2.ObjectDigest),
      lamportVersion: import_bcs.bcs.u64(),
      changedObjects: import_bcs.bcs.vector(import_bcs.bcs.tuple([import_bcs2.Address, EffectsObjectChange])),
      unchangedSharedObjects: import_bcs.bcs.vector(import_bcs.bcs.tuple([import_bcs2.Address, UnchangedSharedKind])),
      auxDataDigest: import_bcs.bcs.option(import_bcs2.ObjectDigest)
    });
    var TransactionEffects = import_bcs.bcs.enum("TransactionEffects", {
      V1: TransactionEffectsV1,
      V2: TransactionEffectsV2
    });
  }
});

// node_modules/@mysten/sui/dist/cjs/bcs/pure.js
var require_pure = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/bcs/pure.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var pure_exports = {};
    __export2(pure_exports, {
      pureBcsSchemaFromTypeName: () => pureBcsSchemaFromTypeName
    });
    module2.exports = __toCommonJS2(pure_exports);
    var import_bcs = require_cjs();
    var import_bcs2 = require_bcs2();
    function pureBcsSchemaFromTypeName(name) {
      switch (name) {
        case "u8":
          return import_bcs.bcs.u8();
        case "u16":
          return import_bcs.bcs.u16();
        case "u32":
          return import_bcs.bcs.u32();
        case "u64":
          return import_bcs.bcs.u64();
        case "u128":
          return import_bcs.bcs.u128();
        case "u256":
          return import_bcs.bcs.u256();
        case "bool":
          return import_bcs.bcs.bool();
        case "string":
          return import_bcs.bcs.string();
        case "id":
        case "address":
          return import_bcs2.Address;
      }
      const generic = name.match(/^(vector|option)<(.+)>$/);
      if (generic) {
        const [kind, inner] = generic.slice(1);
        if (kind === "vector") {
          return import_bcs.bcs.vector(pureBcsSchemaFromTypeName(inner));
        } else {
          return import_bcs.bcs.option(pureBcsSchemaFromTypeName(inner));
        }
      }
      throw new Error(`Invalid Pure type name: ${name}`);
    }
  }
});

// node_modules/@mysten/sui/dist/cjs/bcs/index.js
var require_bcs3 = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/bcs/index.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var bcs_exports = {};
    __export2(bcs_exports, {
      BcsType: () => import_bcs3.BcsType,
      TypeTagSerializer: () => import_type_tag_serializer.TypeTagSerializer,
      bcs: () => suiBcs,
      pureBcsSchemaFromTypeName: () => import_pure.pureBcsSchemaFromTypeName
    });
    module2.exports = __toCommonJS2(bcs_exports);
    var import_bcs = require_cjs();
    var import_bcs2 = require_bcs2();
    var import_effects = require_effects();
    var import_type_tag_serializer = require_type_tag_serializer();
    var import_bcs3 = require_cjs();
    var import_pure = require_pure();
    var suiBcs = {
      ...import_bcs.bcs,
      U8: import_bcs.bcs.u8(),
      U16: import_bcs.bcs.u16(),
      U32: import_bcs.bcs.u32(),
      U64: import_bcs.bcs.u64(),
      U128: import_bcs.bcs.u128(),
      U256: import_bcs.bcs.u256(),
      ULEB128: import_bcs.bcs.uleb128(),
      Bool: import_bcs.bcs.bool(),
      String: import_bcs.bcs.string(),
      Address: import_bcs2.Address,
      AppId: import_bcs2.AppId,
      Argument: import_bcs2.Argument,
      CallArg: import_bcs2.CallArg,
      Command: import_bcs2.Command,
      CompressedSignature: import_bcs2.CompressedSignature,
      GasData: import_bcs2.GasData,
      Intent: import_bcs2.Intent,
      IntentMessage: import_bcs2.IntentMessage,
      IntentScope: import_bcs2.IntentScope,
      IntentVersion: import_bcs2.IntentVersion,
      MultiSig: import_bcs2.MultiSig,
      MultiSigPkMap: import_bcs2.MultiSigPkMap,
      MultiSigPublicKey: import_bcs2.MultiSigPublicKey,
      ObjectArg: import_bcs2.ObjectArg,
      ObjectDigest: import_bcs2.ObjectDigest,
      Owner: import_bcs2.Owner,
      PasskeyAuthenticator: import_bcs2.PasskeyAuthenticator,
      ProgrammableMoveCall: import_bcs2.ProgrammableMoveCall,
      ProgrammableTransaction: import_bcs2.ProgrammableTransaction,
      PublicKey: import_bcs2.PublicKey,
      SenderSignedData: import_bcs2.SenderSignedData,
      SenderSignedTransaction: import_bcs2.SenderSignedTransaction,
      SharedObjectRef: import_bcs2.SharedObjectRef,
      StructTag: import_bcs2.StructTag,
      SuiObjectRef: import_bcs2.SuiObjectRef,
      TransactionData: import_bcs2.TransactionData,
      TransactionDataV1: import_bcs2.TransactionDataV1,
      TransactionEffects: import_effects.TransactionEffects,
      TransactionExpiration: import_bcs2.TransactionExpiration,
      TransactionKind: import_bcs2.TransactionKind,
      TypeTag: import_bcs2.TypeTag
    };
  }
});

// node_modules/@mysten/sui/dist/cjs/cryptography/intent.js
var require_intent = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/cryptography/intent.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var intent_exports = {};
    __export2(intent_exports, {
      messageWithIntent: () => messageWithIntent
    });
    module2.exports = __toCommonJS2(intent_exports);
    var import_bcs = require_bcs3();
    function messageWithIntent(scope, message) {
      return import_bcs.bcs.IntentMessage(import_bcs.bcs.fixedArray(message.length, import_bcs.bcs.u8())).serialize({
        intent: {
          scope: { [scope]: true },
          version: { V0: true },
          appId: { Sui: true }
        },
        value: message
      }).toBytes();
    }
  }
});

// node_modules/@mysten/sui/dist/cjs/cryptography/signature-scheme.js
var require_signature_scheme = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/cryptography/signature-scheme.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var signature_scheme_exports = {};
    __export2(signature_scheme_exports, {
      SIGNATURE_FLAG_TO_SCHEME: () => SIGNATURE_FLAG_TO_SCHEME,
      SIGNATURE_SCHEME_TO_FLAG: () => SIGNATURE_SCHEME_TO_FLAG,
      SIGNATURE_SCHEME_TO_SIZE: () => SIGNATURE_SCHEME_TO_SIZE
    });
    module2.exports = __toCommonJS2(signature_scheme_exports);
    var SIGNATURE_SCHEME_TO_FLAG = {
      ED25519: 0,
      Secp256k1: 1,
      Secp256r1: 2,
      MultiSig: 3,
      ZkLogin: 5,
      Passkey: 6
    };
    var SIGNATURE_SCHEME_TO_SIZE = {
      ED25519: 32,
      Secp256k1: 33,
      Secp256r1: 33
    };
    var SIGNATURE_FLAG_TO_SCHEME = {
      0: "ED25519",
      1: "Secp256k1",
      2: "Secp256r1",
      3: "MultiSig",
      5: "ZkLogin",
      6: "Passkey"
    };
  }
});

// node_modules/@noble/hashes/hmac.js
var require_hmac = __commonJS({
  "node_modules/@noble/hashes/hmac.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hmac = exports2.HMAC = void 0;
    var utils_ts_1 = require_utils();
    var HMAC = class extends utils_ts_1.Hash {
      constructor(hash, _key) {
        super();
        this.finished = false;
        this.destroyed = false;
        (0, utils_ts_1.ahash)(hash);
        const key = (0, utils_ts_1.toBytes)(_key);
        this.iHash = hash.create();
        if (typeof this.iHash.update !== "function")
          throw new Error("Expected instance of class which extends utils.Hash");
        this.blockLen = this.iHash.blockLen;
        this.outputLen = this.iHash.outputLen;
        const blockLen = this.blockLen;
        const pad = new Uint8Array(blockLen);
        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);
        for (let i = 0; i < pad.length; i++)
          pad[i] ^= 54;
        this.iHash.update(pad);
        this.oHash = hash.create();
        for (let i = 0; i < pad.length; i++)
          pad[i] ^= 54 ^ 92;
        this.oHash.update(pad);
        (0, utils_ts_1.clean)(pad);
      }
      update(buf) {
        (0, utils_ts_1.aexists)(this);
        this.iHash.update(buf);
        return this;
      }
      digestInto(out) {
        (0, utils_ts_1.aexists)(this);
        (0, utils_ts_1.abytes)(out, this.outputLen);
        this.finished = true;
        this.iHash.digestInto(out);
        this.oHash.update(out);
        this.oHash.digestInto(out);
        this.destroy();
      }
      digest() {
        const out = new Uint8Array(this.oHash.outputLen);
        this.digestInto(out);
        return out;
      }
      _cloneInto(to) {
        to || (to = Object.create(Object.getPrototypeOf(this), {}));
        const { oHash, iHash, finished: finished2, destroyed, blockLen, outputLen } = this;
        to = to;
        to.finished = finished2;
        to.destroyed = destroyed;
        to.blockLen = blockLen;
        to.outputLen = outputLen;
        to.oHash = oHash._cloneInto(to.oHash);
        to.iHash = iHash._cloneInto(to.iHash);
        return to;
      }
      clone() {
        return this._cloneInto();
      }
      destroy() {
        this.destroyed = true;
        this.oHash.destroy();
        this.iHash.destroy();
      }
    };
    exports2.HMAC = HMAC;
    var hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();
    exports2.hmac = hmac;
    exports2.hmac.create = (hash, key) => new HMAC(hash, key);
  }
});

// node_modules/@noble/curves/abstract/weierstrass.js
var require_weierstrass = __commonJS({
  "node_modules/@noble/curves/abstract/weierstrass.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DER = exports2.DERErr = void 0;
    exports2.weierstrassPoints = weierstrassPoints;
    exports2.weierstrass = weierstrass;
    exports2.SWUFpSqrtRatio = SWUFpSqrtRatio;
    exports2.mapToCurveSimpleSWU = mapToCurveSimpleSWU2;
    var curve_ts_1 = require_curve();
    var modular_ts_1 = require_modular();
    var utils_ts_1 = require_utils2();
    function validateSigVerOpts(opts) {
      if (opts.lowS !== void 0)
        (0, utils_ts_1.abool)("lowS", opts.lowS);
      if (opts.prehash !== void 0)
        (0, utils_ts_1.abool)("prehash", opts.prehash);
    }
    function validatePointOpts(curve) {
      const opts = (0, curve_ts_1.validateBasic)(curve);
      (0, utils_ts_1.validateObject)(opts, {
        a: "field",
        b: "field"
      }, {
        allowedPrivateKeyLengths: "array",
        wrapPrivateKey: "boolean",
        isTorsionFree: "function",
        clearCofactor: "function",
        allowInfinityPoint: "boolean",
        fromBytes: "function",
        toBytes: "function"
      });
      const { endo, Fp, a } = opts;
      if (endo) {
        if (!Fp.eql(a, Fp.ZERO)) {
          throw new Error("invalid endomorphism, can only be defined for Koblitz curves that have a=0");
        }
        if (typeof endo !== "object" || typeof endo.beta !== "bigint" || typeof endo.splitScalar !== "function") {
          throw new Error("invalid endomorphism, expected beta: bigint and splitScalar: function");
        }
      }
      return Object.freeze({ ...opts });
    }
    var DERErr = class extends Error {
      constructor(m = "") {
        super(m);
      }
    };
    exports2.DERErr = DERErr;
    exports2.DER = {
      // asn.1 DER encoding utils
      Err: DERErr,
      // Basic building block is TLV (Tag-Length-Value)
      _tlv: {
        encode: (tag, data) => {
          const { Err: E } = exports2.DER;
          if (tag < 0 || tag > 256)
            throw new E("tlv.encode: wrong tag");
          if (data.length & 1)
            throw new E("tlv.encode: unpadded data");
          const dataLen = data.length / 2;
          const len = (0, utils_ts_1.numberToHexUnpadded)(dataLen);
          if (len.length / 2 & 128)
            throw new E("tlv.encode: long form length too big");
          const lenLen = dataLen > 127 ? (0, utils_ts_1.numberToHexUnpadded)(len.length / 2 | 128) : "";
          const t = (0, utils_ts_1.numberToHexUnpadded)(tag);
          return t + lenLen + len + data;
        },
        // v - value, l - left bytes (unparsed)
        decode(tag, data) {
          const { Err: E } = exports2.DER;
          let pos = 0;
          if (tag < 0 || tag > 256)
            throw new E("tlv.encode: wrong tag");
          if (data.length < 2 || data[pos++] !== tag)
            throw new E("tlv.decode: wrong tlv");
          const first = data[pos++];
          const isLong = !!(first & 128);
          let length = 0;
          if (!isLong)
            length = first;
          else {
            const lenLen = first & 127;
            if (!lenLen)
              throw new E("tlv.decode(long): indefinite length not supported");
            if (lenLen > 4)
              throw new E("tlv.decode(long): byte length is too big");
            const lengthBytes = data.subarray(pos, pos + lenLen);
            if (lengthBytes.length !== lenLen)
              throw new E("tlv.decode: length bytes not complete");
            if (lengthBytes[0] === 0)
              throw new E("tlv.decode(long): zero leftmost byte");
            for (const b of lengthBytes)
              length = length << 8 | b;
            pos += lenLen;
            if (length < 128)
              throw new E("tlv.decode(long): not minimal encoding");
          }
          const v = data.subarray(pos, pos + length);
          if (v.length !== length)
            throw new E("tlv.decode: wrong value length");
          return { v, l: data.subarray(pos + length) };
        }
      },
      // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,
      // since we always use positive integers here. It must always be empty:
      // - add zero byte if exists
      // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)
      _int: {
        encode(num2) {
          const { Err: E } = exports2.DER;
          if (num2 < _0n3)
            throw new E("integer: negative integers are not allowed");
          let hex = (0, utils_ts_1.numberToHexUnpadded)(num2);
          if (Number.parseInt(hex[0], 16) & 8)
            hex = "00" + hex;
          if (hex.length & 1)
            throw new E("unexpected DER parsing assertion: unpadded hex");
          return hex;
        },
        decode(data) {
          const { Err: E } = exports2.DER;
          if (data[0] & 128)
            throw new E("invalid signature integer: negative");
          if (data[0] === 0 && !(data[1] & 128))
            throw new E("invalid signature integer: unnecessary leading zero");
          return (0, utils_ts_1.bytesToNumberBE)(data);
        }
      },
      toSig(hex) {
        const { Err: E, _int: int, _tlv: tlv } = exports2.DER;
        const data = (0, utils_ts_1.ensureBytes)("signature", hex);
        const { v: seqBytes, l: seqLeftBytes } = tlv.decode(48, data);
        if (seqLeftBytes.length)
          throw new E("invalid signature: left bytes after parsing");
        const { v: rBytes, l: rLeftBytes } = tlv.decode(2, seqBytes);
        const { v: sBytes, l: sLeftBytes } = tlv.decode(2, rLeftBytes);
        if (sLeftBytes.length)
          throw new E("invalid signature: left bytes after parsing");
        return { r: int.decode(rBytes), s: int.decode(sBytes) };
      },
      hexFromSig(sig) {
        const { _tlv: tlv, _int: int } = exports2.DER;
        const rs = tlv.encode(2, int.encode(sig.r));
        const ss = tlv.encode(2, int.encode(sig.s));
        const seq2 = rs + ss;
        return tlv.encode(48, seq2);
      }
    };
    var _0n3 = BigInt(0);
    var _1n3 = BigInt(1);
    var _2n3 = BigInt(2);
    var _3n = BigInt(3);
    var _4n = BigInt(4);
    function weierstrassPoints(opts) {
      const CURVE = validatePointOpts(opts);
      const { Fp } = CURVE;
      const Fn = (0, modular_ts_1.Field)(CURVE.n, CURVE.nBitLength);
      const toBytes2 = CURVE.toBytes || ((_c, point, _isCompressed) => {
        const a = point.toAffine();
        return (0, utils_ts_1.concatBytes)(Uint8Array.from([4]), Fp.toBytes(a.x), Fp.toBytes(a.y));
      });
      const fromBytes = CURVE.fromBytes || ((bytes) => {
        const tail = bytes.subarray(1);
        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
        return { x, y };
      });
      function weierstrassEquation(x) {
        const { a, b } = CURVE;
        const x2 = Fp.sqr(x);
        const x3 = Fp.mul(x2, x);
        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b);
      }
      if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))
        throw new Error("bad generator point: equation left != right");
      function isWithinCurveOrder(num2) {
        return (0, utils_ts_1.inRange)(num2, _1n3, CURVE.n);
      }
      function normPrivateKeyToScalar(key) {
        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n: N } = CURVE;
        if (lengths && typeof key !== "bigint") {
          if ((0, utils_ts_1.isBytes)(key))
            key = (0, utils_ts_1.bytesToHex)(key);
          if (typeof key !== "string" || !lengths.includes(key.length))
            throw new Error("invalid private key");
          key = key.padStart(nByteLength * 2, "0");
        }
        let num2;
        try {
          num2 = typeof key === "bigint" ? key : (0, utils_ts_1.bytesToNumberBE)((0, utils_ts_1.ensureBytes)("private key", key, nByteLength));
        } catch (error) {
          throw new Error("invalid private key, expected hex or " + nByteLength + " bytes, got " + typeof key);
        }
        if (wrapPrivateKey)
          num2 = (0, modular_ts_1.mod)(num2, N);
        (0, utils_ts_1.aInRange)("private key", num2, _1n3, N);
        return num2;
      }
      function aprjpoint(other) {
        if (!(other instanceof Point2))
          throw new Error("ProjectivePoint expected");
      }
      const toAffineMemo = (0, utils_ts_1.memoized)((p, iz) => {
        const { px: x, py: y, pz: z } = p;
        if (Fp.eql(z, Fp.ONE))
          return { x, y };
        const is0 = p.is0();
        if (iz == null)
          iz = is0 ? Fp.ONE : Fp.inv(z);
        const ax = Fp.mul(x, iz);
        const ay = Fp.mul(y, iz);
        const zz = Fp.mul(z, iz);
        if (is0)
          return { x: Fp.ZERO, y: Fp.ZERO };
        if (!Fp.eql(zz, Fp.ONE))
          throw new Error("invZ was invalid");
        return { x: ax, y: ay };
      });
      const assertValidMemo = (0, utils_ts_1.memoized)((p) => {
        if (p.is0()) {
          if (CURVE.allowInfinityPoint && !Fp.is0(p.py))
            return;
          throw new Error("bad point: ZERO");
        }
        const { x, y } = p.toAffine();
        if (!Fp.isValid(x) || !Fp.isValid(y))
          throw new Error("bad point: x or y not FE");
        const left = Fp.sqr(y);
        const right = weierstrassEquation(x);
        if (!Fp.eql(left, right))
          throw new Error("bad point: equation left != right");
        if (!p.isTorsionFree())
          throw new Error("bad point: not in prime-order subgroup");
        return true;
      });
      class Point2 {
        constructor(px, py, pz) {
          if (px == null || !Fp.isValid(px))
            throw new Error("x required");
          if (py == null || !Fp.isValid(py) || Fp.is0(py))
            throw new Error("y required");
          if (pz == null || !Fp.isValid(pz))
            throw new Error("z required");
          this.px = px;
          this.py = py;
          this.pz = pz;
          Object.freeze(this);
        }
        // Does not validate if the point is on-curve.
        // Use fromHex instead, or call assertValidity() later.
        static fromAffine(p) {
          const { x, y } = p || {};
          if (!p || !Fp.isValid(x) || !Fp.isValid(y))
            throw new Error("invalid affine point");
          if (p instanceof Point2)
            throw new Error("projective point not allowed");
          const is0 = (i) => Fp.eql(i, Fp.ZERO);
          if (is0(x) && is0(y))
            return Point2.ZERO;
          return new Point2(x, y, Fp.ONE);
        }
        get x() {
          return this.toAffine().x;
        }
        get y() {
          return this.toAffine().y;
        }
        /**
         * Takes a bunch of Projective Points but executes only one
         * inversion on all of them. Inversion is very slow operation,
         * so this improves performance massively.
         * Optimization: converts a list of projective points to a list of identical points with Z=1.
         */
        static normalizeZ(points) {
          const toInv = (0, modular_ts_1.FpInvertBatch)(Fp, points.map((p) => p.pz));
          return points.map((p, i) => p.toAffine(toInv[i])).map(Point2.fromAffine);
        }
        /**
         * Converts hash string or Uint8Array to Point.
         * @param hex short/long ECDSA hex
         */
        static fromHex(hex) {
          const P = Point2.fromAffine(fromBytes((0, utils_ts_1.ensureBytes)("pointHex", hex)));
          P.assertValidity();
          return P;
        }
        // Multiplies generator point by privateKey.
        static fromPrivateKey(privateKey) {
          return Point2.BASE.multiply(normPrivateKeyToScalar(privateKey));
        }
        // Multiscalar Multiplication
        static msm(points, scalars) {
          return (0, curve_ts_1.pippenger)(Point2, Fn, points, scalars);
        }
        // "Private method", don't use it directly
        _setWindowSize(windowSize) {
          wnaf.setWindowSize(this, windowSize);
        }
        // A point on curve is valid if it conforms to equation.
        assertValidity() {
          assertValidMemo(this);
        }
        hasEvenY() {
          const { y } = this.toAffine();
          if (Fp.isOdd)
            return !Fp.isOdd(y);
          throw new Error("Field doesn't support isOdd");
        }
        /**
         * Compare one point to another.
         */
        equals(other) {
          aprjpoint(other);
          const { px: X1, py: Y1, pz: Z1 } = this;
          const { px: X2, py: Y2, pz: Z2 } = other;
          const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));
          const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));
          return U1 && U2;
        }
        /**
         * Flips point to one corresponding to (x, -y) in Affine coordinates.
         */
        negate() {
          return new Point2(this.px, Fp.neg(this.py), this.pz);
        }
        // Renes-Costello-Batina exception-free doubling formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 3
        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
        double() {
          const { a, b } = CURVE;
          const b3 = Fp.mul(b, _3n);
          const { px: X1, py: Y1, pz: Z1 } = this;
          let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO;
          let t0 = Fp.mul(X1, X1);
          let t1 = Fp.mul(Y1, Y1);
          let t2 = Fp.mul(Z1, Z1);
          let t3 = Fp.mul(X1, Y1);
          t3 = Fp.add(t3, t3);
          Z3 = Fp.mul(X1, Z1);
          Z3 = Fp.add(Z3, Z3);
          X3 = Fp.mul(a, Z3);
          Y3 = Fp.mul(b3, t2);
          Y3 = Fp.add(X3, Y3);
          X3 = Fp.sub(t1, Y3);
          Y3 = Fp.add(t1, Y3);
          Y3 = Fp.mul(X3, Y3);
          X3 = Fp.mul(t3, X3);
          Z3 = Fp.mul(b3, Z3);
          t2 = Fp.mul(a, t2);
          t3 = Fp.sub(t0, t2);
          t3 = Fp.mul(a, t3);
          t3 = Fp.add(t3, Z3);
          Z3 = Fp.add(t0, t0);
          t0 = Fp.add(Z3, t0);
          t0 = Fp.add(t0, t2);
          t0 = Fp.mul(t0, t3);
          Y3 = Fp.add(Y3, t0);
          t2 = Fp.mul(Y1, Z1);
          t2 = Fp.add(t2, t2);
          t0 = Fp.mul(t2, t3);
          X3 = Fp.sub(X3, t0);
          Z3 = Fp.mul(t2, t1);
          Z3 = Fp.add(Z3, Z3);
          Z3 = Fp.add(Z3, Z3);
          return new Point2(X3, Y3, Z3);
        }
        // Renes-Costello-Batina exception-free addition formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 1
        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
        add(other) {
          aprjpoint(other);
          const { px: X1, py: Y1, pz: Z1 } = this;
          const { px: X2, py: Y2, pz: Z2 } = other;
          let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO;
          const a = CURVE.a;
          const b3 = Fp.mul(CURVE.b, _3n);
          let t0 = Fp.mul(X1, X2);
          let t1 = Fp.mul(Y1, Y2);
          let t2 = Fp.mul(Z1, Z2);
          let t3 = Fp.add(X1, Y1);
          let t4 = Fp.add(X2, Y2);
          t3 = Fp.mul(t3, t4);
          t4 = Fp.add(t0, t1);
          t3 = Fp.sub(t3, t4);
          t4 = Fp.add(X1, Z1);
          let t5 = Fp.add(X2, Z2);
          t4 = Fp.mul(t4, t5);
          t5 = Fp.add(t0, t2);
          t4 = Fp.sub(t4, t5);
          t5 = Fp.add(Y1, Z1);
          X3 = Fp.add(Y2, Z2);
          t5 = Fp.mul(t5, X3);
          X3 = Fp.add(t1, t2);
          t5 = Fp.sub(t5, X3);
          Z3 = Fp.mul(a, t4);
          X3 = Fp.mul(b3, t2);
          Z3 = Fp.add(X3, Z3);
          X3 = Fp.sub(t1, Z3);
          Z3 = Fp.add(t1, Z3);
          Y3 = Fp.mul(X3, Z3);
          t1 = Fp.add(t0, t0);
          t1 = Fp.add(t1, t0);
          t2 = Fp.mul(a, t2);
          t4 = Fp.mul(b3, t4);
          t1 = Fp.add(t1, t2);
          t2 = Fp.sub(t0, t2);
          t2 = Fp.mul(a, t2);
          t4 = Fp.add(t4, t2);
          t0 = Fp.mul(t1, t4);
          Y3 = Fp.add(Y3, t0);
          t0 = Fp.mul(t5, t4);
          X3 = Fp.mul(t3, X3);
          X3 = Fp.sub(X3, t0);
          t0 = Fp.mul(t3, t1);
          Z3 = Fp.mul(t5, Z3);
          Z3 = Fp.add(Z3, t0);
          return new Point2(X3, Y3, Z3);
        }
        subtract(other) {
          return this.add(other.negate());
        }
        is0() {
          return this.equals(Point2.ZERO);
        }
        wNAF(n) {
          return wnaf.wNAFCached(this, n, Point2.normalizeZ);
        }
        /**
         * Non-constant-time multiplication. Uses double-and-add algorithm.
         * It's faster, but should only be used when you don't care about
         * an exposed private key e.g. sig verification, which works over *public* keys.
         */
        multiplyUnsafe(sc) {
          const { endo, n: N } = CURVE;
          (0, utils_ts_1.aInRange)("scalar", sc, _0n3, N);
          const I = Point2.ZERO;
          if (sc === _0n3)
            return I;
          if (this.is0() || sc === _1n3)
            return this;
          if (!endo || wnaf.hasPrecomputes(this))
            return wnaf.wNAFCachedUnsafe(this, sc, Point2.normalizeZ);
          let { k1neg, k1, k2neg, k2 } = endo.splitScalar(sc);
          let k1p = I;
          let k2p = I;
          let d = this;
          while (k1 > _0n3 || k2 > _0n3) {
            if (k1 & _1n3)
              k1p = k1p.add(d);
            if (k2 & _1n3)
              k2p = k2p.add(d);
            d = d.double();
            k1 >>= _1n3;
            k2 >>= _1n3;
          }
          if (k1neg)
            k1p = k1p.negate();
          if (k2neg)
            k2p = k2p.negate();
          k2p = new Point2(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
          return k1p.add(k2p);
        }
        /**
         * Constant time multiplication.
         * Uses wNAF method. Windowed method may be 10% faster,
         * but takes 2x longer to generate and consumes 2x memory.
         * Uses precomputes when available.
         * Uses endomorphism for Koblitz curves.
         * @param scalar by which the point would be multiplied
         * @returns New point
         */
        multiply(scalar) {
          const { endo, n: N } = CURVE;
          (0, utils_ts_1.aInRange)("scalar", scalar, _1n3, N);
          let point, fake;
          if (endo) {
            const { k1neg, k1, k2neg, k2 } = endo.splitScalar(scalar);
            let { p: k1p, f: f1p } = this.wNAF(k1);
            let { p: k2p, f: f2p } = this.wNAF(k2);
            k1p = wnaf.constTimeNegate(k1neg, k1p);
            k2p = wnaf.constTimeNegate(k2neg, k2p);
            k2p = new Point2(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
            point = k1p.add(k2p);
            fake = f1p.add(f2p);
          } else {
            const { p, f: f2 } = this.wNAF(scalar);
            point = p;
            fake = f2;
          }
          return Point2.normalizeZ([point, fake])[0];
        }
        /**
         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
         * Not using Strauss-Shamir trick: precomputation tables are faster.
         * The trick could be useful if both P and Q are not G (not in our case).
         * @returns non-zero affine point
         */
        multiplyAndAddUnsafe(Q, a, b) {
          const G = Point2.BASE;
          const mul = (P, a2) => a2 === _0n3 || a2 === _1n3 || !P.equals(G) ? P.multiplyUnsafe(a2) : P.multiply(a2);
          const sum = mul(this, a).add(mul(Q, b));
          return sum.is0() ? void 0 : sum;
        }
        // Converts Projective point to affine (x, y) coordinates.
        // Can accept precomputed Z^-1 - for example, from invertBatch.
        // (x, y, z) ∋ (x=x/z, y=y/z)
        toAffine(iz) {
          return toAffineMemo(this, iz);
        }
        isTorsionFree() {
          const { h: cofactor, isTorsionFree } = CURVE;
          if (cofactor === _1n3)
            return true;
          if (isTorsionFree)
            return isTorsionFree(Point2, this);
          throw new Error("isTorsionFree() has not been declared for the elliptic curve");
        }
        clearCofactor() {
          const { h: cofactor, clearCofactor } = CURVE;
          if (cofactor === _1n3)
            return this;
          if (clearCofactor)
            return clearCofactor(Point2, this);
          return this.multiplyUnsafe(CURVE.h);
        }
        toRawBytes(isCompressed = true) {
          (0, utils_ts_1.abool)("isCompressed", isCompressed);
          this.assertValidity();
          return toBytes2(Point2, this, isCompressed);
        }
        toHex(isCompressed = true) {
          (0, utils_ts_1.abool)("isCompressed", isCompressed);
          return (0, utils_ts_1.bytesToHex)(this.toRawBytes(isCompressed));
        }
      }
      Point2.BASE = new Point2(CURVE.Gx, CURVE.Gy, Fp.ONE);
      Point2.ZERO = new Point2(Fp.ZERO, Fp.ONE, Fp.ZERO);
      const _bits = CURVE.nBitLength;
      const wnaf = (0, curve_ts_1.wNAF)(Point2, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
      return {
        CURVE,
        ProjectivePoint: Point2,
        normPrivateKeyToScalar,
        weierstrassEquation,
        isWithinCurveOrder
      };
    }
    function validateOpts(curve) {
      const opts = (0, curve_ts_1.validateBasic)(curve);
      (0, utils_ts_1.validateObject)(opts, {
        hash: "hash",
        hmac: "function",
        randomBytes: "function"
      }, {
        bits2int: "function",
        bits2int_modN: "function",
        lowS: "boolean"
      });
      return Object.freeze({ lowS: true, ...opts });
    }
    function weierstrass(curveDef) {
      const CURVE = validateOpts(curveDef);
      const { Fp, n: CURVE_ORDER } = CURVE;
      const compressedLen = Fp.BYTES + 1;
      const uncompressedLen = 2 * Fp.BYTES + 1;
      function modN2(a) {
        return (0, modular_ts_1.mod)(a, CURVE_ORDER);
      }
      function invN(a) {
        return (0, modular_ts_1.invert)(a, CURVE_ORDER);
      }
      const { ProjectivePoint: Point2, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder } = weierstrassPoints({
        ...CURVE,
        toBytes(_c, point, isCompressed) {
          const a = point.toAffine();
          const x = Fp.toBytes(a.x);
          const cat = utils_ts_1.concatBytes;
          (0, utils_ts_1.abool)("isCompressed", isCompressed);
          if (isCompressed) {
            return cat(Uint8Array.from([point.hasEvenY() ? 2 : 3]), x);
          } else {
            return cat(Uint8Array.from([4]), x, Fp.toBytes(a.y));
          }
        },
        fromBytes(bytes) {
          const len = bytes.length;
          const head = bytes[0];
          const tail = bytes.subarray(1);
          if (len === compressedLen && (head === 2 || head === 3)) {
            const x = (0, utils_ts_1.bytesToNumberBE)(tail);
            if (!(0, utils_ts_1.inRange)(x, _1n3, Fp.ORDER))
              throw new Error("Point is not on curve");
            const y2 = weierstrassEquation(x);
            let y;
            try {
              y = Fp.sqrt(y2);
            } catch (sqrtError) {
              const suffix = sqrtError instanceof Error ? ": " + sqrtError.message : "";
              throw new Error("Point is not on curve" + suffix);
            }
            const isYOdd = (y & _1n3) === _1n3;
            const isHeadOdd = (head & 1) === 1;
            if (isHeadOdd !== isYOdd)
              y = Fp.neg(y);
            return { x, y };
          } else if (len === uncompressedLen && head === 4) {
            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
            return { x, y };
          } else {
            const cl = compressedLen;
            const ul = uncompressedLen;
            throw new Error("invalid Point, expected length of " + cl + ", or uncompressed " + ul + ", got " + len);
          }
        }
      });
      const numToNByteHex = (num2) => (0, utils_ts_1.bytesToHex)((0, utils_ts_1.numberToBytesBE)(num2, CURVE.nByteLength));
      function isBiggerThanHalfOrder(number2) {
        const HALF = CURVE_ORDER >> _1n3;
        return number2 > HALF;
      }
      function normalizeS(s) {
        return isBiggerThanHalfOrder(s) ? modN2(-s) : s;
      }
      const slcNum = (b, from, to) => (0, utils_ts_1.bytesToNumberBE)(b.slice(from, to));
      class Signature {
        constructor(r, s, recovery) {
          (0, utils_ts_1.aInRange)("r", r, _1n3, CURVE_ORDER);
          (0, utils_ts_1.aInRange)("s", s, _1n3, CURVE_ORDER);
          this.r = r;
          this.s = s;
          if (recovery != null)
            this.recovery = recovery;
          Object.freeze(this);
        }
        // pair (bytes of r, bytes of s)
        static fromCompact(hex) {
          const l = CURVE.nByteLength;
          hex = (0, utils_ts_1.ensureBytes)("compactSignature", hex, l * 2);
          return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));
        }
        // DER encoded ECDSA signature
        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
        static fromDER(hex) {
          const { r, s } = exports2.DER.toSig((0, utils_ts_1.ensureBytes)("DER", hex));
          return new Signature(r, s);
        }
        /**
         * @todo remove
         * @deprecated
         */
        assertValidity() {
        }
        addRecoveryBit(recovery) {
          return new Signature(this.r, this.s, recovery);
        }
        recoverPublicKey(msgHash) {
          const { r, s, recovery: rec } = this;
          const h = bits2int_modN((0, utils_ts_1.ensureBytes)("msgHash", msgHash));
          if (rec == null || ![0, 1, 2, 3].includes(rec))
            throw new Error("recovery id invalid");
          const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;
          if (radj >= Fp.ORDER)
            throw new Error("recovery id 2 or 3 invalid");
          const prefix = (rec & 1) === 0 ? "02" : "03";
          const R = Point2.fromHex(prefix + numToNByteHex(radj));
          const ir = invN(radj);
          const u1 = modN2(-h * ir);
          const u2 = modN2(s * ir);
          const Q = Point2.BASE.multiplyAndAddUnsafe(R, u1, u2);
          if (!Q)
            throw new Error("point at infinify");
          Q.assertValidity();
          return Q;
        }
        // Signatures should be low-s, to prevent malleability.
        hasHighS() {
          return isBiggerThanHalfOrder(this.s);
        }
        normalizeS() {
          return this.hasHighS() ? new Signature(this.r, modN2(-this.s), this.recovery) : this;
        }
        // DER-encoded
        toDERRawBytes() {
          return (0, utils_ts_1.hexToBytes)(this.toDERHex());
        }
        toDERHex() {
          return exports2.DER.hexFromSig(this);
        }
        // padded bytes of r, then padded bytes of s
        toCompactRawBytes() {
          return (0, utils_ts_1.hexToBytes)(this.toCompactHex());
        }
        toCompactHex() {
          return numToNByteHex(this.r) + numToNByteHex(this.s);
        }
      }
      const utils = {
        isValidPrivateKey(privateKey) {
          try {
            normPrivateKeyToScalar(privateKey);
            return true;
          } catch (error) {
            return false;
          }
        },
        normPrivateKeyToScalar,
        /**
         * Produces cryptographically secure private key from random of size
         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
         */
        randomPrivateKey: () => {
          const length = (0, modular_ts_1.getMinHashLength)(CURVE.n);
          return (0, modular_ts_1.mapHashToField)(CURVE.randomBytes(length), CURVE.n);
        },
        /**
         * Creates precompute table for an arbitrary EC point. Makes point "cached".
         * Allows to massively speed-up `point.multiply(scalar)`.
         * @returns cached point
         * @example
         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
         * fast.multiply(privKey); // much faster ECDH now
         */
        precompute(windowSize = 8, point = Point2.BASE) {
          point._setWindowSize(windowSize);
          point.multiply(BigInt(3));
          return point;
        }
      };
      function getPublicKey2(privateKey, isCompressed = true) {
        return Point2.fromPrivateKey(privateKey).toRawBytes(isCompressed);
      }
      function isProbPub(item) {
        const arr = (0, utils_ts_1.isBytes)(item);
        const str = typeof item === "string";
        const len = (arr || str) && item.length;
        if (arr)
          return len === compressedLen || len === uncompressedLen;
        if (str)
          return len === 2 * compressedLen || len === 2 * uncompressedLen;
        if (item instanceof Point2)
          return true;
        return false;
      }
      function getSharedSecret(privateA, publicB, isCompressed = true) {
        if (isProbPub(privateA))
          throw new Error("first arg must be private key");
        if (!isProbPub(publicB))
          throw new Error("second arg must be public key");
        const b = Point2.fromHex(publicB);
        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
      }
      const bits2int = CURVE.bits2int || function(bytes) {
        if (bytes.length > 8192)
          throw new Error("input is too large");
        const num2 = (0, utils_ts_1.bytesToNumberBE)(bytes);
        const delta = bytes.length * 8 - CURVE.nBitLength;
        return delta > 0 ? num2 >> BigInt(delta) : num2;
      };
      const bits2int_modN = CURVE.bits2int_modN || function(bytes) {
        return modN2(bits2int(bytes));
      };
      const ORDER_MASK = (0, utils_ts_1.bitMask)(CURVE.nBitLength);
      function int2octets(num2) {
        (0, utils_ts_1.aInRange)("num < 2^" + CURVE.nBitLength, num2, _0n3, ORDER_MASK);
        return (0, utils_ts_1.numberToBytesBE)(num2, CURVE.nByteLength);
      }
      function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
        if (["recovered", "canonical"].some((k) => k in opts))
          throw new Error("sign() legacy options not supported");
        const { hash, randomBytes: randomBytes2 } = CURVE;
        let { lowS, prehash, extraEntropy: ent } = opts;
        if (lowS == null)
          lowS = true;
        msgHash = (0, utils_ts_1.ensureBytes)("msgHash", msgHash);
        validateSigVerOpts(opts);
        if (prehash)
          msgHash = (0, utils_ts_1.ensureBytes)("prehashed msgHash", hash(msgHash));
        const h1int = bits2int_modN(msgHash);
        const d = normPrivateKeyToScalar(privateKey);
        const seedArgs = [int2octets(d), int2octets(h1int)];
        if (ent != null && ent !== false) {
          const e = ent === true ? randomBytes2(Fp.BYTES) : ent;
          seedArgs.push((0, utils_ts_1.ensureBytes)("extraEntropy", e));
        }
        const seed = (0, utils_ts_1.concatBytes)(...seedArgs);
        const m = h1int;
        function k2sig(kBytes) {
          const k = bits2int(kBytes);
          if (!isWithinCurveOrder(k))
            return;
          const ik = invN(k);
          const q = Point2.BASE.multiply(k).toAffine();
          const r = modN2(q.x);
          if (r === _0n3)
            return;
          const s = modN2(ik * modN2(m + r * d));
          if (s === _0n3)
            return;
          let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n3);
          let normS = s;
          if (lowS && isBiggerThanHalfOrder(s)) {
            normS = normalizeS(s);
            recovery ^= 1;
          }
          return new Signature(r, normS, recovery);
        }
        return { seed, k2sig };
      }
      const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };
      const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };
      function sign2(msgHash, privKey, opts = defaultSigOpts) {
        const { seed, k2sig } = prepSig(msgHash, privKey, opts);
        const C = CURVE;
        const drbg = (0, utils_ts_1.createHmacDrbg)(C.hash.outputLen, C.nByteLength, C.hmac);
        return drbg(seed, k2sig);
      }
      Point2.BASE._setWindowSize(8);
      function verify2(signature2, msgHash, publicKey2, opts = defaultVerOpts) {
        var _a;
        const sg = signature2;
        msgHash = (0, utils_ts_1.ensureBytes)("msgHash", msgHash);
        publicKey2 = (0, utils_ts_1.ensureBytes)("publicKey", publicKey2);
        const { lowS, prehash, format } = opts;
        validateSigVerOpts(opts);
        if ("strict" in opts)
          throw new Error("options.strict was renamed to lowS");
        if (format !== void 0 && format !== "compact" && format !== "der")
          throw new Error("format must be compact or der");
        const isHex = typeof sg === "string" || (0, utils_ts_1.isBytes)(sg);
        const isObj = !isHex && !format && typeof sg === "object" && sg !== null && typeof sg.r === "bigint" && typeof sg.s === "bigint";
        if (!isHex && !isObj)
          throw new Error("invalid signature, expected Uint8Array, hex string or Signature instance");
        let _sig = void 0;
        let P;
        try {
          if (isObj)
            _sig = new Signature(sg.r, sg.s);
          if (isHex) {
            try {
              if (format !== "compact")
                _sig = Signature.fromDER(sg);
            } catch (derError) {
              if (!(derError instanceof exports2.DER.Err))
                throw derError;
            }
            if (!_sig && format !== "der")
              _sig = Signature.fromCompact(sg);
          }
          P = Point2.fromHex(publicKey2);
        } catch (error) {
          return false;
        }
        if (!_sig)
          return false;
        if (lowS && _sig.hasHighS())
          return false;
        if (prehash)
          msgHash = CURVE.hash(msgHash);
        const { r, s } = _sig;
        const h = bits2int_modN(msgHash);
        const is2 = invN(s);
        const u1 = modN2(h * is2);
        const u2 = modN2(r * is2);
        const R = (_a = Point2.BASE.multiplyAndAddUnsafe(P, u1, u2)) == null ? void 0 : _a.toAffine();
        if (!R)
          return false;
        const v = modN2(R.x);
        return v === r;
      }
      return {
        CURVE,
        getPublicKey: getPublicKey2,
        getSharedSecret,
        sign: sign2,
        verify: verify2,
        ProjectivePoint: Point2,
        Signature,
        utils
      };
    }
    function SWUFpSqrtRatio(Fp, Z) {
      const q = Fp.ORDER;
      let l = _0n3;
      for (let o = q - _1n3; o % _2n3 === _0n3; o /= _2n3)
        l += _1n3;
      const c1 = l;
      const _2n_pow_c1_1 = _2n3 << c1 - _1n3 - _1n3;
      const _2n_pow_c1 = _2n_pow_c1_1 * _2n3;
      const c2 = (q - _1n3) / _2n_pow_c1;
      const c3 = (c2 - _1n3) / _2n3;
      const c4 = _2n_pow_c1 - _1n3;
      const c5 = _2n_pow_c1_1;
      const c6 = Fp.pow(Z, c2);
      const c7 = Fp.pow(Z, (c2 + _1n3) / _2n3);
      let sqrtRatio = (u, v) => {
        let tv1 = c6;
        let tv2 = Fp.pow(v, c4);
        let tv3 = Fp.sqr(tv2);
        tv3 = Fp.mul(tv3, v);
        let tv5 = Fp.mul(u, tv3);
        tv5 = Fp.pow(tv5, c3);
        tv5 = Fp.mul(tv5, tv2);
        tv2 = Fp.mul(tv5, v);
        tv3 = Fp.mul(tv5, u);
        let tv4 = Fp.mul(tv3, tv2);
        tv5 = Fp.pow(tv4, c5);
        let isQR = Fp.eql(tv5, Fp.ONE);
        tv2 = Fp.mul(tv3, c7);
        tv5 = Fp.mul(tv4, tv1);
        tv3 = Fp.cmov(tv2, tv3, isQR);
        tv4 = Fp.cmov(tv5, tv4, isQR);
        for (let i = c1; i > _1n3; i--) {
          let tv52 = i - _2n3;
          tv52 = _2n3 << tv52 - _1n3;
          let tvv5 = Fp.pow(tv4, tv52);
          const e1 = Fp.eql(tvv5, Fp.ONE);
          tv2 = Fp.mul(tv3, tv1);
          tv1 = Fp.mul(tv1, tv1);
          tvv5 = Fp.mul(tv4, tv1);
          tv3 = Fp.cmov(tv2, tv3, e1);
          tv4 = Fp.cmov(tvv5, tv4, e1);
        }
        return { isValid: isQR, value: tv3 };
      };
      if (Fp.ORDER % _4n === _3n) {
        const c12 = (Fp.ORDER - _3n) / _4n;
        const c22 = Fp.sqrt(Fp.neg(Z));
        sqrtRatio = (u, v) => {
          let tv1 = Fp.sqr(v);
          const tv2 = Fp.mul(u, v);
          tv1 = Fp.mul(tv1, tv2);
          let y1 = Fp.pow(tv1, c12);
          y1 = Fp.mul(y1, tv2);
          const y2 = Fp.mul(y1, c22);
          const tv3 = Fp.mul(Fp.sqr(y1), v);
          const isQR = Fp.eql(tv3, u);
          let y = Fp.cmov(y2, y1, isQR);
          return { isValid: isQR, value: y };
        };
      }
      return sqrtRatio;
    }
    function mapToCurveSimpleSWU2(Fp, opts) {
      (0, modular_ts_1.validateField)(Fp);
      if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))
        throw new Error("mapToCurveSimpleSWU: invalid opts");
      const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);
      if (!Fp.isOdd)
        throw new Error("Fp.isOdd is not implemented!");
      return (u) => {
        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;
        tv1 = Fp.sqr(u);
        tv1 = Fp.mul(tv1, opts.Z);
        tv2 = Fp.sqr(tv1);
        tv2 = Fp.add(tv2, tv1);
        tv3 = Fp.add(tv2, Fp.ONE);
        tv3 = Fp.mul(tv3, opts.B);
        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO));
        tv4 = Fp.mul(tv4, opts.A);
        tv2 = Fp.sqr(tv3);
        tv6 = Fp.sqr(tv4);
        tv5 = Fp.mul(tv6, opts.A);
        tv2 = Fp.add(tv2, tv5);
        tv2 = Fp.mul(tv2, tv3);
        tv6 = Fp.mul(tv6, tv4);
        tv5 = Fp.mul(tv6, opts.B);
        tv2 = Fp.add(tv2, tv5);
        x = Fp.mul(tv1, tv3);
        const { isValid, value } = sqrtRatio(tv2, tv6);
        y = Fp.mul(tv1, u);
        y = Fp.mul(y, value);
        x = Fp.cmov(x, tv3, isValid);
        y = Fp.cmov(y, value, isValid);
        const e1 = Fp.isOdd(u) === Fp.isOdd(y);
        y = Fp.cmov(Fp.neg(y), y, e1);
        const tv4_inv = (0, modular_ts_1.FpInvertBatch)(Fp, [tv4], true)[0];
        x = Fp.mul(x, tv4_inv);
        return { x, y };
      };
    }
  }
});

// node_modules/@noble/curves/_shortw_utils.js
var require_shortw_utils = __commonJS({
  "node_modules/@noble/curves/_shortw_utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getHash = getHash;
    exports2.createCurve = createCurve2;
    var hmac_1 = require_hmac();
    var utils_1 = require_utils();
    var weierstrass_ts_1 = require_weierstrass();
    function getHash(hash) {
      return {
        hash,
        hmac: (key, ...msgs) => (0, hmac_1.hmac)(hash, key, (0, utils_1.concatBytes)(...msgs)),
        randomBytes: utils_1.randomBytes
      };
    }
    function createCurve2(curveDef, defHash) {
      const create2 = (hash) => (0, weierstrass_ts_1.weierstrass)({ ...curveDef, ...getHash(hash) });
      return { ...create2(defHash), create: create2 };
    }
  }
});

// node_modules/@noble/curves/nist.js
var require_nist = __commonJS({
  "node_modules/@noble/curves/nist.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.p521_hasher = exports2.secp521r1 = exports2.p521 = exports2.p384_hasher = exports2.secp384r1 = exports2.p384 = exports2.p256_hasher = exports2.secp256r1 = exports2.p256 = void 0;
    var sha2_1 = require_sha2();
    var _shortw_utils_ts_1 = require_shortw_utils();
    var hash_to_curve_ts_1 = require_hash_to_curve();
    var modular_ts_1 = require_modular();
    var weierstrass_ts_1 = require_weierstrass();
    var Fp256 = (0, modular_ts_1.Field)(BigInt("0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff"));
    var p256_a = Fp256.create(BigInt("-3"));
    var p256_b = BigInt("0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b");
    exports2.p256 = (0, _shortw_utils_ts_1.createCurve)({
      a: p256_a,
      b: p256_b,
      Fp: Fp256,
      n: BigInt("0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551"),
      Gx: BigInt("0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296"),
      Gy: BigInt("0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5"),
      h: BigInt(1),
      lowS: false
    }, sha2_1.sha256);
    exports2.secp256r1 = exports2.p256;
    var p256_mapSWU = (() => (0, weierstrass_ts_1.mapToCurveSimpleSWU)(Fp256, {
      A: p256_a,
      B: p256_b,
      Z: Fp256.create(BigInt("-10"))
    }))();
    exports2.p256_hasher = (() => (0, hash_to_curve_ts_1.createHasher)(exports2.secp256r1.ProjectivePoint, (scalars) => p256_mapSWU(scalars[0]), {
      DST: "P256_XMD:SHA-256_SSWU_RO_",
      encodeDST: "P256_XMD:SHA-256_SSWU_NU_",
      p: Fp256.ORDER,
      m: 1,
      k: 128,
      expand: "xmd",
      hash: sha2_1.sha256
    }))();
    var Fp384 = (0, modular_ts_1.Field)(BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000ffffffff"));
    var p384_a = Fp384.create(BigInt("-3"));
    var p384_b = BigInt("0xb3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef");
    exports2.p384 = (0, _shortw_utils_ts_1.createCurve)({
      a: p384_a,
      b: p384_b,
      Fp: Fp384,
      n: BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffc7634d81f4372ddf581a0db248b0a77aecec196accc52973"),
      Gx: BigInt("0xaa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7"),
      Gy: BigInt("0x3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f"),
      h: BigInt(1),
      lowS: false
    }, sha2_1.sha384);
    exports2.secp384r1 = exports2.p384;
    var p384_mapSWU = (() => (0, weierstrass_ts_1.mapToCurveSimpleSWU)(Fp384, {
      A: p384_a,
      B: p384_b,
      Z: Fp384.create(BigInt("-12"))
    }))();
    exports2.p384_hasher = (() => (0, hash_to_curve_ts_1.createHasher)(exports2.secp384r1.ProjectivePoint, (scalars) => p384_mapSWU(scalars[0]), {
      DST: "P384_XMD:SHA-384_SSWU_RO_",
      encodeDST: "P384_XMD:SHA-384_SSWU_NU_",
      p: Fp384.ORDER,
      m: 1,
      k: 192,
      expand: "xmd",
      hash: sha2_1.sha384
    }))();
    var Fp521 = (0, modular_ts_1.Field)(BigInt("0x1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"));
    var p521_a = Fp521.create(BigInt("-3"));
    var p521_b = BigInt("0x0051953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00");
    exports2.p521 = (0, _shortw_utils_ts_1.createCurve)({
      a: p521_a,
      b: p521_b,
      Fp: Fp521,
      n: BigInt("0x01fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa51868783bf2f966b7fcc0148f709a5d03bb5c9b8899c47aebb6fb71e91386409"),
      Gx: BigInt("0x00c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66"),
      Gy: BigInt("0x011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650"),
      h: BigInt(1),
      lowS: false,
      allowedPrivateKeyLengths: [130, 131, 132]
      // P521 keys are variable-length. Normalize to 132b
    }, sha2_1.sha512);
    exports2.secp521r1 = exports2.p521;
    var p521_mapSWU = (() => (0, weierstrass_ts_1.mapToCurveSimpleSWU)(Fp521, {
      A: p521_a,
      B: p521_b,
      Z: Fp521.create(BigInt("-4"))
    }))();
    exports2.p521_hasher = (() => (0, hash_to_curve_ts_1.createHasher)(exports2.secp521r1.ProjectivePoint, (scalars) => p521_mapSWU(scalars[0]), {
      DST: "P521_XMD:SHA-512_SSWU_RO_",
      encodeDST: "P521_XMD:SHA-512_SSWU_NU_",
      p: Fp521.ORDER,
      m: 1,
      k: 256,
      expand: "xmd",
      hash: sha2_1.sha512
    }))();
  }
});

// node_modules/@noble/curves/p256.js
var require_p256 = __commonJS({
  "node_modules/@noble/curves/p256.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.encodeToCurve = exports2.hashToCurve = exports2.secp256r1 = exports2.p256 = void 0;
    var nist_ts_1 = require_nist();
    exports2.p256 = nist_ts_1.p256;
    exports2.secp256r1 = nist_ts_1.p256;
    exports2.hashToCurve = (() => nist_ts_1.p256_hasher.hashToCurve)();
    exports2.encodeToCurve = (() => nist_ts_1.p256_hasher.encodeToCurve)();
  }
});

// node_modules/@noble/hashes/sha256.js
var require_sha256 = __commonJS({
  "node_modules/@noble/hashes/sha256.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sha224 = exports2.SHA224 = exports2.sha256 = exports2.SHA256 = void 0;
    var sha2_ts_1 = require_sha2();
    exports2.SHA256 = sha2_ts_1.SHA256;
    exports2.sha256 = sha2_ts_1.sha256;
    exports2.SHA224 = sha2_ts_1.SHA224;
    exports2.sha224 = sha2_ts_1.sha224;
  }
});

// node_modules/@mysten/sui/dist/cjs/cryptography/publickey.js
var require_publickey = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/cryptography/publickey.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var publickey_exports = {};
    __export2(publickey_exports, {
      PublicKey: () => PublicKey2,
      bytesEqual: () => bytesEqual,
      parseSerializedKeypairSignature: () => parseSerializedKeypairSignature
    });
    module2.exports = __toCommonJS2(publickey_exports);
    var import_bcs = require_cjs();
    var import_blake2b = require_blake2b();
    var import_utils4 = require_utils();
    var import_bcs2 = require_bcs3();
    var import_sui_types = require_sui_types();
    var import_intent = require_intent();
    var import_signature_scheme = require_signature_scheme();
    function bytesEqual(a, b) {
      if (a === b) return true;
      if (a.length !== b.length) {
        return false;
      }
      for (let i = 0; i < a.length; i++) {
        if (a[i] !== b[i]) {
          return false;
        }
      }
      return true;
    }
    var PublicKey2 = class {
      /**
       * Checks if two public keys are equal
       */
      equals(publicKey2) {
        return bytesEqual(this.toRawBytes(), publicKey2.toRawBytes());
      }
      /**
       * Return the base-64 representation of the public key
       */
      toBase64() {
        return (0, import_bcs.toBase64)(this.toRawBytes());
      }
      toString() {
        throw new Error(
          "`toString` is not implemented on public keys. Use `toBase64()` or `toRawBytes()` instead."
        );
      }
      /**
       * Return the Sui representation of the public key encoded in
       * base-64. A Sui public key is formed by the concatenation
       * of the scheme flag with the raw bytes of the public key
       */
      toSuiPublicKey() {
        const bytes = this.toSuiBytes();
        return (0, import_bcs.toBase64)(bytes);
      }
      verifyWithIntent(bytes, signature2, intent) {
        const intentMessage = (0, import_intent.messageWithIntent)(intent, bytes);
        const digest = (0, import_blake2b.blake2b)(intentMessage, { dkLen: 32 });
        return this.verify(digest, signature2);
      }
      /**
       * Verifies that the signature is valid for for the provided PersonalMessage
       */
      verifyPersonalMessage(message, signature2) {
        return this.verifyWithIntent(
          import_bcs2.bcs.vector(import_bcs2.bcs.u8()).serialize(message).toBytes(),
          signature2,
          "PersonalMessage"
        );
      }
      /**
       * Verifies that the signature is valid for for the provided Transaction
       */
      verifyTransaction(transaction, signature2) {
        return this.verifyWithIntent(transaction, signature2, "TransactionData");
      }
      /**
       * Verifies that the public key is associated with the provided address
       */
      verifyAddress(address) {
        return this.toSuiAddress() === address;
      }
      /**
       * Returns the bytes representation of the public key
       * prefixed with the signature scheme flag
       */
      toSuiBytes() {
        const rawBytes = this.toRawBytes();
        const suiBytes = new Uint8Array(rawBytes.length + 1);
        suiBytes.set([this.flag()]);
        suiBytes.set(rawBytes, 1);
        return suiBytes;
      }
      /**
       * Return the Sui address associated with this Ed25519 public key
       */
      toSuiAddress() {
        return (0, import_sui_types.normalizeSuiAddress)(
          (0, import_utils4.bytesToHex)((0, import_blake2b.blake2b)(this.toSuiBytes(), { dkLen: 32 })).slice(0, import_sui_types.SUI_ADDRESS_LENGTH * 2)
        );
      }
    };
    function parseSerializedKeypairSignature(serializedSignature) {
      const bytes = (0, import_bcs.fromBase64)(serializedSignature);
      const signatureScheme = import_signature_scheme.SIGNATURE_FLAG_TO_SCHEME[bytes[0]];
      switch (signatureScheme) {
        case "ED25519":
        case "Secp256k1":
        case "Secp256r1":
          const size = import_signature_scheme.SIGNATURE_SCHEME_TO_SIZE[signatureScheme];
          const signature2 = bytes.slice(1, bytes.length - size);
          const publicKey2 = bytes.slice(1 + signature2.length);
          return {
            serializedSignature,
            signatureScheme,
            signature: signature2,
            publicKey: publicKey2,
            bytes
          };
        default:
          throw new Error("Unsupported signature scheme");
      }
    }
  }
});

// node_modules/@mysten/sui/dist/cjs/keypairs/passkey/publickey.js
var require_publickey2 = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/keypairs/passkey/publickey.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var publickey_exports = {};
    __export2(publickey_exports, {
      PASSKEY_PUBLIC_KEY_SIZE: () => PASSKEY_PUBLIC_KEY_SIZE,
      PASSKEY_SIGNATURE_SIZE: () => PASSKEY_SIGNATURE_SIZE,
      PASSKEY_UNCOMPRESSED_PUBLIC_KEY_SIZE: () => PASSKEY_UNCOMPRESSED_PUBLIC_KEY_SIZE,
      PasskeyPublicKey: () => PasskeyPublicKey,
      SECP256R1_SPKI_HEADER: () => SECP256R1_SPKI_HEADER,
      parseDerSPKI: () => parseDerSPKI,
      parseSerializedPasskeySignature: () => parseSerializedPasskeySignature
    });
    module2.exports = __toCommonJS2(publickey_exports);
    var import_bcs = require_cjs();
    var import_p256 = require_p256();
    var import_sha2562 = require_sha256();
    var import_bcs2 = require_bcs2();
    var import_publickey = require_publickey();
    var import_signature_scheme = require_signature_scheme();
    var PASSKEY_PUBLIC_KEY_SIZE = 33;
    var PASSKEY_UNCOMPRESSED_PUBLIC_KEY_SIZE = 65;
    var PASSKEY_SIGNATURE_SIZE = 64;
    var SECP256R1_SPKI_HEADER = new Uint8Array([
      48,
      89,
      // SEQUENCE, length 89
      48,
      19,
      // SEQUENCE, length 19
      6,
      7,
      // OID, length 7
      42,
      134,
      72,
      206,
      61,
      2,
      1,
      // OID: 1.2.840.10045.2.1 (ecPublicKey)
      6,
      8,
      // OID, length 8
      42,
      134,
      72,
      206,
      61,
      3,
      1,
      7,
      // OID: 1.2.840.10045.3.1.7 (prime256v1/secp256r1)
      3,
      66,
      // BIT STRING, length 66
      0
      // no unused bits
    ]);
    var PasskeyPublicKey = class extends import_publickey.PublicKey {
      /**
       * Create a new PasskeyPublicKey object
       * @param value passkey public key as buffer or base-64 encoded string
       */
      constructor(value) {
        super();
        if (typeof value === "string") {
          this.data = (0, import_bcs.fromBase64)(value);
        } else if (value instanceof Uint8Array) {
          this.data = value;
        } else {
          this.data = Uint8Array.from(value);
        }
        if (this.data.length !== PASSKEY_PUBLIC_KEY_SIZE) {
          throw new Error(
            `Invalid public key input. Expected ${PASSKEY_PUBLIC_KEY_SIZE} bytes, got ${this.data.length}`
          );
        }
      }
      /**
       * Checks if two passkey public keys are equal
       */
      equals(publicKey2) {
        return super.equals(publicKey2);
      }
      /**
       * Return the byte array representation of the Secp256r1 public key
       */
      toRawBytes() {
        return this.data;
      }
      /**
       * Return the Sui address associated with this Secp256r1 public key
       */
      flag() {
        return import_signature_scheme.SIGNATURE_SCHEME_TO_FLAG["Passkey"];
      }
      /**
       * Verifies that the signature is valid for for the provided message
       */
      async verify(message, signature2) {
        const parsed = parseSerializedPasskeySignature(signature2);
        const clientDataJSON = JSON.parse(parsed.clientDataJson);
        if (clientDataJSON.type !== "webauthn.get") {
          return false;
        }
        const parsedChallenge = (0, import_bcs.fromBase64)(
          clientDataJSON.challenge.replace(/-/g, "+").replace(/_/g, "/")
        );
        if (!(0, import_publickey.bytesEqual)(message, parsedChallenge)) {
          return false;
        }
        const pk = parsed.userSignature.slice(1 + PASSKEY_SIGNATURE_SIZE);
        if (!(0, import_publickey.bytesEqual)(this.toRawBytes(), pk)) {
          return false;
        }
        const payload = new Uint8Array([...parsed.authenticatorData, ...(0, import_sha2562.sha256)(parsed.clientDataJson)]);
        const sig = parsed.userSignature.slice(1, PASSKEY_SIGNATURE_SIZE + 1);
        return import_p256.secp256r1.verify(sig, (0, import_sha2562.sha256)(payload), pk);
      }
    };
    PasskeyPublicKey.SIZE = PASSKEY_PUBLIC_KEY_SIZE;
    function parseDerSPKI(derBytes) {
      if (derBytes.length !== SECP256R1_SPKI_HEADER.length + PASSKEY_UNCOMPRESSED_PUBLIC_KEY_SIZE) {
        throw new Error("Invalid DER length");
      }
      for (let i = 0; i < SECP256R1_SPKI_HEADER.length; i++) {
        if (derBytes[i] !== SECP256R1_SPKI_HEADER[i]) {
          throw new Error("Invalid spki header");
        }
      }
      if (derBytes[SECP256R1_SPKI_HEADER.length] !== 4) {
        throw new Error("Invalid point marker");
      }
      return derBytes.slice(SECP256R1_SPKI_HEADER.length);
    }
    function parseSerializedPasskeySignature(signature2) {
      const bytes = typeof signature2 === "string" ? (0, import_bcs.fromBase64)(signature2) : signature2;
      if (bytes[0] !== import_signature_scheme.SIGNATURE_SCHEME_TO_FLAG.Passkey) {
        throw new Error("Invalid signature scheme");
      }
      const dec = import_bcs2.PasskeyAuthenticator.parse(bytes.slice(1));
      return {
        signatureScheme: "Passkey",
        serializedSignature: (0, import_bcs.toBase64)(bytes),
        signature: bytes,
        authenticatorData: dec.authenticatorData,
        clientDataJson: dec.clientDataJson,
        userSignature: new Uint8Array(dec.userSignature),
        publicKey: new Uint8Array(dec.userSignature.slice(1 + PASSKEY_SIGNATURE_SIZE))
      };
    }
  }
});

// node_modules/@mysten/sui/dist/cjs/graphql/client.js
var require_client = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/graphql/client.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __typeError = (msg) => {
      throw TypeError(msg);
    };
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
    var __privateGet2 = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
    var __privateAdd2 = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
    var __privateSet2 = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
    var client_exports = {};
    __export2(client_exports, {
      SuiGraphQLClient: () => SuiGraphQLClient,
      SuiGraphQLRequestError: () => SuiGraphQLRequestError
    });
    module2.exports = __toCommonJS2(client_exports);
    var import_graphql = (init_graphql(), __toCommonJS(graphql_exports));
    var _url;
    var _queries;
    var _headers;
    var _fetch;
    var SuiGraphQLRequestError = class extends Error {
    };
    var SuiGraphQLClient = class {
      constructor({
        url,
        fetch: fetchFn = fetch,
        headers = {},
        queries = {}
      }) {
        __privateAdd2(this, _url);
        __privateAdd2(this, _queries);
        __privateAdd2(this, _headers);
        __privateAdd2(this, _fetch);
        __privateSet2(this, _url, url);
        __privateSet2(this, _queries, queries);
        __privateSet2(this, _headers, headers);
        __privateSet2(this, _fetch, (...args) => fetchFn(...args));
      }
      async query(options) {
        const res = await __privateGet2(this, _fetch).call(this, __privateGet2(this, _url), {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            ...__privateGet2(this, _headers)
          },
          body: JSON.stringify({
            query: typeof options.query === "string" ? String(options.query) : (0, import_graphql.print)(options.query),
            variables: options.variables,
            extensions: options.extensions,
            operationName: options.operationName
          })
        });
        if (!res.ok) {
          throw new SuiGraphQLRequestError(`GraphQL request failed: ${res.statusText} (${res.status})`);
        }
        return await res.json();
      }
      async execute(query, options) {
        return this.query({
          ...options,
          query: __privateGet2(this, _queries)[query]
        });
      }
    };
    _url = /* @__PURE__ */ new WeakMap();
    _queries = /* @__PURE__ */ new WeakMap();
    _headers = /* @__PURE__ */ new WeakMap();
    _fetch = /* @__PURE__ */ new WeakMap();
  }
});

// node_modules/@0no-co/graphql.web/dist/graphql.web.js
var require_graphql_web = __commonJS({
  "node_modules/@0no-co/graphql.web/dist/graphql.web.js"(exports2) {
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var GraphQLError = class extends Error {
      constructor(e2, r2, i2, n2, t2, a2, o2) {
        if (super(e2), this.name = "GraphQLError", this.message = e2, t2) {
          this.path = t2;
        }
        if (r2) {
          this.nodes = Array.isArray(r2) ? r2 : [r2];
        }
        if (i2) {
          this.source = i2;
        }
        if (n2) {
          this.positions = n2;
        }
        if (a2) {
          this.originalError = a2;
        }
        var l2 = o2;
        if (!l2 && a2) {
          var d = a2.extensions;
          if (d && "object" == typeof d) {
            l2 = d;
          }
        }
        this.extensions = l2 || {};
      }
      toJSON() {
        return {
          ...this,
          message: this.message
        };
      }
      toString() {
        return this.message;
      }
      get [Symbol.toStringTag]() {
        return "GraphQLError";
      }
    };
    var e;
    var r;
    function error(e2) {
      return new GraphQLError(`Syntax Error: Unexpected token at ${r} in ${e2}`);
    }
    function advance(i2) {
      if (i2.lastIndex = r, i2.test(e)) {
        return e.slice(r, r = i2.lastIndex);
      }
    }
    var i = / +(?=[^\s])/y;
    function blockString(e2) {
      var r2 = e2.split("\n");
      var n2 = "";
      var t2 = 0;
      var a2 = 0;
      var o2 = r2.length - 1;
      for (var l2 = 0; l2 < r2.length; l2++) {
        if (i.lastIndex = 0, i.test(r2[l2])) {
          if (l2 && (!t2 || i.lastIndex < t2)) {
            t2 = i.lastIndex;
          }
          a2 = a2 || l2, o2 = l2;
        }
      }
      for (var d = a2; d <= o2; d++) {
        if (d !== a2) {
          n2 += "\n";
        }
        n2 += r2[d].slice(t2).replace(/\\"""/g, '"""');
      }
      return n2;
    }
    function ignored() {
      for (var i2 = 0 | e.charCodeAt(r++); 9 === i2 || 10 === i2 || 13 === i2 || 32 === i2 || 35 === i2 || 44 === i2 || 65279 === i2; i2 = 0 | e.charCodeAt(r++)) {
        if (35 === i2) {
          for (; 10 !== (i2 = e.charCodeAt(r++)) && 13 !== i2; ) {
          }
        }
      }
      r--;
    }
    function name() {
      var i2 = r;
      for (var n2 = 0 | e.charCodeAt(r++); n2 >= 48 && n2 <= 57 || n2 >= 65 && n2 <= 90 || 95 === n2 || n2 >= 97 && n2 <= 122; n2 = 0 | e.charCodeAt(r++)) {
      }
      if (i2 === r - 1) {
        throw error("Name");
      }
      var t2 = e.slice(i2, --r);
      return ignored(), t2;
    }
    function nameNode() {
      return {
        kind: "Name",
        value: name()
      };
    }
    var n = /(?:"""|(?:[\s\S]*?[^\\])""")/y;
    var t = /(?:(?:\.\d+)?[eE][+-]?\d+|\.\d+)/y;
    function value(i2) {
      var a2;
      switch (e.charCodeAt(r)) {
        case 91:
          r++, ignored();
          var o2 = [];
          for (; 93 !== e.charCodeAt(r); ) {
            o2.push(value(i2));
          }
          return r++, ignored(), {
            kind: "ListValue",
            values: o2
          };
        case 123:
          r++, ignored();
          var l2 = [];
          for (; 125 !== e.charCodeAt(r); ) {
            var d = nameNode();
            if (58 !== e.charCodeAt(r++)) {
              throw error("ObjectField");
            }
            ignored(), l2.push({
              kind: "ObjectField",
              name: d,
              value: value(i2)
            });
          }
          return r++, ignored(), {
            kind: "ObjectValue",
            fields: l2
          };
        case 36:
          if (i2) {
            throw error("Variable");
          }
          return r++, {
            kind: "Variable",
            name: nameNode()
          };
        case 34:
          if (34 === e.charCodeAt(r + 1) && 34 === e.charCodeAt(r + 2)) {
            if (r += 3, null == (a2 = advance(n))) {
              throw error("StringValue");
            }
            return ignored(), {
              kind: "StringValue",
              value: blockString(a2.slice(0, -3)),
              block: true
            };
          } else {
            var s = r;
            var u;
            r++;
            var c = false;
            for (u = 0 | e.charCodeAt(r++); 92 === u && (r++, c = true) || 10 !== u && 13 !== u && 34 !== u && u; u = 0 | e.charCodeAt(r++)) {
            }
            if (34 !== u) {
              throw error("StringValue");
            }
            return a2 = e.slice(s, r), ignored(), {
              kind: "StringValue",
              value: c ? JSON.parse(a2) : a2.slice(1, -1),
              block: false
            };
          }
        case 45:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
          var v = r++;
          var f2;
          for (; (f2 = 0 | e.charCodeAt(r++)) >= 48 && f2 <= 57; ) {
          }
          var p = e.slice(v, --r);
          if (46 === (f2 = e.charCodeAt(r)) || 69 === f2 || 101 === f2) {
            if (null == (a2 = advance(t))) {
              throw error("FloatValue");
            }
            return ignored(), {
              kind: "FloatValue",
              value: p + a2
            };
          } else {
            return ignored(), {
              kind: "IntValue",
              value: p
            };
          }
        case 110:
          if (117 === e.charCodeAt(r + 1) && 108 === e.charCodeAt(r + 2) && 108 === e.charCodeAt(r + 3)) {
            return r += 4, ignored(), {
              kind: "NullValue"
            };
          } else {
            break;
          }
        case 116:
          if (114 === e.charCodeAt(r + 1) && 117 === e.charCodeAt(r + 2) && 101 === e.charCodeAt(r + 3)) {
            return r += 4, ignored(), {
              kind: "BooleanValue",
              value: true
            };
          } else {
            break;
          }
        case 102:
          if (97 === e.charCodeAt(r + 1) && 108 === e.charCodeAt(r + 2) && 115 === e.charCodeAt(r + 3) && 101 === e.charCodeAt(r + 4)) {
            return r += 5, ignored(), {
              kind: "BooleanValue",
              value: false
            };
          } else {
            break;
          }
      }
      return {
        kind: "EnumValue",
        value: name()
      };
    }
    function arguments_(i2) {
      if (40 === e.charCodeAt(r)) {
        var n2 = [];
        r++, ignored();
        do {
          var t2 = nameNode();
          if (58 !== e.charCodeAt(r++)) {
            throw error("Argument");
          }
          ignored(), n2.push({
            kind: "Argument",
            name: t2,
            value: value(i2)
          });
        } while (41 !== e.charCodeAt(r));
        return r++, ignored(), n2;
      }
    }
    function directives(i2) {
      if (64 === e.charCodeAt(r)) {
        var n2 = [];
        do {
          r++, n2.push({
            kind: "Directive",
            name: nameNode(),
            arguments: arguments_(i2)
          });
        } while (64 === e.charCodeAt(r));
        return n2;
      }
    }
    function type2() {
      var i2 = 0;
      for (; 91 === e.charCodeAt(r); ) {
        i2++, r++, ignored();
      }
      var n2 = {
        kind: "NamedType",
        name: nameNode()
      };
      do {
        if (33 === e.charCodeAt(r)) {
          r++, ignored(), n2 = {
            kind: "NonNullType",
            type: n2
          };
        }
        if (i2) {
          if (93 !== e.charCodeAt(r++)) {
            throw error("NamedType");
          }
          ignored(), n2 = {
            kind: "ListType",
            type: n2
          };
        }
      } while (i2--);
      return n2;
    }
    function selectionSetStart() {
      if (123 !== e.charCodeAt(r++)) {
        throw error("SelectionSet");
      }
      return ignored(), selectionSet();
    }
    function selectionSet() {
      var i2 = [];
      do {
        if (46 === e.charCodeAt(r)) {
          if (46 !== e.charCodeAt(++r) || 46 !== e.charCodeAt(++r)) {
            throw error("SelectionSet");
          }
          switch (r++, ignored(), e.charCodeAt(r)) {
            case 64:
              i2.push({
                kind: "InlineFragment",
                typeCondition: void 0,
                directives: directives(false),
                selectionSet: selectionSetStart()
              });
              break;
            case 111:
              if (110 === e.charCodeAt(r + 1)) {
                r += 2, ignored(), i2.push({
                  kind: "InlineFragment",
                  typeCondition: {
                    kind: "NamedType",
                    name: nameNode()
                  },
                  directives: directives(false),
                  selectionSet: selectionSetStart()
                });
              } else {
                i2.push({
                  kind: "FragmentSpread",
                  name: nameNode(),
                  directives: directives(false)
                });
              }
              break;
            case 123:
              r++, ignored(), i2.push({
                kind: "InlineFragment",
                typeCondition: void 0,
                directives: void 0,
                selectionSet: selectionSet()
              });
              break;
            default:
              i2.push({
                kind: "FragmentSpread",
                name: nameNode(),
                directives: directives(false)
              });
          }
        } else {
          var n2 = nameNode();
          var t2 = void 0;
          if (58 === e.charCodeAt(r)) {
            r++, ignored(), t2 = n2, n2 = nameNode();
          }
          var a2 = arguments_(false);
          var o2 = directives(false);
          var l2 = void 0;
          if (123 === e.charCodeAt(r)) {
            r++, ignored(), l2 = selectionSet();
          }
          i2.push({
            kind: "Field",
            alias: t2,
            name: n2,
            arguments: a2,
            directives: o2,
            selectionSet: l2
          });
        }
      } while (125 !== e.charCodeAt(r));
      return r++, ignored(), {
        kind: "SelectionSet",
        selections: i2
      };
    }
    function variableDefinitions() {
      if (ignored(), 40 === e.charCodeAt(r)) {
        var i2 = [];
        r++, ignored();
        do {
          if (36 !== e.charCodeAt(r++)) {
            throw error("Variable");
          }
          var n2 = nameNode();
          if (58 !== e.charCodeAt(r++)) {
            throw error("VariableDefinition");
          }
          ignored();
          var t2 = type2();
          var a2 = void 0;
          if (61 === e.charCodeAt(r)) {
            r++, ignored(), a2 = value(true);
          }
          ignored(), i2.push({
            kind: "VariableDefinition",
            variable: {
              kind: "Variable",
              name: n2
            },
            type: t2,
            defaultValue: a2,
            directives: directives(true)
          });
        } while (41 !== e.charCodeAt(r));
        return r++, ignored(), i2;
      }
    }
    function fragmentDefinition() {
      var i2 = nameNode();
      if (111 !== e.charCodeAt(r++) || 110 !== e.charCodeAt(r++)) {
        throw error("FragmentDefinition");
      }
      return ignored(), {
        kind: "FragmentDefinition",
        name: i2,
        typeCondition: {
          kind: "NamedType",
          name: nameNode()
        },
        directives: directives(false),
        selectionSet: selectionSetStart()
      };
    }
    function definitions() {
      var i2 = [];
      do {
        if (123 === e.charCodeAt(r)) {
          r++, ignored(), i2.push({
            kind: "OperationDefinition",
            operation: "query",
            name: void 0,
            variableDefinitions: void 0,
            directives: void 0,
            selectionSet: selectionSet()
          });
        } else {
          var n2 = name();
          switch (n2) {
            case "fragment":
              i2.push(fragmentDefinition());
              break;
            case "query":
            case "mutation":
            case "subscription":
              var t2;
              var a2 = void 0;
              if (40 !== (t2 = e.charCodeAt(r)) && 64 !== t2 && 123 !== t2) {
                a2 = nameNode();
              }
              i2.push({
                kind: "OperationDefinition",
                operation: n2,
                name: a2,
                variableDefinitions: variableDefinitions(),
                directives: directives(false),
                selectionSet: selectionSetStart()
              });
              break;
            default:
              throw error("Document");
          }
        }
      } while (r < e.length);
      return i2;
    }
    var a = {};
    function mapJoin(e2, r2, i2) {
      var n2 = "";
      for (var t2 = 0; t2 < e2.length; t2++) {
        if (t2) {
          n2 += r2;
        }
        n2 += i2(e2[t2]);
      }
      return n2;
    }
    function printString(e2) {
      return JSON.stringify(e2);
    }
    function printBlockString(e2) {
      return '"""\n' + e2.replace(/"""/g, '\\"""') + '\n"""';
    }
    var o = "\n";
    var l = {
      OperationDefinition(e2) {
        var r2 = e2.operation;
        if (e2.name) {
          r2 += " " + e2.name.value;
        }
        if (e2.variableDefinitions && e2.variableDefinitions.length) {
          if (!e2.name) {
            r2 += " ";
          }
          r2 += "(" + mapJoin(e2.variableDefinitions, ", ", l.VariableDefinition) + ")";
        }
        if (e2.directives && e2.directives.length) {
          r2 += " " + mapJoin(e2.directives, " ", l.Directive);
        }
        return "query" !== r2 ? r2 + " " + l.SelectionSet(e2.selectionSet) : l.SelectionSet(e2.selectionSet);
      },
      VariableDefinition(e2) {
        var r2 = l.Variable(e2.variable) + ": " + _print(e2.type);
        if (e2.defaultValue) {
          r2 += " = " + _print(e2.defaultValue);
        }
        if (e2.directives && e2.directives.length) {
          r2 += " " + mapJoin(e2.directives, " ", l.Directive);
        }
        return r2;
      },
      Field(e2) {
        var r2 = e2.alias ? e2.alias.value + ": " + e2.name.value : e2.name.value;
        if (e2.arguments && e2.arguments.length) {
          var i2 = mapJoin(e2.arguments, ", ", l.Argument);
          if (r2.length + i2.length + 2 > 80) {
            r2 += "(" + (o += "  ") + mapJoin(e2.arguments, o, l.Argument) + (o = o.slice(0, -2)) + ")";
          } else {
            r2 += "(" + i2 + ")";
          }
        }
        if (e2.directives && e2.directives.length) {
          r2 += " " + mapJoin(e2.directives, " ", l.Directive);
        }
        if (e2.selectionSet && e2.selectionSet.selections.length) {
          r2 += " " + l.SelectionSet(e2.selectionSet);
        }
        return r2;
      },
      StringValue(e2) {
        if (e2.block) {
          return printBlockString(e2.value).replace(/\n/g, o);
        } else {
          return printString(e2.value);
        }
      },
      BooleanValue: (e2) => "" + e2.value,
      NullValue: (e2) => "null",
      IntValue: (e2) => e2.value,
      FloatValue: (e2) => e2.value,
      EnumValue: (e2) => e2.value,
      Name: (e2) => e2.value,
      Variable: (e2) => "$" + e2.name.value,
      ListValue: (e2) => "[" + mapJoin(e2.values, ", ", _print) + "]",
      ObjectValue: (e2) => "{" + mapJoin(e2.fields, ", ", l.ObjectField) + "}",
      ObjectField: (e2) => e2.name.value + ": " + _print(e2.value),
      Document(e2) {
        if (!e2.definitions || !e2.definitions.length) {
          return "";
        } else {
          return mapJoin(e2.definitions, "\n\n", _print);
        }
      },
      SelectionSet: (e2) => "{" + (o += "  ") + mapJoin(e2.selections, o, _print) + (o = o.slice(0, -2)) + "}",
      Argument: (e2) => e2.name.value + ": " + _print(e2.value),
      FragmentSpread(e2) {
        var r2 = "..." + e2.name.value;
        if (e2.directives && e2.directives.length) {
          r2 += " " + mapJoin(e2.directives, " ", l.Directive);
        }
        return r2;
      },
      InlineFragment(e2) {
        var r2 = "...";
        if (e2.typeCondition) {
          r2 += " on " + e2.typeCondition.name.value;
        }
        if (e2.directives && e2.directives.length) {
          r2 += " " + mapJoin(e2.directives, " ", l.Directive);
        }
        return r2 += " " + l.SelectionSet(e2.selectionSet);
      },
      FragmentDefinition(e2) {
        var r2 = "fragment " + e2.name.value;
        if (r2 += " on " + e2.typeCondition.name.value, e2.directives && e2.directives.length) {
          r2 += " " + mapJoin(e2.directives, " ", l.Directive);
        }
        return r2 + " " + l.SelectionSet(e2.selectionSet);
      },
      Directive(e2) {
        var r2 = "@" + e2.name.value;
        if (e2.arguments && e2.arguments.length) {
          r2 += "(" + mapJoin(e2.arguments, ", ", l.Argument) + ")";
        }
        return r2;
      },
      NamedType: (e2) => e2.name.value,
      ListType: (e2) => "[" + _print(e2.type) + "]",
      NonNullType: (e2) => _print(e2.type) + "!"
    };
    var _print = (e2) => l[e2.kind](e2);
    function valueFromASTUntyped(e2, r2) {
      switch (e2.kind) {
        case "NullValue":
          return null;
        case "IntValue":
          return parseInt(e2.value, 10);
        case "FloatValue":
          return parseFloat(e2.value);
        case "StringValue":
        case "EnumValue":
        case "BooleanValue":
          return e2.value;
        case "ListValue":
          var i2 = [];
          for (var n2 = 0, t2 = e2.values.length; n2 < t2; n2++) {
            i2.push(valueFromASTUntyped(e2.values[n2], r2));
          }
          return i2;
        case "ObjectValue":
          var a2 = /* @__PURE__ */ Object.create(null);
          for (var o2 = 0, l2 = e2.fields.length; o2 < l2; o2++) {
            var d = e2.fields[o2];
            a2[d.name.value] = valueFromASTUntyped(d.value, r2);
          }
          return a2;
        case "Variable":
          return r2 && r2[e2.name.value];
      }
    }
    exports2.BREAK = a, exports2.GraphQLError = GraphQLError, exports2.Kind = {
      NAME: "Name",
      DOCUMENT: "Document",
      OPERATION_DEFINITION: "OperationDefinition",
      VARIABLE_DEFINITION: "VariableDefinition",
      SELECTION_SET: "SelectionSet",
      FIELD: "Field",
      ARGUMENT: "Argument",
      FRAGMENT_SPREAD: "FragmentSpread",
      INLINE_FRAGMENT: "InlineFragment",
      FRAGMENT_DEFINITION: "FragmentDefinition",
      VARIABLE: "Variable",
      INT: "IntValue",
      FLOAT: "FloatValue",
      STRING: "StringValue",
      BOOLEAN: "BooleanValue",
      NULL: "NullValue",
      ENUM: "EnumValue",
      LIST: "ListValue",
      OBJECT: "ObjectValue",
      OBJECT_FIELD: "ObjectField",
      DIRECTIVE: "Directive",
      NAMED_TYPE: "NamedType",
      LIST_TYPE: "ListType",
      NON_NULL_TYPE: "NonNullType"
    }, exports2.OperationTypeNode = {
      QUERY: "query",
      MUTATION: "mutation",
      SUBSCRIPTION: "subscription"
    }, exports2.Source = function Source(e2, r2, i2) {
      return {
        body: e2,
        name: r2,
        locationOffset: i2 || {
          line: 1,
          column: 1
        }
      };
    }, exports2.isSelectionNode = function isSelectionNode(e2) {
      return "Field" === e2.kind || "FragmentSpread" === e2.kind || "InlineFragment" === e2.kind;
    }, exports2.parse = function parse2(i2, n2) {
      if (e = i2.body ? i2.body : i2, r = 0, ignored(), n2 && n2.noLocation) {
        return {
          kind: "Document",
          definitions: definitions()
        };
      } else {
        return {
          kind: "Document",
          definitions: definitions(),
          loc: {
            start: 0,
            end: e.length,
            startToken: void 0,
            endToken: void 0,
            source: {
              body: e,
              name: "graphql.web",
              locationOffset: {
                line: 1,
                column: 1
              }
            }
          }
        };
      }
    }, exports2.parseType = function parseType(i2, n2) {
      return e = i2.body ? i2.body : i2, r = 0, type2();
    }, exports2.parseValue = function parseValue(i2, n2) {
      return e = i2.body ? i2.body : i2, r = 0, ignored(), value(false);
    }, exports2.print = function print2(e2) {
      return o = "\n", l[e2.kind] ? l[e2.kind](e2) : "";
    }, exports2.printBlockString = printBlockString, exports2.printString = printString, exports2.valueFromASTUntyped = valueFromASTUntyped, exports2.valueFromTypeNode = function valueFromTypeNode(e2, r2, i2) {
      if ("Variable" === e2.kind) {
        return i2 ? valueFromTypeNode(i2[e2.name.value], r2, i2) : void 0;
      } else if ("NonNullType" === r2.kind) {
        return "NullValue" !== e2.kind ? valueFromTypeNode(e2, r2, i2) : void 0;
      } else if ("NullValue" === e2.kind) {
        return null;
      } else if ("ListType" === r2.kind) {
        if ("ListValue" === e2.kind) {
          var n2 = [];
          for (var t2 = 0, a2 = e2.values.length; t2 < a2; t2++) {
            var o2 = valueFromTypeNode(e2.values[t2], r2.type, i2);
            if (void 0 === o2) {
              return;
            } else {
              n2.push(o2);
            }
          }
          return n2;
        }
      } else if ("NamedType" === r2.kind) {
        switch (r2.name.value) {
          case "Int":
          case "Float":
          case "String":
          case "Bool":
            return r2.name.value + "Value" === e2.kind ? valueFromASTUntyped(e2, i2) : void 0;
          default:
            return valueFromASTUntyped(e2, i2);
        }
      }
    }, exports2.visit = function visit(e2, r2) {
      var i2 = [];
      var n2 = [];
      try {
        var t2 = function traverse(e3, t3, o2) {
          var l2 = false;
          var d = r2[e3.kind] && r2[e3.kind].enter || r2[e3.kind] || r2.enter;
          var s = d && d.call(r2, e3, t3, o2, n2, i2);
          if (false === s) {
            return e3;
          } else if (null === s) {
            return null;
          } else if (s === a) {
            throw a;
          } else if (s && "string" == typeof s.kind) {
            l2 = s !== e3, e3 = s;
          }
          if (o2) {
            i2.push(o2);
          }
          var u;
          var c = {
            ...e3
          };
          for (var v in e3) {
            n2.push(v);
            var f2 = e3[v];
            if (Array.isArray(f2)) {
              var p = [];
              for (var m = 0; m < f2.length; m++) {
                if (null != f2[m] && "string" == typeof f2[m].kind) {
                  if (i2.push(e3), n2.push(m), u = traverse(f2[m], m, f2), n2.pop(), i2.pop(), null == u) {
                    l2 = true;
                  } else {
                    l2 = l2 || u !== f2[m], p.push(u);
                  }
                }
              }
              f2 = p;
            } else if (null != f2 && "string" == typeof f2.kind) {
              if (void 0 !== (u = traverse(f2, v, e3))) {
                l2 = l2 || f2 !== u, f2 = u;
              }
            }
            if (n2.pop(), l2) {
              c[v] = f2;
            }
          }
          if (o2) {
            i2.pop();
          }
          var h = r2[e3.kind] && r2[e3.kind].leave || r2.leave;
          var g = h && h.call(r2, e3, t3, o2, n2, i2);
          if (g === a) {
            throw a;
          } else if (void 0 !== g) {
            return g;
          } else if (void 0 !== s) {
            return l2 ? c : s;
          } else {
            return l2 ? c : e3;
          }
        }(e2);
        return void 0 !== t2 && false !== t2 ? t2 : e2;
      } catch (r3) {
        if (r3 !== a) {
          throw r3;
        }
        return e2;
      }
    };
  }
});

// node_modules/gql.tada/dist/gql-tada.js
var require_gql_tada = __commonJS({
  "node_modules/gql.tada/dist/gql-tada.js"(exports2) {
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var r = require_graphql_web();
    var e = 0;
    var n = /* @__PURE__ */ new Set();
    function initGraphQLTada() {
      function graphql(a2, t) {
        var i = r.parse(a2).definitions;
        var o = /* @__PURE__ */ new Set();
        for (var s of t || []) {
          for (var d of s.definitions) {
            if (d.kind === r.Kind.FRAGMENT_DEFINITION && !o.has(d)) {
              i.push(d);
              o.add(d);
            }
          }
        }
        var u;
        if ((u = i[0].kind === r.Kind.FRAGMENT_DEFINITION) && i[0].directives) {
          i[0].directives = i[0].directives.filter((r2) => "_unmask" !== r2.name.value);
        }
        var f2;
        return {
          kind: r.Kind.DOCUMENT,
          definitions: i,
          get loc() {
            if (!f2 && u) {
              var r2 = a2 + function concatLocSources(r3) {
                try {
                  e++;
                  var a3 = "";
                  for (var t2 of r3) {
                    if (!n.has(t2)) {
                      n.add(t2);
                      var { loc: i2 } = t2;
                      if (i2) {
                        a3 += i2.source.body;
                      }
                    }
                  }
                  return a3;
                } finally {
                  if (0 == --e) {
                    n.clear();
                  }
                }
              }(t || []);
              return {
                start: 0,
                end: r2.length,
                source: {
                  body: r2,
                  name: "GraphQLTada",
                  locationOffset: {
                    line: 1,
                    column: 1
                  }
                }
              };
            }
            return f2;
          },
          set loc(r2) {
            f2 = r2;
          }
        };
      }
      graphql.scalar = function scalar(r2, e2) {
        return e2;
      };
      graphql.persisted = function persisted(e2, n2) {
        return {
          kind: r.Kind.DOCUMENT,
          definitions: n2 ? n2.definitions : [],
          documentId: e2
        };
      };
      return graphql;
    }
    var a = initGraphQLTada();
    exports2.graphql = a;
    exports2.initGraphQLTada = initGraphQLTada;
    exports2.maskFragments = function maskFragments(r2, e2) {
      return e2;
    };
    exports2.parse = function parse2(e2) {
      return r.parse(e2);
    };
    exports2.readFragment = function readFragment(...r2) {
      return 2 === r2.length ? r2[1] : r2[0];
    };
    exports2.unsafe_readResult = function unsafe_readResult(r2, e2) {
      return e2;
    };
  }
});

// node_modules/@mysten/sui/dist/cjs/graphql/types.js
var require_types = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/graphql/types.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var types_exports = {};
    module2.exports = __toCommonJS2(types_exports);
  }
});

// node_modules/@mysten/sui/dist/cjs/graphql/schemas/latest/index.js
var require_latest = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/graphql/schemas/latest/index.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __reExport = (target, mod2, secondTarget) => (__copyProps(target, mod2, "default"), secondTarget && __copyProps(secondTarget, mod2, "default"));
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var latest_exports = {};
    __export2(latest_exports, {
      graphql: () => graphql,
      maskFragments: () => import_gql2.maskFragments,
      readFragment: () => import_gql2.readFragment
    });
    module2.exports = __toCommonJS2(latest_exports);
    var import_gql = require_gql_tada();
    __reExport(latest_exports, require_types(), module2.exports);
    var import_gql2 = require_gql_tada();
    var graphql = (0, import_gql.initGraphQLTada)();
  }
});

// node_modules/@mysten/sui/dist/cjs/zklogin/jwt-decode.js
var require_jwt_decode = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/zklogin/jwt-decode.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var jwt_decode_exports = {};
    __export2(jwt_decode_exports, {
      InvalidTokenError: () => InvalidTokenError,
      jwtDecode: () => jwtDecode
    });
    module2.exports = __toCommonJS2(jwt_decode_exports);
    var InvalidTokenError = class extends Error {
    };
    InvalidTokenError.prototype.name = "InvalidTokenError";
    function b64DecodeUnicode(str) {
      return decodeURIComponent(
        atob(str).replace(/(.)/g, (_m, p) => {
          let code = p.charCodeAt(0).toString(16).toUpperCase();
          if (code.length < 2) {
            code = "0" + code;
          }
          return "%" + code;
        })
      );
    }
    function base64UrlDecode(str) {
      let output = str.replace(/-/g, "+").replace(/_/g, "/");
      switch (output.length % 4) {
        case 0:
          break;
        case 2:
          output += "==";
          break;
        case 3:
          output += "=";
          break;
        default:
          throw new Error("base64 string is not of the correct length");
      }
      try {
        return b64DecodeUnicode(output);
      } catch (err) {
        return atob(output);
      }
    }
    function jwtDecode(token, options) {
      if (typeof token !== "string") {
        throw new InvalidTokenError("Invalid token specified: must be a string");
      }
      options || (options = {});
      const pos = options.header === true ? 0 : 1;
      const part = token.split(".")[pos];
      if (typeof part !== "string") {
        throw new InvalidTokenError(`Invalid token specified: missing part #${pos + 1}`);
      }
      let decoded;
      try {
        decoded = base64UrlDecode(part);
      } catch (e) {
        throw new InvalidTokenError(
          `Invalid token specified: invalid base64 for part #${pos + 1} (${e.message})`
        );
      }
      try {
        return JSON.parse(decoded);
      } catch (e) {
        throw new InvalidTokenError(
          `Invalid token specified: invalid json for part #${pos + 1} (${e.message})`
        );
      }
    }
  }
});

// node_modules/@mysten/sui/dist/cjs/zklogin/poseidon.js
var require_poseidon = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/zklogin/poseidon.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var poseidon_exports = {};
    __export2(poseidon_exports, {
      BN254_FIELD_SIZE: () => BN254_FIELD_SIZE,
      poseidonHash: () => poseidonHash
    });
    module2.exports = __toCommonJS2(poseidon_exports);
    var import_poseidon_lite = require_poseidon_lite();
    var poseidonNumToHashFN = [
      import_poseidon_lite.poseidon1,
      import_poseidon_lite.poseidon2,
      import_poseidon_lite.poseidon3,
      import_poseidon_lite.poseidon4,
      import_poseidon_lite.poseidon5,
      import_poseidon_lite.poseidon6,
      import_poseidon_lite.poseidon7,
      import_poseidon_lite.poseidon8,
      import_poseidon_lite.poseidon9,
      import_poseidon_lite.poseidon10,
      import_poseidon_lite.poseidon11,
      import_poseidon_lite.poseidon12,
      import_poseidon_lite.poseidon13,
      import_poseidon_lite.poseidon14,
      import_poseidon_lite.poseidon15,
      import_poseidon_lite.poseidon16
    ];
    var BN254_FIELD_SIZE = 21888242871839275222246405745257275088548364400416034343698204186575808495617n;
    function poseidonHash(inputs) {
      inputs.forEach((x) => {
        const b = BigInt(x);
        if (b < 0 || b >= BN254_FIELD_SIZE) {
          throw new Error(`Element ${b} not in the BN254 field`);
        }
      });
      const hashFN = poseidonNumToHashFN[inputs.length - 1];
      if (hashFN) {
        return hashFN(inputs);
      } else if (inputs.length <= 32) {
        const hash1 = poseidonHash(inputs.slice(0, 16));
        const hash2 = poseidonHash(inputs.slice(16));
        return poseidonHash([hash1, hash2]);
      } else {
        throw new Error(`Yet to implement: Unable to hash a vector of length ${inputs.length}`);
      }
    }
  }
});

// node_modules/@mysten/sui/dist/cjs/zklogin/utils.js
var require_utils4 = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/zklogin/utils.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var utils_exports = {};
    __export2(utils_exports, {
      chunkArray: () => chunkArray,
      genAddressSeed: () => genAddressSeed,
      getExtendedEphemeralPublicKey: () => getExtendedEphemeralPublicKey,
      hashASCIIStrToField: () => hashASCIIStrToField,
      normalizeZkLoginIssuer: () => normalizeZkLoginIssuer,
      toBigEndianBytes: () => toBigEndianBytes,
      toPaddedBigEndianBytes: () => toPaddedBigEndianBytes
    });
    module2.exports = __toCommonJS2(utils_exports);
    var import_utils4 = require_utils();
    var import_poseidon = require_poseidon();
    var MAX_KEY_CLAIM_NAME_LENGTH = 32;
    var MAX_KEY_CLAIM_VALUE_LENGTH = 115;
    var MAX_AUD_VALUE_LENGTH = 145;
    var PACK_WIDTH = 248;
    function findFirstNonZeroIndex(bytes) {
      for (let i = 0; i < bytes.length; i++) {
        if (bytes[i] !== 0) {
          return i;
        }
      }
      return -1;
    }
    function toPaddedBigEndianBytes(num2, width) {
      const hex = num2.toString(16);
      return (0, import_utils4.hexToBytes)(hex.padStart(width * 2, "0").slice(-width * 2));
    }
    function toBigEndianBytes(num2, width) {
      const bytes = toPaddedBigEndianBytes(num2, width);
      const firstNonZeroIndex = findFirstNonZeroIndex(bytes);
      if (firstNonZeroIndex === -1) {
        return new Uint8Array([0]);
      }
      return bytes.slice(firstNonZeroIndex);
    }
    function getExtendedEphemeralPublicKey(publicKey2) {
      return publicKey2.toSuiPublicKey();
    }
    function chunkArray(array2, chunk_size) {
      const chunks = Array(Math.ceil(array2.length / chunk_size));
      const revArray = array2.reverse();
      for (let i = 0; i < chunks.length; i++) {
        chunks[i] = revArray.slice(i * chunk_size, (i + 1) * chunk_size).reverse();
      }
      return chunks.reverse();
    }
    function bytesBEToBigInt(bytes) {
      const hex = bytes.map((b) => b.toString(16).padStart(2, "0")).join("");
      if (hex.length === 0) {
        return BigInt(0);
      }
      return BigInt("0x" + hex);
    }
    function hashASCIIStrToField(str, maxSize) {
      if (str.length > maxSize) {
        throw new Error(`String ${str} is longer than ${maxSize} chars`);
      }
      const strPadded = str.padEnd(maxSize, String.fromCharCode(0)).split("").map((c) => c.charCodeAt(0));
      const chunkSize = PACK_WIDTH / 8;
      const packed = chunkArray(strPadded, chunkSize).map((chunk) => bytesBEToBigInt(chunk));
      return (0, import_poseidon.poseidonHash)(packed);
    }
    function genAddressSeed(salt, name, value, aud, max_name_length = MAX_KEY_CLAIM_NAME_LENGTH, max_value_length = MAX_KEY_CLAIM_VALUE_LENGTH, max_aud_length = MAX_AUD_VALUE_LENGTH) {
      return (0, import_poseidon.poseidonHash)([
        hashASCIIStrToField(name, max_name_length),
        hashASCIIStrToField(value, max_value_length),
        hashASCIIStrToField(aud, max_aud_length),
        (0, import_poseidon.poseidonHash)([BigInt(salt)])
      ]);
    }
    function normalizeZkLoginIssuer(iss) {
      if (iss === "accounts.google.com") {
        return "https://accounts.google.com";
      }
      return iss;
    }
  }
});

// node_modules/@mysten/sui/dist/cjs/zklogin/jwt-utils.js
var require_jwt_utils = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/zklogin/jwt-utils.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var jwt_utils_exports = {};
    __export2(jwt_utils_exports, {
      decodeJwt: () => decodeJwt,
      extractClaimValue: () => extractClaimValue
    });
    module2.exports = __toCommonJS2(jwt_utils_exports);
    var import_jwt_decode = require_jwt_decode();
    var import_utils4 = require_utils4();
    function base64UrlCharTo6Bits(base64UrlChar) {
      if (base64UrlChar.length !== 1) {
        throw new Error("Invalid base64Url character: " + base64UrlChar);
      }
      const base64UrlCharacterSet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
      const index = base64UrlCharacterSet.indexOf(base64UrlChar);
      if (index === -1) {
        throw new Error("Invalid base64Url character: " + base64UrlChar);
      }
      const binaryString = index.toString(2).padStart(6, "0");
      const bits = Array.from(binaryString).map(Number);
      return bits;
    }
    function base64UrlStringToBitVector(base64UrlString) {
      let bitVector = [];
      for (let i = 0; i < base64UrlString.length; i++) {
        const base64UrlChar = base64UrlString.charAt(i);
        const bits = base64UrlCharTo6Bits(base64UrlChar);
        bitVector = bitVector.concat(bits);
      }
      return bitVector;
    }
    function decodeBase64URL(s, i) {
      if (s.length < 2) {
        throw new Error(`Input (s = ${s}) is not tightly packed because s.length < 2`);
      }
      let bits = base64UrlStringToBitVector(s);
      const firstCharOffset = i % 4;
      if (firstCharOffset === 0) {
      } else if (firstCharOffset === 1) {
        bits = bits.slice(2);
      } else if (firstCharOffset === 2) {
        bits = bits.slice(4);
      } else {
        throw new Error(`Input (s = ${s}) is not tightly packed because i%4 = 3 (i = ${i}))`);
      }
      const lastCharOffset = (i + s.length - 1) % 4;
      if (lastCharOffset === 3) {
      } else if (lastCharOffset === 2) {
        bits = bits.slice(0, bits.length - 2);
      } else if (lastCharOffset === 1) {
        bits = bits.slice(0, bits.length - 4);
      } else {
        throw new Error(
          `Input (s = ${s}) is not tightly packed because (i + s.length - 1)%4 = 0 (i = ${i}))`
        );
      }
      if (bits.length % 8 !== 0) {
        throw new Error(`We should never reach here...`);
      }
      const bytes = new Uint8Array(Math.floor(bits.length / 8));
      let currentByteIndex = 0;
      for (let i2 = 0; i2 < bits.length; i2 += 8) {
        const bitChunk = bits.slice(i2, i2 + 8);
        const byte = parseInt(bitChunk.join(""), 2);
        bytes[currentByteIndex++] = byte;
      }
      return new TextDecoder().decode(bytes);
    }
    function verifyExtendedClaim(claim) {
      if (!(claim.slice(-1) === "}" || claim.slice(-1) === ",")) {
        throw new Error("Invalid claim");
      }
      const json = JSON.parse("{" + claim.slice(0, -1) + "}");
      if (Object.keys(json).length !== 1) {
        throw new Error("Invalid claim");
      }
      const key = Object.keys(json)[0];
      return [key, json[key]];
    }
    function extractClaimValue(claim, claimName) {
      const extendedClaim = decodeBase64URL(claim.value, claim.indexMod4);
      const [name, value] = verifyExtendedClaim(extendedClaim);
      if (name !== claimName) {
        throw new Error(`Invalid field name: found ${name} expected ${claimName}`);
      }
      return value;
    }
    function decodeJwt(jwt) {
      const { iss, aud, sub, ...decodedJWT } = (0, import_jwt_decode.jwtDecode)(jwt);
      if (!sub || !iss || !aud) {
        throw new Error("Missing jwt data");
      }
      if (Array.isArray(aud)) {
        throw new Error("Not supported aud. Aud is an array, string was expected.");
      }
      return {
        ...decodedJWT,
        iss: (0, import_utils4.normalizeZkLoginIssuer)(iss),
        rawIss: iss,
        aud,
        sub
      };
    }
  }
});

// node_modules/@mysten/sui/dist/cjs/zklogin/bcs.js
var require_bcs4 = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/zklogin/bcs.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var bcs_exports = {};
    __export2(bcs_exports, {
      zkLoginSignature: () => zkLoginSignature
    });
    module2.exports = __toCommonJS2(bcs_exports);
    var import_bcs = require_cjs();
    var zkLoginSignature = import_bcs.bcs.struct("ZkLoginSignature", {
      inputs: import_bcs.bcs.struct("ZkLoginSignatureInputs", {
        proofPoints: import_bcs.bcs.struct("ZkLoginSignatureInputsProofPoints", {
          a: import_bcs.bcs.vector(import_bcs.bcs.string()),
          b: import_bcs.bcs.vector(import_bcs.bcs.vector(import_bcs.bcs.string())),
          c: import_bcs.bcs.vector(import_bcs.bcs.string())
        }),
        issBase64Details: import_bcs.bcs.struct("ZkLoginSignatureInputsClaim", {
          value: import_bcs.bcs.string(),
          indexMod4: import_bcs.bcs.u8()
        }),
        headerBase64: import_bcs.bcs.string(),
        addressSeed: import_bcs.bcs.string()
      }),
      maxEpoch: import_bcs.bcs.u64(),
      userSignature: import_bcs.bcs.vector(import_bcs.bcs.u8())
    });
  }
});

// node_modules/@mysten/sui/dist/cjs/zklogin/signature.js
var require_signature = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/zklogin/signature.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var signature_exports = {};
    __export2(signature_exports, {
      getZkLoginSignature: () => getZkLoginSignature,
      parseZkLoginSignature: () => parseZkLoginSignature
    });
    module2.exports = __toCommonJS2(signature_exports);
    var import_bcs = require_cjs();
    var import_signature_scheme = require_signature_scheme();
    var import_bcs2 = require_bcs4();
    function getZkLoginSignatureBytes({ inputs, maxEpoch, userSignature }) {
      return import_bcs2.zkLoginSignature.serialize(
        {
          inputs,
          maxEpoch,
          userSignature: typeof userSignature === "string" ? (0, import_bcs.fromBase64)(userSignature) : userSignature
        },
        { maxSize: 2048 }
      ).toBytes();
    }
    function getZkLoginSignature({ inputs, maxEpoch, userSignature }) {
      const bytes = getZkLoginSignatureBytes({ inputs, maxEpoch, userSignature });
      const signatureBytes = new Uint8Array(bytes.length + 1);
      signatureBytes.set([import_signature_scheme.SIGNATURE_SCHEME_TO_FLAG.ZkLogin]);
      signatureBytes.set(bytes, 1);
      return (0, import_bcs.toBase64)(signatureBytes);
    }
    function parseZkLoginSignature(signature2) {
      return import_bcs2.zkLoginSignature.parse(typeof signature2 === "string" ? (0, import_bcs.fromBase64)(signature2) : signature2);
    }
  }
});

// node_modules/@mysten/sui/dist/cjs/zklogin/publickey.js
var require_publickey3 = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/zklogin/publickey.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __typeError = (msg) => {
      throw TypeError(msg);
    };
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
    var __privateGet2 = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
    var __privateAdd2 = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
    var __privateSet2 = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
    var __privateMethod2 = (obj, member, method2) => (__accessCheck(obj, member, "access private method"), method2);
    var publickey_exports = {};
    __export2(publickey_exports, {
      ZkLoginPublicIdentifier: () => ZkLoginPublicIdentifier,
      parseSerializedZkLoginSignature: () => parseSerializedZkLoginSignature,
      toZkLoginPublicIdentifier: () => toZkLoginPublicIdentifier
    });
    module2.exports = __toCommonJS2(publickey_exports);
    var import_bcs = require_cjs();
    var import_blake2b = require_blake2b();
    var import_utils4 = require_utils();
    var import_publickey = require_publickey();
    var import_signature_scheme = require_signature_scheme();
    var import_client = require_client();
    var import_latest = require_latest();
    var import_sui_types = require_sui_types();
    var import_jwt_utils = require_jwt_utils();
    var import_signature = require_signature();
    var import_utils22 = require_utils4();
    var _data;
    var _client;
    var _legacyAddress;
    var _ZkLoginPublicIdentifier_instances;
    var toLegacyAddress_fn;
    var _ZkLoginPublicIdentifier = class _ZkLoginPublicIdentifier2 extends import_publickey.PublicKey {
      /**
       * Create a new ZkLoginPublicIdentifier object
       * @param value zkLogin public identifier as buffer or base-64 encoded string
       */
      constructor(value, { client } = {}) {
        super();
        __privateAdd2(this, _ZkLoginPublicIdentifier_instances);
        __privateAdd2(this, _data);
        __privateAdd2(this, _client);
        __privateAdd2(this, _legacyAddress);
        __privateSet2(this, _client, client);
        if (typeof value === "string") {
          __privateSet2(this, _data, (0, import_bcs.fromBase64)(value));
        } else if (value instanceof Uint8Array) {
          __privateSet2(this, _data, value);
        } else {
          __privateSet2(this, _data, Uint8Array.from(value));
        }
        __privateSet2(this, _legacyAddress, __privateGet2(this, _data).length !== __privateGet2(this, _data)[0] + 1 + 32);
        if (__privateGet2(this, _legacyAddress)) {
          __privateSet2(this, _data, normalizeZkLoginPublicKeyBytes(__privateGet2(this, _data)));
        }
      }
      static fromProof(address, proof) {
        const { issBase64Details, addressSeed } = proof;
        const iss = (0, import_jwt_utils.extractClaimValue)(issBase64Details, "iss");
        const legacyPublicKey = toZkLoginPublicIdentifier(BigInt(addressSeed), iss, {
          legacyAddress: true
        });
        if (legacyPublicKey.toSuiAddress() === address) {
          return legacyPublicKey;
        }
        const publicKey2 = toZkLoginPublicIdentifier(BigInt(addressSeed), iss, {
          legacyAddress: false
        });
        if (publicKey2.toSuiAddress() !== address) {
          throw new Error("Proof does not match address");
        }
        return publicKey2;
      }
      /**
       * Checks if two zkLogin public identifiers are equal
       */
      equals(publicKey2) {
        return super.equals(publicKey2);
      }
      toSuiAddress() {
        if (__privateGet2(this, _legacyAddress)) {
          return __privateMethod2(this, _ZkLoginPublicIdentifier_instances, toLegacyAddress_fn).call(this);
        }
        return super.toSuiAddress();
      }
      /**
       * Return the byte array representation of the zkLogin public identifier
       */
      toRawBytes() {
        return __privateGet2(this, _data);
      }
      /**
       * Return the Sui address associated with this ZkLogin public identifier
       */
      flag() {
        return import_signature_scheme.SIGNATURE_SCHEME_TO_FLAG["ZkLogin"];
      }
      /**
       * Verifies that the signature is valid for for the provided message
       */
      async verify(_message, _signature) {
        throw Error("does not support");
      }
      /**
       * Verifies that the signature is valid for for the provided PersonalMessage
       */
      verifyPersonalMessage(message, signature2) {
        const parsedSignature = parseSerializedZkLoginSignature(signature2);
        const address = new _ZkLoginPublicIdentifier2(parsedSignature.publicKey).toSuiAddress();
        return graphqlVerifyZkLoginSignature({
          address,
          bytes: (0, import_bcs.toBase64)(message),
          signature: parsedSignature.serializedSignature,
          intentScope: "PERSONAL_MESSAGE",
          client: __privateGet2(this, _client)
        });
      }
      /**
       * Verifies that the signature is valid for for the provided Transaction
       */
      verifyTransaction(transaction, signature2) {
        const parsedSignature = parseSerializedZkLoginSignature(signature2);
        const address = new _ZkLoginPublicIdentifier2(parsedSignature.publicKey).toSuiAddress();
        return graphqlVerifyZkLoginSignature({
          address,
          bytes: (0, import_bcs.toBase64)(transaction),
          signature: parsedSignature.serializedSignature,
          intentScope: "TRANSACTION_DATA",
          client: __privateGet2(this, _client)
        });
      }
      /**
       * Verifies that the public key is associated with the provided address
       */
      verifyAddress(address) {
        return address === super.toSuiAddress() || address === __privateMethod2(this, _ZkLoginPublicIdentifier_instances, toLegacyAddress_fn).call(this);
      }
    };
    _data = /* @__PURE__ */ new WeakMap();
    _client = /* @__PURE__ */ new WeakMap();
    _legacyAddress = /* @__PURE__ */ new WeakMap();
    _ZkLoginPublicIdentifier_instances = /* @__PURE__ */ new WeakSet();
    toLegacyAddress_fn = function() {
      const legacyBytes = normalizeZkLoginPublicKeyBytes(__privateGet2(this, _data), true);
      const addressBytes = new Uint8Array(legacyBytes.length + 1);
      addressBytes[0] = this.flag();
      addressBytes.set(legacyBytes, 1);
      return (0, import_sui_types.normalizeSuiAddress)(
        (0, import_utils4.bytesToHex)((0, import_blake2b.blake2b)(addressBytes, { dkLen: 32 })).slice(0, import_sui_types.SUI_ADDRESS_LENGTH * 2)
      );
    };
    var ZkLoginPublicIdentifier = _ZkLoginPublicIdentifier;
    function toZkLoginPublicIdentifier(addressSeed, iss, options) {
      const addressSeedBytesBigEndian = (options == null ? void 0 : options.legacyAddress) ? (0, import_utils22.toBigEndianBytes)(addressSeed, 32) : (0, import_utils22.toPaddedBigEndianBytes)(addressSeed, 32);
      const issBytes = new TextEncoder().encode((0, import_utils22.normalizeZkLoginIssuer)(iss));
      const tmp = new Uint8Array(1 + issBytes.length + addressSeedBytesBigEndian.length);
      tmp.set([issBytes.length], 0);
      tmp.set(issBytes, 1);
      tmp.set(addressSeedBytesBigEndian, 1 + issBytes.length);
      return new ZkLoginPublicIdentifier(tmp, options);
    }
    var VerifyZkLoginSignatureQuery = (0, import_latest.graphql)(`
	query Zklogin(
		$bytes: Base64!
		$signature: Base64!
		$intentScope: ZkLoginIntentScope!
		$author: SuiAddress!
	) {
		verifyZkloginSignature(
			bytes: $bytes
			signature: $signature
			intentScope: $intentScope
			author: $author
		) {
			success
			errors
		}
	}
`);
    function normalizeZkLoginPublicKeyBytes(bytes, legacyAddress = false) {
      const issByteLength = bytes[0] + 1;
      const addressSeed = BigInt(`0x${(0, import_bcs.toHex)(bytes.slice(issByteLength))}`);
      const seedBytes = legacyAddress ? (0, import_utils22.toBigEndianBytes)(addressSeed, 32) : (0, import_utils22.toPaddedBigEndianBytes)(addressSeed, 32);
      const data = new Uint8Array(issByteLength + seedBytes.length);
      data.set(bytes.slice(0, issByteLength), 0);
      data.set(seedBytes, issByteLength);
      return data;
    }
    async function graphqlVerifyZkLoginSignature({
      address,
      bytes,
      signature: signature2,
      intentScope,
      client = new import_client.SuiGraphQLClient({
        url: "https://sui-mainnet.mystenlabs.com/graphql"
      })
    }) {
      var _a, _b;
      const resp = await client.query({
        query: VerifyZkLoginSignatureQuery,
        variables: {
          bytes,
          signature: signature2,
          intentScope,
          author: address
        }
      });
      return ((_a = resp.data) == null ? void 0 : _a.verifyZkloginSignature.success) === true && ((_b = resp.data) == null ? void 0 : _b.verifyZkloginSignature.errors.length) === 0;
    }
    function parseSerializedZkLoginSignature(signature2) {
      const bytes = typeof signature2 === "string" ? (0, import_bcs.fromBase64)(signature2) : signature2;
      if (bytes[0] !== import_signature_scheme.SIGNATURE_SCHEME_TO_FLAG.ZkLogin) {
        throw new Error("Invalid signature scheme");
      }
      const signatureBytes = bytes.slice(1);
      const { inputs, maxEpoch, userSignature } = (0, import_signature.parseZkLoginSignature)(signatureBytes);
      const { issBase64Details, addressSeed } = inputs;
      const iss = (0, import_jwt_utils.extractClaimValue)(issBase64Details, "iss");
      const publicIdentifer = toZkLoginPublicIdentifier(BigInt(addressSeed), iss);
      return {
        serializedSignature: (0, import_bcs.toBase64)(bytes),
        signatureScheme: "ZkLogin",
        zkLogin: {
          inputs,
          maxEpoch,
          userSignature,
          iss,
          addressSeed: BigInt(addressSeed)
        },
        signature: bytes,
        publicKey: publicIdentifer.toRawBytes()
      };
    }
  }
});

// node_modules/@mysten/sui/dist/cjs/cryptography/signature.js
var require_signature2 = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/cryptography/signature.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var signature_exports = {};
    __export2(signature_exports, {
      parseSerializedSignature: () => parseSerializedSignature,
      toSerializedSignature: () => toSerializedSignature
    });
    module2.exports = __toCommonJS2(signature_exports);
    var import_bcs = require_cjs();
    var import_bcs2 = require_bcs3();
    var import_publickey = require_publickey2();
    var import_publickey2 = require_publickey3();
    var import_publickey3 = require_publickey();
    var import_signature_scheme = require_signature_scheme();
    function toSerializedSignature({
      signature: signature2,
      signatureScheme,
      publicKey: publicKey2
    }) {
      if (!publicKey2) {
        throw new Error("`publicKey` is required");
      }
      const pubKeyBytes = publicKey2.toRawBytes();
      const serializedSignature = new Uint8Array(1 + signature2.length + pubKeyBytes.length);
      serializedSignature.set([import_signature_scheme.SIGNATURE_SCHEME_TO_FLAG[signatureScheme]]);
      serializedSignature.set(signature2, 1);
      serializedSignature.set(pubKeyBytes, 1 + signature2.length);
      return (0, import_bcs.toBase64)(serializedSignature);
    }
    function parseSerializedSignature(serializedSignature) {
      const bytes = (0, import_bcs.fromBase64)(serializedSignature);
      const signatureScheme = import_signature_scheme.SIGNATURE_FLAG_TO_SCHEME[bytes[0]];
      switch (signatureScheme) {
        case "Passkey":
          return (0, import_publickey.parseSerializedPasskeySignature)(serializedSignature);
        case "MultiSig":
          const multisig = import_bcs2.bcs.MultiSig.parse(bytes.slice(1));
          return {
            serializedSignature,
            signatureScheme,
            multisig,
            bytes,
            signature: void 0
          };
        case "ZkLogin":
          return (0, import_publickey2.parseSerializedZkLoginSignature)(serializedSignature);
        case "ED25519":
        case "Secp256k1":
        case "Secp256r1":
          return (0, import_publickey3.parseSerializedKeypairSignature)(serializedSignature);
        default:
          throw new Error("Unsupported signature scheme");
      }
    }
  }
});

// node_modules/@mysten/sui/dist/cjs/cryptography/keypair.js
var require_keypair = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/cryptography/keypair.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var keypair_exports = {};
    __export2(keypair_exports, {
      Keypair: () => Keypair2,
      LEGACY_PRIVATE_KEY_SIZE: () => LEGACY_PRIVATE_KEY_SIZE,
      PRIVATE_KEY_SIZE: () => PRIVATE_KEY_SIZE,
      SUI_PRIVATE_KEY_PREFIX: () => SUI_PRIVATE_KEY_PREFIX,
      Signer: () => Signer,
      decodeSuiPrivateKey: () => decodeSuiPrivateKey,
      encodeSuiPrivateKey: () => encodeSuiPrivateKey
    });
    module2.exports = __toCommonJS2(keypair_exports);
    var import_bcs = require_cjs();
    var import_blake2b = require_blake2b();
    var import_base = require_lib();
    var import_intent = require_intent();
    var import_signature_scheme = require_signature_scheme();
    var import_signature = require_signature2();
    var PRIVATE_KEY_SIZE = 32;
    var LEGACY_PRIVATE_KEY_SIZE = 64;
    var SUI_PRIVATE_KEY_PREFIX = "suiprivkey";
    var Signer = class {
      /**
       * Sign messages with a specific intent. By combining the message bytes with the intent before hashing and signing,
       * it ensures that a signed message is tied to a specific purpose and domain separator is provided
       */
      async signWithIntent(bytes, intent) {
        const intentMessage = (0, import_intent.messageWithIntent)(intent, bytes);
        const digest = (0, import_blake2b.blake2b)(intentMessage, { dkLen: 32 });
        const signature2 = (0, import_signature.toSerializedSignature)({
          signature: await this.sign(digest),
          signatureScheme: this.getKeyScheme(),
          publicKey: this.getPublicKey()
        });
        return {
          signature: signature2,
          bytes: (0, import_bcs.toBase64)(bytes)
        };
      }
      /**
       * Signs provided transaction by calling `signWithIntent()` with a `TransactionData` provided as intent scope
       */
      async signTransaction(bytes) {
        return this.signWithIntent(bytes, "TransactionData");
      }
      /**
       * Signs provided personal message by calling `signWithIntent()` with a `PersonalMessage` provided as intent scope
       */
      async signPersonalMessage(bytes) {
        const { signature: signature2 } = await this.signWithIntent(
          import_bcs.bcs.vector(import_bcs.bcs.u8()).serialize(bytes).toBytes(),
          "PersonalMessage"
        );
        return {
          bytes: (0, import_bcs.toBase64)(bytes),
          signature: signature2
        };
      }
      toSuiAddress() {
        return this.getPublicKey().toSuiAddress();
      }
    };
    var Keypair2 = class extends Signer {
    };
    function decodeSuiPrivateKey(value) {
      const { prefix, words } = import_base.bech32.decode(value);
      if (prefix !== SUI_PRIVATE_KEY_PREFIX) {
        throw new Error("invalid private key prefix");
      }
      const extendedSecretKey = new Uint8Array(import_base.bech32.fromWords(words));
      const secretKey = extendedSecretKey.slice(1);
      const signatureScheme = import_signature_scheme.SIGNATURE_FLAG_TO_SCHEME[extendedSecretKey[0]];
      return {
        schema: signatureScheme,
        secretKey
      };
    }
    function encodeSuiPrivateKey(bytes, scheme) {
      if (bytes.length !== PRIVATE_KEY_SIZE) {
        throw new Error("Invalid bytes length");
      }
      const flag = import_signature_scheme.SIGNATURE_SCHEME_TO_FLAG[scheme];
      const privKeyBytes = new Uint8Array(bytes.length + 1);
      privKeyBytes.set([flag]);
      privKeyBytes.set(bytes, 1);
      return import_base.bech32.encode(SUI_PRIVATE_KEY_PREFIX, import_base.bech32.toWords(privKeyBytes));
    }
  }
});

// node_modules/@noble/hashes/pbkdf2.js
var require_pbkdf2 = __commonJS({
  "node_modules/@noble/hashes/pbkdf2.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.pbkdf2 = pbkdf2;
    exports2.pbkdf2Async = pbkdf2Async;
    var hmac_ts_1 = require_hmac();
    var utils_ts_1 = require_utils();
    function pbkdf2Init(hash, _password, _salt, _opts) {
      (0, utils_ts_1.ahash)(hash);
      const opts = (0, utils_ts_1.checkOpts)({ dkLen: 32, asyncTick: 10 }, _opts);
      const { c, dkLen, asyncTick } = opts;
      (0, utils_ts_1.anumber)(c);
      (0, utils_ts_1.anumber)(dkLen);
      (0, utils_ts_1.anumber)(asyncTick);
      if (c < 1)
        throw new Error("iterations (c) should be >= 1");
      const password = (0, utils_ts_1.kdfInputToBytes)(_password);
      const salt = (0, utils_ts_1.kdfInputToBytes)(_salt);
      const DK = new Uint8Array(dkLen);
      const PRF = hmac_ts_1.hmac.create(hash, password);
      const PRFSalt = PRF._cloneInto().update(salt);
      return { c, dkLen, asyncTick, DK, PRF, PRFSalt };
    }
    function pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {
      PRF.destroy();
      PRFSalt.destroy();
      if (prfW)
        prfW.destroy();
      (0, utils_ts_1.clean)(u);
      return DK;
    }
    function pbkdf2(hash, password, salt, opts) {
      const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);
      let prfW;
      const arr = new Uint8Array(4);
      const view = (0, utils_ts_1.createView)(arr);
      const u = new Uint8Array(PRF.outputLen);
      for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
        const Ti = DK.subarray(pos, pos + PRF.outputLen);
        view.setInt32(0, ti, false);
        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
        Ti.set(u.subarray(0, Ti.length));
        for (let ui = 1; ui < c; ui++) {
          PRF._cloneInto(prfW).update(u).digestInto(u);
          for (let i = 0; i < Ti.length; i++)
            Ti[i] ^= u[i];
        }
      }
      return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
    }
    async function pbkdf2Async(hash, password, salt, opts) {
      const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);
      let prfW;
      const arr = new Uint8Array(4);
      const view = (0, utils_ts_1.createView)(arr);
      const u = new Uint8Array(PRF.outputLen);
      for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
        const Ti = DK.subarray(pos, pos + PRF.outputLen);
        view.setInt32(0, ti, false);
        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
        Ti.set(u.subarray(0, Ti.length));
        await (0, utils_ts_1.asyncLoop)(c - 1, asyncTick, () => {
          PRF._cloneInto(prfW).update(u).digestInto(u);
          for (let i = 0; i < Ti.length; i++)
            Ti[i] ^= u[i];
        });
      }
      return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
    }
  }
});

// node_modules/@scure/bip39/index.js
var require_bip39 = __commonJS({
  "node_modules/@scure/bip39/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.generateMnemonic = generateMnemonic;
    exports2.mnemonicToEntropy = mnemonicToEntropy;
    exports2.entropyToMnemonic = entropyToMnemonic;
    exports2.validateMnemonic = validateMnemonic;
    exports2.mnemonicToSeed = mnemonicToSeed;
    exports2.mnemonicToSeedSync = mnemonicToSeedSync;
    var pbkdf2_1 = require_pbkdf2();
    var sha2_1 = require_sha2();
    var utils_1 = require_utils();
    var base_1 = require_lib();
    var isJapanese = (wordlist) => wordlist[0] === "あいこくしん";
    function nfkd(str) {
      if (typeof str !== "string")
        throw new TypeError("invalid mnemonic type: " + typeof str);
      return str.normalize("NFKD");
    }
    function normalize(str) {
      const norm = nfkd(str);
      const words = norm.split(" ");
      if (![12, 15, 18, 21, 24].includes(words.length))
        throw new Error("Invalid mnemonic");
      return { nfkd: norm, words };
    }
    function aentropy(ent) {
      (0, utils_1.abytes)(ent, 16, 20, 24, 28, 32);
    }
    function generateMnemonic(wordlist, strength = 128) {
      (0, utils_1.anumber)(strength);
      if (strength % 32 !== 0 || strength > 256)
        throw new TypeError("Invalid entropy");
      return entropyToMnemonic((0, utils_1.randomBytes)(strength / 8), wordlist);
    }
    var calcChecksum = (entropy) => {
      const bitsLeft = 8 - entropy.length / 4;
      return new Uint8Array([(0, sha2_1.sha256)(entropy)[0] >> bitsLeft << bitsLeft]);
    };
    function getCoder(wordlist) {
      if (!Array.isArray(wordlist) || wordlist.length !== 2048 || typeof wordlist[0] !== "string")
        throw new Error("Wordlist: expected array of 2048 strings");
      wordlist.forEach((i) => {
        if (typeof i !== "string")
          throw new Error("wordlist: non-string element: " + i);
      });
      return base_1.utils.chain(base_1.utils.checksum(1, calcChecksum), base_1.utils.radix2(11, true), base_1.utils.alphabet(wordlist));
    }
    function mnemonicToEntropy(mnemonic, wordlist) {
      const { words } = normalize(mnemonic);
      const entropy = getCoder(wordlist).decode(words);
      aentropy(entropy);
      return entropy;
    }
    function entropyToMnemonic(entropy, wordlist) {
      aentropy(entropy);
      const words = getCoder(wordlist).encode(entropy);
      return words.join(isJapanese(wordlist) ? "　" : " ");
    }
    function validateMnemonic(mnemonic, wordlist) {
      try {
        mnemonicToEntropy(mnemonic, wordlist);
      } catch (e) {
        return false;
      }
      return true;
    }
    var psalt = (passphrase) => nfkd("mnemonic" + passphrase);
    function mnemonicToSeed(mnemonic, passphrase = "") {
      return (0, pbkdf2_1.pbkdf2Async)(sha2_1.sha512, normalize(mnemonic).nfkd, psalt(passphrase), { c: 2048, dkLen: 64 });
    }
    function mnemonicToSeedSync(mnemonic, passphrase = "") {
      return (0, pbkdf2_1.pbkdf2)(sha2_1.sha512, normalize(mnemonic).nfkd, psalt(passphrase), { c: 2048, dkLen: 64 });
    }
  }
});

// node_modules/@mysten/sui/dist/cjs/cryptography/mnemonics.js
var require_mnemonics = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/cryptography/mnemonics.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var mnemonics_exports = {};
    __export2(mnemonics_exports, {
      isValidBIP32Path: () => isValidBIP32Path,
      isValidHardenedPath: () => isValidHardenedPath,
      mnemonicToSeed: () => mnemonicToSeed,
      mnemonicToSeedHex: () => mnemonicToSeedHex
    });
    module2.exports = __toCommonJS2(mnemonics_exports);
    var import_bcs = require_cjs();
    var import_bip39 = require_bip39();
    function isValidHardenedPath(path) {
      if (!new RegExp("^m\\/44'\\/784'\\/[0-9]+'\\/[0-9]+'\\/[0-9]+'+$").test(path)) {
        return false;
      }
      return true;
    }
    function isValidBIP32Path(path) {
      if (!new RegExp("^m\\/(54|74)'\\/784'\\/[0-9]+'\\/[0-9]+\\/[0-9]+$").test(path)) {
        return false;
      }
      return true;
    }
    function mnemonicToSeed(mnemonics) {
      return (0, import_bip39.mnemonicToSeedSync)(mnemonics, "");
    }
    function mnemonicToSeedHex(mnemonics) {
      return (0, import_bcs.toHex)(mnemonicToSeed(mnemonics));
    }
  }
});

// node_modules/@noble/hashes/sha512.js
var require_sha512 = __commonJS({
  "node_modules/@noble/hashes/sha512.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sha512_256 = exports2.SHA512_256 = exports2.sha512_224 = exports2.SHA512_224 = exports2.sha384 = exports2.SHA384 = exports2.sha512 = exports2.SHA512 = void 0;
    var sha2_ts_1 = require_sha2();
    exports2.SHA512 = sha2_ts_1.SHA512;
    exports2.sha512 = sha2_ts_1.sha512;
    exports2.SHA384 = sha2_ts_1.SHA384;
    exports2.sha384 = sha2_ts_1.sha384;
    exports2.SHA512_224 = sha2_ts_1.SHA512_224;
    exports2.sha512_224 = sha2_ts_1.sha512_224;
    exports2.SHA512_256 = sha2_ts_1.SHA512_256;
    exports2.sha512_256 = sha2_ts_1.sha512_256;
  }
});

// node_modules/@mysten/sui/dist/cjs/keypairs/ed25519/ed25519-hd-key.js
var require_ed25519_hd_key = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/keypairs/ed25519/ed25519-hd-key.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var ed25519_hd_key_exports = {};
    __export2(ed25519_hd_key_exports, {
      derivePath: () => derivePath
    });
    module2.exports = __toCommonJS2(ed25519_hd_key_exports);
    var import_bcs = require_cjs();
    var import_hmac = require_hmac();
    var import_sha512 = require_sha512();
    var ED25519_CURVE = "ed25519 seed";
    var HARDENED_OFFSET = 2147483648;
    var pathRegex = new RegExp("^m(\\/[0-9]+')+$");
    var replaceDerive = (val) => val.replace("'", "");
    var getMasterKeyFromSeed = (seed) => {
      const h = import_hmac.hmac.create(import_sha512.sha512, ED25519_CURVE);
      const I = h.update((0, import_bcs.fromHex)(seed)).digest();
      const IL = I.slice(0, 32);
      const IR = I.slice(32);
      return {
        key: IL,
        chainCode: IR
      };
    };
    var CKDPriv = ({ key, chainCode }, index) => {
      const indexBuffer = new ArrayBuffer(4);
      const cv = new DataView(indexBuffer);
      cv.setUint32(0, index);
      const data = new Uint8Array(1 + key.length + indexBuffer.byteLength);
      data.set(new Uint8Array(1).fill(0));
      data.set(key, 1);
      data.set(new Uint8Array(indexBuffer, 0, indexBuffer.byteLength), key.length + 1);
      const I = import_hmac.hmac.create(import_sha512.sha512, chainCode).update(data).digest();
      const IL = I.slice(0, 32);
      const IR = I.slice(32);
      return {
        key: IL,
        chainCode: IR
      };
    };
    var isValidPath = (path) => {
      if (!pathRegex.test(path)) {
        return false;
      }
      return !path.split("/").slice(1).map(replaceDerive).some(
        isNaN
        /* ts T_T*/
      );
    };
    var derivePath = (path, seed, offset2 = HARDENED_OFFSET) => {
      if (!isValidPath(path)) {
        throw new Error("Invalid derivation path");
      }
      const { key, chainCode } = getMasterKeyFromSeed(seed);
      const segments = path.split("/").slice(1).map(replaceDerive).map((el) => parseInt(el, 10));
      return segments.reduce((parentKeys, segment) => CKDPriv(parentKeys, segment + offset2), {
        key,
        chainCode
      });
    };
  }
});

// node_modules/@mysten/sui/dist/cjs/keypairs/ed25519/publickey.js
var require_publickey4 = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/keypairs/ed25519/publickey.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var publickey_exports = {};
    __export2(publickey_exports, {
      Ed25519PublicKey: () => Ed25519PublicKey
    });
    module2.exports = __toCommonJS2(publickey_exports);
    var import_bcs = require_cjs();
    var import_ed255192 = require_ed25519();
    var import_publickey = require_publickey();
    var import_signature_scheme = require_signature_scheme();
    var PUBLIC_KEY_SIZE = 32;
    var Ed25519PublicKey = class extends import_publickey.PublicKey {
      /**
       * Create a new Ed25519PublicKey object
       * @param value ed25519 public key as buffer or base-64 encoded string
       */
      constructor(value) {
        super();
        if (typeof value === "string") {
          this.data = (0, import_bcs.fromBase64)(value);
        } else if (value instanceof Uint8Array) {
          this.data = value;
        } else {
          this.data = Uint8Array.from(value);
        }
        if (this.data.length !== PUBLIC_KEY_SIZE) {
          throw new Error(
            `Invalid public key input. Expected ${PUBLIC_KEY_SIZE} bytes, got ${this.data.length}`
          );
        }
      }
      /**
       * Checks if two Ed25519 public keys are equal
       */
      equals(publicKey2) {
        return super.equals(publicKey2);
      }
      /**
       * Return the byte array representation of the Ed25519 public key
       */
      toRawBytes() {
        return this.data;
      }
      /**
       * Return the Sui address associated with this Ed25519 public key
       */
      flag() {
        return import_signature_scheme.SIGNATURE_SCHEME_TO_FLAG["ED25519"];
      }
      /**
       * Verifies that the signature is valid for for the provided message
       */
      async verify(message, signature2) {
        let bytes;
        if (typeof signature2 === "string") {
          const parsed = (0, import_publickey.parseSerializedKeypairSignature)(signature2);
          if (parsed.signatureScheme !== "ED25519") {
            throw new Error("Invalid signature scheme");
          }
          if (!(0, import_publickey.bytesEqual)(this.toRawBytes(), parsed.publicKey)) {
            throw new Error("Signature does not match public key");
          }
          bytes = parsed.signature;
        } else {
          bytes = signature2;
        }
        return import_ed255192.ed25519.verify(bytes, message, this.toRawBytes());
      }
    };
    Ed25519PublicKey.SIZE = PUBLIC_KEY_SIZE;
  }
});

// node_modules/@mysten/sui/dist/cjs/keypairs/ed25519/keypair.js
var require_keypair2 = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/keypairs/ed25519/keypair.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var keypair_exports = {};
    __export2(keypair_exports, {
      DEFAULT_ED25519_DERIVATION_PATH: () => DEFAULT_ED25519_DERIVATION_PATH,
      Ed25519Keypair: () => Ed25519Keypair
    });
    module2.exports = __toCommonJS2(keypair_exports);
    var import_ed255192 = require_ed25519();
    var import_keypair = require_keypair();
    var import_mnemonics = require_mnemonics();
    var import_ed25519_hd_key = require_ed25519_hd_key();
    var import_publickey = require_publickey4();
    var DEFAULT_ED25519_DERIVATION_PATH = "m/44'/784'/0'/0'/0'";
    var Ed25519Keypair = class _Ed25519Keypair extends import_keypair.Keypair {
      /**
       * Create a new Ed25519 keypair instance.
       * Generate random keypair if no {@link Ed25519Keypair} is provided.
       *
       * @param keypair Ed25519 keypair
       */
      constructor(keypair) {
        super();
        if (keypair) {
          this.keypair = {
            publicKey: keypair.publicKey,
            secretKey: keypair.secretKey.slice(0, 32)
          };
        } else {
          const privateKey = import_ed255192.ed25519.utils.randomPrivateKey();
          this.keypair = {
            publicKey: import_ed255192.ed25519.getPublicKey(privateKey),
            secretKey: privateKey
          };
        }
      }
      /**
       * Get the key scheme of the keypair ED25519
       */
      getKeyScheme() {
        return "ED25519";
      }
      /**
       * Generate a new random Ed25519 keypair
       */
      static generate() {
        const secretKey = import_ed255192.ed25519.utils.randomPrivateKey();
        return new _Ed25519Keypair({
          publicKey: import_ed255192.ed25519.getPublicKey(secretKey),
          secretKey
        });
      }
      /**
       * Create a Ed25519 keypair from a raw secret key byte array, also known as seed.
       * This is NOT the private scalar which is result of hashing and bit clamping of
       * the raw secret key.
       *
       * @throws error if the provided secret key is invalid and validation is not skipped.
       *
       * @param secretKey secret key as a byte array or Bech32 secret key string
       * @param options: skip secret key validation
       */
      static fromSecretKey(secretKey, options) {
        if (typeof secretKey === "string") {
          const decoded = (0, import_keypair.decodeSuiPrivateKey)(secretKey);
          if (decoded.schema !== "ED25519") {
            throw new Error(`Expected a ED25519 keypair, got ${decoded.schema}`);
          }
          return this.fromSecretKey(decoded.secretKey, options);
        }
        const secretKeyLength = secretKey.length;
        if (secretKeyLength !== import_keypair.PRIVATE_KEY_SIZE) {
          throw new Error(
            `Wrong secretKey size. Expected ${import_keypair.PRIVATE_KEY_SIZE} bytes, got ${secretKeyLength}.`
          );
        }
        const keypair = {
          publicKey: import_ed255192.ed25519.getPublicKey(secretKey),
          secretKey
        };
        if (!options || !options.skipValidation) {
          const encoder = new TextEncoder();
          const signData = encoder.encode("sui validation");
          const signature2 = import_ed255192.ed25519.sign(signData, secretKey);
          if (!import_ed255192.ed25519.verify(signature2, signData, keypair.publicKey)) {
            throw new Error("provided secretKey is invalid");
          }
        }
        return new _Ed25519Keypair(keypair);
      }
      /**
       * The public key for this Ed25519 keypair
       */
      getPublicKey() {
        return new import_publickey.Ed25519PublicKey(this.keypair.publicKey);
      }
      /**
       * The Bech32 secret key string for this Ed25519 keypair
       */
      getSecretKey() {
        return (0, import_keypair.encodeSuiPrivateKey)(
          this.keypair.secretKey.slice(0, import_keypair.PRIVATE_KEY_SIZE),
          this.getKeyScheme()
        );
      }
      /**
       * Return the signature for the provided data using Ed25519.
       */
      async sign(data) {
        return import_ed255192.ed25519.sign(data, this.keypair.secretKey);
      }
      /**
       * Derive Ed25519 keypair from mnemonics and path. The mnemonics must be normalized
       * and validated against the english wordlist.
       *
       * If path is none, it will default to m/44'/784'/0'/0'/0', otherwise the path must
       * be compliant to SLIP-0010 in form m/44'/784'/{account_index}'/{change_index}'/{address_index}'.
       */
      static deriveKeypair(mnemonics, path) {
        if (path == null) {
          path = DEFAULT_ED25519_DERIVATION_PATH;
        }
        if (!(0, import_mnemonics.isValidHardenedPath)(path)) {
          throw new Error("Invalid derivation path");
        }
        const { key } = (0, import_ed25519_hd_key.derivePath)(path, (0, import_mnemonics.mnemonicToSeedHex)(mnemonics));
        return _Ed25519Keypair.fromSecretKey(key);
      }
      /**
       * Derive Ed25519 keypair from mnemonicSeed and path.
       *
       * If path is none, it will default to m/44'/784'/0'/0'/0', otherwise the path must
       * be compliant to SLIP-0010 in form m/44'/784'/{account_index}'/{change_index}'/{address_index}'.
       */
      static deriveKeypairFromSeed(seedHex, path) {
        if (path == null) {
          path = DEFAULT_ED25519_DERIVATION_PATH;
        }
        if (!(0, import_mnemonics.isValidHardenedPath)(path)) {
          throw new Error("Invalid derivation path");
        }
        const { key } = (0, import_ed25519_hd_key.derivePath)(path, seedHex);
        return _Ed25519Keypair.fromSecretKey(key);
      }
    };
  }
});

// node_modules/@mysten/sui/dist/cjs/keypairs/ed25519/index.js
var require_ed255192 = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/keypairs/ed25519/index.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var ed25519_exports = {};
    __export2(ed25519_exports, {
      DEFAULT_ED25519_DERIVATION_PATH: () => import_keypair.DEFAULT_ED25519_DERIVATION_PATH,
      Ed25519Keypair: () => import_keypair.Ed25519Keypair,
      Ed25519PublicKey: () => import_publickey.Ed25519PublicKey
    });
    module2.exports = __toCommonJS2(ed25519_exports);
    var import_keypair = require_keypair2();
    var import_publickey = require_publickey4();
  }
});

// node_modules/@mysten/sui/dist/cjs/version.js
var require_version = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/version.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var version_exports = {};
    __export2(version_exports, {
      PACKAGE_VERSION: () => PACKAGE_VERSION,
      TARGETED_RPC_VERSION: () => TARGETED_RPC_VERSION
    });
    module2.exports = __toCommonJS2(version_exports);
    var PACKAGE_VERSION = "1.27.0";
    var TARGETED_RPC_VERSION = "1.47.0";
  }
});

// node_modules/@mysten/sui/dist/cjs/client/errors.js
var require_errors = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/client/errors.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var errors_exports = {};
    __export2(errors_exports, {
      JsonRpcError: () => JsonRpcError,
      SuiHTTPStatusError: () => SuiHTTPStatusError,
      SuiHTTPTransportError: () => SuiHTTPTransportError
    });
    module2.exports = __toCommonJS2(errors_exports);
    var CODE_TO_ERROR_TYPE = {
      "-32700": "ParseError",
      "-32701": "OversizedRequest",
      "-32702": "OversizedResponse",
      "-32600": "InvalidRequest",
      "-32601": "MethodNotFound",
      "-32602": "InvalidParams",
      "-32603": "InternalError",
      "-32604": "ServerBusy",
      "-32000": "CallExecutionFailed",
      "-32001": "UnknownError",
      "-32003": "SubscriptionClosed",
      "-32004": "SubscriptionClosedWithError",
      "-32005": "BatchesNotSupported",
      "-32006": "TooManySubscriptions",
      "-32050": "TransientError",
      "-32002": "TransactionExecutionClientError"
    };
    var SuiHTTPTransportError = class extends Error {
    };
    var JsonRpcError = class extends SuiHTTPTransportError {
      constructor(message, code) {
        super(message);
        this.code = code;
        this.type = CODE_TO_ERROR_TYPE[code] ?? "ServerError";
      }
    };
    var SuiHTTPStatusError = class extends SuiHTTPTransportError {
      constructor(message, status, statusText) {
        super(message);
        this.status = status;
        this.statusText = statusText;
      }
    };
  }
});

// node_modules/@mysten/sui/dist/cjs/client/rpc-websocket-client.js
var require_rpc_websocket_client = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/client/rpc-websocket-client.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __typeError = (msg) => {
      throw TypeError(msg);
    };
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
    var __privateGet2 = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
    var __privateAdd2 = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
    var __privateSet2 = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
    var __privateMethod2 = (obj, member, method2) => (__accessCheck(obj, member, "access private method"), method2);
    var __privateWrapper2 = (obj, member, setter, getter) => ({
      set _(value) {
        __privateSet2(obj, member, value, setter);
      },
      get _() {
        return __privateGet2(obj, member, getter);
      }
    });
    var rpc_websocket_client_exports = {};
    __export2(rpc_websocket_client_exports, {
      DEFAULT_CLIENT_OPTIONS: () => DEFAULT_CLIENT_OPTIONS,
      WebsocketClient: () => WebsocketClient
    });
    module2.exports = __toCommonJS2(rpc_websocket_client_exports);
    var import_errors3 = require_errors();
    var _requestId;
    var _disconnects;
    var _webSocket;
    var _connectionPromise;
    var _subscriptions;
    var _pendingRequests;
    var _WebsocketClient_instances;
    var setupWebSocket_fn;
    var reconnect_fn;
    function getWebsocketUrl(httpUrl) {
      const url = new URL(httpUrl);
      url.protocol = url.protocol.replace("http", "ws");
      return url.toString();
    }
    var DEFAULT_CLIENT_OPTIONS = {
      // We fudge the typing because we also check for undefined in the constructor:
      WebSocketConstructor: typeof WebSocket !== "undefined" ? WebSocket : void 0,
      callTimeout: 3e4,
      reconnectTimeout: 3e3,
      maxReconnects: 5
    };
    var WebsocketClient = class {
      constructor(endpoint2, options = {}) {
        __privateAdd2(this, _WebsocketClient_instances);
        __privateAdd2(this, _requestId, 0);
        __privateAdd2(this, _disconnects, 0);
        __privateAdd2(this, _webSocket, null);
        __privateAdd2(this, _connectionPromise, null);
        __privateAdd2(this, _subscriptions, /* @__PURE__ */ new Set());
        __privateAdd2(this, _pendingRequests, /* @__PURE__ */ new Map());
        this.endpoint = endpoint2;
        this.options = { ...DEFAULT_CLIENT_OPTIONS, ...options };
        if (!this.options.WebSocketConstructor) {
          throw new Error("Missing WebSocket constructor");
        }
        if (this.endpoint.startsWith("http")) {
          this.endpoint = getWebsocketUrl(this.endpoint);
        }
      }
      async makeRequest(method2, params, signal) {
        const webSocket = await __privateMethod2(this, _WebsocketClient_instances, setupWebSocket_fn).call(this);
        return new Promise((resolve, reject) => {
          __privateSet2(this, _requestId, __privateGet2(this, _requestId) + 1);
          __privateGet2(this, _pendingRequests).set(__privateGet2(this, _requestId), {
            resolve,
            reject,
            timeout: setTimeout(() => {
              __privateGet2(this, _pendingRequests).delete(__privateGet2(this, _requestId));
              reject(new Error(`Request timeout: ${method2}`));
            }, this.options.callTimeout)
          });
          signal == null ? void 0 : signal.addEventListener("abort", () => {
            __privateGet2(this, _pendingRequests).delete(__privateGet2(this, _requestId));
            reject(signal.reason);
          });
          webSocket.send(JSON.stringify({ jsonrpc: "2.0", id: __privateGet2(this, _requestId), method: method2, params }));
        }).then(({ error, result }) => {
          if (error) {
            throw new import_errors3.JsonRpcError(error.message, error.code);
          }
          return result;
        });
      }
      async subscribe(input) {
        const subscription = new RpcSubscription(input);
        __privateGet2(this, _subscriptions).add(subscription);
        await subscription.subscribe(this);
        return () => subscription.unsubscribe(this);
      }
    };
    _requestId = /* @__PURE__ */ new WeakMap();
    _disconnects = /* @__PURE__ */ new WeakMap();
    _webSocket = /* @__PURE__ */ new WeakMap();
    _connectionPromise = /* @__PURE__ */ new WeakMap();
    _subscriptions = /* @__PURE__ */ new WeakMap();
    _pendingRequests = /* @__PURE__ */ new WeakMap();
    _WebsocketClient_instances = /* @__PURE__ */ new WeakSet();
    setupWebSocket_fn = function() {
      if (__privateGet2(this, _connectionPromise)) {
        return __privateGet2(this, _connectionPromise);
      }
      __privateSet2(this, _connectionPromise, new Promise((resolve) => {
        var _a;
        (_a = __privateGet2(this, _webSocket)) == null ? void 0 : _a.close();
        __privateSet2(this, _webSocket, new this.options.WebSocketConstructor(this.endpoint));
        __privateGet2(this, _webSocket).addEventListener("open", () => {
          __privateSet2(this, _disconnects, 0);
          resolve(__privateGet2(this, _webSocket));
        });
        __privateGet2(this, _webSocket).addEventListener("close", () => {
          __privateWrapper2(this, _disconnects)._++;
          if (__privateGet2(this, _disconnects) <= this.options.maxReconnects) {
            setTimeout(() => {
              __privateMethod2(this, _WebsocketClient_instances, reconnect_fn).call(this);
            }, this.options.reconnectTimeout);
          }
        });
        __privateGet2(this, _webSocket).addEventListener("message", ({ data }) => {
          let json;
          try {
            json = JSON.parse(data);
          } catch (error) {
            console.error(new Error(`Failed to parse RPC message: ${data}`, { cause: error }));
            return;
          }
          if ("id" in json && json.id != null && __privateGet2(this, _pendingRequests).has(json.id)) {
            const { resolve: resolve2, timeout } = __privateGet2(this, _pendingRequests).get(json.id);
            clearTimeout(timeout);
            resolve2(json);
          } else if ("params" in json) {
            const { params } = json;
            __privateGet2(this, _subscriptions).forEach((subscription) => {
              if (subscription.subscriptionId === params.subscription) {
                if (params.subscription === subscription.subscriptionId) {
                  subscription.onMessage(params.result);
                }
              }
            });
          }
        });
      }));
      return __privateGet2(this, _connectionPromise);
    };
    reconnect_fn = async function() {
      var _a;
      (_a = __privateGet2(this, _webSocket)) == null ? void 0 : _a.close();
      __privateSet2(this, _connectionPromise, null);
      return Promise.allSettled(
        [...__privateGet2(this, _subscriptions)].map((subscription) => subscription.subscribe(this))
      );
    };
    var RpcSubscription = class {
      constructor(input) {
        this.subscriptionId = null;
        this.subscribed = false;
        this.input = input;
      }
      onMessage(message) {
        if (this.subscribed) {
          this.input.onMessage(message);
        }
      }
      async unsubscribe(client) {
        const { subscriptionId } = this;
        this.subscribed = false;
        if (subscriptionId == null) return false;
        this.subscriptionId = null;
        return client.makeRequest(this.input.unsubscribe, [subscriptionId]);
      }
      async subscribe(client) {
        this.subscriptionId = null;
        this.subscribed = true;
        const newSubscriptionId = await client.makeRequest(
          this.input.method,
          this.input.params,
          this.input.signal
        );
        if (this.subscribed) {
          this.subscriptionId = newSubscriptionId;
        }
      }
    };
  }
});

// node_modules/@mysten/sui/dist/cjs/client/http-transport.js
var require_http_transport = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/client/http-transport.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __typeError = (msg) => {
      throw TypeError(msg);
    };
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
    var __privateGet2 = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
    var __privateAdd2 = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
    var __privateSet2 = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
    var __privateMethod2 = (obj, member, method2) => (__accessCheck(obj, member, "access private method"), method2);
    var http_transport_exports = {};
    __export2(http_transport_exports, {
      SuiHTTPTransport: () => SuiHTTPTransport
    });
    module2.exports = __toCommonJS2(http_transport_exports);
    var import_version2 = require_version();
    var import_errors3 = require_errors();
    var import_rpc_websocket_client = require_rpc_websocket_client();
    var _requestId;
    var _options;
    var _websocketClient;
    var _SuiHTTPTransport_instances;
    var getWebsocketClient_fn;
    var SuiHTTPTransport = class {
      constructor(options) {
        __privateAdd2(this, _SuiHTTPTransport_instances);
        __privateAdd2(this, _requestId, 0);
        __privateAdd2(this, _options);
        __privateAdd2(this, _websocketClient);
        __privateSet2(this, _options, options);
      }
      fetch(input, init) {
        const fetchFn = __privateGet2(this, _options).fetch ?? fetch;
        if (!fetchFn) {
          throw new Error(
            "The current environment does not support fetch, you can provide a fetch implementation in the options for SuiHTTPTransport."
          );
        }
        return fetchFn(input, init);
      }
      async request(input) {
        var _a, _b;
        __privateSet2(this, _requestId, __privateGet2(this, _requestId) + 1);
        const res = await this.fetch(((_a = __privateGet2(this, _options).rpc) == null ? void 0 : _a.url) ?? __privateGet2(this, _options).url, {
          method: "POST",
          signal: input.signal,
          headers: {
            "Content-Type": "application/json",
            "Client-Sdk-Type": "typescript",
            "Client-Sdk-Version": import_version2.PACKAGE_VERSION,
            "Client-Target-Api-Version": import_version2.TARGETED_RPC_VERSION,
            "Client-Request-Method": input.method,
            ...(_b = __privateGet2(this, _options).rpc) == null ? void 0 : _b.headers
          },
          body: JSON.stringify({
            jsonrpc: "2.0",
            id: __privateGet2(this, _requestId),
            method: input.method,
            params: input.params
          })
        });
        if (!res.ok) {
          throw new import_errors3.SuiHTTPStatusError(
            `Unexpected status code: ${res.status}`,
            res.status,
            res.statusText
          );
        }
        const data = await res.json();
        if ("error" in data && data.error != null) {
          throw new import_errors3.JsonRpcError(data.error.message, data.error.code);
        }
        return data.result;
      }
      async subscribe(input) {
        const unsubscribe = await __privateMethod2(this, _SuiHTTPTransport_instances, getWebsocketClient_fn).call(this).subscribe(input);
        if (input.signal) {
          input.signal.throwIfAborted();
          input.signal.addEventListener("abort", () => {
            unsubscribe();
          });
        }
        return async () => !!await unsubscribe();
      }
    };
    _requestId = /* @__PURE__ */ new WeakMap();
    _options = /* @__PURE__ */ new WeakMap();
    _websocketClient = /* @__PURE__ */ new WeakMap();
    _SuiHTTPTransport_instances = /* @__PURE__ */ new WeakSet();
    getWebsocketClient_fn = function() {
      var _a;
      if (!__privateGet2(this, _websocketClient)) {
        const WebSocketConstructor = __privateGet2(this, _options).WebSocketConstructor ?? WebSocket;
        if (!WebSocketConstructor) {
          throw new Error(
            "The current environment does not support WebSocket, you can provide a WebSocketConstructor in the options for SuiHTTPTransport."
          );
        }
        __privateSet2(this, _websocketClient, new import_rpc_websocket_client.WebsocketClient(
          ((_a = __privateGet2(this, _options).websocket) == null ? void 0 : _a.url) ?? __privateGet2(this, _options).url,
          {
            WebSocketConstructor,
            ...__privateGet2(this, _options).websocket
          }
        ));
      }
      return __privateGet2(this, _websocketClient);
    };
  }
});

// node_modules/@mysten/sui/dist/cjs/client/network.js
var require_network = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/client/network.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var network_exports = {};
    __export2(network_exports, {
      getFullnodeUrl: () => getFullnodeUrl
    });
    module2.exports = __toCommonJS2(network_exports);
    function getFullnodeUrl(network) {
      switch (network) {
        case "mainnet":
          return "https://fullnode.mainnet.sui.io:443";
        case "testnet":
          return "https://fullnode.testnet.sui.io:443";
        case "devnet":
          return "https://fullnode.devnet.sui.io:443";
        case "localnet":
          return "http://127.0.0.1:9000";
        default:
          throw new Error(`Unknown network: ${network}`);
      }
    }
  }
});

// node_modules/@mysten/sui/dist/cjs/client/types/chain.js
var require_chain = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/client/types/chain.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var chain_exports = {};
    module2.exports = __toCommonJS2(chain_exports);
  }
});

// node_modules/@mysten/sui/dist/cjs/client/types/coins.js
var require_coins = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/client/types/coins.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var coins_exports = {};
    module2.exports = __toCommonJS2(coins_exports);
  }
});

// node_modules/@mysten/sui/dist/cjs/client/types/common.js
var require_common = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/client/types/common.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var common_exports = {};
    module2.exports = __toCommonJS2(common_exports);
  }
});

// node_modules/@mysten/sui/dist/cjs/client/types/changes.js
var require_changes = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/client/types/changes.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var changes_exports = {};
    module2.exports = __toCommonJS2(changes_exports);
  }
});

// node_modules/@mysten/sui/dist/cjs/client/types/generated.js
var require_generated = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/client/types/generated.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var generated_exports = {};
    module2.exports = __toCommonJS2(generated_exports);
  }
});

// node_modules/@mysten/sui/dist/cjs/client/types/params.js
var require_params = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/client/types/params.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var params_exports = {};
    module2.exports = __toCommonJS2(params_exports);
  }
});

// node_modules/@mysten/sui/dist/cjs/client/types/index.js
var require_types2 = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/client/types/index.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __reExport = (target, mod2, secondTarget) => (__copyProps(target, mod2, "default"), secondTarget && __copyProps(secondTarget, mod2, "default"));
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var types_exports = {};
    module2.exports = __toCommonJS2(types_exports);
    __reExport(types_exports, require_chain(), module2.exports);
    __reExport(types_exports, require_coins(), module2.exports);
    __reExport(types_exports, require_common(), module2.exports);
    __reExport(types_exports, require_changes(), module2.exports);
    __reExport(types_exports, require_generated(), module2.exports);
    __reExport(types_exports, require_params(), module2.exports);
  }
});

// node_modules/@mysten/sui/dist/cjs/experimental/cache.js
var require_cache = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/experimental/cache.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __typeError = (msg) => {
      throw TypeError(msg);
    };
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
    var __privateGet2 = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
    var __privateAdd2 = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
    var __privateSet2 = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
    var cache_exports = {};
    __export2(cache_exports, {
      ClientCache: () => ClientCache
    });
    module2.exports = __toCommonJS2(cache_exports);
    var _prefix;
    var _cache;
    var _ClientCache = class _ClientCache2 {
      constructor({ prefix, cache } = {}) {
        __privateAdd2(this, _prefix);
        __privateAdd2(this, _cache);
        __privateSet2(this, _prefix, prefix ?? []);
        __privateSet2(this, _cache, cache ?? /* @__PURE__ */ new Map());
      }
      read(key, load) {
        const cacheKey = [__privateGet2(this, _prefix), ...key].join(":");
        if (__privateGet2(this, _cache).has(cacheKey)) {
          return __privateGet2(this, _cache).get(cacheKey);
        }
        const result = load();
        __privateGet2(this, _cache).set(cacheKey, result);
        if (typeof result === "object" && result !== null && "then" in result) {
          return Promise.resolve(result).then((v) => {
            __privateGet2(this, _cache).set(cacheKey, v);
            return v;
          }).catch((err) => {
            __privateGet2(this, _cache).delete(cacheKey);
            throw err;
          });
        }
        return result;
      }
      clear(prefix) {
        const prefixKey = [...__privateGet2(this, _prefix), ...prefix ?? []].join(":");
        if (!prefixKey) {
          __privateGet2(this, _cache).clear();
          return;
        }
        for (const key of __privateGet2(this, _cache).keys()) {
          if (key.startsWith(prefixKey)) {
            __privateGet2(this, _cache).delete(key);
          }
        }
      }
      scope(prefix) {
        return new _ClientCache2({
          prefix: [...__privateGet2(this, _prefix), ...Array.isArray(prefix) ? prefix : [prefix]],
          cache: __privateGet2(this, _cache)
        });
      }
    };
    _prefix = /* @__PURE__ */ new WeakMap();
    _cache = /* @__PURE__ */ new WeakMap();
    var ClientCache = _ClientCache;
  }
});

// node_modules/@mysten/sui/dist/cjs/experimental/client.js
var require_client2 = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/experimental/client.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var client_exports = {};
    __export2(client_exports, {
      Experimental_BaseClient: () => Experimental_BaseClient
    });
    module2.exports = __toCommonJS2(client_exports);
    var import_cache = require_cache();
    var Experimental_BaseClient = class {
      constructor({ network }) {
        this.cache = new import_cache.ClientCache();
        this.network = network;
      }
      $extend(...registrations) {
        return Object.create(
          this,
          Object.fromEntries(
            registrations.map((registration) => {
              if ("experimental_asClientExtension" in registration) {
                const { name, register } = registration.experimental_asClientExtension();
                return [name, { value: register(this) }];
              }
              return [registration.name, { value: registration.register(this) }];
            })
          )
        );
      }
    };
  }
});

// node_modules/@mysten/sui/dist/cjs/transactions/plugins/utils.js
var require_utils5 = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/transactions/plugins/utils.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var utils_exports = {};
    __export2(utils_exports, {
      batch: () => batch,
      findNamesInTransaction: () => findNamesInTransaction,
      getFirstLevelNamedTypes: () => getFirstLevelNamedTypes,
      populateNamedTypesFromCache: () => populateNamedTypesFromCache,
      replaceNames: () => replaceNames
    });
    module2.exports = __toCommonJS2(utils_exports);
    var import_move_registry = require_move_registry();
    var import_sui_types = require_sui_types();
    var NAME_SEPARATOR = "/";
    function findNamesInTransaction(builder) {
      var _a;
      const packages = /* @__PURE__ */ new Set();
      const types = /* @__PURE__ */ new Set();
      for (const command of builder.commands) {
        if ((_a = command.MakeMoveVec) == null ? void 0 : _a.type) {
          getNamesFromTypeList([command.MakeMoveVec.type]).forEach((type2) => {
            types.add(type2);
          });
          continue;
        }
        if (!("MoveCall" in command)) continue;
        const tx = command.MoveCall;
        if (!tx) continue;
        const pkg = tx.package.split("::")[0];
        if (hasMvrName(pkg)) {
          if (!(0, import_move_registry.isValidNamedPackage)(pkg)) throw new Error(`Invalid package name: ${pkg}`);
          packages.add(pkg);
        }
        getNamesFromTypeList(tx.typeArguments ?? []).forEach((type2) => {
          types.add(type2);
        });
      }
      return {
        packages: [...packages],
        types: [...types]
      };
    }
    function getFirstLevelNamedTypes(types) {
      const results = /* @__PURE__ */ new Set();
      for (const type2 of types) {
        findMvrNames(type2).forEach((name) => results.add(name));
      }
      return results;
    }
    function findMvrNames(type2) {
      const types = /* @__PURE__ */ new Set();
      if (typeof type2 === "string" && !hasMvrName(type2)) return types;
      const tag = isStructTag(type2) ? type2 : (0, import_sui_types.parseStructTag)(type2);
      if (hasMvrName(tag.address)) types.add(`${tag.address}::${tag.module}::${tag.name}`);
      for (const param of tag.typeParams) {
        findMvrNames(param).forEach((name) => types.add(name));
      }
      return types;
    }
    function populateNamedTypesFromCache(types, typeCache) {
      const composedTypes = {};
      types.forEach((type2) => {
        const normalized = (0, import_sui_types.normalizeStructTag)(findAndReplaceCachedTypes(type2, typeCache));
        composedTypes[type2] = normalized;
      });
      return composedTypes;
    }
    function findAndReplaceCachedTypes(tag, typeCache) {
      const type2 = isStructTag(tag) ? tag : (0, import_sui_types.parseStructTag)(tag);
      const typeTag = `${type2.address}::${type2.module}::${type2.name}`;
      const cacheHit = typeCache[typeTag];
      return {
        ...type2,
        address: cacheHit ? cacheHit.split("::")[0] : type2.address,
        typeParams: type2.typeParams.map((param) => findAndReplaceCachedTypes(param, typeCache))
      };
    }
    function replaceNames(builder, cache) {
      var _a;
      for (const command of builder.commands) {
        if ((_a = command.MakeMoveVec) == null ? void 0 : _a.type) {
          if (!hasMvrName(command.MakeMoveVec.type)) continue;
          if (!cache.types[command.MakeMoveVec.type])
            throw new Error(`No resolution found for type: ${command.MakeMoveVec.type}`);
          command.MakeMoveVec.type = cache.types[command.MakeMoveVec.type];
        }
        const tx = command.MoveCall;
        if (!tx) continue;
        const nameParts = tx.package.split("::");
        const name = nameParts[0];
        if (hasMvrName(name) && !cache.packages[name])
          throw new Error(`No address found for package: ${name}`);
        if (hasMvrName(name)) {
          nameParts[0] = cache.packages[name];
          tx.package = nameParts.join("::");
        }
        const types = tx.typeArguments;
        if (!types) continue;
        for (let i = 0; i < types.length; i++) {
          if (!hasMvrName(types[i])) continue;
          if (!cache.types[types[i]]) throw new Error(`No resolution found for type: ${types[i]}`);
          types[i] = cache.types[types[i]];
        }
        tx.typeArguments = types;
      }
    }
    function batch(arr, size) {
      const batches = [];
      for (let i = 0; i < arr.length; i += size) {
        batches.push(arr.slice(i, i + size));
      }
      return batches;
    }
    function getNamesFromTypeList(types) {
      const names = /* @__PURE__ */ new Set();
      for (const type2 of types) {
        if (hasMvrName(type2)) {
          if (!(0, import_move_registry.isValidNamedType)(type2)) throw new Error(`Invalid type with names: ${type2}`);
          names.add(type2);
        }
      }
      return names;
    }
    function hasMvrName(nameOrType) {
      return nameOrType.includes(NAME_SEPARATOR) || nameOrType.includes("@") || nameOrType.includes(".sui");
    }
    function isStructTag(type2) {
      return typeof type2 === "object" && "address" in type2 && "module" in type2 && "name" in type2 && "typeParams" in type2;
    }
  }
});

// node_modules/valibot/dist/index.cjs
var require_dist = __commonJS({
  "node_modules/valibot/dist/index.cjs"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var src_exports = {};
    __export2(src_exports, {
      BIC_REGEX: () => BIC_REGEX,
      CUID2_REGEX: () => CUID2_REGEX,
      DECIMAL_REGEX: () => DECIMAL_REGEX,
      EMAIL_REGEX: () => EMAIL_REGEX,
      EMOJI_REGEX: () => EMOJI_REGEX,
      HEXADECIMAL_REGEX: () => HEXADECIMAL_REGEX,
      HEX_COLOR_REGEX: () => HEX_COLOR_REGEX,
      IMEI_REGEX: () => IMEI_REGEX,
      IPV4_REGEX: () => IPV4_REGEX,
      IPV6_REGEX: () => IPV6_REGEX,
      IP_REGEX: () => IP_REGEX,
      ISO_DATE_REGEX: () => ISO_DATE_REGEX,
      ISO_DATE_TIME_REGEX: () => ISO_DATE_TIME_REGEX,
      ISO_TIMESTAMP_REGEX: () => ISO_TIMESTAMP_REGEX,
      ISO_TIME_REGEX: () => ISO_TIME_REGEX,
      ISO_TIME_SECOND_REGEX: () => ISO_TIME_SECOND_REGEX,
      ISO_WEEK_REGEX: () => ISO_WEEK_REGEX,
      MAC48_REGEX: () => MAC48_REGEX,
      MAC64_REGEX: () => MAC64_REGEX,
      MAC_REGEX: () => MAC_REGEX,
      OCTAL_REGEX: () => OCTAL_REGEX,
      ULID_REGEX: () => ULID_REGEX,
      UUID_REGEX: () => UUID_REGEX,
      ValiError: () => ValiError,
      _addIssue: () => _addIssue,
      _isLuhnAlgo: () => _isLuhnAlgo,
      _isValidObjectKey: () => _isValidObjectKey,
      _stringify: () => _stringify,
      any: () => any2,
      array: () => array2,
      arrayAsync: () => arrayAsync,
      awaitAsync: () => awaitAsync,
      bic: () => bic,
      bigint: () => bigint,
      blob: () => blob3,
      boolean: () => boolean2,
      brand: () => brand,
      bytes: () => bytes,
      check: () => check,
      checkAsync: () => checkAsync,
      checkItems: () => checkItems,
      config: () => config,
      creditCard: () => creditCard,
      cuid2: () => cuid2,
      custom: () => custom,
      customAsync: () => customAsync,
      date: () => date,
      decimal: () => decimal,
      deleteGlobalConfig: () => deleteGlobalConfig,
      deleteGlobalMessage: () => deleteGlobalMessage,
      deleteSchemaMessage: () => deleteSchemaMessage,
      deleteSpecificMessage: () => deleteSpecificMessage,
      email: () => email,
      emoji: () => emoji,
      empty: () => empty,
      endsWith: () => endsWith,
      entriesFromList: () => entriesFromList,
      enum: () => enum_,
      enum_: () => enum_,
      everyItem: () => everyItem,
      excludes: () => excludes,
      fallback: () => fallback,
      fallbackAsync: () => fallbackAsync,
      file: () => file,
      filterItems: () => filterItems,
      findItem: () => findItem,
      finite: () => finite,
      flatten: () => flatten,
      forward: () => forward,
      forwardAsync: () => forwardAsync,
      function: () => function_,
      function_: () => function_,
      getDefault: () => getDefault,
      getDefaults: () => getDefaults,
      getDefaultsAsync: () => getDefaultsAsync,
      getDotPath: () => getDotPath,
      getFallback: () => getFallback,
      getFallbacks: () => getFallbacks,
      getFallbacksAsync: () => getFallbacksAsync,
      getGlobalConfig: () => getGlobalConfig,
      getGlobalMessage: () => getGlobalMessage,
      getSchemaMessage: () => getSchemaMessage,
      getSpecificMessage: () => getSpecificMessage,
      hash: () => hash,
      hexColor: () => hexColor,
      hexadecimal: () => hexadecimal,
      imei: () => imei,
      includes: () => includes,
      instance: () => instance2,
      integer: () => integer,
      intersect: () => intersect,
      intersectAsync: () => intersectAsync,
      ip: () => ip,
      ipv4: () => ipv4,
      ipv6: () => ipv6,
      is: () => is2,
      isOfKind: () => isOfKind,
      isOfType: () => isOfType,
      isValiError: () => isValiError,
      isoDate: () => isoDate,
      isoDateTime: () => isoDateTime,
      isoTime: () => isoTime,
      isoTimeSecond: () => isoTimeSecond,
      isoTimestamp: () => isoTimestamp,
      isoWeek: () => isoWeek,
      keyof: () => keyof,
      lazy: () => lazy,
      lazyAsync: () => lazyAsync,
      length: () => length,
      literal: () => literal2,
      looseObject: () => looseObject,
      looseObjectAsync: () => looseObjectAsync,
      looseTuple: () => looseTuple,
      looseTupleAsync: () => looseTupleAsync,
      mac: () => mac,
      mac48: () => mac48,
      mac64: () => mac64,
      map: () => map,
      mapAsync: () => mapAsync,
      mapItems: () => mapItems,
      maxBytes: () => maxBytes,
      maxLength: () => maxLength,
      maxSize: () => maxSize,
      maxValue: () => maxValue,
      mimeType: () => mimeType,
      minBytes: () => minBytes,
      minLength: () => minLength,
      minSize: () => minSize,
      minValue: () => minValue,
      multipleOf: () => multipleOf,
      nan: () => nan,
      never: () => never2,
      nonEmpty: () => nonEmpty,
      nonNullable: () => nonNullable,
      nonNullableAsync: () => nonNullableAsync,
      nonNullish: () => nonNullish,
      nonNullishAsync: () => nonNullishAsync,
      nonOptional: () => nonOptional,
      nonOptionalAsync: () => nonOptionalAsync,
      normalize: () => normalize,
      notBytes: () => notBytes,
      notLength: () => notLength,
      notSize: () => notSize,
      notValue: () => notValue,
      null: () => null_,
      null_: () => null_,
      nullable: () => nullable2,
      nullableAsync: () => nullableAsync,
      nullish: () => nullish,
      nullishAsync: () => nullishAsync,
      number: () => number2,
      object: () => object,
      objectAsync: () => objectAsync,
      objectWithRest: () => objectWithRest,
      objectWithRestAsync: () => objectWithRestAsync,
      octal: () => octal,
      omit: () => omit,
      optional: () => optional2,
      optionalAsync: () => optionalAsync,
      parse: () => parse2,
      parseAsync: () => parseAsync,
      parser: () => parser,
      parserAsync: () => parserAsync,
      partial: () => partial,
      partialAsync: () => partialAsync,
      partialCheck: () => partialCheck,
      partialCheckAsync: () => partialCheckAsync,
      pick: () => pick,
      picklist: () => picklist,
      pipe: () => pipe,
      pipeAsync: () => pipeAsync,
      promise: () => promise,
      rawCheck: () => rawCheck,
      rawCheckAsync: () => rawCheckAsync,
      rawTransform: () => rawTransform,
      rawTransformAsync: () => rawTransformAsync,
      readonly: () => readonly,
      record: () => record2,
      recordAsync: () => recordAsync,
      reduceItems: () => reduceItems,
      regex: () => regex,
      required: () => required,
      requiredAsync: () => requiredAsync,
      safeInteger: () => safeInteger,
      safeParse: () => safeParse,
      safeParseAsync: () => safeParseAsync,
      safeParser: () => safeParser,
      safeParserAsync: () => safeParserAsync,
      set: () => set,
      setAsync: () => setAsync,
      setGlobalConfig: () => setGlobalConfig,
      setGlobalMessage: () => setGlobalMessage,
      setSchemaMessage: () => setSchemaMessage,
      setSpecificMessage: () => setSpecificMessage,
      size: () => size,
      someItem: () => someItem,
      sortItems: () => sortItems,
      startsWith: () => startsWith,
      strictObject: () => strictObject,
      strictObjectAsync: () => strictObjectAsync,
      strictTuple: () => strictTuple,
      strictTupleAsync: () => strictTupleAsync,
      string: () => string2,
      symbol: () => symbol,
      toLowerCase: () => toLowerCase,
      toMaxValue: () => toMaxValue,
      toMinValue: () => toMinValue,
      toUpperCase: () => toUpperCase,
      transform: () => transform,
      transformAsync: () => transformAsync,
      trim: () => trim,
      trimEnd: () => trimEnd,
      trimStart: () => trimStart,
      tuple: () => tuple2,
      tupleAsync: () => tupleAsync,
      tupleWithRest: () => tupleWithRest,
      tupleWithRestAsync: () => tupleWithRestAsync,
      ulid: () => ulid,
      undefined: () => undefined_,
      undefined_: () => undefined_,
      union: () => union2,
      unionAsync: () => unionAsync,
      unknown: () => unknown2,
      unwrap: () => unwrap,
      url: () => url,
      uuid: () => uuid,
      value: () => value,
      variant: () => variant,
      variantAsync: () => variantAsync,
      void: () => void_,
      void_: () => void_
    });
    module2.exports = __toCommonJS2(src_exports);
    function awaitAsync() {
      return {
        kind: "transformation",
        type: "await",
        reference: awaitAsync,
        async: true,
        async _run(dataset) {
          dataset.value = await dataset.value;
          return dataset;
        }
      };
    }
    var BIC_REGEX = /^[A-Z]{6}(?!00)[A-Z\d]{2}(?:[A-Z\d]{3})?$/u;
    var CUID2_REGEX = /^[a-z][\da-z]*$/u;
    var DECIMAL_REGEX = /^\d+$/u;
    var EMAIL_REGEX = /^[\w+-]+(?:\.[\w+-]+)*@[\da-z]+(?:[.-][\da-z]+)*\.[a-z]{2,}$/iu;
    var EMOJI_REGEX = /^[\p{Extended_Pictographic}\p{Emoji_Component}]+$/u;
    var HEXADECIMAL_REGEX = /^(?:0h|0x)?[\da-f]+$/iu;
    var HEX_COLOR_REGEX = /^#(?:[\da-f]{3,4}|[\da-f]{6}|[\da-f]{8})$/iu;
    var IMEI_REGEX = /^\d{15}$|^\d{2}-\d{6}-\d{6}-\d$/u;
    var IPV4_REGEX = (
      // eslint-disable-next-line redos-detector/no-unsafe-regex -- false positive
      /^(?:(?:[1-9]|1\d|2[0-4])?\d|25[0-5])(?:\.(?:(?:[1-9]|1\d|2[0-4])?\d|25[0-5])){3}$/u
    );
    var IPV6_REGEX = /^(?:(?:[\da-f]{1,4}:){7}[\da-f]{1,4}|(?:[\da-f]{1,4}:){1,7}:|(?:[\da-f]{1,4}:){1,6}:[\da-f]{1,4}|(?:[\da-f]{1,4}:){1,5}(?::[\da-f]{1,4}){1,2}|(?:[\da-f]{1,4}:){1,4}(?::[\da-f]{1,4}){1,3}|(?:[\da-f]{1,4}:){1,3}(?::[\da-f]{1,4}){1,4}|(?:[\da-f]{1,4}:){1,2}(?::[\da-f]{1,4}){1,5}|[\da-f]{1,4}:(?::[\da-f]{1,4}){1,6}|:(?:(?::[\da-f]{1,4}){1,7}|:)|fe80:(?::[\da-f]{0,4}){0,4}%[\da-z]+|::(?:f{4}(?::0{1,4})?:)?(?:(?:25[0-5]|(?:2[0-4]|1?\d)?\d)\.){3}(?:25[0-5]|(?:2[0-4]|1?\d)?\d)|(?:[\da-f]{1,4}:){1,4}:(?:(?:25[0-5]|(?:2[0-4]|1?\d)?\d)\.){3}(?:25[0-5]|(?:2[0-4]|1?\d)?\d))$/iu;
    var IP_REGEX = /^(?:(?:[1-9]|1\d|2[0-4])?\d|25[0-5])(?:\.(?:(?:[1-9]|1\d|2[0-4])?\d|25[0-5])){3}$|^(?:(?:[\da-f]{1,4}:){7}[\da-f]{1,4}|(?:[\da-f]{1,4}:){1,7}:|(?:[\da-f]{1,4}:){1,6}:[\da-f]{1,4}|(?:[\da-f]{1,4}:){1,5}(?::[\da-f]{1,4}){1,2}|(?:[\da-f]{1,4}:){1,4}(?::[\da-f]{1,4}){1,3}|(?:[\da-f]{1,4}:){1,3}(?::[\da-f]{1,4}){1,4}|(?:[\da-f]{1,4}:){1,2}(?::[\da-f]{1,4}){1,5}|[\da-f]{1,4}:(?::[\da-f]{1,4}){1,6}|:(?:(?::[\da-f]{1,4}){1,7}|:)|fe80:(?::[\da-f]{0,4}){0,4}%[\da-z]+|::(?:f{4}(?::0{1,4})?:)?(?:(?:25[0-5]|(?:2[0-4]|1?\d)?\d)\.){3}(?:25[0-5]|(?:2[0-4]|1?\d)?\d)|(?:[\da-f]{1,4}:){1,4}:(?:(?:25[0-5]|(?:2[0-4]|1?\d)?\d)\.){3}(?:25[0-5]|(?:2[0-4]|1?\d)?\d))$/iu;
    var ISO_DATE_REGEX = /^\d{4}-(?:0[1-9]|1[0-2])-(?:[12]\d|0[1-9]|3[01])$/u;
    var ISO_DATE_TIME_REGEX = /^\d{4}-(?:0[1-9]|1[0-2])-(?:[12]\d|0[1-9]|3[01])T(?:0\d|1\d|2[0-3]):[0-5]\d$/u;
    var ISO_TIME_REGEX = /^(?:0\d|1\d|2[0-3]):[0-5]\d$/u;
    var ISO_TIME_SECOND_REGEX = /^(?:0\d|1\d|2[0-3])(?::[0-5]\d){2}$/u;
    var ISO_TIMESTAMP_REGEX = /^\d{4}-(?:0[1-9]|1[0-2])-(?:[12]\d|0[1-9]|3[01])T(?:0\d|1\d|2[0-3])(?::[0-5]\d){2}(?:\.\d{1,9})?(?:Z|[+-](?:0\d|1\d|2[0-3])(?::?[0-5]\d)?)$/u;
    var ISO_WEEK_REGEX = /^\d{4}-W(?:0[1-9]|[1-4]\d|5[0-3])$/u;
    var MAC48_REGEX = /^(?:[\da-f]{2}:){5}[\da-f]{2}$|^(?:[\da-f]{2}-){5}[\da-f]{2}$|^(?:[\da-f]{4}\.){2}[\da-f]{4}$/iu;
    var MAC64_REGEX = /^(?:[\da-f]{2}:){7}[\da-f]{2}$|^(?:[\da-f]{2}-){7}[\da-f]{2}$|^(?:[\da-f]{4}\.){3}[\da-f]{4}$|^(?:[\da-f]{4}:){3}[\da-f]{4}$/iu;
    var MAC_REGEX = /^(?:[\da-f]{2}:){5}[\da-f]{2}$|^(?:[\da-f]{2}-){5}[\da-f]{2}$|^(?:[\da-f]{4}\.){2}[\da-f]{4}$|^(?:[\da-f]{2}:){7}[\da-f]{2}$|^(?:[\da-f]{2}-){7}[\da-f]{2}$|^(?:[\da-f]{4}\.){3}[\da-f]{4}$|^(?:[\da-f]{4}:){3}[\da-f]{4}$/iu;
    var OCTAL_REGEX = /^(?:0o)?[0-7]+$/iu;
    var ULID_REGEX = /^[\da-hjkmnp-tv-z]{26}$/iu;
    var UUID_REGEX = /^[\da-f]{8}(?:-[\da-f]{4}){3}-[\da-f]{12}$/iu;
    var store;
    function setGlobalConfig(config2) {
      store = { ...store, ...config2 };
    }
    function getGlobalConfig(config2) {
      return {
        lang: (config2 == null ? void 0 : config2.lang) ?? (store == null ? void 0 : store.lang),
        message: config2 == null ? void 0 : config2.message,
        abortEarly: (config2 == null ? void 0 : config2.abortEarly) ?? (store == null ? void 0 : store.abortEarly),
        abortPipeEarly: (config2 == null ? void 0 : config2.abortPipeEarly) ?? (store == null ? void 0 : store.abortPipeEarly)
      };
    }
    function deleteGlobalConfig() {
      store = void 0;
    }
    var store2;
    function setGlobalMessage(message, lang) {
      if (!store2) store2 = /* @__PURE__ */ new Map();
      store2.set(lang, message);
    }
    function getGlobalMessage(lang) {
      return store2 == null ? void 0 : store2.get(lang);
    }
    function deleteGlobalMessage(lang) {
      store2 == null ? void 0 : store2.delete(lang);
    }
    var store3;
    function setSchemaMessage(message, lang) {
      if (!store3) store3 = /* @__PURE__ */ new Map();
      store3.set(lang, message);
    }
    function getSchemaMessage(lang) {
      return store3 == null ? void 0 : store3.get(lang);
    }
    function deleteSchemaMessage(lang) {
      store3 == null ? void 0 : store3.delete(lang);
    }
    var store4;
    function setSpecificMessage(reference, message, lang) {
      if (!store4) store4 = /* @__PURE__ */ new Map();
      if (!store4.get(reference)) store4.set(reference, /* @__PURE__ */ new Map());
      store4.get(reference).set(lang, message);
    }
    function getSpecificMessage(reference, lang) {
      var _a;
      return (_a = store4 == null ? void 0 : store4.get(reference)) == null ? void 0 : _a.get(lang);
    }
    function deleteSpecificMessage(reference, lang) {
      var _a;
      (_a = store4 == null ? void 0 : store4.get(reference)) == null ? void 0 : _a.delete(lang);
    }
    function _stringify(input) {
      var _a, _b;
      const type2 = typeof input;
      if (type2 === "string") {
        return `"${input}"`;
      }
      if (type2 === "number" || type2 === "bigint" || type2 === "boolean") {
        return `${input}`;
      }
      if (type2 === "object" || type2 === "function") {
        return (input && ((_b = (_a = Object.getPrototypeOf(input)) == null ? void 0 : _a.constructor) == null ? void 0 : _b.name)) ?? "null";
      }
      return type2;
    }
    function _addIssue(context, label, dataset, config2, other) {
      const input = other && "input" in other ? other.input : dataset.value;
      const expected = (other == null ? void 0 : other.expected) ?? context.expects ?? null;
      const received = (other == null ? void 0 : other.received) ?? _stringify(input);
      const issue = {
        kind: context.kind,
        type: context.type,
        input,
        expected,
        received,
        message: `Invalid ${label}: ${expected ? `Expected ${expected} but r` : "R"}eceived ${received}`,
        // @ts-expect-error
        requirement: context.requirement,
        path: other == null ? void 0 : other.path,
        issues: other == null ? void 0 : other.issues,
        lang: config2.lang,
        abortEarly: config2.abortEarly,
        abortPipeEarly: config2.abortPipeEarly
      };
      const isSchema = context.kind === "schema";
      const message = (other == null ? void 0 : other.message) ?? // @ts-expect-error
      context.message ?? getSpecificMessage(context.reference, issue.lang) ?? (isSchema ? getSchemaMessage(issue.lang) : null) ?? config2.message ?? getGlobalMessage(issue.lang);
      if (message) {
        issue.message = typeof message === "function" ? message(issue) : message;
      }
      if (isSchema) {
        dataset.typed = false;
      }
      if (dataset.issues) {
        dataset.issues.push(issue);
      } else {
        dataset.issues = [issue];
      }
    }
    var NON_DIGIT_REGEX = /\D/gu;
    function _isLuhnAlgo(input) {
      const number22 = input.replace(NON_DIGIT_REGEX, "");
      let length2 = number22.length;
      let bit = 1;
      let sum = 0;
      while (length2) {
        const value2 = +number22[--length2];
        bit ^= 1;
        sum += bit ? [0, 2, 4, 6, 8, 1, 3, 5, 7, 9][value2] : value2;
      }
      return sum % 10 === 0;
    }
    function _isValidObjectKey(object2, key) {
      return Object.hasOwn(object2, key) && key !== "__proto__" && key !== "prototype" && key !== "constructor";
    }
    function entriesFromList(list, schema) {
      const entries = {};
      for (const key of list) {
        entries[key] = schema;
      }
      return entries;
    }
    function getDotPath(issue) {
      if (issue.path) {
        let key = "";
        for (const item of issue.path) {
          if (typeof item.key === "string" || typeof item.key === "number") {
            if (key) {
              key += `.${item.key}`;
            } else {
              key += item.key;
            }
          } else {
            return null;
          }
        }
        return key;
      }
      return null;
    }
    function isOfKind(kind, object2) {
      return object2.kind === kind;
    }
    function isOfType(type2, object2) {
      return object2.type === type2;
    }
    function isValiError(error) {
      return error instanceof ValiError;
    }
    var ValiError = class extends Error {
      /**
       * Creates a Valibot error with useful information.
       *
       * @param issues The error issues.
       */
      constructor(issues) {
        super(issues[0].message);
        /**
         * The error issues.
         */
        __publicField(this, "issues");
        this.name = "ValiError";
        this.issues = issues;
      }
    };
    function bic(message) {
      return {
        kind: "validation",
        type: "bic",
        reference: bic,
        async: false,
        expects: null,
        requirement: BIC_REGEX,
        message,
        _run(dataset, config2) {
          if (dataset.typed && !this.requirement.test(dataset.value)) {
            _addIssue(this, "BIC", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function brand(name) {
      return {
        kind: "transformation",
        type: "brand",
        reference: brand,
        async: false,
        name,
        _run(dataset) {
          return dataset;
        }
      };
    }
    function bytes(requirement, message) {
      return {
        kind: "validation",
        type: "bytes",
        reference: bytes,
        async: false,
        expects: `${requirement}`,
        requirement,
        message,
        _run(dataset, config2) {
          if (dataset.typed) {
            const length2 = new TextEncoder().encode(dataset.value).length;
            if (length2 !== this.requirement) {
              _addIssue(this, "bytes", dataset, config2, {
                received: `${length2}`
              });
            }
          }
          return dataset;
        }
      };
    }
    function check(requirement, message) {
      return {
        kind: "validation",
        type: "check",
        reference: check,
        async: false,
        expects: null,
        requirement,
        message,
        _run(dataset, config2) {
          if (dataset.typed && !this.requirement(dataset.value)) {
            _addIssue(this, "input", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function checkAsync(requirement, message) {
      return {
        kind: "validation",
        type: "check",
        reference: checkAsync,
        async: true,
        expects: null,
        requirement,
        message,
        async _run(dataset, config2) {
          if (dataset.typed && !await this.requirement(dataset.value)) {
            _addIssue(this, "input", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function checkItems(requirement, message) {
      return {
        kind: "validation",
        type: "check_items",
        reference: checkItems,
        async: false,
        expects: null,
        requirement,
        message,
        _run(dataset, config2) {
          if (dataset.typed) {
            for (let index = 0; index < dataset.value.length; index++) {
              const item = dataset.value[index];
              if (!this.requirement(item, index, dataset.value)) {
                _addIssue(this, "item", dataset, config2, {
                  input: item,
                  path: [
                    {
                      type: "array",
                      origin: "value",
                      input: dataset.value,
                      key: index,
                      value: item
                    }
                  ]
                });
              }
            }
          }
          return dataset;
        }
      };
    }
    var CREDIT_CARD_REGEX = /^(?:\d{14,19}|\d{4}(?: \d{3,6}){2,4}|\d{4}(?:-\d{3,6}){2,4})$/u;
    var SANITIZE_REGEX = /[- ]/gu;
    var PROVIDER_REGEX_LIST = [
      // American Express
      /^3[47]\d{13}$/u,
      // Diners Club
      /^3(?:0[0-5]|[68]\d)\d{11,13}$/u,
      // Discover
      /^6(?:011|5\d{2})\d{12,15}$/u,
      // JCB
      /^(?:2131|1800|35\d{3})\d{11}$/u,
      // Mastercard
      /^5[1-5]\d{2}|(?:222\d|22[3-9]\d|2[3-6]\d{2}|27[01]\d|2720)\d{12}$/u,
      // UnionPay
      /^(?:6[27]\d{14,17}|81\d{14,17})$/u,
      // Visa
      /^4\d{12}(?:\d{3,6})?$/u
    ];
    function creditCard(message) {
      return {
        kind: "validation",
        type: "credit_card",
        reference: creditCard,
        async: false,
        expects: null,
        requirement(input) {
          let sanitized;
          return CREDIT_CARD_REGEX.test(input) && // Remove any hyphens and blanks
          (sanitized = input.replace(SANITIZE_REGEX, "")) && // Check if it matches a provider
          PROVIDER_REGEX_LIST.some((regex2) => regex2.test(sanitized)) && // Check if passes luhn algorithm
          _isLuhnAlgo(sanitized);
        },
        message,
        _run(dataset, config2) {
          if (dataset.typed && !this.requirement(dataset.value)) {
            _addIssue(this, "credit card", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function cuid2(message) {
      return {
        kind: "validation",
        type: "cuid2",
        reference: cuid2,
        async: false,
        expects: null,
        requirement: CUID2_REGEX,
        message,
        _run(dataset, config2) {
          if (dataset.typed && !this.requirement.test(dataset.value)) {
            _addIssue(this, "Cuid2", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function decimal(message) {
      return {
        kind: "validation",
        type: "decimal",
        reference: decimal,
        async: false,
        expects: null,
        requirement: DECIMAL_REGEX,
        message,
        _run(dataset, config2) {
          if (dataset.typed && !this.requirement.test(dataset.value)) {
            _addIssue(this, "decimal", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function email(message) {
      return {
        kind: "validation",
        type: "email",
        reference: email,
        expects: null,
        async: false,
        requirement: EMAIL_REGEX,
        message,
        _run(dataset, config2) {
          if (dataset.typed && !this.requirement.test(dataset.value)) {
            _addIssue(this, "email", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function emoji(message) {
      return {
        kind: "validation",
        type: "emoji",
        reference: emoji,
        async: false,
        expects: null,
        requirement: EMOJI_REGEX,
        message,
        _run(dataset, config2) {
          if (dataset.typed && !this.requirement.test(dataset.value)) {
            _addIssue(this, "emoji", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function empty(message) {
      return {
        kind: "validation",
        type: "empty",
        reference: empty,
        async: false,
        expects: "0",
        message,
        _run(dataset, config2) {
          if (dataset.typed && dataset.value.length > 0) {
            _addIssue(this, "length", dataset, config2, {
              received: `${dataset.value.length}`
            });
          }
          return dataset;
        }
      };
    }
    function endsWith(requirement, message) {
      return {
        kind: "validation",
        type: "ends_with",
        reference: endsWith,
        async: false,
        expects: `"${requirement}"`,
        requirement,
        message,
        _run(dataset, config2) {
          if (dataset.typed && !dataset.value.endsWith(this.requirement)) {
            _addIssue(this, "end", dataset, config2, {
              received: `"${dataset.value.slice(-this.requirement.length)}"`
            });
          }
          return dataset;
        }
      };
    }
    function everyItem(requirement, message) {
      return {
        kind: "validation",
        type: "every_item",
        reference: everyItem,
        async: false,
        expects: null,
        requirement,
        message,
        _run(dataset, config2) {
          if (dataset.typed && !dataset.value.every(this.requirement)) {
            _addIssue(this, "item", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function excludes(requirement, message) {
      const received = _stringify(requirement);
      return {
        kind: "validation",
        type: "excludes",
        reference: excludes,
        async: false,
        expects: `!${received}`,
        requirement,
        message,
        _run(dataset, config2) {
          if (dataset.typed && dataset.value.includes(this.requirement)) {
            _addIssue(this, "content", dataset, config2, { received });
          }
          return dataset;
        }
      };
    }
    function filterItems(operation) {
      return {
        kind: "transformation",
        type: "filter_items",
        reference: filterItems,
        async: false,
        operation,
        _run(dataset) {
          dataset.value = dataset.value.filter(this.operation);
          return dataset;
        }
      };
    }
    function findItem(operation) {
      return {
        kind: "transformation",
        type: "find_item",
        reference: findItem,
        async: false,
        operation,
        _run(dataset) {
          dataset.value = dataset.value.find(this.operation);
          return dataset;
        }
      };
    }
    function finite(message) {
      return {
        kind: "validation",
        type: "finite",
        reference: finite,
        async: false,
        expects: null,
        requirement: Number.isFinite,
        message,
        _run(dataset, config2) {
          if (dataset.typed && !this.requirement(dataset.value)) {
            _addIssue(this, "finite", dataset, config2);
          }
          return dataset;
        }
      };
    }
    var HASH_LENGTHS = {
      md4: 32,
      md5: 32,
      sha1: 40,
      sha256: 64,
      sha384: 96,
      sha512: 128,
      ripemd128: 32,
      ripemd160: 40,
      tiger128: 32,
      tiger160: 40,
      tiger192: 48,
      crc32: 8,
      crc32b: 8,
      adler32: 8
    };
    function hash(types, message) {
      return {
        kind: "validation",
        type: "hash",
        reference: hash,
        expects: null,
        async: false,
        requirement: RegExp(
          types.map((type2) => `^[a-f0-9]{${HASH_LENGTHS[type2]}}$`).join("|"),
          "iu"
        ),
        message,
        _run(dataset, config2) {
          if (dataset.typed && !this.requirement.test(dataset.value)) {
            _addIssue(this, "hash", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function hexadecimal(message) {
      return {
        kind: "validation",
        type: "hexadecimal",
        reference: hexadecimal,
        async: false,
        expects: null,
        requirement: HEXADECIMAL_REGEX,
        message,
        _run(dataset, config2) {
          if (dataset.typed && !this.requirement.test(dataset.value)) {
            _addIssue(this, "hexadecimal", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function hexColor(message) {
      return {
        kind: "validation",
        type: "hex_color",
        reference: hexColor,
        async: false,
        expects: null,
        requirement: HEX_COLOR_REGEX,
        message,
        _run(dataset, config2) {
          if (dataset.typed && !this.requirement.test(dataset.value)) {
            _addIssue(this, "hex color", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function imei(message) {
      return {
        kind: "validation",
        type: "imei",
        reference: imei,
        async: false,
        expects: null,
        requirement(input) {
          return IMEI_REGEX.test(input) && _isLuhnAlgo(input);
        },
        message,
        _run(dataset, config2) {
          if (dataset.typed && !this.requirement(dataset.value)) {
            _addIssue(this, "IMEI", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function includes(requirement, message) {
      const expects = _stringify(requirement);
      return {
        kind: "validation",
        type: "includes",
        reference: includes,
        async: false,
        expects,
        requirement,
        message,
        _run(dataset, config2) {
          if (dataset.typed && !dataset.value.includes(this.requirement)) {
            _addIssue(this, "content", dataset, config2, {
              received: `!${expects}`
            });
          }
          return dataset;
        }
      };
    }
    function integer(message) {
      return {
        kind: "validation",
        type: "integer",
        reference: integer,
        async: false,
        expects: null,
        requirement: Number.isInteger,
        message,
        _run(dataset, config2) {
          if (dataset.typed && !this.requirement(dataset.value)) {
            _addIssue(this, "integer", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function ip(message) {
      return {
        kind: "validation",
        type: "ip",
        reference: ip,
        async: false,
        expects: null,
        requirement: IP_REGEX,
        message,
        _run(dataset, config2) {
          if (dataset.typed && !this.requirement.test(dataset.value)) {
            _addIssue(this, "IP", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function ipv4(message) {
      return {
        kind: "validation",
        type: "ipv4",
        reference: ipv4,
        async: false,
        expects: null,
        requirement: IPV4_REGEX,
        message,
        _run(dataset, config2) {
          if (dataset.typed && !this.requirement.test(dataset.value)) {
            _addIssue(this, "IPv4", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function ipv6(message) {
      return {
        kind: "validation",
        type: "ipv6",
        reference: ipv6,
        async: false,
        expects: null,
        requirement: IPV6_REGEX,
        message,
        _run(dataset, config2) {
          if (dataset.typed && !this.requirement.test(dataset.value)) {
            _addIssue(this, "IPv6", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function isoDate(message) {
      return {
        kind: "validation",
        type: "iso_date",
        reference: isoDate,
        async: false,
        expects: null,
        requirement: ISO_DATE_REGEX,
        message,
        _run(dataset, config2) {
          if (dataset.typed && !this.requirement.test(dataset.value)) {
            _addIssue(this, "date", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function isoDateTime(message) {
      return {
        kind: "validation",
        type: "iso_date_time",
        reference: isoDateTime,
        async: false,
        expects: null,
        requirement: ISO_DATE_TIME_REGEX,
        message,
        _run(dataset, config2) {
          if (dataset.typed && !this.requirement.test(dataset.value)) {
            _addIssue(this, "date-time", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function isoTime(message) {
      return {
        kind: "validation",
        type: "iso_time",
        reference: isoTime,
        async: false,
        expects: null,
        requirement: ISO_TIME_REGEX,
        message,
        _run(dataset, config2) {
          if (dataset.typed && !this.requirement.test(dataset.value)) {
            _addIssue(this, "time", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function isoTimeSecond(message) {
      return {
        kind: "validation",
        type: "iso_time_second",
        reference: isoTimeSecond,
        async: false,
        expects: null,
        requirement: ISO_TIME_SECOND_REGEX,
        message,
        _run(dataset, config2) {
          if (dataset.typed && !this.requirement.test(dataset.value)) {
            _addIssue(this, "time-second", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function isoTimestamp(message) {
      return {
        kind: "validation",
        type: "iso_timestamp",
        reference: isoTimestamp,
        async: false,
        expects: null,
        requirement: ISO_TIMESTAMP_REGEX,
        message,
        _run(dataset, config2) {
          if (dataset.typed && !this.requirement.test(dataset.value)) {
            _addIssue(this, "timestamp", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function isoWeek(message) {
      return {
        kind: "validation",
        type: "iso_week",
        reference: isoWeek,
        async: false,
        expects: null,
        requirement: ISO_WEEK_REGEX,
        message,
        _run(dataset, config2) {
          if (dataset.typed && !this.requirement.test(dataset.value)) {
            _addIssue(this, "week", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function length(requirement, message) {
      return {
        kind: "validation",
        type: "length",
        reference: length,
        async: false,
        expects: `${requirement}`,
        requirement,
        message,
        _run(dataset, config2) {
          if (dataset.typed && dataset.value.length !== this.requirement) {
            _addIssue(this, "length", dataset, config2, {
              received: `${dataset.value.length}`
            });
          }
          return dataset;
        }
      };
    }
    function mac(message) {
      return {
        kind: "validation",
        type: "mac",
        reference: mac,
        async: false,
        expects: null,
        requirement: MAC_REGEX,
        message,
        _run(dataset, config2) {
          if (dataset.typed && !this.requirement.test(dataset.value)) {
            _addIssue(this, "MAC", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function mac48(message) {
      return {
        kind: "validation",
        type: "mac48",
        reference: mac48,
        async: false,
        expects: null,
        requirement: MAC48_REGEX,
        message,
        _run(dataset, config2) {
          if (dataset.typed && !this.requirement.test(dataset.value)) {
            _addIssue(this, "48-bit MAC", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function mac64(message) {
      return {
        kind: "validation",
        type: "mac64",
        reference: mac64,
        async: false,
        expects: null,
        requirement: MAC64_REGEX,
        message,
        _run(dataset, config2) {
          if (dataset.typed && !this.requirement.test(dataset.value)) {
            _addIssue(this, "64-bit MAC", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function mapItems(operation) {
      return {
        kind: "transformation",
        type: "map_items",
        reference: mapItems,
        async: false,
        operation,
        _run(dataset) {
          dataset.value = dataset.value.map(this.operation);
          return dataset;
        }
      };
    }
    function maxBytes(requirement, message) {
      return {
        kind: "validation",
        type: "max_bytes",
        reference: maxBytes,
        async: false,
        expects: `<=${requirement}`,
        requirement,
        message,
        _run(dataset, config2) {
          if (dataset.typed) {
            const length2 = new TextEncoder().encode(dataset.value).length;
            if (length2 > this.requirement) {
              _addIssue(this, "bytes", dataset, config2, {
                received: `${length2}`
              });
            }
          }
          return dataset;
        }
      };
    }
    function maxLength(requirement, message) {
      return {
        kind: "validation",
        type: "max_length",
        reference: maxLength,
        async: false,
        expects: `<=${requirement}`,
        requirement,
        message,
        _run(dataset, config2) {
          if (dataset.typed && dataset.value.length > this.requirement) {
            _addIssue(this, "length", dataset, config2, {
              received: `${dataset.value.length}`
            });
          }
          return dataset;
        }
      };
    }
    function maxSize(requirement, message) {
      return {
        kind: "validation",
        type: "max_size",
        reference: maxSize,
        async: false,
        expects: `<=${requirement}`,
        requirement,
        message,
        _run(dataset, config2) {
          if (dataset.typed && dataset.value.size > this.requirement) {
            _addIssue(this, "size", dataset, config2, {
              received: `${dataset.value.size}`
            });
          }
          return dataset;
        }
      };
    }
    function maxValue(requirement, message) {
      return {
        kind: "validation",
        type: "max_value",
        reference: maxValue,
        async: false,
        expects: `<=${requirement instanceof Date ? requirement.toJSON() : _stringify(requirement)}`,
        requirement,
        message,
        _run(dataset, config2) {
          if (dataset.typed && dataset.value > this.requirement) {
            _addIssue(this, "value", dataset, config2, {
              received: dataset.value instanceof Date ? dataset.value.toJSON() : _stringify(dataset.value)
            });
          }
          return dataset;
        }
      };
    }
    function mimeType(requirement, message) {
      return {
        kind: "validation",
        type: "mime_type",
        reference: mimeType,
        async: false,
        expects: requirement.map((option) => `"${option}"`).join(" | ") || "never",
        requirement,
        message,
        _run(dataset, config2) {
          if (dataset.typed && !this.requirement.includes(dataset.value.type)) {
            _addIssue(this, "MIME type", dataset, config2, {
              received: `"${dataset.value.type}"`
            });
          }
          return dataset;
        }
      };
    }
    function minBytes(requirement, message) {
      return {
        kind: "validation",
        type: "min_bytes",
        reference: minBytes,
        async: false,
        expects: `>=${requirement}`,
        requirement,
        message,
        _run(dataset, config2) {
          if (dataset.typed) {
            const length2 = new TextEncoder().encode(dataset.value).length;
            if (length2 < this.requirement) {
              _addIssue(this, "bytes", dataset, config2, {
                received: `${length2}`
              });
            }
          }
          return dataset;
        }
      };
    }
    function minLength(requirement, message) {
      return {
        kind: "validation",
        type: "min_length",
        reference: minLength,
        async: false,
        expects: `>=${requirement}`,
        requirement,
        message,
        _run(dataset, config2) {
          if (dataset.typed && dataset.value.length < this.requirement) {
            _addIssue(this, "length", dataset, config2, {
              received: `${dataset.value.length}`
            });
          }
          return dataset;
        }
      };
    }
    function minSize(requirement, message) {
      return {
        kind: "validation",
        type: "min_size",
        reference: minSize,
        async: false,
        expects: `>=${requirement}`,
        requirement,
        message,
        _run(dataset, config2) {
          if (dataset.typed && dataset.value.size < this.requirement) {
            _addIssue(this, "size", dataset, config2, {
              received: `${dataset.value.size}`
            });
          }
          return dataset;
        }
      };
    }
    function minValue(requirement, message) {
      return {
        kind: "validation",
        type: "min_value",
        reference: minValue,
        async: false,
        expects: `>=${requirement instanceof Date ? requirement.toJSON() : _stringify(requirement)}`,
        requirement,
        message,
        _run(dataset, config2) {
          if (dataset.typed && dataset.value < this.requirement) {
            _addIssue(this, "value", dataset, config2, {
              received: dataset.value instanceof Date ? dataset.value.toJSON() : _stringify(dataset.value)
            });
          }
          return dataset;
        }
      };
    }
    function multipleOf(requirement, message) {
      return {
        kind: "validation",
        type: "multiple_of",
        reference: multipleOf,
        async: false,
        expects: `%${requirement}`,
        requirement,
        message,
        _run(dataset, config2) {
          if (dataset.typed && dataset.value % this.requirement !== 0) {
            _addIssue(this, "multiple", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function nonEmpty(message) {
      return {
        kind: "validation",
        type: "non_empty",
        reference: nonEmpty,
        async: false,
        expects: "!0",
        message,
        _run(dataset, config2) {
          if (dataset.typed && dataset.value.length === 0) {
            _addIssue(this, "length", dataset, config2, {
              received: "0"
            });
          }
          return dataset;
        }
      };
    }
    function normalize(form) {
      return {
        kind: "transformation",
        type: "normalize",
        reference: normalize,
        async: false,
        form,
        _run(dataset) {
          dataset.value = dataset.value.normalize(this.form);
          return dataset;
        }
      };
    }
    function notBytes(requirement, message) {
      return {
        kind: "validation",
        type: "not_bytes",
        reference: notBytes,
        async: false,
        expects: `!${requirement}`,
        requirement,
        message,
        _run(dataset, config2) {
          if (dataset.typed) {
            const length2 = new TextEncoder().encode(dataset.value).length;
            if (length2 === this.requirement) {
              _addIssue(this, "bytes", dataset, config2, {
                received: `${length2}`
              });
            }
          }
          return dataset;
        }
      };
    }
    function notLength(requirement, message) {
      return {
        kind: "validation",
        type: "not_length",
        reference: notLength,
        async: false,
        expects: `!${requirement}`,
        requirement,
        message,
        _run(dataset, config2) {
          if (dataset.typed && dataset.value.length === this.requirement) {
            _addIssue(this, "length", dataset, config2, {
              received: `${dataset.value.length}`
            });
          }
          return dataset;
        }
      };
    }
    function notSize(requirement, message) {
      return {
        kind: "validation",
        type: "not_size",
        reference: notSize,
        async: false,
        expects: `!${requirement}`,
        requirement,
        message,
        _run(dataset, config2) {
          if (dataset.typed && dataset.value.size === this.requirement) {
            _addIssue(this, "size", dataset, config2, {
              received: `${dataset.value.size}`
            });
          }
          return dataset;
        }
      };
    }
    function notValue(requirement, message) {
      return {
        kind: "validation",
        type: "not_value",
        reference: notValue,
        async: false,
        expects: requirement instanceof Date ? `!${requirement.toJSON()}` : `!${_stringify(requirement)}`,
        requirement,
        message,
        _run(dataset, config2) {
          if (dataset.typed && this.requirement <= dataset.value && this.requirement >= dataset.value) {
            _addIssue(this, "value", dataset, config2, {
              received: dataset.value instanceof Date ? dataset.value.toJSON() : _stringify(dataset.value)
            });
          }
          return dataset;
        }
      };
    }
    function octal(message) {
      return {
        kind: "validation",
        type: "octal",
        reference: octal,
        async: false,
        expects: null,
        requirement: OCTAL_REGEX,
        message,
        _run(dataset, config2) {
          if (dataset.typed && !this.requirement.test(dataset.value)) {
            _addIssue(this, "octal", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function _isPartiallyTyped(dataset, pathList) {
      var _a;
      if (dataset.issues) {
        for (const path of pathList) {
          for (const issue of dataset.issues) {
            let typed = false;
            const bound = Math.min(path.length, ((_a = issue.path) == null ? void 0 : _a.length) ?? 0);
            for (let index = 0; index < bound; index++) {
              if (path[index] !== issue.path[index].key) {
                typed = true;
                break;
              }
            }
            if (!typed) {
              return false;
            }
          }
        }
      }
      return true;
    }
    function partialCheck(pathList, requirement, message) {
      return {
        kind: "validation",
        type: "partial_check",
        reference: partialCheck,
        async: false,
        expects: null,
        requirement,
        message,
        _run(dataset, config2) {
          if (_isPartiallyTyped(dataset, pathList) && // @ts-expect-error
          !this.requirement(dataset.value)) {
            _addIssue(this, "input", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function partialCheckAsync(pathList, requirement, message) {
      return {
        kind: "validation",
        type: "partial_check",
        reference: partialCheckAsync,
        async: true,
        expects: null,
        requirement,
        message,
        async _run(dataset, config2) {
          if (_isPartiallyTyped(dataset, pathList) && // @ts-expect-error
          !await this.requirement(dataset.value)) {
            _addIssue(this, "input", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function rawCheck(action) {
      return {
        kind: "validation",
        type: "raw_check",
        reference: rawCheck,
        async: false,
        expects: null,
        _run(dataset, config2) {
          action({
            dataset,
            config: config2,
            addIssue: (info) => _addIssue(this, (info == null ? void 0 : info.label) ?? "input", dataset, config2, info)
          });
          return dataset;
        }
      };
    }
    function rawCheckAsync(action) {
      return {
        kind: "validation",
        type: "raw_check",
        reference: rawCheckAsync,
        async: true,
        expects: null,
        async _run(dataset, config2) {
          await action({
            dataset,
            config: config2,
            addIssue: (info) => _addIssue(this, (info == null ? void 0 : info.label) ?? "input", dataset, config2, info)
          });
          return dataset;
        }
      };
    }
    function rawTransform(action) {
      return {
        kind: "transformation",
        type: "raw_transform",
        reference: rawTransform,
        async: false,
        _run(dataset, config2) {
          const output = action({
            dataset,
            config: config2,
            addIssue: (info) => _addIssue(this, (info == null ? void 0 : info.label) ?? "input", dataset, config2, info),
            NEVER: null
          });
          if (dataset.issues) {
            dataset.typed = false;
          } else {
            dataset.value = output;
          }
          return dataset;
        }
      };
    }
    function rawTransformAsync(action) {
      return {
        kind: "transformation",
        type: "raw_transform",
        reference: rawTransformAsync,
        async: true,
        async _run(dataset, config2) {
          const output = await action({
            dataset,
            config: config2,
            addIssue: (info) => _addIssue(this, (info == null ? void 0 : info.label) ?? "input", dataset, config2, info),
            NEVER: null
          });
          if (dataset.issues) {
            dataset.typed = false;
          } else {
            dataset.value = output;
          }
          return dataset;
        }
      };
    }
    function readonly() {
      return {
        kind: "transformation",
        type: "readonly",
        reference: readonly,
        async: false,
        _run(dataset) {
          return dataset;
        }
      };
    }
    function reduceItems(operation, initial) {
      return {
        kind: "transformation",
        type: "reduce_items",
        reference: reduceItems,
        async: false,
        operation,
        initial,
        _run(dataset) {
          dataset.value = dataset.value.reduce(this.operation, this.initial);
          return dataset;
        }
      };
    }
    function regex(requirement, message) {
      return {
        kind: "validation",
        type: "regex",
        reference: regex,
        async: false,
        expects: `${requirement}`,
        requirement,
        message,
        _run(dataset, config2) {
          if (dataset.typed && !this.requirement.test(dataset.value)) {
            _addIssue(this, "format", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function safeInteger(message) {
      return {
        kind: "validation",
        type: "safe_integer",
        reference: safeInteger,
        async: false,
        expects: null,
        requirement: Number.isSafeInteger,
        message,
        _run(dataset, config2) {
          if (dataset.typed && !this.requirement(dataset.value)) {
            _addIssue(this, "safe integer", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function size(requirement, message) {
      return {
        kind: "validation",
        type: "size",
        reference: size,
        async: false,
        expects: `${requirement}`,
        requirement,
        message,
        _run(dataset, config2) {
          if (dataset.typed && dataset.value.size !== this.requirement) {
            _addIssue(this, "size", dataset, config2, {
              received: `${dataset.value.size}`
            });
          }
          return dataset;
        }
      };
    }
    function someItem(requirement, message) {
      return {
        kind: "validation",
        type: "some_item",
        reference: someItem,
        async: false,
        expects: null,
        requirement,
        message,
        _run(dataset, config2) {
          if (dataset.typed && !dataset.value.some(this.requirement)) {
            _addIssue(this, "item", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function sortItems(operation) {
      return {
        kind: "transformation",
        type: "sort_items",
        reference: sortItems,
        async: false,
        operation,
        _run(dataset) {
          dataset.value = dataset.value.sort(this.operation);
          return dataset;
        }
      };
    }
    function startsWith(requirement, message) {
      return {
        kind: "validation",
        type: "starts_with",
        reference: startsWith,
        async: false,
        expects: `"${requirement}"`,
        requirement,
        message,
        _run(dataset, config2) {
          if (dataset.typed && !dataset.value.startsWith(this.requirement)) {
            _addIssue(this, "start", dataset, config2, {
              received: `"${dataset.value.slice(0, this.requirement.length)}"`
            });
          }
          return dataset;
        }
      };
    }
    function toLowerCase() {
      return {
        kind: "transformation",
        type: "to_lower_case",
        reference: toLowerCase,
        async: false,
        _run(dataset) {
          dataset.value = dataset.value.toLowerCase();
          return dataset;
        }
      };
    }
    function toMaxValue(requirement) {
      return {
        kind: "transformation",
        type: "to_max_value",
        reference: toMaxValue,
        async: false,
        requirement,
        _run(dataset) {
          dataset.value = dataset.value > this.requirement ? this.requirement : dataset.value;
          return dataset;
        }
      };
    }
    function toMinValue(requirement) {
      return {
        kind: "transformation",
        type: "to_min_value",
        reference: toMinValue,
        async: false,
        requirement,
        _run(dataset) {
          dataset.value = dataset.value < this.requirement ? this.requirement : dataset.value;
          return dataset;
        }
      };
    }
    function toUpperCase() {
      return {
        kind: "transformation",
        type: "to_upper_case",
        reference: toUpperCase,
        async: false,
        _run(dataset) {
          dataset.value = dataset.value.toUpperCase();
          return dataset;
        }
      };
    }
    function transform(operation) {
      return {
        kind: "transformation",
        type: "transform",
        reference: transform,
        async: false,
        operation,
        _run(dataset) {
          dataset.value = this.operation(dataset.value);
          return dataset;
        }
      };
    }
    function transformAsync(operation) {
      return {
        kind: "transformation",
        type: "transform",
        reference: transformAsync,
        async: true,
        operation,
        async _run(dataset) {
          dataset.value = await this.operation(dataset.value);
          return dataset;
        }
      };
    }
    function trim() {
      return {
        kind: "transformation",
        type: "trim",
        reference: trim,
        async: false,
        _run(dataset) {
          dataset.value = dataset.value.trim();
          return dataset;
        }
      };
    }
    function trimEnd() {
      return {
        kind: "transformation",
        type: "trim_end",
        reference: trimEnd,
        async: false,
        _run(dataset) {
          dataset.value = dataset.value.trimEnd();
          return dataset;
        }
      };
    }
    function trimStart() {
      return {
        kind: "transformation",
        type: "trim_start",
        reference: trimStart,
        async: false,
        _run(dataset) {
          dataset.value = dataset.value.trimStart();
          return dataset;
        }
      };
    }
    function ulid(message) {
      return {
        kind: "validation",
        type: "ulid",
        reference: ulid,
        async: false,
        expects: null,
        requirement: ULID_REGEX,
        message,
        _run(dataset, config2) {
          if (dataset.typed && !this.requirement.test(dataset.value)) {
            _addIssue(this, "ULID", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function url(message) {
      return {
        kind: "validation",
        type: "url",
        reference: url,
        async: false,
        expects: null,
        requirement(input) {
          try {
            new URL(input);
            return true;
          } catch {
            return false;
          }
        },
        message,
        _run(dataset, config2) {
          if (dataset.typed && !this.requirement(dataset.value)) {
            _addIssue(this, "URL", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function uuid(message) {
      return {
        kind: "validation",
        type: "uuid",
        reference: uuid,
        async: false,
        expects: null,
        requirement: UUID_REGEX,
        message,
        _run(dataset, config2) {
          if (dataset.typed && !this.requirement.test(dataset.value)) {
            _addIssue(this, "UUID", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function value(requirement, message) {
      return {
        kind: "validation",
        type: "value",
        reference: value,
        async: false,
        expects: requirement instanceof Date ? requirement.toJSON() : _stringify(requirement),
        requirement,
        message,
        _run(dataset, config2) {
          if (dataset.typed && !(this.requirement <= dataset.value && this.requirement >= dataset.value)) {
            _addIssue(this, "value", dataset, config2, {
              received: dataset.value instanceof Date ? dataset.value.toJSON() : _stringify(dataset.value)
            });
          }
          return dataset;
        }
      };
    }
    function config(schema, config2) {
      return {
        ...schema,
        _run(dataset, config_) {
          return schema._run(dataset, { ...config_, ...config2 });
        }
      };
    }
    function getFallback(schema, dataset, config2) {
      return typeof schema.fallback === "function" ? (
        // @ts-expect-error
        schema.fallback(dataset, config2)
      ) : (
        // @ts-expect-error
        schema.fallback
      );
    }
    function fallback(schema, fallback2) {
      return {
        ...schema,
        fallback: fallback2,
        _run(dataset, config2) {
          schema._run(dataset, config2);
          return dataset.issues ? { typed: true, value: getFallback(this, dataset, config2) } : dataset;
        }
      };
    }
    function fallbackAsync(schema, fallback2) {
      return {
        ...schema,
        fallback: fallback2,
        async: true,
        async _run(dataset, config2) {
          schema._run(dataset, config2);
          return dataset.issues ? (
            // @ts-expect-error
            { typed: true, value: await getFallback(this, dataset, config2) }
          ) : dataset;
        }
      };
    }
    function flatten(issues) {
      const flatErrors = {};
      for (const issue of issues) {
        if (issue.path) {
          const dotPath = getDotPath(issue);
          if (dotPath) {
            if (!flatErrors.nested) {
              flatErrors.nested = {};
            }
            if (flatErrors.nested[dotPath]) {
              flatErrors.nested[dotPath].push(issue.message);
            } else {
              flatErrors.nested[dotPath] = [issue.message];
            }
          } else {
            if (flatErrors.other) {
              flatErrors.other.push(issue.message);
            } else {
              flatErrors.other = [issue.message];
            }
          }
        } else {
          if (flatErrors.root) {
            flatErrors.root.push(issue.message);
          } else {
            flatErrors.root = [issue.message];
          }
        }
      }
      return flatErrors;
    }
    function forward(action, pathKeys) {
      return {
        ...action,
        _run(dataset, config2) {
          const prevIssues = dataset.issues && [...dataset.issues];
          action._run(dataset, config2);
          if (dataset.issues) {
            for (const issue of dataset.issues) {
              if (!(prevIssues == null ? void 0 : prevIssues.includes(issue))) {
                let pathInput = dataset.value;
                for (const key of pathKeys) {
                  const pathValue = pathInput[key];
                  const pathItem = {
                    type: "unknown",
                    origin: "value",
                    input: pathInput,
                    key,
                    value: pathValue
                  };
                  if (issue.path) {
                    issue.path.push(pathItem);
                  } else {
                    issue.path = [pathItem];
                  }
                  if (!pathValue) {
                    break;
                  }
                  pathInput = pathValue;
                }
              }
            }
          }
          return dataset;
        }
      };
    }
    function forwardAsync(action, pathKeys) {
      return {
        ...action,
        async: true,
        async _run(dataset, config2) {
          const prevIssues = dataset.issues && [...dataset.issues];
          await action._run(dataset, config2);
          if (dataset.issues) {
            for (const issue of dataset.issues) {
              if (!(prevIssues == null ? void 0 : prevIssues.includes(issue))) {
                let pathInput = dataset.value;
                for (const key of pathKeys) {
                  const pathValue = pathInput[key];
                  const pathItem = {
                    type: "unknown",
                    origin: "value",
                    input: pathInput,
                    key,
                    value: pathValue
                  };
                  if (issue.path) {
                    issue.path.push(pathItem);
                  } else {
                    issue.path = [pathItem];
                  }
                  if (!pathValue) {
                    break;
                  }
                  pathInput = pathValue;
                }
              }
            }
          }
          return dataset;
        }
      };
    }
    function getDefault(schema, dataset, config2) {
      return typeof schema.default === "function" ? (
        // @ts-expect-error
        schema.default(dataset, config2)
      ) : (
        // @ts-expect-error
        schema.default
      );
    }
    function getDefaults(schema) {
      if ("entries" in schema) {
        const object2 = {};
        for (const key in schema.entries) {
          object2[key] = getDefaults(schema.entries[key]);
        }
        return object2;
      }
      if ("items" in schema) {
        return schema.items.map(getDefaults);
      }
      return getDefault(schema);
    }
    async function getDefaultsAsync(schema) {
      if ("entries" in schema) {
        return Object.fromEntries(
          await Promise.all(
            Object.entries(schema.entries).map(async ([key, value2]) => [
              key,
              await getDefaultsAsync(value2)
            ])
          )
        );
      }
      if ("items" in schema) {
        return Promise.all(schema.items.map(getDefaultsAsync));
      }
      return getDefault(schema);
    }
    function getFallbacks(schema) {
      if ("entries" in schema) {
        const object2 = {};
        for (const key in schema.entries) {
          object2[key] = getFallbacks(schema.entries[key]);
        }
        return object2;
      }
      if ("items" in schema) {
        return schema.items.map(getFallbacks);
      }
      return getFallback(schema);
    }
    async function getFallbacksAsync(schema) {
      if ("entries" in schema) {
        return Object.fromEntries(
          await Promise.all(
            Object.entries(schema.entries).map(async ([key, value2]) => [
              key,
              await getFallbacksAsync(value2)
            ])
          )
        );
      }
      if ("items" in schema) {
        return Promise.all(schema.items.map(getFallbacksAsync));
      }
      return getFallback(schema);
    }
    function is2(schema, input) {
      return !schema._run({ typed: false, value: input }, { abortEarly: true }).issues;
    }
    function any2() {
      return {
        kind: "schema",
        type: "any",
        reference: any2,
        expects: "any",
        async: false,
        _run(dataset) {
          dataset.typed = true;
          return dataset;
        }
      };
    }
    function array2(item, message) {
      return {
        kind: "schema",
        type: "array",
        reference: array2,
        expects: "Array",
        async: false,
        item,
        message,
        _run(dataset, config2) {
          var _a;
          const input = dataset.value;
          if (Array.isArray(input)) {
            dataset.typed = true;
            dataset.value = [];
            for (let key = 0; key < input.length; key++) {
              const value2 = input[key];
              const itemDataset = this.item._run({ typed: false, value: value2 }, config2);
              if (itemDataset.issues) {
                const pathItem = {
                  type: "array",
                  origin: "value",
                  input,
                  key,
                  value: value2
                };
                for (const issue of itemDataset.issues) {
                  if (issue.path) {
                    issue.path.unshift(pathItem);
                  } else {
                    issue.path = [pathItem];
                  }
                  (_a = dataset.issues) == null ? void 0 : _a.push(issue);
                }
                if (!dataset.issues) {
                  dataset.issues = itemDataset.issues;
                }
                if (config2.abortEarly) {
                  dataset.typed = false;
                  break;
                }
              }
              if (!itemDataset.typed) {
                dataset.typed = false;
              }
              dataset.value.push(itemDataset.value);
            }
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function arrayAsync(item, message) {
      return {
        kind: "schema",
        type: "array",
        reference: arrayAsync,
        expects: "Array",
        async: true,
        item,
        message,
        async _run(dataset, config2) {
          var _a;
          const input = dataset.value;
          if (Array.isArray(input)) {
            dataset.typed = true;
            dataset.value = [];
            const itemDatasets = await Promise.all(
              input.map((value2) => this.item._run({ typed: false, value: value2 }, config2))
            );
            for (let key = 0; key < itemDatasets.length; key++) {
              const itemDataset = itemDatasets[key];
              if (itemDataset.issues) {
                const pathItem = {
                  type: "array",
                  origin: "value",
                  input,
                  key,
                  value: input[key]
                };
                for (const issue of itemDataset.issues) {
                  if (issue.path) {
                    issue.path.unshift(pathItem);
                  } else {
                    issue.path = [pathItem];
                  }
                  (_a = dataset.issues) == null ? void 0 : _a.push(issue);
                }
                if (!dataset.issues) {
                  dataset.issues = itemDataset.issues;
                }
                if (config2.abortEarly) {
                  dataset.typed = false;
                  break;
                }
              }
              if (!itemDataset.typed) {
                dataset.typed = false;
              }
              dataset.value.push(itemDataset.value);
            }
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function bigint(message) {
      return {
        kind: "schema",
        type: "bigint",
        reference: bigint,
        expects: "bigint",
        async: false,
        message,
        _run(dataset, config2) {
          if (typeof dataset.value === "bigint") {
            dataset.typed = true;
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function blob3(message) {
      return {
        kind: "schema",
        type: "blob",
        reference: blob3,
        expects: "Blob",
        async: false,
        message,
        _run(dataset, config2) {
          if (dataset.value instanceof Blob) {
            dataset.typed = true;
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function boolean2(message) {
      return {
        kind: "schema",
        type: "boolean",
        reference: boolean2,
        expects: "boolean",
        async: false,
        message,
        _run(dataset, config2) {
          if (typeof dataset.value === "boolean") {
            dataset.typed = true;
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function custom(check2, message) {
      return {
        kind: "schema",
        type: "custom",
        reference: custom,
        expects: "unknown",
        async: false,
        check: check2,
        message,
        _run(dataset, config2) {
          if (this.check(dataset.value)) {
            dataset.typed = true;
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function customAsync(check2, message) {
      return {
        kind: "schema",
        type: "custom",
        reference: customAsync,
        expects: "unknown",
        async: true,
        check: check2,
        message,
        async _run(dataset, config2) {
          if (await this.check(dataset.value)) {
            dataset.typed = true;
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function date(message) {
      return {
        kind: "schema",
        type: "date",
        reference: date,
        expects: "Date",
        async: false,
        message,
        _run(dataset, config2) {
          if (dataset.value instanceof Date) {
            if (!isNaN(dataset.value)) {
              dataset.typed = true;
            } else {
              _addIssue(this, "type", dataset, config2, {
                received: '"Invalid Date"'
              });
            }
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function enum_(enum__, message) {
      const options = Object.entries(enum__).filter(([key]) => isNaN(+key)).map(([, value2]) => value2);
      return {
        kind: "schema",
        type: "enum",
        reference: enum_,
        expects: options.map(_stringify).join(" | ") || "never",
        async: false,
        enum: enum__,
        options,
        message,
        _run(dataset, config2) {
          if (this.options.includes(dataset.value)) {
            dataset.typed = true;
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function file(message) {
      return {
        kind: "schema",
        type: "file",
        reference: file,
        expects: "File",
        async: false,
        message,
        _run(dataset, config2) {
          if (dataset.value instanceof File) {
            dataset.typed = true;
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function function_(message) {
      return {
        kind: "schema",
        type: "function",
        reference: function_,
        expects: "Function",
        async: false,
        message,
        _run(dataset, config2) {
          if (typeof dataset.value === "function") {
            dataset.typed = true;
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function instance2(class_, message) {
      return {
        kind: "schema",
        type: "instance",
        reference: instance2,
        expects: class_.name,
        async: false,
        class: class_,
        message,
        _run(dataset, config2) {
          if (dataset.value instanceof this.class) {
            dataset.typed = true;
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function _merge(value1, value2) {
      if (typeof value1 === typeof value2) {
        if (value1 === value2 || value1 instanceof Date && value2 instanceof Date && +value1 === +value2) {
          return { value: value1 };
        }
        if (value1 && value2 && value1.constructor === Object && value2.constructor === Object) {
          for (const key in value2) {
            if (key in value1) {
              const dataset = _merge(value1[key], value2[key]);
              if (dataset.issue) {
                return dataset;
              }
              value1[key] = dataset.value;
            } else {
              value1[key] = value2[key];
            }
          }
          return { value: value1 };
        }
        if (Array.isArray(value1) && Array.isArray(value2)) {
          if (value1.length === value2.length) {
            for (let index = 0; index < value1.length; index++) {
              const dataset = _merge(value1[index], value2[index]);
              if (dataset.issue) {
                return dataset;
              }
              value1[index] = dataset.value;
            }
            return { value: value1 };
          }
        }
      }
      return { issue: true };
    }
    function intersect(options, message) {
      return {
        kind: "schema",
        type: "intersect",
        reference: intersect,
        expects: [...new Set(options.map((option) => option.expects))].join(" & ") || "never",
        async: false,
        options,
        message,
        _run(dataset, config2) {
          if (this.options.length) {
            const input = dataset.value;
            let outputs;
            dataset.typed = true;
            for (const schema of this.options) {
              const optionDataset = schema._run(
                { typed: false, value: input },
                config2
              );
              if (optionDataset.issues) {
                if (dataset.issues) {
                  dataset.issues.push(...optionDataset.issues);
                } else {
                  dataset.issues = optionDataset.issues;
                }
                if (config2.abortEarly) {
                  dataset.typed = false;
                  break;
                }
              }
              if (!optionDataset.typed) {
                dataset.typed = false;
              }
              if (dataset.typed) {
                if (outputs) {
                  outputs.push(optionDataset.value);
                } else {
                  outputs = [optionDataset.value];
                }
              }
            }
            if (dataset.typed) {
              dataset.value = outputs[0];
              for (let index = 1; index < outputs.length; index++) {
                const mergeDataset = _merge(dataset.value, outputs[index]);
                if (mergeDataset.issue) {
                  _addIssue(this, "type", dataset, config2, {
                    received: "unknown"
                  });
                  break;
                }
                dataset.value = mergeDataset.value;
              }
            }
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function intersectAsync(options, message) {
      return {
        kind: "schema",
        type: "intersect",
        reference: intersectAsync,
        expects: [...new Set(options.map((option) => option.expects))].join(" & ") || "never",
        async: true,
        options,
        message,
        async _run(dataset, config2) {
          if (this.options.length) {
            const input = dataset.value;
            let outputs;
            dataset.typed = true;
            const optionDatasets = await Promise.all(
              this.options.map(
                (schema) => schema._run({ typed: false, value: input }, config2)
              )
            );
            for (const optionDataset of optionDatasets) {
              if (optionDataset.issues) {
                if (dataset.issues) {
                  dataset.issues.push(...optionDataset.issues);
                } else {
                  dataset.issues = optionDataset.issues;
                }
                if (config2.abortEarly) {
                  dataset.typed = false;
                  break;
                }
              }
              if (!optionDataset.typed) {
                dataset.typed = false;
              }
              if (dataset.typed) {
                if (outputs) {
                  outputs.push(optionDataset.value);
                } else {
                  outputs = [optionDataset.value];
                }
              }
            }
            if (dataset.typed) {
              dataset.value = outputs[0];
              for (let index = 1; index < outputs.length; index++) {
                const mergeDataset = _merge(dataset.value, outputs[index]);
                if (mergeDataset.issue) {
                  _addIssue(this, "type", dataset, config2, {
                    received: "unknown"
                  });
                  break;
                }
                dataset.value = mergeDataset.value;
              }
            }
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function lazy(getter) {
      return {
        kind: "schema",
        type: "lazy",
        reference: lazy,
        expects: "unknown",
        async: false,
        getter,
        _run(dataset, config2) {
          return this.getter(dataset.value)._run(dataset, config2);
        }
      };
    }
    function lazyAsync(getter) {
      return {
        kind: "schema",
        type: "lazy",
        reference: lazyAsync,
        expects: "unknown",
        async: true,
        getter,
        async _run(dataset, config2) {
          return (await this.getter(dataset.value))._run(dataset, config2);
        }
      };
    }
    function literal2(literal_, message) {
      return {
        kind: "schema",
        type: "literal",
        reference: literal2,
        expects: _stringify(literal_),
        async: false,
        literal: literal_,
        message,
        _run(dataset, config2) {
          if (dataset.value === this.literal) {
            dataset.typed = true;
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function looseObject(entries, message) {
      return {
        kind: "schema",
        type: "loose_object",
        reference: looseObject,
        expects: "Object",
        async: false,
        entries,
        message,
        _run(dataset, config2) {
          var _a;
          const input = dataset.value;
          if (input && typeof input === "object") {
            dataset.typed = true;
            dataset.value = {};
            for (const key in this.entries) {
              const value2 = input[key];
              const valueDataset = this.entries[key]._run(
                { typed: false, value: value2 },
                config2
              );
              if (valueDataset.issues) {
                const pathItem = {
                  type: "object",
                  origin: "value",
                  input,
                  key,
                  value: value2
                };
                for (const issue of valueDataset.issues) {
                  if (issue.path) {
                    issue.path.unshift(pathItem);
                  } else {
                    issue.path = [pathItem];
                  }
                  (_a = dataset.issues) == null ? void 0 : _a.push(issue);
                }
                if (!dataset.issues) {
                  dataset.issues = valueDataset.issues;
                }
                if (config2.abortEarly) {
                  dataset.typed = false;
                  break;
                }
              }
              if (!valueDataset.typed) {
                dataset.typed = false;
              }
              if (valueDataset.value !== void 0 || key in input) {
                dataset.value[key] = valueDataset.value;
              }
            }
            if (!dataset.issues || !config2.abortEarly) {
              for (const key in input) {
                if (_isValidObjectKey(input, key) && !(key in this.entries)) {
                  dataset.value[key] = input[key];
                }
              }
            }
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function looseObjectAsync(entries, message) {
      return {
        kind: "schema",
        type: "loose_object",
        reference: looseObjectAsync,
        expects: "Object",
        async: true,
        entries,
        message,
        async _run(dataset, config2) {
          var _a;
          const input = dataset.value;
          if (input && typeof input === "object") {
            dataset.typed = true;
            dataset.value = {};
            const valueDatasets = await Promise.all(
              Object.entries(this.entries).map(async ([key, schema]) => {
                const value2 = input[key];
                return [
                  key,
                  value2,
                  await schema._run({ typed: false, value: value2 }, config2)
                ];
              })
            );
            for (const [key, value2, valueDataset] of valueDatasets) {
              if (valueDataset.issues) {
                const pathItem = {
                  type: "object",
                  origin: "value",
                  input,
                  key,
                  value: value2
                };
                for (const issue of valueDataset.issues) {
                  if (issue.path) {
                    issue.path.unshift(pathItem);
                  } else {
                    issue.path = [pathItem];
                  }
                  (_a = dataset.issues) == null ? void 0 : _a.push(issue);
                }
                if (!dataset.issues) {
                  dataset.issues = valueDataset.issues;
                }
                if (config2.abortEarly) {
                  dataset.typed = false;
                  break;
                }
              }
              if (!valueDataset.typed) {
                dataset.typed = false;
              }
              if (valueDataset.value !== void 0 || key in input) {
                dataset.value[key] = valueDataset.value;
              }
            }
            if (!dataset.issues || !config2.abortEarly) {
              for (const key in input) {
                if (_isValidObjectKey(input, key) && !(key in this.entries)) {
                  dataset.value[key] = input[key];
                }
              }
            }
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function looseTuple(items, message) {
      return {
        kind: "schema",
        type: "loose_tuple",
        reference: looseTuple,
        expects: "Array",
        async: false,
        items,
        message,
        _run(dataset, config2) {
          var _a;
          const input = dataset.value;
          if (Array.isArray(input)) {
            dataset.typed = true;
            dataset.value = [];
            for (let key = 0; key < this.items.length; key++) {
              const value2 = input[key];
              const itemDataset = this.items[key]._run(
                { typed: false, value: value2 },
                config2
              );
              if (itemDataset.issues) {
                const pathItem = {
                  type: "array",
                  origin: "value",
                  input,
                  key,
                  value: value2
                };
                for (const issue of itemDataset.issues) {
                  if (issue.path) {
                    issue.path.unshift(pathItem);
                  } else {
                    issue.path = [pathItem];
                  }
                  (_a = dataset.issues) == null ? void 0 : _a.push(issue);
                }
                if (!dataset.issues) {
                  dataset.issues = itemDataset.issues;
                }
                if (config2.abortEarly) {
                  dataset.typed = false;
                  break;
                }
              }
              if (!itemDataset.typed) {
                dataset.typed = false;
              }
              dataset.value.push(itemDataset.value);
            }
            if (!dataset.issues || !config2.abortEarly) {
              for (let key = this.items.length; key < input.length; key++) {
                dataset.value.push(input[key]);
              }
            }
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function looseTupleAsync(items, message) {
      return {
        kind: "schema",
        type: "loose_tuple",
        reference: looseTupleAsync,
        expects: "Array",
        async: true,
        items,
        message,
        async _run(dataset, config2) {
          var _a;
          const input = dataset.value;
          if (Array.isArray(input)) {
            dataset.typed = true;
            dataset.value = [];
            const itemDatasets = await Promise.all(
              this.items.map(async (item, key) => {
                const value2 = input[key];
                return [
                  key,
                  value2,
                  await item._run({ typed: false, value: value2 }, config2)
                ];
              })
            );
            for (const [key, value2, itemDataset] of itemDatasets) {
              if (itemDataset.issues) {
                const pathItem = {
                  type: "array",
                  origin: "value",
                  input,
                  key,
                  value: value2
                };
                for (const issue of itemDataset.issues) {
                  if (issue.path) {
                    issue.path.unshift(pathItem);
                  } else {
                    issue.path = [pathItem];
                  }
                  (_a = dataset.issues) == null ? void 0 : _a.push(issue);
                }
                if (!dataset.issues) {
                  dataset.issues = itemDataset.issues;
                }
                if (config2.abortEarly) {
                  dataset.typed = false;
                  break;
                }
              }
              if (!itemDataset.typed) {
                dataset.typed = false;
              }
              dataset.value.push(itemDataset.value);
            }
            if (!dataset.issues || !config2.abortEarly) {
              for (let key = this.items.length; key < input.length; key++) {
                dataset.value.push(input[key]);
              }
            }
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function map(key, value2, message) {
      return {
        kind: "schema",
        type: "map",
        reference: map,
        expects: "Map",
        async: false,
        key,
        value: value2,
        message,
        _run(dataset, config2) {
          var _a, _b;
          const input = dataset.value;
          if (input instanceof Map) {
            dataset.typed = true;
            dataset.value = /* @__PURE__ */ new Map();
            for (const [inputKey, inputValue] of input) {
              const keyDataset = this.key._run(
                { typed: false, value: inputKey },
                config2
              );
              if (keyDataset.issues) {
                const pathItem = {
                  type: "map",
                  origin: "key",
                  input,
                  key: inputKey,
                  value: inputValue
                };
                for (const issue of keyDataset.issues) {
                  if (issue.path) {
                    issue.path.unshift(pathItem);
                  } else {
                    issue.path = [pathItem];
                  }
                  (_a = dataset.issues) == null ? void 0 : _a.push(issue);
                }
                if (!dataset.issues) {
                  dataset.issues = keyDataset.issues;
                }
                if (config2.abortEarly) {
                  dataset.typed = false;
                  break;
                }
              }
              const valueDataset = this.value._run(
                { typed: false, value: inputValue },
                config2
              );
              if (valueDataset.issues) {
                const pathItem = {
                  type: "map",
                  origin: "value",
                  input,
                  key: inputKey,
                  value: inputValue
                };
                for (const issue of valueDataset.issues) {
                  if (issue.path) {
                    issue.path.unshift(pathItem);
                  } else {
                    issue.path = [pathItem];
                  }
                  (_b = dataset.issues) == null ? void 0 : _b.push(issue);
                }
                if (!dataset.issues) {
                  dataset.issues = valueDataset.issues;
                }
                if (config2.abortEarly) {
                  dataset.typed = false;
                  break;
                }
              }
              if (!keyDataset.typed || !valueDataset.typed) {
                dataset.typed = false;
              }
              dataset.value.set(keyDataset.value, valueDataset.value);
            }
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function mapAsync(key, value2, message) {
      return {
        kind: "schema",
        type: "map",
        reference: mapAsync,
        expects: "Map",
        async: true,
        key,
        value: value2,
        message,
        async _run(dataset, config2) {
          var _a, _b;
          const input = dataset.value;
          if (input instanceof Map) {
            dataset.typed = true;
            dataset.value = /* @__PURE__ */ new Map();
            const datasets = await Promise.all(
              [...input].map(
                ([inputKey, inputValue]) => Promise.all([
                  inputKey,
                  inputValue,
                  this.key._run({ typed: false, value: inputKey }, config2),
                  this.value._run({ typed: false, value: inputValue }, config2)
                ])
              )
            );
            for (const [
              inputKey,
              inputValue,
              keyDataset,
              valueDataset
            ] of datasets) {
              if (keyDataset.issues) {
                const pathItem = {
                  type: "map",
                  origin: "key",
                  input,
                  key: inputKey,
                  value: inputValue
                };
                for (const issue of keyDataset.issues) {
                  if (issue.path) {
                    issue.path.unshift(pathItem);
                  } else {
                    issue.path = [pathItem];
                  }
                  (_a = dataset.issues) == null ? void 0 : _a.push(issue);
                }
                if (!dataset.issues) {
                  dataset.issues = keyDataset.issues;
                }
                if (config2.abortEarly) {
                  dataset.typed = false;
                  break;
                }
              }
              if (valueDataset.issues) {
                const pathItem = {
                  type: "map",
                  origin: "value",
                  input,
                  key: inputKey,
                  value: inputValue
                };
                for (const issue of valueDataset.issues) {
                  if (issue.path) {
                    issue.path.unshift(pathItem);
                  } else {
                    issue.path = [pathItem];
                  }
                  (_b = dataset.issues) == null ? void 0 : _b.push(issue);
                }
                if (!dataset.issues) {
                  dataset.issues = valueDataset.issues;
                }
                if (config2.abortEarly) {
                  dataset.typed = false;
                  break;
                }
              }
              if (!keyDataset.typed || !valueDataset.typed) {
                dataset.typed = false;
              }
              dataset.value.set(keyDataset.value, valueDataset.value);
            }
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function nan(message) {
      return {
        kind: "schema",
        type: "nan",
        reference: nan,
        expects: "NaN",
        async: false,
        message,
        _run(dataset, config2) {
          if (Number.isNaN(dataset.value)) {
            dataset.typed = true;
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function never2(message) {
      return {
        kind: "schema",
        type: "never",
        reference: never2,
        expects: "never",
        async: false,
        message,
        _run(dataset, config2) {
          _addIssue(this, "type", dataset, config2);
          return dataset;
        }
      };
    }
    function nonNullable(wrapped, message) {
      return {
        kind: "schema",
        type: "non_nullable",
        reference: nonNullable,
        expects: "!null",
        async: false,
        wrapped,
        message,
        _run(dataset, config2) {
          if (dataset.value === null) {
            _addIssue(this, "type", dataset, config2);
            return dataset;
          }
          return this.wrapped._run(dataset, config2);
        }
      };
    }
    function nonNullableAsync(wrapped, message) {
      return {
        kind: "schema",
        type: "non_nullable",
        reference: nonNullableAsync,
        expects: "!null",
        async: true,
        wrapped,
        message,
        async _run(dataset, config2) {
          if (dataset.value === null) {
            _addIssue(this, "type", dataset, config2);
            return dataset;
          }
          return this.wrapped._run(dataset, config2);
        }
      };
    }
    function nonNullish(wrapped, message) {
      return {
        kind: "schema",
        type: "non_nullish",
        reference: nonNullish,
        expects: "!null & !undefined",
        async: false,
        wrapped,
        message,
        _run(dataset, config2) {
          if (dataset.value === null || dataset.value === void 0) {
            _addIssue(this, "type", dataset, config2);
            return dataset;
          }
          return this.wrapped._run(dataset, config2);
        }
      };
    }
    function nonNullishAsync(wrapped, message) {
      return {
        kind: "schema",
        type: "non_nullish",
        reference: nonNullishAsync,
        expects: "!null & !undefined",
        async: true,
        wrapped,
        message,
        async _run(dataset, config2) {
          if (dataset.value === null || dataset.value === void 0) {
            _addIssue(this, "type", dataset, config2);
            return dataset;
          }
          return this.wrapped._run(dataset, config2);
        }
      };
    }
    function nonOptional(wrapped, message) {
      return {
        kind: "schema",
        type: "non_optional",
        reference: nonOptional,
        expects: "!undefined",
        async: false,
        wrapped,
        message,
        _run(dataset, config2) {
          if (dataset.value === void 0) {
            _addIssue(this, "type", dataset, config2);
            return dataset;
          }
          return this.wrapped._run(dataset, config2);
        }
      };
    }
    function nonOptionalAsync(wrapped, message) {
      return {
        kind: "schema",
        type: "non_optional",
        reference: nonOptionalAsync,
        expects: "!undefined",
        async: true,
        wrapped,
        message,
        async _run(dataset, config2) {
          if (dataset.value === void 0) {
            _addIssue(this, "type", dataset, config2);
            return dataset;
          }
          return this.wrapped._run(dataset, config2);
        }
      };
    }
    function null_(message) {
      return {
        kind: "schema",
        type: "null",
        reference: null_,
        expects: "null",
        async: false,
        message,
        _run(dataset, config2) {
          if (dataset.value === null) {
            dataset.typed = true;
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function nullable2(wrapped, ...args) {
      const schema = {
        kind: "schema",
        type: "nullable",
        reference: nullable2,
        expects: `${wrapped.expects} | null`,
        async: false,
        wrapped,
        _run(dataset, config2) {
          if (dataset.value === null) {
            if ("default" in this) {
              dataset.value = getDefault(
                this,
                dataset,
                config2
              );
            }
            if (dataset.value === null) {
              dataset.typed = true;
              return dataset;
            }
          }
          return this.wrapped._run(dataset, config2);
        }
      };
      if (0 in args) {
        schema.default = args[0];
      }
      return schema;
    }
    function nullableAsync(wrapped, ...args) {
      const schema = {
        kind: "schema",
        type: "nullable",
        reference: nullableAsync,
        expects: `${wrapped.expects} | null`,
        async: true,
        wrapped,
        async _run(dataset, config2) {
          if (dataset.value === null) {
            if ("default" in this) {
              dataset.value = await getDefault(
                this,
                dataset,
                config2
              );
            }
            if (dataset.value === null) {
              dataset.typed = true;
              return dataset;
            }
          }
          return this.wrapped._run(dataset, config2);
        }
      };
      if (0 in args) {
        schema.default = args[0];
      }
      return schema;
    }
    function nullish(wrapped, ...args) {
      const schema = {
        kind: "schema",
        type: "nullish",
        reference: nullish,
        expects: `${wrapped.expects} | null | undefined`,
        async: false,
        wrapped,
        _run(dataset, config2) {
          if (dataset.value === null || dataset.value === void 0) {
            if ("default" in this) {
              dataset.value = getDefault(
                this,
                dataset,
                config2
              );
            }
            if (dataset.value === null || dataset.value === void 0) {
              dataset.typed = true;
              return dataset;
            }
          }
          return this.wrapped._run(dataset, config2);
        }
      };
      if (0 in args) {
        schema.default = args[0];
      }
      return schema;
    }
    function nullishAsync(wrapped, ...args) {
      const schema = {
        kind: "schema",
        type: "nullish",
        reference: nullishAsync,
        expects: `${wrapped.expects} | null | undefined`,
        async: true,
        wrapped,
        async _run(dataset, config2) {
          if (dataset.value === null || dataset.value === void 0) {
            if ("default" in this) {
              dataset.value = await getDefault(
                this,
                dataset,
                config2
              );
            }
            if (dataset.value === null || dataset.value === void 0) {
              dataset.typed = true;
              return dataset;
            }
          }
          return this.wrapped._run(dataset, config2);
        }
      };
      if (0 in args) {
        schema.default = args[0];
      }
      return schema;
    }
    function number2(message) {
      return {
        kind: "schema",
        type: "number",
        reference: number2,
        expects: "number",
        async: false,
        message,
        _run(dataset, config2) {
          if (typeof dataset.value === "number" && !isNaN(dataset.value)) {
            dataset.typed = true;
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function object(entries, message) {
      return {
        kind: "schema",
        type: "object",
        reference: object,
        expects: "Object",
        async: false,
        entries,
        message,
        _run(dataset, config2) {
          var _a;
          const input = dataset.value;
          if (input && typeof input === "object") {
            dataset.typed = true;
            dataset.value = {};
            for (const key in this.entries) {
              const value2 = input[key];
              const valueDataset = this.entries[key]._run(
                { typed: false, value: value2 },
                config2
              );
              if (valueDataset.issues) {
                const pathItem = {
                  type: "object",
                  origin: "value",
                  input,
                  key,
                  value: value2
                };
                for (const issue of valueDataset.issues) {
                  if (issue.path) {
                    issue.path.unshift(pathItem);
                  } else {
                    issue.path = [pathItem];
                  }
                  (_a = dataset.issues) == null ? void 0 : _a.push(issue);
                }
                if (!dataset.issues) {
                  dataset.issues = valueDataset.issues;
                }
                if (config2.abortEarly) {
                  dataset.typed = false;
                  break;
                }
              }
              if (!valueDataset.typed) {
                dataset.typed = false;
              }
              if (valueDataset.value !== void 0 || key in input) {
                dataset.value[key] = valueDataset.value;
              }
            }
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function objectAsync(entries, message) {
      return {
        kind: "schema",
        type: "object",
        reference: objectAsync,
        expects: "Object",
        async: true,
        entries,
        message,
        async _run(dataset, config2) {
          var _a;
          const input = dataset.value;
          if (input && typeof input === "object") {
            dataset.typed = true;
            dataset.value = {};
            const valueDatasets = await Promise.all(
              Object.entries(this.entries).map(async ([key, schema]) => {
                const value2 = input[key];
                return [
                  key,
                  value2,
                  await schema._run({ typed: false, value: value2 }, config2)
                ];
              })
            );
            for (const [key, value2, valueDataset] of valueDatasets) {
              if (valueDataset.issues) {
                const pathItem = {
                  type: "object",
                  origin: "value",
                  input,
                  key,
                  value: value2
                };
                for (const issue of valueDataset.issues) {
                  if (issue.path) {
                    issue.path.unshift(pathItem);
                  } else {
                    issue.path = [pathItem];
                  }
                  (_a = dataset.issues) == null ? void 0 : _a.push(issue);
                }
                if (!dataset.issues) {
                  dataset.issues = valueDataset.issues;
                }
                if (config2.abortEarly) {
                  dataset.typed = false;
                  break;
                }
              }
              if (!valueDataset.typed) {
                dataset.typed = false;
              }
              if (valueDataset.value !== void 0 || key in input) {
                dataset.value[key] = valueDataset.value;
              }
            }
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function objectWithRest(entries, rest, message) {
      return {
        kind: "schema",
        type: "object_with_rest",
        reference: objectWithRest,
        expects: "Object",
        async: false,
        entries,
        rest,
        message,
        _run(dataset, config2) {
          var _a, _b;
          const input = dataset.value;
          if (input && typeof input === "object") {
            dataset.typed = true;
            dataset.value = {};
            for (const key in this.entries) {
              const value2 = input[key];
              const valueDataset = this.entries[key]._run(
                { typed: false, value: value2 },
                config2
              );
              if (valueDataset.issues) {
                const pathItem = {
                  type: "object",
                  origin: "value",
                  input,
                  key,
                  value: value2
                };
                for (const issue of valueDataset.issues) {
                  if (issue.path) {
                    issue.path.unshift(pathItem);
                  } else {
                    issue.path = [pathItem];
                  }
                  (_a = dataset.issues) == null ? void 0 : _a.push(issue);
                }
                if (!dataset.issues) {
                  dataset.issues = valueDataset.issues;
                }
                if (config2.abortEarly) {
                  dataset.typed = false;
                  break;
                }
              }
              if (!valueDataset.typed) {
                dataset.typed = false;
              }
              if (valueDataset.value !== void 0 || key in input) {
                dataset.value[key] = valueDataset.value;
              }
            }
            if (!dataset.issues || !config2.abortEarly) {
              for (const key in input) {
                if (_isValidObjectKey(input, key) && !(key in this.entries)) {
                  const value2 = input[key];
                  const valueDataset = this.rest._run(
                    { typed: false, value: value2 },
                    config2
                  );
                  if (valueDataset.issues) {
                    const pathItem = {
                      type: "object",
                      origin: "value",
                      input,
                      key,
                      value: value2
                    };
                    for (const issue of valueDataset.issues) {
                      if (issue.path) {
                        issue.path.unshift(pathItem);
                      } else {
                        issue.path = [pathItem];
                      }
                      (_b = dataset.issues) == null ? void 0 : _b.push(issue);
                    }
                    if (!dataset.issues) {
                      dataset.issues = valueDataset.issues;
                    }
                    if (config2.abortEarly) {
                      dataset.typed = false;
                      break;
                    }
                  }
                  if (!valueDataset.typed) {
                    dataset.typed = false;
                  }
                  dataset.value[key] = valueDataset.value;
                }
              }
            }
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function objectWithRestAsync(entries, rest, message) {
      return {
        kind: "schema",
        type: "object_with_rest",
        reference: objectWithRestAsync,
        expects: "Object",
        async: true,
        entries,
        rest,
        message,
        async _run(dataset, config2) {
          var _a, _b;
          const input = dataset.value;
          if (input && typeof input === "object") {
            dataset.typed = true;
            dataset.value = {};
            const [normalDatasets, restDatasets] = await Promise.all([
              // Parse schema of each normal entry
              Promise.all(
                Object.entries(this.entries).map(async ([key, schema]) => {
                  const value2 = input[key];
                  return [
                    key,
                    value2,
                    await schema._run({ typed: false, value: value2 }, config2)
                  ];
                })
              ),
              // Parse other entries with rest schema
              Promise.all(
                Object.entries(input).filter(
                  ([key]) => _isValidObjectKey(input, key) && !(key in this.entries)
                ).map(
                  async ([key, value2]) => [
                    key,
                    value2,
                    await this.rest._run({ typed: false, value: value2 }, config2)
                  ]
                )
              )
            ]);
            for (const [key, value2, valueDataset] of normalDatasets) {
              if (valueDataset.issues) {
                const pathItem = {
                  type: "object",
                  origin: "value",
                  input,
                  key,
                  value: value2
                };
                for (const issue of valueDataset.issues) {
                  if (issue.path) {
                    issue.path.unshift(pathItem);
                  } else {
                    issue.path = [pathItem];
                  }
                  (_a = dataset.issues) == null ? void 0 : _a.push(issue);
                }
                if (!dataset.issues) {
                  dataset.issues = valueDataset.issues;
                }
                if (config2.abortEarly) {
                  dataset.typed = false;
                  break;
                }
              }
              if (!valueDataset.typed) {
                dataset.typed = false;
              }
              if (valueDataset.value !== void 0 || key in input) {
                dataset.value[key] = valueDataset.value;
              }
            }
            if (!dataset.issues || !config2.abortEarly) {
              for (const [key, value2, valueDataset] of restDatasets) {
                if (valueDataset.issues) {
                  const pathItem = {
                    type: "object",
                    origin: "value",
                    input,
                    key,
                    value: value2
                  };
                  for (const issue of valueDataset.issues) {
                    if (issue.path) {
                      issue.path.unshift(pathItem);
                    } else {
                      issue.path = [pathItem];
                    }
                    (_b = dataset.issues) == null ? void 0 : _b.push(issue);
                  }
                  if (!dataset.issues) {
                    dataset.issues = valueDataset.issues;
                  }
                  if (config2.abortEarly) {
                    dataset.typed = false;
                    break;
                  }
                }
                if (!valueDataset.typed) {
                  dataset.typed = false;
                }
                dataset.value[key] = valueDataset.value;
              }
            }
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function optional2(wrapped, ...args) {
      const schema = {
        kind: "schema",
        type: "optional",
        reference: optional2,
        expects: `${wrapped.expects} | undefined`,
        async: false,
        wrapped,
        _run(dataset, config2) {
          if (dataset.value === void 0) {
            if ("default" in this) {
              dataset.value = getDefault(
                this,
                dataset,
                config2
              );
            }
            if (dataset.value === void 0) {
              dataset.typed = true;
              return dataset;
            }
          }
          return this.wrapped._run(dataset, config2);
        }
      };
      if (0 in args) {
        schema.default = args[0];
      }
      return schema;
    }
    function optionalAsync(wrapped, ...args) {
      const schema = {
        kind: "schema",
        type: "optional",
        reference: optionalAsync,
        expects: `${wrapped.expects} | undefined`,
        async: true,
        wrapped,
        async _run(dataset, config2) {
          if (dataset.value === void 0) {
            if ("default" in this) {
              dataset.value = await getDefault(
                this,
                dataset,
                config2
              );
            }
            if (dataset.value === void 0) {
              dataset.typed = true;
              return dataset;
            }
          }
          return this.wrapped._run(dataset, config2);
        }
      };
      if (0 in args) {
        schema.default = args[0];
      }
      return schema;
    }
    function picklist(options, message) {
      return {
        kind: "schema",
        type: "picklist",
        reference: picklist,
        expects: options.map(_stringify).join(" | ") || "never",
        async: false,
        options,
        message,
        _run(dataset, config2) {
          if (this.options.includes(dataset.value)) {
            dataset.typed = true;
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function promise(message) {
      return {
        kind: "schema",
        type: "promise",
        reference: promise,
        expects: "Promise",
        async: false,
        message,
        _run(dataset, config2) {
          if (dataset.value instanceof Promise) {
            dataset.typed = true;
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function record2(key, value2, message) {
      return {
        kind: "schema",
        type: "record",
        reference: record2,
        expects: "Object",
        async: false,
        key,
        value: value2,
        message,
        _run(dataset, config2) {
          var _a, _b;
          const input = dataset.value;
          if (input && typeof input === "object") {
            dataset.typed = true;
            dataset.value = {};
            for (const entryKey in input) {
              if (_isValidObjectKey(input, entryKey)) {
                const entryValue = input[entryKey];
                const keyDataset = this.key._run(
                  { typed: false, value: entryKey },
                  config2
                );
                if (keyDataset.issues) {
                  const pathItem = {
                    type: "object",
                    origin: "key",
                    input,
                    key: entryKey,
                    value: entryValue
                  };
                  for (const issue of keyDataset.issues) {
                    issue.path = [pathItem];
                    (_a = dataset.issues) == null ? void 0 : _a.push(issue);
                  }
                  if (!dataset.issues) {
                    dataset.issues = keyDataset.issues;
                  }
                  if (config2.abortEarly) {
                    dataset.typed = false;
                    break;
                  }
                }
                const valueDataset = this.value._run(
                  { typed: false, value: entryValue },
                  config2
                );
                if (valueDataset.issues) {
                  const pathItem = {
                    type: "object",
                    origin: "value",
                    input,
                    key: entryKey,
                    value: entryValue
                  };
                  for (const issue of valueDataset.issues) {
                    if (issue.path) {
                      issue.path.unshift(pathItem);
                    } else {
                      issue.path = [pathItem];
                    }
                    (_b = dataset.issues) == null ? void 0 : _b.push(issue);
                  }
                  if (!dataset.issues) {
                    dataset.issues = valueDataset.issues;
                  }
                  if (config2.abortEarly) {
                    dataset.typed = false;
                    break;
                  }
                }
                if (!keyDataset.typed || !valueDataset.typed) {
                  dataset.typed = false;
                }
                if (keyDataset.typed) {
                  dataset.value[keyDataset.value] = valueDataset.value;
                }
              }
            }
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function recordAsync(key, value2, message) {
      return {
        kind: "schema",
        type: "record",
        reference: recordAsync,
        expects: "Object",
        async: true,
        key,
        value: value2,
        message,
        async _run(dataset, config2) {
          var _a, _b;
          const input = dataset.value;
          if (input && typeof input === "object") {
            dataset.typed = true;
            dataset.value = {};
            const datasets = await Promise.all(
              Object.entries(input).filter(([key2]) => _isValidObjectKey(input, key2)).map(
                ([entryKey, entryValue]) => Promise.all([
                  entryKey,
                  entryValue,
                  this.key._run({ typed: false, value: entryKey }, config2),
                  this.value._run({ typed: false, value: entryValue }, config2)
                ])
              )
            );
            for (const [
              entryKey,
              entryValue,
              keyDataset,
              valueDataset
            ] of datasets) {
              if (keyDataset.issues) {
                const pathItem = {
                  type: "object",
                  origin: "key",
                  input,
                  key: entryKey,
                  value: entryValue
                };
                for (const issue of keyDataset.issues) {
                  issue.path = [pathItem];
                  (_a = dataset.issues) == null ? void 0 : _a.push(issue);
                }
                if (!dataset.issues) {
                  dataset.issues = keyDataset.issues;
                }
                if (config2.abortEarly) {
                  dataset.typed = false;
                  break;
                }
              }
              if (valueDataset.issues) {
                const pathItem = {
                  type: "object",
                  origin: "value",
                  input,
                  key: entryKey,
                  value: entryValue
                };
                for (const issue of valueDataset.issues) {
                  if (issue.path) {
                    issue.path.unshift(pathItem);
                  } else {
                    issue.path = [pathItem];
                  }
                  (_b = dataset.issues) == null ? void 0 : _b.push(issue);
                }
                if (!dataset.issues) {
                  dataset.issues = valueDataset.issues;
                }
                if (config2.abortEarly) {
                  dataset.typed = false;
                  break;
                }
              }
              if (!keyDataset.typed || !valueDataset.typed) {
                dataset.typed = false;
              }
              if (keyDataset.typed) {
                dataset.value[keyDataset.value] = valueDataset.value;
              }
            }
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function set(value2, message) {
      return {
        kind: "schema",
        type: "set",
        reference: set,
        expects: "Set",
        async: false,
        value: value2,
        message,
        _run(dataset, config2) {
          var _a;
          const input = dataset.value;
          if (input instanceof Set) {
            dataset.typed = true;
            dataset.value = /* @__PURE__ */ new Set();
            for (const inputValue of input) {
              const valueDataset = this.value._run(
                { typed: false, value: inputValue },
                config2
              );
              if (valueDataset.issues) {
                const pathItem = {
                  type: "set",
                  origin: "value",
                  input,
                  key: null,
                  value: inputValue
                };
                for (const issue of valueDataset.issues) {
                  if (issue.path) {
                    issue.path.unshift(pathItem);
                  } else {
                    issue.path = [pathItem];
                  }
                  (_a = dataset.issues) == null ? void 0 : _a.push(issue);
                }
                if (!dataset.issues) {
                  dataset.issues = valueDataset.issues;
                }
                if (config2.abortEarly) {
                  dataset.typed = false;
                  break;
                }
              }
              if (!valueDataset.typed) {
                dataset.typed = false;
              }
              dataset.value.add(valueDataset.value);
            }
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function setAsync(value2, message) {
      return {
        kind: "schema",
        type: "set",
        reference: setAsync,
        expects: "Set",
        async: true,
        value: value2,
        message,
        async _run(dataset, config2) {
          var _a;
          const input = dataset.value;
          if (input instanceof Set) {
            dataset.typed = true;
            dataset.value = /* @__PURE__ */ new Set();
            const valueDatasets = await Promise.all(
              [...input].map(
                async (inputValue) => [
                  inputValue,
                  await this.value._run(
                    { typed: false, value: inputValue },
                    config2
                  )
                ]
              )
            );
            for (const [inputValue, valueDataset] of valueDatasets) {
              if (valueDataset.issues) {
                const pathItem = {
                  type: "set",
                  origin: "value",
                  input,
                  key: null,
                  value: inputValue
                };
                for (const issue of valueDataset.issues) {
                  if (issue.path) {
                    issue.path.unshift(pathItem);
                  } else {
                    issue.path = [pathItem];
                  }
                  (_a = dataset.issues) == null ? void 0 : _a.push(issue);
                }
                if (!dataset.issues) {
                  dataset.issues = valueDataset.issues;
                }
                if (config2.abortEarly) {
                  dataset.typed = false;
                  break;
                }
              }
              if (!valueDataset.typed) {
                dataset.typed = false;
              }
              dataset.value.add(valueDataset.value);
            }
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function strictObject(entries, message) {
      return {
        kind: "schema",
        type: "strict_object",
        reference: strictObject,
        expects: "Object",
        async: false,
        entries,
        message,
        _run(dataset, config2) {
          var _a;
          const input = dataset.value;
          if (input && typeof input === "object") {
            dataset.typed = true;
            dataset.value = {};
            for (const key in this.entries) {
              const value2 = input[key];
              const valueDataset = this.entries[key]._run(
                { typed: false, value: value2 },
                config2
              );
              if (valueDataset.issues) {
                const pathItem = {
                  type: "object",
                  origin: "value",
                  input,
                  key,
                  value: value2
                };
                for (const issue of valueDataset.issues) {
                  if (issue.path) {
                    issue.path.unshift(pathItem);
                  } else {
                    issue.path = [pathItem];
                  }
                  (_a = dataset.issues) == null ? void 0 : _a.push(issue);
                }
                if (!dataset.issues) {
                  dataset.issues = valueDataset.issues;
                }
                if (config2.abortEarly) {
                  dataset.typed = false;
                  break;
                }
              }
              if (!valueDataset.typed) {
                dataset.typed = false;
              }
              if (valueDataset.value !== void 0 || key in input) {
                dataset.value[key] = valueDataset.value;
              }
            }
            if (!dataset.issues || !config2.abortEarly) {
              for (const key in input) {
                if (!(key in this.entries)) {
                  const value2 = input[key];
                  _addIssue(this, "type", dataset, config2, {
                    input: value2,
                    expected: "never",
                    path: [
                      {
                        type: "object",
                        origin: "value",
                        input,
                        key,
                        value: value2
                      }
                    ]
                  });
                  break;
                }
              }
            }
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function strictObjectAsync(entries, message) {
      return {
        kind: "schema",
        type: "strict_object",
        reference: strictObjectAsync,
        expects: "Object",
        async: true,
        entries,
        message,
        async _run(dataset, config2) {
          var _a;
          const input = dataset.value;
          if (input && typeof input === "object") {
            dataset.typed = true;
            dataset.value = {};
            const valueDatasets = await Promise.all(
              Object.entries(this.entries).map(async ([key, schema]) => {
                const value2 = input[key];
                return [
                  key,
                  value2,
                  await schema._run({ typed: false, value: value2 }, config2)
                ];
              })
            );
            for (const [key, value2, valueDataset] of valueDatasets) {
              if (valueDataset.issues) {
                const pathItem = {
                  type: "object",
                  origin: "value",
                  input,
                  key,
                  value: value2
                };
                for (const issue of valueDataset.issues) {
                  if (issue.path) {
                    issue.path.unshift(pathItem);
                  } else {
                    issue.path = [pathItem];
                  }
                  (_a = dataset.issues) == null ? void 0 : _a.push(issue);
                }
                if (!dataset.issues) {
                  dataset.issues = valueDataset.issues;
                }
                if (config2.abortEarly) {
                  dataset.typed = false;
                  break;
                }
              }
              if (!valueDataset.typed) {
                dataset.typed = false;
              }
              if (valueDataset.value !== void 0 || key in input) {
                dataset.value[key] = valueDataset.value;
              }
            }
            if (!dataset.issues || !config2.abortEarly) {
              for (const key in input) {
                if (!(key in this.entries)) {
                  const value2 = input[key];
                  _addIssue(this, "type", dataset, config2, {
                    input: value2,
                    expected: "never",
                    path: [
                      {
                        type: "object",
                        origin: "value",
                        input,
                        key,
                        value: value2
                      }
                    ]
                  });
                  break;
                }
              }
            }
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function strictTuple(items, message) {
      return {
        kind: "schema",
        type: "strict_tuple",
        reference: strictTuple,
        expects: "Array",
        async: false,
        items,
        message,
        _run(dataset, config2) {
          var _a;
          const input = dataset.value;
          if (Array.isArray(input)) {
            dataset.typed = true;
            dataset.value = [];
            for (let key = 0; key < this.items.length; key++) {
              const value2 = input[key];
              const itemDataset = this.items[key]._run(
                { typed: false, value: value2 },
                config2
              );
              if (itemDataset.issues) {
                const pathItem = {
                  type: "array",
                  origin: "value",
                  input,
                  key,
                  value: value2
                };
                for (const issue of itemDataset.issues) {
                  if (issue.path) {
                    issue.path.unshift(pathItem);
                  } else {
                    issue.path = [pathItem];
                  }
                  (_a = dataset.issues) == null ? void 0 : _a.push(issue);
                }
                if (!dataset.issues) {
                  dataset.issues = itemDataset.issues;
                }
                if (config2.abortEarly) {
                  dataset.typed = false;
                  break;
                }
              }
              if (!itemDataset.typed) {
                dataset.typed = false;
              }
              dataset.value.push(itemDataset.value);
            }
            if (!(dataset.issues && config2.abortEarly) && this.items.length < input.length) {
              const value2 = input[items.length];
              _addIssue(this, "type", dataset, config2, {
                input: value2,
                expected: "never",
                path: [
                  {
                    type: "array",
                    origin: "value",
                    input,
                    key: this.items.length,
                    value: value2
                  }
                ]
              });
            }
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function strictTupleAsync(items, message) {
      return {
        kind: "schema",
        type: "strict_tuple",
        reference: strictTupleAsync,
        expects: "Array",
        async: true,
        items,
        message,
        async _run(dataset, config2) {
          var _a;
          const input = dataset.value;
          if (Array.isArray(input)) {
            dataset.typed = true;
            dataset.value = [];
            const itemDatasets = await Promise.all(
              this.items.map(async (item, key) => {
                const value2 = input[key];
                return [
                  key,
                  value2,
                  await item._run({ typed: false, value: value2 }, config2)
                ];
              })
            );
            for (const [key, value2, itemDataset] of itemDatasets) {
              if (itemDataset.issues) {
                const pathItem = {
                  type: "array",
                  origin: "value",
                  input,
                  key,
                  value: value2
                };
                for (const issue of itemDataset.issues) {
                  if (issue.path) {
                    issue.path.unshift(pathItem);
                  } else {
                    issue.path = [pathItem];
                  }
                  (_a = dataset.issues) == null ? void 0 : _a.push(issue);
                }
                if (!dataset.issues) {
                  dataset.issues = itemDataset.issues;
                }
                if (config2.abortEarly) {
                  dataset.typed = false;
                  break;
                }
              }
              if (!itemDataset.typed) {
                dataset.typed = false;
              }
              dataset.value.push(itemDataset.value);
            }
            if (!(dataset.issues && config2.abortEarly) && this.items.length < input.length) {
              const value2 = input[items.length];
              _addIssue(this, "type", dataset, config2, {
                input: value2,
                expected: "never",
                path: [
                  {
                    type: "array",
                    origin: "value",
                    input,
                    key: this.items.length,
                    value: value2
                  }
                ]
              });
            }
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function string2(message) {
      return {
        kind: "schema",
        type: "string",
        reference: string2,
        expects: "string",
        async: false,
        message,
        _run(dataset, config2) {
          if (typeof dataset.value === "string") {
            dataset.typed = true;
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function symbol(message) {
      return {
        kind: "schema",
        type: "symbol",
        reference: symbol,
        expects: "symbol",
        async: false,
        message,
        _run(dataset, config2) {
          if (typeof dataset.value === "symbol") {
            dataset.typed = true;
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function tuple2(items, message) {
      return {
        kind: "schema",
        type: "tuple",
        reference: tuple2,
        expects: "Array",
        async: false,
        items,
        message,
        _run(dataset, config2) {
          var _a;
          const input = dataset.value;
          if (Array.isArray(input)) {
            dataset.typed = true;
            dataset.value = [];
            for (let key = 0; key < this.items.length; key++) {
              const value2 = input[key];
              const itemDataset = this.items[key]._run(
                { typed: false, value: value2 },
                config2
              );
              if (itemDataset.issues) {
                const pathItem = {
                  type: "array",
                  origin: "value",
                  input,
                  key,
                  value: value2
                };
                for (const issue of itemDataset.issues) {
                  if (issue.path) {
                    issue.path.unshift(pathItem);
                  } else {
                    issue.path = [pathItem];
                  }
                  (_a = dataset.issues) == null ? void 0 : _a.push(issue);
                }
                if (!dataset.issues) {
                  dataset.issues = itemDataset.issues;
                }
                if (config2.abortEarly) {
                  dataset.typed = false;
                  break;
                }
              }
              if (!itemDataset.typed) {
                dataset.typed = false;
              }
              dataset.value.push(itemDataset.value);
            }
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function tupleAsync(items, message) {
      return {
        kind: "schema",
        type: "tuple",
        reference: tupleAsync,
        expects: "Array",
        async: true,
        items,
        message,
        async _run(dataset, config2) {
          var _a;
          const input = dataset.value;
          if (Array.isArray(input)) {
            dataset.typed = true;
            dataset.value = [];
            const itemDatasets = await Promise.all(
              this.items.map(async (item, key) => {
                const value2 = input[key];
                return [
                  key,
                  value2,
                  await item._run({ typed: false, value: value2 }, config2)
                ];
              })
            );
            for (const [key, value2, itemDataset] of itemDatasets) {
              if (itemDataset.issues) {
                const pathItem = {
                  type: "array",
                  origin: "value",
                  input,
                  key,
                  value: value2
                };
                for (const issue of itemDataset.issues) {
                  if (issue.path) {
                    issue.path.unshift(pathItem);
                  } else {
                    issue.path = [pathItem];
                  }
                  (_a = dataset.issues) == null ? void 0 : _a.push(issue);
                }
                if (!dataset.issues) {
                  dataset.issues = itemDataset.issues;
                }
                if (config2.abortEarly) {
                  dataset.typed = false;
                  break;
                }
              }
              if (!itemDataset.typed) {
                dataset.typed = false;
              }
              dataset.value.push(itemDataset.value);
            }
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function tupleWithRest(items, rest, message) {
      return {
        kind: "schema",
        type: "tuple_with_rest",
        reference: tupleWithRest,
        expects: "Array",
        async: false,
        items,
        rest,
        message,
        _run(dataset, config2) {
          var _a, _b;
          const input = dataset.value;
          if (Array.isArray(input)) {
            dataset.typed = true;
            dataset.value = [];
            for (let key = 0; key < this.items.length; key++) {
              const value2 = input[key];
              const itemDataset = this.items[key]._run(
                { typed: false, value: value2 },
                config2
              );
              if (itemDataset.issues) {
                const pathItem = {
                  type: "array",
                  origin: "value",
                  input,
                  key,
                  value: value2
                };
                for (const issue of itemDataset.issues) {
                  if (issue.path) {
                    issue.path.unshift(pathItem);
                  } else {
                    issue.path = [pathItem];
                  }
                  (_a = dataset.issues) == null ? void 0 : _a.push(issue);
                }
                if (!dataset.issues) {
                  dataset.issues = itemDataset.issues;
                }
                if (config2.abortEarly) {
                  dataset.typed = false;
                  break;
                }
              }
              if (!itemDataset.typed) {
                dataset.typed = false;
              }
              dataset.value.push(itemDataset.value);
            }
            if (!dataset.issues || !config2.abortEarly) {
              for (let key = this.items.length; key < input.length; key++) {
                const value2 = input[key];
                const itemDataset = this.rest._run({ typed: false, value: value2 }, config2);
                if (itemDataset.issues) {
                  const pathItem = {
                    type: "array",
                    origin: "value",
                    input,
                    key,
                    value: value2
                  };
                  for (const issue of itemDataset.issues) {
                    if (issue.path) {
                      issue.path.unshift(pathItem);
                    } else {
                      issue.path = [pathItem];
                    }
                    (_b = dataset.issues) == null ? void 0 : _b.push(issue);
                  }
                  if (!dataset.issues) {
                    dataset.issues = itemDataset.issues;
                  }
                  if (config2.abortEarly) {
                    dataset.typed = false;
                    break;
                  }
                }
                if (!itemDataset.typed) {
                  dataset.typed = false;
                }
                dataset.value.push(itemDataset.value);
              }
            }
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function tupleWithRestAsync(items, rest, message) {
      return {
        kind: "schema",
        type: "tuple_with_rest",
        reference: tupleWithRestAsync,
        expects: "Array",
        async: true,
        items,
        rest,
        message,
        async _run(dataset, config2) {
          var _a, _b;
          const input = dataset.value;
          if (Array.isArray(input)) {
            dataset.typed = true;
            dataset.value = [];
            const [normalDatasets, restDatasets] = await Promise.all([
              // Parse schema of each normal item
              Promise.all(
                this.items.map(async (item, key) => {
                  const value2 = input[key];
                  return [
                    key,
                    value2,
                    await item._run({ typed: false, value: value2 }, config2)
                  ];
                })
              ),
              // Parse other items with rest schema
              Promise.all(
                input.slice(this.items.length).map(async (value2, key) => {
                  return [
                    key + this.items.length,
                    value2,
                    await this.rest._run({ typed: false, value: value2 }, config2)
                  ];
                })
              )
            ]);
            for (const [key, value2, itemDataset] of normalDatasets) {
              if (itemDataset.issues) {
                const pathItem = {
                  type: "array",
                  origin: "value",
                  input,
                  key,
                  value: value2
                };
                for (const issue of itemDataset.issues) {
                  if (issue.path) {
                    issue.path.unshift(pathItem);
                  } else {
                    issue.path = [pathItem];
                  }
                  (_a = dataset.issues) == null ? void 0 : _a.push(issue);
                }
                if (!dataset.issues) {
                  dataset.issues = itemDataset.issues;
                }
                if (config2.abortEarly) {
                  dataset.typed = false;
                  break;
                }
              }
              if (!itemDataset.typed) {
                dataset.typed = false;
              }
              dataset.value.push(itemDataset.value);
            }
            if (!dataset.issues || !config2.abortEarly) {
              for (const [key, value2, itemDataset] of restDatasets) {
                if (itemDataset.issues) {
                  const pathItem = {
                    type: "array",
                    origin: "value",
                    input,
                    key,
                    value: value2
                  };
                  for (const issue of itemDataset.issues) {
                    if (issue.path) {
                      issue.path.unshift(pathItem);
                    } else {
                      issue.path = [pathItem];
                    }
                    (_b = dataset.issues) == null ? void 0 : _b.push(issue);
                  }
                  if (!dataset.issues) {
                    dataset.issues = itemDataset.issues;
                  }
                  if (config2.abortEarly) {
                    dataset.typed = false;
                    break;
                  }
                }
                if (!itemDataset.typed) {
                  dataset.typed = false;
                }
                dataset.value.push(itemDataset.value);
              }
            }
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function undefined_(message) {
      return {
        kind: "schema",
        type: "undefined",
        reference: undefined_,
        expects: "undefined",
        async: false,
        message,
        _run(dataset, config2) {
          if (dataset.value === void 0) {
            dataset.typed = true;
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function _subIssues(datasets) {
      let issues;
      if (datasets) {
        for (const dataset of datasets) {
          if (issues) {
            issues.push(...dataset.issues);
          } else {
            issues = dataset.issues;
          }
        }
      }
      return issues;
    }
    function union2(options, message) {
      return {
        kind: "schema",
        type: "union",
        reference: union2,
        expects: [...new Set(options.map((option) => option.expects))].join(" | ") || "never",
        async: false,
        options,
        message,
        _run(dataset, config2) {
          let validDataset;
          let typedDatasets;
          let untypedDatasets;
          for (const schema of this.options) {
            const optionDataset = schema._run(
              { typed: false, value: dataset.value },
              config2
            );
            if (optionDataset.typed) {
              if (optionDataset.issues) {
                if (typedDatasets) {
                  typedDatasets.push(optionDataset);
                } else {
                  typedDatasets = [optionDataset];
                }
              } else {
                validDataset = optionDataset;
                break;
              }
            } else {
              if (untypedDatasets) {
                untypedDatasets.push(optionDataset);
              } else {
                untypedDatasets = [optionDataset];
              }
            }
          }
          if (validDataset) {
            return validDataset;
          }
          if (typedDatasets) {
            if (typedDatasets.length === 1) {
              return typedDatasets[0];
            }
            _addIssue(this, "type", dataset, config2, {
              issues: _subIssues(typedDatasets)
            });
            dataset.typed = true;
          } else if ((untypedDatasets == null ? void 0 : untypedDatasets.length) === 1) {
            return untypedDatasets[0];
          } else {
            _addIssue(this, "type", dataset, config2, {
              issues: _subIssues(untypedDatasets)
            });
          }
          return dataset;
        }
      };
    }
    function unionAsync(options, message) {
      return {
        kind: "schema",
        type: "union",
        reference: unionAsync,
        expects: [...new Set(options.map((option) => option.expects))].join(" | ") || "never",
        async: true,
        options,
        message,
        async _run(dataset, config2) {
          let validDataset;
          let typedDatasets;
          let untypedDatasets;
          for (const schema of this.options) {
            const optionDataset = await schema._run(
              { typed: false, value: dataset.value },
              config2
            );
            if (optionDataset.typed) {
              if (optionDataset.issues) {
                if (typedDatasets) {
                  typedDatasets.push(optionDataset);
                } else {
                  typedDatasets = [optionDataset];
                }
              } else {
                validDataset = optionDataset;
                break;
              }
            } else {
              if (untypedDatasets) {
                untypedDatasets.push(optionDataset);
              } else {
                untypedDatasets = [optionDataset];
              }
            }
          }
          if (validDataset) {
            return validDataset;
          }
          if (typedDatasets) {
            if (typedDatasets.length === 1) {
              return typedDatasets[0];
            }
            _addIssue(this, "type", dataset, config2, {
              issues: _subIssues(typedDatasets)
            });
            dataset.typed = true;
          } else if ((untypedDatasets == null ? void 0 : untypedDatasets.length) === 1) {
            return untypedDatasets[0];
          } else {
            _addIssue(this, "type", dataset, config2, {
              issues: _subIssues(untypedDatasets)
            });
          }
          return dataset;
        }
      };
    }
    function unknown2() {
      return {
        kind: "schema",
        type: "unknown",
        reference: unknown2,
        expects: "unknown",
        async: false,
        _run(dataset) {
          dataset.typed = true;
          return dataset;
        }
      };
    }
    function _discriminators(key, options, set2 = /* @__PURE__ */ new Set()) {
      for (const schema of options) {
        if (schema.type === "variant") {
          _discriminators(key, schema.options, set2);
        } else {
          set2.add(schema.entries[key].expects);
        }
      }
      return set2;
    }
    function variant(key, options, message) {
      let expectedDiscriminators;
      return {
        kind: "schema",
        type: "variant",
        reference: variant,
        expects: "Object",
        async: false,
        key,
        options,
        message,
        _run(dataset, config2) {
          const input = dataset.value;
          if (input && typeof input === "object") {
            const discriminator = input[this.key];
            if (this.key in input) {
              let outputDataset;
              for (const schema of this.options) {
                if (schema.type === "variant" || !schema.entries[this.key]._run(
                  { typed: false, value: discriminator },
                  config2
                ).issues) {
                  const optionDataset = schema._run(
                    { typed: false, value: input },
                    config2
                  );
                  if (!optionDataset.issues) {
                    return optionDataset;
                  }
                  if (!outputDataset || !outputDataset.typed && optionDataset.typed) {
                    outputDataset = optionDataset;
                  }
                }
              }
              if (outputDataset) {
                return outputDataset;
              }
            }
            if (!expectedDiscriminators) {
              expectedDiscriminators = [..._discriminators(this.key, this.options)].join(" | ") || "never";
            }
            _addIssue(this, "type", dataset, config2, {
              input: discriminator,
              expected: expectedDiscriminators,
              path: [
                {
                  type: "object",
                  origin: "value",
                  input,
                  key: this.key,
                  value: discriminator
                }
              ]
            });
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function variantAsync(key, options, message) {
      let expectedDiscriminators;
      return {
        kind: "schema",
        type: "variant",
        reference: variantAsync,
        expects: "Object",
        async: true,
        key,
        options,
        message,
        async _run(dataset, config2) {
          const input = dataset.value;
          if (input && typeof input === "object") {
            const discriminator = input[this.key];
            if (this.key in input) {
              let outputDataset;
              for (const schema of this.options) {
                if (schema.type === "variant" || !(await schema.entries[this.key]._run(
                  { typed: false, value: discriminator },
                  config2
                )).issues) {
                  const optionDataset = await schema._run(
                    { typed: false, value: input },
                    config2
                  );
                  if (!optionDataset.issues) {
                    return optionDataset;
                  }
                  if (!outputDataset || !outputDataset.typed && optionDataset.typed) {
                    outputDataset = optionDataset;
                  }
                }
              }
              if (outputDataset) {
                return outputDataset;
              }
            }
            if (!expectedDiscriminators) {
              expectedDiscriminators = [..._discriminators(this.key, this.options)].join(" | ") || "never";
            }
            _addIssue(this, "type", dataset, config2, {
              input: discriminator,
              expected: expectedDiscriminators,
              path: [
                {
                  type: "object",
                  origin: "value",
                  input,
                  key: this.key,
                  value: discriminator
                }
              ]
            });
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function void_(message) {
      return {
        kind: "schema",
        type: "void",
        reference: void_,
        expects: "void",
        async: false,
        message,
        _run(dataset, config2) {
          if (dataset.value === void 0) {
            dataset.typed = true;
          } else {
            _addIssue(this, "type", dataset, config2);
          }
          return dataset;
        }
      };
    }
    function keyof(schema, message) {
      return picklist(Object.keys(schema.entries), message);
    }
    function omit(schema, keys) {
      const entries = {
        ...schema.entries
      };
      for (const key of keys) {
        delete entries[key];
      }
      return { ...schema, entries };
    }
    function parse2(schema, input, config2) {
      const dataset = schema._run(
        { typed: false, value: input },
        getGlobalConfig(config2)
      );
      if (dataset.issues) {
        throw new ValiError(dataset.issues);
      }
      return dataset.value;
    }
    async function parseAsync(schema, input, config2) {
      const dataset = await schema._run(
        { typed: false, value: input },
        getGlobalConfig(config2)
      );
      if (dataset.issues) {
        throw new ValiError(dataset.issues);
      }
      return dataset.value;
    }
    function parser(schema, config2) {
      const func = (input) => parse2(schema, input, config2);
      func.schema = schema;
      func.config = config2;
      return func;
    }
    function parserAsync(schema, config2) {
      const func = (input) => parseAsync(schema, input, config2);
      func.schema = schema;
      func.config = config2;
      return func;
    }
    function partial(schema, keys) {
      const entries = {};
      for (const key in schema.entries) {
        entries[key] = !keys || keys.includes(key) ? optional2(schema.entries[key]) : schema.entries[key];
      }
      return { ...schema, entries };
    }
    function partialAsync(schema, keys) {
      const entries = {};
      for (const key in schema.entries) {
        entries[key] = !keys || keys.includes(key) ? optionalAsync(schema.entries[key]) : schema.entries[key];
      }
      return { ...schema, entries };
    }
    function pick(schema, keys) {
      const entries = {};
      for (const key of keys) {
        entries[key] = schema.entries[key];
      }
      return { ...schema, entries };
    }
    function pipe(...pipe2) {
      return {
        ...pipe2[0],
        pipe: pipe2,
        _run(dataset, config2) {
          for (let index = 0; index < pipe2.length; index++) {
            if (dataset.issues && (pipe2[index].kind === "schema" || pipe2[index].kind === "transformation")) {
              dataset.typed = false;
              break;
            }
            if (!dataset.issues || !config2.abortEarly && !config2.abortPipeEarly) {
              dataset = pipe2[index]._run(dataset, config2);
            }
          }
          return dataset;
        }
      };
    }
    function pipeAsync(...pipe2) {
      return {
        ...pipe2[0],
        pipe: pipe2,
        async: true,
        async _run(dataset, config2) {
          for (let index = 0; index < pipe2.length; index++) {
            if (dataset.issues && (pipe2[index].kind === "schema" || pipe2[index].kind === "transformation")) {
              dataset.typed = false;
              break;
            }
            if (!dataset.issues || !config2.abortEarly && !config2.abortPipeEarly) {
              dataset = await pipe2[index]._run(dataset, config2);
            }
          }
          return dataset;
        }
      };
    }
    function required(schema, arg2, arg3) {
      const keys = Array.isArray(arg2) ? arg2 : void 0;
      const message = Array.isArray(arg2) ? arg3 : arg2;
      const entries = {};
      for (const key in schema.entries) {
        entries[key] = !keys || keys.includes(key) ? nonOptional(schema.entries[key], message) : schema.entries[key];
      }
      return { ...schema, entries };
    }
    function requiredAsync(schema, arg2, arg3) {
      const keys = Array.isArray(arg2) ? arg2 : void 0;
      const message = Array.isArray(arg2) ? arg3 : arg2;
      const entries = {};
      for (const key in schema.entries) {
        entries[key] = !keys || keys.includes(key) ? nonOptionalAsync(schema.entries[key], message) : schema.entries[key];
      }
      return { ...schema, entries };
    }
    function safeParse(schema, input, config2) {
      const dataset = schema._run(
        { typed: false, value: input },
        getGlobalConfig(config2)
      );
      return {
        typed: dataset.typed,
        success: !dataset.issues,
        output: dataset.value,
        issues: dataset.issues
      };
    }
    async function safeParseAsync(schema, input, config2) {
      const dataset = await schema._run(
        { typed: false, value: input },
        getGlobalConfig(config2)
      );
      return {
        typed: dataset.typed,
        success: !dataset.issues,
        output: dataset.value,
        issues: dataset.issues
      };
    }
    function safeParser(schema, config2) {
      const func = (input) => safeParse(schema, input, config2);
      func.schema = schema;
      func.config = config2;
      return func;
    }
    function safeParserAsync(schema, config2) {
      const func = (input) => safeParseAsync(schema, input, config2);
      func.schema = schema;
      func.config = config2;
      return func;
    }
    function unwrap(schema) {
      return schema.wrapped;
    }
  }
});

// node_modules/@mysten/sui/dist/cjs/transactions/data/internal.js
var require_internal = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/transactions/data/internal.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var internal_exports = {};
    __export2(internal_exports, {
      $Intent: () => $Intent,
      Argument: () => Argument,
      BCSBytes: () => BCSBytes,
      Command: () => Command,
      GasData: () => GasData,
      JsonU64: () => JsonU64,
      NormalizedCallArg: () => NormalizedCallArg,
      ObjectArg: () => ObjectArg,
      ObjectID: () => ObjectID,
      ObjectRef: () => ObjectRef,
      OpenMoveTypeSignature: () => OpenMoveTypeSignature,
      OpenMoveTypeSignatureBody: () => OpenMoveTypeSignatureBody,
      StructTag: () => StructTag,
      SuiAddress: () => SuiAddress,
      TransactionData: () => TransactionData,
      TransactionExpiration: () => TransactionExpiration,
      safeEnum: () => safeEnum
    });
    module2.exports = __toCommonJS2(internal_exports);
    var import_valibot = require_dist();
    var import_sui_types = require_sui_types();
    function safeEnum(options) {
      const unionOptions = Object.entries(options).map(([key, value]) => (0, import_valibot.object)({ [key]: value }));
      return (0, import_valibot.pipe)(
        (0, import_valibot.union)(unionOptions),
        (0, import_valibot.transform)((value) => ({
          ...value,
          $kind: Object.keys(value)[0]
        }))
      );
    }
    var SuiAddress = (0, import_valibot.pipe)(
      (0, import_valibot.string)(),
      (0, import_valibot.transform)((value) => (0, import_sui_types.normalizeSuiAddress)(value)),
      (0, import_valibot.check)(import_sui_types.isValidSuiAddress)
    );
    var ObjectID = SuiAddress;
    var BCSBytes = (0, import_valibot.string)();
    var JsonU64 = (0, import_valibot.pipe)(
      (0, import_valibot.union)([(0, import_valibot.string)(), (0, import_valibot.pipe)((0, import_valibot.number)(), (0, import_valibot.integer)())]),
      (0, import_valibot.check)((val) => {
        try {
          BigInt(val);
          return BigInt(val) >= 0 && BigInt(val) <= 18446744073709551615n;
        } catch {
          return false;
        }
      }, "Invalid u64")
    );
    var ObjectRef = (0, import_valibot.object)({
      objectId: SuiAddress,
      version: JsonU64,
      digest: (0, import_valibot.string)()
    });
    var Argument = (0, import_valibot.pipe)(
      (0, import_valibot.union)([
        (0, import_valibot.object)({ GasCoin: (0, import_valibot.literal)(true) }),
        (0, import_valibot.object)({ Input: (0, import_valibot.pipe)((0, import_valibot.number)(), (0, import_valibot.integer)()), type: (0, import_valibot.optional)((0, import_valibot.literal)("pure")) }),
        (0, import_valibot.object)({ Input: (0, import_valibot.pipe)((0, import_valibot.number)(), (0, import_valibot.integer)()), type: (0, import_valibot.optional)((0, import_valibot.literal)("object")) }),
        (0, import_valibot.object)({ Result: (0, import_valibot.pipe)((0, import_valibot.number)(), (0, import_valibot.integer)()) }),
        (0, import_valibot.object)({ NestedResult: (0, import_valibot.tuple)([(0, import_valibot.pipe)((0, import_valibot.number)(), (0, import_valibot.integer)()), (0, import_valibot.pipe)((0, import_valibot.number)(), (0, import_valibot.integer)())]) })
      ]),
      (0, import_valibot.transform)((value) => ({
        ...value,
        $kind: Object.keys(value)[0]
      }))
      // Defined manually to add `type?: 'pure' | 'object'` to Input
    );
    var GasData = (0, import_valibot.object)({
      budget: (0, import_valibot.nullable)(JsonU64),
      price: (0, import_valibot.nullable)(JsonU64),
      owner: (0, import_valibot.nullable)(SuiAddress),
      payment: (0, import_valibot.nullable)((0, import_valibot.array)(ObjectRef))
    });
    var StructTag = (0, import_valibot.object)({
      address: (0, import_valibot.string)(),
      module: (0, import_valibot.string)(),
      name: (0, import_valibot.string)(),
      // type_params in rust, should be updated to use camelCase
      typeParams: (0, import_valibot.array)((0, import_valibot.string)())
    });
    var OpenMoveTypeSignatureBody = (0, import_valibot.union)([
      (0, import_valibot.literal)("address"),
      (0, import_valibot.literal)("bool"),
      (0, import_valibot.literal)("u8"),
      (0, import_valibot.literal)("u16"),
      (0, import_valibot.literal)("u32"),
      (0, import_valibot.literal)("u64"),
      (0, import_valibot.literal)("u128"),
      (0, import_valibot.literal)("u256"),
      (0, import_valibot.object)({ vector: (0, import_valibot.lazy)(() => OpenMoveTypeSignatureBody) }),
      (0, import_valibot.object)({
        datatype: (0, import_valibot.object)({
          package: (0, import_valibot.string)(),
          module: (0, import_valibot.string)(),
          type: (0, import_valibot.string)(),
          typeParameters: (0, import_valibot.array)((0, import_valibot.lazy)(() => OpenMoveTypeSignatureBody))
        })
      }),
      (0, import_valibot.object)({ typeParameter: (0, import_valibot.pipe)((0, import_valibot.number)(), (0, import_valibot.integer)()) })
    ]);
    var OpenMoveTypeSignature = (0, import_valibot.object)({
      ref: (0, import_valibot.nullable)((0, import_valibot.union)([(0, import_valibot.literal)("&"), (0, import_valibot.literal)("&mut")])),
      body: OpenMoveTypeSignatureBody
    });
    var ProgrammableMoveCall = (0, import_valibot.object)({
      package: ObjectID,
      module: (0, import_valibot.string)(),
      function: (0, import_valibot.string)(),
      // snake case in rust
      typeArguments: (0, import_valibot.array)((0, import_valibot.string)()),
      arguments: (0, import_valibot.array)(Argument),
      _argumentTypes: (0, import_valibot.optional)((0, import_valibot.nullable)((0, import_valibot.array)(OpenMoveTypeSignature)))
    });
    var $Intent = (0, import_valibot.object)({
      name: (0, import_valibot.string)(),
      inputs: (0, import_valibot.record)((0, import_valibot.string)(), (0, import_valibot.union)([Argument, (0, import_valibot.array)(Argument)])),
      data: (0, import_valibot.record)((0, import_valibot.string)(), (0, import_valibot.unknown)())
    });
    var Command = safeEnum({
      MoveCall: ProgrammableMoveCall,
      TransferObjects: (0, import_valibot.object)({
        objects: (0, import_valibot.array)(Argument),
        address: Argument
      }),
      SplitCoins: (0, import_valibot.object)({
        coin: Argument,
        amounts: (0, import_valibot.array)(Argument)
      }),
      MergeCoins: (0, import_valibot.object)({
        destination: Argument,
        sources: (0, import_valibot.array)(Argument)
      }),
      Publish: (0, import_valibot.object)({
        modules: (0, import_valibot.array)(BCSBytes),
        dependencies: (0, import_valibot.array)(ObjectID)
      }),
      MakeMoveVec: (0, import_valibot.object)({
        type: (0, import_valibot.nullable)((0, import_valibot.string)()),
        elements: (0, import_valibot.array)(Argument)
      }),
      Upgrade: (0, import_valibot.object)({
        modules: (0, import_valibot.array)(BCSBytes),
        dependencies: (0, import_valibot.array)(ObjectID),
        package: ObjectID,
        ticket: Argument
      }),
      $Intent
    });
    var ObjectArg = safeEnum({
      ImmOrOwnedObject: ObjectRef,
      SharedObject: (0, import_valibot.object)({
        objectId: ObjectID,
        // snake case in rust
        initialSharedVersion: JsonU64,
        mutable: (0, import_valibot.boolean)()
      }),
      Receiving: ObjectRef
    });
    var CallArg = safeEnum({
      Object: ObjectArg,
      Pure: (0, import_valibot.object)({
        bytes: BCSBytes
      }),
      UnresolvedPure: (0, import_valibot.object)({
        value: (0, import_valibot.unknown)()
      }),
      UnresolvedObject: (0, import_valibot.object)({
        objectId: ObjectID,
        version: (0, import_valibot.optional)((0, import_valibot.nullable)(JsonU64)),
        digest: (0, import_valibot.optional)((0, import_valibot.nullable)((0, import_valibot.string)())),
        initialSharedVersion: (0, import_valibot.optional)((0, import_valibot.nullable)(JsonU64))
      })
    });
    var NormalizedCallArg = safeEnum({
      Object: ObjectArg,
      Pure: (0, import_valibot.object)({
        bytes: BCSBytes
      })
    });
    var TransactionExpiration = safeEnum({
      None: (0, import_valibot.literal)(true),
      Epoch: JsonU64
    });
    var TransactionData = (0, import_valibot.object)({
      version: (0, import_valibot.literal)(2),
      sender: (0, import_valibot.nullish)(SuiAddress),
      expiration: (0, import_valibot.nullish)(TransactionExpiration),
      gasData: GasData,
      inputs: (0, import_valibot.array)(CallArg),
      commands: (0, import_valibot.array)(Command)
    });
  }
});

// node_modules/@mysten/sui/dist/cjs/transactions/Commands.js
var require_Commands = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/transactions/Commands.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var Commands_exports = {};
    __export2(Commands_exports, {
      Commands: () => Commands,
      UpgradePolicy: () => UpgradePolicy
    });
    module2.exports = __toCommonJS2(Commands_exports);
    var import_bcs = require_cjs();
    var import_valibot = require_dist();
    var import_sui_types = require_sui_types();
    var import_internal = require_internal();
    var UpgradePolicy = ((UpgradePolicy2) => {
      UpgradePolicy2[UpgradePolicy2["COMPATIBLE"] = 0] = "COMPATIBLE";
      UpgradePolicy2[UpgradePolicy2["ADDITIVE"] = 128] = "ADDITIVE";
      UpgradePolicy2[UpgradePolicy2["DEP_ONLY"] = 192] = "DEP_ONLY";
      return UpgradePolicy2;
    })(UpgradePolicy || {});
    var Commands = {
      MoveCall(input) {
        const [pkg, mod2 = "", fn = ""] = "target" in input ? input.target.split("::") : [input.package, input.module, input.function];
        return {
          $kind: "MoveCall",
          MoveCall: {
            package: pkg,
            module: mod2,
            function: fn,
            typeArguments: input.typeArguments ?? [],
            arguments: input.arguments ?? []
          }
        };
      },
      TransferObjects(objects, address) {
        return {
          $kind: "TransferObjects",
          TransferObjects: {
            objects: objects.map((o) => (0, import_valibot.parse)(import_internal.Argument, o)),
            address: (0, import_valibot.parse)(import_internal.Argument, address)
          }
        };
      },
      SplitCoins(coin, amounts) {
        return {
          $kind: "SplitCoins",
          SplitCoins: {
            coin: (0, import_valibot.parse)(import_internal.Argument, coin),
            amounts: amounts.map((o) => (0, import_valibot.parse)(import_internal.Argument, o))
          }
        };
      },
      MergeCoins(destination, sources) {
        return {
          $kind: "MergeCoins",
          MergeCoins: {
            destination: (0, import_valibot.parse)(import_internal.Argument, destination),
            sources: sources.map((o) => (0, import_valibot.parse)(import_internal.Argument, o))
          }
        };
      },
      Publish({
        modules,
        dependencies
      }) {
        return {
          $kind: "Publish",
          Publish: {
            modules: modules.map(
              (module22) => typeof module22 === "string" ? module22 : (0, import_bcs.toBase64)(new Uint8Array(module22))
            ),
            dependencies: dependencies.map((dep) => (0, import_sui_types.normalizeSuiObjectId)(dep))
          }
        };
      },
      Upgrade({
        modules,
        dependencies,
        package: packageId,
        ticket
      }) {
        return {
          $kind: "Upgrade",
          Upgrade: {
            modules: modules.map(
              (module22) => typeof module22 === "string" ? module22 : (0, import_bcs.toBase64)(new Uint8Array(module22))
            ),
            dependencies: dependencies.map((dep) => (0, import_sui_types.normalizeSuiObjectId)(dep)),
            package: packageId,
            ticket: (0, import_valibot.parse)(import_internal.Argument, ticket)
          }
        };
      },
      MakeMoveVec({
        type: type2,
        elements
      }) {
        return {
          $kind: "MakeMoveVec",
          MakeMoveVec: {
            type: type2 ?? null,
            elements: elements.map((o) => (0, import_valibot.parse)(import_internal.Argument, o))
          }
        };
      },
      Intent({
        name,
        inputs = {},
        data = {}
      }) {
        return {
          $kind: "$Intent",
          $Intent: {
            name,
            inputs: Object.fromEntries(
              Object.entries(inputs).map(([key, value]) => [
                key,
                Array.isArray(value) ? value.map((o) => (0, import_valibot.parse)(import_internal.Argument, o)) : (0, import_valibot.parse)(import_internal.Argument, value)
              ])
            ),
            data
          }
        };
      }
    };
  }
});

// node_modules/@mysten/sui/dist/cjs/transactions/data/v1.js
var require_v1 = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/transactions/data/v1.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var v1_exports = {};
    __export2(v1_exports, {
      NormalizedCallArg: () => NormalizedCallArg,
      ObjectRef: () => ObjectRef,
      SerializedTransactionDataV1: () => SerializedTransactionDataV1,
      StructTag: () => StructTag,
      TransactionArgument: () => TransactionArgument,
      TypeTag: () => TypeTag,
      serializeV1TransactionData: () => serializeV1TransactionData,
      transactionDataFromV1: () => transactionDataFromV1
    });
    module2.exports = __toCommonJS2(v1_exports);
    var import_bcs = require_cjs();
    var import_valibot = require_dist();
    var import_bcs2 = require_bcs3();
    var import_internal = require_internal();
    var ObjectRef = (0, import_valibot.object)({
      digest: (0, import_valibot.string)(),
      objectId: (0, import_valibot.string)(),
      version: (0, import_valibot.union)([(0, import_valibot.pipe)((0, import_valibot.number)(), (0, import_valibot.integer)()), (0, import_valibot.string)(), (0, import_valibot.bigint)()])
    });
    var ObjectArg = (0, import_internal.safeEnum)({
      ImmOrOwned: ObjectRef,
      Shared: (0, import_valibot.object)({
        objectId: import_internal.ObjectID,
        initialSharedVersion: import_internal.JsonU64,
        mutable: (0, import_valibot.boolean)()
      }),
      Receiving: ObjectRef
    });
    var NormalizedCallArg = (0, import_internal.safeEnum)({
      Object: ObjectArg,
      Pure: (0, import_valibot.array)((0, import_valibot.pipe)((0, import_valibot.number)(), (0, import_valibot.integer)()))
    });
    var TransactionInput = (0, import_valibot.union)([
      (0, import_valibot.object)({
        kind: (0, import_valibot.literal)("Input"),
        index: (0, import_valibot.pipe)((0, import_valibot.number)(), (0, import_valibot.integer)()),
        value: (0, import_valibot.unknown)(),
        type: (0, import_valibot.optional)((0, import_valibot.literal)("object"))
      }),
      (0, import_valibot.object)({
        kind: (0, import_valibot.literal)("Input"),
        index: (0, import_valibot.pipe)((0, import_valibot.number)(), (0, import_valibot.integer)()),
        value: (0, import_valibot.unknown)(),
        type: (0, import_valibot.literal)("pure")
      })
    ]);
    var TransactionExpiration = (0, import_valibot.union)([
      (0, import_valibot.object)({ Epoch: (0, import_valibot.pipe)((0, import_valibot.number)(), (0, import_valibot.integer)()) }),
      (0, import_valibot.object)({ None: (0, import_valibot.nullable)((0, import_valibot.literal)(true)) })
    ]);
    var StringEncodedBigint = (0, import_valibot.pipe)(
      (0, import_valibot.union)([(0, import_valibot.number)(), (0, import_valibot.string)(), (0, import_valibot.bigint)()]),
      (0, import_valibot.check)((val) => {
        if (!["string", "number", "bigint"].includes(typeof val)) return false;
        try {
          BigInt(val);
          return true;
        } catch {
          return false;
        }
      })
    );
    var TypeTag = (0, import_valibot.union)([
      (0, import_valibot.object)({ bool: (0, import_valibot.nullable)((0, import_valibot.literal)(true)) }),
      (0, import_valibot.object)({ u8: (0, import_valibot.nullable)((0, import_valibot.literal)(true)) }),
      (0, import_valibot.object)({ u64: (0, import_valibot.nullable)((0, import_valibot.literal)(true)) }),
      (0, import_valibot.object)({ u128: (0, import_valibot.nullable)((0, import_valibot.literal)(true)) }),
      (0, import_valibot.object)({ address: (0, import_valibot.nullable)((0, import_valibot.literal)(true)) }),
      (0, import_valibot.object)({ signer: (0, import_valibot.nullable)((0, import_valibot.literal)(true)) }),
      (0, import_valibot.object)({ vector: (0, import_valibot.lazy)(() => TypeTag) }),
      (0, import_valibot.object)({ struct: (0, import_valibot.lazy)(() => StructTag) }),
      (0, import_valibot.object)({ u16: (0, import_valibot.nullable)((0, import_valibot.literal)(true)) }),
      (0, import_valibot.object)({ u32: (0, import_valibot.nullable)((0, import_valibot.literal)(true)) }),
      (0, import_valibot.object)({ u256: (0, import_valibot.nullable)((0, import_valibot.literal)(true)) })
    ]);
    var StructTag = (0, import_valibot.object)({
      address: (0, import_valibot.string)(),
      module: (0, import_valibot.string)(),
      name: (0, import_valibot.string)(),
      typeParams: (0, import_valibot.array)(TypeTag)
    });
    var GasConfig = (0, import_valibot.object)({
      budget: (0, import_valibot.optional)(StringEncodedBigint),
      price: (0, import_valibot.optional)(StringEncodedBigint),
      payment: (0, import_valibot.optional)((0, import_valibot.array)(ObjectRef)),
      owner: (0, import_valibot.optional)((0, import_valibot.string)())
    });
    var TransactionArgumentTypes = [
      TransactionInput,
      (0, import_valibot.object)({ kind: (0, import_valibot.literal)("GasCoin") }),
      (0, import_valibot.object)({ kind: (0, import_valibot.literal)("Result"), index: (0, import_valibot.pipe)((0, import_valibot.number)(), (0, import_valibot.integer)()) }),
      (0, import_valibot.object)({
        kind: (0, import_valibot.literal)("NestedResult"),
        index: (0, import_valibot.pipe)((0, import_valibot.number)(), (0, import_valibot.integer)()),
        resultIndex: (0, import_valibot.pipe)((0, import_valibot.number)(), (0, import_valibot.integer)())
      })
    ];
    var TransactionArgument = (0, import_valibot.union)([...TransactionArgumentTypes]);
    var MoveCallTransaction = (0, import_valibot.object)({
      kind: (0, import_valibot.literal)("MoveCall"),
      target: (0, import_valibot.pipe)(
        (0, import_valibot.string)(),
        (0, import_valibot.check)((target) => target.split("::").length === 3)
      ),
      typeArguments: (0, import_valibot.array)((0, import_valibot.string)()),
      arguments: (0, import_valibot.array)(TransactionArgument)
    });
    var TransferObjectsTransaction = (0, import_valibot.object)({
      kind: (0, import_valibot.literal)("TransferObjects"),
      objects: (0, import_valibot.array)(TransactionArgument),
      address: TransactionArgument
    });
    var SplitCoinsTransaction = (0, import_valibot.object)({
      kind: (0, import_valibot.literal)("SplitCoins"),
      coin: TransactionArgument,
      amounts: (0, import_valibot.array)(TransactionArgument)
    });
    var MergeCoinsTransaction = (0, import_valibot.object)({
      kind: (0, import_valibot.literal)("MergeCoins"),
      destination: TransactionArgument,
      sources: (0, import_valibot.array)(TransactionArgument)
    });
    var MakeMoveVecTransaction = (0, import_valibot.object)({
      kind: (0, import_valibot.literal)("MakeMoveVec"),
      type: (0, import_valibot.union)([(0, import_valibot.object)({ Some: TypeTag }), (0, import_valibot.object)({ None: (0, import_valibot.nullable)((0, import_valibot.literal)(true)) })]),
      objects: (0, import_valibot.array)(TransactionArgument)
    });
    var PublishTransaction = (0, import_valibot.object)({
      kind: (0, import_valibot.literal)("Publish"),
      modules: (0, import_valibot.array)((0, import_valibot.array)((0, import_valibot.pipe)((0, import_valibot.number)(), (0, import_valibot.integer)()))),
      dependencies: (0, import_valibot.array)((0, import_valibot.string)())
    });
    var UpgradeTransaction = (0, import_valibot.object)({
      kind: (0, import_valibot.literal)("Upgrade"),
      modules: (0, import_valibot.array)((0, import_valibot.array)((0, import_valibot.pipe)((0, import_valibot.number)(), (0, import_valibot.integer)()))),
      dependencies: (0, import_valibot.array)((0, import_valibot.string)()),
      packageId: (0, import_valibot.string)(),
      ticket: TransactionArgument
    });
    var TransactionTypes = [
      MoveCallTransaction,
      TransferObjectsTransaction,
      SplitCoinsTransaction,
      MergeCoinsTransaction,
      PublishTransaction,
      UpgradeTransaction,
      MakeMoveVecTransaction
    ];
    var TransactionType = (0, import_valibot.union)([...TransactionTypes]);
    var SerializedTransactionDataV1 = (0, import_valibot.object)({
      version: (0, import_valibot.literal)(1),
      sender: (0, import_valibot.optional)((0, import_valibot.string)()),
      expiration: (0, import_valibot.nullish)(TransactionExpiration),
      gasConfig: GasConfig,
      inputs: (0, import_valibot.array)(TransactionInput),
      transactions: (0, import_valibot.array)(TransactionType)
    });
    function serializeV1TransactionData(transactionData) {
      var _a;
      const inputs = transactionData.inputs.map(
        (input, index) => {
          if (input.Object) {
            return {
              kind: "Input",
              index,
              value: {
                Object: input.Object.ImmOrOwnedObject ? {
                  ImmOrOwned: input.Object.ImmOrOwnedObject
                } : input.Object.Receiving ? {
                  Receiving: {
                    digest: input.Object.Receiving.digest,
                    version: input.Object.Receiving.version,
                    objectId: input.Object.Receiving.objectId
                  }
                } : {
                  Shared: {
                    mutable: input.Object.SharedObject.mutable,
                    initialSharedVersion: input.Object.SharedObject.initialSharedVersion,
                    objectId: input.Object.SharedObject.objectId
                  }
                }
              },
              type: "object"
            };
          }
          if (input.Pure) {
            return {
              kind: "Input",
              index,
              value: {
                Pure: Array.from((0, import_bcs.fromBase64)(input.Pure.bytes))
              },
              type: "pure"
            };
          }
          if (input.UnresolvedPure) {
            return {
              kind: "Input",
              type: "pure",
              index,
              value: input.UnresolvedPure.value
            };
          }
          if (input.UnresolvedObject) {
            return {
              kind: "Input",
              type: "object",
              index,
              value: input.UnresolvedObject.objectId
            };
          }
          throw new Error("Invalid input");
        }
      );
      return {
        version: 1,
        sender: transactionData.sender ?? void 0,
        expiration: ((_a = transactionData.expiration) == null ? void 0 : _a.$kind) === "Epoch" ? { Epoch: Number(transactionData.expiration.Epoch) } : transactionData.expiration ? { None: true } : null,
        gasConfig: {
          owner: transactionData.gasData.owner ?? void 0,
          budget: transactionData.gasData.budget ?? void 0,
          price: transactionData.gasData.price ?? void 0,
          payment: transactionData.gasData.payment ?? void 0
        },
        inputs,
        transactions: transactionData.commands.map((command) => {
          if (command.MakeMoveVec) {
            return {
              kind: "MakeMoveVec",
              type: command.MakeMoveVec.type === null ? { None: true } : { Some: import_bcs2.TypeTagSerializer.parseFromStr(command.MakeMoveVec.type) },
              objects: command.MakeMoveVec.elements.map(
                (arg) => convertTransactionArgument(arg, inputs)
              )
            };
          }
          if (command.MergeCoins) {
            return {
              kind: "MergeCoins",
              destination: convertTransactionArgument(command.MergeCoins.destination, inputs),
              sources: command.MergeCoins.sources.map((arg) => convertTransactionArgument(arg, inputs))
            };
          }
          if (command.MoveCall) {
            return {
              kind: "MoveCall",
              target: `${command.MoveCall.package}::${command.MoveCall.module}::${command.MoveCall.function}`,
              typeArguments: command.MoveCall.typeArguments,
              arguments: command.MoveCall.arguments.map(
                (arg) => convertTransactionArgument(arg, inputs)
              )
            };
          }
          if (command.Publish) {
            return {
              kind: "Publish",
              modules: command.Publish.modules.map((mod2) => Array.from((0, import_bcs.fromBase64)(mod2))),
              dependencies: command.Publish.dependencies
            };
          }
          if (command.SplitCoins) {
            return {
              kind: "SplitCoins",
              coin: convertTransactionArgument(command.SplitCoins.coin, inputs),
              amounts: command.SplitCoins.amounts.map((arg) => convertTransactionArgument(arg, inputs))
            };
          }
          if (command.TransferObjects) {
            return {
              kind: "TransferObjects",
              objects: command.TransferObjects.objects.map(
                (arg) => convertTransactionArgument(arg, inputs)
              ),
              address: convertTransactionArgument(command.TransferObjects.address, inputs)
            };
          }
          if (command.Upgrade) {
            return {
              kind: "Upgrade",
              modules: command.Upgrade.modules.map((mod2) => Array.from((0, import_bcs.fromBase64)(mod2))),
              dependencies: command.Upgrade.dependencies,
              packageId: command.Upgrade.package,
              ticket: convertTransactionArgument(command.Upgrade.ticket, inputs)
            };
          }
          throw new Error(`Unknown transaction ${Object.keys(command)}`);
        })
      };
    }
    function convertTransactionArgument(arg, inputs) {
      if (arg.$kind === "GasCoin") {
        return { kind: "GasCoin" };
      }
      if (arg.$kind === "Result") {
        return { kind: "Result", index: arg.Result };
      }
      if (arg.$kind === "NestedResult") {
        return { kind: "NestedResult", index: arg.NestedResult[0], resultIndex: arg.NestedResult[1] };
      }
      if (arg.$kind === "Input") {
        return inputs[arg.Input];
      }
      throw new Error(`Invalid argument ${Object.keys(arg)}`);
    }
    function transactionDataFromV1(data) {
      var _a, _b, _c;
      return (0, import_valibot.parse)(import_internal.TransactionData, {
        version: 2,
        sender: data.sender ?? null,
        expiration: data.expiration ? "Epoch" in data.expiration ? { Epoch: data.expiration.Epoch } : { None: true } : null,
        gasData: {
          owner: data.gasConfig.owner ?? null,
          budget: ((_a = data.gasConfig.budget) == null ? void 0 : _a.toString()) ?? null,
          price: ((_b = data.gasConfig.price) == null ? void 0 : _b.toString()) ?? null,
          payment: ((_c = data.gasConfig.payment) == null ? void 0 : _c.map((ref) => ({
            digest: ref.digest,
            objectId: ref.objectId,
            version: ref.version.toString()
          }))) ?? null
        },
        inputs: data.inputs.map((input) => {
          if (input.kind === "Input") {
            if ((0, import_valibot.is)(NormalizedCallArg, input.value)) {
              const value = (0, import_valibot.parse)(NormalizedCallArg, input.value);
              if (value.Object) {
                if (value.Object.ImmOrOwned) {
                  return {
                    Object: {
                      ImmOrOwnedObject: {
                        objectId: value.Object.ImmOrOwned.objectId,
                        version: String(value.Object.ImmOrOwned.version),
                        digest: value.Object.ImmOrOwned.digest
                      }
                    }
                  };
                }
                if (value.Object.Shared) {
                  return {
                    Object: {
                      SharedObject: {
                        mutable: value.Object.Shared.mutable ?? null,
                        initialSharedVersion: value.Object.Shared.initialSharedVersion,
                        objectId: value.Object.Shared.objectId
                      }
                    }
                  };
                }
                if (value.Object.Receiving) {
                  return {
                    Object: {
                      Receiving: {
                        digest: value.Object.Receiving.digest,
                        version: String(value.Object.Receiving.version),
                        objectId: value.Object.Receiving.objectId
                      }
                    }
                  };
                }
                throw new Error("Invalid object input");
              }
              return {
                Pure: {
                  bytes: (0, import_bcs.toBase64)(new Uint8Array(value.Pure))
                }
              };
            }
            if (input.type === "object") {
              return {
                UnresolvedObject: {
                  objectId: input.value
                }
              };
            }
            return {
              UnresolvedPure: {
                value: input.value
              }
            };
          }
          throw new Error("Invalid input");
        }),
        commands: data.transactions.map((transaction) => {
          switch (transaction.kind) {
            case "MakeMoveVec":
              return {
                MakeMoveVec: {
                  type: "Some" in transaction.type ? import_bcs2.TypeTagSerializer.tagToString(transaction.type.Some) : null,
                  elements: transaction.objects.map((arg) => parseV1TransactionArgument(arg))
                }
              };
            case "MergeCoins": {
              return {
                MergeCoins: {
                  destination: parseV1TransactionArgument(transaction.destination),
                  sources: transaction.sources.map((arg) => parseV1TransactionArgument(arg))
                }
              };
            }
            case "MoveCall": {
              const [pkg, mod2, fn] = transaction.target.split("::");
              return {
                MoveCall: {
                  package: pkg,
                  module: mod2,
                  function: fn,
                  typeArguments: transaction.typeArguments,
                  arguments: transaction.arguments.map((arg) => parseV1TransactionArgument(arg))
                }
              };
            }
            case "Publish": {
              return {
                Publish: {
                  modules: transaction.modules.map((mod2) => (0, import_bcs.toBase64)(Uint8Array.from(mod2))),
                  dependencies: transaction.dependencies
                }
              };
            }
            case "SplitCoins": {
              return {
                SplitCoins: {
                  coin: parseV1TransactionArgument(transaction.coin),
                  amounts: transaction.amounts.map((arg) => parseV1TransactionArgument(arg))
                }
              };
            }
            case "TransferObjects": {
              return {
                TransferObjects: {
                  objects: transaction.objects.map((arg) => parseV1TransactionArgument(arg)),
                  address: parseV1TransactionArgument(transaction.address)
                }
              };
            }
            case "Upgrade": {
              return {
                Upgrade: {
                  modules: transaction.modules.map((mod2) => (0, import_bcs.toBase64)(Uint8Array.from(mod2))),
                  dependencies: transaction.dependencies,
                  package: transaction.packageId,
                  ticket: parseV1TransactionArgument(transaction.ticket)
                }
              };
            }
          }
          throw new Error(`Unknown transaction ${Object.keys(transaction)}`);
        })
      });
    }
    function parseV1TransactionArgument(arg) {
      switch (arg.kind) {
        case "GasCoin": {
          return { GasCoin: true };
        }
        case "Result":
          return { Result: arg.index };
        case "NestedResult": {
          return { NestedResult: [arg.index, arg.resultIndex] };
        }
        case "Input": {
          return { Input: arg.index };
        }
      }
    }
  }
});

// node_modules/@mysten/sui/dist/cjs/transactions/data/v2.js
var require_v2 = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/transactions/data/v2.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var v2_exports = {};
    __export2(v2_exports, {
      SerializedTransactionDataV2: () => SerializedTransactionDataV2
    });
    module2.exports = __toCommonJS2(v2_exports);
    var import_valibot = require_dist();
    var import_internal = require_internal();
    function enumUnion(options) {
      return (0, import_valibot.union)(
        Object.entries(options).map(([key, value]) => (0, import_valibot.object)({ [key]: value }))
      );
    }
    var Argument = enumUnion({
      GasCoin: (0, import_valibot.literal)(true),
      Input: (0, import_valibot.pipe)((0, import_valibot.number)(), (0, import_valibot.integer)()),
      Result: (0, import_valibot.pipe)((0, import_valibot.number)(), (0, import_valibot.integer)()),
      NestedResult: (0, import_valibot.tuple)([(0, import_valibot.pipe)((0, import_valibot.number)(), (0, import_valibot.integer)()), (0, import_valibot.pipe)((0, import_valibot.number)(), (0, import_valibot.integer)())])
    });
    var GasData = (0, import_valibot.object)({
      budget: (0, import_valibot.nullable)(import_internal.JsonU64),
      price: (0, import_valibot.nullable)(import_internal.JsonU64),
      owner: (0, import_valibot.nullable)(import_internal.SuiAddress),
      payment: (0, import_valibot.nullable)((0, import_valibot.array)(import_internal.ObjectRef))
    });
    var ProgrammableMoveCall = (0, import_valibot.object)({
      package: import_internal.ObjectID,
      module: (0, import_valibot.string)(),
      function: (0, import_valibot.string)(),
      // snake case in rust
      typeArguments: (0, import_valibot.array)((0, import_valibot.string)()),
      arguments: (0, import_valibot.array)(Argument)
    });
    var $Intent = (0, import_valibot.object)({
      name: (0, import_valibot.string)(),
      inputs: (0, import_valibot.record)((0, import_valibot.string)(), (0, import_valibot.union)([Argument, (0, import_valibot.array)(Argument)])),
      data: (0, import_valibot.record)((0, import_valibot.string)(), (0, import_valibot.unknown)())
    });
    var Command = enumUnion({
      MoveCall: ProgrammableMoveCall,
      TransferObjects: (0, import_valibot.object)({
        objects: (0, import_valibot.array)(Argument),
        address: Argument
      }),
      SplitCoins: (0, import_valibot.object)({
        coin: Argument,
        amounts: (0, import_valibot.array)(Argument)
      }),
      MergeCoins: (0, import_valibot.object)({
        destination: Argument,
        sources: (0, import_valibot.array)(Argument)
      }),
      Publish: (0, import_valibot.object)({
        modules: (0, import_valibot.array)(import_internal.BCSBytes),
        dependencies: (0, import_valibot.array)(import_internal.ObjectID)
      }),
      MakeMoveVec: (0, import_valibot.object)({
        type: (0, import_valibot.nullable)((0, import_valibot.string)()),
        elements: (0, import_valibot.array)(Argument)
      }),
      Upgrade: (0, import_valibot.object)({
        modules: (0, import_valibot.array)(import_internal.BCSBytes),
        dependencies: (0, import_valibot.array)(import_internal.ObjectID),
        package: import_internal.ObjectID,
        ticket: Argument
      }),
      $Intent
    });
    var ObjectArg = enumUnion({
      ImmOrOwnedObject: import_internal.ObjectRef,
      SharedObject: (0, import_valibot.object)({
        objectId: import_internal.ObjectID,
        // snake case in rust
        initialSharedVersion: import_internal.JsonU64,
        mutable: (0, import_valibot.boolean)()
      }),
      Receiving: import_internal.ObjectRef
    });
    var CallArg = enumUnion({
      Object: ObjectArg,
      Pure: (0, import_valibot.object)({
        bytes: import_internal.BCSBytes
      }),
      UnresolvedPure: (0, import_valibot.object)({
        value: (0, import_valibot.unknown)()
      }),
      UnresolvedObject: (0, import_valibot.object)({
        objectId: import_internal.ObjectID,
        version: (0, import_valibot.optional)((0, import_valibot.nullable)(import_internal.JsonU64)),
        digest: (0, import_valibot.optional)((0, import_valibot.nullable)((0, import_valibot.string)())),
        initialSharedVersion: (0, import_valibot.optional)((0, import_valibot.nullable)(import_internal.JsonU64))
      })
    });
    var TransactionExpiration = enumUnion({
      None: (0, import_valibot.literal)(true),
      Epoch: import_internal.JsonU64
    });
    var SerializedTransactionDataV2 = (0, import_valibot.object)({
      version: (0, import_valibot.literal)(2),
      sender: (0, import_valibot.nullish)(import_internal.SuiAddress),
      expiration: (0, import_valibot.nullish)(TransactionExpiration),
      gasData: GasData,
      inputs: (0, import_valibot.array)(CallArg),
      commands: (0, import_valibot.array)(Command)
    });
  }
});

// node_modules/@mysten/sui/dist/cjs/transactions/Inputs.js
var require_Inputs = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/transactions/Inputs.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var Inputs_exports = {};
    __export2(Inputs_exports, {
      Inputs: () => Inputs
    });
    module2.exports = __toCommonJS2(Inputs_exports);
    var import_bcs = require_cjs();
    var import_sui_types = require_sui_types();
    function Pure(data) {
      return {
        $kind: "Pure",
        Pure: {
          bytes: data instanceof Uint8Array ? (0, import_bcs.toBase64)(data) : data.toBase64()
        }
      };
    }
    var Inputs = {
      Pure,
      ObjectRef({ objectId, digest, version: version2 }) {
        return {
          $kind: "Object",
          Object: {
            $kind: "ImmOrOwnedObject",
            ImmOrOwnedObject: {
              digest,
              version: version2,
              objectId: (0, import_sui_types.normalizeSuiAddress)(objectId)
            }
          }
        };
      },
      SharedObjectRef({
        objectId,
        mutable,
        initialSharedVersion
      }) {
        return {
          $kind: "Object",
          Object: {
            $kind: "SharedObject",
            SharedObject: {
              mutable,
              initialSharedVersion,
              objectId: (0, import_sui_types.normalizeSuiAddress)(objectId)
            }
          }
        };
      },
      ReceivingRef({ objectId, digest, version: version2 }) {
        return {
          $kind: "Object",
          Object: {
            $kind: "Receiving",
            Receiving: {
              digest,
              version: version2,
              objectId: (0, import_sui_types.normalizeSuiAddress)(objectId)
            }
          }
        };
      }
    };
  }
});

// node_modules/@mysten/sui/dist/cjs/utils/format.js
var require_format = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/utils/format.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var format_exports = {};
    __export2(format_exports, {
      formatAddress: () => formatAddress,
      formatDigest: () => formatDigest
    });
    module2.exports = __toCommonJS2(format_exports);
    var ELLIPSIS = "…";
    function formatAddress(address) {
      if (address.length <= 6) {
        return address;
      }
      const offset2 = address.startsWith("0x") ? 2 : 0;
      return `0x${address.slice(offset2, offset2 + 4)}${ELLIPSIS}${address.slice(-4)}`;
    }
    function formatDigest(digest) {
      return `${digest.slice(0, 10)}${ELLIPSIS}`;
    }
  }
});

// node_modules/@mysten/sui/dist/cjs/utils/constants.js
var require_constants = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/utils/constants.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var constants_exports = {};
    __export2(constants_exports, {
      MIST_PER_SUI: () => MIST_PER_SUI,
      MOVE_STDLIB_ADDRESS: () => MOVE_STDLIB_ADDRESS,
      SUI_CLOCK_OBJECT_ID: () => SUI_CLOCK_OBJECT_ID,
      SUI_DECIMALS: () => SUI_DECIMALS,
      SUI_FRAMEWORK_ADDRESS: () => SUI_FRAMEWORK_ADDRESS,
      SUI_SYSTEM_ADDRESS: () => SUI_SYSTEM_ADDRESS,
      SUI_SYSTEM_MODULE_NAME: () => SUI_SYSTEM_MODULE_NAME,
      SUI_SYSTEM_STATE_OBJECT_ID: () => SUI_SYSTEM_STATE_OBJECT_ID,
      SUI_TYPE_ARG: () => SUI_TYPE_ARG
    });
    module2.exports = __toCommonJS2(constants_exports);
    var import_sui_types = require_sui_types();
    var SUI_DECIMALS = 9;
    var MIST_PER_SUI = BigInt(1e9);
    var MOVE_STDLIB_ADDRESS = "0x1";
    var SUI_FRAMEWORK_ADDRESS = "0x2";
    var SUI_SYSTEM_ADDRESS = "0x3";
    var SUI_CLOCK_OBJECT_ID = (0, import_sui_types.normalizeSuiObjectId)("0x6");
    var SUI_SYSTEM_MODULE_NAME = "sui_system";
    var SUI_TYPE_ARG = `${SUI_FRAMEWORK_ADDRESS}::sui::SUI`;
    var SUI_SYSTEM_STATE_OBJECT_ID = (0, import_sui_types.normalizeSuiObjectId)("0x5");
  }
});

// node_modules/@mysten/sui/dist/cjs/utils/dynamic-fields.js
var require_dynamic_fields = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/utils/dynamic-fields.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var dynamic_fields_exports = {};
    __export2(dynamic_fields_exports, {
      deriveDynamicFieldID: () => deriveDynamicFieldID
    });
    module2.exports = __toCommonJS2(dynamic_fields_exports);
    var import_bcs = require_cjs();
    var import_blake2b = require_blake2b();
    var import_bcs2 = require_bcs3();
    function deriveDynamicFieldID(parentId, typeTag, key) {
      const address = import_bcs2.bcs.Address.serialize(parentId).toBytes();
      const tag = import_bcs2.bcs.TypeTag.serialize(typeTag).toBytes();
      const keyLength = import_bcs2.bcs.u64().serialize(key.length).toBytes();
      const hash = import_blake2b.blake2b.create({
        dkLen: 32
      });
      hash.update(new Uint8Array([240]));
      hash.update(address);
      hash.update(keyLength);
      hash.update(key);
      hash.update(tag);
      return `0x${(0, import_bcs.toHex)(hash.digest().slice(0, 32))}`;
    }
  }
});

// node_modules/@mysten/sui/dist/cjs/utils/index.js
var require_utils6 = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/utils/index.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var utils_exports = {};
    __export2(utils_exports, {
      MIST_PER_SUI: () => import_constants.MIST_PER_SUI,
      MOVE_STDLIB_ADDRESS: () => import_constants.MOVE_STDLIB_ADDRESS,
      SUI_ADDRESS_LENGTH: () => import_sui_types.SUI_ADDRESS_LENGTH,
      SUI_CLOCK_OBJECT_ID: () => import_constants.SUI_CLOCK_OBJECT_ID,
      SUI_DECIMALS: () => import_constants.SUI_DECIMALS,
      SUI_FRAMEWORK_ADDRESS: () => import_constants.SUI_FRAMEWORK_ADDRESS,
      SUI_SYSTEM_ADDRESS: () => import_constants.SUI_SYSTEM_ADDRESS,
      SUI_SYSTEM_MODULE_NAME: () => import_constants.SUI_SYSTEM_MODULE_NAME,
      SUI_SYSTEM_STATE_OBJECT_ID: () => import_constants.SUI_SYSTEM_STATE_OBJECT_ID,
      SUI_TYPE_ARG: () => import_constants.SUI_TYPE_ARG,
      deriveDynamicFieldID: () => import_dynamic_fields.deriveDynamicFieldID,
      formatAddress: () => import_format.formatAddress,
      formatDigest: () => import_format.formatDigest,
      fromB64: () => import_bcs.fromB64,
      fromBase58: () => import_bcs.fromBase58,
      fromBase64: () => import_bcs.fromBase64,
      fromHEX: () => import_bcs.fromHEX,
      fromHex: () => import_bcs.fromHex,
      isValidNamedPackage: () => import_move_registry.isValidNamedPackage,
      isValidNamedType: () => import_move_registry.isValidNamedType,
      isValidSuiAddress: () => import_sui_types.isValidSuiAddress,
      isValidSuiNSName: () => import_suins.isValidSuiNSName,
      isValidSuiObjectId: () => import_sui_types.isValidSuiObjectId,
      isValidTransactionDigest: () => import_sui_types.isValidTransactionDigest,
      normalizeStructTag: () => import_sui_types.normalizeStructTag,
      normalizeSuiAddress: () => import_sui_types.normalizeSuiAddress,
      normalizeSuiNSName: () => import_suins.normalizeSuiNSName,
      normalizeSuiObjectId: () => import_sui_types.normalizeSuiObjectId,
      parseStructTag: () => import_sui_types.parseStructTag,
      toB64: () => import_bcs.toB64,
      toBase58: () => import_bcs.toBase58,
      toBase64: () => import_bcs.toBase64,
      toHEX: () => import_bcs.toHEX,
      toHex: () => import_bcs.toHex
    });
    module2.exports = __toCommonJS2(utils_exports);
    var import_format = require_format();
    var import_sui_types = require_sui_types();
    var import_bcs = require_cjs();
    var import_suins = require_suins();
    var import_constants = require_constants();
    var import_move_registry = require_move_registry();
    var import_dynamic_fields = require_dynamic_fields();
  }
});

// node_modules/@mysten/sui/dist/cjs/transactions/serializer.js
var require_serializer = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/transactions/serializer.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var serializer_exports = {};
    __export2(serializer_exports, {
      getPureBcsSchema: () => getPureBcsSchema,
      isTxContext: () => isTxContext,
      normalizedTypeToMoveTypeSignature: () => normalizedTypeToMoveTypeSignature,
      pureBcsSchemaFromOpenMoveTypeSignatureBody: () => pureBcsSchemaFromOpenMoveTypeSignatureBody
    });
    module2.exports = __toCommonJS2(serializer_exports);
    var import_bcs = require_bcs3();
    var import_utils4 = require_utils6();
    var import_sui_types = require_sui_types();
    var OBJECT_MODULE_NAME = "object";
    var ID_STRUCT_NAME = "ID";
    var STD_ASCII_MODULE_NAME = "ascii";
    var STD_ASCII_STRUCT_NAME = "String";
    var STD_UTF8_MODULE_NAME = "string";
    var STD_UTF8_STRUCT_NAME = "String";
    var STD_OPTION_MODULE_NAME = "option";
    var STD_OPTION_STRUCT_NAME = "Option";
    function isTxContext(param) {
      const struct2 = typeof param.body === "object" && "datatype" in param.body ? param.body.datatype : null;
      return !!struct2 && (0, import_sui_types.normalizeSuiAddress)(struct2.package) === (0, import_sui_types.normalizeSuiAddress)("0x2") && struct2.module === "tx_context" && struct2.type === "TxContext";
    }
    function getPureBcsSchema(typeSignature) {
      if (typeof typeSignature === "string") {
        switch (typeSignature) {
          case "address":
            return import_bcs.bcs.Address;
          case "bool":
            return import_bcs.bcs.Bool;
          case "u8":
            return import_bcs.bcs.U8;
          case "u16":
            return import_bcs.bcs.U16;
          case "u32":
            return import_bcs.bcs.U32;
          case "u64":
            return import_bcs.bcs.U64;
          case "u128":
            return import_bcs.bcs.U128;
          case "u256":
            return import_bcs.bcs.U256;
          default:
            throw new Error(`Unknown type signature ${typeSignature}`);
        }
      }
      if ("vector" in typeSignature) {
        if (typeSignature.vector === "u8") {
          return import_bcs.bcs.vector(import_bcs.bcs.U8).transform({
            input: (val) => typeof val === "string" ? new TextEncoder().encode(val) : val,
            output: (val) => val
          });
        }
        const type2 = getPureBcsSchema(typeSignature.vector);
        return type2 ? import_bcs.bcs.vector(type2) : null;
      }
      if ("datatype" in typeSignature) {
        const pkg = (0, import_sui_types.normalizeSuiAddress)(typeSignature.datatype.package);
        if (pkg === (0, import_sui_types.normalizeSuiAddress)(import_utils4.MOVE_STDLIB_ADDRESS)) {
          if (typeSignature.datatype.module === STD_ASCII_MODULE_NAME && typeSignature.datatype.type === STD_ASCII_STRUCT_NAME) {
            return import_bcs.bcs.String;
          }
          if (typeSignature.datatype.module === STD_UTF8_MODULE_NAME && typeSignature.datatype.type === STD_UTF8_STRUCT_NAME) {
            return import_bcs.bcs.String;
          }
          if (typeSignature.datatype.module === STD_OPTION_MODULE_NAME && typeSignature.datatype.type === STD_OPTION_STRUCT_NAME) {
            const type2 = getPureBcsSchema(typeSignature.datatype.typeParameters[0]);
            return type2 ? import_bcs.bcs.vector(type2) : null;
          }
        }
        if (pkg === (0, import_sui_types.normalizeSuiAddress)(import_utils4.SUI_FRAMEWORK_ADDRESS) && typeSignature.datatype.module === OBJECT_MODULE_NAME && typeSignature.datatype.type === ID_STRUCT_NAME) {
          return import_bcs.bcs.Address;
        }
      }
      return null;
    }
    function normalizedTypeToMoveTypeSignature(type2) {
      if (typeof type2 === "object" && "Reference" in type2) {
        return {
          ref: "&",
          body: normalizedTypeToMoveTypeSignatureBody(type2.Reference)
        };
      }
      if (typeof type2 === "object" && "MutableReference" in type2) {
        return {
          ref: "&mut",
          body: normalizedTypeToMoveTypeSignatureBody(type2.MutableReference)
        };
      }
      return {
        ref: null,
        body: normalizedTypeToMoveTypeSignatureBody(type2)
      };
    }
    function normalizedTypeToMoveTypeSignatureBody(type2) {
      if (typeof type2 === "string") {
        switch (type2) {
          case "Address":
            return "address";
          case "Bool":
            return "bool";
          case "U8":
            return "u8";
          case "U16":
            return "u16";
          case "U32":
            return "u32";
          case "U64":
            return "u64";
          case "U128":
            return "u128";
          case "U256":
            return "u256";
          default:
            throw new Error(`Unexpected type ${type2}`);
        }
      }
      if ("Vector" in type2) {
        return { vector: normalizedTypeToMoveTypeSignatureBody(type2.Vector) };
      }
      if ("Struct" in type2) {
        return {
          datatype: {
            package: type2.Struct.address,
            module: type2.Struct.module,
            type: type2.Struct.name,
            typeParameters: type2.Struct.typeArguments.map(normalizedTypeToMoveTypeSignatureBody)
          }
        };
      }
      if ("TypeParameter" in type2) {
        return { typeParameter: type2.TypeParameter };
      }
      throw new Error(`Unexpected type ${JSON.stringify(type2)}`);
    }
    function pureBcsSchemaFromOpenMoveTypeSignatureBody(typeSignature) {
      if (typeof typeSignature === "string") {
        switch (typeSignature) {
          case "address":
            return import_bcs.bcs.Address;
          case "bool":
            return import_bcs.bcs.Bool;
          case "u8":
            return import_bcs.bcs.U8;
          case "u16":
            return import_bcs.bcs.U16;
          case "u32":
            return import_bcs.bcs.U32;
          case "u64":
            return import_bcs.bcs.U64;
          case "u128":
            return import_bcs.bcs.U128;
          case "u256":
            return import_bcs.bcs.U256;
          default:
            throw new Error(`Unknown type signature ${typeSignature}`);
        }
      }
      if ("vector" in typeSignature) {
        return import_bcs.bcs.vector(pureBcsSchemaFromOpenMoveTypeSignatureBody(typeSignature.vector));
      }
      throw new Error(`Expected pure typeSignature, but got ${JSON.stringify(typeSignature)}`);
    }
  }
});

// node_modules/@mysten/sui/dist/cjs/transactions/json-rpc-resolver.js
var require_json_rpc_resolver = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/transactions/json-rpc-resolver.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var json_rpc_resolver_exports = {};
    __export2(json_rpc_resolver_exports, {
      getClient: () => getClient,
      resolveTransactionData: () => resolveTransactionData
    });
    module2.exports = __toCommonJS2(json_rpc_resolver_exports);
    var import_valibot = require_dist();
    var import_bcs = require_bcs3();
    var import_utils4 = require_utils6();
    var import_internal = require_internal();
    var import_Inputs = require_Inputs();
    var import_serializer = require_serializer();
    var MAX_OBJECTS_PER_FETCH = 50;
    var GAS_SAFE_OVERHEAD = 1000n;
    var MAX_GAS = 5e10;
    async function resolveTransactionData(transactionData, options, next) {
      await normalizeInputs(transactionData, options);
      await resolveObjectReferences(transactionData, options);
      if (!options.onlyTransactionKind) {
        await setGasPrice(transactionData, options);
        await setGasBudget(transactionData, options);
        await setGasPayment(transactionData, options);
      }
      await validate3(transactionData);
      return await next();
    }
    async function setGasPrice(transactionData, options) {
      if (!transactionData.gasConfig.price) {
        transactionData.gasConfig.price = String(await getClient(options).getReferenceGasPrice());
      }
    }
    async function setGasBudget(transactionData, options) {
      if (transactionData.gasConfig.budget) {
        return;
      }
      const dryRunResult = await getClient(options).dryRunTransactionBlock({
        transactionBlock: transactionData.build({
          overrides: {
            gasData: {
              budget: String(MAX_GAS),
              payment: []
            }
          }
        })
      });
      if (dryRunResult.effects.status.status !== "success") {
        throw new Error(
          `Dry run failed, could not automatically determine a budget: ${dryRunResult.effects.status.error}`,
          { cause: dryRunResult }
        );
      }
      const safeOverhead = GAS_SAFE_OVERHEAD * BigInt(transactionData.gasConfig.price || 1n);
      const baseComputationCostWithOverhead = BigInt(dryRunResult.effects.gasUsed.computationCost) + safeOverhead;
      const gasBudget = baseComputationCostWithOverhead + BigInt(dryRunResult.effects.gasUsed.storageCost) - BigInt(dryRunResult.effects.gasUsed.storageRebate);
      transactionData.gasConfig.budget = String(
        gasBudget > baseComputationCostWithOverhead ? gasBudget : baseComputationCostWithOverhead
      );
    }
    async function setGasPayment(transactionData, options) {
      if (!transactionData.gasConfig.payment) {
        const coins = await getClient(options).getCoins({
          owner: transactionData.gasConfig.owner || transactionData.sender,
          coinType: import_utils4.SUI_TYPE_ARG
        });
        const paymentCoins = coins.data.filter((coin) => {
          const matchingInput = transactionData.inputs.find((input) => {
            var _a;
            if ((_a = input.Object) == null ? void 0 : _a.ImmOrOwnedObject) {
              return coin.coinObjectId === input.Object.ImmOrOwnedObject.objectId;
            }
            return false;
          });
          return !matchingInput;
        }).map((coin) => ({
          objectId: coin.coinObjectId,
          digest: coin.digest,
          version: coin.version
        }));
        if (!paymentCoins.length) {
          throw new Error("No valid gas coins found for the transaction.");
        }
        transactionData.gasConfig.payment = paymentCoins.map((payment) => (0, import_valibot.parse)(import_internal.ObjectRef, payment));
      }
    }
    async function resolveObjectReferences(transactionData, options) {
      const objectsToResolve = transactionData.inputs.filter((input) => {
        var _a;
        return input.UnresolvedObject && !(input.UnresolvedObject.version || ((_a = input.UnresolvedObject) == null ? void 0 : _a.initialSharedVersion));
      });
      const dedupedIds = [
        ...new Set(
          objectsToResolve.map((input) => (0, import_utils4.normalizeSuiObjectId)(input.UnresolvedObject.objectId))
        )
      ];
      const objectChunks = dedupedIds.length ? chunk(dedupedIds, MAX_OBJECTS_PER_FETCH) : [];
      const resolved = (await Promise.all(
        objectChunks.map(
          (chunk2) => getClient(options).multiGetObjects({
            ids: chunk2,
            options: { showOwner: true }
          })
        )
      )).flat();
      const responsesById = new Map(
        dedupedIds.map((id, index) => {
          return [id, resolved[index]];
        })
      );
      const invalidObjects = Array.from(responsesById).filter(([_, obj]) => obj.error).map(([_, obj]) => JSON.stringify(obj.error));
      if (invalidObjects.length) {
        throw new Error(`The following input objects are invalid: ${invalidObjects.join(", ")}`);
      }
      const objects = resolved.map((object) => {
        if (object.error || !object.data) {
          throw new Error(`Failed to fetch object: ${object.error}`);
        }
        const owner = object.data.owner;
        const initialSharedVersion = owner && typeof owner === "object" && "Shared" in owner ? owner.Shared.initial_shared_version : null;
        return {
          objectId: object.data.objectId,
          digest: object.data.digest,
          version: object.data.version,
          initialSharedVersion
        };
      });
      const objectsById = new Map(
        dedupedIds.map((id, index) => {
          return [id, objects[index]];
        })
      );
      for (const [index, input] of transactionData.inputs.entries()) {
        if (!input.UnresolvedObject) {
          continue;
        }
        let updated;
        const id = (0, import_utils4.normalizeSuiAddress)(input.UnresolvedObject.objectId);
        const object = objectsById.get(id);
        if (input.UnresolvedObject.initialSharedVersion ?? (object == null ? void 0 : object.initialSharedVersion)) {
          updated = import_Inputs.Inputs.SharedObjectRef({
            objectId: id,
            initialSharedVersion: input.UnresolvedObject.initialSharedVersion || (object == null ? void 0 : object.initialSharedVersion),
            mutable: isUsedAsMutable(transactionData, index)
          });
        } else if (isUsedAsReceiving(transactionData, index)) {
          updated = import_Inputs.Inputs.ReceivingRef(
            {
              objectId: id,
              digest: input.UnresolvedObject.digest ?? (object == null ? void 0 : object.digest),
              version: input.UnresolvedObject.version ?? (object == null ? void 0 : object.version)
            }
          );
        }
        transactionData.inputs[transactionData.inputs.indexOf(input)] = updated ?? import_Inputs.Inputs.ObjectRef({
          objectId: id,
          digest: input.UnresolvedObject.digest ?? (object == null ? void 0 : object.digest),
          version: input.UnresolvedObject.version ?? (object == null ? void 0 : object.version)
        });
      }
    }
    async function normalizeInputs(transactionData, options) {
      const { inputs, commands } = transactionData;
      const moveCallsToResolve = [];
      const moveFunctionsToResolve = /* @__PURE__ */ new Set();
      commands.forEach((command) => {
        if (command.MoveCall) {
          if (command.MoveCall._argumentTypes) {
            return;
          }
          const inputs2 = command.MoveCall.arguments.map((arg) => {
            if (arg.$kind === "Input") {
              return transactionData.inputs[arg.Input];
            }
            return null;
          });
          const needsResolution = inputs2.some(
            (input) => (input == null ? void 0 : input.UnresolvedPure) || (input == null ? void 0 : input.UnresolvedObject)
          );
          if (needsResolution) {
            const functionName = `${command.MoveCall.package}::${command.MoveCall.module}::${command.MoveCall.function}`;
            moveFunctionsToResolve.add(functionName);
            moveCallsToResolve.push(command.MoveCall);
          }
        }
        switch (command.$kind) {
          case "SplitCoins":
            command.SplitCoins.amounts.forEach((amount) => {
              normalizeRawArgument(amount, import_bcs.bcs.U64, transactionData);
            });
            break;
          case "TransferObjects":
            normalizeRawArgument(command.TransferObjects.address, import_bcs.bcs.Address, transactionData);
            break;
        }
      });
      const moveFunctionParameters = /* @__PURE__ */ new Map();
      if (moveFunctionsToResolve.size > 0) {
        const client = getClient(options);
        await Promise.all(
          [...moveFunctionsToResolve].map(async (functionName) => {
            const [packageId, moduleId, functionId] = functionName.split("::");
            const def = await client.getNormalizedMoveFunction({
              package: packageId,
              module: moduleId,
              function: functionId
            });
            moveFunctionParameters.set(
              functionName,
              def.parameters.map((param) => (0, import_serializer.normalizedTypeToMoveTypeSignature)(param))
            );
          })
        );
      }
      if (moveCallsToResolve.length) {
        await Promise.all(
          moveCallsToResolve.map(async (moveCall) => {
            const parameters = moveFunctionParameters.get(
              `${moveCall.package}::${moveCall.module}::${moveCall.function}`
            );
            if (!parameters) {
              return;
            }
            const hasTxContext = parameters.length > 0 && (0, import_serializer.isTxContext)(parameters.at(-1));
            const params = hasTxContext ? parameters.slice(0, parameters.length - 1) : parameters;
            moveCall._argumentTypes = params;
          })
        );
      }
      commands.forEach((command) => {
        if (!command.MoveCall) {
          return;
        }
        const moveCall = command.MoveCall;
        const fnName = `${moveCall.package}::${moveCall.module}::${moveCall.function}`;
        const params = moveCall._argumentTypes;
        if (!params) {
          return;
        }
        if (params.length !== command.MoveCall.arguments.length) {
          throw new Error(`Incorrect number of arguments for ${fnName}`);
        }
        params.forEach((param, i) => {
          var _a, _b;
          const arg = moveCall.arguments[i];
          if (arg.$kind !== "Input") return;
          const input = inputs[arg.Input];
          if (!input.UnresolvedPure && !input.UnresolvedObject) {
            return;
          }
          const inputValue = ((_a = input.UnresolvedPure) == null ? void 0 : _a.value) ?? ((_b = input.UnresolvedObject) == null ? void 0 : _b.objectId);
          const schema = (0, import_serializer.getPureBcsSchema)(param.body);
          if (schema) {
            arg.type = "pure";
            inputs[inputs.indexOf(input)] = import_Inputs.Inputs.Pure(schema.serialize(inputValue));
            return;
          }
          if (typeof inputValue !== "string") {
            throw new Error(
              `Expect the argument to be an object id string, got ${JSON.stringify(
                inputValue,
                null,
                2
              )}`
            );
          }
          arg.type = "object";
          const unresolvedObject = input.UnresolvedPure ? {
            $kind: "UnresolvedObject",
            UnresolvedObject: {
              objectId: inputValue
            }
          } : input;
          inputs[arg.Input] = unresolvedObject;
        });
      });
    }
    function validate3(transactionData) {
      transactionData.inputs.forEach((input, index) => {
        if (input.$kind !== "Object" && input.$kind !== "Pure") {
          throw new Error(
            `Input at index ${index} has not been resolved.  Expected a Pure or Object input, but found ${JSON.stringify(
              input
            )}`
          );
        }
      });
    }
    function normalizeRawArgument(arg, schema, transactionData) {
      if (arg.$kind !== "Input") {
        return;
      }
      const input = transactionData.inputs[arg.Input];
      if (input.$kind !== "UnresolvedPure") {
        return;
      }
      transactionData.inputs[arg.Input] = import_Inputs.Inputs.Pure(schema.serialize(input.UnresolvedPure.value));
    }
    function isUsedAsMutable(transactionData, index) {
      let usedAsMutable = false;
      transactionData.getInputUses(index, (arg, tx) => {
        if (tx.MoveCall && tx.MoveCall._argumentTypes) {
          const argIndex = tx.MoveCall.arguments.indexOf(arg);
          usedAsMutable = tx.MoveCall._argumentTypes[argIndex].ref !== "&" || usedAsMutable;
        }
        if (tx.$kind === "MakeMoveVec" || tx.$kind === "MergeCoins" || tx.$kind === "SplitCoins") {
          usedAsMutable = true;
        }
      });
      return usedAsMutable;
    }
    function isUsedAsReceiving(transactionData, index) {
      let usedAsReceiving = false;
      transactionData.getInputUses(index, (arg, tx) => {
        if (tx.MoveCall && tx.MoveCall._argumentTypes) {
          const argIndex = tx.MoveCall.arguments.indexOf(arg);
          usedAsReceiving = isReceivingType(tx.MoveCall._argumentTypes[argIndex]) || usedAsReceiving;
        }
      });
      return usedAsReceiving;
    }
    function isReceivingType(type2) {
      if (typeof type2.body !== "object" || !("datatype" in type2.body)) {
        return false;
      }
      return type2.body.datatype.package === "0x2" && type2.body.datatype.module === "transfer" && type2.body.datatype.type === "Receiving";
    }
    function getClient(options) {
      if (!options.client) {
        throw new Error(
          `No sui client passed to Transaction#build, but transaction data was not sufficient to build offline.`
        );
      }
      return options.client;
    }
    function chunk(arr, size) {
      return Array.from(
        { length: Math.ceil(arr.length / size) },
        (_, i) => arr.slice(i * size, i * size + size)
      );
    }
  }
});

// node_modules/@mysten/sui/dist/cjs/transactions/object.js
var require_object = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/transactions/object.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var object_exports = {};
    __export2(object_exports, {
      createObjectMethods: () => createObjectMethods
    });
    module2.exports = __toCommonJS2(object_exports);
    function createObjectMethods(makeObject) {
      function object(value) {
        return makeObject(value);
      }
      object.system = () => object("0x5");
      object.clock = () => object("0x6");
      object.random = () => object("0x8");
      object.denyList = () => object("0x403");
      object.option = ({ type: type2, value }) => (tx) => tx.moveCall({
        typeArguments: [type2],
        target: `0x1::option::${value === null ? "none" : "some"}`,
        arguments: value === null ? [] : [tx.object(value)]
      });
      return object;
    }
  }
});

// node_modules/@mysten/sui/dist/cjs/transactions/pure.js
var require_pure2 = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/transactions/pure.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var pure_exports = {};
    __export2(pure_exports, {
      createPure: () => createPure
    });
    module2.exports = __toCommonJS2(pure_exports);
    var import_bcs = require_cjs();
    var import_bcs2 = require_bcs3();
    var import_pure = require_pure();
    function createPure(makePure) {
      function pure(typeOrSerializedValue, value) {
        if (typeof typeOrSerializedValue === "string") {
          return makePure((0, import_pure.pureBcsSchemaFromTypeName)(typeOrSerializedValue).serialize(value));
        }
        if (typeOrSerializedValue instanceof Uint8Array || (0, import_bcs.isSerializedBcs)(typeOrSerializedValue)) {
          return makePure(typeOrSerializedValue);
        }
        throw new Error("tx.pure must be called either a bcs type name, or a serialized bcs value");
      }
      pure.u8 = (value) => makePure(import_bcs2.bcs.U8.serialize(value));
      pure.u16 = (value) => makePure(import_bcs2.bcs.U16.serialize(value));
      pure.u32 = (value) => makePure(import_bcs2.bcs.U32.serialize(value));
      pure.u64 = (value) => makePure(import_bcs2.bcs.U64.serialize(value));
      pure.u128 = (value) => makePure(import_bcs2.bcs.U128.serialize(value));
      pure.u256 = (value) => makePure(import_bcs2.bcs.U256.serialize(value));
      pure.bool = (value) => makePure(import_bcs2.bcs.Bool.serialize(value));
      pure.string = (value) => makePure(import_bcs2.bcs.String.serialize(value));
      pure.address = (value) => makePure(import_bcs2.bcs.Address.serialize(value));
      pure.id = pure.address;
      pure.vector = (type2, value) => {
        return makePure(
          import_bcs2.bcs.vector((0, import_pure.pureBcsSchemaFromTypeName)(type2)).serialize(value)
        );
      };
      pure.option = (type2, value) => {
        return makePure(import_bcs2.bcs.option((0, import_pure.pureBcsSchemaFromTypeName)(type2)).serialize(value));
      };
      return pure;
    }
  }
});

// node_modules/@mysten/sui/dist/cjs/transactions/hash.js
var require_hash = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/transactions/hash.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var hash_exports = {};
    __export2(hash_exports, {
      hashTypedData: () => hashTypedData
    });
    module2.exports = __toCommonJS2(hash_exports);
    var import_blake2b = require_blake2b();
    function hashTypedData(typeTag, data) {
      const typeTagBytes = Array.from(`${typeTag}::`).map((e) => e.charCodeAt(0));
      const dataWithTag = new Uint8Array(typeTagBytes.length + data.length);
      dataWithTag.set(typeTagBytes);
      dataWithTag.set(data, typeTagBytes.length);
      return (0, import_blake2b.blake2b)(dataWithTag, { dkLen: 32 });
    }
  }
});

// node_modules/@mysten/sui/dist/cjs/transactions/TransactionData.js
var require_TransactionData = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/transactions/TransactionData.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var TransactionData_exports = {};
    __export2(TransactionData_exports, {
      TransactionDataBuilder: () => TransactionDataBuilder
    });
    module2.exports = __toCommonJS2(TransactionData_exports);
    var import_bcs = require_cjs();
    var import_valibot = require_dist();
    var import_bcs2 = require_bcs3();
    var import_sui_types = require_sui_types();
    var import_internal = require_internal();
    var import_v12 = require_v1();
    var import_hash = require_hash();
    function prepareSuiAddress(address) {
      return (0, import_sui_types.normalizeSuiAddress)(address).replace("0x", "");
    }
    var TransactionDataBuilder = class _TransactionDataBuilder {
      constructor(clone) {
        this.version = 2;
        this.sender = (clone == null ? void 0 : clone.sender) ?? null;
        this.expiration = (clone == null ? void 0 : clone.expiration) ?? null;
        this.inputs = (clone == null ? void 0 : clone.inputs) ?? [];
        this.commands = (clone == null ? void 0 : clone.commands) ?? [];
        this.gasData = (clone == null ? void 0 : clone.gasData) ?? {
          budget: null,
          price: null,
          owner: null,
          payment: null
        };
      }
      static fromKindBytes(bytes) {
        const kind = import_bcs2.bcs.TransactionKind.parse(bytes);
        const programmableTx = kind.ProgrammableTransaction;
        if (!programmableTx) {
          throw new Error("Unable to deserialize from bytes.");
        }
        return _TransactionDataBuilder.restore({
          version: 2,
          sender: null,
          expiration: null,
          gasData: {
            budget: null,
            owner: null,
            payment: null,
            price: null
          },
          inputs: programmableTx.inputs,
          commands: programmableTx.commands
        });
      }
      static fromBytes(bytes) {
        const rawData = import_bcs2.bcs.TransactionData.parse(bytes);
        const data = rawData == null ? void 0 : rawData.V1;
        const programmableTx = data.kind.ProgrammableTransaction;
        if (!data || !programmableTx) {
          throw new Error("Unable to deserialize from bytes.");
        }
        return _TransactionDataBuilder.restore({
          version: 2,
          sender: data.sender,
          expiration: data.expiration,
          gasData: data.gasData,
          inputs: programmableTx.inputs,
          commands: programmableTx.commands
        });
      }
      static restore(data) {
        if (data.version === 2) {
          return new _TransactionDataBuilder((0, import_valibot.parse)(import_internal.TransactionData, data));
        } else {
          return new _TransactionDataBuilder((0, import_valibot.parse)(import_internal.TransactionData, (0, import_v12.transactionDataFromV1)(data)));
        }
      }
      /**
       * Generate transaction digest.
       *
       * @param bytes BCS serialized transaction data
       * @returns transaction digest.
       */
      static getDigestFromBytes(bytes) {
        const hash = (0, import_hash.hashTypedData)("TransactionData", bytes);
        return (0, import_bcs.toBase58)(hash);
      }
      // @deprecated use gasData instead
      get gasConfig() {
        return this.gasData;
      }
      // @deprecated use gasData instead
      set gasConfig(value) {
        this.gasData = value;
      }
      build({
        maxSizeBytes = Infinity,
        overrides,
        onlyTransactionKind
      } = {}) {
        const inputs = this.inputs;
        const commands = this.commands;
        const kind = {
          ProgrammableTransaction: {
            inputs,
            commands
          }
        };
        if (onlyTransactionKind) {
          return import_bcs2.bcs.TransactionKind.serialize(kind, { maxSize: maxSizeBytes }).toBytes();
        }
        const expiration = (overrides == null ? void 0 : overrides.expiration) ?? this.expiration;
        const sender = (overrides == null ? void 0 : overrides.sender) ?? this.sender;
        const gasData = { ...this.gasData, ...overrides == null ? void 0 : overrides.gasConfig, ...overrides == null ? void 0 : overrides.gasData };
        if (!sender) {
          throw new Error("Missing transaction sender");
        }
        if (!gasData.budget) {
          throw new Error("Missing gas budget");
        }
        if (!gasData.payment) {
          throw new Error("Missing gas payment");
        }
        if (!gasData.price) {
          throw new Error("Missing gas price");
        }
        const transactionData = {
          sender: prepareSuiAddress(sender),
          expiration: expiration ? expiration : { None: true },
          gasData: {
            payment: gasData.payment,
            owner: prepareSuiAddress(this.gasData.owner ?? sender),
            price: BigInt(gasData.price),
            budget: BigInt(gasData.budget)
          },
          kind: {
            ProgrammableTransaction: {
              inputs,
              commands
            }
          }
        };
        return import_bcs2.bcs.TransactionData.serialize(
          { V1: transactionData },
          { maxSize: maxSizeBytes }
        ).toBytes();
      }
      addInput(type2, arg) {
        const index = this.inputs.length;
        this.inputs.push(arg);
        return { Input: index, type: type2, $kind: "Input" };
      }
      getInputUses(index, fn) {
        this.mapArguments((arg, command) => {
          if (arg.$kind === "Input" && arg.Input === index) {
            fn(arg, command);
          }
          return arg;
        });
      }
      mapArguments(fn) {
        for (const command of this.commands) {
          switch (command.$kind) {
            case "MoveCall":
              command.MoveCall.arguments = command.MoveCall.arguments.map((arg) => fn(arg, command));
              break;
            case "TransferObjects":
              command.TransferObjects.objects = command.TransferObjects.objects.map(
                (arg) => fn(arg, command)
              );
              command.TransferObjects.address = fn(command.TransferObjects.address, command);
              break;
            case "SplitCoins":
              command.SplitCoins.coin = fn(command.SplitCoins.coin, command);
              command.SplitCoins.amounts = command.SplitCoins.amounts.map((arg) => fn(arg, command));
              break;
            case "MergeCoins":
              command.MergeCoins.destination = fn(command.MergeCoins.destination, command);
              command.MergeCoins.sources = command.MergeCoins.sources.map((arg) => fn(arg, command));
              break;
            case "MakeMoveVec":
              command.MakeMoveVec.elements = command.MakeMoveVec.elements.map(
                (arg) => fn(arg, command)
              );
              break;
            case "Upgrade":
              command.Upgrade.ticket = fn(command.Upgrade.ticket, command);
              break;
            case "$Intent":
              const inputs = command.$Intent.inputs;
              command.$Intent.inputs = {};
              for (const [key, value] of Object.entries(inputs)) {
                command.$Intent.inputs[key] = Array.isArray(value) ? value.map((arg) => fn(arg, command)) : fn(value, command);
              }
              break;
            case "Publish":
              break;
            default:
              throw new Error(`Unexpected transaction kind: ${command.$kind}`);
          }
        }
      }
      replaceCommand(index, replacement) {
        if (!Array.isArray(replacement)) {
          this.commands[index] = replacement;
          return;
        }
        const sizeDiff = replacement.length - 1;
        this.commands.splice(index, 1, ...replacement);
        if (sizeDiff !== 0) {
          this.mapArguments((arg) => {
            switch (arg.$kind) {
              case "Result":
                if (arg.Result > index) {
                  arg.Result += sizeDiff;
                }
                break;
              case "NestedResult":
                if (arg.NestedResult[0] > index) {
                  arg.NestedResult[0] += sizeDiff;
                }
                break;
            }
            return arg;
          });
        }
      }
      getDigest() {
        const bytes = this.build({ onlyTransactionKind: false });
        return _TransactionDataBuilder.getDigestFromBytes(bytes);
      }
      snapshot() {
        return (0, import_valibot.parse)(import_internal.TransactionData, this);
      }
    };
  }
});

// node_modules/@mysten/sui/dist/cjs/transactions/utils.js
var require_utils7 = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/transactions/utils.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var utils_exports = {};
    __export2(utils_exports, {
      extractMutableReference: () => extractMutableReference,
      extractReference: () => extractReference,
      extractStructTag: () => extractStructTag,
      getIdFromCallArg: () => getIdFromCallArg,
      isArgument: () => isArgument
    });
    module2.exports = __toCommonJS2(utils_exports);
    var import_valibot = require_dist();
    var import_sui_types = require_sui_types();
    var import_internal = require_internal();
    function extractMutableReference(normalizedType) {
      return typeof normalizedType === "object" && "MutableReference" in normalizedType ? normalizedType.MutableReference : void 0;
    }
    function extractReference(normalizedType) {
      return typeof normalizedType === "object" && "Reference" in normalizedType ? normalizedType.Reference : void 0;
    }
    function extractStructTag(normalizedType) {
      if (typeof normalizedType === "object" && "Struct" in normalizedType) {
        return normalizedType;
      }
      const ref = extractReference(normalizedType);
      const mutRef = extractMutableReference(normalizedType);
      if (typeof ref === "object" && "Struct" in ref) {
        return ref;
      }
      if (typeof mutRef === "object" && "Struct" in mutRef) {
        return mutRef;
      }
      return void 0;
    }
    function getIdFromCallArg(arg) {
      if (typeof arg === "string") {
        return (0, import_sui_types.normalizeSuiAddress)(arg);
      }
      if (arg.Object) {
        if (arg.Object.ImmOrOwnedObject) {
          return (0, import_sui_types.normalizeSuiAddress)(arg.Object.ImmOrOwnedObject.objectId);
        }
        if (arg.Object.Receiving) {
          return (0, import_sui_types.normalizeSuiAddress)(arg.Object.Receiving.objectId);
        }
        return (0, import_sui_types.normalizeSuiAddress)(arg.Object.SharedObject.objectId);
      }
      if (arg.UnresolvedObject) {
        return (0, import_sui_types.normalizeSuiAddress)(arg.UnresolvedObject.objectId);
      }
      return void 0;
    }
    function isArgument(value) {
      return (0, import_valibot.is)(import_internal.Argument, value);
    }
  }
});

// node_modules/@mysten/sui/dist/cjs/transactions/Transaction.js
var require_Transaction = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/transactions/Transaction.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __typeError = (msg) => {
      throw TypeError(msg);
    };
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
    var __privateGet2 = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
    var __privateAdd2 = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
    var __privateSet2 = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
    var __privateMethod2 = (obj, member, method2) => (__accessCheck(obj, member, "access private method"), method2);
    var Transaction_exports = {};
    __export2(Transaction_exports, {
      Transaction: () => Transaction2,
      isTransaction: () => isTransaction
    });
    module2.exports = __toCommonJS2(Transaction_exports);
    var import_bcs = require_cjs();
    var import_valibot = require_dist();
    var import_sui_types = require_sui_types();
    var import_Commands = require_Commands();
    var import_internal = require_internal();
    var import_v12 = require_v1();
    var import_v2 = require_v2();
    var import_Inputs = require_Inputs();
    var import_json_rpc_resolver = require_json_rpc_resolver();
    var import_object = require_object();
    var import_pure = require_pure2();
    var import_TransactionData = require_TransactionData();
    var import_utils4 = require_utils7();
    var _serializationPlugins;
    var _buildPlugins;
    var _intentResolvers;
    var _data;
    var _Transaction_instances;
    var normalizeTransactionArgument_fn;
    var resolveArgument_fn;
    var prepareBuild_fn;
    var runPlugins_fn;
    function createTransactionResult(index, length = Infinity) {
      const baseResult = { $kind: "Result", Result: index };
      const nestedResults = [];
      const nestedResultFor = (resultIndex) => nestedResults[resultIndex] ?? (nestedResults[resultIndex] = {
        $kind: "NestedResult",
        NestedResult: [index, resultIndex]
      });
      return new Proxy(baseResult, {
        set() {
          throw new Error(
            "The transaction result is a proxy, and does not support setting properties directly"
          );
        },
        // TODO: Instead of making this return a concrete argument, we should ideally
        // make it reference-based (so that this gets resolved at build-time), which
        // allows re-ordering transactions.
        get(target, property) {
          if (property in target) {
            return Reflect.get(target, property);
          }
          if (property === Symbol.iterator) {
            return function* () {
              let i = 0;
              while (i < length) {
                yield nestedResultFor(i);
                i++;
              }
            };
          }
          if (typeof property === "symbol") return;
          const resultIndex = parseInt(property, 10);
          if (Number.isNaN(resultIndex) || resultIndex < 0) return;
          return nestedResultFor(resultIndex);
        }
      });
    }
    var TRANSACTION_BRAND = Symbol.for("@mysten/transaction");
    function isTransaction(obj) {
      return !!obj && typeof obj === "object" && obj[TRANSACTION_BRAND] === true;
    }
    var modulePluginRegistry = {
      buildPlugins: /* @__PURE__ */ new Map(),
      serializationPlugins: /* @__PURE__ */ new Map()
    };
    var TRANSACTION_REGISTRY_KEY = Symbol.for("@mysten/transaction/registry");
    function getGlobalPluginRegistry() {
      try {
        const target = globalThis;
        if (!target[TRANSACTION_REGISTRY_KEY]) {
          target[TRANSACTION_REGISTRY_KEY] = modulePluginRegistry;
        }
        return target[TRANSACTION_REGISTRY_KEY];
      } catch (e) {
        return modulePluginRegistry;
      }
    }
    var _Transaction = class _Transaction2 {
      constructor() {
        __privateAdd2(this, _Transaction_instances);
        __privateAdd2(this, _serializationPlugins);
        __privateAdd2(this, _buildPlugins);
        __privateAdd2(this, _intentResolvers, /* @__PURE__ */ new Map());
        __privateAdd2(this, _data);
        this.object = (0, import_object.createObjectMethods)(
          (value) => {
            var _a, _b;
            if (typeof value === "function") {
              return this.object(value(this));
            }
            if (typeof value === "object" && (0, import_valibot.is)(import_internal.Argument, value)) {
              return value;
            }
            const id = (0, import_utils4.getIdFromCallArg)(value);
            const inserted = __privateGet2(this, _data).inputs.find((i) => id === (0, import_utils4.getIdFromCallArg)(i));
            if (((_a = inserted == null ? void 0 : inserted.Object) == null ? void 0 : _a.SharedObject) && typeof value === "object" && ((_b = value.Object) == null ? void 0 : _b.SharedObject)) {
              inserted.Object.SharedObject.mutable = inserted.Object.SharedObject.mutable || value.Object.SharedObject.mutable;
            }
            return inserted ? { $kind: "Input", Input: __privateGet2(this, _data).inputs.indexOf(inserted), type: "object" } : __privateGet2(this, _data).addInput(
              "object",
              typeof value === "string" ? {
                $kind: "UnresolvedObject",
                UnresolvedObject: { objectId: (0, import_sui_types.normalizeSuiAddress)(value) }
              } : value
            );
          }
        );
        const globalPlugins = getGlobalPluginRegistry();
        __privateSet2(this, _data, new import_TransactionData.TransactionDataBuilder());
        __privateSet2(this, _buildPlugins, [...globalPlugins.buildPlugins.values()]);
        __privateSet2(this, _serializationPlugins, [...globalPlugins.serializationPlugins.values()]);
      }
      /**
       * Converts from a serialize transaction kind (built with `build({ onlyTransactionKind: true })`) to a `Transaction` class.
       * Supports either a byte array, or base64-encoded bytes.
       */
      static fromKind(serialized) {
        const tx = new _Transaction2();
        __privateSet2(tx, _data, import_TransactionData.TransactionDataBuilder.fromKindBytes(
          typeof serialized === "string" ? (0, import_bcs.fromBase64)(serialized) : serialized
        ));
        return tx;
      }
      /**
       * Converts from a serialized transaction format to a `Transaction` class.
       * There are two supported serialized formats:
       * - A string returned from `Transaction#serialize`. The serialized format must be compatible, or it will throw an error.
       * - A byte array (or base64-encoded bytes) containing BCS transaction data.
       */
      static from(transaction) {
        const newTransaction = new _Transaction2();
        if (isTransaction(transaction)) {
          __privateSet2(newTransaction, _data, new import_TransactionData.TransactionDataBuilder(transaction.getData()));
        } else if (typeof transaction !== "string" || !transaction.startsWith("{")) {
          __privateSet2(newTransaction, _data, import_TransactionData.TransactionDataBuilder.fromBytes(
            typeof transaction === "string" ? (0, import_bcs.fromBase64)(transaction) : transaction
          ));
        } else {
          __privateSet2(newTransaction, _data, import_TransactionData.TransactionDataBuilder.restore(JSON.parse(transaction)));
        }
        return newTransaction;
      }
      static registerGlobalSerializationPlugin(stepOrStep, step) {
        getGlobalPluginRegistry().serializationPlugins.set(
          stepOrStep,
          step ?? stepOrStep
        );
      }
      static unregisterGlobalSerializationPlugin(name) {
        getGlobalPluginRegistry().serializationPlugins.delete(name);
      }
      static registerGlobalBuildPlugin(stepOrStep, step) {
        getGlobalPluginRegistry().buildPlugins.set(
          stepOrStep,
          step ?? stepOrStep
        );
      }
      static unregisterGlobalBuildPlugin(name) {
        getGlobalPluginRegistry().buildPlugins.delete(name);
      }
      addSerializationPlugin(step) {
        __privateGet2(this, _serializationPlugins).push(step);
      }
      addBuildPlugin(step) {
        __privateGet2(this, _buildPlugins).push(step);
      }
      addIntentResolver(intent, resolver) {
        if (__privateGet2(this, _intentResolvers).has(intent) && __privateGet2(this, _intentResolvers).get(intent) !== resolver) {
          throw new Error(`Intent resolver for ${intent} already exists`);
        }
        __privateGet2(this, _intentResolvers).set(intent, resolver);
      }
      setSender(sender) {
        __privateGet2(this, _data).sender = sender;
      }
      /**
       * Sets the sender only if it has not already been set.
       * This is useful for sponsored transaction flows where the sender may not be the same as the signer address.
       */
      setSenderIfNotSet(sender) {
        if (!__privateGet2(this, _data).sender) {
          __privateGet2(this, _data).sender = sender;
        }
      }
      setExpiration(expiration) {
        __privateGet2(this, _data).expiration = expiration ? (0, import_valibot.parse)(import_internal.TransactionExpiration, expiration) : null;
      }
      setGasPrice(price) {
        __privateGet2(this, _data).gasConfig.price = String(price);
      }
      setGasBudget(budget) {
        __privateGet2(this, _data).gasConfig.budget = String(budget);
      }
      setGasBudgetIfNotSet(budget) {
        if (__privateGet2(this, _data).gasData.budget == null) {
          __privateGet2(this, _data).gasConfig.budget = String(budget);
        }
      }
      setGasOwner(owner) {
        __privateGet2(this, _data).gasConfig.owner = owner;
      }
      setGasPayment(payments) {
        __privateGet2(this, _data).gasConfig.payment = payments.map((payment) => (0, import_valibot.parse)(import_internal.ObjectRef, payment));
      }
      /** @deprecated Use `getData()` instead. */
      get blockData() {
        return (0, import_v12.serializeV1TransactionData)(__privateGet2(this, _data).snapshot());
      }
      /** Get a snapshot of the transaction data, in JSON form: */
      getData() {
        return __privateGet2(this, _data).snapshot();
      }
      // Used to brand transaction classes so that they can be identified, even between multiple copies
      // of the builder.
      get [TRANSACTION_BRAND]() {
        return true;
      }
      // Temporary workaround for the wallet interface accidentally serializing transactions via postMessage
      get pure() {
        Object.defineProperty(this, "pure", {
          enumerable: false,
          value: (0, import_pure.createPure)((value) => {
            if ((0, import_bcs.isSerializedBcs)(value)) {
              return __privateGet2(this, _data).addInput("pure", {
                $kind: "Pure",
                Pure: {
                  bytes: value.toBase64()
                }
              });
            }
            return __privateGet2(this, _data).addInput(
              "pure",
              (0, import_valibot.is)(import_internal.NormalizedCallArg, value) ? (0, import_valibot.parse)(import_internal.NormalizedCallArg, value) : value instanceof Uint8Array ? import_Inputs.Inputs.Pure(value) : { $kind: "UnresolvedPure", UnresolvedPure: { value } }
            );
          })
        });
        return this.pure;
      }
      /** Returns an argument for the gas coin, to be used in a transaction. */
      get gas() {
        return { $kind: "GasCoin", GasCoin: true };
      }
      /**
       * Add a new object input to the transaction using the fully-resolved object reference.
       * If you only have an object ID, use `builder.object(id)` instead.
       */
      objectRef(...args) {
        return this.object(import_Inputs.Inputs.ObjectRef(...args));
      }
      /**
       * Add a new receiving input to the transaction using the fully-resolved object reference.
       * If you only have an object ID, use `builder.object(id)` instead.
       */
      receivingRef(...args) {
        return this.object(import_Inputs.Inputs.ReceivingRef(...args));
      }
      /**
       * Add a new shared object input to the transaction using the fully-resolved shared object reference.
       * If you only have an object ID, use `builder.object(id)` instead.
       */
      sharedObjectRef(...args) {
        return this.object(import_Inputs.Inputs.SharedObjectRef(...args));
      }
      /** Add a transaction to the transaction */
      add(command) {
        if (typeof command === "function") {
          return command(this);
        }
        const index = __privateGet2(this, _data).commands.push(command);
        return createTransactionResult(index - 1);
      }
      // Method shorthands:
      splitCoins(coin, amounts) {
        const command = import_Commands.Commands.SplitCoins(
          typeof coin === "string" ? this.object(coin) : __privateMethod2(this, _Transaction_instances, resolveArgument_fn).call(this, coin),
          amounts.map(
            (amount) => typeof amount === "number" || typeof amount === "bigint" || typeof amount === "string" ? this.pure.u64(amount) : __privateMethod2(this, _Transaction_instances, normalizeTransactionArgument_fn).call(this, amount)
          )
        );
        const index = __privateGet2(this, _data).commands.push(command);
        return createTransactionResult(index - 1, amounts.length);
      }
      mergeCoins(destination, sources) {
        return this.add(
          import_Commands.Commands.MergeCoins(
            this.object(destination),
            sources.map((src) => this.object(src))
          )
        );
      }
      publish({ modules, dependencies }) {
        return this.add(
          import_Commands.Commands.Publish({
            modules,
            dependencies
          })
        );
      }
      upgrade({
        modules,
        dependencies,
        package: packageId,
        ticket
      }) {
        return this.add(
          import_Commands.Commands.Upgrade({
            modules,
            dependencies,
            package: packageId,
            ticket: this.object(ticket)
          })
        );
      }
      moveCall({
        arguments: args,
        ...input
      }) {
        return this.add(
          import_Commands.Commands.MoveCall({
            ...input,
            arguments: args == null ? void 0 : args.map((arg) => __privateMethod2(this, _Transaction_instances, normalizeTransactionArgument_fn).call(this, arg))
          })
        );
      }
      transferObjects(objects, address) {
        return this.add(
          import_Commands.Commands.TransferObjects(
            objects.map((obj) => this.object(obj)),
            typeof address === "string" ? this.pure.address(address) : __privateMethod2(this, _Transaction_instances, normalizeTransactionArgument_fn).call(this, address)
          )
        );
      }
      makeMoveVec({
        type: type2,
        elements
      }) {
        return this.add(
          import_Commands.Commands.MakeMoveVec({
            type: type2,
            elements: elements.map((obj) => this.object(obj))
          })
        );
      }
      /**
       * @deprecated Use toJSON instead.
       * For synchronous serialization, you can use `getData()`
       * */
      serialize() {
        return JSON.stringify((0, import_v12.serializeV1TransactionData)(__privateGet2(this, _data).snapshot()));
      }
      async toJSON(options = {}) {
        await this.prepareForSerialization(options);
        return JSON.stringify(
          (0, import_valibot.parse)(import_v2.SerializedTransactionDataV2, __privateGet2(this, _data).snapshot()),
          (_key, value) => typeof value === "bigint" ? value.toString() : value,
          2
        );
      }
      /** Build the transaction to BCS bytes, and sign it with the provided keypair. */
      async sign(options) {
        const { signer, ...buildOptions } = options;
        const bytes = await this.build(buildOptions);
        return signer.signTransaction(bytes);
      }
      /** Build the transaction to BCS bytes. */
      async build(options = {}) {
        await this.prepareForSerialization(options);
        await __privateMethod2(this, _Transaction_instances, prepareBuild_fn).call(this, options);
        return __privateGet2(this, _data).build({
          onlyTransactionKind: options.onlyTransactionKind
        });
      }
      /** Derive transaction digest */
      async getDigest(options = {}) {
        await __privateMethod2(this, _Transaction_instances, prepareBuild_fn).call(this, options);
        return __privateGet2(this, _data).getDigest();
      }
      async prepareForSerialization(options) {
        var _a;
        const intents = /* @__PURE__ */ new Set();
        for (const command of __privateGet2(this, _data).commands) {
          if (command.$Intent) {
            intents.add(command.$Intent.name);
          }
        }
        const steps = [...__privateGet2(this, _serializationPlugins)];
        for (const intent of intents) {
          if ((_a = options.supportedIntents) == null ? void 0 : _a.includes(intent)) {
            continue;
          }
          if (!__privateGet2(this, _intentResolvers).has(intent)) {
            throw new Error(`Missing intent resolver for ${intent}`);
          }
          steps.push(__privateGet2(this, _intentResolvers).get(intent));
        }
        await __privateMethod2(this, _Transaction_instances, runPlugins_fn).call(this, steps, options);
      }
    };
    _serializationPlugins = /* @__PURE__ */ new WeakMap();
    _buildPlugins = /* @__PURE__ */ new WeakMap();
    _intentResolvers = /* @__PURE__ */ new WeakMap();
    _data = /* @__PURE__ */ new WeakMap();
    _Transaction_instances = /* @__PURE__ */ new WeakSet();
    normalizeTransactionArgument_fn = function(arg) {
      if ((0, import_bcs.isSerializedBcs)(arg)) {
        return this.pure(arg);
      }
      return __privateMethod2(this, _Transaction_instances, resolveArgument_fn).call(this, arg);
    };
    resolveArgument_fn = function(arg) {
      if (typeof arg === "function") {
        return (0, import_valibot.parse)(import_internal.Argument, arg(this));
      }
      return (0, import_valibot.parse)(import_internal.Argument, arg);
    };
    prepareBuild_fn = async function(options) {
      if (!options.onlyTransactionKind && !__privateGet2(this, _data).sender) {
        throw new Error("Missing transaction sender");
      }
      await __privateMethod2(this, _Transaction_instances, runPlugins_fn).call(this, [...__privateGet2(this, _buildPlugins), import_json_rpc_resolver.resolveTransactionData], options);
    };
    runPlugins_fn = async function(plugins, options) {
      const createNext = (i) => {
        if (i >= plugins.length) {
          return () => {
          };
        }
        const plugin = plugins[i];
        return async () => {
          const next = createNext(i + 1);
          let calledNext = false;
          let nextResolved = false;
          await plugin(__privateGet2(this, _data), options, async () => {
            if (calledNext) {
              throw new Error(`next() was call multiple times in TransactionPlugin ${i}`);
            }
            calledNext = true;
            await next();
            nextResolved = true;
          });
          if (!calledNext) {
            throw new Error(`next() was not called in TransactionPlugin ${i}`);
          }
          if (!nextResolved) {
            throw new Error(`next() was not awaited in TransactionPlugin ${i}`);
          }
        };
      };
      await createNext(0)();
    };
    var Transaction2 = _Transaction;
  }
});

// node_modules/@mysten/sui/dist/cjs/experimental/core.js
var require_core = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/experimental/core.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var core_exports = {};
    __export2(core_exports, {
      Experimental_CoreClient: () => Experimental_CoreClient
    });
    module2.exports = __toCommonJS2(core_exports);
    var import_type_tag_serializer = require_type_tag_serializer();
    var import_dynamic_fields = require_dynamic_fields();
    var import_sui_types = require_sui_types();
    var import_client = require_client2();
    var Experimental_CoreClient = class extends import_client.Experimental_BaseClient {
      constructor() {
        super(...arguments);
        this.core = this;
      }
      async getDynamicField(options) {
        const fieldId = (0, import_dynamic_fields.deriveDynamicFieldID)(
          options.parentId,
          import_type_tag_serializer.TypeTagSerializer.parseFromStr(options.name.type),
          options.name.bcs
        );
        const {
          objects: [fieldObject]
        } = await this.getObjects({
          objectIds: [fieldId]
        });
        if (fieldObject instanceof Error) {
          throw fieldObject;
        }
        const fieldType = (0, import_sui_types.parseStructTag)(fieldObject.type);
        return {
          dynamicField: {
            id: fieldObject.id,
            digest: fieldObject.digest,
            version: fieldObject.version,
            type: fieldObject.type,
            name: {
              type: typeof fieldType.typeParams[0] === "string" ? fieldType.typeParams[0] : (0, import_sui_types.normalizeStructTag)(fieldType.typeParams[0]),
              bcs: options.name.bcs
            },
            value: {
              type: typeof fieldType.typeParams[1] === "string" ? fieldType.typeParams[1] : (0, import_sui_types.normalizeStructTag)(fieldType.typeParams[1]),
              bcs: fieldObject.content.slice(import_sui_types.SUI_ADDRESS_LENGTH + options.name.bcs.length)
            }
          }
        };
      }
      async waitForTransaction({
        signal,
        timeout = 60 * 1e3,
        ...input
      }) {
        const abortSignal = signal ? AbortSignal.any([AbortSignal.timeout(timeout), signal]) : AbortSignal.timeout(timeout);
        const abortPromise = new Promise((_, reject) => {
          abortSignal.addEventListener("abort", () => reject(abortSignal.reason));
        });
        abortPromise.catch(() => {
        });
        while (true) {
          abortSignal.throwIfAborted();
          try {
            return await this.getTransaction({
              ...input,
              signal: abortSignal
            });
          } catch (e) {
            await Promise.race([new Promise((resolve) => setTimeout(resolve, 2e3)), abortPromise]);
          }
        }
      }
    };
  }
});

// node_modules/@mysten/sui/dist/cjs/experimental/errors.js
var require_errors2 = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/experimental/errors.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var errors_exports = {};
    __export2(errors_exports, {
      ObjectError: () => ObjectError,
      SuiClientError: () => SuiClientError
    });
    module2.exports = __toCommonJS2(errors_exports);
    var SuiClientError = class extends Error {
    };
    var ObjectError = class _ObjectError extends SuiClientError {
      constructor(code, message) {
        super(message);
        this.code = code;
      }
      static fromResponse(response, objectId) {
        switch (response.code) {
          case "notExists":
            return new _ObjectError(response.code, `Object ${response.object_id} does not exist`);
          case "dynamicFieldNotFound":
            return new _ObjectError(
              response.code,
              `Dynamic field not found for object ${response.parent_object_id}`
            );
          case "deleted":
            return new _ObjectError(response.code, `Object ${response.object_id} has been deleted`);
          case "displayError":
            return new _ObjectError(response.code, `Display error: ${response.error}`);
          case "unknown":
          default:
            return new _ObjectError(
              response.code,
              `Unknown error while loading object${objectId ? ` ${objectId}` : ""}`
            );
        }
      }
    };
  }
});

// node_modules/@mysten/sui/dist/cjs/experimental/transports/jsonRPC.js
var require_jsonRPC = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/experimental/transports/jsonRPC.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __typeError = (msg) => {
      throw TypeError(msg);
    };
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
    var __privateGet2 = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
    var __privateAdd2 = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
    var __privateSet2 = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
    var jsonRPC_exports = {};
    __export2(jsonRPC_exports, {
      JSONRpcTransport: () => JSONRpcTransport
    });
    module2.exports = __toCommonJS2(jsonRPC_exports);
    var import_bcs = require_cjs();
    var import_bcs2 = require_bcs3();
    var import_utils4 = require_utils5();
    var import_Transaction = require_Transaction();
    var import_sui_types = require_sui_types();
    var import_core = require_core();
    var import_errors3 = require_errors2();
    var _jsonRpcClient;
    var JSONRpcTransport = class extends import_core.Experimental_CoreClient {
      constructor(jsonRpcClient) {
        super({ network: jsonRpcClient.network });
        __privateAdd2(this, _jsonRpcClient);
        __privateSet2(this, _jsonRpcClient, jsonRpcClient);
      }
      async getObjects(options) {
        const batches = (0, import_utils4.batch)(options.objectIds, 50);
        const results = [];
        for (const batch2 of batches) {
          const objects = await __privateGet2(this, _jsonRpcClient).multiGetObjects({
            ids: batch2,
            options: {
              showOwner: true,
              showType: true,
              showBcs: true
            }
          });
          for (const [idx, object] of objects.entries()) {
            if (object.error) {
              results.push(import_errors3.ObjectError.fromResponse(object.error, batch2[idx]));
            } else {
              results.push(parseObject(object.data));
            }
          }
        }
        return {
          objects: results
        };
      }
      async getOwnedObjects(options) {
        const objects = await __privateGet2(this, _jsonRpcClient).getOwnedObjects({
          owner: options.address,
          limit: options.limit,
          cursor: options.cursor,
          options: {
            showOwner: true,
            showType: true,
            showBcs: true
          }
        });
        return {
          objects: objects.data.map((result) => {
            if (result.error) {
              throw import_errors3.ObjectError.fromResponse(result.error);
            }
            return parseObject(result.data);
          }),
          hasNextPage: objects.hasNextPage,
          cursor: objects.nextCursor ?? null
        };
      }
      async getCoins(options) {
        const coins = await __privateGet2(this, _jsonRpcClient).getCoins({
          owner: options.address,
          coinType: options.coinType
        });
        return {
          objects: coins.data.map((coin) => {
            return {
              id: coin.coinObjectId,
              version: coin.version,
              digest: coin.digest,
              balance: coin.balance,
              type: `0x2::coin::Coin<${coin.coinType}>`,
              content: Coin.serialize({
                id: coin.coinObjectId,
                balance: {
                  value: coin.balance
                }
              }).toBytes(),
              owner: {
                $kind: "ObjectOwner",
                ObjectOwner: options.address
              }
            };
          }),
          hasNextPage: coins.hasNextPage,
          cursor: coins.nextCursor ?? null
        };
      }
      async getBalance(options) {
        const balance = await __privateGet2(this, _jsonRpcClient).getBalance({
          owner: options.address,
          coinType: options.coinType
        });
        return {
          balance: {
            coinType: balance.coinType,
            balance: balance.totalBalance
          }
        };
      }
      async getAllBalances(options) {
        const balances = await __privateGet2(this, _jsonRpcClient).getAllBalances({
          owner: options.address
        });
        return {
          balances: balances.map((balance) => ({
            coinType: balance.coinType,
            balance: balance.totalBalance
          })),
          hasNextPage: false,
          cursor: null
        };
      }
      async getTransaction(options) {
        const transaction = await __privateGet2(this, _jsonRpcClient).getTransactionBlock({
          digest: options.digest,
          options: {
            showRawInput: true,
            showObjectChanges: true,
            showRawEffects: true,
            showEvents: true
          }
        });
        return {
          transaction: parseTransaction(transaction)
        };
      }
      async executeTransaction(options) {
        const transaction = await __privateGet2(this, _jsonRpcClient).executeTransactionBlock({
          transactionBlock: options.transaction,
          signature: options.signatures,
          options: {
            showRawEffects: true,
            showEvents: true,
            showObjectChanges: true,
            showRawInput: true
          }
        });
        return {
          transaction: parseTransaction(transaction)
        };
      }
      async dryRunTransaction(options) {
        const tx = import_Transaction.Transaction.from(options.transaction);
        const result = await __privateGet2(this, _jsonRpcClient).dryRunTransactionBlock({
          transactionBlock: options.transaction
        });
        return {
          transaction: {
            digest: await tx.getDigest(),
            effects: parseTransactionEffectsJson({
              effects: result.effects,
              objectChanges: result.objectChanges
            }),
            signatures: [],
            bcs: options.transaction
          }
        };
      }
      async getReferenceGasPrice() {
        const referenceGasPrice = await __privateGet2(this, _jsonRpcClient).getReferenceGasPrice();
        return {
          referenceGasPrice: String(referenceGasPrice)
        };
      }
      async getDynamicFields(options) {
        const dynamicFields = await __privateGet2(this, _jsonRpcClient).getDynamicFields({
          parentId: options.parentId,
          limit: options.limit,
          cursor: options.cursor
        });
        return {
          dynamicFields: dynamicFields.data.map((dynamicField) => ({
            id: dynamicField.objectId,
            version: dynamicField.version,
            digest: dynamicField.digest,
            type: dynamicField.objectType,
            name: {
              type: dynamicField.name.type,
              bcs: (0, import_bcs.fromBase64)(dynamicField.bcsName)
            }
          })),
          hasNextPage: dynamicFields.hasNextPage,
          cursor: dynamicFields.nextCursor
        };
      }
    };
    _jsonRpcClient = /* @__PURE__ */ new WeakMap();
    function parseObject(object) {
      var _a;
      return {
        id: object.objectId,
        version: object.version,
        digest: object.digest,
        type: object.type,
        content: ((_a = object.bcs) == null ? void 0 : _a.dataType) === "moveObject" ? (0, import_bcs.fromBase64)(object.bcs.bcsBytes) : new Uint8Array(),
        owner: parseOwner(object.owner)
      };
    }
    function parseOwner(owner) {
      if (owner === "Immutable") {
        return {
          $kind: "Immutable",
          Immutable: true
        };
      }
      if ("ConsensusV2" in owner) {
        return {
          $kind: "ConsensusV2",
          ConsensusV2: {
            authenticator: {
              $kind: "SingleOwner",
              SingleOwner: owner.ConsensusV2.authenticator.SingleOwner
            },
            startVersion: owner.ConsensusV2.start_version
          }
        };
      }
      if ("AddressOwner" in owner) {
        return {
          $kind: "AddressOwner",
          AddressOwner: owner.AddressOwner
        };
      }
      if ("ObjectOwner" in owner) {
        return {
          $kind: "ObjectOwner",
          ObjectOwner: owner.ObjectOwner
        };
      }
      if ("Shared" in owner) {
        return {
          $kind: "Shared",
          Shared: {
            initialSharedVersion: owner.Shared.initial_shared_version
          }
        };
      }
      throw new Error(`Unknown owner type: ${JSON.stringify(owner)}`);
    }
    function parseTransaction(transaction) {
      const parsedTx = import_bcs2.bcs.SenderSignedData.parse((0, import_bcs.fromBase64)(transaction.rawTransaction))[0];
      return {
        digest: transaction.digest,
        effects: parseTransactionEffects({
          effects: new Uint8Array(transaction.rawEffects),
          objectChanges: transaction.objectChanges ?? null
        }),
        bcs: import_bcs2.bcs.TransactionData.serialize(parsedTx.intentMessage.value).toBytes(),
        signatures: parsedTx.txSignatures
      };
    }
    function parseTransactionEffects({
      effects,
      epoch,
      objectChanges
    }) {
      const parsed = import_bcs2.bcs.TransactionEffects.parse(effects);
      const objectTypes = {};
      objectChanges == null ? void 0 : objectChanges.forEach((change) => {
        if (change.type !== "published") {
          objectTypes[change.objectId] = change.objectType;
        }
      });
      switch (parsed.$kind) {
        case "V1":
          return parseTransactionEffectsV1({ bytes: effects, effects: parsed.V1, epoch, objectTypes });
        case "V2":
          return parseTransactionEffectsV2({ bytes: effects, effects: parsed.V2, epoch, objectTypes });
        default:
          throw new Error(
            `Unknown transaction effects version: ${parsed.$kind}`
          );
      }
    }
    function parseTransactionEffectsV1(_) {
      throw new Error("V1 effects are not supported yet");
    }
    function parseTransactionEffectsV2({
      bytes,
      effects,
      epoch,
      objectTypes
    }) {
      const changedObjects = effects.changedObjects.map(
        ([id, change]) => {
          var _a, _b, _c, _d, _e, _f;
          return {
            id,
            inputState: change.inputState.$kind === "Exist" ? "Exists" : "DoesNotExist",
            inputVersion: ((_a = change.inputState.Exist) == null ? void 0 : _a[0][0]) ?? null,
            inputDigest: ((_b = change.inputState.Exist) == null ? void 0 : _b[0][1]) ?? null,
            inputOwner: ((_c = change.inputState.Exist) == null ? void 0 : _c[1]) ?? null,
            outputState: change.outputState.$kind === "NotExist" ? "DoesNotExist" : change.outputState.$kind,
            outputVersion: change.outputState.$kind === "PackageWrite" ? (_d = change.outputState.PackageWrite) == null ? void 0 : _d[0] : change.outputState.ObjectWrite ? effects.lamportVersion : null,
            outputDigest: change.outputState.$kind === "PackageWrite" ? (_e = change.outputState.PackageWrite) == null ? void 0 : _e[1] : ((_f = change.outputState.ObjectWrite) == null ? void 0 : _f[0]) ?? null,
            outputOwner: change.outputState.ObjectWrite ? change.outputState.ObjectWrite[1] : null,
            idOperation: change.idOperation.$kind,
            objectType: objectTypes[id] ?? null
          };
        }
      );
      return {
        bcs: bytes,
        digest: effects.transactionDigest,
        version: 2,
        status: effects.status.$kind === "Success" ? {
          success: true,
          error: null
        } : {
          success: false,
          // TODO: add command
          error: effects.status.Failed.error.$kind
        },
        epoch: epoch ?? null,
        gasUsed: effects.gasUsed,
        transactionDigest: effects.transactionDigest,
        gasObject: effects.gasObjectIndex === null ? null : changedObjects[effects.gasObjectIndex] ?? null,
        eventsDigest: effects.eventsDigest,
        dependencies: effects.dependencies,
        lamportVersion: effects.lamportVersion,
        changedObjects,
        unchangedSharedObjects: effects.unchangedSharedObjects.map(
          ([objectId, object]) => {
            return {
              kind: object.$kind,
              objectId,
              version: object.$kind === "ReadOnlyRoot" ? object.ReadOnlyRoot[0] : object[object.$kind],
              digest: object.$kind === "ReadOnlyRoot" ? object.ReadOnlyRoot[1] : null,
              objectType: objectTypes[objectId] ?? null
            };
          }
        ),
        auxiliaryDataDigest: effects.auxDataDigest
      };
    }
    function parseTransactionEffectsJson({
      bytes,
      effects,
      epoch,
      objectChanges
    }) {
      var _a;
      const changedObjects = [];
      const unchangedSharedObjects = [];
      objectChanges == null ? void 0 : objectChanges.forEach((change) => {
        var _a2, _b, _c, _d;
        switch (change.type) {
          case "published":
            changedObjects.push({
              id: change.packageId,
              inputState: "DoesNotExist",
              inputVersion: null,
              inputDigest: null,
              inputOwner: null,
              outputState: "PackageWrite",
              outputVersion: change.version,
              outputDigest: change.digest,
              outputOwner: null,
              idOperation: "Created",
              objectType: null
            });
            break;
          case "transferred":
            changedObjects.push({
              id: change.objectId,
              inputState: "Exists",
              inputVersion: change.version,
              inputDigest: change.digest,
              inputOwner: {
                $kind: "AddressOwner",
                AddressOwner: change.sender
              },
              outputState: "ObjectWrite",
              outputVersion: change.version,
              outputDigest: change.digest,
              outputOwner: parseOwner(change.recipient),
              idOperation: "None",
              objectType: change.objectType
            });
            break;
          case "mutated":
            changedObjects.push({
              id: change.objectId,
              inputState: "Exists",
              inputVersion: change.previousVersion,
              inputDigest: null,
              inputOwner: parseOwner(change.owner),
              outputState: "ObjectWrite",
              outputVersion: change.version,
              outputDigest: change.digest,
              outputOwner: parseOwner(change.owner),
              idOperation: "None",
              objectType: change.objectType
            });
            break;
          case "deleted":
            changedObjects.push({
              id: change.objectId,
              inputState: "Exists",
              inputVersion: change.version,
              inputDigest: ((_b = (_a2 = effects.deleted) == null ? void 0 : _a2.find((d) => d.objectId === change.objectId)) == null ? void 0 : _b.digest) ?? null,
              inputOwner: null,
              outputState: "DoesNotExist",
              outputVersion: null,
              outputDigest: null,
              outputOwner: null,
              idOperation: "Deleted",
              objectType: change.objectType
            });
            break;
          case "wrapped":
            changedObjects.push({
              id: change.objectId,
              inputState: "Exists",
              inputVersion: change.version,
              inputDigest: null,
              inputOwner: {
                $kind: "AddressOwner",
                AddressOwner: change.sender
              },
              outputState: "ObjectWrite",
              outputVersion: change.version,
              outputDigest: ((_d = (_c = effects.wrapped) == null ? void 0 : _c.find((w) => w.objectId === change.objectId)) == null ? void 0 : _d.digest) ?? null,
              outputOwner: {
                $kind: "ObjectOwner",
                ObjectOwner: change.sender
              },
              idOperation: "None",
              objectType: change.objectType
            });
            break;
          case "created":
            changedObjects.push({
              id: change.objectId,
              inputState: "DoesNotExist",
              inputVersion: null,
              inputDigest: null,
              inputOwner: null,
              outputState: "ObjectWrite",
              outputVersion: change.version,
              outputDigest: change.digest,
              outputOwner: parseOwner(change.owner),
              idOperation: "Created",
              objectType: change.objectType
            });
            break;
        }
      });
      return {
        bcs: bytes ?? null,
        digest: effects.transactionDigest,
        version: 2,
        status: effects.status.status === "success" ? { success: true, error: null } : { success: false, error: effects.status.error },
        epoch: epoch ?? null,
        gasUsed: effects.gasUsed,
        transactionDigest: effects.transactionDigest,
        gasObject: {
          id: (_a = effects.gasObject) == null ? void 0 : _a.reference.objectId,
          inputState: "Exists",
          inputVersion: null,
          inputDigest: null,
          inputOwner: null,
          outputState: "ObjectWrite",
          outputVersion: effects.gasObject.reference.version,
          outputDigest: effects.gasObject.reference.digest,
          outputOwner: parseOwner(effects.gasObject.owner),
          idOperation: "None",
          objectType: (0, import_sui_types.normalizeStructTag)("0x2::coin::Coin<0x2::sui::SUI>")
        },
        eventsDigest: effects.eventsDigest ?? null,
        dependencies: effects.dependencies ?? [],
        lamportVersion: effects.gasObject.reference.version,
        changedObjects,
        unchangedSharedObjects,
        auxiliaryDataDigest: null
      };
    }
    var Balance = import_bcs2.bcs.struct("Balance", {
      value: import_bcs2.bcs.u64()
    });
    var Coin = import_bcs2.bcs.struct("Coin", {
      id: import_bcs2.bcs.Address,
      balance: Balance
    });
  }
});

// node_modules/@mysten/sui/dist/cjs/transactions/ObjectCache.js
var require_ObjectCache = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/transactions/ObjectCache.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __typeError = (msg) => {
      throw TypeError(msg);
    };
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
    var __privateGet2 = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
    var __privateAdd2 = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
    var __privateSet2 = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
    var ObjectCache_exports = {};
    __export2(ObjectCache_exports, {
      AsyncCache: () => AsyncCache,
      InMemoryCache: () => InMemoryCache,
      ObjectCache: () => ObjectCache
    });
    module2.exports = __toCommonJS2(ObjectCache_exports);
    var import_sui_types = require_sui_types();
    var _caches;
    var _cache;
    var _onEffects;
    var AsyncCache = class {
      async getObject(id) {
        const [owned, shared] = await Promise.all([
          this.get("OwnedObject", id),
          this.get("SharedOrImmutableObject", id)
        ]);
        return owned ?? shared ?? null;
      }
      async getObjects(ids) {
        return Promise.all([...ids.map((id) => this.getObject(id))]);
      }
      async addObject(object) {
        if (object.owner) {
          await this.set("OwnedObject", object.objectId, object);
        } else {
          await this.set("SharedOrImmutableObject", object.objectId, object);
        }
        return object;
      }
      async addObjects(objects) {
        await Promise.all(objects.map(async (object) => this.addObject(object)));
      }
      async deleteObject(id) {
        await Promise.all([this.delete("OwnedObject", id), this.delete("SharedOrImmutableObject", id)]);
      }
      async deleteObjects(ids) {
        await Promise.all(ids.map((id) => this.deleteObject(id)));
      }
      async getMoveFunctionDefinition(ref) {
        const functionName = `${(0, import_sui_types.normalizeSuiAddress)(ref.package)}::${ref.module}::${ref.function}`;
        return this.get("MoveFunction", functionName);
      }
      async addMoveFunctionDefinition(functionEntry) {
        const pkg = (0, import_sui_types.normalizeSuiAddress)(functionEntry.package);
        const functionName = `${pkg}::${functionEntry.module}::${functionEntry.function}`;
        const entry = {
          ...functionEntry,
          package: pkg
        };
        await this.set("MoveFunction", functionName, entry);
        return entry;
      }
      async deleteMoveFunctionDefinition(ref) {
        const functionName = `${(0, import_sui_types.normalizeSuiAddress)(ref.package)}::${ref.module}::${ref.function}`;
        await this.delete("MoveFunction", functionName);
      }
      async getCustom(key) {
        return this.get("Custom", key);
      }
      async setCustom(key, value) {
        return this.set("Custom", key, value);
      }
      async deleteCustom(key) {
        return this.delete("Custom", key);
      }
    };
    var InMemoryCache = class extends AsyncCache {
      constructor() {
        super(...arguments);
        __privateAdd2(this, _caches, {
          OwnedObject: /* @__PURE__ */ new Map(),
          SharedOrImmutableObject: /* @__PURE__ */ new Map(),
          MoveFunction: /* @__PURE__ */ new Map(),
          Custom: /* @__PURE__ */ new Map()
        });
      }
      async get(type2, key) {
        return __privateGet2(this, _caches)[type2].get(key) ?? null;
      }
      async set(type2, key, value) {
        __privateGet2(this, _caches)[type2].set(key, value);
      }
      async delete(type2, key) {
        __privateGet2(this, _caches)[type2].delete(key);
      }
      async clear(type2) {
        if (type2) {
          __privateGet2(this, _caches)[type2].clear();
        } else {
          for (const cache of Object.values(__privateGet2(this, _caches))) {
            cache.clear();
          }
        }
      }
    };
    _caches = /* @__PURE__ */ new WeakMap();
    var ObjectCache = class {
      constructor({ cache = new InMemoryCache(), onEffects }) {
        __privateAdd2(this, _cache);
        __privateAdd2(this, _onEffects);
        __privateSet2(this, _cache, cache);
        __privateSet2(this, _onEffects, onEffects);
      }
      asPlugin() {
        return async (transactionData, _options, next) => {
          const unresolvedObjects = transactionData.inputs.filter((input) => input.UnresolvedObject).map((input) => input.UnresolvedObject.objectId);
          const cached = (await __privateGet2(this, _cache).getObjects(unresolvedObjects)).filter(
            (obj) => obj !== null
          );
          const byId = new Map(cached.map((obj) => [obj.objectId, obj]));
          for (const input of transactionData.inputs) {
            if (!input.UnresolvedObject) {
              continue;
            }
            const cached2 = byId.get(input.UnresolvedObject.objectId);
            if (!cached2) {
              continue;
            }
            if (cached2.initialSharedVersion && !input.UnresolvedObject.initialSharedVersion) {
              input.UnresolvedObject.initialSharedVersion = cached2.initialSharedVersion;
            } else {
              if (cached2.version && !input.UnresolvedObject.version) {
                input.UnresolvedObject.version = cached2.version;
              }
              if (cached2.digest && !input.UnresolvedObject.digest) {
                input.UnresolvedObject.digest = cached2.digest;
              }
            }
          }
          await Promise.all(
            transactionData.commands.map(async (commands) => {
              if (commands.MoveCall) {
                const def = await this.getMoveFunctionDefinition({
                  package: commands.MoveCall.package,
                  module: commands.MoveCall.module,
                  function: commands.MoveCall.function
                });
                if (def) {
                  commands.MoveCall._argumentTypes = def.parameters;
                }
              }
            })
          );
          await next();
          await Promise.all(
            transactionData.commands.map(async (commands) => {
              var _a;
              if ((_a = commands.MoveCall) == null ? void 0 : _a._argumentTypes) {
                await __privateGet2(this, _cache).addMoveFunctionDefinition({
                  package: commands.MoveCall.package,
                  module: commands.MoveCall.module,
                  function: commands.MoveCall.function,
                  parameters: commands.MoveCall._argumentTypes
                });
              }
            })
          );
        };
      }
      async clear() {
        await __privateGet2(this, _cache).clear();
      }
      async getMoveFunctionDefinition(ref) {
        return __privateGet2(this, _cache).getMoveFunctionDefinition(ref);
      }
      async getObjects(ids) {
        return __privateGet2(this, _cache).getObjects(ids);
      }
      async deleteObjects(ids) {
        return __privateGet2(this, _cache).deleteObjects(ids);
      }
      async clearOwnedObjects() {
        await __privateGet2(this, _cache).clear("OwnedObject");
      }
      async clearCustom() {
        await __privateGet2(this, _cache).clear("Custom");
      }
      async getCustom(key) {
        return __privateGet2(this, _cache).getCustom(key);
      }
      async setCustom(key, value) {
        return __privateGet2(this, _cache).setCustom(key, value);
      }
      async deleteCustom(key) {
        return __privateGet2(this, _cache).deleteCustom(key);
      }
      async applyEffects(effects) {
        var _a;
        if (!effects.V2) {
          throw new Error(`Unsupported transaction effects version ${effects.$kind}`);
        }
        const { lamportVersion, changedObjects } = effects.V2;
        const deletedIds = [];
        const addedObjects = [];
        changedObjects.forEach(([id, change]) => {
          var _a2;
          if (change.outputState.NotExist) {
            deletedIds.push(id);
          } else if (change.outputState.ObjectWrite) {
            const [digest, owner] = change.outputState.ObjectWrite;
            addedObjects.push({
              objectId: id,
              digest,
              version: lamportVersion,
              owner: owner.AddressOwner ?? owner.ObjectOwner ?? null,
              initialSharedVersion: ((_a2 = owner.Shared) == null ? void 0 : _a2.initialSharedVersion) ?? null
            });
          }
        });
        await Promise.all([
          __privateGet2(this, _cache).addObjects(addedObjects),
          __privateGet2(this, _cache).deleteObjects(deletedIds),
          (_a = __privateGet2(this, _onEffects)) == null ? void 0 : _a.call(this, effects)
        ]);
      }
    };
    _cache = /* @__PURE__ */ new WeakMap();
    _onEffects = /* @__PURE__ */ new WeakMap();
  }
});

// node_modules/@mysten/sui/dist/cjs/transactions/executor/caching.js
var require_caching = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/transactions/executor/caching.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __typeError = (msg) => {
      throw TypeError(msg);
    };
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
    var __privateGet2 = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
    var __privateAdd2 = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
    var __privateSet2 = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
    var caching_exports = {};
    __export2(caching_exports, {
      CachingTransactionExecutor: () => CachingTransactionExecutor
    });
    module2.exports = __toCommonJS2(caching_exports);
    var import_bcs = require_bcs3();
    var import_ObjectCache = require_ObjectCache();
    var import_Transaction = require_Transaction();
    var _client;
    var _lastDigest;
    var CachingTransactionExecutor = class {
      constructor({
        client,
        ...options
      }) {
        __privateAdd2(this, _client);
        __privateAdd2(this, _lastDigest, null);
        __privateSet2(this, _client, client);
        this.cache = new import_ObjectCache.ObjectCache(options);
      }
      /**
       * Clears all Owned objects
       * Immutable objects, Shared objects, and Move function definitions will be preserved
       */
      async reset() {
        await Promise.all([
          this.cache.clearOwnedObjects(),
          this.cache.clearCustom(),
          this.waitForLastTransaction()
        ]);
      }
      async buildTransaction({
        transaction,
        ...options
      }) {
        transaction.addBuildPlugin(this.cache.asPlugin());
        return transaction.build({
          client: __privateGet2(this, _client),
          ...options
        });
      }
      async executeTransaction({
        transaction,
        options,
        ...input
      }) {
        const bytes = (0, import_Transaction.isTransaction)(transaction) ? await this.buildTransaction({ transaction }) : transaction;
        const results = await __privateGet2(this, _client).executeTransactionBlock({
          ...input,
          transactionBlock: bytes,
          options: {
            ...options,
            showRawEffects: true
          }
        });
        if (results.rawEffects) {
          const effects = import_bcs.bcs.TransactionEffects.parse(Uint8Array.from(results.rawEffects));
          await this.applyEffects(effects);
        }
        return results;
      }
      async signAndExecuteTransaction({
        options,
        transaction,
        ...input
      }) {
        transaction.setSenderIfNotSet(input.signer.toSuiAddress());
        const bytes = await this.buildTransaction({ transaction });
        const { signature: signature2 } = await input.signer.signTransaction(bytes);
        const results = await this.executeTransaction({
          transaction: bytes,
          signature: signature2,
          options
        });
        return results;
      }
      async applyEffects(effects) {
        var _a;
        __privateSet2(this, _lastDigest, ((_a = effects.V2) == null ? void 0 : _a.transactionDigest) ?? null);
        await this.cache.applyEffects(effects);
      }
      async waitForLastTransaction() {
        if (__privateGet2(this, _lastDigest)) {
          await __privateGet2(this, _client).waitForTransaction({ digest: __privateGet2(this, _lastDigest) });
          __privateSet2(this, _lastDigest, null);
        }
      }
    };
    _client = /* @__PURE__ */ new WeakMap();
    _lastDigest = /* @__PURE__ */ new WeakMap();
  }
});

// node_modules/@mysten/sui/dist/cjs/transactions/executor/queue.js
var require_queue = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/transactions/executor/queue.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __typeError = (msg) => {
      throw TypeError(msg);
    };
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
    var __privateGet2 = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
    var __privateAdd2 = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
    var queue_exports = {};
    __export2(queue_exports, {
      ParallelQueue: () => ParallelQueue,
      SerialQueue: () => SerialQueue
    });
    module2.exports = __toCommonJS2(queue_exports);
    var _queue;
    var _queue2;
    var SerialQueue = class {
      constructor() {
        __privateAdd2(this, _queue, []);
      }
      async runTask(task) {
        return new Promise((resolve, reject) => {
          __privateGet2(this, _queue).push(() => {
            task().finally(() => {
              __privateGet2(this, _queue).shift();
              if (__privateGet2(this, _queue).length > 0) {
                __privateGet2(this, _queue)[0]();
              }
            }).then(resolve, reject);
          });
          if (__privateGet2(this, _queue).length === 1) {
            __privateGet2(this, _queue)[0]();
          }
        });
      }
    };
    _queue = /* @__PURE__ */ new WeakMap();
    var ParallelQueue = class {
      constructor(maxTasks) {
        __privateAdd2(this, _queue2, []);
        this.activeTasks = 0;
        this.maxTasks = maxTasks;
      }
      runTask(task) {
        return new Promise((resolve, reject) => {
          if (this.activeTasks < this.maxTasks) {
            this.activeTasks++;
            task().finally(() => {
              if (__privateGet2(this, _queue2).length > 0) {
                __privateGet2(this, _queue2).shift()();
              } else {
                this.activeTasks--;
              }
            }).then(resolve, reject);
          } else {
            __privateGet2(this, _queue2).push(() => {
              task().finally(() => {
                if (__privateGet2(this, _queue2).length > 0) {
                  __privateGet2(this, _queue2).shift()();
                } else {
                  this.activeTasks--;
                }
              }).then(resolve, reject);
            });
          }
        });
      }
    };
    _queue2 = /* @__PURE__ */ new WeakMap();
  }
});

// node_modules/@mysten/sui/dist/cjs/transactions/executor/serial.js
var require_serial = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/transactions/executor/serial.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __typeError = (msg) => {
      throw TypeError(msg);
    };
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
    var __privateGet2 = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
    var __privateAdd2 = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
    var __privateSet2 = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
    var serial_exports = {};
    __export2(serial_exports, {
      SerialTransactionExecutor: () => SerialTransactionExecutor,
      getGasCoinFromEffects: () => getGasCoinFromEffects
    });
    module2.exports = __toCommonJS2(serial_exports);
    var import_bcs = require_cjs();
    var import_Transaction = require_Transaction();
    var import_caching = require_caching();
    var import_queue = require_queue();
    var _queue;
    var _signer;
    var _cache;
    var _defaultGasBudget;
    var _cacheGasCoin;
    var _buildTransaction;
    var SerialTransactionExecutor = class {
      constructor({
        signer,
        defaultGasBudget = 50000000n,
        ...options
      }) {
        __privateAdd2(this, _queue, new import_queue.SerialQueue());
        __privateAdd2(this, _signer);
        __privateAdd2(this, _cache);
        __privateAdd2(this, _defaultGasBudget);
        __privateAdd2(this, _cacheGasCoin, async (effects) => {
          if (!effects.V2) {
            return;
          }
          const gasCoin = getGasCoinFromEffects(effects).ref;
          if (gasCoin) {
            __privateGet2(this, _cache).cache.setCustom("gasCoin", gasCoin);
          } else {
            __privateGet2(this, _cache).cache.deleteCustom("gasCoin");
          }
        });
        __privateAdd2(this, _buildTransaction, async (transaction) => {
          const gasCoin = await __privateGet2(this, _cache).cache.getCustom("gasCoin");
          const copy = import_Transaction.Transaction.from(transaction);
          if (gasCoin) {
            copy.setGasPayment([gasCoin]);
          }
          copy.setGasBudgetIfNotSet(__privateGet2(this, _defaultGasBudget));
          copy.setSenderIfNotSet(__privateGet2(this, _signer).toSuiAddress());
          return __privateGet2(this, _cache).buildTransaction({ transaction: copy });
        });
        __privateSet2(this, _signer, signer);
        __privateSet2(this, _defaultGasBudget, defaultGasBudget);
        __privateSet2(this, _cache, new import_caching.CachingTransactionExecutor({
          client: options.client,
          cache: options.cache,
          onEffects: (effects) => __privateGet2(this, _cacheGasCoin).call(this, effects)
        }));
      }
      async applyEffects(effects) {
        return __privateGet2(this, _cache).applyEffects(effects);
      }
      async buildTransaction(transaction) {
        return __privateGet2(this, _queue).runTask(() => __privateGet2(this, _buildTransaction).call(this, transaction));
      }
      resetCache() {
        return __privateGet2(this, _cache).reset();
      }
      waitForLastTransaction() {
        return __privateGet2(this, _cache).waitForLastTransaction();
      }
      executeTransaction(transaction, options, additionalSignatures = []) {
        return __privateGet2(this, _queue).runTask(async () => {
          const bytes = (0, import_Transaction.isTransaction)(transaction) ? await __privateGet2(this, _buildTransaction).call(this, transaction) : transaction;
          const { signature: signature2 } = await __privateGet2(this, _signer).signTransaction(bytes);
          const results = await __privateGet2(this, _cache).executeTransaction({
            signature: [signature2, ...additionalSignatures],
            transaction: bytes,
            options
          }).catch(async (error) => {
            await this.resetCache();
            throw error;
          });
          const effectsBytes = Uint8Array.from(results.rawEffects);
          return {
            digest: results.digest,
            effects: (0, import_bcs.toBase64)(effectsBytes),
            data: results
          };
        });
      }
    };
    _queue = /* @__PURE__ */ new WeakMap();
    _signer = /* @__PURE__ */ new WeakMap();
    _cache = /* @__PURE__ */ new WeakMap();
    _defaultGasBudget = /* @__PURE__ */ new WeakMap();
    _cacheGasCoin = /* @__PURE__ */ new WeakMap();
    _buildTransaction = /* @__PURE__ */ new WeakMap();
    function getGasCoinFromEffects(effects) {
      if (!effects.V2) {
        throw new Error("Unexpected effects version");
      }
      const gasObjectChange = effects.V2.changedObjects[effects.V2.gasObjectIndex];
      if (!gasObjectChange) {
        throw new Error("Gas object not found in effects");
      }
      const [objectId, { outputState }] = gasObjectChange;
      if (!outputState.ObjectWrite) {
        throw new Error("Unexpected gas object state");
      }
      const [digest, owner] = outputState.ObjectWrite;
      return {
        ref: {
          objectId,
          digest,
          version: effects.V2.lamportVersion
        },
        owner: owner.AddressOwner || owner.ObjectOwner
      };
    }
  }
});

// node_modules/@mysten/sui/dist/cjs/transactions/executor/parallel.js
var require_parallel = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/transactions/executor/parallel.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __typeError = (msg) => {
      throw TypeError(msg);
    };
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
    var __privateGet2 = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
    var __privateAdd2 = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
    var __privateSet2 = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
    var __privateMethod2 = (obj, member, method2) => (__accessCheck(obj, member, "access private method"), method2);
    var __privateWrapper2 = (obj, member, setter, getter) => ({
      set _(value) {
        __privateSet2(obj, member, value, setter);
      },
      get _() {
        return __privateGet2(obj, member, getter);
      }
    });
    var parallel_exports = {};
    __export2(parallel_exports, {
      ParallelTransactionExecutor: () => ParallelTransactionExecutor
    });
    module2.exports = __toCommonJS2(parallel_exports);
    var import_bcs = require_cjs();
    var import_bcs2 = require_bcs3();
    var import_Transaction = require_Transaction();
    var import_TransactionData = require_TransactionData();
    var import_caching = require_caching();
    var import_queue = require_queue();
    var import_serial = require_serial();
    var _signer;
    var _client;
    var _coinBatchSize;
    var _initialCoinBalance;
    var _minimumCoinBalance;
    var _epochBoundaryWindow;
    var _defaultGasBudget;
    var _maxPoolSize;
    var _sourceCoins;
    var _coinPool;
    var _cache;
    var _objectIdQueues;
    var _buildQueue;
    var _executeQueue;
    var _lastDigest;
    var _cacheLock;
    var _pendingTransactions;
    var _gasPrice;
    var _ParallelTransactionExecutor_instances;
    var getUsedObjects_fn;
    var execute_fn;
    var updateCache_fn;
    var waitForLastDigest_fn;
    var getGasCoin_fn;
    var getGasPrice_fn;
    var refillCoinPool_fn;
    var PARALLEL_EXECUTOR_DEFAULTS = {
      coinBatchSize: 20,
      initialCoinBalance: 200000000n,
      minimumCoinBalance: 50000000n,
      maxPoolSize: 50,
      epochBoundaryWindow: 1e3
    };
    var ParallelTransactionExecutor = class {
      constructor(options) {
        __privateAdd2(this, _ParallelTransactionExecutor_instances);
        __privateAdd2(this, _signer);
        __privateAdd2(this, _client);
        __privateAdd2(this, _coinBatchSize);
        __privateAdd2(this, _initialCoinBalance);
        __privateAdd2(this, _minimumCoinBalance);
        __privateAdd2(this, _epochBoundaryWindow);
        __privateAdd2(this, _defaultGasBudget);
        __privateAdd2(this, _maxPoolSize);
        __privateAdd2(this, _sourceCoins);
        __privateAdd2(this, _coinPool, []);
        __privateAdd2(this, _cache);
        __privateAdd2(this, _objectIdQueues, /* @__PURE__ */ new Map());
        __privateAdd2(this, _buildQueue, new import_queue.SerialQueue());
        __privateAdd2(this, _executeQueue);
        __privateAdd2(this, _lastDigest, null);
        __privateAdd2(this, _cacheLock, null);
        __privateAdd2(this, _pendingTransactions, 0);
        __privateAdd2(this, _gasPrice, null);
        __privateSet2(this, _signer, options.signer);
        __privateSet2(this, _client, options.client);
        __privateSet2(this, _coinBatchSize, options.coinBatchSize ?? PARALLEL_EXECUTOR_DEFAULTS.coinBatchSize);
        __privateSet2(this, _initialCoinBalance, options.initialCoinBalance ?? PARALLEL_EXECUTOR_DEFAULTS.initialCoinBalance);
        __privateSet2(this, _minimumCoinBalance, options.minimumCoinBalance ?? PARALLEL_EXECUTOR_DEFAULTS.minimumCoinBalance);
        __privateSet2(this, _defaultGasBudget, options.defaultGasBudget ?? __privateGet2(this, _minimumCoinBalance));
        __privateSet2(this, _epochBoundaryWindow, options.epochBoundaryWindow ?? PARALLEL_EXECUTOR_DEFAULTS.epochBoundaryWindow);
        __privateSet2(this, _maxPoolSize, options.maxPoolSize ?? PARALLEL_EXECUTOR_DEFAULTS.maxPoolSize);
        __privateSet2(this, _cache, new import_caching.CachingTransactionExecutor({
          client: options.client,
          cache: options.cache
        }));
        __privateSet2(this, _executeQueue, new import_queue.ParallelQueue(__privateGet2(this, _maxPoolSize)));
        __privateSet2(this, _sourceCoins, options.sourceCoins ? new Map(options.sourceCoins.map((id) => [id, null])) : null);
      }
      resetCache() {
        __privateSet2(this, _gasPrice, null);
        return __privateMethod2(this, _ParallelTransactionExecutor_instances, updateCache_fn).call(this, () => __privateGet2(this, _cache).reset());
      }
      async waitForLastTransaction() {
        await __privateMethod2(this, _ParallelTransactionExecutor_instances, updateCache_fn).call(this, () => __privateMethod2(this, _ParallelTransactionExecutor_instances, waitForLastDigest_fn).call(this));
      }
      async executeTransaction(transaction, options, additionalSignatures = []) {
        const { promise, resolve, reject } = promiseWithResolvers();
        const usedObjects = await __privateMethod2(this, _ParallelTransactionExecutor_instances, getUsedObjects_fn).call(this, transaction);
        const execute = () => {
          __privateGet2(this, _executeQueue).runTask(() => {
            const promise2 = __privateMethod2(this, _ParallelTransactionExecutor_instances, execute_fn).call(this, transaction, usedObjects, options, additionalSignatures);
            return promise2.then(resolve, reject);
          });
        };
        const conflicts = /* @__PURE__ */ new Set();
        usedObjects.forEach((objectId) => {
          const queue = __privateGet2(this, _objectIdQueues).get(objectId);
          if (queue) {
            conflicts.add(objectId);
            __privateGet2(this, _objectIdQueues).get(objectId).push(() => {
              conflicts.delete(objectId);
              if (conflicts.size === 0) {
                execute();
              }
            });
          } else {
            __privateGet2(this, _objectIdQueues).set(objectId, []);
          }
        });
        if (conflicts.size === 0) {
          execute();
        }
        return promise;
      }
    };
    _signer = /* @__PURE__ */ new WeakMap();
    _client = /* @__PURE__ */ new WeakMap();
    _coinBatchSize = /* @__PURE__ */ new WeakMap();
    _initialCoinBalance = /* @__PURE__ */ new WeakMap();
    _minimumCoinBalance = /* @__PURE__ */ new WeakMap();
    _epochBoundaryWindow = /* @__PURE__ */ new WeakMap();
    _defaultGasBudget = /* @__PURE__ */ new WeakMap();
    _maxPoolSize = /* @__PURE__ */ new WeakMap();
    _sourceCoins = /* @__PURE__ */ new WeakMap();
    _coinPool = /* @__PURE__ */ new WeakMap();
    _cache = /* @__PURE__ */ new WeakMap();
    _objectIdQueues = /* @__PURE__ */ new WeakMap();
    _buildQueue = /* @__PURE__ */ new WeakMap();
    _executeQueue = /* @__PURE__ */ new WeakMap();
    _lastDigest = /* @__PURE__ */ new WeakMap();
    _cacheLock = /* @__PURE__ */ new WeakMap();
    _pendingTransactions = /* @__PURE__ */ new WeakMap();
    _gasPrice = /* @__PURE__ */ new WeakMap();
    _ParallelTransactionExecutor_instances = /* @__PURE__ */ new WeakSet();
    getUsedObjects_fn = async function(transaction) {
      const usedObjects = /* @__PURE__ */ new Set();
      let serialized = false;
      transaction.addSerializationPlugin(async (blockData, _options, next) => {
        await next();
        if (serialized) {
          return;
        }
        serialized = true;
        blockData.inputs.forEach((input) => {
          var _a, _b, _c, _d, _e;
          if ((_b = (_a = input.Object) == null ? void 0 : _a.ImmOrOwnedObject) == null ? void 0 : _b.objectId) {
            usedObjects.add(input.Object.ImmOrOwnedObject.objectId);
          } else if ((_d = (_c = input.Object) == null ? void 0 : _c.Receiving) == null ? void 0 : _d.objectId) {
            usedObjects.add(input.Object.Receiving.objectId);
          } else if (((_e = input.UnresolvedObject) == null ? void 0 : _e.objectId) && !input.UnresolvedObject.initialSharedVersion) {
            usedObjects.add(input.UnresolvedObject.objectId);
          }
        });
      });
      await transaction.prepareForSerialization({ client: __privateGet2(this, _client) });
      return usedObjects;
    };
    execute_fn = async function(transaction, usedObjects, options, additionalSignatures = []) {
      var _a;
      let gasCoin;
      try {
        transaction.setSenderIfNotSet(__privateGet2(this, _signer).toSuiAddress());
        await __privateGet2(this, _buildQueue).runTask(async () => {
          const data = transaction.getData();
          if (!data.gasData.price) {
            transaction.setGasPrice(await __privateMethod2(this, _ParallelTransactionExecutor_instances, getGasPrice_fn).call(this));
          }
          transaction.setGasBudgetIfNotSet(__privateGet2(this, _defaultGasBudget));
          await __privateMethod2(this, _ParallelTransactionExecutor_instances, updateCache_fn).call(this);
          gasCoin = await __privateMethod2(this, _ParallelTransactionExecutor_instances, getGasCoin_fn).call(this);
          __privateWrapper2(this, _pendingTransactions)._++;
          transaction.setGasPayment([
            {
              objectId: gasCoin.id,
              version: gasCoin.version,
              digest: gasCoin.digest
            }
          ]);
          await __privateGet2(this, _cache).buildTransaction({ transaction, onlyTransactionKind: true });
        });
        const bytes = await transaction.build({ client: __privateGet2(this, _client) });
        const { signature: signature2 } = await __privateGet2(this, _signer).signTransaction(bytes);
        const results = await __privateGet2(this, _cache).executeTransaction({
          transaction: bytes,
          signature: [signature2, ...additionalSignatures],
          options: {
            ...options,
            showEffects: true
          }
        });
        const effectsBytes = Uint8Array.from(results.rawEffects);
        const effects = import_bcs2.bcs.TransactionEffects.parse(effectsBytes);
        const gasResult = (0, import_serial.getGasCoinFromEffects)(effects);
        const gasUsed = (_a = effects.V2) == null ? void 0 : _a.gasUsed;
        if (gasCoin && gasUsed && gasResult.owner === __privateGet2(this, _signer).toSuiAddress()) {
          const totalUsed = BigInt(gasUsed.computationCost) + BigInt(gasUsed.storageCost) + BigInt(gasUsed.storageCost) - BigInt(gasUsed.storageRebate);
          let usesGasCoin = false;
          new import_TransactionData.TransactionDataBuilder(transaction.getData()).mapArguments((arg) => {
            if (arg.$kind === "GasCoin") {
              usesGasCoin = true;
            }
            return arg;
          });
          if (!usesGasCoin && gasCoin.balance >= __privateGet2(this, _minimumCoinBalance)) {
            __privateGet2(this, _coinPool).push({
              id: gasResult.ref.objectId,
              version: gasResult.ref.version,
              digest: gasResult.ref.digest,
              balance: gasCoin.balance - totalUsed
            });
          } else {
            if (!__privateGet2(this, _sourceCoins)) {
              __privateSet2(this, _sourceCoins, /* @__PURE__ */ new Map());
            }
            __privateGet2(this, _sourceCoins).set(gasResult.ref.objectId, gasResult.ref);
          }
        }
        __privateSet2(this, _lastDigest, results.digest);
        return {
          digest: results.digest,
          effects: (0, import_bcs.toBase64)(effectsBytes),
          data: results
        };
      } catch (error) {
        if (gasCoin) {
          if (!__privateGet2(this, _sourceCoins)) {
            __privateSet2(this, _sourceCoins, /* @__PURE__ */ new Map());
          }
          __privateGet2(this, _sourceCoins).set(gasCoin.id, null);
        }
        await __privateMethod2(this, _ParallelTransactionExecutor_instances, updateCache_fn).call(this, async () => {
          await Promise.all([
            __privateGet2(this, _cache).cache.deleteObjects([...usedObjects]),
            __privateMethod2(this, _ParallelTransactionExecutor_instances, waitForLastDigest_fn).call(this)
          ]);
        });
        throw error;
      } finally {
        usedObjects.forEach((objectId) => {
          const queue = __privateGet2(this, _objectIdQueues).get(objectId);
          if (queue && queue.length > 0) {
            queue.shift()();
          } else if (queue) {
            __privateGet2(this, _objectIdQueues).delete(objectId);
          }
        });
        __privateWrapper2(this, _pendingTransactions)._--;
      }
    };
    updateCache_fn = async function(fn) {
      if (__privateGet2(this, _cacheLock)) {
        await __privateGet2(this, _cacheLock);
      }
      __privateSet2(this, _cacheLock, (fn == null ? void 0 : fn().then(
        () => {
          __privateSet2(this, _cacheLock, null);
        },
        () => {
        }
      )) ?? null);
    };
    waitForLastDigest_fn = async function() {
      const digest = __privateGet2(this, _lastDigest);
      if (digest) {
        __privateSet2(this, _lastDigest, null);
        await __privateGet2(this, _client).waitForTransaction({ digest });
      }
    };
    getGasCoin_fn = async function() {
      if (__privateGet2(this, _coinPool).length === 0 && __privateGet2(this, _pendingTransactions) <= __privateGet2(this, _maxPoolSize)) {
        await __privateMethod2(this, _ParallelTransactionExecutor_instances, refillCoinPool_fn).call(this);
      }
      if (__privateGet2(this, _coinPool).length === 0) {
        throw new Error("No coins available");
      }
      const coin = __privateGet2(this, _coinPool).shift();
      return coin;
    };
    getGasPrice_fn = async function() {
      const remaining = __privateGet2(this, _gasPrice) ? __privateGet2(this, _gasPrice).expiration - __privateGet2(this, _epochBoundaryWindow) - Date.now() : 0;
      if (remaining > 0) {
        return __privateGet2(this, _gasPrice).price;
      }
      if (__privateGet2(this, _gasPrice)) {
        const timeToNextEpoch = Math.max(
          __privateGet2(this, _gasPrice).expiration + __privateGet2(this, _epochBoundaryWindow) - Date.now(),
          1e3
        );
        await new Promise((resolve) => setTimeout(resolve, timeToNextEpoch));
      }
      const state = await __privateGet2(this, _client).getLatestSuiSystemState();
      __privateSet2(this, _gasPrice, {
        price: BigInt(state.referenceGasPrice),
        expiration: Number.parseInt(state.epochStartTimestampMs, 10) + Number.parseInt(state.epochDurationMs, 10)
      });
      return __privateMethod2(this, _ParallelTransactionExecutor_instances, getGasPrice_fn).call(this);
    };
    refillCoinPool_fn = async function() {
      var _a;
      const batchSize = Math.min(
        __privateGet2(this, _coinBatchSize),
        __privateGet2(this, _maxPoolSize) - (__privateGet2(this, _coinPool).length + __privateGet2(this, _pendingTransactions)) + 1
      );
      if (batchSize === 0) {
        return;
      }
      const txb = new import_Transaction.Transaction();
      const address = __privateGet2(this, _signer).toSuiAddress();
      txb.setSender(address);
      if (__privateGet2(this, _sourceCoins)) {
        const refs = [];
        const ids = [];
        for (const [id, ref] of __privateGet2(this, _sourceCoins)) {
          if (ref) {
            refs.push(ref);
          } else {
            ids.push(id);
          }
        }
        if (ids.length > 0) {
          const coins = await __privateGet2(this, _client).multiGetObjects({
            ids
          });
          refs.push(
            ...coins.filter((coin) => coin.data !== null).map(({ data }) => ({
              objectId: data.objectId,
              version: data.version,
              digest: data.digest
            }))
          );
        }
        txb.setGasPayment(refs);
        __privateSet2(this, _sourceCoins, /* @__PURE__ */ new Map());
      }
      const amounts = new Array(batchSize).fill(__privateGet2(this, _initialCoinBalance));
      const results = txb.splitCoins(txb.gas, amounts);
      const coinResults = [];
      for (let i = 0; i < amounts.length; i++) {
        coinResults.push(results[i]);
      }
      txb.transferObjects(coinResults, address);
      await this.waitForLastTransaction();
      const result = await __privateGet2(this, _client).signAndExecuteTransaction({
        transaction: txb,
        signer: __privateGet2(this, _signer),
        options: {
          showRawEffects: true
        }
      });
      const effects = import_bcs2.bcs.TransactionEffects.parse(Uint8Array.from(result.rawEffects));
      (_a = effects.V2) == null ? void 0 : _a.changedObjects.forEach(([id, { outputState }], i) => {
        var _a2;
        if (i === ((_a2 = effects.V2) == null ? void 0 : _a2.gasObjectIndex) || !outputState.ObjectWrite) {
          return;
        }
        __privateGet2(this, _coinPool).push({
          id,
          version: effects.V2.lamportVersion,
          digest: outputState.ObjectWrite[0],
          balance: BigInt(__privateGet2(this, _initialCoinBalance))
        });
      });
      if (!__privateGet2(this, _sourceCoins)) {
        __privateSet2(this, _sourceCoins, /* @__PURE__ */ new Map());
      }
      const gasObject = (0, import_serial.getGasCoinFromEffects)(effects).ref;
      __privateGet2(this, _sourceCoins).set(gasObject.objectId, gasObject);
      await __privateGet2(this, _client).waitForTransaction({ digest: result.digest });
    };
    function promiseWithResolvers() {
      let resolve;
      let reject;
      const promise = new Promise((_resolve, _reject) => {
        resolve = _resolve;
        reject = _reject;
      });
      return { promise, resolve, reject };
    }
  }
});

// node_modules/@mysten/sui/dist/cjs/transactions/intents/CoinWithBalance.js
var require_CoinWithBalance = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/transactions/intents/CoinWithBalance.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var CoinWithBalance_exports = {};
    __export2(CoinWithBalance_exports, {
      coinWithBalance: () => coinWithBalance
    });
    module2.exports = __toCommonJS2(CoinWithBalance_exports);
    var import_valibot = require_dist();
    var import_bcs = require_bcs3();
    var import_sui_types = require_sui_types();
    var import_Commands = require_Commands();
    var import_Inputs = require_Inputs();
    var import_json_rpc_resolver = require_json_rpc_resolver();
    var COIN_WITH_BALANCE = "CoinWithBalance";
    var SUI_TYPE = (0, import_sui_types.normalizeStructTag)("0x2::sui::SUI");
    function coinWithBalance({
      type: type2 = SUI_TYPE,
      balance,
      useGasCoin = true
    }) {
      return (tx) => {
        tx.addIntentResolver(COIN_WITH_BALANCE, resolveCoinBalance);
        const coinType = type2 === "gas" ? type2 : (0, import_sui_types.normalizeStructTag)(type2);
        return tx.add(
          import_Commands.Commands.Intent({
            name: COIN_WITH_BALANCE,
            inputs: {},
            data: {
              type: coinType === SUI_TYPE && useGasCoin ? "gas" : coinType,
              balance: BigInt(balance)
            }
          })
        );
      };
    }
    var CoinWithBalanceData = (0, import_valibot.object)({
      type: (0, import_valibot.string)(),
      balance: (0, import_valibot.bigint)()
    });
    async function resolveCoinBalance(transactionData, buildOptions, next) {
      var _a, _b;
      const coinTypes = /* @__PURE__ */ new Set();
      const totalByType = /* @__PURE__ */ new Map();
      if (!transactionData.sender) {
        throw new Error("Sender must be set to resolve CoinWithBalance");
      }
      for (const command of transactionData.commands) {
        if (command.$kind === "$Intent" && command.$Intent.name === COIN_WITH_BALANCE) {
          const { type: type2, balance } = (0, import_valibot.parse)(CoinWithBalanceData, command.$Intent.data);
          if (type2 !== "gas" && balance > 0n) {
            coinTypes.add(type2);
          }
          totalByType.set(type2, (totalByType.get(type2) ?? 0n) + balance);
        }
      }
      const usedIds = /* @__PURE__ */ new Set();
      for (const input of transactionData.inputs) {
        if ((_a = input.Object) == null ? void 0 : _a.ImmOrOwnedObject) {
          usedIds.add(input.Object.ImmOrOwnedObject.objectId);
        }
        if ((_b = input.UnresolvedObject) == null ? void 0 : _b.objectId) {
          usedIds.add(input.UnresolvedObject.objectId);
        }
      }
      const coinsByType = /* @__PURE__ */ new Map();
      const client = (0, import_json_rpc_resolver.getClient)(buildOptions);
      await Promise.all(
        [...coinTypes].map(async (coinType) => {
          coinsByType.set(
            coinType,
            await getCoinsOfType({
              coinType,
              balance: totalByType.get(coinType),
              client,
              owner: transactionData.sender,
              usedIds
            })
          );
        })
      );
      const mergedCoins = /* @__PURE__ */ new Map();
      mergedCoins.set("gas", { $kind: "GasCoin", GasCoin: true });
      for (const [index, transaction] of transactionData.commands.entries()) {
        if (transaction.$kind !== "$Intent" || transaction.$Intent.name !== COIN_WITH_BALANCE) {
          continue;
        }
        const { type: type2, balance } = transaction.$Intent.data;
        if (balance === 0n) {
          transactionData.replaceCommand(
            index,
            import_Commands.Commands.MoveCall({ target: "0x2::coin::zero", typeArguments: [type2] })
          );
          continue;
        }
        const commands = [];
        if (!mergedCoins.has(type2)) {
          const [first, ...rest] = coinsByType.get(type2).map(
            (coin) => transactionData.addInput(
              "object",
              import_Inputs.Inputs.ObjectRef({
                objectId: coin.coinObjectId,
                digest: coin.digest,
                version: coin.version
              })
            )
          );
          if (rest.length > 0) {
            commands.push(import_Commands.Commands.MergeCoins(first, rest));
          }
          mergedCoins.set(type2, first);
        }
        commands.push(
          import_Commands.Commands.SplitCoins(mergedCoins.get(type2), [
            transactionData.addInput("pure", import_Inputs.Inputs.Pure(import_bcs.bcs.u64().serialize(balance)))
          ])
        );
        transactionData.replaceCommand(index, commands);
        transactionData.mapArguments((arg) => {
          if (arg.$kind === "Result" && arg.Result === index) {
            return {
              $kind: "NestedResult",
              NestedResult: [index + commands.length - 1, 0]
            };
          }
          return arg;
        });
      }
      return next();
    }
    async function getCoinsOfType({
      coinType,
      balance,
      client,
      owner,
      usedIds
    }) {
      let remainingBalance = balance;
      const coins = [];
      return loadMoreCoins();
      async function loadMoreCoins(cursor = null) {
        const { data, hasNextPage, nextCursor } = await client.getCoins({ owner, coinType, cursor });
        const sortedCoins = data.sort((a, b) => Number(BigInt(b.balance) - BigInt(a.balance)));
        for (const coin of sortedCoins) {
          if (usedIds.has(coin.coinObjectId)) {
            continue;
          }
          const coinBalance = BigInt(coin.balance);
          coins.push(coin);
          remainingBalance -= coinBalance;
          if (remainingBalance <= 0) {
            return coins;
          }
        }
        if (hasNextPage) {
          return loadMoreCoins(nextCursor);
        }
        throw new Error(`Not enough coins of type ${coinType} to satisfy requested balance`);
      }
    }
  }
});

// node_modules/@mysten/sui/dist/cjs/transactions/Arguments.js
var require_Arguments = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/transactions/Arguments.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var Arguments_exports = {};
    __export2(Arguments_exports, {
      Arguments: () => Arguments
    });
    module2.exports = __toCommonJS2(Arguments_exports);
    var import_object = require_object();
    var import_pure = require_pure2();
    var Arguments = {
      pure: (0, import_pure.createPure)((value) => (tx) => tx.pure(value)),
      object: (0, import_object.createObjectMethods)((value) => (tx) => tx.object(value)),
      sharedObjectRef: (...args) => (tx) => tx.sharedObjectRef(...args),
      objectRef: (...args) => (tx) => tx.objectRef(...args),
      receivingRef: (...args) => (tx) => tx.receivingRef(...args)
    };
  }
});

// node_modules/@mysten/sui/dist/cjs/transactions/plugins/NamedPackagesPlugin.js
var require_NamedPackagesPlugin = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/transactions/plugins/NamedPackagesPlugin.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var NamedPackagesPlugin_exports = {};
    __export2(NamedPackagesPlugin_exports, {
      namedPackagesPlugin: () => namedPackagesPlugin
    });
    module2.exports = __toCommonJS2(NamedPackagesPlugin_exports);
    var import_sui_types = require_sui_types();
    var import_utils4 = require_utils5();
    var namedPackagesPlugin = ({
      url,
      pageSize = 50,
      overrides = { packages: {}, types: {} }
    }) => {
      Object.keys(overrides.types).forEach((type2) => {
        if ((0, import_sui_types.parseStructTag)(type2).typeParams.length > 0)
          throw new Error(
            "Type overrides must be first-level only. If you want to supply generic types, just pass each type individually."
          );
      });
      const cache = overrides;
      return async (transactionData, _buildOptions, next) => {
        const names = (0, import_utils4.findNamesInTransaction)(transactionData);
        const [packages, types] = await Promise.all([
          resolvePackages(
            names.packages.filter((x) => !cache.packages[x]),
            url,
            pageSize
          ),
          resolveTypes(
            [...(0, import_utils4.getFirstLevelNamedTypes)(names.types)].filter((x) => !cache.types[x]),
            url,
            pageSize
          )
        ]);
        Object.assign(cache.packages, packages);
        Object.assign(cache.types, types);
        const composedTypes = (0, import_utils4.populateNamedTypesFromCache)(names.types, cache.types);
        (0, import_utils4.replaceNames)(transactionData, {
          packages: { ...cache.packages },
          // we include the "composed" type cache too.
          types: composedTypes
        });
        await next();
      };
      async function resolvePackages(packages, apiUrl, pageSize2) {
        if (packages.length === 0) return {};
        const batches = (0, import_utils4.batch)(packages, pageSize2);
        const results = {};
        await Promise.all(
          batches.map(async (batch2) => {
            var _a;
            const response = await fetch(`${apiUrl}/v1/resolution/bulk`, {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({
                names: batch2
              })
            });
            if (!response.ok) {
              const errorBody = await response.json().catch(() => ({}));
              throw new Error(`Failed to resolve packages: ${errorBody == null ? void 0 : errorBody.message}`);
            }
            const data = await response.json();
            if (!(data == null ? void 0 : data.resolution)) return;
            for (const pkg of Object.keys(data == null ? void 0 : data.resolution)) {
              const pkgData = (_a = data.resolution[pkg]) == null ? void 0 : _a.package_id;
              if (!pkgData) continue;
              results[pkg] = pkgData;
            }
          })
        );
        return results;
      }
      async function resolveTypes(types, apiUrl, pageSize2) {
        if (types.length === 0) return {};
        const batches = (0, import_utils4.batch)(types, pageSize2);
        const results = {};
        await Promise.all(
          batches.map(async (batch2) => {
            var _a;
            const response = await fetch(`${apiUrl}/v1/struct-definition/bulk`, {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({
                types: batch2
              })
            });
            if (!response.ok) {
              const errorBody = await response.json().catch(() => ({}));
              throw new Error(`Failed to resolve types: ${errorBody == null ? void 0 : errorBody.message}`);
            }
            const data = await response.json();
            if (!(data == null ? void 0 : data.resolution)) return;
            for (const type2 of Object.keys(data == null ? void 0 : data.resolution)) {
              const typeData = (_a = data.resolution[type2]) == null ? void 0 : _a.type_tag;
              if (!typeData) continue;
              results[type2] = typeData;
            }
          })
        );
        return results;
      }
    };
  }
});

// node_modules/@mysten/sui/dist/cjs/transactions/index.js
var require_transactions = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/transactions/index.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var transactions_exports = {};
    __export2(transactions_exports, {
      Arguments: () => import_Arguments.Arguments,
      AsyncCache: () => import_ObjectCache.AsyncCache,
      Commands: () => import_Commands.Commands,
      Inputs: () => import_Inputs.Inputs,
      ObjectCache: () => import_ObjectCache.ObjectCache,
      ParallelTransactionExecutor: () => import_parallel.ParallelTransactionExecutor,
      SerialTransactionExecutor: () => import_serial.SerialTransactionExecutor,
      Transaction: () => import_Transaction.Transaction,
      TransactionDataBuilder: () => import_TransactionData.TransactionDataBuilder,
      UpgradePolicy: () => import_Commands.UpgradePolicy,
      coinWithBalance: () => import_CoinWithBalance.coinWithBalance,
      getPureBcsSchema: () => import_serializer.getPureBcsSchema,
      isArgument: () => import_utils22.isArgument,
      isTransaction: () => import_Transaction.isTransaction,
      namedPackagesPlugin: () => import_NamedPackagesPlugin.namedPackagesPlugin,
      normalizedTypeToMoveTypeSignature: () => import_serializer.normalizedTypeToMoveTypeSignature
    });
    module2.exports = __toCommonJS2(transactions_exports);
    var import_serializer = require_serializer();
    var import_Inputs = require_Inputs();
    var import_Commands = require_Commands();
    var import_Transaction = require_Transaction();
    var import_TransactionData = require_TransactionData();
    var import_ObjectCache = require_ObjectCache();
    var import_serial = require_serial();
    var import_parallel = require_parallel();
    var import_CoinWithBalance = require_CoinWithBalance();
    var import_Arguments = require_Arguments();
    var import_NamedPackagesPlugin = require_NamedPackagesPlugin();
    var import_utils22 = require_utils7();
  }
});

// node_modules/@mysten/sui/dist/cjs/client/client.js
var require_client3 = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/client/client.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var client_exports = {};
    __export2(client_exports, {
      SuiClient: () => SuiClient,
      isSuiClient: () => isSuiClient
    });
    module2.exports = __toCommonJS2(client_exports);
    var import_bcs = require_cjs();
    var import_client = require_client2();
    var import_jsonRPC = require_jsonRPC();
    var import_transactions = require_transactions();
    var import_sui_types = require_sui_types();
    var import_suins = require_suins();
    var import_http_transport = require_http_transport();
    var SUI_CLIENT_BRAND = Symbol.for("@mysten/SuiClient");
    function isSuiClient(client) {
      return typeof client === "object" && client !== null && client[SUI_CLIENT_BRAND] === true;
    }
    var SuiClient = class extends import_client.Experimental_BaseClient {
      /**
       * Establish a connection to a Sui RPC endpoint
       *
       * @param options configuration options for the API Client
       */
      constructor(options) {
        super({ network: options.network ?? "unknown" });
        this.core = new import_jsonRPC.JSONRpcTransport(this);
        this.jsonRpc = this;
        this.transport = options.transport ?? new import_http_transport.SuiHTTPTransport({ url: options.url });
      }
      get [SUI_CLIENT_BRAND]() {
        return true;
      }
      async getRpcApiVersion({ signal } = {}) {
        const resp = await this.transport.request({
          method: "rpc.discover",
          params: [],
          signal
        });
        return resp.info.version;
      }
      /**
       * Get all Coin<`coin_type`> objects owned by an address.
       */
      async getCoins(input) {
        if (!input.owner || !(0, import_sui_types.isValidSuiAddress)((0, import_sui_types.normalizeSuiAddress)(input.owner))) {
          throw new Error("Invalid Sui address");
        }
        return await this.transport.request({
          method: "suix_getCoins",
          params: [input.owner, input.coinType, input.cursor, input.limit],
          signal: input.signal
        });
      }
      /**
       * Get all Coin objects owned by an address.
       */
      async getAllCoins(input) {
        if (!input.owner || !(0, import_sui_types.isValidSuiAddress)((0, import_sui_types.normalizeSuiAddress)(input.owner))) {
          throw new Error("Invalid Sui address");
        }
        return await this.transport.request({
          method: "suix_getAllCoins",
          params: [input.owner, input.cursor, input.limit],
          signal: input.signal
        });
      }
      /**
       * Get the total coin balance for one coin type, owned by the address owner.
       */
      async getBalance(input) {
        if (!input.owner || !(0, import_sui_types.isValidSuiAddress)((0, import_sui_types.normalizeSuiAddress)(input.owner))) {
          throw new Error("Invalid Sui address");
        }
        return await this.transport.request({
          method: "suix_getBalance",
          params: [input.owner, input.coinType],
          signal: input.signal
        });
      }
      /**
       * Get the total coin balance for all coin types, owned by the address owner.
       */
      async getAllBalances(input) {
        if (!input.owner || !(0, import_sui_types.isValidSuiAddress)((0, import_sui_types.normalizeSuiAddress)(input.owner))) {
          throw new Error("Invalid Sui address");
        }
        return await this.transport.request({
          method: "suix_getAllBalances",
          params: [input.owner],
          signal: input.signal
        });
      }
      /**
       * Fetch CoinMetadata for a given coin type
       */
      async getCoinMetadata(input) {
        return await this.transport.request({
          method: "suix_getCoinMetadata",
          params: [input.coinType],
          signal: input.signal
        });
      }
      /**
       *  Fetch total supply for a coin
       */
      async getTotalSupply(input) {
        return await this.transport.request({
          method: "suix_getTotalSupply",
          params: [input.coinType],
          signal: input.signal
        });
      }
      /**
       * Invoke any RPC method
       * @param method the method to be invoked
       * @param args the arguments to be passed to the RPC request
       */
      async call(method2, params, { signal } = {}) {
        return await this.transport.request({ method: method2, params, signal });
      }
      /**
       * Get Move function argument types like read, write and full access
       */
      async getMoveFunctionArgTypes(input) {
        return await this.transport.request({
          method: "sui_getMoveFunctionArgTypes",
          params: [input.package, input.module, input.function],
          signal: input.signal
        });
      }
      /**
       * Get a map from module name to
       * structured representations of Move modules
       */
      async getNormalizedMoveModulesByPackage(input) {
        return await this.transport.request({
          method: "sui_getNormalizedMoveModulesByPackage",
          params: [input.package],
          signal: input.signal
        });
      }
      /**
       * Get a structured representation of Move module
       */
      async getNormalizedMoveModule(input) {
        return await this.transport.request({
          method: "sui_getNormalizedMoveModule",
          params: [input.package, input.module],
          signal: input.signal
        });
      }
      /**
       * Get a structured representation of Move function
       */
      async getNormalizedMoveFunction(input) {
        return await this.transport.request({
          method: "sui_getNormalizedMoveFunction",
          params: [input.package, input.module, input.function],
          signal: input.signal
        });
      }
      /**
       * Get a structured representation of Move struct
       */
      async getNormalizedMoveStruct(input) {
        return await this.transport.request({
          method: "sui_getNormalizedMoveStruct",
          params: [input.package, input.module, input.struct],
          signal: input.signal
        });
      }
      /**
       * Get all objects owned by an address
       */
      async getOwnedObjects(input) {
        if (!input.owner || !(0, import_sui_types.isValidSuiAddress)((0, import_sui_types.normalizeSuiAddress)(input.owner))) {
          throw new Error("Invalid Sui address");
        }
        return await this.transport.request({
          method: "suix_getOwnedObjects",
          params: [
            input.owner,
            {
              filter: input.filter,
              options: input.options
            },
            input.cursor,
            input.limit
          ],
          signal: input.signal
        });
      }
      /**
       * Get details about an object
       */
      async getObject(input) {
        if (!input.id || !(0, import_sui_types.isValidSuiObjectId)((0, import_sui_types.normalizeSuiObjectId)(input.id))) {
          throw new Error("Invalid Sui Object id");
        }
        return await this.transport.request({
          method: "sui_getObject",
          params: [input.id, input.options],
          signal: input.signal
        });
      }
      async tryGetPastObject(input) {
        return await this.transport.request({
          method: "sui_tryGetPastObject",
          params: [input.id, input.version, input.options],
          signal: input.signal
        });
      }
      /**
       * Batch get details about a list of objects. If any of the object ids are duplicates the call will fail
       */
      async multiGetObjects(input) {
        input.ids.forEach((id) => {
          if (!id || !(0, import_sui_types.isValidSuiObjectId)((0, import_sui_types.normalizeSuiObjectId)(id))) {
            throw new Error(`Invalid Sui Object id ${id}`);
          }
        });
        const hasDuplicates = input.ids.length !== new Set(input.ids).size;
        if (hasDuplicates) {
          throw new Error(`Duplicate object ids in batch call ${input.ids}`);
        }
        return await this.transport.request({
          method: "sui_multiGetObjects",
          params: [input.ids, input.options],
          signal: input.signal
        });
      }
      /**
       * Get transaction blocks for a given query criteria
       */
      async queryTransactionBlocks(input) {
        return await this.transport.request({
          method: "suix_queryTransactionBlocks",
          params: [
            {
              filter: input.filter,
              options: input.options
            },
            input.cursor,
            input.limit,
            (input.order || "descending") === "descending"
          ],
          signal: input.signal
        });
      }
      async getTransactionBlock(input) {
        if (!(0, import_sui_types.isValidTransactionDigest)(input.digest)) {
          throw new Error("Invalid Transaction digest");
        }
        return await this.transport.request({
          method: "sui_getTransactionBlock",
          params: [input.digest, input.options],
          signal: input.signal
        });
      }
      async multiGetTransactionBlocks(input) {
        input.digests.forEach((d) => {
          if (!(0, import_sui_types.isValidTransactionDigest)(d)) {
            throw new Error(`Invalid Transaction digest ${d}`);
          }
        });
        const hasDuplicates = input.digests.length !== new Set(input.digests).size;
        if (hasDuplicates) {
          throw new Error(`Duplicate digests in batch call ${input.digests}`);
        }
        return await this.transport.request({
          method: "sui_multiGetTransactionBlocks",
          params: [input.digests, input.options],
          signal: input.signal
        });
      }
      async executeTransactionBlock({
        transactionBlock,
        signature: signature2,
        options,
        requestType,
        signal
      }) {
        const result = await this.transport.request({
          method: "sui_executeTransactionBlock",
          params: [
            typeof transactionBlock === "string" ? transactionBlock : (0, import_bcs.toBase64)(transactionBlock),
            Array.isArray(signature2) ? signature2 : [signature2],
            options
          ],
          signal
        });
        if (requestType === "WaitForLocalExecution") {
          try {
            await this.waitForTransaction({
              digest: result.digest
            });
          } catch (_) {
          }
        }
        return result;
      }
      async signAndExecuteTransaction({
        transaction,
        signer,
        ...input
      }) {
        let transactionBytes;
        if (transaction instanceof Uint8Array) {
          transactionBytes = transaction;
        } else {
          transaction.setSenderIfNotSet(signer.toSuiAddress());
          transactionBytes = await transaction.build({ client: this });
        }
        const { signature: signature2, bytes } = await signer.signTransaction(transactionBytes);
        return this.executeTransactionBlock({
          transactionBlock: bytes,
          signature: signature2,
          ...input
        });
      }
      /**
       * Get total number of transactions
       */
      async getTotalTransactionBlocks({ signal } = {}) {
        const resp = await this.transport.request({
          method: "sui_getTotalTransactionBlocks",
          params: [],
          signal
        });
        return BigInt(resp);
      }
      /**
       * Getting the reference gas price for the network
       */
      async getReferenceGasPrice({ signal } = {}) {
        const resp = await this.transport.request({
          method: "suix_getReferenceGasPrice",
          params: [],
          signal
        });
        return BigInt(resp);
      }
      /**
       * Return the delegated stakes for an address
       */
      async getStakes(input) {
        if (!input.owner || !(0, import_sui_types.isValidSuiAddress)((0, import_sui_types.normalizeSuiAddress)(input.owner))) {
          throw new Error("Invalid Sui address");
        }
        return await this.transport.request({
          method: "suix_getStakes",
          params: [input.owner],
          signal: input.signal
        });
      }
      /**
       * Return the delegated stakes queried by id.
       */
      async getStakesByIds(input) {
        input.stakedSuiIds.forEach((id) => {
          if (!id || !(0, import_sui_types.isValidSuiObjectId)((0, import_sui_types.normalizeSuiObjectId)(id))) {
            throw new Error(`Invalid Sui Stake id ${id}`);
          }
        });
        return await this.transport.request({
          method: "suix_getStakesByIds",
          params: [input.stakedSuiIds],
          signal: input.signal
        });
      }
      /**
       * Return the latest system state content.
       */
      async getLatestSuiSystemState({
        signal
      } = {}) {
        return await this.transport.request({
          method: "suix_getLatestSuiSystemState",
          params: [],
          signal
        });
      }
      /**
       * Get events for a given query criteria
       */
      async queryEvents(input) {
        return await this.transport.request({
          method: "suix_queryEvents",
          params: [
            input.query,
            input.cursor,
            input.limit,
            (input.order || "descending") === "descending"
          ],
          signal: input.signal
        });
      }
      /**
       * Subscribe to get notifications whenever an event matching the filter occurs
       *
       * @deprecated
       */
      async subscribeEvent(input) {
        return this.transport.subscribe({
          method: "suix_subscribeEvent",
          unsubscribe: "suix_unsubscribeEvent",
          params: [input.filter],
          onMessage: input.onMessage,
          signal: input.signal
        });
      }
      /**
       * @deprecated
       */
      async subscribeTransaction(input) {
        return this.transport.subscribe({
          method: "suix_subscribeTransaction",
          unsubscribe: "suix_unsubscribeTransaction",
          params: [input.filter],
          onMessage: input.onMessage,
          signal: input.signal
        });
      }
      /**
       * Runs the transaction block in dev-inspect mode. Which allows for nearly any
       * transaction (or Move call) with any arguments. Detailed results are
       * provided, including both the transaction effects and any return values.
       */
      async devInspectTransactionBlock(input) {
        var _a, _b;
        let devInspectTxBytes;
        if ((0, import_transactions.isTransaction)(input.transactionBlock)) {
          input.transactionBlock.setSenderIfNotSet(input.sender);
          devInspectTxBytes = (0, import_bcs.toBase64)(
            await input.transactionBlock.build({
              client: this,
              onlyTransactionKind: true
            })
          );
        } else if (typeof input.transactionBlock === "string") {
          devInspectTxBytes = input.transactionBlock;
        } else if (input.transactionBlock instanceof Uint8Array) {
          devInspectTxBytes = (0, import_bcs.toBase64)(input.transactionBlock);
        } else {
          throw new Error("Unknown transaction block format.");
        }
        (_a = input.signal) == null ? void 0 : _a.throwIfAborted();
        return await this.transport.request({
          method: "sui_devInspectTransactionBlock",
          params: [input.sender, devInspectTxBytes, (_b = input.gasPrice) == null ? void 0 : _b.toString(), input.epoch],
          signal: input.signal
        });
      }
      /**
       * Dry run a transaction block and return the result.
       */
      async dryRunTransactionBlock(input) {
        return await this.transport.request({
          method: "sui_dryRunTransactionBlock",
          params: [
            typeof input.transactionBlock === "string" ? input.transactionBlock : (0, import_bcs.toBase64)(input.transactionBlock)
          ]
        });
      }
      /**
       * Return the list of dynamic field objects owned by an object
       */
      async getDynamicFields(input) {
        if (!input.parentId || !(0, import_sui_types.isValidSuiObjectId)((0, import_sui_types.normalizeSuiObjectId)(input.parentId))) {
          throw new Error("Invalid Sui Object id");
        }
        return await this.transport.request({
          method: "suix_getDynamicFields",
          params: [input.parentId, input.cursor, input.limit],
          signal: input.signal
        });
      }
      /**
       * Return the dynamic field object information for a specified object
       */
      async getDynamicFieldObject(input) {
        return await this.transport.request({
          method: "suix_getDynamicFieldObject",
          params: [input.parentId, input.name],
          signal: input.signal
        });
      }
      /**
       * Get the sequence number of the latest checkpoint that has been executed
       */
      async getLatestCheckpointSequenceNumber({
        signal
      } = {}) {
        const resp = await this.transport.request({
          method: "sui_getLatestCheckpointSequenceNumber",
          params: [],
          signal
        });
        return String(resp);
      }
      /**
       * Returns information about a given checkpoint
       */
      async getCheckpoint(input) {
        return await this.transport.request({
          method: "sui_getCheckpoint",
          params: [input.id],
          signal: input.signal
        });
      }
      /**
       * Returns historical checkpoints paginated
       */
      async getCheckpoints(input) {
        return await this.transport.request({
          method: "sui_getCheckpoints",
          params: [input.cursor, input == null ? void 0 : input.limit, input.descendingOrder],
          signal: input.signal
        });
      }
      /**
       * Return the committee information for the asked epoch
       */
      async getCommitteeInfo(input) {
        return await this.transport.request({
          method: "suix_getCommitteeInfo",
          params: [input == null ? void 0 : input.epoch],
          signal: input == null ? void 0 : input.signal
        });
      }
      async getNetworkMetrics({ signal } = {}) {
        return await this.transport.request({
          method: "suix_getNetworkMetrics",
          params: [],
          signal
        });
      }
      async getAddressMetrics({ signal } = {}) {
        return await this.transport.request({
          method: "suix_getLatestAddressMetrics",
          params: [],
          signal
        });
      }
      async getEpochMetrics(input) {
        return await this.transport.request({
          method: "suix_getEpochMetrics",
          params: [input == null ? void 0 : input.cursor, input == null ? void 0 : input.limit, input == null ? void 0 : input.descendingOrder],
          signal: input == null ? void 0 : input.signal
        });
      }
      async getAllEpochAddressMetrics(input) {
        return await this.transport.request({
          method: "suix_getAllEpochAddressMetrics",
          params: [input == null ? void 0 : input.descendingOrder],
          signal: input == null ? void 0 : input.signal
        });
      }
      /**
       * Return the committee information for the asked epoch
       */
      async getEpochs(input) {
        return await this.transport.request({
          method: "suix_getEpochs",
          params: [input == null ? void 0 : input.cursor, input == null ? void 0 : input.limit, input == null ? void 0 : input.descendingOrder],
          signal: input == null ? void 0 : input.signal
        });
      }
      /**
       * Returns list of top move calls by usage
       */
      async getMoveCallMetrics({ signal } = {}) {
        return await this.transport.request({
          method: "suix_getMoveCallMetrics",
          params: [],
          signal
        });
      }
      /**
       * Return the committee information for the asked epoch
       */
      async getCurrentEpoch({ signal } = {}) {
        return await this.transport.request({
          method: "suix_getCurrentEpoch",
          params: [],
          signal
        });
      }
      /**
       * Return the Validators APYs
       */
      async getValidatorsApy({ signal } = {}) {
        return await this.transport.request({
          method: "suix_getValidatorsApy",
          params: [],
          signal
        });
      }
      // TODO: Migrate this to `sui_getChainIdentifier` once it is widely available.
      async getChainIdentifier({ signal } = {}) {
        const checkpoint = await this.getCheckpoint({ id: "0", signal });
        const bytes = (0, import_bcs.fromBase58)(checkpoint.digest);
        return (0, import_bcs.toHex)(bytes.slice(0, 4));
      }
      async resolveNameServiceAddress(input) {
        return await this.transport.request({
          method: "suix_resolveNameServiceAddress",
          params: [input.name],
          signal: input.signal
        });
      }
      async resolveNameServiceNames({
        format = "dot",
        ...input
      }) {
        const { nextCursor, hasNextPage, data } = await this.transport.request({
          method: "suix_resolveNameServiceNames",
          params: [input.address, input.cursor, input.limit],
          signal: input.signal
        });
        return {
          hasNextPage,
          nextCursor,
          data: data.map((name) => (0, import_suins.normalizeSuiNSName)(name, format))
        };
      }
      async getProtocolConfig(input) {
        return await this.transport.request({
          method: "sui_getProtocolConfig",
          params: [input == null ? void 0 : input.version],
          signal: input == null ? void 0 : input.signal
        });
      }
      /**
       * Wait for a transaction block result to be available over the API.
       * This can be used in conjunction with `executeTransactionBlock` to wait for the transaction to
       * be available via the API.
       * This currently polls the `getTransactionBlock` API to check for the transaction.
       */
      async waitForTransaction({
        signal,
        timeout = 60 * 1e3,
        pollInterval = 2 * 1e3,
        ...input
      }) {
        const timeoutSignal = AbortSignal.timeout(timeout);
        const timeoutPromise = new Promise((_, reject) => {
          timeoutSignal.addEventListener("abort", () => reject(timeoutSignal.reason));
        });
        timeoutPromise.catch(() => {
        });
        while (!timeoutSignal.aborted) {
          signal == null ? void 0 : signal.throwIfAborted();
          try {
            return await this.getTransactionBlock(input);
          } catch (e) {
            await Promise.race([
              new Promise((resolve) => setTimeout(resolve, pollInterval)),
              timeoutPromise
            ]);
          }
        }
        timeoutSignal.throwIfAborted();
        throw new Error("Unexpected error while waiting for transaction block.");
      }
      experimental_asClientExtension() {
        return {
          name: "jsonRPC",
          register: () => {
            return this;
          }
        };
      }
    };
  }
});

// node_modules/@mysten/sui/dist/cjs/client/index.js
var require_client4 = __commonJS({
  "node_modules/@mysten/sui/dist/cjs/client/index.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __reExport = (target, mod2, secondTarget) => (__copyProps(target, mod2, "default"), secondTarget && __copyProps(secondTarget, mod2, "default"));
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var client_exports = {};
    __export2(client_exports, {
      JsonRpcError: () => import_errors3.JsonRpcError,
      SuiClient: () => import_client.SuiClient,
      SuiHTTPStatusError: () => import_errors3.SuiHTTPStatusError,
      SuiHTTPTransport: () => import_http_transport.SuiHTTPTransport,
      SuiHTTPTransportError: () => import_errors3.SuiHTTPTransportError,
      getFullnodeUrl: () => import_network.getFullnodeUrl,
      isSuiClient: () => import_client.isSuiClient
    });
    module2.exports = __toCommonJS2(client_exports);
    var import_http_transport = require_http_transport();
    var import_network = require_network();
    __reExport(client_exports, require_types2(), module2.exports);
    var import_client = require_client3();
    var import_errors3 = require_errors();
  }
});

// node_modules/navi-sdk/dist/libs/Coins/index.js
var require_Coins = __commonJS({
  "node_modules/navi-sdk/dist/libs/Coins/index.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getCoinAmount = getCoinAmount;
    exports2.getCoinDecimal = getCoinDecimal;
    function getCoinAmount(client, sender, coinType) {
      return __awaiter2(this, void 0, void 0, function* () {
        if (!sender) {
          throw new Error("Sender is undefined.");
        }
        if (!client) {
          throw new Error("Client is undefined.");
        }
        const coinInfo = yield client.getBalance({
          owner: sender,
          coinType
        });
        const tokenBalance = Number(coinInfo.totalBalance);
        console.log("Token Type : ", coinType, "Balance: ", tokenBalance);
        return tokenBalance;
      });
    }
    function getCoinDecimal(client, coinType) {
      return __awaiter2(this, void 0, void 0, function* () {
        const coinMetadata = yield client.getCoinMetadata({ coinType });
        if (coinMetadata)
          return coinMetadata.decimals;
        return 9;
      });
    }
  }
});

// node_modules/axios/dist/browser/axios.cjs
var require_axios = __commonJS({
  "node_modules/axios/dist/browser/axios.cjs"(exports2, module2) {
    "use strict";
    function bind(fn, thisArg) {
      return function wrap() {
        return fn.apply(thisArg, arguments);
      };
    }
    var { toString } = Object.prototype;
    var { getPrototypeOf } = Object;
    var { iterator, toStringTag } = Symbol;
    var kindOf = /* @__PURE__ */ ((cache) => (thing) => {
      const str = toString.call(thing);
      return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
    })(/* @__PURE__ */ Object.create(null));
    var kindOfTest = (type2) => {
      type2 = type2.toLowerCase();
      return (thing) => kindOf(thing) === type2;
    };
    var typeOfTest = (type2) => (thing) => typeof thing === type2;
    var { isArray } = Array;
    var isUndefined = typeOfTest("undefined");
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
    }
    var isArrayBuffer = kindOfTest("ArrayBuffer");
    function isArrayBufferView(val) {
      let result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && isArrayBuffer(val.buffer);
      }
      return result;
    }
    var isString = typeOfTest("string");
    var isFunction = typeOfTest("function");
    var isNumber = typeOfTest("number");
    var isObject2 = (thing) => thing !== null && typeof thing === "object";
    var isBoolean = (thing) => thing === true || thing === false;
    var isPlainObject = (val) => {
      if (kindOf(val) !== "object") {
        return false;
      }
      const prototype2 = getPrototypeOf(val);
      return (prototype2 === null || prototype2 === Object.prototype || Object.getPrototypeOf(prototype2) === null) && !(toStringTag in val) && !(iterator in val);
    };
    var isDate = kindOfTest("Date");
    var isFile = kindOfTest("File");
    var isBlob = kindOfTest("Blob");
    var isFileList = kindOfTest("FileList");
    var isStream = (val) => isObject2(val) && isFunction(val.pipe);
    var isFormData = (thing) => {
      let kind;
      return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
      kind === "object" && isFunction(thing.toString) && thing.toString() === "[object FormData]"));
    };
    var isURLSearchParams = kindOfTest("URLSearchParams");
    var [isReadableStream, isRequest, isResponse, isHeaders] = ["ReadableStream", "Request", "Response", "Headers"].map(kindOfTest);
    var trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
    function forEach(obj, fn, { allOwnKeys = false } = {}) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      let i;
      let l;
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
        const len = keys.length;
        let key;
        for (i = 0; i < len; i++) {
          key = keys[i];
          fn.call(null, obj[key], key, obj);
        }
      }
    }
    function findKey(obj, key) {
      key = key.toLowerCase();
      const keys = Object.keys(obj);
      let i = keys.length;
      let _key;
      while (i-- > 0) {
        _key = keys[i];
        if (key === _key.toLowerCase()) {
          return _key;
        }
      }
      return null;
    }
    var _global = (() => {
      if (typeof globalThis !== "undefined") return globalThis;
      return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
    })();
    var isContextDefined = (context) => !isUndefined(context) && context !== _global;
    function merge() {
      const { caseless } = isContextDefined(this) && this || {};
      const result = {};
      const assignValue = (val, key) => {
        const targetKey = caseless && findKey(result, key) || key;
        if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
          result[targetKey] = merge(result[targetKey], val);
        } else if (isPlainObject(val)) {
          result[targetKey] = merge({}, val);
        } else if (isArray(val)) {
          result[targetKey] = val.slice();
        } else {
          result[targetKey] = val;
        }
      };
      for (let i = 0, l = arguments.length; i < l; i++) {
        arguments[i] && forEach(arguments[i], assignValue);
      }
      return result;
    }
    var extend = (a, b, thisArg, { allOwnKeys } = {}) => {
      forEach(b, (val, key) => {
        if (thisArg && isFunction(val)) {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      }, { allOwnKeys });
      return a;
    };
    var stripBOM = (content) => {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    };
    var inherits = (constructor, superConstructor, props, descriptors2) => {
      constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
      constructor.prototype.constructor = constructor;
      Object.defineProperty(constructor, "super", {
        value: superConstructor.prototype
      });
      props && Object.assign(constructor.prototype, props);
    };
    var toFlatObject = (sourceObj, destObj, filter, propFilter) => {
      let props;
      let i;
      let prop;
      const merged = {};
      destObj = destObj || {};
      if (sourceObj == null) return destObj;
      do {
        props = Object.getOwnPropertyNames(sourceObj);
        i = props.length;
        while (i-- > 0) {
          prop = props[i];
          if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
            destObj[prop] = sourceObj[prop];
            merged[prop] = true;
          }
        }
        sourceObj = filter !== false && getPrototypeOf(sourceObj);
      } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);
      return destObj;
    };
    var endsWith = (str, searchString, position) => {
      str = String(str);
      if (position === void 0 || position > str.length) {
        position = str.length;
      }
      position -= searchString.length;
      const lastIndex = str.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    };
    var toArray = (thing) => {
      if (!thing) return null;
      if (isArray(thing)) return thing;
      let i = thing.length;
      if (!isNumber(i)) return null;
      const arr = new Array(i);
      while (i-- > 0) {
        arr[i] = thing[i];
      }
      return arr;
    };
    var isTypedArray = /* @__PURE__ */ ((TypedArray) => {
      return (thing) => {
        return TypedArray && thing instanceof TypedArray;
      };
    })(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
    var forEachEntry = (obj, fn) => {
      const generator = obj && obj[iterator];
      const _iterator = generator.call(obj);
      let result;
      while ((result = _iterator.next()) && !result.done) {
        const pair = result.value;
        fn.call(obj, pair[0], pair[1]);
      }
    };
    var matchAll = (regExp, str) => {
      let matches;
      const arr = [];
      while ((matches = regExp.exec(str)) !== null) {
        arr.push(matches);
      }
      return arr;
    };
    var isHTMLForm = kindOfTest("HTMLFormElement");
    var toCamelCase = (str) => {
      return str.toLowerCase().replace(
        /[-_\s]([a-z\d])(\w*)/g,
        function replacer(m, p1, p2) {
          return p1.toUpperCase() + p2;
        }
      );
    };
    var hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
    var isRegExp = kindOfTest("RegExp");
    var reduceDescriptors = (obj, reducer) => {
      const descriptors2 = Object.getOwnPropertyDescriptors(obj);
      const reducedDescriptors = {};
      forEach(descriptors2, (descriptor, name) => {
        let ret;
        if ((ret = reducer(descriptor, name, obj)) !== false) {
          reducedDescriptors[name] = ret || descriptor;
        }
      });
      Object.defineProperties(obj, reducedDescriptors);
    };
    var freezeMethods = (obj) => {
      reduceDescriptors(obj, (descriptor, name) => {
        if (isFunction(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
          return false;
        }
        const value = obj[name];
        if (!isFunction(value)) return;
        descriptor.enumerable = false;
        if ("writable" in descriptor) {
          descriptor.writable = false;
          return;
        }
        if (!descriptor.set) {
          descriptor.set = () => {
            throw Error("Can not rewrite read-only method '" + name + "'");
          };
        }
      });
    };
    var toObjectSet = (arrayOrString, delimiter) => {
      const obj = {};
      const define3 = (arr) => {
        arr.forEach((value) => {
          obj[value] = true;
        });
      };
      isArray(arrayOrString) ? define3(arrayOrString) : define3(String(arrayOrString).split(delimiter));
      return obj;
    };
    var noop = () => {
    };
    var toFiniteNumber = (value, defaultValue) => {
      return value != null && Number.isFinite(value = +value) ? value : defaultValue;
    };
    function isSpecCompliantForm(thing) {
      return !!(thing && isFunction(thing.append) && thing[toStringTag] === "FormData" && thing[iterator]);
    }
    var toJSONObject = (obj) => {
      const stack = new Array(10);
      const visit = (source, i) => {
        if (isObject2(source)) {
          if (stack.indexOf(source) >= 0) {
            return;
          }
          if (!("toJSON" in source)) {
            stack[i] = source;
            const target = isArray(source) ? [] : {};
            forEach(source, (value, key) => {
              const reducedValue = visit(value, i + 1);
              !isUndefined(reducedValue) && (target[key] = reducedValue);
            });
            stack[i] = void 0;
            return target;
          }
        }
        return source;
      };
      return visit(obj, 0);
    };
    var isAsyncFn = kindOfTest("AsyncFunction");
    var isThenable = (thing) => thing && (isObject2(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
    var _setImmediate = ((setImmediateSupported, postMessageSupported) => {
      if (setImmediateSupported) {
        return setImmediate;
      }
      return postMessageSupported ? ((token, callbacks) => {
        _global.addEventListener("message", ({ source, data }) => {
          if (source === _global && data === token) {
            callbacks.length && callbacks.shift()();
          }
        }, false);
        return (cb) => {
          callbacks.push(cb);
          _global.postMessage(token, "*");
        };
      })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
    })(
      typeof setImmediate === "function",
      isFunction(_global.postMessage)
    );
    var asap = typeof queueMicrotask !== "undefined" ? queueMicrotask.bind(_global) : typeof process !== "undefined" && process.nextTick || _setImmediate;
    var isIterable2 = (thing) => thing != null && isFunction(thing[iterator]);
    var utils$1 = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isBoolean,
      isObject: isObject2,
      isPlainObject,
      isReadableStream,
      isRequest,
      isResponse,
      isHeaders,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isRegExp,
      isFunction,
      isStream,
      isURLSearchParams,
      isTypedArray,
      isFileList,
      forEach,
      merge,
      extend,
      trim,
      stripBOM,
      inherits,
      toFlatObject,
      kindOf,
      kindOfTest,
      endsWith,
      toArray,
      forEachEntry,
      matchAll,
      isHTMLForm,
      hasOwnProperty,
      hasOwnProp: hasOwnProperty,
      // an alias to avoid ESLint no-prototype-builtins detection
      reduceDescriptors,
      freezeMethods,
      toObjectSet,
      toCamelCase,
      noop,
      toFiniteNumber,
      findKey,
      global: _global,
      isContextDefined,
      isSpecCompliantForm,
      toJSONObject,
      isAsyncFn,
      isThenable,
      setImmediate: _setImmediate,
      asap,
      isIterable: isIterable2
    };
    function AxiosError(message, code, config, request, response) {
      Error.call(this);
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      } else {
        this.stack = new Error().stack;
      }
      this.message = message;
      this.name = "AxiosError";
      code && (this.code = code);
      config && (this.config = config);
      request && (this.request = request);
      if (response) {
        this.response = response;
        this.status = response.status ? response.status : null;
      }
    }
    utils$1.inherits(AxiosError, Error, {
      toJSON: function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: utils$1.toJSONObject(this.config),
          code: this.code,
          status: this.status
        };
      }
    });
    var prototype$1 = AxiosError.prototype;
    var descriptors = {};
    [
      "ERR_BAD_OPTION_VALUE",
      "ERR_BAD_OPTION",
      "ECONNABORTED",
      "ETIMEDOUT",
      "ERR_NETWORK",
      "ERR_FR_TOO_MANY_REDIRECTS",
      "ERR_DEPRECATED",
      "ERR_BAD_RESPONSE",
      "ERR_BAD_REQUEST",
      "ERR_CANCELED",
      "ERR_NOT_SUPPORT",
      "ERR_INVALID_URL"
      // eslint-disable-next-line func-names
    ].forEach((code) => {
      descriptors[code] = { value: code };
    });
    Object.defineProperties(AxiosError, descriptors);
    Object.defineProperty(prototype$1, "isAxiosError", { value: true });
    AxiosError.from = (error, code, config, request, response, customProps) => {
      const axiosError = Object.create(prototype$1);
      utils$1.toFlatObject(error, axiosError, function filter(obj) {
        return obj !== Error.prototype;
      }, (prop) => {
        return prop !== "isAxiosError";
      });
      AxiosError.call(axiosError, error.message, code, config, request, response);
      axiosError.cause = error;
      axiosError.name = error.name;
      customProps && Object.assign(axiosError, customProps);
      return axiosError;
    };
    var httpAdapter = null;
    function isVisitable(thing) {
      return utils$1.isPlainObject(thing) || utils$1.isArray(thing);
    }
    function removeBrackets(key) {
      return utils$1.endsWith(key, "[]") ? key.slice(0, -2) : key;
    }
    function renderKey(path, key, dots) {
      if (!path) return key;
      return path.concat(key).map(function each(token, i) {
        token = removeBrackets(token);
        return !dots && i ? "[" + token + "]" : token;
      }).join(dots ? "." : "");
    }
    function isFlatArray(arr) {
      return utils$1.isArray(arr) && !arr.some(isVisitable);
    }
    var predicates = utils$1.toFlatObject(utils$1, {}, null, function filter(prop) {
      return /^is[A-Z]/.test(prop);
    });
    function toFormData(obj, formData, options) {
      if (!utils$1.isObject(obj)) {
        throw new TypeError("target must be an object");
      }
      formData = formData || new FormData();
      options = utils$1.toFlatObject(options, {
        metaTokens: true,
        dots: false,
        indexes: false
      }, false, function defined(option, source) {
        return !utils$1.isUndefined(source[option]);
      });
      const metaTokens = options.metaTokens;
      const visitor = options.visitor || defaultVisitor;
      const dots = options.dots;
      const indexes = options.indexes;
      const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
      const useBlob = _Blob && utils$1.isSpecCompliantForm(formData);
      if (!utils$1.isFunction(visitor)) {
        throw new TypeError("visitor must be a function");
      }
      function convertValue(value) {
        if (value === null) return "";
        if (utils$1.isDate(value)) {
          return value.toISOString();
        }
        if (!useBlob && utils$1.isBlob(value)) {
          throw new AxiosError("Blob is not supported. Use a Buffer instead.");
        }
        if (utils$1.isArrayBuffer(value) || utils$1.isTypedArray(value)) {
          return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
        }
        return value;
      }
      function defaultVisitor(value, key, path) {
        let arr = value;
        if (value && !path && typeof value === "object") {
          if (utils$1.endsWith(key, "{}")) {
            key = metaTokens ? key : key.slice(0, -2);
            value = JSON.stringify(value);
          } else if (utils$1.isArray(value) && isFlatArray(value) || (utils$1.isFileList(value) || utils$1.endsWith(key, "[]")) && (arr = utils$1.toArray(value))) {
            key = removeBrackets(key);
            arr.forEach(function each(el, index) {
              !(utils$1.isUndefined(el) || el === null) && formData.append(
                // eslint-disable-next-line no-nested-ternary
                indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + "[]",
                convertValue(el)
              );
            });
            return false;
          }
        }
        if (isVisitable(value)) {
          return true;
        }
        formData.append(renderKey(path, key, dots), convertValue(value));
        return false;
      }
      const stack = [];
      const exposedHelpers = Object.assign(predicates, {
        defaultVisitor,
        convertValue,
        isVisitable
      });
      function build(value, path) {
        if (utils$1.isUndefined(value)) return;
        if (stack.indexOf(value) !== -1) {
          throw Error("Circular reference detected in " + path.join("."));
        }
        stack.push(value);
        utils$1.forEach(value, function each(el, key) {
          const result = !(utils$1.isUndefined(el) || el === null) && visitor.call(
            formData,
            el,
            utils$1.isString(key) ? key.trim() : key,
            path,
            exposedHelpers
          );
          if (result === true) {
            build(el, path ? path.concat(key) : [key]);
          }
        });
        stack.pop();
      }
      if (!utils$1.isObject(obj)) {
        throw new TypeError("data must be an object");
      }
      build(obj);
      return formData;
    }
    function encode$1(str) {
      const charMap = {
        "!": "%21",
        "'": "%27",
        "(": "%28",
        ")": "%29",
        "~": "%7E",
        "%20": "+",
        "%00": "\0"
      };
      return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
        return charMap[match];
      });
    }
    function AxiosURLSearchParams(params, options) {
      this._pairs = [];
      params && toFormData(params, this, options);
    }
    var prototype = AxiosURLSearchParams.prototype;
    prototype.append = function append(name, value) {
      this._pairs.push([name, value]);
    };
    prototype.toString = function toString2(encoder) {
      const _encode = encoder ? function(value) {
        return encoder.call(this, value, encode$1);
      } : encode$1;
      return this._pairs.map(function each(pair) {
        return _encode(pair[0]) + "=" + _encode(pair[1]);
      }, "").join("&");
    };
    function encode2(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    function buildURL(url, params, options) {
      if (!params) {
        return url;
      }
      const _encode = options && options.encode || encode2;
      if (utils$1.isFunction(options)) {
        options = {
          serialize: options
        };
      }
      const serializeFn = options && options.serialize;
      let serializedParams;
      if (serializeFn) {
        serializedParams = serializeFn(params, options);
      } else {
        serializedParams = utils$1.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams(params, options).toString(_encode);
      }
      if (serializedParams) {
        const hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    }
    var InterceptorManager = class {
      constructor() {
        this.handlers = [];
      }
      /**
       * Add a new interceptor to the stack
       *
       * @param {Function} fulfilled The function to handle `then` for a `Promise`
       * @param {Function} rejected The function to handle `reject` for a `Promise`
       *
       * @return {Number} An ID used to remove interceptor later
       */
      use(fulfilled, rejected, options) {
        this.handlers.push({
          fulfilled,
          rejected,
          synchronous: options ? options.synchronous : false,
          runWhen: options ? options.runWhen : null
        });
        return this.handlers.length - 1;
      }
      /**
       * Remove an interceptor from the stack
       *
       * @param {Number} id The ID that was returned by `use`
       *
       * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
       */
      eject(id) {
        if (this.handlers[id]) {
          this.handlers[id] = null;
        }
      }
      /**
       * Clear all interceptors from the stack
       *
       * @returns {void}
       */
      clear() {
        if (this.handlers) {
          this.handlers = [];
        }
      }
      /**
       * Iterate over all the registered interceptors
       *
       * This method is particularly useful for skipping over any
       * interceptors that may have become `null` calling `eject`.
       *
       * @param {Function} fn The function to call for each interceptor
       *
       * @returns {void}
       */
      forEach(fn) {
        utils$1.forEach(this.handlers, function forEachHandler(h) {
          if (h !== null) {
            fn(h);
          }
        });
      }
    };
    var InterceptorManager$1 = InterceptorManager;
    var transitionalDefaults = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };
    var URLSearchParams$1 = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams;
    var FormData$1 = typeof FormData !== "undefined" ? FormData : null;
    var Blob$1 = typeof Blob !== "undefined" ? Blob : null;
    var platform$1 = {
      isBrowser: true,
      classes: {
        URLSearchParams: URLSearchParams$1,
        FormData: FormData$1,
        Blob: Blob$1
      },
      protocols: ["http", "https", "file", "blob", "url", "data"]
    };
    var hasBrowserEnv = typeof window !== "undefined" && typeof document !== "undefined";
    var _navigator = typeof navigator === "object" && navigator || void 0;
    var hasStandardBrowserEnv = hasBrowserEnv && (!_navigator || ["ReactNative", "NativeScript", "NS"].indexOf(_navigator.product) < 0);
    var hasStandardBrowserWebWorkerEnv = (() => {
      return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
      self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
    })();
    var origin = hasBrowserEnv && window.location.href || "http://localhost";
    var utils = Object.freeze({
      __proto__: null,
      hasBrowserEnv,
      hasStandardBrowserWebWorkerEnv,
      hasStandardBrowserEnv,
      navigator: _navigator,
      origin
    });
    var platform = {
      ...utils,
      ...platform$1
    };
    function toURLEncodedForm(data, options) {
      return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({
        visitor: function(value, key, path, helpers) {
          if (platform.isNode && utils$1.isBuffer(value)) {
            this.append(key, value.toString("base64"));
            return false;
          }
          return helpers.defaultVisitor.apply(this, arguments);
        }
      }, options));
    }
    function parsePropPath(name) {
      return utils$1.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
        return match[0] === "[]" ? "" : match[1] || match[0];
      });
    }
    function arrayToObject(arr) {
      const obj = {};
      const keys = Object.keys(arr);
      let i;
      const len = keys.length;
      let key;
      for (i = 0; i < len; i++) {
        key = keys[i];
        obj[key] = arr[key];
      }
      return obj;
    }
    function formDataToJSON(formData) {
      function buildPath(path, value, target, index) {
        let name = path[index++];
        if (name === "__proto__") return true;
        const isNumericKey = Number.isFinite(+name);
        const isLast = index >= path.length;
        name = !name && utils$1.isArray(target) ? target.length : name;
        if (isLast) {
          if (utils$1.hasOwnProp(target, name)) {
            target[name] = [target[name], value];
          } else {
            target[name] = value;
          }
          return !isNumericKey;
        }
        if (!target[name] || !utils$1.isObject(target[name])) {
          target[name] = [];
        }
        const result = buildPath(path, value, target[name], index);
        if (result && utils$1.isArray(target[name])) {
          target[name] = arrayToObject(target[name]);
        }
        return !isNumericKey;
      }
      if (utils$1.isFormData(formData) && utils$1.isFunction(formData.entries)) {
        const obj = {};
        utils$1.forEachEntry(formData, (name, value) => {
          buildPath(parsePropPath(name), value, obj, 0);
        });
        return obj;
      }
      return null;
    }
    function stringifySafely(rawValue, parser, encoder) {
      if (utils$1.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils$1.trim(rawValue);
        } catch (e) {
          if (e.name !== "SyntaxError") {
            throw e;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    var defaults = {
      transitional: transitionalDefaults,
      adapter: ["xhr", "http", "fetch"],
      transformRequest: [function transformRequest(data, headers) {
        const contentType = headers.getContentType() || "";
        const hasJSONContentType = contentType.indexOf("application/json") > -1;
        const isObjectPayload = utils$1.isObject(data);
        if (isObjectPayload && utils$1.isHTMLForm(data)) {
          data = new FormData(data);
        }
        const isFormData2 = utils$1.isFormData(data);
        if (isFormData2) {
          return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
        }
        if (utils$1.isArrayBuffer(data) || utils$1.isBuffer(data) || utils$1.isStream(data) || utils$1.isFile(data) || utils$1.isBlob(data) || utils$1.isReadableStream(data)) {
          return data;
        }
        if (utils$1.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils$1.isURLSearchParams(data)) {
          headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
          return data.toString();
        }
        let isFileList2;
        if (isObjectPayload) {
          if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
            return toURLEncodedForm(data, this.formSerializer).toString();
          }
          if ((isFileList2 = utils$1.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
            const _FormData = this.env && this.env.FormData;
            return toFormData(
              isFileList2 ? { "files[]": data } : data,
              _FormData && new _FormData(),
              this.formSerializer
            );
          }
        }
        if (isObjectPayload || hasJSONContentType) {
          headers.setContentType("application/json", false);
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        const transitional = this.transitional || defaults.transitional;
        const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        const JSONRequested = this.responseType === "json";
        if (utils$1.isResponse(data) || utils$1.isReadableStream(data)) {
          return data;
        }
        if (data && utils$1.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
          const silentJSONParsing = transitional && transitional.silentJSONParsing;
          const strictJSONParsing = !silentJSONParsing && JSONRequested;
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === "SyntaxError") {
                throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
              }
              throw e;
            }
          }
        }
        return data;
      }],
      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: platform.classes.FormData,
        Blob: platform.classes.Blob
      },
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          "Accept": "application/json, text/plain, */*",
          "Content-Type": void 0
        }
      }
    };
    utils$1.forEach(["delete", "get", "head", "post", "put", "patch"], (method2) => {
      defaults.headers[method2] = {};
    });
    var defaults$1 = defaults;
    var ignoreDuplicateOf = utils$1.toObjectSet([
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ]);
    var parseHeaders = (rawHeaders) => {
      const parsed = {};
      let key;
      let val;
      let i;
      rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
        i = line.indexOf(":");
        key = line.substring(0, i).trim().toLowerCase();
        val = line.substring(i + 1).trim();
        if (!key || parsed[key] && ignoreDuplicateOf[key]) {
          return;
        }
        if (key === "set-cookie") {
          if (parsed[key]) {
            parsed[key].push(val);
          } else {
            parsed[key] = [val];
          }
        } else {
          parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
        }
      });
      return parsed;
    };
    var $internals = Symbol("internals");
    function normalizeHeader(header) {
      return header && String(header).trim().toLowerCase();
    }
    function normalizeValue(value) {
      if (value === false || value == null) {
        return value;
      }
      return utils$1.isArray(value) ? value.map(normalizeValue) : String(value);
    }
    function parseTokens(str) {
      const tokens = /* @__PURE__ */ Object.create(null);
      const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
      let match;
      while (match = tokensRE.exec(str)) {
        tokens[match[1]] = match[2];
      }
      return tokens;
    }
    var isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
    function matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {
      if (utils$1.isFunction(filter)) {
        return filter.call(this, value, header);
      }
      if (isHeaderNameFilter) {
        value = header;
      }
      if (!utils$1.isString(value)) return;
      if (utils$1.isString(filter)) {
        return value.indexOf(filter) !== -1;
      }
      if (utils$1.isRegExp(filter)) {
        return filter.test(value);
      }
    }
    function formatHeader(header) {
      return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
        return char.toUpperCase() + str;
      });
    }
    function buildAccessors(obj, header) {
      const accessorName = utils$1.toCamelCase(" " + header);
      ["get", "set", "has"].forEach((methodName) => {
        Object.defineProperty(obj, methodName + accessorName, {
          value: function(arg1, arg2, arg3) {
            return this[methodName].call(this, header, arg1, arg2, arg3);
          },
          configurable: true
        });
      });
    }
    var AxiosHeaders = class {
      constructor(headers) {
        headers && this.set(headers);
      }
      set(header, valueOrRewrite, rewrite) {
        const self2 = this;
        function setHeader(_value, _header, _rewrite) {
          const lHeader = normalizeHeader(_header);
          if (!lHeader) {
            throw new Error("header name must be a non-empty string");
          }
          const key = utils$1.findKey(self2, lHeader);
          if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
            self2[key || _header] = normalizeValue(_value);
          }
        }
        const setHeaders = (headers, _rewrite) => utils$1.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
        if (utils$1.isPlainObject(header) || header instanceof this.constructor) {
          setHeaders(header, valueOrRewrite);
        } else if (utils$1.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
          setHeaders(parseHeaders(header), valueOrRewrite);
        } else if (utils$1.isObject(header) && utils$1.isIterable(header)) {
          let obj = {}, dest, key;
          for (const entry of header) {
            if (!utils$1.isArray(entry)) {
              throw TypeError("Object iterator must return a key-value pair");
            }
            obj[key = entry[0]] = (dest = obj[key]) ? utils$1.isArray(dest) ? [...dest, entry[1]] : [dest, entry[1]] : entry[1];
          }
          setHeaders(obj, valueOrRewrite);
        } else {
          header != null && setHeader(valueOrRewrite, header, rewrite);
        }
        return this;
      }
      get(header, parser) {
        header = normalizeHeader(header);
        if (header) {
          const key = utils$1.findKey(this, header);
          if (key) {
            const value = this[key];
            if (!parser) {
              return value;
            }
            if (parser === true) {
              return parseTokens(value);
            }
            if (utils$1.isFunction(parser)) {
              return parser.call(this, value, key);
            }
            if (utils$1.isRegExp(parser)) {
              return parser.exec(value);
            }
            throw new TypeError("parser must be boolean|regexp|function");
          }
        }
      }
      has(header, matcher) {
        header = normalizeHeader(header);
        if (header) {
          const key = utils$1.findKey(this, header);
          return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
        }
        return false;
      }
      delete(header, matcher) {
        const self2 = this;
        let deleted = false;
        function deleteHeader(_header) {
          _header = normalizeHeader(_header);
          if (_header) {
            const key = utils$1.findKey(self2, _header);
            if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
              delete self2[key];
              deleted = true;
            }
          }
        }
        if (utils$1.isArray(header)) {
          header.forEach(deleteHeader);
        } else {
          deleteHeader(header);
        }
        return deleted;
      }
      clear(matcher) {
        const keys = Object.keys(this);
        let i = keys.length;
        let deleted = false;
        while (i--) {
          const key = keys[i];
          if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
            delete this[key];
            deleted = true;
          }
        }
        return deleted;
      }
      normalize(format) {
        const self2 = this;
        const headers = {};
        utils$1.forEach(this, (value, header) => {
          const key = utils$1.findKey(headers, header);
          if (key) {
            self2[key] = normalizeValue(value);
            delete self2[header];
            return;
          }
          const normalized = format ? formatHeader(header) : String(header).trim();
          if (normalized !== header) {
            delete self2[header];
          }
          self2[normalized] = normalizeValue(value);
          headers[normalized] = true;
        });
        return this;
      }
      concat(...targets) {
        return this.constructor.concat(this, ...targets);
      }
      toJSON(asStrings) {
        const obj = /* @__PURE__ */ Object.create(null);
        utils$1.forEach(this, (value, header) => {
          value != null && value !== false && (obj[header] = asStrings && utils$1.isArray(value) ? value.join(", ") : value);
        });
        return obj;
      }
      [Symbol.iterator]() {
        return Object.entries(this.toJSON())[Symbol.iterator]();
      }
      toString() {
        return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
      }
      getSetCookie() {
        return this.get("set-cookie") || [];
      }
      get [Symbol.toStringTag]() {
        return "AxiosHeaders";
      }
      static from(thing) {
        return thing instanceof this ? thing : new this(thing);
      }
      static concat(first, ...targets) {
        const computed = new this(first);
        targets.forEach((target) => computed.set(target));
        return computed;
      }
      static accessor(header) {
        const internals = this[$internals] = this[$internals] = {
          accessors: {}
        };
        const accessors = internals.accessors;
        const prototype2 = this.prototype;
        function defineAccessor(_header) {
          const lHeader = normalizeHeader(_header);
          if (!accessors[lHeader]) {
            buildAccessors(prototype2, _header);
            accessors[lHeader] = true;
          }
        }
        utils$1.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
        return this;
      }
    };
    AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
    utils$1.reduceDescriptors(AxiosHeaders.prototype, ({ value }, key) => {
      let mapped = key[0].toUpperCase() + key.slice(1);
      return {
        get: () => value,
        set(headerValue) {
          this[mapped] = headerValue;
        }
      };
    });
    utils$1.freezeMethods(AxiosHeaders);
    var AxiosHeaders$1 = AxiosHeaders;
    function transformData(fns, response) {
      const config = this || defaults$1;
      const context = response || config;
      const headers = AxiosHeaders$1.from(context.headers);
      let data = context.data;
      utils$1.forEach(fns, function transform(fn) {
        data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
      });
      headers.normalize();
      return data;
    }
    function isCancel(value) {
      return !!(value && value.__CANCEL__);
    }
    function CanceledError(message, config, request) {
      AxiosError.call(this, message == null ? "canceled" : message, AxiosError.ERR_CANCELED, config, request);
      this.name = "CanceledError";
    }
    utils$1.inherits(CanceledError, AxiosError, {
      __CANCEL__: true
    });
    function settle(resolve, reject, response) {
      const validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(new AxiosError(
          "Request failed with status code " + response.status,
          [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
          response.config,
          response.request,
          response
        ));
      }
    }
    function parseProtocol(url) {
      const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
      return match && match[1] || "";
    }
    function speedometer(samplesCount, min) {
      samplesCount = samplesCount || 10;
      const bytes = new Array(samplesCount);
      const timestamps = new Array(samplesCount);
      let head = 0;
      let tail = 0;
      let firstSampleTS;
      min = min !== void 0 ? min : 1e3;
      return function push(chunkLength) {
        const now = Date.now();
        const startedAt = timestamps[tail];
        if (!firstSampleTS) {
          firstSampleTS = now;
        }
        bytes[head] = chunkLength;
        timestamps[head] = now;
        let i = tail;
        let bytesCount = 0;
        while (i !== head) {
          bytesCount += bytes[i++];
          i = i % samplesCount;
        }
        head = (head + 1) % samplesCount;
        if (head === tail) {
          tail = (tail + 1) % samplesCount;
        }
        if (now - firstSampleTS < min) {
          return;
        }
        const passed = startedAt && now - startedAt;
        return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
      };
    }
    function throttle(fn, freq) {
      let timestamp = 0;
      let threshold = 1e3 / freq;
      let lastArgs;
      let timer;
      const invoke = (args, now = Date.now()) => {
        timestamp = now;
        lastArgs = null;
        if (timer) {
          clearTimeout(timer);
          timer = null;
        }
        fn.apply(null, args);
      };
      const throttled = (...args) => {
        const now = Date.now();
        const passed = now - timestamp;
        if (passed >= threshold) {
          invoke(args, now);
        } else {
          lastArgs = args;
          if (!timer) {
            timer = setTimeout(() => {
              timer = null;
              invoke(lastArgs);
            }, threshold - passed);
          }
        }
      };
      const flush = () => lastArgs && invoke(lastArgs);
      return [throttled, flush];
    }
    var progressEventReducer = (listener, isDownloadStream, freq = 3) => {
      let bytesNotified = 0;
      const _speedometer = speedometer(50, 250);
      return throttle((e) => {
        const loaded = e.loaded;
        const total = e.lengthComputable ? e.total : void 0;
        const progressBytes = loaded - bytesNotified;
        const rate = _speedometer(progressBytes);
        const inRange3 = loaded <= total;
        bytesNotified = loaded;
        const data = {
          loaded,
          total,
          progress: total ? loaded / total : void 0,
          bytes: progressBytes,
          rate: rate ? rate : void 0,
          estimated: rate && total && inRange3 ? (total - loaded) / rate : void 0,
          event: e,
          lengthComputable: total != null,
          [isDownloadStream ? "download" : "upload"]: true
        };
        listener(data);
      }, freq);
    };
    var progressEventDecorator = (total, throttled) => {
      const lengthComputable = total != null;
      return [(loaded) => throttled[0]({
        lengthComputable,
        total,
        loaded
      }), throttled[1]];
    };
    var asyncDecorator = (fn) => (...args) => utils$1.asap(() => fn(...args));
    var isURLSameOrigin = platform.hasStandardBrowserEnv ? /* @__PURE__ */ ((origin2, isMSIE) => (url) => {
      url = new URL(url, platform.origin);
      return origin2.protocol === url.protocol && origin2.host === url.host && (isMSIE || origin2.port === url.port);
    })(
      new URL(platform.origin),
      platform.navigator && /(msie|trident)/i.test(platform.navigator.userAgent)
    ) : () => true;
    var cookies = platform.hasStandardBrowserEnv ? (
      // Standard browser envs support document.cookie
      {
        write(name, value, expires, path, domain, secure) {
          const cookie = [name + "=" + encodeURIComponent(value)];
          utils$1.isNumber(expires) && cookie.push("expires=" + new Date(expires).toGMTString());
          utils$1.isString(path) && cookie.push("path=" + path);
          utils$1.isString(domain) && cookie.push("domain=" + domain);
          secure === true && cookie.push("secure");
          document.cookie = cookie.join("; ");
        },
        read(name) {
          const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
          return match ? decodeURIComponent(match[3]) : null;
        },
        remove(name) {
          this.write(name, "", Date.now() - 864e5);
        }
      }
    ) : (
      // Non-standard browser env (web workers, react-native) lack needed support.
      {
        write() {
        },
        read() {
          return null;
        },
        remove() {
        }
      }
    );
    function isAbsoluteURL(url) {
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
    }
    function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/?\/$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    }
    function buildFullPath(baseURL, requestedURL, allowAbsoluteUrls) {
      let isRelativeUrl = !isAbsoluteURL(requestedURL);
      if (baseURL && (isRelativeUrl || allowAbsoluteUrls == false)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    }
    var headersToObject = (thing) => thing instanceof AxiosHeaders$1 ? { ...thing } : thing;
    function mergeConfig(config1, config2) {
      config2 = config2 || {};
      const config = {};
      function getMergedValue(target, source, prop, caseless) {
        if (utils$1.isPlainObject(target) && utils$1.isPlainObject(source)) {
          return utils$1.merge.call({ caseless }, target, source);
        } else if (utils$1.isPlainObject(source)) {
          return utils$1.merge({}, source);
        } else if (utils$1.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(a, b, prop, caseless) {
        if (!utils$1.isUndefined(b)) {
          return getMergedValue(a, b, prop, caseless);
        } else if (!utils$1.isUndefined(a)) {
          return getMergedValue(void 0, a, prop, caseless);
        }
      }
      function valueFromConfig2(a, b) {
        if (!utils$1.isUndefined(b)) {
          return getMergedValue(void 0, b);
        }
      }
      function defaultToConfig2(a, b) {
        if (!utils$1.isUndefined(b)) {
          return getMergedValue(void 0, b);
        } else if (!utils$1.isUndefined(a)) {
          return getMergedValue(void 0, a);
        }
      }
      function mergeDirectKeys(a, b, prop) {
        if (prop in config2) {
          return getMergedValue(a, b);
        } else if (prop in config1) {
          return getMergedValue(void 0, a);
        }
      }
      const mergeMap = {
        url: valueFromConfig2,
        method: valueFromConfig2,
        data: valueFromConfig2,
        baseURL: defaultToConfig2,
        transformRequest: defaultToConfig2,
        transformResponse: defaultToConfig2,
        paramsSerializer: defaultToConfig2,
        timeout: defaultToConfig2,
        timeoutMessage: defaultToConfig2,
        withCredentials: defaultToConfig2,
        withXSRFToken: defaultToConfig2,
        adapter: defaultToConfig2,
        responseType: defaultToConfig2,
        xsrfCookieName: defaultToConfig2,
        xsrfHeaderName: defaultToConfig2,
        onUploadProgress: defaultToConfig2,
        onDownloadProgress: defaultToConfig2,
        decompress: defaultToConfig2,
        maxContentLength: defaultToConfig2,
        maxBodyLength: defaultToConfig2,
        beforeRedirect: defaultToConfig2,
        transport: defaultToConfig2,
        httpAgent: defaultToConfig2,
        httpsAgent: defaultToConfig2,
        cancelToken: defaultToConfig2,
        socketPath: defaultToConfig2,
        responseEncoding: defaultToConfig2,
        validateStatus: mergeDirectKeys,
        headers: (a, b, prop) => mergeDeepProperties(headersToObject(a), headersToObject(b), prop, true)
      };
      utils$1.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
        const merge2 = mergeMap[prop] || mergeDeepProperties;
        const configValue = merge2(config1[prop], config2[prop], prop);
        utils$1.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
      });
      return config;
    }
    var resolveConfig = (config) => {
      const newConfig = mergeConfig({}, config);
      let { data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth } = newConfig;
      newConfig.headers = headers = AxiosHeaders$1.from(headers);
      newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url, newConfig.allowAbsoluteUrls), config.params, config.paramsSerializer);
      if (auth) {
        headers.set(
          "Authorization",
          "Basic " + btoa((auth.username || "") + ":" + (auth.password ? unescape(encodeURIComponent(auth.password)) : ""))
        );
      }
      let contentType;
      if (utils$1.isFormData(data)) {
        if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {
          headers.setContentType(void 0);
        } else if ((contentType = headers.getContentType()) !== false) {
          const [type2, ...tokens] = contentType ? contentType.split(";").map((token) => token.trim()).filter(Boolean) : [];
          headers.setContentType([type2 || "multipart/form-data", ...tokens].join("; "));
        }
      }
      if (platform.hasStandardBrowserEnv) {
        withXSRFToken && utils$1.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));
        if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin(newConfig.url)) {
          const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);
          if (xsrfValue) {
            headers.set(xsrfHeaderName, xsrfValue);
          }
        }
      }
      return newConfig;
    };
    var isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
    var xhrAdapter = isXHRAdapterSupported && function(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        const _config = resolveConfig(config);
        let requestData = _config.data;
        const requestHeaders = AxiosHeaders$1.from(_config.headers).normalize();
        let { responseType, onUploadProgress, onDownloadProgress } = _config;
        let onCanceled;
        let uploadThrottled, downloadThrottled;
        let flushUpload, flushDownload;
        function done() {
          flushUpload && flushUpload();
          flushDownload && flushDownload();
          _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);
          _config.signal && _config.signal.removeEventListener("abort", onCanceled);
        }
        let request = new XMLHttpRequest();
        request.open(_config.method.toUpperCase(), _config.url, true);
        request.timeout = _config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          const responseHeaders = AxiosHeaders$1.from(
            "getAllResponseHeaders" in request && request.getAllResponseHeaders()
          );
          const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          const response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(new AxiosError("Request aborted", AxiosError.ECONNABORTED, config, request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(new AxiosError("Network Error", AxiosError.ERR_NETWORK, config, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          let timeoutErrorMessage = _config.timeout ? "timeout of " + _config.timeout + "ms exceeded" : "timeout exceeded";
          const transitional = _config.transitional || transitionalDefaults;
          if (_config.timeoutErrorMessage) {
            timeoutErrorMessage = _config.timeoutErrorMessage;
          }
          reject(new AxiosError(
            timeoutErrorMessage,
            transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
            config,
            request
          ));
          request = null;
        };
        requestData === void 0 && requestHeaders.setContentType(null);
        if ("setRequestHeader" in request) {
          utils$1.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
            request.setRequestHeader(key, val);
          });
        }
        if (!utils$1.isUndefined(_config.withCredentials)) {
          request.withCredentials = !!_config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = _config.responseType;
        }
        if (onDownloadProgress) {
          [downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true);
          request.addEventListener("progress", downloadThrottled);
        }
        if (onUploadProgress && request.upload) {
          [uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress);
          request.upload.addEventListener("progress", uploadThrottled);
          request.upload.addEventListener("loadend", flushUpload);
        }
        if (_config.cancelToken || _config.signal) {
          onCanceled = (cancel) => {
            if (!request) {
              return;
            }
            reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);
            request.abort();
            request = null;
          };
          _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
          if (_config.signal) {
            _config.signal.aborted ? onCanceled() : _config.signal.addEventListener("abort", onCanceled);
          }
        }
        const protocol = parseProtocol(_config.url);
        if (protocol && platform.protocols.indexOf(protocol) === -1) {
          reject(new AxiosError("Unsupported protocol " + protocol + ":", AxiosError.ERR_BAD_REQUEST, config));
          return;
        }
        request.send(requestData || null);
      });
    };
    var composeSignals = (signals, timeout) => {
      const { length } = signals = signals ? signals.filter(Boolean) : [];
      if (timeout || length) {
        let controller = new AbortController();
        let aborted;
        const onabort = function(reason) {
          if (!aborted) {
            aborted = true;
            unsubscribe();
            const err = reason instanceof Error ? reason : this.reason;
            controller.abort(err instanceof AxiosError ? err : new CanceledError(err instanceof Error ? err.message : err));
          }
        };
        let timer = timeout && setTimeout(() => {
          timer = null;
          onabort(new AxiosError(`timeout ${timeout} of ms exceeded`, AxiosError.ETIMEDOUT));
        }, timeout);
        const unsubscribe = () => {
          if (signals) {
            timer && clearTimeout(timer);
            timer = null;
            signals.forEach((signal2) => {
              signal2.unsubscribe ? signal2.unsubscribe(onabort) : signal2.removeEventListener("abort", onabort);
            });
            signals = null;
          }
        };
        signals.forEach((signal2) => signal2.addEventListener("abort", onabort));
        const { signal } = controller;
        signal.unsubscribe = () => utils$1.asap(unsubscribe);
        return signal;
      }
    };
    var composeSignals$1 = composeSignals;
    var streamChunk = function* (chunk, chunkSize) {
      let len = chunk.byteLength;
      if (!chunkSize || len < chunkSize) {
        yield chunk;
        return;
      }
      let pos = 0;
      let end;
      while (pos < len) {
        end = pos + chunkSize;
        yield chunk.slice(pos, end);
        pos = end;
      }
    };
    var readBytes = async function* (iterable, chunkSize) {
      for await (const chunk of readStream(iterable)) {
        yield* streamChunk(chunk, chunkSize);
      }
    };
    var readStream = async function* (stream) {
      if (stream[Symbol.asyncIterator]) {
        yield* stream;
        return;
      }
      const reader = stream.getReader();
      try {
        for (; ; ) {
          const { done, value } = await reader.read();
          if (done) {
            break;
          }
          yield value;
        }
      } finally {
        await reader.cancel();
      }
    };
    var trackStream = (stream, chunkSize, onProgress, onFinish) => {
      const iterator2 = readBytes(stream, chunkSize);
      let bytes = 0;
      let done;
      let _onFinish = (e) => {
        if (!done) {
          done = true;
          onFinish && onFinish(e);
        }
      };
      return new ReadableStream({
        async pull(controller) {
          try {
            const { done: done2, value } = await iterator2.next();
            if (done2) {
              _onFinish();
              controller.close();
              return;
            }
            let len = value.byteLength;
            if (onProgress) {
              let loadedBytes = bytes += len;
              onProgress(loadedBytes);
            }
            controller.enqueue(new Uint8Array(value));
          } catch (err) {
            _onFinish(err);
            throw err;
          }
        },
        cancel(reason) {
          _onFinish(reason);
          return iterator2.return();
        }
      }, {
        highWaterMark: 2
      });
    };
    var isFetchSupported = typeof fetch === "function" && typeof Request === "function" && typeof Response === "function";
    var isReadableStreamSupported = isFetchSupported && typeof ReadableStream === "function";
    var encodeText = isFetchSupported && (typeof TextEncoder === "function" ? /* @__PURE__ */ ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) : async (str) => new Uint8Array(await new Response(str).arrayBuffer()));
    var test = (fn, ...args) => {
      try {
        return !!fn(...args);
      } catch (e) {
        return false;
      }
    };
    var supportsRequestStream = isReadableStreamSupported && test(() => {
      let duplexAccessed = false;
      const hasContentType = new Request(platform.origin, {
        body: new ReadableStream(),
        method: "POST",
        get duplex() {
          duplexAccessed = true;
          return "half";
        }
      }).headers.has("Content-Type");
      return duplexAccessed && !hasContentType;
    });
    var DEFAULT_CHUNK_SIZE = 64 * 1024;
    var supportsResponseStream = isReadableStreamSupported && test(() => utils$1.isReadableStream(new Response("").body));
    var resolvers = {
      stream: supportsResponseStream && ((res) => res.body)
    };
    isFetchSupported && ((res) => {
      ["text", "arrayBuffer", "blob", "formData", "stream"].forEach((type2) => {
        !resolvers[type2] && (resolvers[type2] = utils$1.isFunction(res[type2]) ? (res2) => res2[type2]() : (_, config) => {
          throw new AxiosError(`Response type '${type2}' is not supported`, AxiosError.ERR_NOT_SUPPORT, config);
        });
      });
    })(new Response());
    var getBodyLength = async (body) => {
      if (body == null) {
        return 0;
      }
      if (utils$1.isBlob(body)) {
        return body.size;
      }
      if (utils$1.isSpecCompliantForm(body)) {
        const _request = new Request(platform.origin, {
          method: "POST",
          body
        });
        return (await _request.arrayBuffer()).byteLength;
      }
      if (utils$1.isArrayBufferView(body) || utils$1.isArrayBuffer(body)) {
        return body.byteLength;
      }
      if (utils$1.isURLSearchParams(body)) {
        body = body + "";
      }
      if (utils$1.isString(body)) {
        return (await encodeText(body)).byteLength;
      }
    };
    var resolveBodyLength = async (headers, body) => {
      const length = utils$1.toFiniteNumber(headers.getContentLength());
      return length == null ? getBodyLength(body) : length;
    };
    var fetchAdapter = isFetchSupported && (async (config) => {
      let {
        url,
        method: method2,
        data,
        signal,
        cancelToken,
        timeout,
        onDownloadProgress,
        onUploadProgress,
        responseType,
        headers,
        withCredentials = "same-origin",
        fetchOptions
      } = resolveConfig(config);
      responseType = responseType ? (responseType + "").toLowerCase() : "text";
      let composedSignal = composeSignals$1([signal, cancelToken && cancelToken.toAbortSignal()], timeout);
      let request;
      const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
        composedSignal.unsubscribe();
      });
      let requestContentLength;
      try {
        if (onUploadProgress && supportsRequestStream && method2 !== "get" && method2 !== "head" && (requestContentLength = await resolveBodyLength(headers, data)) !== 0) {
          let _request = new Request(url, {
            method: "POST",
            body: data,
            duplex: "half"
          });
          let contentTypeHeader;
          if (utils$1.isFormData(data) && (contentTypeHeader = _request.headers.get("content-type"))) {
            headers.setContentType(contentTypeHeader);
          }
          if (_request.body) {
            const [onProgress, flush] = progressEventDecorator(
              requestContentLength,
              progressEventReducer(asyncDecorator(onUploadProgress))
            );
            data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);
          }
        }
        if (!utils$1.isString(withCredentials)) {
          withCredentials = withCredentials ? "include" : "omit";
        }
        const isCredentialsSupported = "credentials" in Request.prototype;
        request = new Request(url, {
          ...fetchOptions,
          signal: composedSignal,
          method: method2.toUpperCase(),
          headers: headers.normalize().toJSON(),
          body: data,
          duplex: "half",
          credentials: isCredentialsSupported ? withCredentials : void 0
        });
        let response = await fetch(request);
        const isStreamResponse = supportsResponseStream && (responseType === "stream" || responseType === "response");
        if (supportsResponseStream && (onDownloadProgress || isStreamResponse && unsubscribe)) {
          const options = {};
          ["status", "statusText", "headers"].forEach((prop) => {
            options[prop] = response[prop];
          });
          const responseContentLength = utils$1.toFiniteNumber(response.headers.get("content-length"));
          const [onProgress, flush] = onDownloadProgress && progressEventDecorator(
            responseContentLength,
            progressEventReducer(asyncDecorator(onDownloadProgress), true)
          ) || [];
          response = new Response(
            trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
              flush && flush();
              unsubscribe && unsubscribe();
            }),
            options
          );
        }
        responseType = responseType || "text";
        let responseData = await resolvers[utils$1.findKey(resolvers, responseType) || "text"](response, config);
        !isStreamResponse && unsubscribe && unsubscribe();
        return await new Promise((resolve, reject) => {
          settle(resolve, reject, {
            data: responseData,
            headers: AxiosHeaders$1.from(response.headers),
            status: response.status,
            statusText: response.statusText,
            config,
            request
          });
        });
      } catch (err) {
        unsubscribe && unsubscribe();
        if (err && err.name === "TypeError" && /Load failed|fetch/i.test(err.message)) {
          throw Object.assign(
            new AxiosError("Network Error", AxiosError.ERR_NETWORK, config, request),
            {
              cause: err.cause || err
            }
          );
        }
        throw AxiosError.from(err, err && err.code, config, request);
      }
    });
    var knownAdapters = {
      http: httpAdapter,
      xhr: xhrAdapter,
      fetch: fetchAdapter
    };
    utils$1.forEach(knownAdapters, (fn, value) => {
      if (fn) {
        try {
          Object.defineProperty(fn, "name", { value });
        } catch (e) {
        }
        Object.defineProperty(fn, "adapterName", { value });
      }
    });
    var renderReason = (reason) => `- ${reason}`;
    var isResolvedHandle = (adapter) => utils$1.isFunction(adapter) || adapter === null || adapter === false;
    var adapters = {
      getAdapter: (adapters2) => {
        adapters2 = utils$1.isArray(adapters2) ? adapters2 : [adapters2];
        const { length } = adapters2;
        let nameOrAdapter;
        let adapter;
        const rejectedReasons = {};
        for (let i = 0; i < length; i++) {
          nameOrAdapter = adapters2[i];
          let id;
          adapter = nameOrAdapter;
          if (!isResolvedHandle(nameOrAdapter)) {
            adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];
            if (adapter === void 0) {
              throw new AxiosError(`Unknown adapter '${id}'`);
            }
          }
          if (adapter) {
            break;
          }
          rejectedReasons[id || "#" + i] = adapter;
        }
        if (!adapter) {
          const reasons = Object.entries(rejectedReasons).map(
            ([id, state]) => `adapter ${id} ` + (state === false ? "is not supported by the environment" : "is not available in the build")
          );
          let s = length ? reasons.length > 1 ? "since :\n" + reasons.map(renderReason).join("\n") : " " + renderReason(reasons[0]) : "as no adapter specified";
          throw new AxiosError(
            `There is no suitable adapter to dispatch the request ` + s,
            "ERR_NOT_SUPPORT"
          );
        }
        return adapter;
      },
      adapters: knownAdapters
    };
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
      if (config.signal && config.signal.aborted) {
        throw new CanceledError(null, config);
      }
    }
    function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = AxiosHeaders$1.from(config.headers);
      config.data = transformData.call(
        config,
        config.transformRequest
      );
      if (["post", "put", "patch"].indexOf(config.method) !== -1) {
        config.headers.setContentType("application/x-www-form-urlencoded", false);
      }
      const adapter = adapters.getAdapter(config.adapter || defaults$1.adapter);
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData.call(
          config,
          config.transformResponse,
          response
        );
        response.headers = AxiosHeaders$1.from(response.headers);
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config,
              config.transformResponse,
              reason.response
            );
            reason.response.headers = AxiosHeaders$1.from(reason.response.headers);
          }
        }
        return Promise.reject(reason);
      });
    }
    var VERSION = "1.9.0";
    var validators$1 = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach((type2, i) => {
      validators$1[type2] = function validator2(thing) {
        return typeof thing === type2 || "a" + (i < 1 ? "n " : " ") + type2;
      };
    });
    var deprecatedWarnings = {};
    validators$1.transitional = function transitional(validator2, version2, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return (value, opt, opts) => {
        if (validator2 === false) {
          throw new AxiosError(
            formatMessage(opt, " has been removed" + (version2 ? " in " + version2 : "")),
            AxiosError.ERR_DEPRECATED
          );
        }
        if (version2 && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(
            formatMessage(
              opt,
              " has been deprecated since v" + version2 + " and will be removed in the near future"
            )
          );
        }
        return validator2 ? validator2(value, opt, opts) : true;
      };
    };
    validators$1.spelling = function spelling(correctSpelling) {
      return (value, opt) => {
        console.warn(`${opt} is likely a misspelling of ${correctSpelling}`);
        return true;
      };
    };
    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== "object") {
        throw new AxiosError("options must be an object", AxiosError.ERR_BAD_OPTION_VALUE);
      }
      const keys = Object.keys(options);
      let i = keys.length;
      while (i-- > 0) {
        const opt = keys[i];
        const validator2 = schema[opt];
        if (validator2) {
          const value = options[opt];
          const result = value === void 0 || validator2(value, opt, options);
          if (result !== true) {
            throw new AxiosError("option " + opt + " must be " + result, AxiosError.ERR_BAD_OPTION_VALUE);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw new AxiosError("Unknown option " + opt, AxiosError.ERR_BAD_OPTION);
        }
      }
    }
    var validator = {
      assertOptions,
      validators: validators$1
    };
    var validators = validator.validators;
    var Axios = class {
      constructor(instanceConfig) {
        this.defaults = instanceConfig || {};
        this.interceptors = {
          request: new InterceptorManager$1(),
          response: new InterceptorManager$1()
        };
      }
      /**
       * Dispatch a request
       *
       * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
       * @param {?Object} config
       *
       * @returns {Promise} The Promise to be fulfilled
       */
      async request(configOrUrl, config) {
        try {
          return await this._request(configOrUrl, config);
        } catch (err) {
          if (err instanceof Error) {
            let dummy = {};
            Error.captureStackTrace ? Error.captureStackTrace(dummy) : dummy = new Error();
            const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, "") : "";
            try {
              if (!err.stack) {
                err.stack = stack;
              } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ""))) {
                err.stack += "\n" + stack;
              }
            } catch (e) {
            }
          }
          throw err;
        }
      }
      _request(configOrUrl, config) {
        if (typeof configOrUrl === "string") {
          config = config || {};
          config.url = configOrUrl;
        } else {
          config = configOrUrl || {};
        }
        config = mergeConfig(this.defaults, config);
        const { transitional, paramsSerializer, headers } = config;
        if (transitional !== void 0) {
          validator.assertOptions(transitional, {
            silentJSONParsing: validators.transitional(validators.boolean),
            forcedJSONParsing: validators.transitional(validators.boolean),
            clarifyTimeoutError: validators.transitional(validators.boolean)
          }, false);
        }
        if (paramsSerializer != null) {
          if (utils$1.isFunction(paramsSerializer)) {
            config.paramsSerializer = {
              serialize: paramsSerializer
            };
          } else {
            validator.assertOptions(paramsSerializer, {
              encode: validators.function,
              serialize: validators.function
            }, true);
          }
        }
        if (config.allowAbsoluteUrls !== void 0) ;
        else if (this.defaults.allowAbsoluteUrls !== void 0) {
          config.allowAbsoluteUrls = this.defaults.allowAbsoluteUrls;
        } else {
          config.allowAbsoluteUrls = true;
        }
        validator.assertOptions(config, {
          baseUrl: validators.spelling("baseURL"),
          withXsrfToken: validators.spelling("withXSRFToken")
        }, true);
        config.method = (config.method || this.defaults.method || "get").toLowerCase();
        let contextHeaders = headers && utils$1.merge(
          headers.common,
          headers[config.method]
        );
        headers && utils$1.forEach(
          ["delete", "get", "head", "post", "put", "patch", "common"],
          (method2) => {
            delete headers[method2];
          }
        );
        config.headers = AxiosHeaders$1.concat(contextHeaders, headers);
        const requestInterceptorChain = [];
        let synchronousRequestInterceptors = true;
        this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
          if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
            return;
          }
          synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
          requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
        });
        const responseInterceptorChain = [];
        this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
          responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
        });
        let promise;
        let i = 0;
        let len;
        if (!synchronousRequestInterceptors) {
          const chain = [dispatchRequest.bind(this), void 0];
          chain.unshift.apply(chain, requestInterceptorChain);
          chain.push.apply(chain, responseInterceptorChain);
          len = chain.length;
          promise = Promise.resolve(config);
          while (i < len) {
            promise = promise.then(chain[i++], chain[i++]);
          }
          return promise;
        }
        len = requestInterceptorChain.length;
        let newConfig = config;
        i = 0;
        while (i < len) {
          const onFulfilled = requestInterceptorChain[i++];
          const onRejected = requestInterceptorChain[i++];
          try {
            newConfig = onFulfilled(newConfig);
          } catch (error) {
            onRejected.call(this, error);
            break;
          }
        }
        try {
          promise = dispatchRequest.call(this, newConfig);
        } catch (error) {
          return Promise.reject(error);
        }
        i = 0;
        len = responseInterceptorChain.length;
        while (i < len) {
          promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
        }
        return promise;
      }
      getUri(config) {
        config = mergeConfig(this.defaults, config);
        const fullPath = buildFullPath(config.baseURL, config.url, config.allowAbsoluteUrls);
        return buildURL(fullPath, config.params, config.paramsSerializer);
      }
    };
    utils$1.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method2) {
      Axios.prototype[method2] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method: method2,
          url,
          data: (config || {}).data
        }));
      };
    });
    utils$1.forEach(["post", "put", "patch"], function forEachMethodWithData(method2) {
      function generateHTTPMethod(isForm) {
        return function httpMethod(url, data, config) {
          return this.request(mergeConfig(config || {}, {
            method: method2,
            headers: isForm ? {
              "Content-Type": "multipart/form-data"
            } : {},
            url,
            data
          }));
        };
      }
      Axios.prototype[method2] = generateHTTPMethod();
      Axios.prototype[method2 + "Form"] = generateHTTPMethod(true);
    });
    var Axios$1 = Axios;
    var CancelToken = class _CancelToken {
      constructor(executor) {
        if (typeof executor !== "function") {
          throw new TypeError("executor must be a function.");
        }
        let resolvePromise;
        this.promise = new Promise(function promiseExecutor(resolve) {
          resolvePromise = resolve;
        });
        const token = this;
        this.promise.then((cancel) => {
          if (!token._listeners) return;
          let i = token._listeners.length;
          while (i-- > 0) {
            token._listeners[i](cancel);
          }
          token._listeners = null;
        });
        this.promise.then = (onfulfilled) => {
          let _resolve;
          const promise = new Promise((resolve) => {
            token.subscribe(resolve);
            _resolve = resolve;
          }).then(onfulfilled);
          promise.cancel = function reject() {
            token.unsubscribe(_resolve);
          };
          return promise;
        };
        executor(function cancel(message, config, request) {
          if (token.reason) {
            return;
          }
          token.reason = new CanceledError(message, config, request);
          resolvePromise(token.reason);
        });
      }
      /**
       * Throws a `CanceledError` if cancellation has been requested.
       */
      throwIfRequested() {
        if (this.reason) {
          throw this.reason;
        }
      }
      /**
       * Subscribe to the cancel signal
       */
      subscribe(listener) {
        if (this.reason) {
          listener(this.reason);
          return;
        }
        if (this._listeners) {
          this._listeners.push(listener);
        } else {
          this._listeners = [listener];
        }
      }
      /**
       * Unsubscribe from the cancel signal
       */
      unsubscribe(listener) {
        if (!this._listeners) {
          return;
        }
        const index = this._listeners.indexOf(listener);
        if (index !== -1) {
          this._listeners.splice(index, 1);
        }
      }
      toAbortSignal() {
        const controller = new AbortController();
        const abort = (err) => {
          controller.abort(err);
        };
        this.subscribe(abort);
        controller.signal.unsubscribe = () => this.unsubscribe(abort);
        return controller.signal;
      }
      /**
       * Returns an object that contains a new `CancelToken` and a function that, when called,
       * cancels the `CancelToken`.
       */
      static source() {
        let cancel;
        const token = new _CancelToken(function executor(c) {
          cancel = c;
        });
        return {
          token,
          cancel
        };
      }
    };
    var CancelToken$1 = CancelToken;
    function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    }
    function isAxiosError(payload) {
      return utils$1.isObject(payload) && payload.isAxiosError === true;
    }
    var HttpStatusCode = {
      Continue: 100,
      SwitchingProtocols: 101,
      Processing: 102,
      EarlyHints: 103,
      Ok: 200,
      Created: 201,
      Accepted: 202,
      NonAuthoritativeInformation: 203,
      NoContent: 204,
      ResetContent: 205,
      PartialContent: 206,
      MultiStatus: 207,
      AlreadyReported: 208,
      ImUsed: 226,
      MultipleChoices: 300,
      MovedPermanently: 301,
      Found: 302,
      SeeOther: 303,
      NotModified: 304,
      UseProxy: 305,
      Unused: 306,
      TemporaryRedirect: 307,
      PermanentRedirect: 308,
      BadRequest: 400,
      Unauthorized: 401,
      PaymentRequired: 402,
      Forbidden: 403,
      NotFound: 404,
      MethodNotAllowed: 405,
      NotAcceptable: 406,
      ProxyAuthenticationRequired: 407,
      RequestTimeout: 408,
      Conflict: 409,
      Gone: 410,
      LengthRequired: 411,
      PreconditionFailed: 412,
      PayloadTooLarge: 413,
      UriTooLong: 414,
      UnsupportedMediaType: 415,
      RangeNotSatisfiable: 416,
      ExpectationFailed: 417,
      ImATeapot: 418,
      MisdirectedRequest: 421,
      UnprocessableEntity: 422,
      Locked: 423,
      FailedDependency: 424,
      TooEarly: 425,
      UpgradeRequired: 426,
      PreconditionRequired: 428,
      TooManyRequests: 429,
      RequestHeaderFieldsTooLarge: 431,
      UnavailableForLegalReasons: 451,
      InternalServerError: 500,
      NotImplemented: 501,
      BadGateway: 502,
      ServiceUnavailable: 503,
      GatewayTimeout: 504,
      HttpVersionNotSupported: 505,
      VariantAlsoNegotiates: 506,
      InsufficientStorage: 507,
      LoopDetected: 508,
      NotExtended: 510,
      NetworkAuthenticationRequired: 511
    };
    Object.entries(HttpStatusCode).forEach(([key, value]) => {
      HttpStatusCode[value] = key;
    });
    var HttpStatusCode$1 = HttpStatusCode;
    function createInstance(defaultConfig) {
      const context = new Axios$1(defaultConfig);
      const instance2 = bind(Axios$1.prototype.request, context);
      utils$1.extend(instance2, Axios$1.prototype, context, { allOwnKeys: true });
      utils$1.extend(instance2, context, null, { allOwnKeys: true });
      instance2.create = function create2(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };
      return instance2;
    }
    var axios = createInstance(defaults$1);
    axios.Axios = Axios$1;
    axios.CanceledError = CanceledError;
    axios.CancelToken = CancelToken$1;
    axios.isCancel = isCancel;
    axios.VERSION = VERSION;
    axios.toFormData = toFormData;
    axios.AxiosError = AxiosError;
    axios.Cancel = axios.CanceledError;
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = spread;
    axios.isAxiosError = isAxiosError;
    axios.mergeConfig = mergeConfig;
    axios.AxiosHeaders = AxiosHeaders$1;
    axios.formToJSON = (thing) => formDataToJSON(utils$1.isHTMLForm(thing) ? new FormData(thing) : thing);
    axios.getAdapter = adapters.getAdapter;
    axios.HttpStatusCode = HttpStatusCode$1;
    axios.default = axios;
    module2.exports = axios;
  }
});

// node_modules/navi-sdk/dist/libs/PoolInfo/index.js
var require_PoolInfo = __commonJS({
  "node_modules/navi-sdk/dist/libs/PoolInfo/index.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault2 = exports2 && exports2.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fetchFlashloanData = exports2.fetchPoolData = void 0;
    exports2.getPoolInfo = getPoolInfo;
    exports2.getLatestProtocolPackageId = getLatestProtocolPackageId;
    exports2.getUserRewardHistory = getUserRewardHistory;
    exports2.getPoolsInfo = getPoolsInfo;
    exports2.fetchCoinPrices = fetchCoinPrices;
    var axios_1 = __importDefault2(require_axios());
    var address_1 = require_address();
    var client_1 = require_client4();
    var fetchPoolData = (_a) => __awaiter2(void 0, [_a], void 0, function* ({ poolId, client, reserveParentId, poolInfo }) {
      var _b, _c, _d, _e, _f, _g;
      const poolData = poolInfo[poolId];
      const result = yield client.getDynamicFieldObject({ parentId: reserveParentId, name: { type: "u8", value: poolId } });
      const filedsData = (_e = (_d = (_c = (_b = result.data) === null || _b === void 0 ? void 0 : _b.content) === null || _c === void 0 ? void 0 : _c.fields) === null || _d === void 0 ? void 0 : _d.value) === null || _e === void 0 ? void 0 : _e.fields;
      const total_supply_with_index = poolData.total_supply * filedsData.current_supply_index / 1e27;
      const total_borrow_with_index = poolData.total_borrow * filedsData.current_borrow_index / 1e27;
      return {
        coin_type: poolData.coin_type,
        total_supply: total_supply_with_index,
        total_borrow: total_borrow_with_index,
        tokenPrice: poolData.price,
        base_supply_rate: poolData.supply_rate,
        base_borrow_rate: poolData.borrow_rate,
        boosted_supply_rate: poolData.boosted,
        boosted_borrow_rate: poolData.borrow_reward_apy,
        supply_cap_ceiling: Number(filedsData.supply_cap_ceiling / 1e36),
        borrow_cap_ceiling: Number((filedsData.borrow_cap_ceiling / 1e27).toFixed(2)) * poolData.total_supply,
        current_supply_utilization: total_supply_with_index / Number(filedsData.supply_cap_ceiling / 1e36),
        current_borrow_utilization: total_borrow_with_index / (Number((filedsData.borrow_cap_ceiling / 1e27).toFixed(2)) * poolData.total_supply),
        optimal_borrow_utilization: (Number((_g = (_f = filedsData.borrow_rate_factors) === null || _f === void 0 ? void 0 : _f.fields) === null || _g === void 0 ? void 0 : _g.optimal_utilization) / 1e27).toFixed(2),
        pool: poolData.pool,
        max_ltv: (Number(filedsData.ltv) / 1e27).toFixed(2),
        liquidation_threshold: (Number(filedsData.liquidation_factors.fields.threshold) / 1e27).toFixed(2),
        symbol: poolData.symbol,
        rewardTokenAddress: poolData.rewardTokens
      };
    });
    exports2.fetchPoolData = fetchPoolData;
    var fetchFlashloanData = (client) => __awaiter2(void 0, void 0, void 0, function* () {
      const config = yield (0, address_1.getConfig)();
      const result = yield client.getDynamicFields({
        parentId: config.flashloanSupportedAssets
      });
      const resultList = {};
      yield Promise.all(result.data.map((item) => __awaiter2(void 0, void 0, void 0, function* () {
        var _a, _b, _c, _d;
        const result2 = yield client.getObject({
          id: item.objectId,
          options: {
            showContent: true
          }
        });
        const fields = (_d = (_c = (_b = (_a = result2.data) === null || _a === void 0 ? void 0 : _a.content) === null || _b === void 0 ? void 0 : _b.fields) === null || _c === void 0 ? void 0 : _c.value) === null || _d === void 0 ? void 0 : _d.fields;
        const coin_type = fields === null || fields === void 0 ? void 0 : fields.coin_type;
        if (coin_type) {
          const hexCoinType = "0x" + coin_type;
          resultList[hexCoinType] = {
            max: fields.max,
            min: fields.min,
            assetId: fields.asset_id,
            poolId: fields.pool_id,
            supplierFee: Number(fields.rate_to_supplier) / 1e4,
            flashloanFee: Number(fields.rate_to_treasury) / 1e4
          };
        }
      })));
      return resultList;
    });
    exports2.fetchFlashloanData = fetchFlashloanData;
    function getPoolInfo(coin, client) {
      return __awaiter2(this, void 0, void 0, function* () {
        if (!client) {
          client = new client_1.SuiClient({
            url: (0, client_1.getFullnodeUrl)("mainnet")
          });
        }
        try {
          const response = yield axios_1.default.get("https://api-defi.naviprotocol.io/getIndexAssetData");
          const poolInfo = response.data;
          const config = yield (0, address_1.getConfig)();
          const poolResults = {};
          if (coin) {
            const pool_real = address_1.pool[coin.symbol];
            const poolId = String(pool_real.assetId);
            return yield (0, exports2.fetchPoolData)({ poolId, reserveParentId: config.ReserveParentId, client, poolInfo });
          } else {
            for (const poolId in poolInfo) {
              if (poolInfo.hasOwnProperty(poolId)) {
                poolResults[poolId] = yield (0, exports2.fetchPoolData)({ poolId, reserveParentId: config.ReserveParentId, client, poolInfo });
              }
            }
            return poolResults;
          }
        } catch (error) {
          console.error("Error fetching pool information:", error);
          throw error;
        }
      });
    }
    function getLatestProtocolPackageId() {
      return __awaiter2(this, void 0, void 0, function* () {
        const apiUrl = "https://open-api.naviprotocol.io/api/package";
        try {
          const response = yield fetch(apiUrl);
          if (!response.ok) {
            throw new Error(`API call failed with status ${response.status}`);
          }
          const data = yield response.json();
          return data.packageId;
        } catch (error) {
          console.error("Failed to update ProtocolPackage:");
          return "";
        }
      });
    }
    function getUserRewardHistory(userAddress_1) {
      return __awaiter2(this, arguments, void 0, function* (userAddress, page = 1, size = 400) {
        var _a, _b;
        const endpoint2 = `https://open-api.naviprotocol.io/api/navi/user/rewards?userAddress=${userAddress}&page=${page}&pageSize=${size}`;
        console.log(endpoint2);
        try {
          const response = yield axios_1.default.get(endpoint2);
          const rewards = ((_b = (_a = response.data) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.rewards) || [];
          return rewards;
        } catch (error) {
          console.error("Error fetching user reward history:", error);
          throw error;
        }
      });
    }
    function getPoolsInfo() {
      return __awaiter2(this, void 0, void 0, function* () {
        const poolInfoUrl = `https://open-api.naviprotocol.io/api/navi/pools`;
        try {
          const response = yield axios_1.default.get(poolInfoUrl);
          if (response.data.code === 0) {
            return response.data.data;
          } else {
            return null;
          }
        } catch (error) {
          console.error("Error fetching pools information:", error);
          return null;
        }
      });
    }
    function fetchCoinPrices(coinTypes_1) {
      return __awaiter2(this, arguments, void 0, function* (coinTypes, isInternal = false, Token, maxRetries = 3, delayTime = 1e3) {
        if (coinTypes.length === 0) {
          console.warn("No coin types provided.");
          return null;
        }
        let API_URL = "https://open-aggregator-api.naviprotocol.io/coins/price";
        if (isInternal) {
          API_URL = "https://aggregator-api.naviprotocol.io/coins/price";
        }
        const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
        const fetchChunk = (chunk) => __awaiter2(this, void 0, void 0, function* () {
          const attemptFetch = (retries) => __awaiter2(this, void 0, void 0, function* () {
            try {
              const url = `${API_URL}?coinType=${chunk.join(",")}`;
              const headers = {};
              if (!isInternal && Token) {
                headers["x-navi-token"] = Token;
              }
              const response = yield fetch(url, { method: "GET", headers });
              if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
              }
              const jsonData = yield response.json();
              const adjustedPrices = jsonData.data.list.map((price) => {
                if (price.coinType === "0x2::sui::SUI") {
                  return Object.assign(Object.assign({}, price), { coinType: "0x0000000000000000000000000000000000000000000000000000000000000002::sui::SUI" });
                }
                return price;
              });
              return adjustedPrices;
            } catch (error) {
              if (retries <= 0) {
                console.error("Failed to fetch coin prices after multiple attempts:", error);
                return null;
              }
              console.warn(`Attempt failed for chunk, retrying... (${maxRetries - retries + 1}/${maxRetries})`);
              yield delay(delayTime);
              return attemptFetch(retries - 1);
            }
          });
          return attemptFetch(maxRetries);
        });
        const chunkSize = 10;
        const chunkPromises = [];
        for (let i = 0; i < coinTypes.length; i += chunkSize) {
          const chunk = coinTypes.slice(i, i + chunkSize);
          chunkPromises.push(fetchChunk(chunk));
        }
        const chunkResults = yield Promise.all(chunkPromises);
        const results = [];
        for (const chunkResult of chunkResults) {
          if (chunkResult) {
            results.push(...chunkResult);
          }
        }
        return results;
      });
    }
  }
});

// node_modules/navi-sdk/dist/address.js
var require_address = __commonJS({
  "node_modules/navi-sdk/dist/address.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.noDepositCoinType = exports2.ProFundsPoolInfo = exports2.OracleProConfig = exports2.PriceFeedConfig = exports2.vSuiConfig = exports2.WAL = exports2.LBTC = exports2.WSOL = exports2.suiBTC = exports2.stSUI = exports2.suiUSDT = exports2.BUCK = exports2.BLUE = exports2.FDUSD = exports2.DEEP = exports2.LorenzoBTC = exports2.NS = exports2.USDY = exports2.ETH = exports2.nUSDC = exports2.wUSDC = exports2.AUSD = exports2.WBTC = exports2.haSui = exports2.CETUS = exports2.WETH = exports2.USDT = exports2.vSui = exports2.Sui = exports2.NAVX = exports2.flashloanConfig = exports2.pool = exports2.getConfig = exports2.AddressMap = exports2.defaultProtocolPackage = void 0;
    exports2.getPackageCache = getPackageCache;
    exports2.isPackageCacheExpired = isPackageCacheExpired;
    exports2.setPackageCache = setPackageCache;
    var index_1 = require_PoolInfo();
    var globalPackageId;
    var globalPackageIdExpireAt;
    var cacheUpdatePromise = null;
    exports2.defaultProtocolPackage = "0x81c408448d0d57b3e371ea94de1d40bf852784d3e225de1e74acab3e8395c18f";
    exports2.AddressMap = {
      "0x2::sui::SUI": "Sui",
      "0xa99b8952d4f7d947ea77fe0ecdcc9e5fc0bcab2841d6e2a5aa00c3044e5544b5::navx::NAVX": "NAVX",
      "0x549e8b69270defbfafd4f94e17ec44cdbdd99820b33bda2278dea3b9a32d3f55::cert::CERT": "vSui",
      "0x5d4b302506645c37ff133b98c4b50a5ae14841659738d6d733d59d0d217a93bf::coin::COIN": "wUSDC",
      //wormhole usdc
      "0xc060006111016b8a020ad5b33834984a437aaa7d3c74c18e09a95d48aceab08c::coin::COIN": "USDT",
      "0xaf8cd5edc19c4512f4259f0bee101a40d41ebed738ade5874359610ef8eeced5::coin::COIN": "WETH",
      "0x06864a6f921804860930db6ddbe2e16acdf8504495ea7481637a1c8b9a8fe54b::cetus::CETUS": "CETUS",
      "0xbde4ba4c2e274a60ce15c1cfff9e5c42e41654ac8b6d906a57efa4bd3c29f47d::hasui::HASUI": "haSui",
      "0x027792d9fed7f9844eb4839566001bb6f6cb4804f66aa2da6fe1ee242d896881::coin::COIN": "WBTC",
      "0x2053d08c1e2bd02791056171aab0fd12bd7cd7efad2ab8f6b9c8902f14df2ff2::ausd::AUSD": "AUSD",
      "0xdba34672e30cb065b1f93e3ab55318768fd6fef66c15942c9f7cb846e2f900e7::usdc::USDC": "nUSDC",
      "0xd0e89b2af5e4910726fbcd8b8dd37bb79b29e5f83f7491bca830e94f7f226d29::eth::ETH": "ETH",
      // native eth
      "0x960b531667636f39e85867775f52f6b1f220a058c4de786905bdf761e06a56bb::usdy::USDY": "USDY",
      "0x5145494a5f5100e645e4b0aa950fa6b68f614e8c59e17bc5ded3495123a79178::ns::NS": "NS",
      "0x5f496ed5d9d045c5b788dc1bb85f54100f2ede11e46f6a232c29daada4c5bdb6::coin::COIN": "stBTC",
      "0xdeeb7a4662eec9f2f3def03fb937a663dddaa2e215b8078a284d026b7946c270::deep::DEEP": "DEEP",
      "0xf16e6b723f242ec745dfd7634ad072c42d5c1d9ac9d62a39c381303eaa57693a::fdusd::FDUSD": "FDUSD",
      "0xe1b45a0e641b9955a20aa0ad1c1f4ad86aad8afb07296d4085e349a50e90bdca::blue::BLUE": "BLUE",
      "0xce7ff77a83ea0cb6fd39bd8748e2ec89a3f41e8efdc3f4eb123e0ca37b184db2::buck::BUCK": "BUCK",
      "0x375f70cf2ae4c00bf37117d0c85a2c71545e6ee05c4a5c7d282cd66a4504b068::usdt::USDT": "suiUSDT",
      "0xd1b72982e40348d069bb1ff701e634c117bb5f741f44dff91e472d3b01461e55::stsui::STSUI": "stSUI",
      "0xaafb102dd0902f5055cadecd687fb5b71ca82ef0e0285d90afde828ec58ca96b::btc::BTC": "suiBTC",
      "0xb7844e289a8410e50fb3ca48d69eb9cf29e27d223ef90353fe1bd8e27ff8f3f8::coin::COIN": "WSOL",
      "0x3e8e9423d80e1774a7ca128fccd8bf5f1f7753be658c5e645929037f7c819040::lbtc::LBTC": "LBTC",
      "0x356a26eb9e012a68958082340d4c4116e7f55615cf27affcff209cf0ae544f59::wal::WAL": "WAL"
    };
    function getPackageCache() {
      return globalPackageId || exports2.defaultProtocolPackage;
    }
    function isPackageCacheExpired() {
      if (!globalPackageIdExpireAt || globalPackageIdExpireAt < Date.now()) {
        return true;
      }
      return false;
    }
    function setPackageCache() {
      return __awaiter2(this, arguments, void 0, function* (expirationLength = 3600) {
        const id = yield (0, index_1.getLatestProtocolPackageId)();
        if (!id) {
          return;
        }
        globalPackageId = yield (0, index_1.getLatestProtocolPackageId)();
        globalPackageIdExpireAt = Date.now() + expirationLength * 1e3;
      });
    }
    function updateCacheIfNeeded() {
      return __awaiter2(this, void 0, void 0, function* () {
        if (isPackageCacheExpired() && !cacheUpdatePromise) {
          cacheUpdatePromise = setPackageCache();
          yield cacheUpdatePromise;
          cacheUpdatePromise = null;
        } else if (cacheUpdatePromise) {
          yield cacheUpdatePromise;
        }
      });
    }
    var getConfig = () => __awaiter2(void 0, void 0, void 0, function* () {
      yield updateCacheIfNeeded();
      const protocolPackage = getPackageCache();
      return {
        ProtocolPackage: protocolPackage,
        StorageId: "0xbb4e2f4b6205c2e2a2db47aeb4f830796ec7c005f88537ee775986639bc442fe",
        IncentiveV2: "0xf87a8acb8b81d14307894d12595541a73f19933f88e1326d5be349c7a6f7559c",
        // The new incentive version: V2
        IncentiveV3: "0x62982dad27fb10bb314b3384d5de8d2ac2d72ab2dbeae5d801dbdb9efa816c80",
        // The new incentive version: V3
        PriceOracle: "0x1568865ed9a0b5ec414220e8f79b3d04c77acc82358f6e5ae4635687392ffbef",
        ReserveParentId: "0xe6d4c6610b86ce7735ea754596d71d72d10c7980b5052fc3c8cdf8d09fea9b4b",
        // get it from storage object id. storage.reserves
        uiGetter: "0x9fc07f422912997425114d97ccdfd4ff31b7d1f1b314cd41b57f5cb3697cedab",
        flashloanConfig: "0x3672b2bf471a60c30a03325f104f92fb195c9d337ba58072dce764fe2aa5e2dc",
        flashloanSupportedAssets: "0x6c8fc404b4f22443302bbcc50ee593e5b898cc1e6755d72af0a6aab5a7a6f6d3"
      };
    });
    exports2.getConfig = getConfig;
    exports2.pool = {
      Sui: {
        name: "SUI",
        assetId: 0,
        poolId: "0x96df0fce3c471489f4debaaa762cf960b3d97820bd1f3f025ff8190730e958c5",
        type: "0x2::sui::SUI",
        reserveObjectId: "0xab644b5fd11aa11e930d1c7bc903ef609a9feaf9ffe1b23532ad8441854fbfaf",
        borrowBalanceParentId: "0xe7ff0daa9d090727210abe6a8b6c0c5cd483f3692a10610386e4dc9c57871ba7",
        supplyBalanceParentId: "0x589c83af4b035a3bc64c40d9011397b539b97ea47edf7be8f33d643606bf96f8",
        rewardFundId: ""
      },
      USDT: {
        name: "USDT",
        assetId: 2,
        poolId: "0x0e060c3b5b8de00fb50511b7a45188c8e34b6995c01f69d98ea5a466fe10d103",
        type: "0xc060006111016b8a020ad5b33834984a437aaa7d3c74c18e09a95d48aceab08c::coin::COIN",
        reserveObjectId: "0xb8c5eab02a0202f638958cc79a69a2d30055565caad1684b3c8bbca3bddcb322",
        borrowBalanceParentId: "0xc14d8292a7d69ae31164bafab7ca8a5bfda11f998540fe976a674ed0673e448f",
        supplyBalanceParentId: "0x7e2a49ff9d2edd875f82b76a9b21e2a5a098e7130abfd510a203b6ea08ab9257",
        rewardFundId: ""
      },
      WETH: {
        name: "WETH",
        assetId: 3,
        poolId: "0x71b9f6e822c48ce827bceadce82201d6a7559f7b0350ed1daa1dc2ba3ac41b56",
        type: "0xaf8cd5edc19c4512f4259f0bee101a40d41ebed738ade5874359610ef8eeced5::coin::COIN",
        reserveObjectId: "0xafecf4b57899d377cc8c9de75854c68925d9f512d0c47150ca52a0d3a442b735",
        borrowBalanceParentId: "0x7568d06a1b6ffc416a36c82791e3daf0e621cf19d4a2724fc6f74842661b6323",
        supplyBalanceParentId: "0xa668905b1ad445a3159b4d29b1181c4a62d864861b463dd9106cc0d97ffe8f7f",
        rewardFundId: ""
      },
      CETUS: {
        name: "CETUS",
        assetId: 4,
        poolId: "0x3c376f857ec4247b8ee456c1db19e9c74e0154d4876915e54221b5052d5b1e2e",
        type: "0x06864a6f921804860930db6ddbe2e16acdf8504495ea7481637a1c8b9a8fe54b::cetus::CETUS",
        reserveObjectId: "0x66a807c06212537fe46aa6719a00e4fa1e85a932d0b53ce7c4b1041983645133",
        borrowBalanceParentId: "0x4c3da45ffff6432b4592a39cdb3ce12f4a28034cbcb804bb071facc81fdd923d",
        supplyBalanceParentId: "0x6adc72faf2a9a15a583c9fb04f457c6a5f0b456bc9b4832413a131dfd4faddae",
        rewardFundId: ""
      },
      vSui: {
        name: "VoloSui",
        assetId: 5,
        poolId: "0x9790c2c272e15b6bf9b341eb531ef16bcc8ed2b20dfda25d060bf47f5dd88d01",
        type: "0x549e8b69270defbfafd4f94e17ec44cdbdd99820b33bda2278dea3b9a32d3f55::cert::CERT",
        reserveObjectId: "0xd4fd7e094af9819b06ea3136c13a6ae8da184016b78cf19773ac26d2095793e2",
        borrowBalanceParentId: "0x8fa5eccbca2c4ba9aae3b87fd44aa75aa5f5b41ea2d9be4d5321379384974984",
        supplyBalanceParentId: "0xe6457d247b6661b1cac123351998f88f3e724ff6e9ea542127b5dcb3176b3841",
        rewardFundId: "0x7093cf7549d5e5b35bfde2177223d1050f71655c7f676a5e610ee70eb4d93b5c"
      },
      haSui: {
        name: "HaedalSui",
        assetId: 6,
        poolId: "0x6fd9cb6ebd76bc80340a9443d72ea0ae282ee20e2fd7544f6ffcd2c070d9557a",
        type: "0xbde4ba4c2e274a60ce15c1cfff9e5c42e41654ac8b6d906a57efa4bd3c29f47d::hasui::HASUI",
        reserveObjectId: "0x0c9f7a6ca561dc566bd75744bcc71a6af1dc3caf7bd32c099cd640bb5f3bb0e3",
        borrowBalanceParentId: "0x01f36898e020be6c3423e5c95d9f348868813cd4d0be39b0c8df9d8de4722b00",
        supplyBalanceParentId: "0x278b8e3d09c3548c60c51ed2f8eed281876ea58c392f71b7ff650cc9286d095b",
        rewardFundId: ""
      },
      NAVX: {
        name: "NAVX",
        assetId: 7,
        poolId: "0xc0e02e7a245e855dd365422faf76f87d9f5b2148a26d48dda6e8253c3fe9fa60",
        type: "0xa99b8952d4f7d947ea77fe0ecdcc9e5fc0bcab2841d6e2a5aa00c3044e5544b5::navx::NAVX",
        reserveObjectId: "0x2e13b2f1f714c0c5fa72264f147ef7632b48ec2501f810c07df3ccb59d6fdc81",
        borrowBalanceParentId: "0xa5bf13075aa400cbdd4690a617c5f008e1fae0511dcd4f7121f09817df6c8d8b",
        supplyBalanceParentId: "0x59dedca8dc44e8df50b190f8b5fe673098c1273ac6168c0a4addf3613afcdee5",
        rewardFundId: "0x1a3f9fcfdfac10e92c99220203f7c4bb502558692f0be0f2cb5f788b4e12a6b5"
      },
      WBTC: {
        name: "WBTC",
        assetId: 8,
        poolId: "0xd162cbe40f8829ce71c9b3d3bf3a83859689a79fa220b23d70dc0300b777ae6e",
        type: "0x027792d9fed7f9844eb4839566001bb6f6cb4804f66aa2da6fe1ee242d896881::coin::COIN",
        reserveObjectId: "0x8b4d81f004e4e9faf4540951a896b6d96e42598a270e6375f598b99742db767e",
        borrowBalanceParentId: "0x55e1f3c9e6e5cf9fff563bdd61db07a3826458c56ef72c455e049ab3b1b0e99c",
        supplyBalanceParentId: "0x821e505a0091b089edba94deaa14c2f2230d026bbaa7b85680554441aad447e0",
        rewardFundId: ""
      },
      AUSD: {
        name: "AUSD",
        assetId: 9,
        poolId: "0xc9208c1e75f990b2c814fa3a45f1bf0e85bb78404cfdb2ae6bb97de58bb30932",
        type: "0x2053d08c1e2bd02791056171aab0fd12bd7cd7efad2ab8f6b9c8902f14df2ff2::ausd::AUSD",
        reserveObjectId: "0x918889c6a9d9b93108531d4d59a4ebb9cc4d41689798ffc1d4aed6e1ae816ec0",
        borrowBalanceParentId: "0x551300b9441c9a3a16ca1d7972c1dbb4715e15004ccd5f001b2c2eee22fd92c1",
        supplyBalanceParentId: "0xe151af690355de8be1c0281fbd0d483c099ea51920a57c4bf8c9666fd36808fd",
        rewardFundId: ""
      },
      wUSDC: {
        name: "wUSDC",
        assetId: 1,
        poolId: "0xa02a98f9c88db51c6f5efaaf2261c81f34dd56d86073387e0ef1805ca22e39c8",
        type: "0x5d4b302506645c37ff133b98c4b50a5ae14841659738d6d733d59d0d217a93bf::coin::COIN",
        reserveObjectId: "0xeb3903f7748ace73429bd52a70fff278aac1725d3b58afa781f25ce3450ac203",
        borrowBalanceParentId: "0x8a3aaa817a811131c624658f6e77cba04ab5829293d2c49c1a9cce8ac9c8dec4",
        supplyBalanceParentId: "0x8d0a4467806458052d577c8cd2be6031e972f2b8f5f77fce98aa12cd85330da9",
        rewardFundId: ""
      },
      nUSDC: {
        name: "nUSDC",
        assetId: 10,
        poolId: "0xa3582097b4c57630046c0c49a88bfc6b202a3ec0a9db5597c31765f7563755a8",
        type: "0xdba34672e30cb065b1f93e3ab55318768fd6fef66c15942c9f7cb846e2f900e7::usdc::USDC",
        reserveObjectId: "0x4c8a2c72a22ae8da803a8519798d312c86e74a9e0d6ec0eec2bfcf7e4b3fef5e",
        borrowBalanceParentId: "0xb0b0c7470e96cabbb4f1e8d06bef2fbea65f4dbac52afae8635d9286b1ea9a09",
        supplyBalanceParentId: "0x08b5ce8574ac3bc9327e66ad5decd34d07ee798f724ad01058e8855ac9acb605",
        rewardFundId: ""
      },
      ETH: {
        name: "ETH",
        assetId: 11,
        poolId: "0x78ba01c21d8301be15690d3c30dc9f111871e38cfb0b2dd4b70cc6052fba41bb",
        type: "0xd0e89b2af5e4910726fbcd8b8dd37bb79b29e5f83f7491bca830e94f7f226d29::eth::ETH",
        reserveObjectId: "0x376faea6dfbffab9ea808474cb751d91222b6d664f38c0f1d23de442a8edb1ce",
        borrowBalanceParentId: "0xf0c6ce5cfaee96073876a5fab7426043f3a798b79502c4caeb6d9772cd35af1f",
        supplyBalanceParentId: "0xc0a0cb43620eb8a84d5a4a50a85650e7fa7ba81e660f9cc2863404fd84591d4b",
        rewardFundId: "0xfb0de07cd39509ecb312464daa9442fac0eb4487d7a9b984cdfc39c1fb7d2791"
      },
      USDY: {
        name: "USDY",
        assetId: 12,
        poolId: "0x4b6253a9f8cf7f5d31e6d04aed4046b9e325a1681d34e0eff11a8441525d4563",
        type: "0x960b531667636f39e85867775f52f6b1f220a058c4de786905bdf761e06a56bb::usdy::USDY",
        reserveObjectId: "0xddeb55afe4860995d755fddb0b1dfb8f8011ca08edb66e43c867a21bd6e0551a",
        borrowBalanceParentId: "0xc0f59c5665d6289408ba31efc48718daa4d14a291a303a0d50d306e51eb68872",
        supplyBalanceParentId: "0x8aac332c01340926066a53f7a5f8ac924e61ea2ae6bc6ce61f112e9094fd5639",
        rewardFundId: ""
      },
      NS: {
        name: "NS",
        assetId: 13,
        poolId: "0x2fcc6245f72795fad50f17c20583f8c6e81426ab69d7d3590420571364d080d4",
        type: "0x5145494a5f5100e645e4b0aa950fa6b68f614e8c59e17bc5ded3495123a79178::ns::NS",
        reserveObjectId: "0x03f405f4d5ed2688b8b7ab4cfbf3e0a8572622a737d615db829342131f3586f2",
        borrowBalanceParentId: "0x2c7b7e6d323ca8f63908bb03191225a2ecf177bf0c4602ccd21d7ac121d52fa4",
        supplyBalanceParentId: "0x071dc718b1e579d476d088456979e30d142ecdde6a6eec875477b5b4786530f0",
        rewardFundId: "0xc6b14b4eda9015ca69ec5f6a9688faa4f760259ce285dafe902ebe6700f5838f"
      },
      LorenzoBTC: {
        name: "stBTC",
        assetId: 14,
        poolId: "0xd96dcd6982c45e580c83ff1d96c2b4455a874c284b637daf67c0787f25bc32dd",
        type: "0x5f496ed5d9d045c5b788dc1bb85f54100f2ede11e46f6a232c29daada4c5bdb6::coin::COIN",
        reserveObjectId: "0x9634f9f7f8ea7236e2ad5bfbecdce9673c811a34cf8c3741edfbcaf5d9409100",
        borrowBalanceParentId: "0xb5cac1b39f67da86f4496f75339001a12f4b8ba78b047682f5158ac4ae8e1649",
        supplyBalanceParentId: "0xad0d8be450e020f54e3212b5b1f4f1256bb8ea882bc85bc9f86708f73d653720",
        rewardFundId: ""
      },
      DEEP: {
        name: "DEEP",
        assetId: 15,
        poolId: "0x08373c5efffd07f88eace1c76abe4777489d9ec044fd4cd567f982d9c169e946",
        type: "0xdeeb7a4662eec9f2f3def03fb937a663dddaa2e215b8078a284d026b7946c270::deep::DEEP",
        reserveObjectId: "0x0b30fe8f42a4fda168c38d734e42a36a77b3d4dd6669069b1cbe53a0c3905ba8",
        borrowBalanceParentId: "0xba03bb3e0167e1ec355926dfe0c130866857b062b93fb5d9cfba20824ad9f1d5",
        supplyBalanceParentId: "0x3fdd91f32dcea2af6e16ae66a7220f6439530ef6238deafe5a72026b3e7aa5f5",
        rewardFundId: "0xc889d78b634f954979e80e622a2ae0fece824c0f6d9590044378a2563035f32f"
      },
      FDUSD: {
        name: "FDUSD",
        assetId: 16,
        poolId: "0x38d8ac76efc14035bbc8c8b38803f5bd012a0f117d9a0bad2103f8b2c6675b66",
        type: "0xf16e6b723f242ec745dfd7634ad072c42d5c1d9ac9d62a39c381303eaa57693a::fdusd::FDUSD",
        reserveObjectId: "0xf1737d6c6c1fffdf145c440a9fc676de0e6d0ffbacaab5fa002d30653f235a8e",
        borrowBalanceParentId: "0x4a4bb401f011c104083f56e3ee154266f1a88cad10b8acc9c993d4da304ebf00",
        supplyBalanceParentId: "0x6dffc3d05e79b055749eae1c27e93a47b5a9999214ce8a2f6173574151d120bf",
        rewardFundId: "0x958dd7ad70755b10f96693bcd591d7a2cb9830a6c523baf43b3b5897664aa788"
      },
      BLUE: {
        name: "BLUE",
        assetId: 17,
        poolId: "0xe2cfd1807f5b44b44d7cabff5376099e76c5f0e4b35a01bdc4b0ef465a23e32c",
        type: "0xe1b45a0e641b9955a20aa0ad1c1f4ad86aad8afb07296d4085e349a50e90bdca::blue::BLUE",
        reserveObjectId: "0xcc993cdfc8fcf421115bb4b2c2247abbfecff35bcab777bb368b4b829d39b073",
        borrowBalanceParentId: "0x897b75f0e55b9cfaae65e818d02ebefa5c91d4cf581f9c7c86d6e39749c87020",
        supplyBalanceParentId: "0xc12b3d04d566fb418a199a113c09c65c121fd878172084ec0c60e08def51726f",
        rewardFundId: ""
      },
      BUCK: {
        name: "BUCK",
        assetId: 18,
        poolId: "0x98953e1c8af4af0cd8f59a52f9df6e60c9790b8143f556751f10949b40c76c50",
        type: "0xce7ff77a83ea0cb6fd39bd8748e2ec89a3f41e8efdc3f4eb123e0ca37b184db2::buck::BUCK",
        reserveObjectId: "0xe1182350b6756e664f824aa1448f5fc741ddc868168dbe09ed3a6e79b7bf249c",
        borrowBalanceParentId: "0x6ae3645ff5936c10ab98c2529d3a316b0d4b22eff46d0d262e27db41371af597",
        supplyBalanceParentId: "0xdcd4fd6c686eebb54b1816e9851183647a306817303d306bbf70f82757f3eff9",
        rewardFundId: ""
      },
      suiUSDT: {
        name: "suiUSDT",
        assetId: 19,
        poolId: "0xa3e0471746e5d35043801bce247d3b3784cc74329d39f7ed665446ddcf22a9e2",
        type: "0x375f70cf2ae4c00bf37117d0c85a2c71545e6ee05c4a5c7d282cd66a4504b068::usdt::USDT",
        reserveObjectId: "0x2abb6f2b007fef1e59133b027f53eca568f3af79e310e6f16d4b37bc09664a50",
        borrowBalanceParentId: "0x2ad9fe604fb74c1acfe646fe79fc27acf7b62cf4e7d0c6cbb23f6d440ce79306",
        supplyBalanceParentId: "0xe0399b39ca6127a879071371aff22ca98d8e7f24872afa8435a12e2a77c00e15",
        rewardFundId: ""
      },
      stSUI: {
        name: "stSUI",
        assetId: 20,
        poolId: "0x0bccd5189d311002f4e10dc98270a3362fb3f7f9d48164cf40828f6c09f351e2",
        type: "0xd1b72982e40348d069bb1ff701e634c117bb5f741f44dff91e472d3b01461e55::stsui::STSUI",
        reserveObjectId: "0x9a91a751ff83ef1eb940066a60900d479cbd39c6eaccdd203632c97dedd10ce9",
        borrowBalanceParentId: "0x67bbcb4d8ef039883c568fe74016ba85839d14f158d9926d68cf930a4d16b169",
        supplyBalanceParentId: "0xfa30b3db35ee961f702f259ea42fb9c5524dce630187e3a7e0b0e24eb0187fef",
        rewardFundId: "0x65a952a1f239c48d8c6fc80de1d3bb248ce6905d1c3897c2ef52948fc7df3616"
      },
      suiBTC: {
        name: "suiBTC",
        assetId: 21,
        poolId: "0x348f4049063e6c4c860064d67a170a7b3de033db9d67545d98fa5da3999966bc",
        type: "0xaafb102dd0902f5055cadecd687fb5b71ca82ef0e0285d90afde828ec58ca96b::btc::BTC",
        reserveObjectId: "0xb6a8441d447dd5b7cd45ef874728a700cd05366c331f9cc1e37a4665f0929c2b",
        borrowBalanceParentId: "0x33d8a4cb800c863f19ae27fc173e1eb5895cdbcea7ae302b756fb275c678dc72",
        supplyBalanceParentId: "0xf99e9bbd4c2b5dee460abeddc0f96042f2fb51420cb634d5a378d5d7643dd189",
        rewardFundId: ""
      },
      WSOL: {
        name: "WSOL",
        assetId: 22,
        poolId: "0xac5f6d750063244cc5abceef712b7ea1aa377f73762099b31c0051a842c13b10",
        type: "0xb7844e289a8410e50fb3ca48d69eb9cf29e27d223ef90353fe1bd8e27ff8f3f8::coin::COIN",
        reserveObjectId: "0x2e2f8b1c34b23b1db894e08a87adda35b387a289fe644ca479fc4f7ec9065c8e",
        borrowBalanceParentId: "0x9bb2749aa677392295d0951fe72440884f286e3db069506916004b30a08f3a04",
        supplyBalanceParentId: "0xca1ec4793c0d1ec3ab58fbb5ccb2366c962dc5b903ff9ce809c6384c6e07aeb6",
        rewardFundId: ""
      },
      LBTC: {
        name: "LBTC",
        assetId: 23,
        poolId: "0x377b8322c0d349b44b5873d418192eefe871b9372bb3a86f288cafe97317de04",
        type: "0x3e8e9423d80e1774a7ca128fccd8bf5f1f7753be658c5e645929037f7c819040::lbtc::LBTC",
        reserveObjectId: "0x1acee7192fe5dd422ee6e0376417f80a709172d67cec1bf0e660666eee6eb627",
        borrowBalanceParentId: "0x81b4063de499c8fba76523fde33b3dc4579047e7b815ffbf2f1eb82510314daa",
        supplyBalanceParentId: "0x71b90679af894cd5f0fdefee87a228e4bdacc8a1ad444e39011476208a1eb9d4",
        rewardFundId: ""
      },
      WAL: {
        name: "WAL",
        assetId: 24,
        poolId: "0xef76883525f5c2ff90cd97732940dbbdba0b391e29de839b10588cee8e4fe167",
        type: "0x356a26eb9e012a68958082340d4c4116e7f55615cf27affcff209cf0ae544f59::wal::WAL",
        reserveObjectId: "0xe6824edab84affecc78646e87fe85ca8fd4374335680e9daee2c981f13dce202",
        borrowBalanceParentId: "0xf8741f2550b0d7f7a3179ba2a0363c73e206ca6691d2d1ebbb95b6018359e17b",
        supplyBalanceParentId: "0xa476b12f8b45c7cb595cf1648822d48e4e82d63a47ba94304f3ad3bb19247ff9",
        rewardFundId: "0xe65f2d9ea46cd8d44a08ec9b7728173a3b9383c7346c496eb88543574db1db51"
      }
    };
    exports2.flashloanConfig = {
      id: "0x3672b2bf471a60c30a03325f104f92fb195c9d337ba58072dce764fe2aa5e2dc"
    };
    exports2.NAVX = {
      symbol: "NAVX",
      address: "0xa99b8952d4f7d947ea77fe0ecdcc9e5fc0bcab2841d6e2a5aa00c3044e5544b5::navx::NAVX",
      decimal: 9
    };
    exports2.Sui = {
      symbol: "Sui",
      address: "0x2::sui::SUI",
      decimal: 9
    };
    exports2.vSui = {
      symbol: "vSui",
      address: "0x549e8b69270defbfafd4f94e17ec44cdbdd99820b33bda2278dea3b9a32d3f55::cert::CERT",
      decimal: 9
    };
    exports2.USDT = {
      symbol: "USDT",
      address: "0xc060006111016b8a020ad5b33834984a437aaa7d3c74c18e09a95d48aceab08c::coin::COIN",
      decimal: 6
    };
    exports2.WETH = {
      symbol: "WETH",
      address: "0xaf8cd5edc19c4512f4259f0bee101a40d41ebed738ade5874359610ef8eeced5::coin::COIN",
      decimal: 8
    };
    exports2.CETUS = {
      symbol: "CETUS",
      address: "0x06864a6f921804860930db6ddbe2e16acdf8504495ea7481637a1c8b9a8fe54b::cetus::CETUS",
      decimal: 9
    };
    exports2.haSui = {
      symbol: "haSui",
      address: "0xbde4ba4c2e274a60ce15c1cfff9e5c42e41654ac8b6d906a57efa4bd3c29f47d::hasui::HASUI",
      decimal: 9
    };
    exports2.WBTC = {
      symbol: "WBTC",
      address: "0x027792d9fed7f9844eb4839566001bb6f6cb4804f66aa2da6fe1ee242d896881::coin::COIN",
      decimal: 8
    };
    exports2.AUSD = {
      symbol: "AUSD",
      address: "0x2053d08c1e2bd02791056171aab0fd12bd7cd7efad2ab8f6b9c8902f14df2ff2::ausd::AUSD",
      decimal: 6
    };
    exports2.wUSDC = {
      symbol: "wUSDC",
      address: "0x5d4b302506645c37ff133b98c4b50a5ae14841659738d6d733d59d0d217a93bf::coin::COIN",
      decimal: 6
    };
    exports2.nUSDC = {
      symbol: "nUSDC",
      address: "0xdba34672e30cb065b1f93e3ab55318768fd6fef66c15942c9f7cb846e2f900e7::usdc::USDC",
      decimal: 6
    };
    exports2.ETH = {
      symbol: "ETH",
      address: "0xd0e89b2af5e4910726fbcd8b8dd37bb79b29e5f83f7491bca830e94f7f226d29::eth::ETH",
      decimal: 8
    };
    exports2.USDY = {
      symbol: "USDY",
      address: "0x960b531667636f39e85867775f52f6b1f220a058c4de786905bdf761e06a56bb::usdy::USDY",
      decimal: 6
    };
    exports2.NS = {
      symbol: "NS",
      address: "0x5145494a5f5100e645e4b0aa950fa6b68f614e8c59e17bc5ded3495123a79178::ns::NS",
      decimal: 6
    };
    exports2.LorenzoBTC = {
      symbol: "stBTC",
      address: "0x5f496ed5d9d045c5b788dc1bb85f54100f2ede11e46f6a232c29daada4c5bdb6::coin::COIN",
      decimal: 8
    };
    exports2.DEEP = {
      symbol: "DEEP",
      address: "0xdeeb7a4662eec9f2f3def03fb937a663dddaa2e215b8078a284d026b7946c270::deep::DEEP",
      decimal: 6
    };
    exports2.FDUSD = {
      symbol: "FDUSD",
      address: "0xf16e6b723f242ec745dfd7634ad072c42d5c1d9ac9d62a39c381303eaa57693a::fdusd::FDUSD",
      decimal: 6
    };
    exports2.BLUE = {
      symbol: "BLUE",
      address: "0xe1b45a0e641b9955a20aa0ad1c1f4ad86aad8afb07296d4085e349a50e90bdca::blue::BLUE",
      decimal: 9
    };
    exports2.BUCK = {
      symbol: "BUCK",
      address: "0xce7ff77a83ea0cb6fd39bd8748e2ec89a3f41e8efdc3f4eb123e0ca37b184db2::buck::BUCK",
      decimal: 9
    };
    exports2.suiUSDT = {
      symbol: "suiUSDT",
      address: "0x375f70cf2ae4c00bf37117d0c85a2c71545e6ee05c4a5c7d282cd66a4504b068::usdt::USDT",
      decimal: 6
    };
    exports2.stSUI = {
      symbol: "stSUI",
      address: "0xd1b72982e40348d069bb1ff701e634c117bb5f741f44dff91e472d3b01461e55::stsui::STSUI",
      decimal: 9
    };
    exports2.suiBTC = {
      symbol: "suiBTC",
      address: "0xaafb102dd0902f5055cadecd687fb5b71ca82ef0e0285d90afde828ec58ca96b::btc::BTC",
      decimal: 8
    };
    exports2.WSOL = {
      symbol: "WSOL",
      address: "0xb7844e289a8410e50fb3ca48d69eb9cf29e27d223ef90353fe1bd8e27ff8f3f8::coin::COIN",
      decimal: 8
    };
    exports2.LBTC = {
      symbol: "LBTC",
      address: "0x3e8e9423d80e1774a7ca128fccd8bf5f1f7753be658c5e645929037f7c819040::lbtc::LBTC",
      decimal: 8
    };
    exports2.WAL = {
      symbol: "WAL",
      address: "0x356a26eb9e012a68958082340d4c4116e7f55615cf27affcff209cf0ae544f59::wal::WAL",
      decimal: 9
    };
    exports2.vSuiConfig = {
      ProtocolPackage: "0x549e8b69270defbfafd4f94e17ec44cdbdd99820b33bda2278dea3b9a32d3f55",
      pool: "0x7fa2faa111b8c65bea48a23049bfd81ca8f971a262d981dcd9a17c3825cb5baf",
      metadata: "0x680cd26af32b2bde8d3361e804c53ec1d1cfe24c7f039eb7f549e8dfde389a60",
      wrapper: "0x05"
    };
    exports2.PriceFeedConfig = {
      SUI: {
        oracleId: 0,
        maxTimestampDiff: 30 * 1e3,
        // 30s(millisecond)
        priceDiffThreshold1: 100,
        // x1: 1% = 0.01 * 10000 = 100
        priceDiffThreshold2: 300,
        // x2: 3% = 0.03 * 10000 = 300
        maxDurationWithinThresholds: 30 * 1e3,
        // 30s(millisecond)
        maximumAllowedSpanPercentage: 700,
        // 7% = 0.07 * 10000 = 700
        maximumEffectivePrice: 3e9,
        // 3 = 3 * 1e9 = 3000000000
        minimumEffectivePrice: 1e8,
        // 0.1 = 0.1 * 1e9 = 100000000
        historicalPriceTTL: 5 * 60 * 1e3,
        // 5min(millisecond)
        coinType: "0x0000000000000000000000000000000000000000000000000000000000000002::sui::SUI",
        feedId: "0x2cab9b151ca1721624b09b421cc57d0bb26a1feb5da1f821492204b098ec35c9",
        // TODO: value
        supraPairId: 90,
        // SUI_USDT -> 90, https://supra.com/docs/data-feeds/data-feeds-index/#:~:text=Under%20Supervision-,SUI_USDT,-90
        pythPriceFeedId: "0x23d7315113f5b1d3ba7a83604c44b94d79f4fd69af77f804fc7f920a6dc65744",
        // **fixed value: Crypto.SUI/USD -> https://pyth.network/developers/price-feed-ids
        pythPriceInfoObject: "0x801dbc2f0053d34734814b2d6df491ce7807a725fe9a01ad74a07e9c51396c37",
        priceDecimal: 9,
        expiration: 30
      },
      WUSDC: {
        oracleId: 1,
        maxTimestampDiff: 30 * 1e3,
        // 30s(millisecond)
        priceDiffThreshold1: 80,
        // x1: 0.8% = 0.008 * 10000 = 80
        priceDiffThreshold2: 150,
        // x2: 1.5% = 0.015 * 10000 = 150
        maxDurationWithinThresholds: 30 * 1e3,
        // 30s(millisecond)
        maximumAllowedSpanPercentage: 700,
        // 7% = 0.07 * 10000 = 700
        maximumEffectivePrice: 2e6,
        // 2 = 2 * 1e6 = 2000000
        minimumEffectivePrice: 1e5,
        // 0.1 = 0.1 * 1e6 = 100000
        historicalPriceTTL: 5 * 60 * 1e3,
        // 5min(millisecond)
        coinType: "0x5d4b302506645c37ff133b98c4b50a5ae14841659738d6d733d59d0d217a93bf::coin::COIN",
        feedId: "0x70a79226dda5c080378b639d1bb540ddea64761629aa4ad7355d79266d55af61",
        // TODO: value
        supraPairId: 47,
        // USDC_USDT -> 47, https://supra.com/docs/data-feeds/data-feeds-index/#:~:text=Supra%20Standard-,USDC_USDT,-47
        pythPriceFeedId: "0xeaa020c61cc479712813461ce153894a96a6c00b21ed0cfc2798d1f9a9e9c94a",
        // **fixed value: Crypto.USDC/USD -> https://pyth.network/developers/price-feed-ids
        pythPriceInfoObject: "0x5dec622733a204ca27f5a90d8c2fad453cc6665186fd5dff13a83d0b6c9027ab",
        priceDecimal: 6,
        expiration: 30
      },
      USDT: {
        oracleId: 2,
        maxTimestampDiff: 30 * 1e3,
        // 30s(millisecond)
        priceDiffThreshold1: 80,
        // x1: 0.8% = 0.008 * 10000 = 80
        priceDiffThreshold2: 150,
        // x2: 1.5% = 0.015 * 10000 = 150
        maxDurationWithinThresholds: 30 * 1e3,
        // 30s(millisecond)
        maximumAllowedSpanPercentage: 700,
        // 7% = 0.07 * 10000 = 700
        maximumEffectivePrice: 2e6,
        // 2 = 2 * 1e6 = 2000000
        minimumEffectivePrice: 1e5,
        // 0.1 = 0.1 * 1e6 = 100000
        historicalPriceTTL: 5 * 60 * 1e3,
        // 5min(millisecond)
        coinType: "0xc060006111016b8a020ad5b33834984a437aaa7d3c74c18e09a95d48aceab08c::coin::COIN",
        feedId: "0xf72d8933873bb4e5bfa1edbfa9ff6443ec5fac25c1d99ba2ef37f50a125826f3",
        // TODO: value
        supraPairId: 48,
        // USDT_USD -> 48, https://supra.com/docs/data-feeds/data-feeds-index/#:~:text=Supra%20Premium-,USDT_USD,-48
        pythPriceFeedId: "0x2b89b9dc8fdf9f34709a5b106b472f0f39bb6ca9ce04b0fd7f2e971688e2e53b",
        // **fixed value: Crypto.USDT/USD -> https://pyth.network/developers/price-feed-ids
        pythPriceInfoObject: "0x985e3db9f93f76ee8bace7c3dd5cc676a096accd5d9e09e9ae0fb6e492b14572",
        priceDecimal: 6,
        expiration: 30
      },
      WETH: {
        oracleId: 3,
        maxTimestampDiff: 30 * 1e3,
        // 30s(millisecond)
        priceDiffThreshold1: 100,
        // x1: 1% = 0.01 * 10000 = 100
        priceDiffThreshold2: 300,
        // x2: 3% = 0.03 * 10000 = 300
        maxDurationWithinThresholds: 30 * 1e3,
        // 30s(millisecond)
        maximumAllowedSpanPercentage: 700,
        // 7% = 0.07 * 10000 = 700
        maximumEffectivePrice: 6e11,
        // 6000 = 6000 * 1e8 = 600000000000
        minimumEffectivePrice: 1e8,
        // 1 = 1 * 1e8 = 100000000
        historicalPriceTTL: 5 * 60 * 1e3,
        // 5min(millisecond)
        coinType: "0xaf8cd5edc19c4512f4259f0bee101a40d41ebed738ade5874359610ef8eeced5::coin::COIN",
        feedId: "0x44d92366eba1f1652ec81f34585406726bef267565a2db1664ffd5ef18e21693",
        // TODO: value
        supraPairId: 1,
        // ETH_USDT -> 1, https://supra.com/docs/data-feeds/data-feeds-index/#:~:text=Supra%20Premium-,ETH_USDT,-1
        pythPriceFeedId: "0xff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace",
        // **fixed value: Crypto.ETH/USD -> https://pyth.network/developers/price-feed-ids
        pythPriceInfoObject: "0x9193fd47f9a0ab99b6e365a464c8a9ae30e6150fc37ed2a89c1586631f6fc4ab",
        priceDecimal: 8,
        expiration: 30
      },
      CETUS: {
        oracleId: 4,
        maxTimestampDiff: 30 * 1e3,
        // 30s(millisecond)
        priceDiffThreshold1: 200,
        // x1: 2% = 0.02 * 10000 = 200
        priceDiffThreshold2: 400,
        // x2: 4% = 0.04 * 10000 = 400
        maxDurationWithinThresholds: 30 * 1e3,
        // 30s(millisecond)
        maximumAllowedSpanPercentage: 700,
        // 7% = 0.07 * 10000 = 700
        maximumEffectivePrice: 1e9,
        // 1 = 1 * 1e9 = 1000000000
        minimumEffectivePrice: 1e6,
        // 0.001 = 0.001 * 1e9 = 1000000
        historicalPriceTTL: 5 * 60 * 1e3,
        // 5min(millisecond)
        coinType: "0x6864a6f921804860930db6ddbe2e16acdf8504495ea7481637a1c8b9a8fe54b::cetus::CETUS",
        feedId: "0x5ac98fc1e6723af2a6d9a68a5d771654a6043f9c4d2b836b2d5fb4832a3be4f2",
        // TODO: value
        supraPairId: 93,
        // CETUS_USDT -> 93, https://supra.com/docs/data-feeds/data-feeds-index/#:~:text=Supra%20Premium-,CETUS_USDT,-93
        pythPriceFeedId: "0xe5b274b2611143df055d6e7cd8d93fe1961716bcd4dca1cad87a83bc1e78c1ef",
        // **fixed value: Crypto.CETUS/USD -> https://pyth.network/developers/price-feed-ids
        pythPriceInfoObject: "0x24c0247fb22457a719efac7f670cdc79be321b521460bd6bd2ccfa9f80713b14",
        priceDecimal: 9,
        expiration: 30
      },
      CERT: {
        oracleId: 5,
        maxTimestampDiff: 30 * 1e3,
        // 30s(millisecond)
        priceDiffThreshold1: 100,
        // x1: 1% = 0.01 * 10000 = 100
        priceDiffThreshold2: 300,
        // x2: 3% = 0.03 * 10000 = 300
        maxDurationWithinThresholds: 30 * 1e3,
        // 30s(millisecond)
        maximumAllowedSpanPercentage: 700,
        // 7% = 0.07 * 10000 = 700
        maximumEffectivePrice: 3e9,
        // 3 = 3 * 1e9 = 3000000000
        minimumEffectivePrice: 1e8,
        // 0.1 = 0.1 * 1e9 = 100000000
        historicalPriceTTL: 5 * 60 * 1e3,
        // 5min(millisecond)
        coinType: "0x549e8b69270defbfafd4f94e17ec44cdbdd99820b33bda2278dea3b9a32d3f55::cert::CERT",
        feedId: "0x086bb5540047b3c77ae5e2f9b811c7ef085517a73510f776753c8ee83d19e62c",
        // TODO: value
        supraPairId: 90,
        // SUI_USDT -> 90, https://supra.com/docs/data-feeds/data-feeds-index/#:~:text=Under%20Supervision-,SUI_USDT,-90
        pythPriceFeedId: "0x23d7315113f5b1d3ba7a83604c44b94d79f4fd69af77f804fc7f920a6dc65744",
        // **fixed value: Crypto.SUI/USD -> https://pyth.network/developers/price-feed-ids
        pythPriceInfoObject: "0x801dbc2f0053d34734814b2d6df491ce7807a725fe9a01ad74a07e9c51396c37",
        priceDecimal: 9,
        expiration: 30
      },
      HASUI: {
        oracleId: 6,
        maxTimestampDiff: 30 * 1e3,
        // 30s(millisecond)
        priceDiffThreshold1: 100,
        // x1: 1% = 0.01 * 10000 = 100
        priceDiffThreshold2: 300,
        // x2: 3% = 0.03 * 10000 = 300
        maxDurationWithinThresholds: 30 * 1e3,
        // 30s(millisecond)
        maximumAllowedSpanPercentage: 700,
        // 7% = 0.07 * 10000 = 700
        maximumEffectivePrice: 3e9,
        // 3 = 3 * 1e9 = 3000000000
        minimumEffectivePrice: 1e8,
        // 0.1 = 0.1 * 1e9 = 100000000
        historicalPriceTTL: 5 * 60 * 1e3,
        // 5min(millisecond)
        coinType: "0xbde4ba4c2e274a60ce15c1cfff9e5c42e41654ac8b6d906a57efa4bd3c29f47d::hasui::HASUI",
        feedId: "0xac934a2a2d406085e7f73b460221fe1b11935864605ba58cdbb8e21c15f12acd",
        // TODO: value
        supraPairId: 90,
        // SUI_USDT -> 90, https://supra.com/docs/data-feeds/data-feeds-index/#:~:text=Under%20Supervision-,SUI_USDT,-90
        pythPriceFeedId: "0x23d7315113f5b1d3ba7a83604c44b94d79f4fd69af77f804fc7f920a6dc65744",
        // **fixed value: Crypto.SUI/USD -> https://pyth.network/developers/price-feed-ids
        pythPriceInfoObject: "0x801dbc2f0053d34734814b2d6df491ce7807a725fe9a01ad74a07e9c51396c37",
        priceDecimal: 9,
        expiration: 30
      },
      NAVX: {
        oracleId: 7,
        maxTimestampDiff: 30 * 1e3,
        // 30s(millisecond)
        priceDiffThreshold1: 200,
        // x1: 2% = 0.02 * 10000 = 200
        priceDiffThreshold2: 400,
        // x2: 4% = 0.04 * 10000 = 400
        maxDurationWithinThresholds: 30 * 1e3,
        // 30s(millisecond)
        maximumAllowedSpanPercentage: 700,
        // 7% = 0.07 * 10000 = 700
        maximumEffectivePrice: 1e9,
        // 1 = 1 * 1e9 = 1000000000
        minimumEffectivePrice: 1e6,
        // 0.001 = 0.001 * 1e9 = 1000000
        historicalPriceTTL: 5 * 60 * 1e3,
        // 5min(millisecond)
        coinType: "0xa99b8952d4f7d947ea77fe0ecdcc9e5fc0bcab2841d6e2a5aa00c3044e5544b5::navx::NAVX",
        feedId: "0x4324c797d2f19eff517c24adec8b92aa2d282e44f3a5cafb36d6c4b30d7f2dca",
        // TODO: value
        supraPairId: 408,
        // NAVX_USDT -> 408, https://supra.com/docs/data-feeds/data-feeds-index/#:~:text=Supra%20Premium-,NAVX_USDT,-408
        pythPriceFeedId: "0x88250f854c019ef4f88a5c073d52a18bb1c6ac437033f5932cd017d24917ab46",
        // **fixed value: Crypto.NAVX/USD -> https://pyth.network/developers/price-feed-ids
        pythPriceInfoObject: "0x5b117a6a2de70796bffe36495bad576b788a34c33ca0648bd57852ead3f41e32",
        priceDecimal: 9,
        expiration: 30
      },
      WBTC: {
        oracleId: 8,
        maxTimestampDiff: 30 * 1e3,
        // 30s(millisecond)
        priceDiffThreshold1: 100,
        // x1: 1% = 0.01 * 10000 = 100
        priceDiffThreshold2: 300,
        // x2: 3% = 0.03 * 10000 = 300
        maxDurationWithinThresholds: 30 * 1e3,
        // 30s(millisecond)
        maximumAllowedSpanPercentage: 700,
        // 7% = 0.07 * 10000 = 700
        maximumEffectivePrice: 1e13,
        // 100000 = 100000 * 1e8 = 10000000000000
        minimumEffectivePrice: 1e8,
        // 1 = 1 * 1e8 = 100000000
        historicalPriceTTL: 5 * 60 * 1e3,
        // 5min(millisecond)
        coinType: "0x027792d9fed7f9844eb4839566001bb6f6cb4804f66aa2da6fe1ee242d896881::coin::COIN",
        feedId: "0x1bf4727242a61d892feef6616d3e40a3bd24b64b5deb884054e86cb9360556c4",
        // TODO: value
        supraPairId: 0,
        // BTC_USDT -> 0, https://supra.com/docs/data-feeds/data-feeds-index/#:~:text=Pair%20Category-,BTC_USDT,-0
        pythPriceFeedId: "0xe62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43",
        // Crypto.BTC/USD -> https://pyth.network/developers/price-feed-ids
        pythPriceInfoObject: "0x9a62b4863bdeaabdc9500fce769cf7e72d5585eeb28a6d26e4cafadc13f76ab2",
        priceDecimal: 8,
        expiration: 30
      },
      AUSD: {
        oracleId: 9,
        maxTimestampDiff: 30 * 1e3,
        // 30s(millisecond)
        priceDiffThreshold1: 80,
        // x1: 0.8% = 0.008 * 10000 = 80
        priceDiffThreshold2: 150,
        // x2: 1.5% = 0.015 * 10000 = 150
        maxDurationWithinThresholds: 30 * 1e3,
        // 30s(millisecond)
        maximumAllowedSpanPercentage: 700,
        // 7% = 0.07 * 10000 = 700
        maximumEffectivePrice: 2e6,
        // 2 = 2 * 1e6 = 2000000
        minimumEffectivePrice: 1e4,
        // 0.01 = 0.01 * 1e6 = 10000
        historicalPriceTTL: 5 * 60 * 1e3,
        // 5min(millisecond)
        coinType: "0x2053d08c1e2bd02791056171aab0fd12bd7cd7efad2ab8f6b9c8902f14df2ff2::ausd::AUSD",
        feedId: "0x9a0656e1e10a0cdf3f03dce9db9ad931f51dc6eac2e52ebfbf535dfbcf8100ef",
        // TODO: values
        supraPairId: 99999,
        pythPriceFeedId: "0xd9912df360b5b7f21a122f15bdd5e27f62ce5e72bd316c291f7c86620e07fb2a",
        pythPriceInfoObject: "0x94ef89923e7beccd4a52043a9451a87c614684b847426fb5fd76faa8cb1e907f",
        priceDecimal: 6,
        expiration: 30
      },
      NUSDC: {
        oracleId: 10,
        maxTimestampDiff: 30 * 1e3,
        // 30s(millisecond)
        priceDiffThreshold1: 80,
        // x1: 0.8% = 0.008 * 10000 = 80
        priceDiffThreshold2: 150,
        // x2: 1.5% = 0.015 * 10000 = 150
        maxDurationWithinThresholds: 30 * 1e3,
        // 30s(millisecond)
        maximumAllowedSpanPercentage: 700,
        // 7% = 0.07 * 10000 = 700
        maximumEffectivePrice: 2e6,
        // 2 = 2 * 1e6 = 2000000
        minimumEffectivePrice: 1e5,
        // 0.1 = 0.1 * 1e6 = 100000
        historicalPriceTTL: 5 * 60 * 1e3,
        // 5min(millisecond)
        coinType: "0xdba34672e30cb065b1f93e3ab55318768fd6fef66c15942c9f7cb846e2f900e7::usdc::USDC",
        feedId: "0xe120611435395f144b4bcc4466a00b6b26d7a27318f96e148648852a9dd6b31c",
        // TODO: value
        supraPairId: 47,
        // USDC_USDT -> 47, https://supra.com/docs/data-feeds/data-feeds-index/#:~:text=Supra%20Standard-,USDC_USDT,-47
        pythPriceFeedId: "0xeaa020c61cc479712813461ce153894a96a6c00b21ed0cfc2798d1f9a9e9c94a",
        // **fixed value: Crypto.USDC/USD -> https://pyth.network/developers/price-feed-ids
        pythPriceInfoObject: "0x5dec622733a204ca27f5a90d8c2fad453cc6665186fd5dff13a83d0b6c9027ab",
        priceDecimal: 6,
        expiration: 30
      },
      ETH: {
        oracleId: 11,
        maxTimestampDiff: 30 * 1e3,
        // 30s(millisecond)
        priceDiffThreshold1: 100,
        // x1: 1% = 0.01 * 10000 = 100
        priceDiffThreshold2: 300,
        // x2: 3% = 0.03 * 10000 = 300
        maxDurationWithinThresholds: 30 * 1e3,
        // 30s(millisecond)
        maximumAllowedSpanPercentage: 700,
        // 7% = 0.07 * 10000 = 700
        maximumEffectivePrice: 6e11,
        // 6000 = 6000 * 1e8 = 600000000000
        minimumEffectivePrice: 1e8,
        // 1 = 1 * 1e8 = 100000000
        historicalPriceTTL: 5 * 60 * 1e3,
        // 5min(millisecond)
        coinType: "0xd0e89b2af5e4910726fbcd8b8dd37bb79b29e5f83f7491bca830e94f7f226d29::eth::ETH",
        feedId: "0x9a6ffc707270286e98e8d0f654ce38f69efbc302ac98e2deb11fbad2211600f0",
        // TODO: value
        supraPairId: 1,
        // ETH_USDT -> 1, https://supra.com/docs/data-feeds/data-feeds-index/#:~:text=Supra%20Premium-,ETH_USDT,-1
        pythPriceFeedId: "0xff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace",
        // **fixed value: Crypto.ETH/USD -> https://pyth.network/developers/price-feed-ids
        pythPriceInfoObject: "0x9193fd47f9a0ab99b6e365a464c8a9ae30e6150fc37ed2a89c1586631f6fc4ab",
        priceDecimal: 8,
        expiration: 30
      },
      USDY: {
        oracleId: 12,
        maxTimestampDiff: 30 * 1e3,
        // 30s(millisecond)
        priceDiffThreshold1: 80,
        // x1: 0.8% = 0.008 * 10000 = 80
        priceDiffThreshold2: 150,
        // x2: 1.5% = 0.015 * 10000 = 150
        maxDurationWithinThresholds: 30 * 1e3,
        // 30s(millisecond)
        maximumAllowedSpanPercentage: 700,
        // 7% = 0.07 * 10000 = 700
        maximumEffectivePrice: 2e6,
        // 2 = 2 * 1e6 = 2000000
        minimumEffectivePrice: 1e4,
        // 0.01 = 0.01 * 1e6 = 10000
        historicalPriceTTL: 5 * 60 * 1e3,
        // 5min(millisecond)
        coinType: "0x960b531667636f39e85867775f52f6b1f220a058c4de786905bdf761e06a56bb::usdy::USDY",
        feedId: "0x11ddf2ac1868d493e2487deeb2a0c2791bb7ca69632c8c5fefe85e09390be093",
        // TODO: values
        supraPairId: 185,
        pythPriceFeedId: "0xe393449f6aff8a4b6d3e1165a7c9ebec103685f3b41e60db4277b5b6d10e7326",
        pythPriceInfoObject: "0x62e15c2fd1437a4d0e111dbd8a193f244878ba25cc7caa9120d0ee41ac151ea5",
        priceDecimal: 6,
        expiration: 30
      },
      NS: {
        oracleId: 13,
        maxTimestampDiff: 3e4,
        // 30s(millisecond)
        priceDiffThreshold1: 80,
        // x1: 0.8% = 0.008 * 10000 = 80
        priceDiffThreshold2: 150,
        // x2: 1.5% = 0.015 * 10000 = 150
        maxDurationWithinThresholds: 3e4,
        // 30s(millisecond)
        maximumAllowedSpanPercentage: 700,
        // 7% = 0.07 * 10000 = 700
        maximumEffectivePrice: 2e6,
        // 2 = 2 * 1e6 = 2000000
        minimumEffectivePrice: 1e5,
        // 0.01 = 0.01 * 1e6 = 10000
        historicalPriceTTL: 3e5,
        // 5min(millisecond)
        coinType: "0x5145494a5f5100e645e4b0aa950fa6b68f614e8c59e17bc5ded3495123a79178::ns::NS",
        feedId: "0xc771ec0ca245857f30195ce05197a7b3ab41c58c1e8abe0661919d90675ad63d",
        supraPairId: 99999,
        // ignore for now
        pythPriceFeedId: "0xbb5ff26e47a3a6cc7ec2fce1db996c2a145300edc5acaabe43bf9ff7c5dd5d32",
        pythPriceInfoObject: "0xc6352e1ea55d7b5acc3ed690cc3cdf8007978071d7bfd6a189445018cfb366e0",
        priceDecimal: 6,
        expiration: 30
      },
      LORENZOBTC: {
        oracleId: 14,
        maxTimestampDiff: 3e4,
        // 30s(millisecond)
        priceDiffThreshold1: 100,
        // x1: 1% = 0.01 * 10000 = 100
        priceDiffThreshold2: 300,
        // x2: 3% = 0.03 * 10000 = 300
        maxDurationWithinThresholds: 3e4,
        // 30s(millisecond)
        maximumAllowedSpanPercentage: 700,
        // 7% = 0.07 * 10000 = 700
        maximumEffectivePrice: 2e13,
        // 20000000000000 = 200000 * 1e8 = 20000000000000
        minimumEffectivePrice: 1e8,
        // 1 = 1 * 1e8 = 100000000
        historicalPriceTTL: 3e5,
        // 5min(millisecond)
        coinType: "0x5f496ed5d9d045c5b788dc1bb85f54100f2ede11e46f6a232c29daada4c5bdb6::coin::COIN",
        feedId: "0xdf9b254a7a64742e1edf8c48bd2a1f182b52f020de2ab070ae0e3f9228d05280",
        supraPairId: 0,
        pythPriceFeedId: "0xe62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43",
        pythPriceInfoObject: "0x9a62b4863bdeaabdc9500fce769cf7e72d5585eeb28a6d26e4cafadc13f76ab2",
        priceDecimal: 8,
        expiration: 30
      },
      DEEP: {
        oracleId: 15,
        maxTimestampDiff: 3e4,
        // 30s(millisecond)
        priceDiffThreshold1: 200,
        // x1: 2% = 0.02 * 10000 = 200
        priceDiffThreshold2: 400,
        // x2: 4% = 0.04 * 10000 = 400
        maxDurationWithinThresholds: 3e4,
        // 30s(millisecond)
        maximumAllowedSpanPercentage: 700,
        // 7% = 0.07 * 10000 = 700
        maximumEffectivePrice: 4e5,
        // 0.4 = 0.4 * 1e6 = 400000
        minimumEffectivePrice: 1e3,
        // 0.001 = 0.001 * 1e6 = 1000
        historicalPriceTTL: 3e5,
        // 5min(millisecond)
        coinType: "0xdeeb7a4662eec9f2f3def03fb937a663dddaa2e215b8078a284d026b7946c270::deep::DEEP",
        feedId: "0x4558092b08ad1b33b0eb536f91a4655693c2390ac568f06de6f6fad827888600",
        supraPairId: 491,
        pythPriceFeedId: "0x29bdd5248234e33bd93d3b81100b5fa32eaa5997843847e2c2cb16d7c6d9f7ff",
        pythPriceInfoObject: "0x8c7f3a322b94cc69db2a2ac575cbd94bf5766113324c3a3eceac91e3e88a51ed",
        priceDecimal: 6,
        expiration: 30
      },
      FDUSD: {
        oracleId: 16,
        maxTimestampDiff: 3e4,
        // 30s(millisecond)
        priceDiffThreshold1: 80,
        // x1: 0.8% = 0.008 * 10000 = 80
        priceDiffThreshold2: 150,
        // x2: 1.5% = 0.015 * 10000 = 150
        maxDurationWithinThresholds: 3e4,
        // 30s(millisecond)
        maximumAllowedSpanPercentage: 700,
        // 7% = 0.07 * 10000 = 700
        maximumEffectivePrice: 2e6,
        // 2 = 2 * 1e6 = 2000000
        minimumEffectivePrice: 1e4,
        // 0.01 = 0.01 * 1e6 = 10000
        historicalPriceTTL: 3e5,
        // 5min(millisecond)
        coinType: "0xf16e6b723f242ec745dfd7634ad072c42d5c1d9ac9d62a39c381303eaa57693a::fdusd::FDUSD",
        feedId: "0x843b39829166bd97d61843b8967405f13d443e066ce2f4fa0685f187974d34bd",
        supraPairId: 474,
        pythPriceFeedId: "0xccdc1a08923e2e4f4b1e6ea89de6acbc5fe1948e9706f5604b8cb50bc1ed3979",
        pythPriceInfoObject: "0x5f6583b2b0fe1ecf94aaffeaab8a838794693960cea48c0da282d5f4a24be027",
        priceDecimal: 6,
        expiration: 30
      },
      BLUE: {
        oracleId: 17,
        maxTimestampDiff: 3e4,
        // 30s(millisecond)
        priceDiffThreshold1: 200,
        // x1: 0.8% = 0.008 * 10000 = 80
        priceDiffThreshold2: 400,
        // x2: 1.5% = 0.015 * 10000 = 150
        maxDurationWithinThresholds: 3e4,
        // 30s(millisecond)
        maximumAllowedSpanPercentage: 700,
        // 7% = 0.07 * 10000 = 700
        maximumEffectivePrice: 2e9,
        // 2 = 2 * 1e6 = 2000000
        minimumEffectivePrice: 1e6,
        // 0.01 = 0.01 * 1e6 = 10000
        historicalPriceTTL: 3e5,
        // 5min(millisecond)
        coinType: "0xe1b45a0e641b9955a20aa0ad1c1f4ad86aad8afb07296d4085e349a50e90bdca::blue::BLUE",
        feedId: "0xd8286c11df7e49496ee75622ae4132c56385c30b4bedb392e36c0699a52a1d52",
        supraPairId: 99999,
        pythPriceFeedId: "0x04cfeb7b143eb9c48e9b074125c1a3447b85f59c31164dc20c1beaa6f21f2b6b",
        pythPriceInfoObject: "0x5515a34fc610bba6b601575ed1d2535b2f9df1f339fd0d435fef487c1ee3df9c",
        priceDecimal: 9,
        expiration: 30
      },
      BUCK: {
        oracleId: 18,
        maxTimestampDiff: 3e4,
        // 30s(millisecond)
        priceDiffThreshold1: 80,
        priceDiffThreshold2: 150,
        maxDurationWithinThresholds: 3e4,
        // 30s(millisecond)
        maximumAllowedSpanPercentage: 700,
        // 7% = 0.07 * 10000 = 700
        maximumEffectivePrice: 2e9,
        minimumEffectivePrice: 1e6,
        historicalPriceTTL: 3e5,
        // 5min(millisecond)
        coinType: "0xce7ff77a83ea0cb6fd39bd8748e2ec89a3f41e8efdc3f4eb123e0ca37b184db2::buck::BUCK",
        feedId: "0x93c1b815f64ef7c4311d74ff7c0ca1e47739c3ac31fdee0068c30887633ba2fb",
        supraPairId: 161,
        pythPriceFeedId: "0xfdf28a46570252b25fd31cb257973f865afc5ca2f320439e45d95e0394bc7382",
        pythPriceInfoObject: "0x3ef821a54dbdfe3f211b2ff7261dea0f0330c72fd292422ce586e21f43809a56",
        priceDecimal: 9,
        expiration: 30
      },
      SUIUSDT: {
        oracleId: 19,
        maxTimestampDiff: 3e4,
        // 30s(millisecond)
        priceDiffThreshold1: 80,
        priceDiffThreshold2: 150,
        maxDurationWithinThresholds: 3e4,
        // 30s(millisecond)
        maximumAllowedSpanPercentage: 700,
        // 7% = 0.07 * 10000 = 700
        maximumEffectivePrice: 2e6,
        minimumEffectivePrice: 1e5,
        historicalPriceTTL: 3e5,
        // 5min(millisecond)
        coinType: "0x375f70cf2ae4c00bf37117d0c85a2c71545e6ee05c4a5c7d282cd66a4504b068::usdt::USDT",
        feedId: "0xdeba21105ff41300f8829aaeba45fdec25d1533a64d504ef0348ff005da3fbe5",
        supraPairId: 48,
        pythPriceFeedId: "0x2b89b9dc8fdf9f34709a5b106b472f0f39bb6ca9ce04b0fd7f2e971688e2e53b",
        pythPriceInfoObject: "0x985e3db9f93f76ee8bace7c3dd5cc676a096accd5d9e09e9ae0fb6e492b14572",
        priceDecimal: 6,
        expiration: 30
      },
      STSUI: {
        oracleId: 20,
        maxTimestampDiff: 3e4,
        // 30s(millisecond)
        priceDiffThreshold1: 100,
        priceDiffThreshold2: 300,
        maxDurationWithinThresholds: 3e4,
        // 30s(millisecond)
        maximumAllowedSpanPercentage: 700,
        // 7% = 0.07 * 10000 = 700
        maximumEffectivePrice: 1e10,
        minimumEffectivePrice: 1e8,
        historicalPriceTTL: 3e5,
        // 5min(millisecond)
        coinType: "0xd1b72982e40348d069bb1ff701e634c117bb5f741f44dff91e472d3b01461e55::stsui::STSUI",
        feedId: "0xd7a8c920db9f8b5c3c300307d88fca53684fd15b760977dbf8f0adc6e55783bd",
        supraPairId: 90,
        pythPriceFeedId: "0x23d7315113f5b1d3ba7a83604c44b94d79f4fd69af77f804fc7f920a6dc65744",
        pythPriceInfoObject: "0x801dbc2f0053d34734814b2d6df491ce7807a725fe9a01ad74a07e9c51396c37",
        priceDecimal: 9,
        expiration: 30
      },
      SUIBTC: {
        oracleId: 21,
        maxTimestampDiff: 30 * 1e3,
        // 30s(millisecond)
        priceDiffThreshold1: 100,
        // x1: 1% = 0.01 * 10000 = 100
        priceDiffThreshold2: 300,
        // x2: 3% = 0.03 * 10000 = 300
        maxDurationWithinThresholds: 30 * 1e3,
        // 30s(millisecond)
        maximumAllowedSpanPercentage: 700,
        // 7% = 0.07 * 10000 = 700
        maximumEffectivePrice: 2e13,
        // 200000 = 200000 * 1e8 = 20000000000000
        minimumEffectivePrice: 1e8,
        // 1 = 1 * 1e8 = 100000000
        historicalPriceTTL: 5 * 60 * 1e3,
        // 5min(millisecond)
        coinType: "0xaafb102dd0902f5055cadecd687fb5b71ca82ef0e0285d90afde828ec58ca96b::btc::BTC",
        feedId: "0x4e4666c82c476f0b51b27c5ed8c77ab960aa5e4c3a48796e179d721b471e3b7e",
        // TODO: value
        supraPairId: 0,
        // BTC_USDT -> 0, https://supra.com/docs/data-feeds/data-feeds-index/#:~:text=Pair%20Category-,BTC_USDT,-0
        pythPriceFeedId: "0xe62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43",
        // Crypto.BTC/USD -> https://pyth.network/developers/price-feed-ids
        pythPriceInfoObject: "0x9a62b4863bdeaabdc9500fce769cf7e72d5585eeb28a6d26e4cafadc13f76ab2",
        priceDecimal: 8,
        expiration: 30
      },
      WSOL: {
        oracleId: 22,
        maxTimestampDiff: 30 * 1e3,
        // 30s(millisecond)
        priceDiffThreshold1: 100,
        // x1: 1% = 0.01 * 10000 = 100
        priceDiffThreshold2: 300,
        // x2: 3% = 0.03 * 10000 = 300
        maxDurationWithinThresholds: 30 * 1e3,
        // 30s(millisecond)
        maximumAllowedSpanPercentage: 700,
        // 7% = 0.07 * 10000 = 700
        maximumEffectivePrice: 1e11,
        // 1000 * 1e8 = 100000000000
        minimumEffectivePrice: 1e8,
        // 1 = 1 * 1e8 = 100000000
        historicalPriceTTL: 5 * 60 * 1e3,
        // 5min(millisecond)
        coinType: "0xb7844e289a8410e50fb3ca48d69eb9cf29e27d223ef90353fe1bd8e27ff8f3f8::coin::COIN",
        feedId: "0x2611dff736233a6855e28ae95f8e5f62a6bf80653ddb118bf012fd783d530fa1",
        supraPairId: 10,
        // SOL_USDT -> 10
        pythPriceFeedId: "0xef0d8b6fda2ceba41da15d4095d1da392a0d2f8ed0c6c7bc0f4cfac8c280b56d",
        // **fixed value: Crypto.SOL/USD -> https://pyth.network/developers/price-feed-ids
        pythPriceInfoObject: "0x9d0d275efbd37d8a8855f6f2c761fa5983293dd8ce202ee5196626de8fcd4469",
        priceDecimal: 8,
        expiration: 30
      },
      LBTC: {
        oracleId: 23,
        maxTimestampDiff: 30 * 1e3,
        // 30s(millisecond)
        priceDiffThreshold1: 100,
        // x1: 1% = 0.01 * 10000 = 100
        priceDiffThreshold2: 300,
        // x2: 3% = 0.03 * 10000 = 300
        maxDurationWithinThresholds: 30 * 1e3,
        // 30s(millisecond)
        maximumAllowedSpanPercentage: 700,
        // 7% = 0.07 * 10000 = 700
        maximumEffectivePrice: 2e13,
        // 200000 = 200000 * 1e8 = 20000000000000
        minimumEffectivePrice: 1e8,
        // 1 = 1 * 1e8 = 100000000
        historicalPriceTTL: 5 * 60 * 1e3,
        // 5min(millisecond)
        coinType: "0x3e8e9423d80e1774a7ca128fccd8bf5f1f7753be658c5e645929037f7c819040::lbtc::LBTC",
        feedId: "0x8ee4d9d61d0bfa342cdb3ee8b7f047c91f0b586e0ff66fd6e8fc761e235e5409",
        // TODO: value
        supraPairId: 99999,
        // none
        pythPriceFeedId: "0x8f257aab6e7698bb92b15511915e593d6f8eae914452f781874754b03d0c612b",
        // Crypto.LBTC/USD -> https://pyth.network/developers/price-feed-ids
        pythPriceInfoObject: "0xeba15840ddf425dacb5ff0990334fc03d034487f4ad416280859b96bf2af89f8",
        priceDecimal: 8,
        expiration: 30
      },
      WAL: {
        oracleId: 24,
        maxTimestampDiff: 3e4,
        // 30s(millisecond)
        priceDiffThreshold1: 100,
        priceDiffThreshold2: 300,
        maxDurationWithinThresholds: 3e4,
        // 30s(millisecond)
        maximumAllowedSpanPercentage: 700,
        // 7% = 0.07 * 10000 = 700
        maximumEffectivePrice: 1e10,
        // 10 * 1e9 = 10000000000
        minimumEffectivePrice: 1e6,
        // 0.001 * 1e9 = 1000000
        historicalPriceTTL: 3e5,
        // 5min(millisecond)
        coinType: "0x356a26eb9e012a68958082340d4c4116e7f55615cf27affcff209cf0ae544f59::wal::WAL",
        // Mainnet verison
        feedId: "0x924bf9f715d857605f9f4146537fffc0414809c85845ce9d695f3645a22a5426",
        // TODO: value
        supraPairId: 99999,
        // none
        pythPriceFeedId: "0xeba0732395fae9dec4bae12e52760b35fc1c5671e2da8b449c9af4efe5d54341",
        // Crypto.WAL/USD -> https://pyth.network/developers/price-feed-ids
        pythPriceInfoObject: "0xeb7e669f74d976c0b99b6ef9801e3a77716a95f1a15754e0f1399ce3fb60973d",
        priceDecimal: 9,
        expiration: 30
      }
    };
    exports2.OracleProConfig = {
      PackageId: "0xc2d49bf5e75d2258ee5563efa527feb6155de7ac6f6bf025a23ee88cd12d5a83",
      // TODO: value
      PriceOracle: "0x1568865ed9a0b5ec414220e8f79b3d04c77acc82358f6e5ae4635687392ffbef",
      // TODO: value
      OracleAdminCap: "0x7204e37882baf10f31b66cd1ac78ac65b3b8ad29c265d1e474fb4b24ccd6d5b7",
      // TODO: value
      OracleConfig: "0x1afe1cb83634f581606cc73c4487ddd8cc39a944b951283af23f7d69d5589478",
      // TODO: value
      PythStateId: "0x1f9310238ee9298fb703c3419030b35b22bb1cc37113e3bb5007c99aec79e5b8",
      // **fixed value
      WormholeStateId: "0xaeab97f96cf9877fee2883315d459552b2b921edc16d7ceac6eab944dd88919c",
      // **fixed value
      SupraOracleHolder: "0xaa0315f0748c1f24ddb2b45f7939cff40f7a8104af5ccbc4a1d32f870c0b4105",
      // **fixed value
      Sender: "0x39c70d4ce3ce769a46f46ad80184a88bc25be9b49545751f5425796ef0c3d9ba",
      // TODO: value
      GasObject: "0x1e30410559ed83708ee1bb6b21e3a1dae96f1768ce35ed8233590b130ddc0086"
      // TODO: value
    };
    exports2.ProFundsPoolInfo = {
      "f975bc2d4cca10e3ace8887e20afd77b46c383b4465eac694c4688344955dea4": {
        coinType: "0x2::sui::SUI",
        oracleId: 0
      },
      "e2b5ada45273676e0da8ae10f8fe079a7cec3d0f59187d3d20b1549c275b07ea": {
        coinType: "0x549e8b69270defbfafd4f94e17ec44cdbdd99820b33bda2278dea3b9a32d3f55::cert::CERT",
        oracleId: 5
      },
      "a20e18085ce04be8aa722fbe85423f1ad6b1ae3b1be81ffac00a30f1d6d6ab51": {
        coinType: "0xbde4ba4c2e274a60ce15c1cfff9e5c42e41654ac8b6d906a57efa4bd3c29f47d::hasui::HASUI",
        oracleId: 6
      },
      "9dae0cf104a193217904f88a48ce2cf0221e8cd9073878edd05101d6b771fa09": {
        coinType: "0xa99b8952d4f7d947ea77fe0ecdcc9e5fc0bcab2841d6e2a5aa00c3044e5544b5::navx::NAVX",
        oracleId: 7
      },
      "bc14736bbe4ac59a4e3af6835a98765c15c5f7dbf9e7ba9b36679ce7ff00dc19": {
        coinType: "0x5145494a5f5100e645e4b0aa950fa6b68f614e8c59e17bc5ded3495123a79178::ns::NS",
        oracleId: 13
      },
      "8e25210077ab957b1afec39cbe9165125c93d279daef89ee29b97856385a3f3e": {
        coinType: "0xdeeb7a4662eec9f2f3def03fb937a663dddaa2e215b8078a284d026b7946c270::deep::DEEP",
        oracleId: 15
      },
      "141c67c566de590788ff04f2bcc26e68798304254f6595df93a824b0f6acee2a": {
        coinType: "f16e6b723f242ec745dfd7634ad072c42d5c1d9ac9d62a39c381303eaa57693a::fdusd::FDUSD",
        oracleId: 16
      },
      "523a53e4469fc1fe17791c2c5710e6582145bd50543b9fee9dafcc9aa0c0ef8e": {
        coinType: "e1b45a0e641b9955a20aa0ad1c1f4ad86aad8afb07296d4085e349a50e90bdca::blue::BLUE",
        oracleId: 17
      },
      "463d80f40fc4ac625479938925594ccf1c89146f28ec8489c056879167448224": {
        coinType: "d1b72982e40348d069bb1ff701e634c117bb5f741f44dff91e472d3b01461e55::stsui::STSUI",
        oracleId: 20
      }
    };
    exports2.noDepositCoinType = [
      "0eedc3857f39f5e44b5786ebcd790317902ffca9960f44fcea5b7589cfc7a784::usdt::USDT",
      "0eedc3857f39f5e44b5786ebcd790317902ffca9960f44fcea5b7589cfc7a784::weth::WETH",
      "0x0eedc3857f39f5e44b5786ebcd790317902ffca9960f44fcea5b7589cfc7a784::usdc::USDC"
    ];
  }
});

// node_modules/@mysten/sui.js/node_modules/base-x/src/index.js
var require_src = __commonJS({
  "node_modules/@mysten/sui.js/node_modules/base-x/src/index.js"(exports2, module2) {
    "use strict";
    function base(ALPHABET) {
      if (ALPHABET.length >= 255) {
        throw new TypeError("Alphabet too long");
      }
      var BASE_MAP = new Uint8Array(256);
      for (var j = 0; j < BASE_MAP.length; j++) {
        BASE_MAP[j] = 255;
      }
      for (var i = 0; i < ALPHABET.length; i++) {
        var x = ALPHABET.charAt(i);
        var xc = x.charCodeAt(0);
        if (BASE_MAP[xc] !== 255) {
          throw new TypeError(x + " is ambiguous");
        }
        BASE_MAP[xc] = i;
      }
      var BASE = ALPHABET.length;
      var LEADER = ALPHABET.charAt(0);
      var FACTOR = Math.log(BASE) / Math.log(256);
      var iFACTOR = Math.log(256) / Math.log(BASE);
      function encode2(source) {
        if (source instanceof Uint8Array) {
        } else if (ArrayBuffer.isView(source)) {
          source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
        } else if (Array.isArray(source)) {
          source = Uint8Array.from(source);
        }
        if (!(source instanceof Uint8Array)) {
          throw new TypeError("Expected Uint8Array");
        }
        if (source.length === 0) {
          return "";
        }
        var zeroes = 0;
        var length = 0;
        var pbegin = 0;
        var pend = source.length;
        while (pbegin !== pend && source[pbegin] === 0) {
          pbegin++;
          zeroes++;
        }
        var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
        var b58 = new Uint8Array(size);
        while (pbegin !== pend) {
          var carry = source[pbegin];
          var i2 = 0;
          for (var it1 = size - 1; (carry !== 0 || i2 < length) && it1 !== -1; it1--, i2++) {
            carry += 256 * b58[it1] >>> 0;
            b58[it1] = carry % BASE >>> 0;
            carry = carry / BASE >>> 0;
          }
          if (carry !== 0) {
            throw new Error("Non-zero carry");
          }
          length = i2;
          pbegin++;
        }
        var it2 = size - length;
        while (it2 !== size && b58[it2] === 0) {
          it2++;
        }
        var str = LEADER.repeat(zeroes);
        for (; it2 < size; ++it2) {
          str += ALPHABET.charAt(b58[it2]);
        }
        return str;
      }
      function decodeUnsafe(source) {
        if (typeof source !== "string") {
          throw new TypeError("Expected String");
        }
        if (source.length === 0) {
          return new Uint8Array();
        }
        var psz = 0;
        var zeroes = 0;
        var length = 0;
        while (source[psz] === LEADER) {
          zeroes++;
          psz++;
        }
        var size = (source.length - psz) * FACTOR + 1 >>> 0;
        var b256 = new Uint8Array(size);
        while (source[psz]) {
          var charCode = source.charCodeAt(psz);
          if (charCode > 255) {
            return;
          }
          var carry = BASE_MAP[charCode];
          if (carry === 255) {
            return;
          }
          var i2 = 0;
          for (var it3 = size - 1; (carry !== 0 || i2 < length) && it3 !== -1; it3--, i2++) {
            carry += BASE * b256[it3] >>> 0;
            b256[it3] = carry % 256 >>> 0;
            carry = carry / 256 >>> 0;
          }
          if (carry !== 0) {
            throw new Error("Non-zero carry");
          }
          length = i2;
          psz++;
        }
        var it4 = size - length;
        while (it4 !== size && b256[it4] === 0) {
          it4++;
        }
        var vch = new Uint8Array(zeroes + (size - it4));
        var j2 = zeroes;
        while (it4 !== size) {
          vch[j2++] = b256[it4++];
        }
        return vch;
      }
      function decode2(string2) {
        var buffer = decodeUnsafe(string2);
        if (buffer) {
          return buffer;
        }
        throw new Error("Non-base" + BASE + " character");
      }
      return {
        encode: encode2,
        decodeUnsafe,
        decode: decode2
      };
    }
    module2.exports = base;
  }
});

// node_modules/@mysten/sui.js/node_modules/bs58/index.js
var require_bs58 = __commonJS({
  "node_modules/@mysten/sui.js/node_modules/bs58/index.js"(exports2, module2) {
    var basex = require_src();
    var ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
    module2.exports = basex(ALPHABET);
  }
});

// node_modules/@mysten/sui.js/node_modules/@mysten/bcs/dist/cjs/b58.js
var require_b582 = __commonJS({
  "node_modules/@mysten/sui.js/node_modules/@mysten/bcs/dist/cjs/b58.js"(exports2, module2) {
    "use strict";
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod2, isNodeMode, target) => (target = mod2 != null ? __create(__getProtoOf(mod2)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod2 || !mod2.__esModule ? __defProp(target, "default", { value: mod2, enumerable: true }) : target,
      mod2
    ));
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var b58_exports = {};
    __export2(b58_exports, {
      fromB58: () => fromB58,
      toB58: () => toB58
    });
    module2.exports = __toCommonJS2(b58_exports);
    var import_bs582 = __toESM2(require_bs58());
    var toB58 = (buffer) => import_bs582.default.encode(buffer);
    var fromB58 = (str) => import_bs582.default.decode(str);
  }
});

// node_modules/@mysten/sui.js/node_modules/@mysten/bcs/dist/cjs/b64.js
var require_b642 = __commonJS({
  "node_modules/@mysten/sui.js/node_modules/@mysten/bcs/dist/cjs/b64.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var b64_exports = {};
    __export2(b64_exports, {
      fromB64: () => fromB64,
      toB64: () => toB64
    });
    module2.exports = __toCommonJS2(b64_exports);
    function fromB64(base64String) {
      return Uint8Array.from(atob(base64String), (char) => char.charCodeAt(0));
    }
    var CHUNK_SIZE2 = 8192;
    function toB64(bytes) {
      if (bytes.length < CHUNK_SIZE2) {
        return btoa(String.fromCharCode(...bytes));
      }
      let output = "";
      for (var i = 0; i < bytes.length; i += CHUNK_SIZE2) {
        const chunk = bytes.slice(i, i + CHUNK_SIZE2);
        output += String.fromCharCode(...chunk);
      }
      return btoa(output);
    }
  }
});

// node_modules/@mysten/sui.js/node_modules/@mysten/bcs/dist/cjs/hex.js
var require_hex2 = __commonJS({
  "node_modules/@mysten/sui.js/node_modules/@mysten/bcs/dist/cjs/hex.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var hex_exports = {};
    __export2(hex_exports, {
      fromHEX: () => fromHEX,
      toHEX: () => toHEX
    });
    module2.exports = __toCommonJS2(hex_exports);
    function fromHEX(hexStr) {
      var _a;
      const normalized = hexStr.startsWith("0x") ? hexStr.slice(2) : hexStr;
      const padded = normalized.length % 2 === 0 ? normalized : `0${normalized}}`;
      const intArr = ((_a = padded.match(/.{2}/g)) == null ? void 0 : _a.map((byte) => parseInt(byte, 16))) ?? [];
      return Uint8Array.from(intArr);
    }
    function toHEX(bytes) {
      return bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, "0"), "");
    }
  }
});

// node_modules/@mysten/sui.js/node_modules/@mysten/bcs/dist/cjs/uleb.js
var require_uleb2 = __commonJS({
  "node_modules/@mysten/sui.js/node_modules/@mysten/bcs/dist/cjs/uleb.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var uleb_exports = {};
    __export2(uleb_exports, {
      ulebDecode: () => ulebDecode,
      ulebEncode: () => ulebEncode
    });
    module2.exports = __toCommonJS2(uleb_exports);
    function ulebEncode(num2) {
      let arr = [];
      let len = 0;
      if (num2 === 0) {
        return [0];
      }
      while (num2 > 0) {
        arr[len] = num2 & 127;
        if (num2 >>= 7) {
          arr[len] |= 128;
        }
        len += 1;
      }
      return arr;
    }
    function ulebDecode(arr) {
      let total = 0;
      let shift = 0;
      let len = 0;
      while (true) {
        let byte = arr[len];
        len += 1;
        total |= (byte & 127) << shift;
        if ((byte & 128) === 0) {
          break;
        }
        shift += 7;
      }
      return {
        value: total,
        length: len
      };
    }
  }
});

// node_modules/@mysten/sui.js/node_modules/@mysten/bcs/dist/cjs/reader.js
var require_reader2 = __commonJS({
  "node_modules/@mysten/sui.js/node_modules/@mysten/bcs/dist/cjs/reader.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var reader_exports = {};
    __export2(reader_exports, {
      BcsReader: () => BcsReader
    });
    module2.exports = __toCommonJS2(reader_exports);
    var import_uleb = require_uleb2();
    var BcsReader = class {
      /**
       * @param {Uint8Array} data Data to use as a buffer.
       */
      constructor(data) {
        this.bytePosition = 0;
        this.dataView = new DataView(data.buffer);
      }
      /**
       * Shift current cursor position by `bytes`.
       *
       * @param {Number} bytes Number of bytes to
       * @returns {this} Self for possible chaining.
       */
      shift(bytes) {
        this.bytePosition += bytes;
        return this;
      }
      /**
       * Read U8 value from the buffer and shift cursor by 1.
       * @returns
       */
      read8() {
        let value = this.dataView.getUint8(this.bytePosition);
        this.shift(1);
        return value;
      }
      /**
       * Read U16 value from the buffer and shift cursor by 2.
       * @returns
       */
      read16() {
        let value = this.dataView.getUint16(this.bytePosition, true);
        this.shift(2);
        return value;
      }
      /**
       * Read U32 value from the buffer and shift cursor by 4.
       * @returns
       */
      read32() {
        let value = this.dataView.getUint32(this.bytePosition, true);
        this.shift(4);
        return value;
      }
      /**
       * Read U64 value from the buffer and shift cursor by 8.
       * @returns
       */
      read64() {
        let value1 = this.read32();
        let value2 = this.read32();
        let result = value2.toString(16) + value1.toString(16).padStart(8, "0");
        return BigInt("0x" + result).toString(10);
      }
      /**
       * Read U128 value from the buffer and shift cursor by 16.
       */
      read128() {
        let value1 = BigInt(this.read64());
        let value2 = BigInt(this.read64());
        let result = value2.toString(16) + value1.toString(16).padStart(16, "0");
        return BigInt("0x" + result).toString(10);
      }
      /**
       * Read U128 value from the buffer and shift cursor by 32.
       * @returns
       */
      read256() {
        let value1 = BigInt(this.read128());
        let value2 = BigInt(this.read128());
        let result = value2.toString(16) + value1.toString(16).padStart(32, "0");
        return BigInt("0x" + result).toString(10);
      }
      /**
       * Read `num` number of bytes from the buffer and shift cursor by `num`.
       * @param num Number of bytes to read.
       */
      readBytes(num2) {
        let start = this.bytePosition + this.dataView.byteOffset;
        let value = new Uint8Array(this.dataView.buffer, start, num2);
        this.shift(num2);
        return value;
      }
      /**
       * Read ULEB value - an integer of varying size. Used for enum indexes and
       * vector lengths.
       * @returns {Number} The ULEB value.
       */
      readULEB() {
        let start = this.bytePosition + this.dataView.byteOffset;
        let buffer = new Uint8Array(this.dataView.buffer, start);
        let { value, length } = (0, import_uleb.ulebDecode)(buffer);
        this.shift(length);
        return value;
      }
      /**
       * Read a BCS vector: read a length and then apply function `cb` X times
       * where X is the length of the vector, defined as ULEB in BCS bytes.
       * @param cb Callback to process elements of vector.
       * @returns {Array<Any>} Array of the resulting values, returned by callback.
       */
      readVec(cb) {
        let length = this.readULEB();
        let result = [];
        for (let i = 0; i < length; i++) {
          result.push(cb(this, i, length));
        }
        return result;
      }
    };
  }
});

// node_modules/@mysten/sui.js/node_modules/@mysten/bcs/dist/cjs/utils.js
var require_utils8 = __commonJS({
  "node_modules/@mysten/sui.js/node_modules/@mysten/bcs/dist/cjs/utils.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var utils_exports = {};
    __export2(utils_exports, {
      decodeStr: () => decodeStr,
      encodeStr: () => encodeStr,
      splitGenericParameters: () => splitGenericParameters
    });
    module2.exports = __toCommonJS2(utils_exports);
    var import_b58 = require_b582();
    var import_b64 = require_b642();
    var import_hex = require_hex2();
    function encodeStr(data, encoding) {
      switch (encoding) {
        case "base58":
          return (0, import_b58.toB58)(data);
        case "base64":
          return (0, import_b64.toB64)(data);
        case "hex":
          return (0, import_hex.toHEX)(data);
        default:
          throw new Error("Unsupported encoding, supported values are: base64, hex");
      }
    }
    function decodeStr(data, encoding) {
      switch (encoding) {
        case "base58":
          return (0, import_b58.fromB58)(data);
        case "base64":
          return (0, import_b64.fromB64)(data);
        case "hex":
          return (0, import_hex.fromHEX)(data);
        default:
          throw new Error("Unsupported encoding, supported values are: base64, hex");
      }
    }
    function splitGenericParameters(str, genericSeparators = ["<", ">"]) {
      const [left, right] = genericSeparators;
      const tok = [];
      let word = "";
      let nestedAngleBrackets = 0;
      for (let i = 0; i < str.length; i++) {
        const char = str[i];
        if (char === left) {
          nestedAngleBrackets++;
        }
        if (char === right) {
          nestedAngleBrackets--;
        }
        if (nestedAngleBrackets === 0 && char === ",") {
          tok.push(word.trim());
          word = "";
          continue;
        }
        word += char;
      }
      tok.push(word.trim());
      return tok;
    }
  }
});

// node_modules/@mysten/sui.js/node_modules/@mysten/bcs/dist/cjs/writer.js
var require_writer2 = __commonJS({
  "node_modules/@mysten/sui.js/node_modules/@mysten/bcs/dist/cjs/writer.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var writer_exports = {};
    __export2(writer_exports, {
      BcsWriter: () => BcsWriter
    });
    module2.exports = __toCommonJS2(writer_exports);
    var import_uleb = require_uleb2();
    var import_utils4 = require_utils8();
    var BcsWriter = class {
      constructor({ size = 1024, maxSize, allocateSize = 1024 } = {}) {
        this.bytePosition = 0;
        this.size = size;
        this.maxSize = maxSize || size;
        this.allocateSize = allocateSize;
        this.dataView = new DataView(new ArrayBuffer(size));
      }
      ensureSizeOrGrow(bytes) {
        const requiredSize = this.bytePosition + bytes;
        if (requiredSize > this.size) {
          const nextSize = Math.min(this.maxSize, this.size + this.allocateSize);
          if (requiredSize > nextSize) {
            throw new Error(
              `Attempting to serialize to BCS, but buffer does not have enough size. Allocated size: ${this.size}, Max size: ${this.maxSize}, Required size: ${requiredSize}`
            );
          }
          this.size = nextSize;
          const nextBuffer = new ArrayBuffer(this.size);
          new Uint8Array(nextBuffer).set(new Uint8Array(this.dataView.buffer));
          this.dataView = new DataView(nextBuffer);
        }
      }
      /**
       * Shift current cursor position by `bytes`.
       *
       * @param {Number} bytes Number of bytes to
       * @returns {this} Self for possible chaining.
       */
      shift(bytes) {
        this.bytePosition += bytes;
        return this;
      }
      /**
       * Write a U8 value into a buffer and shift cursor position by 1.
       * @param {Number} value Value to write.
       * @returns {this}
       */
      write8(value) {
        this.ensureSizeOrGrow(1);
        this.dataView.setUint8(this.bytePosition, Number(value));
        return this.shift(1);
      }
      /**
       * Write a U16 value into a buffer and shift cursor position by 2.
       * @param {Number} value Value to write.
       * @returns {this}
       */
      write16(value) {
        this.ensureSizeOrGrow(2);
        this.dataView.setUint16(this.bytePosition, Number(value), true);
        return this.shift(2);
      }
      /**
       * Write a U32 value into a buffer and shift cursor position by 4.
       * @param {Number} value Value to write.
       * @returns {this}
       */
      write32(value) {
        this.ensureSizeOrGrow(4);
        this.dataView.setUint32(this.bytePosition, Number(value), true);
        return this.shift(4);
      }
      /**
       * Write a U64 value into a buffer and shift cursor position by 8.
       * @param {bigint} value Value to write.
       * @returns {this}
       */
      write64(value) {
        toLittleEndian(BigInt(value), 8).forEach((el) => this.write8(el));
        return this;
      }
      /**
       * Write a U128 value into a buffer and shift cursor position by 16.
       *
       * @param {bigint} value Value to write.
       * @returns {this}
       */
      write128(value) {
        toLittleEndian(BigInt(value), 16).forEach((el) => this.write8(el));
        return this;
      }
      /**
       * Write a U256 value into a buffer and shift cursor position by 16.
       *
       * @param {bigint} value Value to write.
       * @returns {this}
       */
      write256(value) {
        toLittleEndian(BigInt(value), 32).forEach((el) => this.write8(el));
        return this;
      }
      /**
       * Write a ULEB value into a buffer and shift cursor position by number of bytes
       * written.
       * @param {Number} value Value to write.
       * @returns {this}
       */
      writeULEB(value) {
        (0, import_uleb.ulebEncode)(value).forEach((el) => this.write8(el));
        return this;
      }
      /**
       * Write a vector into a buffer by first writing the vector length and then calling
       * a callback on each passed value.
       *
       * @param {Array<Any>} vector Array of elements to write.
       * @param {WriteVecCb} cb Callback to call on each element of the vector.
       * @returns {this}
       */
      writeVec(vector, cb) {
        this.writeULEB(vector.length);
        Array.from(vector).forEach((el, i) => cb(this, el, i, vector.length));
        return this;
      }
      /**
       * Adds support for iterations over the object.
       * @returns {Uint8Array}
       */
      *[Symbol.iterator]() {
        for (let i = 0; i < this.bytePosition; i++) {
          yield this.dataView.getUint8(i);
        }
        return this.toBytes();
      }
      /**
       * Get underlying buffer taking only value bytes (in case initial buffer size was bigger).
       * @returns {Uint8Array} Resulting bcs.
       */
      toBytes() {
        return new Uint8Array(this.dataView.buffer.slice(0, this.bytePosition));
      }
      /**
       * Represent data as 'hex' or 'base64'
       * @param encoding Encoding to use: 'base64' or 'hex'
       */
      toString(encoding) {
        return (0, import_utils4.encodeStr)(this.toBytes(), encoding);
      }
    };
    function toLittleEndian(bigint, size) {
      let result = new Uint8Array(size);
      let i = 0;
      while (bigint > 0) {
        result[i] = Number(bigint % BigInt(256));
        bigint = bigint / BigInt(256);
        i += 1;
      }
      return result;
    }
  }
});

// node_modules/@mysten/sui.js/node_modules/@mysten/bcs/dist/cjs/bcs-type.js
var require_bcs_type2 = __commonJS({
  "node_modules/@mysten/sui.js/node_modules/@mysten/bcs/dist/cjs/bcs-type.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var __accessCheck = (obj, member, msg) => {
      if (!member.has(obj))
        throw TypeError("Cannot " + msg);
    };
    var __privateGet2 = (obj, member, getter) => {
      __accessCheck(obj, member, "read from private field");
      return getter ? getter.call(obj) : member.get(obj);
    };
    var __privateAdd2 = (obj, member, value) => {
      if (member.has(obj))
        throw TypeError("Cannot add the same private member more than once");
      member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
    };
    var __privateSet2 = (obj, member, value, setter) => {
      __accessCheck(obj, member, "write to private field");
      setter ? setter.call(obj, value) : member.set(obj, value);
      return value;
    };
    var bcs_type_exports = {};
    __export2(bcs_type_exports, {
      BcsType: () => BcsType,
      SerializedBcs: () => SerializedBcs,
      bigUIntBcsType: () => bigUIntBcsType,
      dynamicSizeBcsType: () => dynamicSizeBcsType,
      fixedSizeBcsType: () => fixedSizeBcsType,
      isSerializedBcs: () => isSerializedBcs,
      lazyBcsType: () => lazyBcsType,
      stringLikeBcsType: () => stringLikeBcsType,
      uIntBcsType: () => uIntBcsType
    });
    module2.exports = __toCommonJS2(bcs_type_exports);
    var import_b58 = require_b582();
    var import_b64 = require_b642();
    var import_hex = require_hex2();
    var import_reader = require_reader2();
    var import_uleb = require_uleb2();
    var import_writer = require_writer2();
    var _write;
    var _serialize;
    var _schema;
    var _bytes;
    var _BcsType = class {
      constructor(options) {
        __privateAdd2(this, _write, void 0);
        __privateAdd2(this, _serialize, void 0);
        this.name = options.name;
        this.read = options.read;
        this.serializedSize = options.serializedSize ?? (() => null);
        __privateSet2(this, _write, options.write);
        __privateSet2(this, _serialize, options.serialize ?? ((value, options2) => {
          const writer = new import_writer.BcsWriter({ size: this.serializedSize(value) ?? void 0, ...options2 });
          __privateGet2(this, _write).call(this, value, writer);
          return writer.toBytes();
        }));
        this.validate = options.validate ?? (() => {
        });
      }
      write(value, writer) {
        this.validate(value);
        __privateGet2(this, _write).call(this, value, writer);
      }
      serialize(value, options) {
        this.validate(value);
        return new SerializedBcs(this, __privateGet2(this, _serialize).call(this, value, options));
      }
      parse(bytes) {
        const reader = new import_reader.BcsReader(bytes);
        return this.read(reader);
      }
      transform({
        name,
        input,
        output
      }) {
        return new _BcsType({
          name: name ?? this.name,
          read: (reader) => output(this.read(reader)),
          write: (value, writer) => __privateGet2(this, _write).call(this, input(value), writer),
          serializedSize: (value) => this.serializedSize(input(value)),
          serialize: (value, options) => __privateGet2(this, _serialize).call(this, input(value), options),
          validate: (value) => this.validate(input(value))
        });
      }
    };
    var BcsType = _BcsType;
    _write = /* @__PURE__ */ new WeakMap();
    _serialize = /* @__PURE__ */ new WeakMap();
    var SERIALIZED_BCS_BRAND = Symbol.for("@mysten/serialized-bcs");
    function isSerializedBcs(obj) {
      return !!obj && typeof obj === "object" && obj[SERIALIZED_BCS_BRAND] === true;
    }
    var SerializedBcs = class {
      constructor(type2, schema) {
        __privateAdd2(this, _schema, void 0);
        __privateAdd2(this, _bytes, void 0);
        __privateSet2(this, _schema, type2);
        __privateSet2(this, _bytes, schema);
      }
      // Used to brand SerializedBcs so that they can be identified, even between multiple copies
      // of the @mysten/bcs package are installed
      get [SERIALIZED_BCS_BRAND]() {
        return true;
      }
      toBytes() {
        return __privateGet2(this, _bytes);
      }
      toHex() {
        return (0, import_hex.toHEX)(__privateGet2(this, _bytes));
      }
      toBase64() {
        return (0, import_b64.toB64)(__privateGet2(this, _bytes));
      }
      toBase58() {
        return (0, import_b58.toB58)(__privateGet2(this, _bytes));
      }
      parse() {
        return __privateGet2(this, _schema).parse(__privateGet2(this, _bytes));
      }
    };
    _schema = /* @__PURE__ */ new WeakMap();
    _bytes = /* @__PURE__ */ new WeakMap();
    function fixedSizeBcsType({
      size,
      ...options
    }) {
      return new BcsType({
        ...options,
        serializedSize: () => size
      });
    }
    function uIntBcsType({
      readMethod,
      writeMethod,
      ...options
    }) {
      return fixedSizeBcsType({
        ...options,
        read: (reader) => reader[readMethod](),
        write: (value, writer) => writer[writeMethod](value),
        validate: (value) => {
          var _a;
          if (value < 0 || value > options.maxValue) {
            throw new TypeError(
              `Invalid ${options.name} value: ${value}. Expected value in range 0-${options.maxValue}`
            );
          }
          (_a = options.validate) == null ? void 0 : _a.call(options, value);
        }
      });
    }
    function bigUIntBcsType({
      readMethod,
      writeMethod,
      ...options
    }) {
      return fixedSizeBcsType({
        ...options,
        read: (reader) => reader[readMethod](),
        write: (value, writer) => writer[writeMethod](BigInt(value)),
        validate: (val) => {
          var _a;
          const value = BigInt(val);
          if (value < 0 || value > options.maxValue) {
            throw new TypeError(
              `Invalid ${options.name} value: ${value}. Expected value in range 0-${options.maxValue}`
            );
          }
          (_a = options.validate) == null ? void 0 : _a.call(options, value);
        }
      });
    }
    function dynamicSizeBcsType({
      serialize: serialize2,
      ...options
    }) {
      const type2 = new BcsType({
        ...options,
        serialize: serialize2,
        write: (value, writer) => {
          for (const byte of type2.serialize(value).toBytes()) {
            writer.write8(byte);
          }
        }
      });
      return type2;
    }
    function stringLikeBcsType({
      toBytes: toBytes2,
      fromBytes,
      ...options
    }) {
      return new BcsType({
        ...options,
        read: (reader) => {
          const length = reader.readULEB();
          const bytes = reader.readBytes(length);
          return fromBytes(bytes);
        },
        write: (hex, writer) => {
          const bytes = toBytes2(hex);
          writer.writeULEB(bytes.length);
          for (let i = 0; i < bytes.length; i++) {
            writer.write8(bytes[i]);
          }
        },
        serialize: (value) => {
          const bytes = toBytes2(value);
          const size = (0, import_uleb.ulebEncode)(bytes.length);
          const result = new Uint8Array(size.length + bytes.length);
          result.set(size, 0);
          result.set(bytes, size.length);
          return result;
        },
        validate: (value) => {
          var _a;
          if (typeof value !== "string") {
            throw new TypeError(`Invalid ${options.name} value: ${value}. Expected string`);
          }
          (_a = options.validate) == null ? void 0 : _a.call(options, value);
        }
      });
    }
    function lazyBcsType(cb) {
      let lazyType = null;
      function getType() {
        if (!lazyType) {
          lazyType = cb();
        }
        return lazyType;
      }
      return new BcsType({
        name: "lazy",
        read: (data) => getType().read(data),
        serializedSize: (value) => getType().serializedSize(value),
        write: (value, writer) => getType().write(value, writer),
        serialize: (value, options) => getType().serialize(value, options).toBytes()
      });
    }
  }
});

// node_modules/@mysten/sui.js/node_modules/@mysten/bcs/dist/cjs/bcs.js
var require_bcs5 = __commonJS({
  "node_modules/@mysten/sui.js/node_modules/@mysten/bcs/dist/cjs/bcs.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var bcs_exports = {};
    __export2(bcs_exports, {
      bcs: () => bcs
    });
    module2.exports = __toCommonJS2(bcs_exports);
    var import_bcs_type = require_bcs_type2();
    var import_uleb = require_uleb2();
    var bcs = {
      /**
       * Creates a BcsType that can be used to read and write an 8-bit unsigned integer.
       * @example
       * bcs.u8().serialize(255).toBytes() // Uint8Array [ 255 ]
       */
      u8(options) {
        return (0, import_bcs_type.uIntBcsType)({
          name: "u8",
          readMethod: "read8",
          writeMethod: "write8",
          size: 1,
          maxValue: 2 ** 8 - 1,
          ...options
        });
      },
      /**
       * Creates a BcsType that can be used to read and write a 16-bit unsigned integer.
       * @example
       * bcs.u16().serialize(65535).toBytes() // Uint8Array [ 255, 255 ]
       */
      u16(options) {
        return (0, import_bcs_type.uIntBcsType)({
          name: "u16",
          readMethod: "read16",
          writeMethod: "write16",
          size: 2,
          maxValue: 2 ** 16 - 1,
          ...options
        });
      },
      /**
       * Creates a BcsType that can be used to read and write a 32-bit unsigned integer.
       * @example
       * bcs.u32().serialize(4294967295).toBytes() // Uint8Array [ 255, 255, 255, 255 ]
       */
      u32(options) {
        return (0, import_bcs_type.uIntBcsType)({
          name: "u32",
          readMethod: "read32",
          writeMethod: "write32",
          size: 4,
          maxValue: 2 ** 32 - 1,
          ...options
        });
      },
      /**
       * Creates a BcsType that can be used to read and write a 64-bit unsigned integer.
       * @example
       * bcs.u64().serialize(1).toBytes() // Uint8Array [ 1, 0, 0, 0, 0, 0, 0, 0 ]
       */
      u64(options) {
        return (0, import_bcs_type.bigUIntBcsType)({
          name: "u64",
          readMethod: "read64",
          writeMethod: "write64",
          size: 8,
          maxValue: 2n ** 64n - 1n,
          ...options
        });
      },
      /**
       * Creates a BcsType that can be used to read and write a 128-bit unsigned integer.
       * @example
       * bcs.u128().serialize(1).toBytes() // Uint8Array [ 1, ..., 0 ]
       */
      u128(options) {
        return (0, import_bcs_type.bigUIntBcsType)({
          name: "u128",
          readMethod: "read128",
          writeMethod: "write128",
          size: 16,
          maxValue: 2n ** 128n - 1n,
          ...options
        });
      },
      /**
       * Creates a BcsType that can be used to read and write a 256-bit unsigned integer.
       * @example
       * bcs.u256().serialize(1).toBytes() // Uint8Array [ 1, ..., 0 ]
       */
      u256(options) {
        return (0, import_bcs_type.bigUIntBcsType)({
          name: "u256",
          readMethod: "read256",
          writeMethod: "write256",
          size: 32,
          maxValue: 2n ** 256n - 1n,
          ...options
        });
      },
      /**
       * Creates a BcsType that can be used to read and write boolean values.
       * @example
       * bcs.bool().serialize(true).toBytes() // Uint8Array [ 1 ]
       */
      bool(options) {
        return (0, import_bcs_type.fixedSizeBcsType)({
          name: "bool",
          size: 1,
          read: (reader) => reader.read8() === 1,
          write: (value, writer) => writer.write8(value ? 1 : 0),
          ...options,
          validate: (value) => {
            var _a;
            (_a = options == null ? void 0 : options.validate) == null ? void 0 : _a.call(options, value);
            if (typeof value !== "boolean") {
              throw new TypeError(`Expected boolean, found ${typeof value}`);
            }
          }
        });
      },
      /**
       * Creates a BcsType that can be used to read and write unsigned LEB encoded integers
       * @example
       *
       */
      uleb128(options) {
        return (0, import_bcs_type.dynamicSizeBcsType)({
          name: "uleb128",
          read: (reader) => reader.readULEB(),
          serialize: (value) => {
            return Uint8Array.from((0, import_uleb.ulebEncode)(value));
          },
          ...options
        });
      },
      /**
       * Creates a BcsType representing a fixed length byte array
       * @param size The number of bytes this types represents
       * @example
       * bcs.bytes(3).serialize(new Uint8Array([1, 2, 3])).toBytes() // Uint8Array [1, 2, 3]
       */
      bytes(size, options) {
        return (0, import_bcs_type.fixedSizeBcsType)({
          name: `bytes[${size}]`,
          size,
          read: (reader) => reader.readBytes(size),
          write: (value, writer) => {
            for (let i = 0; i < size; i++) {
              writer.write8(value[i] ?? 0);
            }
          },
          ...options,
          validate: (value) => {
            var _a;
            (_a = options == null ? void 0 : options.validate) == null ? void 0 : _a.call(options, value);
            if (!("length" in value)) {
              throw new TypeError(`Expected array, found ${typeof value}`);
            }
            if (value.length !== size) {
              throw new TypeError(`Expected array of length ${size}, found ${value.length}`);
            }
          }
        });
      },
      /**
       * Creates a BcsType that can ser/de string values.  Strings will be UTF-8 encoded
       * @example
       * bcs.string().serialize('a').toBytes() // Uint8Array [ 1, 97 ]
       */
      string(options) {
        return (0, import_bcs_type.stringLikeBcsType)({
          name: "string",
          toBytes: (value) => new TextEncoder().encode(value),
          fromBytes: (bytes) => new TextDecoder().decode(bytes),
          ...options
        });
      },
      /**
       * Creates a BcsType that represents a fixed length array of a given type
       * @param size The number of elements in the array
       * @param type The BcsType of each element in the array
       * @example
       * bcs.fixedArray(3, bcs.u8()).serialize([1, 2, 3]).toBytes() // Uint8Array [ 1, 2, 3 ]
       */
      fixedArray(size, type2, options) {
        return new import_bcs_type.BcsType({
          name: `${type2.name}[${size}]`,
          read: (reader) => {
            const result = new Array(size);
            for (let i = 0; i < size; i++) {
              result[i] = type2.read(reader);
            }
            return result;
          },
          write: (value, writer) => {
            for (const item of value) {
              type2.write(item, writer);
            }
          },
          ...options,
          validate: (value) => {
            var _a;
            (_a = options == null ? void 0 : options.validate) == null ? void 0 : _a.call(options, value);
            if (!("length" in value)) {
              throw new TypeError(`Expected array, found ${typeof value}`);
            }
            if (value.length !== size) {
              throw new TypeError(`Expected array of length ${size}, found ${value.length}`);
            }
          }
        });
      },
      /**
       * Creates a BcsType representing an optional value
       * @param type The BcsType of the optional value
       * @example
       * bcs.option(bcs.u8()).serialize(null).toBytes() // Uint8Array [ 0 ]
       * bcs.option(bcs.u8()).serialize(1).toBytes() // Uint8Array [ 1, 1 ]
       */
      option(type2) {
        return bcs.enum(`Option<${type2.name}>`, {
          None: null,
          Some: type2
        }).transform({
          input: (value) => {
            if (value == null) {
              return { None: true };
            }
            return { Some: value };
          },
          output: (value) => {
            if ("Some" in value) {
              return value.Some;
            }
            return null;
          }
        });
      },
      /**
       * Creates a BcsType representing a variable length vector of a given type
       * @param type The BcsType of each element in the vector
       *
       * @example
       * bcs.vector(bcs.u8()).toBytes([1, 2, 3]) // Uint8Array [ 3, 1, 2, 3 ]
       */
      vector(type2, options) {
        return new import_bcs_type.BcsType({
          name: `vector<${type2.name}>`,
          read: (reader) => {
            const length = reader.readULEB();
            const result = new Array(length);
            for (let i = 0; i < length; i++) {
              result[i] = type2.read(reader);
            }
            return result;
          },
          write: (value, writer) => {
            writer.writeULEB(value.length);
            for (const item of value) {
              type2.write(item, writer);
            }
          },
          ...options,
          validate: (value) => {
            var _a;
            (_a = options == null ? void 0 : options.validate) == null ? void 0 : _a.call(options, value);
            if (!("length" in value)) {
              throw new TypeError(`Expected array, found ${typeof value}`);
            }
          }
        });
      },
      /**
       * Creates a BcsType representing a tuple of a given set of types
       * @param types The BcsTypes for each element in the tuple
       *
       * @example
       * const tuple = bcs.tuple([bcs.u8(), bcs.string(), bcs.bool()])
       * tuple.serialize([1, 'a', true]).toBytes() // Uint8Array [ 1, 1, 97, 1 ]
       */
      tuple(types, options) {
        return new import_bcs_type.BcsType({
          name: `(${types.map((t) => t.name).join(", ")})`,
          serializedSize: (values) => {
            let total = 0;
            for (let i = 0; i < types.length; i++) {
              const size = types[i].serializedSize(values[i]);
              if (size == null) {
                return null;
              }
              total += size;
            }
            return total;
          },
          read: (reader) => {
            const result = [];
            for (const type2 of types) {
              result.push(type2.read(reader));
            }
            return result;
          },
          write: (value, writer) => {
            for (let i = 0; i < types.length; i++) {
              types[i].write(value[i], writer);
            }
          },
          ...options,
          validate: (value) => {
            var _a;
            (_a = options == null ? void 0 : options.validate) == null ? void 0 : _a.call(options, value);
            if (!Array.isArray(value)) {
              throw new TypeError(`Expected array, found ${typeof value}`);
            }
            if (value.length !== types.length) {
              throw new TypeError(`Expected array of length ${types.length}, found ${value.length}`);
            }
          }
        });
      },
      /**
       * Creates a BcsType representing a struct of a given set of fields
       * @param name The name of the struct
       * @param fields The fields of the struct. The order of the fields affects how data is serialized and deserialized
       *
       * @example
       * const struct = bcs.struct('MyStruct', {
       *  a: bcs.u8(),
       *  b: bcs.string(),
       * })
       * struct.serialize({ a: 1, b: 'a' }).toBytes() // Uint8Array [ 1, 1, 97 ]
       */
      struct(name, fields, options) {
        const canonicalOrder = Object.entries(fields);
        return new import_bcs_type.BcsType({
          name,
          serializedSize: (values) => {
            let total = 0;
            for (const [field, type2] of canonicalOrder) {
              const size = type2.serializedSize(values[field]);
              if (size == null) {
                return null;
              }
              total += size;
            }
            return total;
          },
          read: (reader) => {
            const result = {};
            for (const [field, type2] of canonicalOrder) {
              result[field] = type2.read(reader);
            }
            return result;
          },
          write: (value, writer) => {
            for (const [field, type2] of canonicalOrder) {
              type2.write(value[field], writer);
            }
          },
          ...options,
          validate: (value) => {
            var _a;
            (_a = options == null ? void 0 : options.validate) == null ? void 0 : _a.call(options, value);
            if (typeof value !== "object" || value == null) {
              throw new TypeError(`Expected object, found ${typeof value}`);
            }
          }
        });
      },
      /**
       * Creates a BcsType representing an enum of a given set of options
       * @param name The name of the enum
       * @param values The values of the enum. The order of the values affects how data is serialized and deserialized.
       * null can be used to represent a variant with no data.
       *
       * @example
       * const enum = bcs.enum('MyEnum', {
       *   A: bcs.u8(),
       *   B: bcs.string(),
       *   C: null,
       * })
       * enum.serialize({ A: 1 }).toBytes() // Uint8Array [ 0, 1 ]
       * enum.serialize({ B: 'a' }).toBytes() // Uint8Array [ 1, 1, 97 ]
       * enum.serialize({ C: true }).toBytes() // Uint8Array [ 2 ]
       */
      enum(name, values, options) {
        const canonicalOrder = Object.entries(values);
        return new import_bcs_type.BcsType({
          name,
          read: (reader) => {
            const index = reader.readULEB();
            const [name2, type2] = canonicalOrder[index];
            return {
              [name2]: (type2 == null ? void 0 : type2.read(reader)) ?? true
            };
          },
          write: (value, writer) => {
            const [name2, val] = Object.entries(value)[0];
            for (let i = 0; i < canonicalOrder.length; i++) {
              const [optionName, optionType] = canonicalOrder[i];
              if (optionName === name2) {
                writer.writeULEB(i);
                optionType == null ? void 0 : optionType.write(val, writer);
                return;
              }
            }
          },
          ...options,
          validate: (value) => {
            var _a;
            (_a = options == null ? void 0 : options.validate) == null ? void 0 : _a.call(options, value);
            if (typeof value !== "object" || value == null) {
              throw new TypeError(`Expected object, found ${typeof value}`);
            }
            const keys = Object.keys(value);
            if (keys.length !== 1) {
              throw new TypeError(`Expected object with one key, found ${keys.length}`);
            }
            const [name2] = keys;
            if (!Object.hasOwn(values, name2)) {
              throw new TypeError(`Invalid enum variant ${name2}`);
            }
          }
        });
      },
      /**
       * Creates a BcsType representing a map of a given key and value type
       * @param keyType The BcsType of the key
       * @param valueType The BcsType of the value
       * @example
       * const map = bcs.map(bcs.u8(), bcs.string())
       * map.serialize(new Map([[2, 'a']])).toBytes() // Uint8Array [ 1, 2, 1, 97 ]
       */
      map(keyType, valueType) {
        return bcs.vector(bcs.tuple([keyType, valueType])).transform({
          name: `Map<${keyType.name}, ${valueType.name}>`,
          input: (value) => {
            return [...value.entries()];
          },
          output: (value) => {
            const result = /* @__PURE__ */ new Map();
            for (const [key, val] of value) {
              result.set(key, val);
            }
            return result;
          }
        });
      },
      /**
       * @deprecated
       *
       * Generics should be implemented as generic typescript functions instead:
       *
       * ```ts
       * function VecMap<K, V>, (K: BcsType<K>, V: BcsType<V>) {
       *   return bcs.struct('VecMap<K, V>', {
       *     keys: bcs.vector(K),
       *     values: bcs.vector(V),
       *   })
       * }
       * ```
       */
      generic(_names, cb) {
        return (...types) => {
          return cb(...types).transform({
            name: `${cb.name}<${types.map((t) => t.name).join(", ")}>`,
            input: (value) => value,
            output: (value) => value
          });
        };
      },
      /**
       * Creates a BcsType that wraps another BcsType which is lazily evaluated. This is useful for creating recursive types.
       * @param cb A callback that returns the BcsType
       */
      lazy(cb) {
        return (0, import_bcs_type.lazyBcsType)(cb);
      }
    };
  }
});

// node_modules/@mysten/sui.js/node_modules/@mysten/bcs/dist/cjs/legacy-registry.js
var require_legacy_registry = __commonJS({
  "node_modules/@mysten/sui.js/node_modules/@mysten/bcs/dist/cjs/legacy-registry.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var legacy_registry_exports = {};
    __export2(legacy_registry_exports, {
      BCS: () => BCS,
      getRustConfig: () => getRustConfig,
      getSuiMoveConfig: () => getSuiMoveConfig,
      registerPrimitives: () => registerPrimitives
    });
    module2.exports = __toCommonJS2(legacy_registry_exports);
    var import_b58 = require_b582();
    var import_b64 = require_b642();
    var import_bcs_type = require_bcs_type2();
    var import_hex = require_hex2();
    var import_reader = require_reader2();
    var import_utils4 = require_utils8();
    var import_writer = require_writer2();
    var SUI_ADDRESS_LENGTH = 32;
    var _BCS = class {
      /**
       * Construct a BCS instance with a prepared schema.
       *
       * @param schema A prepared schema with type definitions
       * @param withPrimitives Whether to register primitive types by default
       */
      constructor(schema) {
        this.types = /* @__PURE__ */ new Map();
        this.counter = 0;
        if (schema instanceof _BCS) {
          this.schema = schema.schema;
          this.types = new Map(schema.types);
          return;
        }
        this.schema = schema;
        this.registerAddressType(_BCS.ADDRESS, schema.addressLength, schema.addressEncoding);
        this.registerVectorType(schema.vectorType);
        if (schema.types && schema.types.structs) {
          for (let name of Object.keys(schema.types.structs)) {
            this.registerStructType(name, schema.types.structs[name]);
          }
        }
        if (schema.types && schema.types.enums) {
          for (let name of Object.keys(schema.types.enums)) {
            this.registerEnumType(name, schema.types.enums[name]);
          }
        }
        if (schema.types && schema.types.aliases) {
          for (let name of Object.keys(schema.types.aliases)) {
            this.registerAlias(name, schema.types.aliases[name]);
          }
        }
        if (schema.withPrimitives !== false) {
          registerPrimitives(this);
        }
      }
      /**
       * Name of the key to use for temporary struct definitions.
       * Returns a temp key + index (for a case when multiple temp
       * structs are processed).
       */
      tempKey() {
        return `bcs-struct-${++this.counter}`;
      }
      /**
       * Serialize data into bcs.
       *
       * @example
       * bcs.registerVectorType('vector<u8>', 'u8');
       *
       * let serialized = BCS
       *   .set('vector<u8>', [1,2,3,4,5,6])
       *   .toBytes();
       *
       * console.assert(toHex(serialized) === '06010203040506');
       *
       * @param type Name of the type to serialize (must be registered) or a struct type.
       * @param data Data to serialize.
       * @param size Serialization buffer size. Default 1024 = 1KB.
       * @return A BCS reader instance. Usually you'd want to call `.toBytes()`
       */
      ser(type2, data, options) {
        if (typeof type2 === "string" || Array.isArray(type2)) {
          const { name, params } = this.parseTypeName(type2);
          return this.getTypeInterface(name).encode(this, data, options, params);
        }
        if (typeof type2 === "object") {
          const key = this.tempKey();
          const temp = new _BCS(this);
          return temp.registerStructType(key, type2).ser(key, data, options);
        }
        throw new Error(`Incorrect type passed into the '.ser()' function. 
${JSON.stringify(type2)}`);
      }
      /**
       * Deserialize BCS into a JS type.
       *
       * @example
       * let num = bcs.ser('u64', '4294967295').toString('hex');
       * let deNum = bcs.de('u64', num, 'hex');
       * console.assert(deNum.toString(10) === '4294967295');
       *
       * @param type Name of the type to deserialize (must be registered) or a struct type definition.
       * @param data Data to deserialize.
       * @param encoding Optional - encoding to use if data is of type String
       * @return Deserialized data.
       */
      de(type2, data, encoding) {
        if (typeof data === "string") {
          if (encoding) {
            data = (0, import_utils4.decodeStr)(data, encoding);
          } else {
            throw new Error("To pass a string to `bcs.de`, specify encoding");
          }
        }
        if (typeof type2 === "string" || Array.isArray(type2)) {
          const { name, params } = this.parseTypeName(type2);
          return this.getTypeInterface(name).decode(this, data, params);
        }
        if (typeof type2 === "object") {
          const temp = new _BCS(this);
          const key = this.tempKey();
          return temp.registerStructType(key, type2).de(key, data, encoding);
        }
        throw new Error(`Incorrect type passed into the '.de()' function. 
${JSON.stringify(type2)}`);
      }
      /**
       * Check whether a `TypeInterface` has been loaded for a `type`.
       * @param type Name of the type to check.
       * @returns
       */
      hasType(type2) {
        return this.types.has(type2);
      }
      /**
       * Create an alias for a type.
       * WARNING: this can potentially lead to recursion
       * @param name Alias to use
       * @param forType Type to reference
       * @returns
       *
       * @example
       * ```
       * let bcs = new BCS(getSuiMoveConfig());
       * bcs.registerAlias('ObjectDigest', BCS.BASE58);
       * let b58_digest = bcs.de('ObjectDigest', '<digest_bytes>', 'base64');
       * ```
       */
      registerAlias(name, forType) {
        this.types.set(name, forType);
        return this;
      }
      /**
       * Method to register new types for BCS internal representation.
       * For each registered type 2 callbacks must be specified and one is optional:
       *
       * - encodeCb(writer, data) - write a way to serialize data with BcsWriter;
       * - decodeCb(reader) - write a way to deserialize data with BcsReader;
       * - validateCb(data) - validate data - either return bool or throw an error
       *
       * @example
       * // our type would be a string that consists only of numbers
       * bcs.registerType('number_string',
       *    (writer, data) => writer.writeVec(data, (w, el) => w.write8(el)),
       *    (reader) => reader.readVec((r) => r.read8()).join(''), // read each value as u8
       *    (value) => /[0-9]+/.test(value) // test that it has at least one digit
       * );
       * console.log(Array.from(bcs.ser('number_string', '12345').toBytes()) == [5,1,2,3,4,5]);
       *
       * @param name
       * @param encodeCb Callback to encode a value.
       * @param decodeCb Callback to decode a value.
       * @param validateCb Optional validator Callback to check type before serialization.
       */
      registerType(typeName, encodeCb, decodeCb, validateCb = () => true) {
        const { name, params: generics } = this.parseTypeName(typeName);
        this.types.set(name, {
          encode(self2, data, options, typeParams) {
            const typeMap = generics.reduce((acc, value, index) => {
              return Object.assign(acc, { [value]: typeParams[index] });
            }, {});
            return this._encodeRaw.call(self2, new import_writer.BcsWriter(options), data, typeParams, typeMap);
          },
          decode(self2, data, typeParams) {
            const typeMap = generics.reduce((acc, value, index) => {
              return Object.assign(acc, { [value]: typeParams[index] });
            }, {});
            return this._decodeRaw.call(self2, new import_reader.BcsReader(data), typeParams, typeMap);
          },
          // these methods should always be used with caution as they require pre-defined
          // reader and writer and mainly exist to allow multi-field (de)serialization;
          _encodeRaw(writer, data, typeParams, typeMap) {
            if (validateCb(data)) {
              return encodeCb.call(this, writer, data, typeParams, typeMap);
            } else {
              throw new Error(`Validation failed for type ${name}, data: ${data}`);
            }
          },
          _decodeRaw(reader, typeParams, typeMap) {
            return decodeCb.call(this, reader, typeParams, typeMap);
          }
        });
        return this;
      }
      /**
      	 * Method to register BcsType instances to the registry
      	 * Types are registered with a callback that provides BcsType instances for each generic
      	 * passed to the type.
      	 *
      	 * - createType(...generics) - Return a BcsType instance
      	 *
      	 * @example
      	 * // our type would be a string that consists only of numbers
      	 * bcs.registerType('Box<T>', (T) => {
      	 * 		return bcs.struct({
      	 * 			value: T
      	 * 		});
      	 * });
      
      	 * console.log(Array.from(bcs.ser('Box<string>', '12345').toBytes()) == [5,1,2,3,4,5]);
      	 *
      	 * @param name
      	 * @param createType a Callback to create the BcsType with any passed in generics
      	 */
      registerBcsType(typeName, createType) {
        this.registerType(
          typeName,
          (writer, data, typeParams) => {
            const generics = typeParams.map(
              (param) => new import_bcs_type.BcsType({
                name: String(param),
                write: (data2, writer2) => {
                  const { name, params } = this.parseTypeName(param);
                  const typeInterface = this.getTypeInterface(name);
                  const typeMap = params.reduce((acc, value, index) => {
                    return Object.assign(acc, { [value]: typeParams[index] });
                  }, {});
                  return typeInterface._encodeRaw.call(this, writer2, data2, params, typeMap);
                },
                read: () => {
                  throw new Error("Not implemented");
                }
              })
            );
            createType(...generics).write(data, writer);
            return writer;
          },
          (reader, typeParams) => {
            const generics = typeParams.map(
              (param) => new import_bcs_type.BcsType({
                name: String(param),
                write: (_data, _writer) => {
                  throw new Error("Not implemented");
                },
                read: (reader2) => {
                  const { name, params } = this.parseTypeName(param);
                  const typeInterface = this.getTypeInterface(name);
                  const typeMap = params.reduce((acc, value, index) => {
                    return Object.assign(acc, { [value]: typeParams[index] });
                  }, {});
                  return typeInterface._decodeRaw.call(this, reader2, params, typeMap);
                }
              })
            );
            return createType(...generics).read(reader);
          }
        );
        return this;
      }
      /**
       * Register an address type which is a sequence of U8s of specified length.
       * @example
       * bcs.registerAddressType('address', SUI_ADDRESS_LENGTH);
       * let addr = bcs.de('address', 'c3aca510c785c7094ac99aeaa1e69d493122444df50bb8a99dfa790c654a79af');
       *
       * @param name Name of the address type.
       * @param length Byte length of the address.
       * @param encoding Encoding to use for the address type
       * @returns
       */
      registerAddressType(name, length, encoding = "hex") {
        switch (encoding) {
          case "base64":
            return this.registerType(
              name,
              function encodeAddress(writer, data) {
                return (0, import_b64.fromB64)(data).reduce((writer2, el) => writer2.write8(el), writer);
              },
              function decodeAddress(reader) {
                return (0, import_b64.toB64)(reader.readBytes(length));
              }
            );
          case "hex":
            return this.registerType(
              name,
              function encodeAddress(writer, data) {
                return (0, import_hex.fromHEX)(data).reduce((writer2, el) => writer2.write8(el), writer);
              },
              function decodeAddress(reader) {
                return (0, import_hex.toHEX)(reader.readBytes(length));
              }
            );
          default:
            throw new Error("Unsupported encoding! Use either hex or base64");
        }
      }
      /**
       * Register custom vector type inside the bcs.
       *
       * @example
       * bcs.registerVectorType('vector<T>'); // generic registration
       * let array = bcs.de('vector<u8>', '06010203040506', 'hex'); // [1,2,3,4,5,6];
       * let again = bcs.ser('vector<u8>', [1,2,3,4,5,6]).toString('hex');
       *
       * @param name Name of the type to register
       * @param elementType Optional name of the inner type of the vector
       * @return Returns self for chaining.
       */
      registerVectorType(typeName) {
        let { name, params } = this.parseTypeName(typeName);
        if (params.length > 1) {
          throw new Error("Vector can have only one type parameter; got " + name);
        }
        return this.registerType(
          typeName,
          function encodeVector(writer, data, typeParams, typeMap) {
            return writer.writeVec(data, (writer2, el) => {
              let elementType = typeParams[0];
              if (!elementType) {
                throw new Error(`Incorrect number of type parameters passed a to vector '${typeName}'`);
              }
              let { name: name2, params: params2 } = this.parseTypeName(elementType);
              if (this.hasType(name2)) {
                return this.getTypeInterface(name2)._encodeRaw.call(this, writer2, el, params2, typeMap);
              }
              if (!(name2 in typeMap)) {
                throw new Error(
                  `Unable to find a matching type definition for ${name2} in vector; make sure you passed a generic`
                );
              }
              let { name: innerName, params: innerParams } = this.parseTypeName(typeMap[name2]);
              return this.getTypeInterface(innerName)._encodeRaw.call(
                this,
                writer2,
                el,
                innerParams,
                typeMap
              );
            });
          },
          function decodeVector(reader, typeParams, typeMap) {
            return reader.readVec((reader2) => {
              let elementType = typeParams[0];
              if (!elementType) {
                throw new Error(`Incorrect number of type parameters passed to a vector '${typeName}'`);
              }
              let { name: name2, params: params2 } = this.parseTypeName(elementType);
              if (this.hasType(name2)) {
                return this.getTypeInterface(name2)._decodeRaw.call(this, reader2, params2, typeMap);
              }
              if (!(name2 in typeMap)) {
                throw new Error(
                  `Unable to find a matching type definition for ${name2} in vector; make sure you passed a generic`
                );
              }
              let { name: innerName, params: innerParams } = this.parseTypeName(typeMap[name2]);
              return this.getTypeInterface(innerName)._decodeRaw.call(
                this,
                reader2,
                innerParams,
                typeMap
              );
            });
          }
        );
      }
      /**
       * Safe method to register a custom Move struct. The first argument is a name of the
       * struct which is only used on the FrontEnd and has no affect on serialization results,
       * and the second is a struct description passed as an Object.
       *
       * The description object MUST have the same order on all of the platforms (ie in Move
       * or in Rust).
       *
       * @example
       * // Move / Rust struct
       * // struct Coin {
       * //   value: u64,
       * //   owner: vector<u8>, // name // Vec<u8> in Rust
       * //   is_locked: bool,
       * // }
       *
       * bcs.registerStructType('Coin', {
       *   value: bcs.U64,
       *   owner: bcs.STRING,
       *   is_locked: bcs.BOOL
       * });
       *
       * // Created in Rust with diem/bcs
       * // let rust_bcs_str = '80d1b105600000000e4269672057616c6c65742047757900';
       * let rust_bcs_str = [ // using an Array here as BCS works with Uint8Array
       *  128, 209, 177,   5,  96,  0,  0,
       *    0,  14,  66, 105, 103, 32, 87,
       *   97, 108, 108, 101, 116, 32, 71,
       *  117, 121,   0
       * ];
       *
       * // Let's encode the value as well
       * let test_set = bcs.ser('Coin', {
       *   owner: 'Big Wallet Guy',
       *   value: '412412400000',
       *   is_locked: false,
       * });
       *
       * console.assert(Array.from(test_set.toBytes()) === rust_bcs_str, 'Whoopsie, result mismatch');
       *
       * @param name Name of the type to register.
       * @param fields Fields of the struct. Must be in the correct order.
       * @return Returns BCS for chaining.
       */
      registerStructType(typeName, fields) {
        for (let key in fields) {
          let internalName = this.tempKey();
          let value = fields[key];
          if (!Array.isArray(value) && typeof value !== "string") {
            fields[key] = internalName;
            this.registerStructType(internalName, value);
          }
        }
        let struct2 = Object.freeze(fields);
        let canonicalOrder = Object.keys(struct2);
        let { name: structName, params: generics } = this.parseTypeName(typeName);
        return this.registerType(
          typeName,
          function encodeStruct(writer, data, typeParams, typeMap) {
            if (!data || data.constructor !== Object) {
              throw new Error(`Expected ${structName} to be an Object, got: ${data}`);
            }
            if (typeParams.length !== generics.length) {
              throw new Error(
                `Incorrect number of generic parameters passed; expected: ${generics.length}, got: ${typeParams.length}`
              );
            }
            for (let key of canonicalOrder) {
              if (!(key in data)) {
                throw new Error(`Struct ${structName} requires field ${key}:${struct2[key]}`);
              }
              const { name: fieldType, params: fieldParams } = this.parseTypeName(
                struct2[key]
              );
              if (!generics.includes(fieldType)) {
                this.getTypeInterface(fieldType)._encodeRaw.call(
                  this,
                  writer,
                  data[key],
                  fieldParams,
                  typeMap
                );
              } else {
                const paramIdx = generics.indexOf(fieldType);
                let { name, params } = this.parseTypeName(typeParams[paramIdx]);
                if (this.hasType(name)) {
                  this.getTypeInterface(name)._encodeRaw.call(
                    this,
                    writer,
                    data[key],
                    params,
                    typeMap
                  );
                  continue;
                }
                if (!(name in typeMap)) {
                  throw new Error(
                    `Unable to find a matching type definition for ${name} in ${structName}; make sure you passed a generic`
                  );
                }
                let { name: innerName, params: innerParams } = this.parseTypeName(typeMap[name]);
                this.getTypeInterface(innerName)._encodeRaw.call(
                  this,
                  writer,
                  data[key],
                  innerParams,
                  typeMap
                );
              }
            }
            return writer;
          },
          function decodeStruct(reader, typeParams, typeMap) {
            if (typeParams.length !== generics.length) {
              throw new Error(
                `Incorrect number of generic parameters passed; expected: ${generics.length}, got: ${typeParams.length}`
              );
            }
            let result = {};
            for (let key of canonicalOrder) {
              const { name: fieldName, params: fieldParams } = this.parseTypeName(
                struct2[key]
              );
              if (!generics.includes(fieldName)) {
                result[key] = this.getTypeInterface(fieldName)._decodeRaw.call(
                  this,
                  reader,
                  fieldParams,
                  typeMap
                );
              } else {
                const paramIdx = generics.indexOf(fieldName);
                let { name, params } = this.parseTypeName(typeParams[paramIdx]);
                if (this.hasType(name)) {
                  result[key] = this.getTypeInterface(name)._decodeRaw.call(
                    this,
                    reader,
                    params,
                    typeMap
                  );
                  continue;
                }
                if (!(name in typeMap)) {
                  throw new Error(
                    `Unable to find a matching type definition for ${name} in ${structName}; make sure you passed a generic`
                  );
                }
                let { name: innerName, params: innerParams } = this.parseTypeName(typeMap[name]);
                result[key] = this.getTypeInterface(innerName)._decodeRaw.call(
                  this,
                  reader,
                  innerParams,
                  typeMap
                );
              }
            }
            return result;
          }
        );
      }
      /**
       * Safe method to register custom enum type where each invariant holds the value of another type.
       * @example
       * bcs.registerStructType('Coin', { value: 'u64' });
       * bcs.registerEnumType('MyEnum', {
       *  single: 'Coin',
       *  multi: 'vector<Coin>',
       *  empty: null
       * });
       *
       * console.log(
       *  bcs.de('MyEnum', 'AICWmAAAAAAA', 'base64'), // { single: { value: 10000000 } }
       *  bcs.de('MyEnum', 'AQIBAAAAAAAAAAIAAAAAAAAA', 'base64')  // { multi: [ { value: 1 }, { value: 2 } ] }
       * )
       *
       * // and serialization
       * bcs.ser('MyEnum', { single: { value: 10000000 } }).toBytes();
       * bcs.ser('MyEnum', { multi: [ { value: 1 }, { value: 2 } ] });
       *
       * @param name
       * @param variants
       */
      registerEnumType(typeName, variants) {
        for (let key in variants) {
          let internalName = this.tempKey();
          let value = variants[key];
          if (value !== null && !Array.isArray(value) && typeof value !== "string") {
            variants[key] = internalName;
            this.registerStructType(internalName, value);
          }
        }
        let struct2 = Object.freeze(variants);
        let canonicalOrder = Object.keys(struct2);
        let { name, params: canonicalTypeParams } = this.parseTypeName(typeName);
        return this.registerType(
          typeName,
          function encodeEnum(writer, data, typeParams, typeMap) {
            if (!data) {
              throw new Error(`Unable to write enum "${name}", missing data.
Received: "${data}"`);
            }
            if (typeof data !== "object") {
              throw new Error(
                `Incorrect data passed into enum "${name}", expected object with properties: "${canonicalOrder.join(
                  " | "
                )}".
Received: "${JSON.stringify(data)}"`
              );
            }
            let key = Object.keys(data)[0];
            if (key === void 0) {
              throw new Error(`Empty object passed as invariant of the enum "${name}"`);
            }
            let orderByte = canonicalOrder.indexOf(key);
            if (orderByte === -1) {
              throw new Error(
                `Unknown invariant of the enum "${name}", allowed values: "${canonicalOrder.join(
                  " | "
                )}"; received "${key}"`
              );
            }
            let invariant = canonicalOrder[orderByte];
            let invariantType = struct2[invariant];
            writer.write8(orderByte);
            if (invariantType === null) {
              return writer;
            }
            let paramIndex = canonicalTypeParams.indexOf(invariantType);
            let typeOrParam = paramIndex === -1 ? invariantType : typeParams[paramIndex];
            {
              let { name: name2, params } = this.parseTypeName(typeOrParam);
              return this.getTypeInterface(name2)._encodeRaw.call(
                this,
                writer,
                data[key],
                params,
                typeMap
              );
            }
          },
          function decodeEnum(reader, typeParams, typeMap) {
            let orderByte = reader.readULEB();
            let invariant = canonicalOrder[orderByte];
            let invariantType = struct2[invariant];
            if (orderByte === -1) {
              throw new Error(
                `Decoding type mismatch, expected enum "${name}" invariant index, received "${orderByte}"`
              );
            }
            if (invariantType === null) {
              return { [invariant]: true };
            }
            let paramIndex = canonicalTypeParams.indexOf(invariantType);
            let typeOrParam = paramIndex === -1 ? invariantType : typeParams[paramIndex];
            {
              let { name: name2, params } = this.parseTypeName(typeOrParam);
              return {
                [invariant]: this.getTypeInterface(name2)._decodeRaw.call(this, reader, params, typeMap)
              };
            }
          }
        );
      }
      /**
       * Get a set of encoders/decoders for specific type.
       * Mainly used to define custom type de/serialization logic.
       *
       * @param type
       * @returns {TypeInterface}
       */
      getTypeInterface(type2) {
        let typeInterface = this.types.get(type2);
        if (typeof typeInterface === "string") {
          let chain = [];
          while (typeof typeInterface === "string") {
            if (chain.includes(typeInterface)) {
              throw new Error(`Recursive definition found: ${chain.join(" -> ")} -> ${typeInterface}`);
            }
            chain.push(typeInterface);
            typeInterface = this.types.get(typeInterface);
          }
        }
        if (typeInterface === void 0) {
          throw new Error(`Type ${type2} is not registered`);
        }
        return typeInterface;
      }
      /**
       * Parse a type name and get the type's generics.
       * @example
       * let { typeName, typeParams } = parseTypeName('Option<Coin<SUI>>');
       * // typeName: Option
       * // typeParams: [ 'Coin<SUI>' ]
       *
       * @param name Name of the type to process
       * @returns Object with typeName and typeParams listed as Array
       */
      parseTypeName(name) {
        if (Array.isArray(name)) {
          let [typeName2, ...params2] = name;
          return { name: typeName2, params: params2 };
        }
        if (typeof name !== "string") {
          throw new Error(`Illegal type passed as a name of the type: ${name}`);
        }
        let [left, right] = this.schema.genericSeparators || ["<", ">"];
        let l_bound = name.indexOf(left);
        let r_bound = Array.from(name).reverse().indexOf(right);
        if (l_bound === -1 && r_bound === -1) {
          return { name, params: [] };
        }
        if (l_bound === -1 || r_bound === -1) {
          throw new Error(`Unclosed generic in name '${name}'`);
        }
        let typeName = name.slice(0, l_bound);
        let params = (0, import_utils4.splitGenericParameters)(
          name.slice(l_bound + 1, name.length - r_bound - 1),
          this.schema.genericSeparators
        );
        return { name: typeName, params };
      }
    };
    var BCS = _BCS;
    BCS.U8 = "u8";
    BCS.U16 = "u16";
    BCS.U32 = "u32";
    BCS.U64 = "u64";
    BCS.U128 = "u128";
    BCS.U256 = "u256";
    BCS.BOOL = "bool";
    BCS.VECTOR = "vector";
    BCS.ADDRESS = "address";
    BCS.STRING = "string";
    BCS.HEX = "hex-string";
    BCS.BASE58 = "base58-string";
    BCS.BASE64 = "base64-string";
    function registerPrimitives(bcs) {
      bcs.registerType(
        BCS.U8,
        function(writer, data) {
          return writer.write8(data);
        },
        function(reader) {
          return reader.read8();
        },
        (u82) => u82 < 256
      );
      bcs.registerType(
        BCS.U16,
        function(writer, data) {
          return writer.write16(data);
        },
        function(reader) {
          return reader.read16();
        },
        (u162) => u162 < 65536
      );
      bcs.registerType(
        BCS.U32,
        function(writer, data) {
          return writer.write32(data);
        },
        function(reader) {
          return reader.read32();
        },
        (u323) => u323 <= 4294967296n
      );
      bcs.registerType(
        BCS.U64,
        function(writer, data) {
          return writer.write64(data);
        },
        function(reader) {
          return reader.read64();
        }
      );
      bcs.registerType(
        BCS.U128,
        function(writer, data) {
          return writer.write128(data);
        },
        function(reader) {
          return reader.read128();
        }
      );
      bcs.registerType(
        BCS.U256,
        function(writer, data) {
          return writer.write256(data);
        },
        function(reader) {
          return reader.read256();
        }
      );
      bcs.registerType(
        BCS.BOOL,
        function(writer, data) {
          return writer.write8(data);
        },
        function(reader) {
          return reader.read8().toString(10) === "1";
        }
      );
      bcs.registerType(
        BCS.STRING,
        function(writer, data) {
          return writer.writeVec(Array.from(data), (writer2, el) => writer2.write8(el.charCodeAt(0)));
        },
        function(reader) {
          return reader.readVec((reader2) => reader2.read8()).map((el) => String.fromCharCode(Number(el))).join("");
        },
        (_str) => true
      );
      bcs.registerType(
        BCS.HEX,
        function(writer, data) {
          return writer.writeVec(Array.from((0, import_hex.fromHEX)(data)), (writer2, el) => writer2.write8(el));
        },
        function(reader) {
          let bytes = reader.readVec((reader2) => reader2.read8());
          return (0, import_hex.toHEX)(new Uint8Array(bytes));
        }
      );
      bcs.registerType(
        BCS.BASE58,
        function(writer, data) {
          return writer.writeVec(Array.from((0, import_b58.fromB58)(data)), (writer2, el) => writer2.write8(el));
        },
        function(reader) {
          let bytes = reader.readVec((reader2) => reader2.read8());
          return (0, import_b58.toB58)(new Uint8Array(bytes));
        }
      );
      bcs.registerType(
        BCS.BASE64,
        function(writer, data) {
          return writer.writeVec(Array.from((0, import_b64.fromB64)(data)), (writer2, el) => writer2.write8(el));
        },
        function(reader) {
          let bytes = reader.readVec((reader2) => reader2.read8());
          return (0, import_b64.toB64)(new Uint8Array(bytes));
        }
      );
    }
    function getRustConfig() {
      return {
        genericSeparators: ["<", ">"],
        vectorType: "Vec",
        addressLength: SUI_ADDRESS_LENGTH,
        addressEncoding: "hex"
      };
    }
    function getSuiMoveConfig() {
      return {
        genericSeparators: ["<", ">"],
        vectorType: "vector",
        addressLength: SUI_ADDRESS_LENGTH,
        addressEncoding: "hex"
      };
    }
  }
});

// node_modules/@mysten/sui.js/node_modules/@mysten/bcs/dist/cjs/index.js
var require_cjs2 = __commonJS({
  "node_modules/@mysten/sui.js/node_modules/@mysten/bcs/dist/cjs/index.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __reExport = (target, mod2, secondTarget) => (__copyProps(target, mod2, "default"), secondTarget && __copyProps(secondTarget, mod2, "default"));
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var src_exports = {};
    __export2(src_exports, {
      BcsReader: () => import_reader.BcsReader,
      BcsType: () => import_bcs_type.BcsType,
      BcsWriter: () => import_writer.BcsWriter,
      SerializedBcs: () => import_bcs_type.SerializedBcs,
      bcs: () => import_bcs.bcs,
      decodeStr: () => import_utils4.decodeStr,
      encodeStr: () => import_utils4.encodeStr,
      fromB58: () => import_b58.fromB58,
      fromB64: () => import_b64.fromB64,
      fromHEX: () => import_hex.fromHEX,
      isSerializedBcs: () => import_bcs_type.isSerializedBcs,
      splitGenericParameters: () => import_utils4.splitGenericParameters,
      toB58: () => import_b58.toB58,
      toB64: () => import_b64.toB64,
      toHEX: () => import_hex.toHEX
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_b58 = require_b582();
    var import_b64 = require_b642();
    var import_bcs_type = require_bcs_type2();
    var import_bcs = require_bcs5();
    var import_hex = require_hex2();
    var import_reader = require_reader2();
    var import_utils4 = require_utils8();
    var import_writer = require_writer2();
    __reExport(src_exports, require_legacy_registry(), module2.exports);
  }
});

// node_modules/@mysten/sui.js/dist/cjs/utils/sui-types.js
var require_sui_types2 = __commonJS({
  "node_modules/@mysten/sui.js/dist/cjs/utils/sui-types.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var sui_types_exports = {};
    __export2(sui_types_exports, {
      SUI_ADDRESS_LENGTH: () => SUI_ADDRESS_LENGTH,
      isValidSuiAddress: () => isValidSuiAddress,
      isValidSuiObjectId: () => isValidSuiObjectId,
      isValidTransactionDigest: () => isValidTransactionDigest,
      normalizeStructTag: () => normalizeStructTag,
      normalizeSuiAddress: () => normalizeSuiAddress,
      normalizeSuiObjectId: () => normalizeSuiObjectId,
      parseStructTag: () => parseStructTag
    });
    module2.exports = __toCommonJS2(sui_types_exports);
    var import_bcs = require_cjs2();
    var TX_DIGEST_LENGTH = 32;
    function isValidTransactionDigest(value) {
      try {
        const buffer = (0, import_bcs.fromB58)(value);
        return buffer.length === TX_DIGEST_LENGTH;
      } catch (e) {
        return false;
      }
    }
    var SUI_ADDRESS_LENGTH = 32;
    function isValidSuiAddress(value) {
      return isHex(value) && getHexByteLength(value) === SUI_ADDRESS_LENGTH;
    }
    function isValidSuiObjectId(value) {
      return isValidSuiAddress(value);
    }
    function parseTypeTag(type2) {
      if (!type2.includes("::"))
        return type2;
      return parseStructTag(type2);
    }
    function parseStructTag(type2) {
      const [address, module22] = type2.split("::");
      const rest = type2.slice(address.length + module22.length + 4);
      const name = rest.includes("<") ? rest.slice(0, rest.indexOf("<")) : rest;
      const typeParams = rest.includes("<") ? (0, import_bcs.splitGenericParameters)(rest.slice(rest.indexOf("<") + 1, rest.lastIndexOf(">"))).map(
        (typeParam) => parseTypeTag(typeParam.trim())
      ) : [];
      return {
        address: normalizeSuiAddress(address),
        module: module22,
        name,
        typeParams
      };
    }
    function normalizeStructTag(type2) {
      const { address, module: module22, name, typeParams } = typeof type2 === "string" ? parseStructTag(type2) : type2;
      const formattedTypeParams = (typeParams == null ? void 0 : typeParams.length) > 0 ? `<${typeParams.map(
        (typeParam) => typeof typeParam === "string" ? typeParam : normalizeStructTag(typeParam)
      ).join(",")}>` : "";
      return `${address}::${module22}::${name}${formattedTypeParams}`;
    }
    function normalizeSuiAddress(value, forceAdd0x = false) {
      let address = value.toLowerCase();
      if (!forceAdd0x && address.startsWith("0x")) {
        address = address.slice(2);
      }
      return `0x${address.padStart(SUI_ADDRESS_LENGTH * 2, "0")}`;
    }
    function normalizeSuiObjectId(value, forceAdd0x = false) {
      return normalizeSuiAddress(value, forceAdd0x);
    }
    function isHex(value) {
      return /^(0x|0X)?[a-fA-F0-9]+$/.test(value) && value.length % 2 === 0;
    }
    function getHexByteLength(value) {
      return /^(0x|0X)/.test(value) ? (value.length - 2) / 2 : value.length / 2;
    }
  }
});

// node_modules/@mysten/sui.js/dist/cjs/bcs/type-tag-serializer.js
var require_type_tag_serializer2 = __commonJS({
  "node_modules/@mysten/sui.js/dist/cjs/bcs/type-tag-serializer.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var type_tag_serializer_exports = {};
    __export2(type_tag_serializer_exports, {
      TypeTagSerializer: () => TypeTagSerializer
    });
    module2.exports = __toCommonJS2(type_tag_serializer_exports);
    var import_bcs = require_cjs2();
    var import_sui_types = require_sui_types2();
    var VECTOR_REGEX = /^vector<(.+)>$/;
    var STRUCT_REGEX = /^([^:]+)::([^:]+)::([^<]+)(<(.+)>)?/;
    var TypeTagSerializer = class _TypeTagSerializer {
      static parseFromStr(str, normalizeAddress = false) {
        if (str === "address") {
          return { address: null };
        } else if (str === "bool") {
          return { bool: null };
        } else if (str === "u8") {
          return { u8: null };
        } else if (str === "u16") {
          return { u16: null };
        } else if (str === "u32") {
          return { u32: null };
        } else if (str === "u64") {
          return { u64: null };
        } else if (str === "u128") {
          return { u128: null };
        } else if (str === "u256") {
          return { u256: null };
        } else if (str === "signer") {
          return { signer: null };
        }
        const vectorMatch = str.match(VECTOR_REGEX);
        if (vectorMatch) {
          return {
            vector: _TypeTagSerializer.parseFromStr(vectorMatch[1], normalizeAddress)
          };
        }
        const structMatch = str.match(STRUCT_REGEX);
        if (structMatch) {
          const address = normalizeAddress ? (0, import_sui_types.normalizeSuiAddress)(structMatch[1]) : structMatch[1];
          return {
            struct: {
              address,
              module: structMatch[2],
              name: structMatch[3],
              typeParams: structMatch[5] === void 0 ? [] : _TypeTagSerializer.parseStructTypeArgs(structMatch[5], normalizeAddress)
            }
          };
        }
        throw new Error(`Encountered unexpected token when parsing type args for ${str}`);
      }
      static parseStructTypeArgs(str, normalizeAddress = false) {
        return (0, import_bcs.splitGenericParameters)(str).map(
          (tok) => _TypeTagSerializer.parseFromStr(tok, normalizeAddress)
        );
      }
      static tagToString(tag) {
        if ("bool" in tag) {
          return "bool";
        }
        if ("u8" in tag) {
          return "u8";
        }
        if ("u16" in tag) {
          return "u16";
        }
        if ("u32" in tag) {
          return "u32";
        }
        if ("u64" in tag) {
          return "u64";
        }
        if ("u128" in tag) {
          return "u128";
        }
        if ("u256" in tag) {
          return "u256";
        }
        if ("address" in tag) {
          return "address";
        }
        if ("signer" in tag) {
          return "signer";
        }
        if ("vector" in tag) {
          return `vector<${_TypeTagSerializer.tagToString(tag.vector)}>`;
        }
        if ("struct" in tag) {
          const struct2 = tag.struct;
          const typeParams = struct2.typeParams.map(_TypeTagSerializer.tagToString).join(", ");
          return `${struct2.address}::${struct2.module}::${struct2.name}${typeParams ? `<${typeParams}>` : ""}`;
        }
        throw new Error("Invalid TypeTag");
      }
    };
  }
});

// node_modules/@mysten/sui.js/dist/cjs/bcs/index.js
var require_bcs6 = __commonJS({
  "node_modules/@mysten/sui.js/dist/cjs/bcs/index.js"(exports2, module2) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var bcs_exports = {};
    __export2(bcs_exports, {
      TypeTagSerializer: () => import_type_tag_serializer2.TypeTagSerializer,
      bcs: () => suiBcs,
      bcsRegistry: () => bcsRegistry,
      isPureArg: () => isPureArg
    });
    module2.exports = __toCommonJS2(bcs_exports);
    var import_bcs = require_cjs2();
    var import_sui_types = require_sui_types2();
    var import_type_tag_serializer = require_type_tag_serializer2();
    var import_type_tag_serializer2 = require_type_tag_serializer2();
    function isPureArg(arg) {
      return arg.Pure !== void 0;
    }
    var bcsRegistry = new import_bcs.BCS({
      ...(0, import_bcs.getSuiMoveConfig)(),
      types: {
        enums: {
          "Option<T>": {
            None: null,
            Some: "T"
          }
        }
      }
    });
    function unsafe_u64(options) {
      return import_bcs.bcs.u64({
        name: "unsafe_u64",
        ...options
      }).transform({
        input: (val) => val,
        output: (val) => Number(val)
      });
    }
    function optionEnum(type2) {
      return import_bcs.bcs.enum("Option", {
        None: null,
        Some: type2
      });
    }
    function enumKind(type2) {
      return type2.transform({
        input: (val) => ({
          [val.kind]: val
        }),
        output: (val) => {
          const key = Object.keys(val)[0];
          return { kind: key, ...val[key] };
        }
      });
    }
    var Address = import_bcs.bcs.bytes(import_sui_types.SUI_ADDRESS_LENGTH).transform({
      input: (val) => typeof val === "string" ? (0, import_bcs.fromHEX)((0, import_sui_types.normalizeSuiAddress)(val)) : val,
      output: (val) => (0, import_sui_types.normalizeSuiAddress)((0, import_bcs.toHEX)(val))
    });
    var ObjectDigest = import_bcs.bcs.vector(import_bcs.bcs.u8()).transform({
      name: "ObjectDigest",
      input: (value) => (0, import_bcs.fromB58)(value),
      output: (value) => (0, import_bcs.toB58)(new Uint8Array(value))
    });
    var SuiObjectRef = import_bcs.bcs.struct("SuiObjectRef", {
      objectId: Address,
      version: import_bcs.bcs.u64(),
      digest: ObjectDigest
    });
    var SharedObjectRef = import_bcs.bcs.struct("SharedObjectRef", {
      objectId: Address,
      initialSharedVersion: import_bcs.bcs.u64(),
      mutable: import_bcs.bcs.bool()
    });
    var ObjectArg = import_bcs.bcs.enum("ObjectArg", {
      ImmOrOwned: SuiObjectRef,
      Shared: SharedObjectRef,
      Receiving: SuiObjectRef
    });
    var CallArg = import_bcs.bcs.enum("CallArg", {
      Pure: import_bcs.bcs.vector(import_bcs.bcs.u8()),
      Object: ObjectArg,
      ObjVec: import_bcs.bcs.vector(ObjectArg)
    });
    var TypeTag = import_bcs.bcs.enum("TypeTag", {
      bool: null,
      u8: null,
      u64: null,
      u128: null,
      address: null,
      signer: null,
      vector: import_bcs.bcs.lazy(() => TypeTag),
      struct: import_bcs.bcs.lazy(() => StructTag),
      u16: null,
      u32: null,
      u256: null
    });
    var Argument = enumKind(
      import_bcs.bcs.enum("Argument", {
        GasCoin: null,
        Input: import_bcs.bcs.struct("Input", { index: import_bcs.bcs.u16() }),
        Result: import_bcs.bcs.struct("Result", { index: import_bcs.bcs.u16() }),
        NestedResult: import_bcs.bcs.struct("NestedResult", { index: import_bcs.bcs.u16(), resultIndex: import_bcs.bcs.u16() })
      })
    );
    var ProgrammableMoveCall = import_bcs.bcs.struct("ProgrammableMoveCall", {
      package: Address,
      module: import_bcs.bcs.string(),
      function: import_bcs.bcs.string(),
      type_arguments: import_bcs.bcs.vector(TypeTag),
      arguments: import_bcs.bcs.vector(Argument)
    }).transform({
      input: (data) => {
        const [pkg, module22, fun] = data.target.split("::");
        const type_arguments = data.typeArguments.map(
          (tag) => import_type_tag_serializer.TypeTagSerializer.parseFromStr(tag, true)
        );
        return {
          package: (0, import_sui_types.normalizeSuiAddress)(pkg),
          module: module22,
          function: fun,
          type_arguments,
          arguments: data.arguments
        };
      },
      output: (data) => {
        return {
          target: [data.package, data.module, data.function].join(
            "::"
          ),
          arguments: data.arguments,
          typeArguments: data.type_arguments.map(import_type_tag_serializer.TypeTagSerializer.tagToString)
        };
      }
    });
    var Transaction2 = enumKind(
      import_bcs.bcs.enum("Transaction", {
        /**
         * A Move Call - any public Move function can be called via
         * this transaction. The results can be used that instant to pass
         * into the next transaction.
         */
        MoveCall: ProgrammableMoveCall,
        /**
         * Transfer vector of objects to a receiver.
         */
        TransferObjects: import_bcs.bcs.struct("TransferObjects", {
          objects: import_bcs.bcs.vector(Argument),
          address: Argument
        }),
        /**
         * Split `amount` from a `coin`.
         */
        SplitCoins: import_bcs.bcs.struct("SplitCoins", { coin: Argument, amounts: import_bcs.bcs.vector(Argument) }),
        /**
         * Merge Vector of Coins (`sources`) into a `destination`.
         */
        MergeCoins: import_bcs.bcs.struct("MergeCoins", { destination: Argument, sources: import_bcs.bcs.vector(Argument) }),
        /**
         * Publish a Move module.
         */
        Publish: import_bcs.bcs.struct("Publish", {
          modules: import_bcs.bcs.vector(import_bcs.bcs.vector(import_bcs.bcs.u8())),
          dependencies: import_bcs.bcs.vector(Address)
        }),
        /**
         * Build a vector of objects using the input arguments.
         * It is impossible to construct a `vector<T: key>` otherwise,
         * so this call serves a utility function.
         */
        MakeMoveVec: import_bcs.bcs.struct("MakeMoveVec", {
          type: optionEnum(TypeTag),
          objects: import_bcs.bcs.vector(Argument)
        }),
        /**  */
        Upgrade: import_bcs.bcs.struct("Upgrade", {
          modules: import_bcs.bcs.vector(import_bcs.bcs.vector(import_bcs.bcs.u8())),
          dependencies: import_bcs.bcs.vector(Address),
          packageId: Address,
          ticket: Argument
        })
      })
    );
    var ProgrammableTransaction = import_bcs.bcs.struct("ProgrammableTransaction", {
      inputs: import_bcs.bcs.vector(CallArg),
      transactions: import_bcs.bcs.vector(Transaction2)
    });
    var TransactionKind = import_bcs.bcs.enum("TransactionKind", {
      ProgrammableTransaction,
      ChangeEpoch: null,
      Genesis: null,
      ConsensusCommitPrologue: null
    });
    var TransactionExpiration = import_bcs.bcs.enum("TransactionExpiration", {
      None: null,
      Epoch: unsafe_u64()
    });
    var StructTag = import_bcs.bcs.struct("StructTag", {
      address: Address,
      module: import_bcs.bcs.string(),
      name: import_bcs.bcs.string(),
      typeParams: import_bcs.bcs.vector(TypeTag)
    });
    var GasData = import_bcs.bcs.struct("GasData", {
      payment: import_bcs.bcs.vector(SuiObjectRef),
      owner: Address,
      price: import_bcs.bcs.u64(),
      budget: import_bcs.bcs.u64()
    });
    var TransactionDataV1 = import_bcs.bcs.struct("TransactionDataV1", {
      kind: TransactionKind,
      sender: Address,
      gasData: GasData,
      expiration: TransactionExpiration
    });
    var TransactionData = import_bcs.bcs.enum("TransactionData", {
      V1: TransactionDataV1
    });
    var IntentScope = import_bcs.bcs.enum("IntentScope", {
      TransactionData: null,
      TransactionEffects: null,
      CheckpointSummary: null,
      PersonalMessage: null
    });
    var IntentVersion = import_bcs.bcs.enum("IntentVersion", {
      V0: null
    });
    var AppId = import_bcs.bcs.enum("AppId", {
      Sui: null
    });
    var Intent = import_bcs.bcs.struct("Intent", {
      scope: IntentScope,
      version: IntentVersion,
      appId: AppId
    });
    var IntentMessage = import_bcs.bcs.generic(
      ["T"],
      (T) => import_bcs.bcs.struct("IntentMessage<T>", {
        intent: Intent,
        value: T
      })
    );
    var CompressedSignature = import_bcs.bcs.enum("CompressedSignature", {
      ED25519: import_bcs.bcs.fixedArray(64, import_bcs.bcs.u8()),
      Secp256k1: import_bcs.bcs.fixedArray(64, import_bcs.bcs.u8()),
      Secp256r1: import_bcs.bcs.fixedArray(64, import_bcs.bcs.u8()),
      ZkLogin: import_bcs.bcs.vector(import_bcs.bcs.u8())
    });
    var PublicKey2 = import_bcs.bcs.enum("PublicKey", {
      ED25519: import_bcs.bcs.fixedArray(32, import_bcs.bcs.u8()),
      Secp256k1: import_bcs.bcs.fixedArray(33, import_bcs.bcs.u8()),
      Secp256r1: import_bcs.bcs.fixedArray(33, import_bcs.bcs.u8()),
      ZkLogin: import_bcs.bcs.vector(import_bcs.bcs.u8())
    });
    var MultiSigPkMap = import_bcs.bcs.struct("MultiSigPkMap", {
      pubKey: PublicKey2,
      weight: import_bcs.bcs.u8()
    });
    var MultiSigPublicKey = import_bcs.bcs.struct("MultiSigPublicKey", {
      pk_map: import_bcs.bcs.vector(MultiSigPkMap),
      threshold: import_bcs.bcs.u16()
    });
    var MultiSig = import_bcs.bcs.struct("MultiSig", {
      sigs: import_bcs.bcs.vector(CompressedSignature),
      bitmap: import_bcs.bcs.u16(),
      multisig_pk: MultiSigPublicKey
    });
    var base64String = import_bcs.bcs.vector(import_bcs.bcs.u8()).transform({
      input: (val) => typeof val === "string" ? (0, import_bcs.fromB64)(val) : val,
      output: (val) => (0, import_bcs.toB64)(new Uint8Array(val))
    });
    var SenderSignedTransaction = import_bcs.bcs.struct("SenderSignedTransaction", {
      intentMessage: IntentMessage(TransactionData),
      txSignatures: import_bcs.bcs.vector(base64String)
    });
    var SenderSignedData = import_bcs.bcs.vector(SenderSignedTransaction, {
      name: "SenderSignedData"
    });
    var suiBcs = {
      ...import_bcs.bcs,
      U8: import_bcs.bcs.u8(),
      U16: import_bcs.bcs.u16(),
      U32: import_bcs.bcs.u32(),
      U64: import_bcs.bcs.u64(),
      U128: import_bcs.bcs.u128(),
      U256: import_bcs.bcs.u256(),
      ULEB128: import_bcs.bcs.uleb128(),
      Bool: import_bcs.bcs.bool(),
      String: import_bcs.bcs.string(),
      Address,
      Argument,
      CallArg,
      CompressedSignature,
      GasData,
      MultiSig,
      MultiSigPkMap,
      MultiSigPublicKey,
      ObjectArg,
      ObjectDigest,
      ProgrammableMoveCall,
      ProgrammableTransaction,
      PublicKey: PublicKey2,
      SenderSignedData,
      SenderSignedTransaction,
      SharedObjectRef,
      StructTag,
      SuiObjectRef,
      Transaction: Transaction2,
      TransactionData,
      TransactionDataV1,
      TransactionExpiration,
      TransactionKind,
      TypeTag,
      // preserve backwards compatibility with old bcs export
      ser: bcsRegistry.ser.bind(bcsRegistry),
      de: bcsRegistry.de.bind(bcsRegistry),
      getTypeInterface: bcsRegistry.getTypeInterface.bind(bcsRegistry),
      hasType: bcsRegistry.hasType.bind(bcsRegistry),
      parseTypeName: bcsRegistry.parseTypeName.bind(bcsRegistry),
      registerAddressType: bcsRegistry.registerAddressType.bind(bcsRegistry),
      registerAlias: bcsRegistry.registerAlias.bind(bcsRegistry),
      registerBcsType: bcsRegistry.registerBcsType.bind(bcsRegistry),
      registerEnumType: bcsRegistry.registerEnumType.bind(bcsRegistry),
      registerStructType: bcsRegistry.registerStructType.bind(bcsRegistry),
      registerType: bcsRegistry.registerType.bind(bcsRegistry),
      types: bcsRegistry.types
    };
    bcsRegistry.registerBcsType("utf8string", () => import_bcs.bcs.string({ name: "utf8string" }));
    bcsRegistry.registerBcsType("unsafe_u64", () => unsafe_u64());
    bcsRegistry.registerBcsType("enumKind", (T) => enumKind(T));
    [
      Address,
      Argument,
      CallArg,
      CompressedSignature,
      GasData,
      MultiSig,
      MultiSigPkMap,
      MultiSigPublicKey,
      ObjectArg,
      ObjectDigest,
      ProgrammableMoveCall,
      ProgrammableTransaction,
      PublicKey2,
      SenderSignedData,
      SharedObjectRef,
      StructTag,
      SuiObjectRef,
      Transaction2,
      TransactionData,
      TransactionDataV1,
      TransactionExpiration,
      TransactionKind,
      TypeTag
    ].forEach((type2) => {
      bcsRegistry.registerBcsType(type2.name, () => type2);
    });
  }
});

// node_modules/@pythnetwork/price-service-sdk/lib/schemas/PriceFeed.js
var require_PriceFeed = __commonJS({
  "node_modules/@pythnetwork/price-service-sdk/lib/schemas/PriceFeed.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Convert = void 0;
    var Convert = class {
      static toPriceFeed(json) {
        return cast(json, r("PriceFeed"));
      }
      static priceFeedToJson(value) {
        return uncast(value, r("PriceFeed"));
      }
      static toPrice(json) {
        return cast(json, r("Price"));
      }
      static priceToJson(value) {
        return uncast(value, r("Price"));
      }
      static toPriceFeedMetadata(json) {
        return cast(json, r("PriceFeedMetadata"));
      }
      static priceFeedMetadataToJson(value) {
        return uncast(value, r("PriceFeedMetadata"));
      }
    };
    exports2.Convert = Convert;
    function invalidValue(typ, val, key = "") {
      if (key) {
        throw Error(`Invalid value for key "${key}". Expected type ${JSON.stringify(typ)} but got ${JSON.stringify(val)}`);
      }
      throw Error(`Invalid value ${JSON.stringify(val)} for type ${JSON.stringify(typ)}`);
    }
    function jsonToJSProps(typ) {
      if (typ.jsonToJS === void 0) {
        const map = {};
        typ.props.forEach((p) => map[p.json] = { key: p.js, typ: p.typ });
        typ.jsonToJS = map;
      }
      return typ.jsonToJS;
    }
    function jsToJSONProps(typ) {
      if (typ.jsToJSON === void 0) {
        const map = {};
        typ.props.forEach((p) => map[p.js] = { key: p.json, typ: p.typ });
        typ.jsToJSON = map;
      }
      return typ.jsToJSON;
    }
    function transform(val, typ, getProps, key = "") {
      function transformPrimitive(typ2, val2) {
        if (typeof typ2 === typeof val2)
          return val2;
        return invalidValue(typ2, val2, key);
      }
      function transformUnion(typs, val2) {
        const l = typs.length;
        for (let i = 0; i < l; i++) {
          const typ2 = typs[i];
          try {
            return transform(val2, typ2, getProps);
          } catch (_) {
          }
        }
        return invalidValue(typs, val2);
      }
      function transformEnum(cases, val2) {
        if (cases.indexOf(val2) !== -1)
          return val2;
        return invalidValue(cases, val2);
      }
      function transformArray(typ2, val2) {
        if (!Array.isArray(val2))
          return invalidValue("array", val2);
        return val2.map((el) => transform(el, typ2, getProps));
      }
      function transformDate(val2) {
        if (val2 === null) {
          return null;
        }
        const d = new Date(val2);
        if (isNaN(d.valueOf())) {
          return invalidValue("Date", val2);
        }
        return d;
      }
      function transformObject(props, additional, val2) {
        if (val2 === null || typeof val2 !== "object" || Array.isArray(val2)) {
          return invalidValue("object", val2);
        }
        const result = {};
        Object.getOwnPropertyNames(props).forEach((key2) => {
          const prop = props[key2];
          const v = Object.prototype.hasOwnProperty.call(val2, key2) ? val2[key2] : void 0;
          result[prop.key] = transform(v, prop.typ, getProps, prop.key);
        });
        Object.getOwnPropertyNames(val2).forEach((key2) => {
          if (!Object.prototype.hasOwnProperty.call(props, key2)) {
            result[key2] = transform(val2[key2], additional, getProps, key2);
          }
        });
        return result;
      }
      if (typ === "any")
        return val;
      if (typ === null) {
        if (val === null)
          return val;
        return invalidValue(typ, val);
      }
      if (typ === false)
        return invalidValue(typ, val);
      while (typeof typ === "object" && typ.ref !== void 0) {
        typ = typeMap[typ.ref];
      }
      if (Array.isArray(typ))
        return transformEnum(typ, val);
      if (typeof typ === "object") {
        return typ.hasOwnProperty("unionMembers") ? transformUnion(typ.unionMembers, val) : typ.hasOwnProperty("arrayItems") ? transformArray(typ.arrayItems, val) : typ.hasOwnProperty("props") ? transformObject(getProps(typ), typ.additional, val) : invalidValue(typ, val);
      }
      if (typ === Date && typeof val !== "number")
        return transformDate(val);
      return transformPrimitive(typ, val);
    }
    function cast(val, typ) {
      return transform(val, typ, jsonToJSProps);
    }
    function uncast(val, typ) {
      return transform(val, typ, jsToJSONProps);
    }
    function u(...typs) {
      return { unionMembers: typs };
    }
    function o(props, additional) {
      return { props, additional };
    }
    function r(name) {
      return { ref: name };
    }
    var typeMap = {
      PriceFeed: o([
        { json: "ema_price", js: "ema_price", typ: r("Price") },
        { json: "id", js: "id", typ: "" },
        {
          json: "metadata",
          js: "metadata",
          typ: u(void 0, r("PriceFeedMetadata"))
        },
        { json: "price", js: "price", typ: r("Price") },
        { json: "vaa", js: "vaa", typ: u(void 0, "") }
      ], "any"),
      Price: o([
        { json: "conf", js: "conf", typ: "" },
        { json: "expo", js: "expo", typ: 0 },
        { json: "price", js: "price", typ: "" },
        { json: "publish_time", js: "publish_time", typ: 0 }
      ], "any"),
      PriceFeedMetadata: o([
        {
          json: "attestation_time",
          js: "attestation_time",
          typ: u(void 0, 0)
        },
        { json: "emitter_chain", js: "emitter_chain", typ: 0 },
        {
          json: "prev_publish_time",
          js: "prev_publish_time",
          typ: u(void 0, 0)
        },
        {
          json: "price_service_receive_time",
          js: "price_service_receive_time",
          typ: u(void 0, 0)
        },
        { json: "sequence_number", js: "sequence_number", typ: u(void 0, 0) },
        { json: "slot", js: "slot", typ: u(void 0, 0) }
      ], "any")
    };
  }
});

// browser-external:buffer
var require_buffer = __commonJS({
  "browser-external:buffer"(exports2, module2) {
    module2.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "buffer" has been externalized for browser compatibility. Cannot access "buffer.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/bn.js/lib/bn.js
var require_bn = __commonJS({
  "node_modules/bn.js/lib/bn.js"(exports2, module2) {
    (function(module3, exports3) {
      "use strict";
      function assert3(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN2(number2, base, endian) {
        if (BN2.isBN(number2)) {
          return number2;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number2 !== null) {
          if (base === "le" || base === "be") {
            endian = base;
            base = 10;
          }
          this._init(number2 || 0, base || 10, endian || "be");
        }
      }
      if (typeof module3 === "object") {
        module3.exports = BN2;
      } else {
        exports3.BN = BN2;
      }
      BN2.BN = BN2;
      BN2.wordSize = 26;
      var Buffer4;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer4 = window.Buffer;
        } else {
          Buffer4 = require_buffer().Buffer;
        }
      } catch (e) {
      }
      BN2.isBN = function isBN(num2) {
        if (num2 instanceof BN2) {
          return true;
        }
        return num2 !== null && typeof num2 === "object" && num2.constructor.wordSize === BN2.wordSize && Array.isArray(num2.words);
      };
      BN2.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };
      BN2.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };
      BN2.prototype._init = function init(number2, base, endian) {
        if (typeof number2 === "number") {
          return this._initNumber(number2, base, endian);
        }
        if (typeof number2 === "object") {
          return this._initArray(number2, base, endian);
        }
        if (base === "hex") {
          base = 16;
        }
        assert3(base === (base | 0) && base >= 2 && base <= 36);
        number2 = number2.toString().replace(/\s+/g, "");
        var start = 0;
        if (number2[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number2.length) {
          if (base === 16) {
            this._parseHex(number2, start, endian);
          } else {
            this._parseBase(number2, base, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };
      BN2.prototype._initNumber = function _initNumber(number2, base, endian) {
        if (number2 < 0) {
          this.negative = 1;
          number2 = -number2;
        }
        if (number2 < 67108864) {
          this.words = [number2 & 67108863];
          this.length = 1;
        } else if (number2 < 4503599627370496) {
          this.words = [
            number2 & 67108863,
            number2 / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert3(number2 < 9007199254740992);
          this.words = [
            number2 & 67108863,
            number2 / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le") return;
        this._initArray(this.toArray(), base, endian);
      };
      BN2.prototype._initArray = function _initArray(number2, base, endian) {
        assert3(typeof number2.length === "number");
        if (number2.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number2.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number2.length - 1, j = 0; i >= 0; i -= 3) {
            w = number2[i] | number2[i - 1] << 8 | number2[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number2.length; i += 3) {
            w = number2[i] | number2[i + 1] << 8 | number2[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this._strip();
      };
      function parseHex4Bits(string2, index) {
        var c = string2.charCodeAt(index);
        if (c >= 48 && c <= 57) {
          return c - 48;
        } else if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          assert3(false, "Invalid character in " + string2);
        }
      }
      function parseHexByte(string2, lowerBound, index) {
        var r = parseHex4Bits(string2, index);
        if (index - 1 >= lowerBound) {
          r |= parseHex4Bits(string2, index - 1) << 4;
        }
        return r;
      }
      BN2.prototype._parseHex = function _parseHex(number2, start, endian) {
        this.length = Math.ceil((number2.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i = number2.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number2, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number2.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number2.length; i += 2) {
            w = parseHexByte(number2, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this._strip();
      };
      function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r *= mul;
          if (c >= 49) {
            b = c - 49 + 10;
          } else if (c >= 17) {
            b = c - 17 + 10;
          } else {
            b = c;
          }
          assert3(c >= 0 && b < mul, "Invalid character");
          r += b;
        }
        return r;
      }
      BN2.prototype._parseBase = function _parseBase(number2, base, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number2.length - start;
        var mod2 = total % limbLen;
        var end = Math.min(total, total - mod2) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number2, i, i + limbLen, base);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod2 !== 0) {
          var pow = 1;
          word = parseBase(number2, i, number2.length, base);
          for (i = 0; i < mod2; i++) {
            pow *= base;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this._strip();
      };
      BN2.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }
      BN2.prototype._move = function _move(dest) {
        move(dest, this);
      };
      BN2.prototype.clone = function clone() {
        var r = new BN2(null);
        this.copy(r);
        return r;
      };
      BN2.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN2.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN2.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
        try {
          BN2.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
        } catch (e) {
          BN2.prototype.inspect = inspect;
        }
      } else {
        BN2.prototype.inspect = inspect;
      }
      function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN2.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
          var groupSize = groupSizes[base];
          var groupBase = groupBases[base];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modrn(groupBase).toString(base);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert3(false, "Base should be between 2 and 36");
      };
      BN2.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert3(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN2.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
      };
      if (Buffer4) {
        BN2.prototype.toBuffer = function toBuffer2(endian, length) {
          return this.toArrayLike(Buffer4, endian, length);
        };
      }
      BN2.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      var allocate = function allocate2(ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };
      BN2.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert3(byteLength <= reqLength, "byte array longer than desired length");
        assert3(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength);
        return res;
      };
      BN2.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position++] = word & 255;
          if (position < res.length) {
            res[position++] = word >> 8 & 255;
          }
          if (position < res.length) {
            res[position++] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position < res.length) {
              res[position++] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position < res.length) {
          res[position++] = carry;
          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };
      BN2.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position--] = word & 255;
          if (position >= 0) {
            res[position--] = word >> 8 & 255;
          }
          if (position >= 0) {
            res[position--] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position >= 0) {
              res[position--] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position >= 0) {
          res[position--] = carry;
          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };
      if (Math.clz32) {
        BN2.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN2.prototype._countBits = function _countBits(w) {
          var t = w;
          var r = 0;
          if (t >= 4096) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }
      BN2.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r++;
        }
        return r;
      };
      BN2.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num2) {
        var w = new Array(num2.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = num2.words[off] >>> wbit & 1;
        }
        return w;
      }
      BN2.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26) break;
        }
        return r;
      };
      BN2.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN2.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN2.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN2.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN2.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN2.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN2.prototype.iuor = function iuor(num2) {
        while (this.length < num2.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num2.length; i++) {
          this.words[i] = this.words[i] | num2.words[i];
        }
        return this._strip();
      };
      BN2.prototype.ior = function ior(num2) {
        assert3((this.negative | num2.negative) === 0);
        return this.iuor(num2);
      };
      BN2.prototype.or = function or(num2) {
        if (this.length > num2.length) return this.clone().ior(num2);
        return num2.clone().ior(this);
      };
      BN2.prototype.uor = function uor(num2) {
        if (this.length > num2.length) return this.clone().iuor(num2);
        return num2.clone().iuor(this);
      };
      BN2.prototype.iuand = function iuand(num2) {
        var b;
        if (this.length > num2.length) {
          b = num2;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num2.words[i];
        }
        this.length = b.length;
        return this._strip();
      };
      BN2.prototype.iand = function iand(num2) {
        assert3((this.negative | num2.negative) === 0);
        return this.iuand(num2);
      };
      BN2.prototype.and = function and(num2) {
        if (this.length > num2.length) return this.clone().iand(num2);
        return num2.clone().iand(this);
      };
      BN2.prototype.uand = function uand(num2) {
        if (this.length > num2.length) return this.clone().iuand(num2);
        return num2.clone().iuand(this);
      };
      BN2.prototype.iuxor = function iuxor(num2) {
        var a;
        var b;
        if (this.length > num2.length) {
          a = this;
          b = num2;
        } else {
          a = num2;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this._strip();
      };
      BN2.prototype.ixor = function ixor(num2) {
        assert3((this.negative | num2.negative) === 0);
        return this.iuxor(num2);
      };
      BN2.prototype.xor = function xor(num2) {
        if (this.length > num2.length) return this.clone().ixor(num2);
        return num2.clone().ixor(this);
      };
      BN2.prototype.uxor = function uxor(num2) {
        if (this.length > num2.length) return this.clone().iuxor(num2);
        return num2.clone().iuxor(this);
      };
      BN2.prototype.inotn = function inotn(width) {
        assert3(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this._strip();
      };
      BN2.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN2.prototype.setn = function setn(bit, val) {
        assert3(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this._strip();
      };
      BN2.prototype.iadd = function iadd(num2) {
        var r;
        if (this.negative !== 0 && num2.negative === 0) {
          this.negative = 0;
          r = this.isub(num2);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num2.negative !== 0) {
          num2.negative = 0;
          r = this.isub(num2);
          num2.negative = 1;
          return r._normSign();
        }
        var a, b;
        if (this.length > num2.length) {
          a = this;
          b = num2;
        } else {
          a = num2;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN2.prototype.add = function add(num2) {
        var res;
        if (num2.negative !== 0 && this.negative === 0) {
          num2.negative = 0;
          res = this.sub(num2);
          num2.negative ^= 1;
          return res;
        } else if (num2.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num2.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num2.length) return this.clone().iadd(num2);
        return num2.clone().iadd(this);
      };
      BN2.prototype.isub = function isub(num2) {
        if (num2.negative !== 0) {
          num2.negative = 0;
          var r = this.iadd(num2);
          num2.negative = 1;
          return r._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num2);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num2);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num2;
        } else {
          a = num2;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this._strip();
      };
      BN2.prototype.sub = function sub(num2) {
        return this.clone().isub(num2);
      };
      function smallMulTo(self2, num2, out) {
        out.negative = num2.negative ^ self2.negative;
        var len = self2.length + num2.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num2.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num2.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self2.words[i] | 0;
            b = num2.words[j] | 0;
            r = a * b + rword;
            ncarry += r / 67108864 | 0;
            rword = r & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out._strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num2, out) {
        var a = self2.words;
        var b = num2.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num2.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num2, out) {
        out.negative = num2.negative ^ self2.negative;
        out.length = self2.length + num2.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num2.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b = num2.words[j] | 0;
            var r = a * b;
            var lo = r & 67108863;
            ncarry = ncarry + (r / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out._strip();
      }
      function jumboMulTo(self2, num2, out) {
        return bigMulTo(self2, num2, out);
      }
      BN2.prototype.mulTo = function mulTo(num2, out) {
        var res;
        var len = this.length + num2.length;
        if (this.length === 10 && num2.length === 10) {
          res = comb10MulTo(this, num2, out);
        } else if (len < 63) {
          res = smallMulTo(this, num2, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num2, out);
        } else {
          res = jumboMulTo(this, num2, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN2.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << l - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }
        assert3(carry === 0);
        assert3((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
      };
      BN2.prototype.mul = function mul(num2) {
        var out = new BN2(null);
        out.words = new Array(this.length + num2.length);
        return this.mulTo(num2, out);
      };
      BN2.prototype.mulf = function mulf(num2) {
        var out = new BN2(null);
        out.words = new Array(this.length + num2.length);
        return jumboMulTo(this, num2, out);
      };
      BN2.prototype.imul = function imul(num2) {
        return this.clone().mulTo(num2, this);
      };
      BN2.prototype.imuln = function imuln(num2) {
        var isNegNum = num2 < 0;
        if (isNegNum) num2 = -num2;
        assert3(typeof num2 === "number");
        assert3(num2 < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num2;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        this.length = num2 === 0 ? 1 : this.length;
        return isNegNum ? this.ineg() : this;
      };
      BN2.prototype.muln = function muln(num2) {
        return this.clone().imuln(num2);
      };
      BN2.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN2.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN2.prototype.pow = function pow(num2) {
        var w = toBitArray(num2);
        if (w.length === 0) return new BN2(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0) break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0) continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN2.prototype.iushln = function iushln(bits) {
        assert3(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this._strip();
      };
      BN2.prototype.ishln = function ishln(bits) {
        assert3(this.negative === 0);
        return this.iushln(bits);
      };
      BN2.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert3(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask2 = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r | word >>> r;
          carry = word & mask2;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this._strip();
      };
      BN2.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert3(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN2.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN2.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN2.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN2.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN2.prototype.testn = function testn(bit) {
        assert3(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s) return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN2.prototype.imaskn = function imaskn(bits) {
        assert3(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert3(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r !== 0) {
          var mask2 = 67108863 ^ 67108863 >>> r << r;
          this.words[this.length - 1] &= mask2;
        }
        return this._strip();
      };
      BN2.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN2.prototype.iaddn = function iaddn(num2) {
        assert3(typeof num2 === "number");
        assert3(num2 < 67108864);
        if (num2 < 0) return this.isubn(-num2);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num2) {
            this.words[0] = num2 - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num2);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num2);
      };
      BN2.prototype._iaddn = function _iaddn(num2) {
        this.words[0] += num2;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN2.prototype.isubn = function isubn(num2) {
        assert3(typeof num2 === "number");
        assert3(num2 < 67108864);
        if (num2 < 0) return this.iaddn(-num2);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num2);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num2;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this._strip();
      };
      BN2.prototype.addn = function addn(num2) {
        return this.clone().iaddn(num2);
      };
      BN2.prototype.subn = function subn(num2) {
        return this.clone().isubn(num2);
      };
      BN2.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN2.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN2.prototype._ishlnsubmul = function _ishlnsubmul(num2, mul, shift) {
        var len = num2.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num2.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num2.words[i] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0) return this._strip();
        assert3(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this._strip();
      };
      BN2.prototype._wordDiv = function _wordDiv(num2, mode) {
        var shift = this.length - num2.length;
        var a = this.clone();
        var b = num2;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN2(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q._strip();
        }
        a._strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN2.prototype.divmod = function divmod(num2, mode, positive) {
        assert3(!num2.isZero());
        if (this.isZero()) {
          return {
            div: new BN2(0),
            mod: new BN2(0)
          };
        }
        var div, mod2, res;
        if (this.negative !== 0 && num2.negative === 0) {
          res = this.neg().divmod(num2, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod2 = res.mod.neg();
            if (positive && mod2.negative !== 0) {
              mod2.iadd(num2);
            }
          }
          return {
            div,
            mod: mod2
          };
        }
        if (this.negative === 0 && num2.negative !== 0) {
          res = this.divmod(num2.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num2.negative) !== 0) {
          res = this.neg().divmod(num2.neg(), mode);
          if (mode !== "div") {
            mod2 = res.mod.neg();
            if (positive && mod2.negative !== 0) {
              mod2.isub(num2);
            }
          }
          return {
            div: res.div,
            mod: mod2
          };
        }
        if (num2.length > this.length || this.cmp(num2) < 0) {
          return {
            div: new BN2(0),
            mod: this
          };
        }
        if (num2.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num2.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN2(this.modrn(num2.words[0]))
            };
          }
          return {
            div: this.divn(num2.words[0]),
            mod: new BN2(this.modrn(num2.words[0]))
          };
        }
        return this._wordDiv(num2, mode);
      };
      BN2.prototype.div = function div(num2) {
        return this.divmod(num2, "div", false).div;
      };
      BN2.prototype.mod = function mod2(num2) {
        return this.divmod(num2, "mod", false).mod;
      };
      BN2.prototype.umod = function umod(num2) {
        return this.divmod(num2, "mod", true).mod;
      };
      BN2.prototype.divRound = function divRound(num2) {
        var dm = this.divmod(num2);
        if (dm.mod.isZero()) return dm.div;
        var mod2 = dm.div.negative !== 0 ? dm.mod.isub(num2) : dm.mod;
        var half = num2.ushrn(1);
        var r2 = num2.andln(1);
        var cmp = mod2.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN2.prototype.modrn = function modrn(num2) {
        var isNegNum = num2 < 0;
        if (isNegNum) num2 = -num2;
        assert3(num2 <= 67108863);
        var p = (1 << 26) % num2;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num2;
        }
        return isNegNum ? -acc : acc;
      };
      BN2.prototype.modn = function modn(num2) {
        return this.modrn(num2);
      };
      BN2.prototype.idivn = function idivn(num2) {
        var isNegNum = num2 < 0;
        if (isNegNum) num2 = -num2;
        assert3(num2 <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num2 | 0;
          carry = w % num2;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
      };
      BN2.prototype.divn = function divn(num2) {
        return this.clone().idivn(num2);
      };
      BN2.prototype.egcd = function egcd(p) {
        assert3(p.negative === 0);
        assert3(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN2(1);
        var B = new BN2(0);
        var C = new BN2(0);
        var D = new BN2(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN2.prototype._invmp = function _invmp(p) {
        assert3(p.negative === 0);
        assert3(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN2(1);
        var x2 = new BN2(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN2.prototype.gcd = function gcd(num2) {
        if (this.isZero()) return num2.abs();
        if (num2.isZero()) return this.abs();
        var a = this.clone();
        var b = num2.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r = a.cmp(b);
          if (r < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN2.prototype.invm = function invm(num2) {
        return this.egcd(num2).a.umod(num2);
      };
      BN2.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN2.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN2.prototype.andln = function andln(num2) {
        return this.words[0] & num2;
      };
      BN2.prototype.bincn = function bincn(bit) {
        assert3(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN2.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN2.prototype.cmpn = function cmpn(num2) {
        var negative = num2 < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this._strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num2 = -num2;
          }
          assert3(num2 <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num2 ? 0 : w < num2 ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN2.prototype.cmp = function cmp(num2) {
        if (this.negative !== 0 && num2.negative === 0) return -1;
        if (this.negative === 0 && num2.negative !== 0) return 1;
        var res = this.ucmp(num2);
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN2.prototype.ucmp = function ucmp(num2) {
        if (this.length > num2.length) return 1;
        if (this.length < num2.length) return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num2.words[i] | 0;
          if (a === b) continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN2.prototype.gtn = function gtn(num2) {
        return this.cmpn(num2) === 1;
      };
      BN2.prototype.gt = function gt(num2) {
        return this.cmp(num2) === 1;
      };
      BN2.prototype.gten = function gten(num2) {
        return this.cmpn(num2) >= 0;
      };
      BN2.prototype.gte = function gte(num2) {
        return this.cmp(num2) >= 0;
      };
      BN2.prototype.ltn = function ltn(num2) {
        return this.cmpn(num2) === -1;
      };
      BN2.prototype.lt = function lt(num2) {
        return this.cmp(num2) === -1;
      };
      BN2.prototype.lten = function lten(num2) {
        return this.cmpn(num2) <= 0;
      };
      BN2.prototype.lte = function lte(num2) {
        return this.cmp(num2) <= 0;
      };
      BN2.prototype.eqn = function eqn(num2) {
        return this.cmpn(num2) === 0;
      };
      BN2.prototype.eq = function eq(num2) {
        return this.cmp(num2) === 0;
      };
      BN2.red = function red(num2) {
        return new Red(num2);
      };
      BN2.prototype.toRed = function toRed(ctx) {
        assert3(!this.red, "Already a number in reduction context");
        assert3(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN2.prototype.fromRed = function fromRed() {
        assert3(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN2.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN2.prototype.forceRed = function forceRed(ctx) {
        assert3(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN2.prototype.redAdd = function redAdd(num2) {
        assert3(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num2);
      };
      BN2.prototype.redIAdd = function redIAdd(num2) {
        assert3(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num2);
      };
      BN2.prototype.redSub = function redSub(num2) {
        assert3(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num2);
      };
      BN2.prototype.redISub = function redISub(num2) {
        assert3(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num2);
      };
      BN2.prototype.redShl = function redShl(num2) {
        assert3(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num2);
      };
      BN2.prototype.redMul = function redMul(num2) {
        assert3(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num2);
        return this.red.mul(this, num2);
      };
      BN2.prototype.redIMul = function redIMul(num2) {
        assert3(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num2);
        return this.red.imul(this, num2);
      };
      BN2.prototype.redSqr = function redSqr() {
        assert3(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN2.prototype.redISqr = function redISqr() {
        assert3(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN2.prototype.redSqrt = function redSqrt() {
        assert3(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN2.prototype.redInvm = function redInvm() {
        assert3(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN2.prototype.redNeg = function redNeg() {
        assert3(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN2.prototype.redPow = function redPow(num2) {
        assert3(this.red && !num2.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num2);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p) {
        this.name = name;
        this.p = new BN2(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN2(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN2(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num2) {
        var r = num2;
        var rlen;
        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== void 0) {
            r.strip();
          } else {
            r._strip();
          }
        }
        return r;
      };
      MPrime.prototype.split = function split2(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num2) {
        return num2.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split2(input, output) {
        var mask2 = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask2;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask2) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num2) {
        num2.words[num2.length] = 0;
        num2.words[num2.length + 1] = 0;
        num2.length += 2;
        var lo = 0;
        for (var i = 0; i < num2.length; i++) {
          var w = num2.words[i] | 0;
          lo += w * 977;
          num2.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num2.words[num2.length - 1] === 0) {
          num2.length--;
          if (num2.words[num2.length - 1] === 0) {
            num2.length--;
          }
        }
        return num2;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num2) {
        var carry = 0;
        for (var i = 0; i < num2.length; i++) {
          var hi = (num2.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num2.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num2.words[num2.length++] = carry;
        }
        return num2;
      };
      BN2._prime = function prime(name) {
        if (primes[name]) return primes[name];
        var prime2;
        if (name === "k256") {
          prime2 = new K256();
        } else if (name === "p224") {
          prime2 = new P224();
        } else if (name === "p192") {
          prime2 = new P192();
        } else if (name === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime2;
        return prime2;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime = BN2._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert3(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert3(a.negative === 0, "red works only with positives");
        assert3(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert3((a.negative | b.negative) === 0, "red works only with positives");
        assert3(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num2) {
        this._verify1(a);
        return this.imod(a.ushln(num2));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert3(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN2(1)).iushrn(2);
          return this.pow(a, pow);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert3(!q.isZero());
        var one = new BN2(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN2(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert3(i < m);
          var b = this.pow(c, new BN2(1).iushln(m - i - 1));
          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a, num2) {
        if (num2.isZero()) return new BN2(1).toRed(this);
        if (num2.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN2(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num2.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num2.length - 1; i >= 0; i--) {
          var word = num2.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num2) {
        var r = num2.umod(this.m);
        return r === num2 ? r.clone() : r;
      };
      Red.prototype.convertFrom = function convertFrom(num2) {
        var res = num2.clone();
        res.red = null;
        return res;
      };
      BN2.mont = function mont(num2) {
        return new Mont(num2);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN2(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num2) {
        return this.imod(num2.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num2) {
        var r = this.imod(num2.mul(this.rinv));
        r.red = null;
        return r;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN2(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module2 === "undefined" || module2, exports2);
  }
});

// node_modules/@pythnetwork/price-service-sdk/lib/AccumulatorUpdateData.js
var require_AccumulatorUpdateData = __commonJS({
  "node_modules/@pythnetwork/price-service-sdk/lib/AccumulatorUpdateData.js"(exports2) {
    "use strict";
    var __importDefault2 = exports2 && exports2.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseAccumulatorUpdateData = exports2.sliceAccumulatorUpdateData = exports2.parseTwapMessage = exports2.parsePriceFeedMessage = exports2.isAccumulatorUpdateData = void 0;
    var bn_js_1 = __importDefault2(require_bn());
    var ACCUMULATOR_MAGIC = "504e4155";
    var MAJOR_VERSION = 1;
    var MINOR_VERSION = 0;
    var KECCAK160_HASH_SIZE = 20;
    var PRICE_FEED_MESSAGE_VARIANT = 0;
    var TWAP_MESSAGE_VARIANT = 1;
    function isAccumulatorUpdateData(updateBytes) {
      return updateBytes.toString("hex").slice(0, 8) === ACCUMULATOR_MAGIC && updateBytes[4] === MAJOR_VERSION && updateBytes[5] === MINOR_VERSION;
    }
    exports2.isAccumulatorUpdateData = isAccumulatorUpdateData;
    function parsePriceFeedMessage(message) {
      let cursor = 0;
      const variant = message.readUInt8(cursor);
      if (variant !== PRICE_FEED_MESSAGE_VARIANT) {
        throw new Error("Not a price feed message");
      }
      cursor += 1;
      const feedId = message.subarray(cursor, cursor + 32);
      cursor += 32;
      const price = new bn_js_1.default(message.subarray(cursor, cursor + 8), "be");
      cursor += 8;
      const confidence = new bn_js_1.default(message.subarray(cursor, cursor + 8), "be");
      cursor += 8;
      const exponent = message.readInt32BE(cursor);
      cursor += 4;
      const publishTime = new bn_js_1.default(message.subarray(cursor, cursor + 8), "be");
      cursor += 8;
      const prevPublishTime = new bn_js_1.default(message.subarray(cursor, cursor + 8), "be");
      cursor += 8;
      const emaPrice = new bn_js_1.default(message.subarray(cursor, cursor + 8), "be");
      cursor += 8;
      const emaConf = new bn_js_1.default(message.subarray(cursor, cursor + 8), "be");
      cursor += 8;
      return {
        feedId,
        price,
        confidence,
        exponent,
        publishTime,
        prevPublishTime,
        emaPrice,
        emaConf
      };
    }
    exports2.parsePriceFeedMessage = parsePriceFeedMessage;
    function parseTwapMessage(message) {
      let cursor = 0;
      const variant = message.readUInt8(cursor);
      if (variant !== TWAP_MESSAGE_VARIANT) {
        throw new Error("Not a twap message");
      }
      cursor += 1;
      const feedId = message.subarray(cursor, cursor + 32);
      cursor += 32;
      const cumulativePrice = new bn_js_1.default(message.subarray(cursor, cursor + 16), "be");
      cursor += 16;
      const cumulativeConf = new bn_js_1.default(message.subarray(cursor, cursor + 16), "be");
      cursor += 16;
      const numDownSlots = new bn_js_1.default(message.subarray(cursor, cursor + 8), "be");
      cursor += 8;
      const exponent = message.readInt32BE(cursor);
      cursor += 4;
      const publishTime = new bn_js_1.default(message.subarray(cursor, cursor + 8), "be");
      cursor += 8;
      const prevPublishTime = new bn_js_1.default(message.subarray(cursor, cursor + 8), "be");
      cursor += 8;
      const publishSlot = new bn_js_1.default(message.subarray(cursor, cursor + 8), "be");
      cursor += 8;
      return {
        feedId,
        cumulativePrice,
        cumulativeConf,
        numDownSlots,
        exponent,
        publishTime,
        prevPublishTime,
        publishSlot
      };
    }
    exports2.parseTwapMessage = parseTwapMessage;
    function sliceAccumulatorUpdateData(data, start, end) {
      if (!isAccumulatorUpdateData(data)) {
        throw new Error("Invalid accumulator message");
      }
      let cursor = 6;
      const trailingPayloadSize = data.readUint8(cursor);
      cursor += 1 + trailingPayloadSize;
      cursor += 1;
      const vaaSize = data.readUint16BE(cursor);
      cursor += 2;
      cursor += vaaSize;
      const endOfVaa = cursor;
      const updates = [];
      const numUpdates = data.readUInt8(cursor);
      cursor += 1;
      for (let i = 0; i < numUpdates; i++) {
        const updateStart = cursor;
        const messageSize = data.readUint16BE(cursor);
        cursor += 2;
        cursor += messageSize;
        const numProofs = data.readUInt8(cursor);
        cursor += 1;
        cursor += KECCAK160_HASH_SIZE * numProofs;
        updates.push(data.subarray(updateStart, cursor));
      }
      if (cursor !== data.length) {
        throw new Error("Didn't reach the end of the message");
      }
      const sliceUpdates = updates.slice(start, end);
      return Buffer.concat([
        data.subarray(0, endOfVaa),
        Buffer.from([sliceUpdates.length]),
        ...updates.slice(start, end)
      ]);
    }
    exports2.sliceAccumulatorUpdateData = sliceAccumulatorUpdateData;
    function parseAccumulatorUpdateData(data) {
      if (!isAccumulatorUpdateData(data)) {
        throw new Error("Invalid accumulator message");
      }
      let cursor = 6;
      const trailingPayloadSize = data.readUint8(cursor);
      cursor += 1 + trailingPayloadSize;
      cursor += 1;
      const vaaSize = data.readUint16BE(cursor);
      cursor += 2;
      const vaa = data.subarray(cursor, cursor + vaaSize);
      cursor += vaaSize;
      const numUpdates = data.readUInt8(cursor);
      const updates = [];
      cursor += 1;
      for (let i = 0; i < numUpdates; i++) {
        const messageSize = data.readUint16BE(cursor);
        cursor += 2;
        const message = data.subarray(cursor, cursor + messageSize);
        cursor += messageSize;
        const numProofs = data.readUInt8(cursor);
        cursor += 1;
        const proof = [];
        for (let j = 0; j < numProofs; j++) {
          proof.push(Array.from(data.subarray(cursor, cursor + KECCAK160_HASH_SIZE)));
          cursor += KECCAK160_HASH_SIZE;
        }
        updates.push({ message, proof });
      }
      if (cursor !== data.length) {
        throw new Error("Didn't reach the end of the message");
      }
      return { vaa, updates };
    }
    exports2.parseAccumulatorUpdateData = parseAccumulatorUpdateData;
  }
});

// node_modules/@pythnetwork/price-service-sdk/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/@pythnetwork/price-service-sdk/lib/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PriceFeed = exports2.PriceFeedMetadata = exports2.Price = exports2.parseTwapMessage = exports2.parsePriceFeedMessage = exports2.parseAccumulatorUpdateData = exports2.sliceAccumulatorUpdateData = exports2.isAccumulatorUpdateData = void 0;
    var PriceFeed_1 = require_PriceFeed();
    var AccumulatorUpdateData_1 = require_AccumulatorUpdateData();
    Object.defineProperty(exports2, "isAccumulatorUpdateData", { enumerable: true, get: function() {
      return AccumulatorUpdateData_1.isAccumulatorUpdateData;
    } });
    Object.defineProperty(exports2, "sliceAccumulatorUpdateData", { enumerable: true, get: function() {
      return AccumulatorUpdateData_1.sliceAccumulatorUpdateData;
    } });
    Object.defineProperty(exports2, "parseAccumulatorUpdateData", { enumerable: true, get: function() {
      return AccumulatorUpdateData_1.parseAccumulatorUpdateData;
    } });
    Object.defineProperty(exports2, "parsePriceFeedMessage", { enumerable: true, get: function() {
      return AccumulatorUpdateData_1.parsePriceFeedMessage;
    } });
    Object.defineProperty(exports2, "parseTwapMessage", { enumerable: true, get: function() {
      return AccumulatorUpdateData_1.parseTwapMessage;
    } });
    var Price = class _Price {
      constructor(rawPrice) {
        __publicField(this, "conf");
        __publicField(this, "expo");
        __publicField(this, "price");
        __publicField(this, "publishTime");
        this.conf = rawPrice.conf;
        this.expo = rawPrice.expo;
        this.price = rawPrice.price;
        this.publishTime = rawPrice.publishTime;
      }
      /**
       * Get price as number. Warning: this conversion might result in an inaccurate number.
       * We store price and confidence values in our Oracle at 64-bit precision, but the JavaScript
       * number type can only represent numbers with 52-bit precision. So if a price or confidence
       * is larger than 52-bits, the conversion will lose the most insignificant bits.
       *
       * @returns a floating point number representing the price
       */
      getPriceAsNumberUnchecked() {
        return Number(this.price) * 10 ** this.expo;
      }
      /**
       * Get price as number. Warning: this conversion might result in an inaccurate number.
       * Explanation is the same as `priceAsNumberUnchecked()` documentation.
       *
       * @returns a floating point number representing the price
       */
      getConfAsNumberUnchecked() {
        return Number(this.conf) * 10 ** this.expo;
      }
      static fromJson(json) {
        const jsonPrice = PriceFeed_1.Convert.toPrice(json);
        return new _Price({
          conf: jsonPrice.conf,
          expo: jsonPrice.expo,
          price: jsonPrice.price,
          publishTime: jsonPrice.publish_time
        });
      }
      toJson() {
        const jsonPrice = {
          conf: this.conf,
          expo: this.expo,
          price: this.price,
          publish_time: this.publishTime
        };
        return PriceFeed_1.Convert.priceToJson(jsonPrice);
      }
    };
    exports2.Price = Price;
    var PriceFeedMetadata = class _PriceFeedMetadata {
      constructor(metadata) {
        /**
         * Attestation time of the price
         */
        __publicField(this, "attestationTime");
        /**
         * Chain of the emitter
         */
        __publicField(this, "emitterChain");
        /**
         * The time that the price service received the price
         */
        __publicField(this, "priceServiceReceiveTime");
        /**
         * Sequence number of the price
         */
        __publicField(this, "sequenceNumber");
        /**
         * Pythnet slot number of the price
         */
        __publicField(this, "slot");
        /**
         * The time that the previous price was published
         */
        __publicField(this, "prevPublishTime");
        this.attestationTime = metadata.attestationTime;
        this.emitterChain = metadata.emitterChain;
        this.priceServiceReceiveTime = metadata.receiveTime;
        this.sequenceNumber = metadata.sequenceNumber;
        this.slot = metadata.slot;
        this.prevPublishTime = metadata.prevPublishTime;
      }
      static fromJson(json) {
        if (json === void 0) {
          return void 0;
        }
        const jsonFeed = PriceFeed_1.Convert.toPriceFeedMetadata(json);
        return new _PriceFeedMetadata({
          attestationTime: jsonFeed.attestation_time,
          emitterChain: jsonFeed.emitter_chain,
          receiveTime: jsonFeed.price_service_receive_time,
          sequenceNumber: jsonFeed.sequence_number,
          slot: jsonFeed.slot,
          prevPublishTime: jsonFeed.prev_publish_time
        });
      }
      toJson() {
        const jsonFeed = {
          attestation_time: this.attestationTime,
          emitter_chain: this.emitterChain,
          price_service_receive_time: this.priceServiceReceiveTime,
          sequence_number: this.sequenceNumber,
          slot: this.slot,
          prev_publish_time: this.prevPublishTime
        };
        return PriceFeed_1.Convert.priceFeedMetadataToJson(jsonFeed);
      }
    };
    exports2.PriceFeedMetadata = PriceFeedMetadata;
    var PriceFeed = class _PriceFeed {
      constructor(rawFeed) {
        /**
         * Exponentially-weighted moving average Price
         */
        __publicField(this, "emaPrice");
        /**
         * Unique identifier for this price.
         */
        __publicField(this, "id");
        /**
         * Metadata of the price
         */
        __publicField(this, "metadata");
        /**
         * VAA of the price
         */
        __publicField(this, "vaa");
        /**
         * Price
         */
        __publicField(this, "price");
        this.emaPrice = rawFeed.emaPrice;
        this.id = rawFeed.id;
        this.metadata = rawFeed.metadata;
        this.vaa = rawFeed.vaa;
        this.price = rawFeed.price;
      }
      static fromJson(json) {
        const jsonFeed = PriceFeed_1.Convert.toPriceFeed(json);
        return new _PriceFeed({
          emaPrice: Price.fromJson(jsonFeed.ema_price),
          id: jsonFeed.id,
          metadata: PriceFeedMetadata.fromJson(jsonFeed.metadata),
          vaa: jsonFeed.vaa,
          price: Price.fromJson(jsonFeed.price)
        });
      }
      toJson() {
        var _a;
        const jsonFeed = {
          ema_price: this.emaPrice.toJson(),
          id: this.id,
          metadata: (_a = this.metadata) == null ? void 0 : _a.toJson(),
          price: this.price.toJson()
        };
        return PriceFeed_1.Convert.priceFeedToJson(jsonFeed);
      }
      /**
       * Get the price and confidence interval as fixed-point numbers of the form a * 10^e.
       * This function returns the current best estimate of the price at the time that this `PriceFeed` was
       * published (`publishTime`). The returned price can be from arbitrarily far in the past; this function
       * makes no guarantees that the returned price is recent or useful for any particular application.
       *
       * Users of this function should check the returned `publishTime` to ensure that the returned price is
       * sufficiently recent for their application. If you are considering using this function, it may be
       * safer / easier to use `getPriceNoOlderThan` method.
       *
       * @returns a Price that contains the price and confidence interval along with
       * the exponent for them, and publish time of the price.
       */
      getPriceUnchecked() {
        return this.price;
      }
      /**
       * Get the exponentially-weighted moving average (EMA) price and confidence interval.
       *
       * This function returns the current best estimate of the price at the time that this `PriceFeed` was
       * published (`publishTime`). The returned price can be from arbitrarily far in the past; this function
       * makes no guarantees that the returned price is recent or useful for any particular application.
       *
       * Users of this function should check the returned `publishTime` to ensure that the returned price is
       * sufficiently recent for their application. If you are considering using this function, it may be
       * safer / easier to use `getEmaPriceNoOlderThan` method.
       *
       * At the moment, the confidence interval returned by this method is computed in
       * a somewhat questionable way, so we do not recommend using it for high-value applications.
       *
       * @returns a Price that contains the EMA price and confidence interval along with
       * the exponent for them, and publish time of the price.
       */
      getEmaPriceUnchecked() {
        return this.emaPrice;
      }
      /**
       * Get the price if it was updated no older than `age` seconds of the current time.
       *
       * This function is a sanity-checked version of `getPriceUnchecked` which is useful in
       * applications that require a sufficiently-recent price. Returns `undefined` if the price
       * is not recent enough.
       *
       * @param age return a price as long as it has been updated within this number of seconds
       * @returns a Price struct containing the price, confidence interval along with the exponent for
       * both numbers, and its publish time, or `undefined` if no price update occurred within `age` seconds of the current time.
       */
      getPriceNoOlderThan(age) {
        const price = this.getPriceUnchecked();
        const currentTime = Math.floor(Date.now() / 1e3);
        if (Math.abs(currentTime - price.publishTime) > age) {
          return void 0;
        }
        return price;
      }
      /**
       * Get the exponentially-weighted moving average (EMA) price if it was updated no older than
       * `age` seconds of the current time.
       *
       * This function is a sanity-checked version of `getEmaPriceUnchecked` which is useful in
       * applications that require a sufficiently-recent price. Returns `undefined` if the price
       * is not recent enough.
       *
       * At the moment, the confidence interval returned by this method is computed in
       * a somewhat questionable way, so we do not recommend using it for high-value applications.
       *
       * @param age return a price as long as it has been updated within this number of seconds
       * @returns a Price struct containing the EMA price, confidence interval along with the exponent for
       * both numbers, and its publish time, or `undefined` if no price update occurred within `age` seconds of the current time.
       */
      getEmaPriceNoOlderThan(age) {
        const emaPrice = this.getEmaPriceUnchecked();
        const currentTime = Math.floor(Date.now() / 1e3);
        if (Math.abs(currentTime - emaPrice.publishTime) > age) {
          return void 0;
        }
        return emaPrice;
      }
      /**
       * Get the price feed metadata.
       *
       * @returns a struct containing the attestation time, emitter chain, and the sequence number.
       * Returns `undefined` if metadata is currently unavailable.
       */
      getMetadata() {
        return this.metadata;
      }
      /**
       * Get the price feed vaa.
       *
       * @returns vaa in base64.
       * Returns `undefined` if vaa is unavailable.
       */
      getVAA() {
        return this.vaa;
      }
    };
    exports2.PriceFeed = PriceFeed;
  }
});

// node_modules/@babel/runtime/helpers/interopRequireDefault.js
var require_interopRequireDefault = __commonJS({
  "node_modules/@babel/runtime/helpers/interopRequireDefault.js"(exports2, module2) {
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : {
        "default": e
      };
    }
    module2.exports = _interopRequireDefault, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime/helpers/typeof.js
var require_typeof = __commonJS({
  "node_modules/@babel/runtime/helpers/typeof.js"(exports2, module2) {
    function _typeof(o) {
      "@babel/helpers - typeof";
      return module2.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, module2.exports.__esModule = true, module2.exports["default"] = module2.exports, _typeof(o);
    }
    module2.exports = _typeof, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime/helpers/regeneratorRuntime.js
var require_regeneratorRuntime = __commonJS({
  "node_modules/@babel/runtime/helpers/regeneratorRuntime.js"(exports2, module2) {
    var _typeof = require_typeof()["default"];
    function _regeneratorRuntime() {
      "use strict";
      module2.exports = _regeneratorRuntime = function _regeneratorRuntime2() {
        return e;
      }, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
      var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function(t2, e2, r2) {
        t2[e2] = r2.value;
      }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag";
      function define3(t2, e2, r2) {
        return Object.defineProperty(t2, e2, {
          value: r2,
          enumerable: true,
          configurable: true,
          writable: true
        }), t2[e2];
      }
      try {
        define3({}, "");
      } catch (t2) {
        define3 = function define4(t3, e2, r2) {
          return t3[e2] = r2;
        };
      }
      function wrap(t2, e2, r2, n2) {
        var i2 = e2 && e2.prototype instanceof Generator ? e2 : Generator, a2 = Object.create(i2.prototype), c2 = new Context(n2 || []);
        return o(a2, "_invoke", {
          value: makeInvokeMethod(t2, r2, c2)
        }), a2;
      }
      function tryCatch(t2, e2, r2) {
        try {
          return {
            type: "normal",
            arg: t2.call(e2, r2)
          };
        } catch (t3) {
          return {
            type: "throw",
            arg: t3
          };
        }
      }
      e.wrap = wrap;
      var h = "suspendedStart", l = "suspendedYield", f2 = "executing", s = "completed", y = {};
      function Generator() {
      }
      function GeneratorFunction() {
      }
      function GeneratorFunctionPrototype() {
      }
      var p = {};
      define3(p, a, function() {
        return this;
      });
      var d = Object.getPrototypeOf, v = d && d(d(values([])));
      v && v !== r && n.call(v, a) && (p = v);
      var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
      function defineIteratorMethods(t2) {
        ["next", "throw", "return"].forEach(function(e2) {
          define3(t2, e2, function(t3) {
            return this._invoke(e2, t3);
          });
        });
      }
      function AsyncIterator2(t2, e2) {
        function invoke(r3, o2, i2, a2) {
          var c2 = tryCatch(t2[r3], t2, o2);
          if ("throw" !== c2.type) {
            var u2 = c2.arg, h2 = u2.value;
            return h2 && "object" == _typeof(h2) && n.call(h2, "__await") ? e2.resolve(h2.__await).then(function(t3) {
              invoke("next", t3, i2, a2);
            }, function(t3) {
              invoke("throw", t3, i2, a2);
            }) : e2.resolve(h2).then(function(t3) {
              u2.value = t3, i2(u2);
            }, function(t3) {
              return invoke("throw", t3, i2, a2);
            });
          }
          a2(c2.arg);
        }
        var r2;
        o(this, "_invoke", {
          value: function value(t3, n2) {
            function callInvokeWithMethodAndArg() {
              return new e2(function(e3, r3) {
                invoke(t3, n2, e3, r3);
              });
            }
            return r2 = r2 ? r2.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
          }
        });
      }
      function makeInvokeMethod(e2, r2, n2) {
        var o2 = h;
        return function(i2, a2) {
          if (o2 === f2) throw Error("Generator is already running");
          if (o2 === s) {
            if ("throw" === i2) throw a2;
            return {
              value: t,
              done: true
            };
          }
          for (n2.method = i2, n2.arg = a2; ; ) {
            var c2 = n2.delegate;
            if (c2) {
              var u2 = maybeInvokeDelegate(c2, n2);
              if (u2) {
                if (u2 === y) continue;
                return u2;
              }
            }
            if ("next" === n2.method) n2.sent = n2._sent = n2.arg;
            else if ("throw" === n2.method) {
              if (o2 === h) throw o2 = s, n2.arg;
              n2.dispatchException(n2.arg);
            } else "return" === n2.method && n2.abrupt("return", n2.arg);
            o2 = f2;
            var p2 = tryCatch(e2, r2, n2);
            if ("normal" === p2.type) {
              if (o2 = n2.done ? s : l, p2.arg === y) continue;
              return {
                value: p2.arg,
                done: n2.done
              };
            }
            "throw" === p2.type && (o2 = s, n2.method = "throw", n2.arg = p2.arg);
          }
        };
      }
      function maybeInvokeDelegate(e2, r2) {
        var n2 = r2.method, o2 = e2.iterator[n2];
        if (o2 === t) return r2.delegate = null, "throw" === n2 && e2.iterator["return"] && (r2.method = "return", r2.arg = t, maybeInvokeDelegate(e2, r2), "throw" === r2.method) || "return" !== n2 && (r2.method = "throw", r2.arg = new TypeError("The iterator does not provide a '" + n2 + "' method")), y;
        var i2 = tryCatch(o2, e2.iterator, r2.arg);
        if ("throw" === i2.type) return r2.method = "throw", r2.arg = i2.arg, r2.delegate = null, y;
        var a2 = i2.arg;
        return a2 ? a2.done ? (r2[e2.resultName] = a2.value, r2.next = e2.nextLoc, "return" !== r2.method && (r2.method = "next", r2.arg = t), r2.delegate = null, y) : a2 : (r2.method = "throw", r2.arg = new TypeError("iterator result is not an object"), r2.delegate = null, y);
      }
      function pushTryEntry(t2) {
        var e2 = {
          tryLoc: t2[0]
        };
        1 in t2 && (e2.catchLoc = t2[1]), 2 in t2 && (e2.finallyLoc = t2[2], e2.afterLoc = t2[3]), this.tryEntries.push(e2);
      }
      function resetTryEntry(t2) {
        var e2 = t2.completion || {};
        e2.type = "normal", delete e2.arg, t2.completion = e2;
      }
      function Context(t2) {
        this.tryEntries = [{
          tryLoc: "root"
        }], t2.forEach(pushTryEntry, this), this.reset(true);
      }
      function values(e2) {
        if (e2 || "" === e2) {
          var r2 = e2[a];
          if (r2) return r2.call(e2);
          if ("function" == typeof e2.next) return e2;
          if (!isNaN(e2.length)) {
            var o2 = -1, i2 = function next() {
              for (; ++o2 < e2.length; ) if (n.call(e2, o2)) return next.value = e2[o2], next.done = false, next;
              return next.value = t, next.done = true, next;
            };
            return i2.next = i2;
          }
        }
        throw new TypeError(_typeof(e2) + " is not iterable");
      }
      return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
        value: GeneratorFunctionPrototype,
        configurable: true
      }), o(GeneratorFunctionPrototype, "constructor", {
        value: GeneratorFunction,
        configurable: true
      }), GeneratorFunction.displayName = define3(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function(t2) {
        var e2 = "function" == typeof t2 && t2.constructor;
        return !!e2 && (e2 === GeneratorFunction || "GeneratorFunction" === (e2.displayName || e2.name));
      }, e.mark = function(t2) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(t2, GeneratorFunctionPrototype) : (t2.__proto__ = GeneratorFunctionPrototype, define3(t2, u, "GeneratorFunction")), t2.prototype = Object.create(g), t2;
      }, e.awrap = function(t2) {
        return {
          __await: t2
        };
      }, defineIteratorMethods(AsyncIterator2.prototype), define3(AsyncIterator2.prototype, c, function() {
        return this;
      }), e.AsyncIterator = AsyncIterator2, e.async = function(t2, r2, n2, o2, i2) {
        void 0 === i2 && (i2 = Promise);
        var a2 = new AsyncIterator2(wrap(t2, r2, n2, o2), i2);
        return e.isGeneratorFunction(r2) ? a2 : a2.next().then(function(t3) {
          return t3.done ? t3.value : a2.next();
        });
      }, defineIteratorMethods(g), define3(g, u, "Generator"), define3(g, a, function() {
        return this;
      }), define3(g, "toString", function() {
        return "[object Generator]";
      }), e.keys = function(t2) {
        var e2 = Object(t2), r2 = [];
        for (var n2 in e2) r2.push(n2);
        return r2.reverse(), function next() {
          for (; r2.length; ) {
            var t3 = r2.pop();
            if (t3 in e2) return next.value = t3, next.done = false, next;
          }
          return next.done = true, next;
        };
      }, e.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(e2) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = false, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e2) for (var r2 in this) "t" === r2.charAt(0) && n.call(this, r2) && !isNaN(+r2.slice(1)) && (this[r2] = t);
        },
        stop: function stop() {
          this.done = true;
          var t2 = this.tryEntries[0].completion;
          if ("throw" === t2.type) throw t2.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(e2) {
          if (this.done) throw e2;
          var r2 = this;
          function handle(n2, o3) {
            return a2.type = "throw", a2.arg = e2, r2.next = n2, o3 && (r2.method = "next", r2.arg = t), !!o3;
          }
          for (var o2 = this.tryEntries.length - 1; o2 >= 0; --o2) {
            var i2 = this.tryEntries[o2], a2 = i2.completion;
            if ("root" === i2.tryLoc) return handle("end");
            if (i2.tryLoc <= this.prev) {
              var c2 = n.call(i2, "catchLoc"), u2 = n.call(i2, "finallyLoc");
              if (c2 && u2) {
                if (this.prev < i2.catchLoc) return handle(i2.catchLoc, true);
                if (this.prev < i2.finallyLoc) return handle(i2.finallyLoc);
              } else if (c2) {
                if (this.prev < i2.catchLoc) return handle(i2.catchLoc, true);
              } else {
                if (!u2) throw Error("try statement without catch or finally");
                if (this.prev < i2.finallyLoc) return handle(i2.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(t2, e2) {
          for (var r2 = this.tryEntries.length - 1; r2 >= 0; --r2) {
            var o2 = this.tryEntries[r2];
            if (o2.tryLoc <= this.prev && n.call(o2, "finallyLoc") && this.prev < o2.finallyLoc) {
              var i2 = o2;
              break;
            }
          }
          i2 && ("break" === t2 || "continue" === t2) && i2.tryLoc <= e2 && e2 <= i2.finallyLoc && (i2 = null);
          var a2 = i2 ? i2.completion : {};
          return a2.type = t2, a2.arg = e2, i2 ? (this.method = "next", this.next = i2.finallyLoc, y) : this.complete(a2);
        },
        complete: function complete(t2, e2) {
          if ("throw" === t2.type) throw t2.arg;
          return "break" === t2.type || "continue" === t2.type ? this.next = t2.arg : "return" === t2.type ? (this.rval = this.arg = t2.arg, this.method = "return", this.next = "end") : "normal" === t2.type && e2 && (this.next = e2), y;
        },
        finish: function finish(t2) {
          for (var e2 = this.tryEntries.length - 1; e2 >= 0; --e2) {
            var r2 = this.tryEntries[e2];
            if (r2.finallyLoc === t2) return this.complete(r2.completion, r2.afterLoc), resetTryEntry(r2), y;
          }
        },
        "catch": function _catch(t2) {
          for (var e2 = this.tryEntries.length - 1; e2 >= 0; --e2) {
            var r2 = this.tryEntries[e2];
            if (r2.tryLoc === t2) {
              var n2 = r2.completion;
              if ("throw" === n2.type) {
                var o2 = n2.arg;
                resetTryEntry(r2);
              }
              return o2;
            }
          }
          throw Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(e2, r2, n2) {
          return this.delegate = {
            iterator: values(e2),
            resultName: r2,
            nextLoc: n2
          }, "next" === this.method && (this.arg = t), y;
        }
      }, e;
    }
    module2.exports = _regeneratorRuntime, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime/regenerator/index.js
var require_regenerator = __commonJS({
  "node_modules/@babel/runtime/regenerator/index.js"(exports2, module2) {
    var runtime = require_regeneratorRuntime()();
    module2.exports = runtime;
    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      if (typeof globalThis === "object") {
        globalThis.regeneratorRuntime = runtime;
      } else {
        Function("r", "regeneratorRuntime = r")(runtime);
      }
    }
  }
});

// node_modules/@babel/runtime/helpers/asyncToGenerator.js
var require_asyncToGenerator = __commonJS({
  "node_modules/@babel/runtime/helpers/asyncToGenerator.js"(exports2, module2) {
    function asyncGeneratorStep(n, t, e, r, o, a, c) {
      try {
        var i = n[a](c), u = i.value;
      } catch (n2) {
        return void e(n2);
      }
      i.done ? t(u) : Promise.resolve(u).then(r, o);
    }
    function _asyncToGenerator(n) {
      return function() {
        var t = this, e = arguments;
        return new Promise(function(r, o) {
          var a = n.apply(t, e);
          function _next(n2) {
            asyncGeneratorStep(a, r, o, _next, _throw, "next", n2);
          }
          function _throw(n2) {
            asyncGeneratorStep(a, r, o, _next, _throw, "throw", n2);
          }
          _next(void 0);
        });
      };
    }
    module2.exports = _asyncToGenerator, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime/helpers/toPrimitive.js
var require_toPrimitive = __commonJS({
  "node_modules/@babel/runtime/helpers/toPrimitive.js"(exports2, module2) {
    var _typeof = require_typeof()["default"];
    function toPrimitive(t, r) {
      if ("object" != _typeof(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i = e.call(t, r || "default");
        if ("object" != _typeof(i)) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r ? String : Number)(t);
    }
    module2.exports = toPrimitive, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime/helpers/toPropertyKey.js
var require_toPropertyKey = __commonJS({
  "node_modules/@babel/runtime/helpers/toPropertyKey.js"(exports2, module2) {
    var _typeof = require_typeof()["default"];
    var toPrimitive = require_toPrimitive();
    function toPropertyKey(t) {
      var i = toPrimitive(t, "string");
      return "symbol" == _typeof(i) ? i : i + "";
    }
    module2.exports = toPropertyKey, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime/helpers/defineProperty.js
var require_defineProperty = __commonJS({
  "node_modules/@babel/runtime/helpers/defineProperty.js"(exports2, module2) {
    var toPropertyKey = require_toPropertyKey();
    function _defineProperty(e, r, t) {
      return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
        value: t,
        enumerable: true,
        configurable: true,
        writable: true
      }) : e[r] = t, e;
    }
    module2.exports = _defineProperty, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/is-retry-allowed/index.js
var require_is_retry_allowed = __commonJS({
  "node_modules/is-retry-allowed/index.js"(exports2, module2) {
    "use strict";
    var denyList = /* @__PURE__ */ new Set([
      "ENOTFOUND",
      "ENETUNREACH",
      // SSL errors from https://github.com/nodejs/node/blob/fc8e3e2cdc521978351de257030db0076d79e0ab/src/crypto/crypto_common.cc#L301-L328
      "UNABLE_TO_GET_ISSUER_CERT",
      "UNABLE_TO_GET_CRL",
      "UNABLE_TO_DECRYPT_CERT_SIGNATURE",
      "UNABLE_TO_DECRYPT_CRL_SIGNATURE",
      "UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY",
      "CERT_SIGNATURE_FAILURE",
      "CRL_SIGNATURE_FAILURE",
      "CERT_NOT_YET_VALID",
      "CERT_HAS_EXPIRED",
      "CRL_NOT_YET_VALID",
      "CRL_HAS_EXPIRED",
      "ERROR_IN_CERT_NOT_BEFORE_FIELD",
      "ERROR_IN_CERT_NOT_AFTER_FIELD",
      "ERROR_IN_CRL_LAST_UPDATE_FIELD",
      "ERROR_IN_CRL_NEXT_UPDATE_FIELD",
      "OUT_OF_MEM",
      "DEPTH_ZERO_SELF_SIGNED_CERT",
      "SELF_SIGNED_CERT_IN_CHAIN",
      "UNABLE_TO_GET_ISSUER_CERT_LOCALLY",
      "UNABLE_TO_VERIFY_LEAF_SIGNATURE",
      "CERT_CHAIN_TOO_LONG",
      "CERT_REVOKED",
      "INVALID_CA",
      "PATH_LENGTH_EXCEEDED",
      "INVALID_PURPOSE",
      "CERT_UNTRUSTED",
      "CERT_REJECTED",
      "HOSTNAME_MISMATCH"
    ]);
    module2.exports = (error) => !denyList.has(error && error.code);
  }
});

// node_modules/axios-retry/lib/cjs/index.js
var require_cjs3 = __commonJS({
  "node_modules/axios-retry/lib/cjs/index.js"(exports2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.isNetworkError = isNetworkError;
    exports2.isRetryableError = isRetryableError;
    exports2.isSafeRequestError = isSafeRequestError;
    exports2.isIdempotentRequestError = isIdempotentRequestError;
    exports2.isNetworkOrIdempotentRequestError = isNetworkOrIdempotentRequestError;
    exports2.exponentialDelay = exponentialDelay;
    exports2.default = axiosRetry;
    exports2.DEFAULT_OPTIONS = exports2.namespace = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _isRetryAllowed = _interopRequireDefault(require_is_retry_allowed());
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        }
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty2.default)(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    var namespace = "axios-retry";
    exports2.namespace = namespace;
    function isNetworkError(error) {
      var CODE_EXCLUDE_LIST = ["ERR_CANCELED", "ECONNABORTED"];
      return !error.response && Boolean(error.code) && // Prevents retrying cancelled requests
      !CODE_EXCLUDE_LIST.includes(error.code) && // Prevents retrying timed out & cancelled requests
      (0, _isRetryAllowed.default)(error);
    }
    var SAFE_HTTP_METHODS = ["get", "head", "options"];
    var IDEMPOTENT_HTTP_METHODS = SAFE_HTTP_METHODS.concat(["put", "delete"]);
    function isRetryableError(error) {
      return error.code !== "ECONNABORTED" && (!error.response || error.response.status >= 500 && error.response.status <= 599);
    }
    function isSafeRequestError(error) {
      if (!error.config) {
        return false;
      }
      return isRetryableError(error) && SAFE_HTTP_METHODS.indexOf(error.config.method) !== -1;
    }
    function isIdempotentRequestError(error) {
      if (!error.config) {
        return false;
      }
      return isRetryableError(error) && IDEMPOTENT_HTTP_METHODS.indexOf(error.config.method) !== -1;
    }
    function isNetworkOrIdempotentRequestError(error) {
      return isNetworkError(error) || isIdempotentRequestError(error);
    }
    function noDelay() {
      return 0;
    }
    function exponentialDelay() {
      var retryNumber = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
      var error = arguments.length > 1 ? arguments[1] : void 0;
      var delayFactor = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 100;
      var delay = Math.pow(2, retryNumber) * delayFactor;
      var randomSum = delay * 0.2 * Math.random();
      return delay + randomSum;
    }
    var DEFAULT_OPTIONS = {
      retries: 3,
      retryCondition: isNetworkOrIdempotentRequestError,
      retryDelay: noDelay,
      shouldResetTimeout: false,
      onRetry: function onRetry() {
      }
    };
    exports2.DEFAULT_OPTIONS = DEFAULT_OPTIONS;
    function getRequestOptions(config, defaultOptions) {
      return _objectSpread(_objectSpread(_objectSpread({}, DEFAULT_OPTIONS), defaultOptions), config[namespace]);
    }
    function getCurrentState(config, defaultOptions) {
      var currentState = getRequestOptions(config, defaultOptions);
      currentState.retryCount = currentState.retryCount || 0;
      config[namespace] = currentState;
      return currentState;
    }
    function fixConfig(axios, config) {
      if (axios.defaults.agent === config.agent) {
        delete config.agent;
      }
      if (axios.defaults.httpAgent === config.httpAgent) {
        delete config.httpAgent;
      }
      if (axios.defaults.httpsAgent === config.httpsAgent) {
        delete config.httpsAgent;
      }
    }
    function shouldRetry(_x, _x2) {
      return _shouldRetry.apply(this, arguments);
    }
    function _shouldRetry() {
      _shouldRetry = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2(currentState, error) {
        var retries, retryCondition, shouldRetryOrPromise, shouldRetryPromiseResult;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                retries = currentState.retries, retryCondition = currentState.retryCondition;
                shouldRetryOrPromise = currentState.retryCount < retries && retryCondition(error);
                if (!((0, _typeof2.default)(shouldRetryOrPromise) === "object")) {
                  _context2.next = 13;
                  break;
                }
                _context2.prev = 3;
                _context2.next = 6;
                return shouldRetryOrPromise;
              case 6:
                shouldRetryPromiseResult = _context2.sent;
                return _context2.abrupt("return", shouldRetryPromiseResult !== false);
              case 10:
                _context2.prev = 10;
                _context2.t0 = _context2["catch"](3);
                return _context2.abrupt("return", false);
              case 13:
                return _context2.abrupt("return", shouldRetryOrPromise);
              case 14:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, null, [[3, 10]]);
      }));
      return _shouldRetry.apply(this, arguments);
    }
    function axiosRetry(axios, defaultOptions) {
      var requestInterceptorId = axios.interceptors.request.use(function(config) {
        var currentState = getCurrentState(config, defaultOptions);
        currentState.lastRequestTime = Date.now();
        return config;
      });
      var responseInterceptorId = axios.interceptors.response.use(null, function() {
        var _ref = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee(error) {
          var config, currentState, retryDelay, shouldResetTimeout, onRetry, delay, lastRequestDuration, timeout;
          return _regenerator.default.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  config = error.config;
                  if (config) {
                    _context.next = 3;
                    break;
                  }
                  return _context.abrupt("return", Promise.reject(error));
                case 3:
                  currentState = getCurrentState(config, defaultOptions);
                  _context.next = 6;
                  return shouldRetry(currentState, error);
                case 6:
                  if (!_context.sent) {
                    _context.next = 21;
                    break;
                  }
                  currentState.retryCount += 1;
                  retryDelay = currentState.retryDelay, shouldResetTimeout = currentState.shouldResetTimeout, onRetry = currentState.onRetry;
                  delay = retryDelay(currentState.retryCount, error);
                  fixConfig(axios, config);
                  if (!(!shouldResetTimeout && config.timeout && currentState.lastRequestTime)) {
                    _context.next = 17;
                    break;
                  }
                  lastRequestDuration = Date.now() - currentState.lastRequestTime;
                  timeout = config.timeout - lastRequestDuration - delay;
                  if (!(timeout <= 0)) {
                    _context.next = 16;
                    break;
                  }
                  return _context.abrupt("return", Promise.reject(error));
                case 16:
                  config.timeout = timeout;
                case 17:
                  config.transformRequest = [function(data) {
                    return data;
                  }];
                  _context.next = 20;
                  return onRetry(currentState.retryCount, error, config);
                case 20:
                  return _context.abrupt("return", new Promise(function(resolve) {
                    return setTimeout(function() {
                      return resolve(axios(config));
                    }, delay);
                  }));
                case 21:
                  return _context.abrupt("return", Promise.reject(error));
                case 22:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));
        return function(_x3) {
          return _ref.apply(this, arguments);
        };
      }());
      return {
        requestInterceptorId,
        responseInterceptorId
      };
    }
    axiosRetry.isNetworkError = isNetworkError;
    axiosRetry.isSafeRequestError = isSafeRequestError;
    axiosRetry.isIdempotentRequestError = isIdempotentRequestError;
    axiosRetry.isNetworkOrIdempotentRequestError = isNetworkOrIdempotentRequestError;
    axiosRetry.exponentialDelay = exponentialDelay;
    axiosRetry.isRetryableError = isRetryableError;
  }
});

// node_modules/axios-retry/index.js
var require_axios_retry = __commonJS({
  "node_modules/axios-retry/index.js"(exports2, module2) {
    var axiosRetry = require_cjs3().default;
    module2.exports = axiosRetry;
    module2.exports.default = axiosRetry;
  }
});

// node_modules/isomorphic-ws/browser.js
var require_browser = __commonJS({
  "node_modules/isomorphic-ws/browser.js"(exports2, module2) {
    var ws = null;
    if (typeof WebSocket !== "undefined") {
      ws = WebSocket;
    } else if (typeof MozWebSocket !== "undefined") {
      ws = MozWebSocket;
    } else if (typeof global !== "undefined") {
      ws = global.WebSocket || global.MozWebSocket;
    } else if (typeof window !== "undefined") {
      ws = window.WebSocket || window.MozWebSocket;
    } else if (typeof self !== "undefined") {
      ws = self.WebSocket || self.MozWebSocket;
    }
    module2.exports = ws;
  }
});

// node_modules/@pythnetwork/price-service-client/lib/ResillientWebSocket.js
var require_ResillientWebSocket = __commonJS({
  "node_modules/@pythnetwork/price-service-client/lib/ResillientWebSocket.js"(exports2) {
    "use strict";
    var __importDefault2 = exports2 && exports2.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ResilientWebSocket = void 0;
    var isomorphic_ws_1 = __importDefault2(require_browser());
    var PING_TIMEOUT_DURATION = 3e4 + 3e3;
    var ResilientWebSocket = class {
      constructor(endpoint2, logger) {
        __publicField(this, "endpoint");
        __publicField(this, "wsClient");
        __publicField(this, "wsUserClosed");
        __publicField(this, "wsFailedAttempts");
        __publicField(this, "pingTimeout");
        __publicField(this, "logger");
        __publicField(this, "onError");
        __publicField(this, "onMessage");
        __publicField(this, "onReconnect");
        this.endpoint = endpoint2;
        this.logger = logger;
        this.wsFailedAttempts = 0;
        this.onError = (error) => {
          var _a;
          (_a = this.logger) == null ? void 0 : _a.error(error);
        };
        this.wsUserClosed = true;
        this.onMessage = () => {
        };
        this.onReconnect = () => {
        };
      }
      async send(data) {
        var _a, _b, _c;
        (_a = this.logger) == null ? void 0 : _a.info(`Sending ${data}`);
        await this.waitForMaybeReadyWebSocket();
        if (this.wsClient === void 0) {
          (_b = this.logger) == null ? void 0 : _b.error("Couldn't connect to the websocket server. Error callback is called.");
        } else {
          (_c = this.wsClient) == null ? void 0 : _c.send(data);
        }
      }
      async startWebSocket() {
        var _a;
        if (this.wsClient !== void 0) {
          return;
        }
        (_a = this.logger) == null ? void 0 : _a.info(`Creating Web Socket client`);
        this.wsClient = new isomorphic_ws_1.default(this.endpoint);
        this.wsUserClosed = false;
        this.wsClient.onopen = () => {
          this.wsFailedAttempts = 0;
          if (this.wsClient.on !== void 0) {
            this.heartbeat();
          }
        };
        this.wsClient.onerror = (event) => {
          this.onError(event.error);
        };
        this.wsClient.onmessage = (event) => {
          this.onMessage(event.data);
        };
        this.wsClient.onclose = async () => {
          var _a2, _b;
          if (this.pingTimeout !== void 0) {
            clearInterval(this.pingTimeout);
          }
          if (this.wsUserClosed === false) {
            this.wsFailedAttempts += 1;
            this.wsClient = void 0;
            const waitTime = expoBackoff(this.wsFailedAttempts);
            (_a2 = this.logger) == null ? void 0 : _a2.error(`Connection closed unexpectedly or because of timeout. Reconnecting after ${waitTime}ms.`);
            await sleep2(waitTime);
            this.restartUnexpectedClosedWebsocket();
          } else {
            (_b = this.logger) == null ? void 0 : _b.info("The connection has been closed successfully.");
          }
        };
        if (this.wsClient.on !== void 0) {
          this.wsClient.on("ping", this.heartbeat.bind(this));
        }
      }
      /**
       * Heartbeat is only enabled in node clients because they support handling
       * ping-pong events.
       *
       * This approach only works when server constantly pings the clients which.
       * Otherwise you might consider sending ping and acting on pong responses
       * yourself.
       */
      heartbeat() {
        var _a;
        (_a = this.logger) == null ? void 0 : _a.info("Heartbeat");
        if (this.pingTimeout !== void 0) {
          clearTimeout(this.pingTimeout);
        }
        this.pingTimeout = setTimeout(() => {
          var _a2, _b;
          (_a2 = this.logger) == null ? void 0 : _a2.warn(`Connection timed out. Reconnecting...`);
          (_b = this.wsClient) == null ? void 0 : _b.terminate();
          this.restartUnexpectedClosedWebsocket();
        }, PING_TIMEOUT_DURATION);
      }
      async waitForMaybeReadyWebSocket() {
        let waitedTime = 0;
        while (this.wsClient !== void 0 && this.wsClient.readyState !== this.wsClient.OPEN) {
          if (waitedTime > 5e3) {
            this.wsClient.close();
            return;
          } else {
            waitedTime += 10;
            await sleep2(10);
          }
        }
      }
      async restartUnexpectedClosedWebsocket() {
        var _a;
        if (this.wsUserClosed === true) {
          return;
        }
        await this.startWebSocket();
        await this.waitForMaybeReadyWebSocket();
        if (this.wsClient === void 0) {
          (_a = this.logger) == null ? void 0 : _a.error("Couldn't reconnect to websocket. Error callback is called.");
          return;
        }
        this.onReconnect();
      }
      closeWebSocket() {
        if (this.wsClient !== void 0) {
          const client = this.wsClient;
          this.wsClient = void 0;
          client.close();
        }
        this.wsUserClosed = true;
      }
    };
    exports2.ResilientWebSocket = ResilientWebSocket;
    async function sleep2(ms) {
      return new Promise((resolve) => setTimeout(resolve, ms));
    }
    function expoBackoff(attempts) {
      return 2 ** attempts * 100;
    }
  }
});

// node_modules/@pythnetwork/price-service-client/lib/utils.js
var require_utils9 = __commonJS({
  "node_modules/@pythnetwork/price-service-client/lib/utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.removeLeading0xIfExists = exports2.makeWebsocketUrl = void 0;
    function makeWebsocketUrl2(endpoint2) {
      const url = new URL("ws", endpoint2);
      const useHttps = url.protocol === "https:";
      url.protocol = useHttps ? "wss:" : "ws:";
      return url.toString();
    }
    exports2.makeWebsocketUrl = makeWebsocketUrl2;
    function removeLeading0xIfExists(id) {
      if (id.startsWith("0x")) {
        return id.substring(2);
      } else {
        return id;
      }
    }
    exports2.removeLeading0xIfExists = removeLeading0xIfExists;
  }
});

// node_modules/@pythnetwork/price-service-client/lib/PriceServiceConnection.js
var require_PriceServiceConnection = __commonJS({
  "node_modules/@pythnetwork/price-service-client/lib/PriceServiceConnection.js"(exports2) {
    "use strict";
    var __importDefault2 = exports2 && exports2.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PriceServiceConnection = void 0;
    var price_service_sdk_1 = require_lib2();
    var axios_1 = __importDefault2(require_axios());
    var axios_retry_1 = __importDefault2(require_axios_retry());
    var ResillientWebSocket_1 = require_ResillientWebSocket();
    var utils_1 = require_utils9();
    var PriceServiceConnection = class {
      /**
       * Constructs a new Connection.
       *
       * @param endpoint endpoint URL to the price service. Example: https://website/example/
       * @param config Optional PriceServiceConnectionConfig for custom configurations.
       */
      constructor(endpoint2, config) {
        __publicField(this, "httpClient");
        __publicField(this, "priceFeedCallbacks");
        __publicField(this, "wsClient");
        __publicField(this, "wsEndpoint");
        __publicField(this, "logger");
        __publicField(this, "priceFeedRequestConfig");
        /**
         * Custom handler for web socket errors (connection and message parsing).
         *
         * Default handler only logs the errors.
         */
        __publicField(this, "onWsError");
        var _a, _b, _c;
        this.httpClient = axios_1.default.create({
          baseURL: endpoint2,
          timeout: (config == null ? void 0 : config.timeout) || 5e3
        });
        (0, axios_retry_1.default)(this.httpClient, {
          retries: (config == null ? void 0 : config.httpRetries) || 3,
          retryDelay: axios_retry_1.default.exponentialDelay
        });
        this.priceFeedRequestConfig = {
          binary: (_a = config == null ? void 0 : config.priceFeedRequestConfig) == null ? void 0 : _a.binary,
          verbose: ((_b = config == null ? void 0 : config.priceFeedRequestConfig) == null ? void 0 : _b.verbose) ?? (config == null ? void 0 : config.verbose),
          allowOutOfOrder: (_c = config == null ? void 0 : config.priceFeedRequestConfig) == null ? void 0 : _c.allowOutOfOrder
        };
        this.priceFeedCallbacks = /* @__PURE__ */ new Map();
        this.logger = (config == null ? void 0 : config.logger) || {
          trace: () => {
          },
          debug: () => {
          },
          info: () => {
          },
          warn: console.warn,
          error: console.error
        };
        this.onWsError = (error) => {
          this.logger.error(error);
          if (typeof process !== "undefined" && typeof process.exit === "function") {
            this.logger.error("Halting the process due to the websocket error");
            process.exit(1);
          } else {
            this.logger.error("Cannot halt process. Please handle the websocket error.");
          }
        };
        this.wsEndpoint = (0, utils_1.makeWebsocketUrl)(endpoint2);
      }
      /**
       * Fetch Latest PriceFeeds of given price ids.
       * This will throw an axios error if there is a network problem or the price service returns a non-ok response (e.g: Invalid price ids)
       *
       * @param priceIds Array of hex-encoded price ids.
       * @returns Array of PriceFeeds
       */
      async getLatestPriceFeeds(priceIds) {
        if (priceIds.length === 0) {
          return [];
        }
        const response = await this.httpClient.get("/api/latest_price_feeds", {
          params: {
            ids: priceIds,
            verbose: this.priceFeedRequestConfig.verbose,
            binary: this.priceFeedRequestConfig.binary
          }
        });
        const priceFeedsJson = response.data;
        return priceFeedsJson.map((priceFeedJson) => price_service_sdk_1.PriceFeed.fromJson(priceFeedJson));
      }
      /**
       * Fetch latest VAA of given price ids.
       * This will throw an axios error if there is a network problem or the price service returns a non-ok response (e.g: Invalid price ids)
       *
       * This function is coupled to wormhole implemntation.
       *
       * @param priceIds Array of hex-encoded price ids.
       * @returns Array of base64 encoded VAAs.
       */
      async getLatestVaas(priceIds) {
        const response = await this.httpClient.get("/api/latest_vaas", {
          params: {
            ids: priceIds
          }
        });
        return response.data;
      }
      /**
       * Fetch the earliest VAA of the given price id that is published since the given publish time.
       * This will throw an error if the given publish time is in the future, or if the publish time
       * is old and the price service endpoint does not have a db backend for historical requests.
       * This will throw an axios error if there is a network problem or the price service returns a non-ok response (e.g: Invalid price id)
       *
       * This function is coupled to wormhole implemntation.
       *
       * @param priceId Hex-encoded price id.
       * @param publishTime Epoch timestamp in seconds.
       * @returns Tuple of VAA and publishTime.
       */
      async getVaa(priceId, publishTime) {
        const response = await this.httpClient.get("/api/get_vaa", {
          params: {
            id: priceId,
            publish_time: publishTime
          }
        });
        return [response.data.vaa, response.data.publishTime];
      }
      /**
       * Fetch the PriceFeed of the given price id that is published since the given publish time.
       * This will throw an error if the given publish time is in the future, or if the publish time
       * is old and the price service endpoint does not have a db backend for historical requests.
       * This will throw an axios error if there is a network problem or the price service returns a non-ok response (e.g: Invalid price id)
       *
       * @param priceId Hex-encoded price id.
       * @param publishTime Epoch timestamp in seconds.
       * @returns PriceFeed
       */
      async getPriceFeed(priceId, publishTime) {
        const response = await this.httpClient.get("/api/get_price_feed", {
          params: {
            id: priceId,
            publish_time: publishTime,
            verbose: this.priceFeedRequestConfig.verbose,
            binary: this.priceFeedRequestConfig.binary
          }
        });
        return price_service_sdk_1.PriceFeed.fromJson(response.data);
      }
      /**
       * Fetch the list of available price feed ids.
       * This will throw an axios error if there is a network problem or the price service returns a non-ok response.
       *
       * @returns Array of hex-encoded price ids.
       */
      async getPriceFeedIds() {
        const response = await this.httpClient.get("/api/price_feed_ids");
        return response.data;
      }
      /**
       * Subscribe to updates for given price ids.
       *
       * It will start a websocket connection if it's not started yet.
       * Also, it won't throw any exception if given price ids are invalid or connection errors. Instead,
       * it calls `connection.onWsError`. If you want to handle the errors you should set the
       * `onWsError` function to your custom error handler.
       *
       * @param priceIds Array of hex-encoded price ids.
       * @param cb Callback function that is called with a PriceFeed upon updates to given price ids.
       */
      async subscribePriceFeedUpdates(priceIds, cb) {
        var _a;
        if (this.wsClient === void 0) {
          await this.startWebSocket();
        }
        priceIds = priceIds.map((priceId) => (0, utils_1.removeLeading0xIfExists)(priceId));
        const newPriceIds = [];
        for (const id of priceIds) {
          if (!this.priceFeedCallbacks.has(id)) {
            this.priceFeedCallbacks.set(id, /* @__PURE__ */ new Set());
            newPriceIds.push(id);
          }
          this.priceFeedCallbacks.get(id).add(cb);
        }
        const message = {
          ids: newPriceIds,
          type: "subscribe",
          verbose: this.priceFeedRequestConfig.verbose,
          binary: this.priceFeedRequestConfig.binary,
          allow_out_of_order: this.priceFeedRequestConfig.allowOutOfOrder
        };
        await ((_a = this.wsClient) == null ? void 0 : _a.send(JSON.stringify(message)));
      }
      /**
       * Unsubscribe from updates for given price ids.
       *
       * It will close the websocket connection if it's not subscribed to any price feed updates anymore.
       * Also, it won't throw any exception if given price ids are invalid or connection errors. Instead,
       * it calls `connection.onWsError`. If you want to handle the errors you should set the
       * `onWsError` function to your custom error handler.
       *
       * @param priceIds Array of hex-encoded price ids.
       * @param cb Optional callback, if set it will only unsubscribe this callback from updates for given price ids.
       */
      async unsubscribePriceFeedUpdates(priceIds, cb) {
        var _a;
        if (this.wsClient === void 0) {
          await this.startWebSocket();
        }
        priceIds = priceIds.map((priceId) => (0, utils_1.removeLeading0xIfExists)(priceId));
        const removedPriceIds = [];
        for (const id of priceIds) {
          if (this.priceFeedCallbacks.has(id)) {
            let idRemoved = false;
            if (cb === void 0) {
              this.priceFeedCallbacks.delete(id);
              idRemoved = true;
            } else {
              this.priceFeedCallbacks.get(id).delete(cb);
              if (this.priceFeedCallbacks.get(id).size === 0) {
                this.priceFeedCallbacks.delete(id);
                idRemoved = true;
              }
            }
            if (idRemoved) {
              removedPriceIds.push(id);
            }
          }
        }
        const message = {
          ids: removedPriceIds,
          type: "unsubscribe"
        };
        await ((_a = this.wsClient) == null ? void 0 : _a.send(JSON.stringify(message)));
        if (this.priceFeedCallbacks.size === 0) {
          this.closeWebSocket();
        }
      }
      /**
       * Starts connection websocket.
       *
       * This function is called automatically upon subscribing to price feed updates.
       */
      async startWebSocket() {
        if (this.wsEndpoint === void 0) {
          throw new Error("Websocket endpoint is undefined.");
        }
        this.wsClient = new ResillientWebSocket_1.ResilientWebSocket(this.wsEndpoint, this.logger);
        this.wsClient.onError = this.onWsError;
        this.wsClient.onReconnect = () => {
          var _a;
          if (this.priceFeedCallbacks.size > 0) {
            const message = {
              ids: Array.from(this.priceFeedCallbacks.keys()),
              type: "subscribe",
              verbose: this.priceFeedRequestConfig.verbose,
              binary: this.priceFeedRequestConfig.binary,
              allow_out_of_order: this.priceFeedRequestConfig.allowOutOfOrder
            };
            this.logger.info("Resubscribing to existing price feeds.");
            (_a = this.wsClient) == null ? void 0 : _a.send(JSON.stringify(message));
          }
        };
        this.wsClient.onMessage = (data) => {
          this.logger.info(`Received message ${data.toString()}`);
          let message;
          try {
            message = JSON.parse(data.toString());
          } catch (e) {
            this.logger.error(`Error parsing message ${data.toString()} as JSON.`);
            this.logger.error(e);
            this.onWsError(e);
            return;
          }
          if (message.type === "response") {
            if (message.status === "error") {
              this.logger.error(`Error response from the websocket server ${message.error}.`);
              this.onWsError(new Error(message.error));
            }
          } else if (message.type === "price_update") {
            let priceFeed;
            try {
              priceFeed = price_service_sdk_1.PriceFeed.fromJson(message.price_feed);
            } catch (e) {
              this.logger.error(`Error parsing price feeds from message ${data.toString()}.`);
              this.logger.error(e);
              this.onWsError(e);
              return;
            }
            if (this.priceFeedCallbacks.has(priceFeed.id)) {
              for (const cb of this.priceFeedCallbacks.get(priceFeed.id)) {
                cb(priceFeed);
              }
            }
          } else {
            this.logger.warn(`Ignoring unsupported server response ${data.toString()}.`);
          }
        };
        await this.wsClient.startWebSocket();
      }
      /**
       * Closes connection websocket.
       *
       * At termination, the websocket should be closed to finish the
       * process elegantly. It will automatically close when the connection
       * is subscribed to no price feeds.
       */
      closeWebSocket() {
        var _a;
        (_a = this.wsClient) == null ? void 0 : _a.closeWebSocket();
        this.wsClient = void 0;
        this.priceFeedCallbacks.clear();
      }
    };
    exports2.PriceServiceConnection = PriceServiceConnection;
  }
});

// node_modules/@pythnetwork/price-service-client/lib/index.js
var require_lib3 = __commonJS({
  "node_modules/@pythnetwork/price-service-client/lib/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseAccumulatorUpdateData = exports2.isAccumulatorUpdateData = exports2.Price = exports2.PriceFeed = exports2.PriceFeedMetadata = exports2.PriceServiceConnection = void 0;
    var PriceServiceConnection_1 = require_PriceServiceConnection();
    Object.defineProperty(exports2, "PriceServiceConnection", { enumerable: true, get: function() {
      return PriceServiceConnection_1.PriceServiceConnection;
    } });
    var price_service_sdk_1 = require_lib2();
    Object.defineProperty(exports2, "PriceFeedMetadata", { enumerable: true, get: function() {
      return price_service_sdk_1.PriceFeedMetadata;
    } });
    Object.defineProperty(exports2, "PriceFeed", { enumerable: true, get: function() {
      return price_service_sdk_1.PriceFeed;
    } });
    Object.defineProperty(exports2, "Price", { enumerable: true, get: function() {
      return price_service_sdk_1.Price;
    } });
    Object.defineProperty(exports2, "isAccumulatorUpdateData", { enumerable: true, get: function() {
      return price_service_sdk_1.isAccumulatorUpdateData;
    } });
    Object.defineProperty(exports2, "parseAccumulatorUpdateData", { enumerable: true, get: function() {
      return price_service_sdk_1.parseAccumulatorUpdateData;
    } });
  }
});

// node_modules/base64-js/index.js
var require_base64_js = __commonJS({
  "node_modules/base64-js/index.js"(exports2) {
    "use strict";
    exports2.byteLength = byteLength;
    exports2.toByteArray = toByteArray;
    exports2.fromByteArray = fromByteArray;
    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for (i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }
    var i;
    var len;
    revLookup["-".charCodeAt(0)] = 62;
    revLookup["_".charCodeAt(0)] = 63;
    function getLens(b64) {
      var len2 = b64.length;
      if (len2 % 4 > 0) {
        throw new Error("Invalid string. Length must be a multiple of 4");
      }
      var validLen = b64.indexOf("=");
      if (validLen === -1) validLen = len2;
      var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
      return [validLen, placeHoldersLen];
    }
    function byteLength(b64) {
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function _byteLength(b64, validLen, placeHoldersLen) {
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function toByteArray(b64) {
      var tmp;
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
      var curByte = 0;
      var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
      var i2;
      for (i2 = 0; i2 < len2; i2 += 4) {
        tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
        arr[curByte++] = tmp >> 16 & 255;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      return arr;
    }
    function tripletToBase64(num2) {
      return lookup[num2 >> 18 & 63] + lookup[num2 >> 12 & 63] + lookup[num2 >> 6 & 63] + lookup[num2 & 63];
    }
    function encodeChunk(uint8, start, end) {
      var tmp;
      var output = [];
      for (var i2 = start; i2 < end; i2 += 3) {
        tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
        output.push(tripletToBase64(tmp));
      }
      return output.join("");
    }
    function fromByteArray(uint8) {
      var tmp;
      var len2 = uint8.length;
      var extraBytes = len2 % 3;
      var parts = [];
      var maxChunkLength = 16383;
      for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
        parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
      }
      if (extraBytes === 1) {
        tmp = uint8[len2 - 1];
        parts.push(
          lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
        );
      } else if (extraBytes === 2) {
        tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
        parts.push(
          lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
        );
      }
      return parts.join("");
    }
  }
});

// node_modules/ieee754/index.js
var require_ieee754 = __commonJS({
  "node_modules/ieee754/index.js"(exports2) {
    exports2.read = function(buffer, offset2, isLE, mLen, nBytes) {
      var e, m;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? nBytes - 1 : 0;
      var d = isLE ? -1 : 1;
      var s = buffer[offset2 + i];
      i += d;
      e = s & (1 << -nBits) - 1;
      s >>= -nBits;
      nBits += eLen;
      for (; nBits > 0; e = e * 256 + buffer[offset2 + i], i += d, nBits -= 8) {
      }
      m = e & (1 << -nBits) - 1;
      e >>= -nBits;
      nBits += mLen;
      for (; nBits > 0; m = m * 256 + buffer[offset2 + i], i += d, nBits -= 8) {
      }
      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : (s ? -1 : 1) * Infinity;
      } else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
    };
    exports2.write = function(buffer, value, offset2, isLE, mLen, nBytes) {
      var e, m, c;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
      var i = isLE ? 0 : nBytes - 1;
      var d = isLE ? 1 : -1;
      var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
      value = Math.abs(value);
      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }
        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * Math.pow(2, 1 - eBias);
        }
        if (value * c >= 2) {
          e++;
          c /= 2;
        }
        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }
      for (; mLen >= 8; buffer[offset2 + i] = m & 255, i += d, m /= 256, mLen -= 8) {
      }
      e = e << mLen | m;
      eLen += mLen;
      for (; eLen > 0; buffer[offset2 + i] = e & 255, i += d, e /= 256, eLen -= 8) {
      }
      buffer[offset2 + i - d] |= s * 128;
    };
  }
});

// node_modules/buffer/index.js
var require_buffer2 = __commonJS({
  "node_modules/buffer/index.js"(exports2) {
    "use strict";
    var base64 = require_base64_js();
    var ieee754 = require_ieee754();
    var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
    exports2.Buffer = Buffer4;
    exports2.SlowBuffer = SlowBuffer;
    exports2.INSPECT_MAX_BYTES = 50;
    var K_MAX_LENGTH = 2147483647;
    exports2.kMaxLength = K_MAX_LENGTH;
    Buffer4.TYPED_ARRAY_SUPPORT = typedArraySupport();
    if (!Buffer4.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
      console.error(
        "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
      );
    }
    function typedArraySupport() {
      try {
        const arr = new Uint8Array(1);
        const proto = { foo: function() {
          return 42;
        } };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
      } catch (e) {
        return false;
      }
    }
    Object.defineProperty(Buffer4.prototype, "parent", {
      enumerable: true,
      get: function() {
        if (!Buffer4.isBuffer(this)) return void 0;
        return this.buffer;
      }
    });
    Object.defineProperty(Buffer4.prototype, "offset", {
      enumerable: true,
      get: function() {
        if (!Buffer4.isBuffer(this)) return void 0;
        return this.byteOffset;
      }
    });
    function createBuffer(length) {
      if (length > K_MAX_LENGTH) {
        throw new RangeError('The value "' + length + '" is invalid for option "size"');
      }
      const buf = new Uint8Array(length);
      Object.setPrototypeOf(buf, Buffer4.prototype);
      return buf;
    }
    function Buffer4(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") {
          throw new TypeError(
            'The "string" argument must be of type string. Received type number'
          );
        }
        return allocUnsafe(arg);
      }
      return from(arg, encodingOrOffset, length);
    }
    Buffer4.poolSize = 8192;
    function from(value, encodingOrOffset, length) {
      if (typeof value === "string") {
        return fromString(value, encodingOrOffset);
      }
      if (ArrayBuffer.isView(value)) {
        return fromArrayView(value);
      }
      if (value == null) {
        throw new TypeError(
          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
        );
      }
      if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
        return fromArrayBuffer(value, encodingOrOffset, length);
      }
      if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
        return fromArrayBuffer(value, encodingOrOffset, length);
      }
      if (typeof value === "number") {
        throw new TypeError(
          'The "value" argument must not be of type number. Received type number'
        );
      }
      const valueOf = value.valueOf && value.valueOf();
      if (valueOf != null && valueOf !== value) {
        return Buffer4.from(valueOf, encodingOrOffset, length);
      }
      const b = fromObject(value);
      if (b) return b;
      if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
        return Buffer4.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
      }
      throw new TypeError(
        "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
      );
    }
    Buffer4.from = function(value, encodingOrOffset, length) {
      return from(value, encodingOrOffset, length);
    };
    Object.setPrototypeOf(Buffer4.prototype, Uint8Array.prototype);
    Object.setPrototypeOf(Buffer4, Uint8Array);
    function assertSize(size) {
      if (typeof size !== "number") {
        throw new TypeError('"size" argument must be of type number');
      } else if (size < 0) {
        throw new RangeError('The value "' + size + '" is invalid for option "size"');
      }
    }
    function alloc(size, fill, encoding) {
      assertSize(size);
      if (size <= 0) {
        return createBuffer(size);
      }
      if (fill !== void 0) {
        return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
      }
      return createBuffer(size);
    }
    Buffer4.alloc = function(size, fill, encoding) {
      return alloc(size, fill, encoding);
    };
    function allocUnsafe(size) {
      assertSize(size);
      return createBuffer(size < 0 ? 0 : checked(size) | 0);
    }
    Buffer4.allocUnsafe = function(size) {
      return allocUnsafe(size);
    };
    Buffer4.allocUnsafeSlow = function(size) {
      return allocUnsafe(size);
    };
    function fromString(string2, encoding) {
      if (typeof encoding !== "string" || encoding === "") {
        encoding = "utf8";
      }
      if (!Buffer4.isEncoding(encoding)) {
        throw new TypeError("Unknown encoding: " + encoding);
      }
      const length = byteLength(string2, encoding) | 0;
      let buf = createBuffer(length);
      const actual = buf.write(string2, encoding);
      if (actual !== length) {
        buf = buf.slice(0, actual);
      }
      return buf;
    }
    function fromArrayLike(array2) {
      const length = array2.length < 0 ? 0 : checked(array2.length) | 0;
      const buf = createBuffer(length);
      for (let i = 0; i < length; i += 1) {
        buf[i] = array2[i] & 255;
      }
      return buf;
    }
    function fromArrayView(arrayView) {
      if (isInstance(arrayView, Uint8Array)) {
        const copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
      }
      return fromArrayLike(arrayView);
    }
    function fromArrayBuffer(array2, byteOffset, length) {
      if (byteOffset < 0 || array2.byteLength < byteOffset) {
        throw new RangeError('"offset" is outside of buffer bounds');
      }
      if (array2.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('"length" is outside of buffer bounds');
      }
      let buf;
      if (byteOffset === void 0 && length === void 0) {
        buf = new Uint8Array(array2);
      } else if (length === void 0) {
        buf = new Uint8Array(array2, byteOffset);
      } else {
        buf = new Uint8Array(array2, byteOffset, length);
      }
      Object.setPrototypeOf(buf, Buffer4.prototype);
      return buf;
    }
    function fromObject(obj) {
      if (Buffer4.isBuffer(obj)) {
        const len = checked(obj.length) | 0;
        const buf = createBuffer(len);
        if (buf.length === 0) {
          return buf;
        }
        obj.copy(buf, 0, 0, len);
        return buf;
      }
      if (obj.length !== void 0) {
        if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
          return createBuffer(0);
        }
        return fromArrayLike(obj);
      }
      if (obj.type === "Buffer" && Array.isArray(obj.data)) {
        return fromArrayLike(obj.data);
      }
    }
    function checked(length) {
      if (length >= K_MAX_LENGTH) {
        throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
      }
      return length | 0;
    }
    function SlowBuffer(length) {
      if (+length != length) {
        length = 0;
      }
      return Buffer4.alloc(+length);
    }
    Buffer4.isBuffer = function isBuffer(b) {
      return b != null && b._isBuffer === true && b !== Buffer4.prototype;
    };
    Buffer4.compare = function compare(a, b) {
      if (isInstance(a, Uint8Array)) a = Buffer4.from(a, a.offset, a.byteLength);
      if (isInstance(b, Uint8Array)) b = Buffer4.from(b, b.offset, b.byteLength);
      if (!Buffer4.isBuffer(a) || !Buffer4.isBuffer(b)) {
        throw new TypeError(
          'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
        );
      }
      if (a === b) return 0;
      let x = a.length;
      let y = b.length;
      for (let i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break;
        }
      }
      if (x < y) return -1;
      if (y < x) return 1;
      return 0;
    };
    Buffer4.isEncoding = function isEncoding(encoding) {
      switch (String(encoding).toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return true;
        default:
          return false;
      }
    };
    Buffer4.concat = function concat(list, length) {
      if (!Array.isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      }
      if (list.length === 0) {
        return Buffer4.alloc(0);
      }
      let i;
      if (length === void 0) {
        length = 0;
        for (i = 0; i < list.length; ++i) {
          length += list[i].length;
        }
      }
      const buffer = Buffer4.allocUnsafe(length);
      let pos = 0;
      for (i = 0; i < list.length; ++i) {
        let buf = list[i];
        if (isInstance(buf, Uint8Array)) {
          if (pos + buf.length > buffer.length) {
            if (!Buffer4.isBuffer(buf)) buf = Buffer4.from(buf);
            buf.copy(buffer, pos);
          } else {
            Uint8Array.prototype.set.call(
              buffer,
              buf,
              pos
            );
          }
        } else if (!Buffer4.isBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        } else {
          buf.copy(buffer, pos);
        }
        pos += buf.length;
      }
      return buffer;
    };
    function byteLength(string2, encoding) {
      if (Buffer4.isBuffer(string2)) {
        return string2.length;
      }
      if (ArrayBuffer.isView(string2) || isInstance(string2, ArrayBuffer)) {
        return string2.byteLength;
      }
      if (typeof string2 !== "string") {
        throw new TypeError(
          'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string2
        );
      }
      const len = string2.length;
      const mustMatch = arguments.length > 2 && arguments[2] === true;
      if (!mustMatch && len === 0) return 0;
      let loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "ascii":
          case "latin1":
          case "binary":
            return len;
          case "utf8":
          case "utf-8":
            return utf8ToBytes(string2).length;
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return len * 2;
          case "hex":
            return len >>> 1;
          case "base64":
            return base64ToBytes(string2).length;
          default:
            if (loweredCase) {
              return mustMatch ? -1 : utf8ToBytes(string2).length;
            }
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer4.byteLength = byteLength;
    function slowToString(encoding, start, end) {
      let loweredCase = false;
      if (start === void 0 || start < 0) {
        start = 0;
      }
      if (start > this.length) {
        return "";
      }
      if (end === void 0 || end > this.length) {
        end = this.length;
      }
      if (end <= 0) {
        return "";
      }
      end >>>= 0;
      start >>>= 0;
      if (end <= start) {
        return "";
      }
      if (!encoding) encoding = "utf8";
      while (true) {
        switch (encoding) {
          case "hex":
            return hexSlice(this, start, end);
          case "utf8":
          case "utf-8":
            return utf8Slice(this, start, end);
          case "ascii":
            return asciiSlice(this, start, end);
          case "latin1":
          case "binary":
            return latin1Slice(this, start, end);
          case "base64":
            return base64Slice(this, start, end);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return utf16leSlice(this, start, end);
          default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer4.prototype._isBuffer = true;
    function swap(b, n, m) {
      const i = b[n];
      b[n] = b[m];
      b[m] = i;
    }
    Buffer4.prototype.swap16 = function swap16() {
      const len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 16-bits");
      }
      for (let i = 0; i < len; i += 2) {
        swap(this, i, i + 1);
      }
      return this;
    };
    Buffer4.prototype.swap32 = function swap32() {
      const len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 32-bits");
      }
      for (let i = 0; i < len; i += 4) {
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
      }
      return this;
    };
    Buffer4.prototype.swap64 = function swap64() {
      const len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 64-bits");
      }
      for (let i = 0; i < len; i += 8) {
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
      }
      return this;
    };
    Buffer4.prototype.toString = function toString() {
      const length = this.length;
      if (length === 0) return "";
      if (arguments.length === 0) return utf8Slice(this, 0, length);
      return slowToString.apply(this, arguments);
    };
    Buffer4.prototype.toLocaleString = Buffer4.prototype.toString;
    Buffer4.prototype.equals = function equals(b) {
      if (!Buffer4.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
      if (this === b) return true;
      return Buffer4.compare(this, b) === 0;
    };
    Buffer4.prototype.inspect = function inspect() {
      let str = "";
      const max = exports2.INSPECT_MAX_BYTES;
      str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
      if (this.length > max) str += " ... ";
      return "<Buffer " + str + ">";
    };
    if (customInspectSymbol) {
      Buffer4.prototype[customInspectSymbol] = Buffer4.prototype.inspect;
    }
    Buffer4.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
      if (isInstance(target, Uint8Array)) {
        target = Buffer4.from(target, target.offset, target.byteLength);
      }
      if (!Buffer4.isBuffer(target)) {
        throw new TypeError(
          'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
        );
      }
      if (start === void 0) {
        start = 0;
      }
      if (end === void 0) {
        end = target ? target.length : 0;
      }
      if (thisStart === void 0) {
        thisStart = 0;
      }
      if (thisEnd === void 0) {
        thisEnd = this.length;
      }
      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError("out of range index");
      }
      if (thisStart >= thisEnd && start >= end) {
        return 0;
      }
      if (thisStart >= thisEnd) {
        return -1;
      }
      if (start >= end) {
        return 1;
      }
      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;
      if (this === target) return 0;
      let x = thisEnd - thisStart;
      let y = end - start;
      const len = Math.min(x, y);
      const thisCopy = this.slice(thisStart, thisEnd);
      const targetCopy = target.slice(start, end);
      for (let i = 0; i < len; ++i) {
        if (thisCopy[i] !== targetCopy[i]) {
          x = thisCopy[i];
          y = targetCopy[i];
          break;
        }
      }
      if (x < y) return -1;
      if (y < x) return 1;
      return 0;
    };
    function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
      if (buffer.length === 0) return -1;
      if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 2147483647) {
        byteOffset = 2147483647;
      } else if (byteOffset < -2147483648) {
        byteOffset = -2147483648;
      }
      byteOffset = +byteOffset;
      if (numberIsNaN(byteOffset)) {
        byteOffset = dir ? 0 : buffer.length - 1;
      }
      if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
      if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
      } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
      }
      if (typeof val === "string") {
        val = Buffer4.from(val, encoding);
      }
      if (Buffer4.isBuffer(val)) {
        if (val.length === 0) {
          return -1;
        }
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
      } else if (typeof val === "number") {
        val = val & 255;
        if (typeof Uint8Array.prototype.indexOf === "function") {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
          }
        }
        return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
      }
      throw new TypeError("val must be string, number or Buffer");
    }
    function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
      let indexSize = 1;
      let arrLength = arr.length;
      let valLength = val.length;
      if (encoding !== void 0) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
          if (arr.length < 2 || val.length < 2) {
            return -1;
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }
      function read(buf, i2) {
        if (indexSize === 1) {
          return buf[i2];
        } else {
          return buf.readUInt16BE(i2 * indexSize);
        }
      }
      let i;
      if (dir) {
        let foundIndex = -1;
        for (i = byteOffset; i < arrLength; i++) {
          if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
          } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for (i = byteOffset; i >= 0; i--) {
          let found = true;
          for (let j = 0; j < valLength; j++) {
            if (read(arr, i + j) !== read(val, j)) {
              found = false;
              break;
            }
          }
          if (found) return i;
        }
      }
      return -1;
    }
    Buffer4.prototype.includes = function includes(val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1;
    };
    Buffer4.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
    };
    Buffer4.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
    };
    function hexWrite(buf, string2, offset2, length) {
      offset2 = Number(offset2) || 0;
      const remaining = buf.length - offset2;
      if (!length) {
        length = remaining;
      } else {
        length = Number(length);
        if (length > remaining) {
          length = remaining;
        }
      }
      const strLen = string2.length;
      if (length > strLen / 2) {
        length = strLen / 2;
      }
      let i;
      for (i = 0; i < length; ++i) {
        const parsed = parseInt(string2.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed)) return i;
        buf[offset2 + i] = parsed;
      }
      return i;
    }
    function utf8Write(buf, string2, offset2, length) {
      return blitBuffer(utf8ToBytes(string2, buf.length - offset2), buf, offset2, length);
    }
    function asciiWrite(buf, string2, offset2, length) {
      return blitBuffer(asciiToBytes(string2), buf, offset2, length);
    }
    function base64Write(buf, string2, offset2, length) {
      return blitBuffer(base64ToBytes(string2), buf, offset2, length);
    }
    function ucs2Write(buf, string2, offset2, length) {
      return blitBuffer(utf16leToBytes(string2, buf.length - offset2), buf, offset2, length);
    }
    Buffer4.prototype.write = function write(string2, offset2, length, encoding) {
      if (offset2 === void 0) {
        encoding = "utf8";
        length = this.length;
        offset2 = 0;
      } else if (length === void 0 && typeof offset2 === "string") {
        encoding = offset2;
        length = this.length;
        offset2 = 0;
      } else if (isFinite(offset2)) {
        offset2 = offset2 >>> 0;
        if (isFinite(length)) {
          length = length >>> 0;
          if (encoding === void 0) encoding = "utf8";
        } else {
          encoding = length;
          length = void 0;
        }
      } else {
        throw new Error(
          "Buffer.write(string, encoding, offset[, length]) is no longer supported"
        );
      }
      const remaining = this.length - offset2;
      if (length === void 0 || length > remaining) length = remaining;
      if (string2.length > 0 && (length < 0 || offset2 < 0) || offset2 > this.length) {
        throw new RangeError("Attempt to write outside buffer bounds");
      }
      if (!encoding) encoding = "utf8";
      let loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "hex":
            return hexWrite(this, string2, offset2, length);
          case "utf8":
          case "utf-8":
            return utf8Write(this, string2, offset2, length);
          case "ascii":
          case "latin1":
          case "binary":
            return asciiWrite(this, string2, offset2, length);
          case "base64":
            return base64Write(this, string2, offset2, length);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return ucs2Write(this, string2, offset2, length);
          default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };
    Buffer4.prototype.toJSON = function toJSON() {
      return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
      };
    };
    function base64Slice(buf, start, end) {
      if (start === 0 && end === buf.length) {
        return base64.fromByteArray(buf);
      } else {
        return base64.fromByteArray(buf.slice(start, end));
      }
    }
    function utf8Slice(buf, start, end) {
      end = Math.min(buf.length, end);
      const res = [];
      let i = start;
      while (i < end) {
        const firstByte = buf[i];
        let codePoint = null;
        let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
        if (i + bytesPerSequence <= end) {
          let secondByte, thirdByte, fourthByte, tempCodePoint;
          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 128) {
                codePoint = firstByte;
              }
              break;
            case 2:
              secondByte = buf[i + 1];
              if ((secondByte & 192) === 128) {
                tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                if (tempCodePoint > 127) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 3:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 4:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              fourthByte = buf[i + 3];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }
        if (codePoint === null) {
          codePoint = 65533;
          bytesPerSequence = 1;
        } else if (codePoint > 65535) {
          codePoint -= 65536;
          res.push(codePoint >>> 10 & 1023 | 55296);
          codePoint = 56320 | codePoint & 1023;
        }
        res.push(codePoint);
        i += bytesPerSequence;
      }
      return decodeCodePointsArray(res);
    }
    var MAX_ARGUMENTS_LENGTH = 4096;
    function decodeCodePointsArray(codePoints) {
      const len = codePoints.length;
      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints);
      }
      let res = "";
      let i = 0;
      while (i < len) {
        res += String.fromCharCode.apply(
          String,
          codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
        );
      }
      return res;
    }
    function asciiSlice(buf, start, end) {
      let ret = "";
      end = Math.min(buf.length, end);
      for (let i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i] & 127);
      }
      return ret;
    }
    function latin1Slice(buf, start, end) {
      let ret = "";
      end = Math.min(buf.length, end);
      for (let i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i]);
      }
      return ret;
    }
    function hexSlice(buf, start, end) {
      const len = buf.length;
      if (!start || start < 0) start = 0;
      if (!end || end < 0 || end > len) end = len;
      let out = "";
      for (let i = start; i < end; ++i) {
        out += hexSliceLookupTable[buf[i]];
      }
      return out;
    }
    function utf16leSlice(buf, start, end) {
      const bytes = buf.slice(start, end);
      let res = "";
      for (let i = 0; i < bytes.length - 1; i += 2) {
        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
      }
      return res;
    }
    Buffer4.prototype.slice = function slice(start, end) {
      const len = this.length;
      start = ~~start;
      end = end === void 0 ? len : ~~end;
      if (start < 0) {
        start += len;
        if (start < 0) start = 0;
      } else if (start > len) {
        start = len;
      }
      if (end < 0) {
        end += len;
        if (end < 0) end = 0;
      } else if (end > len) {
        end = len;
      }
      if (end < start) end = start;
      const newBuf = this.subarray(start, end);
      Object.setPrototypeOf(newBuf, Buffer4.prototype);
      return newBuf;
    };
    function checkOffset(offset2, ext, length) {
      if (offset2 % 1 !== 0 || offset2 < 0) throw new RangeError("offset is not uint");
      if (offset2 + ext > length) throw new RangeError("Trying to access beyond buffer length");
    }
    Buffer4.prototype.readUintLE = Buffer4.prototype.readUIntLE = function readUIntLE(offset2, byteLength2, noAssert) {
      offset2 = offset2 >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) checkOffset(offset2, byteLength2, this.length);
      let val = this[offset2];
      let mul = 1;
      let i = 0;
      while (++i < byteLength2 && (mul *= 256)) {
        val += this[offset2 + i] * mul;
      }
      return val;
    };
    Buffer4.prototype.readUintBE = Buffer4.prototype.readUIntBE = function readUIntBE(offset2, byteLength2, noAssert) {
      offset2 = offset2 >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) {
        checkOffset(offset2, byteLength2, this.length);
      }
      let val = this[offset2 + --byteLength2];
      let mul = 1;
      while (byteLength2 > 0 && (mul *= 256)) {
        val += this[offset2 + --byteLength2] * mul;
      }
      return val;
    };
    Buffer4.prototype.readUint8 = Buffer4.prototype.readUInt8 = function readUInt8(offset2, noAssert) {
      offset2 = offset2 >>> 0;
      if (!noAssert) checkOffset(offset2, 1, this.length);
      return this[offset2];
    };
    Buffer4.prototype.readUint16LE = Buffer4.prototype.readUInt16LE = function readUInt16LE(offset2, noAssert) {
      offset2 = offset2 >>> 0;
      if (!noAssert) checkOffset(offset2, 2, this.length);
      return this[offset2] | this[offset2 + 1] << 8;
    };
    Buffer4.prototype.readUint16BE = Buffer4.prototype.readUInt16BE = function readUInt16BE(offset2, noAssert) {
      offset2 = offset2 >>> 0;
      if (!noAssert) checkOffset(offset2, 2, this.length);
      return this[offset2] << 8 | this[offset2 + 1];
    };
    Buffer4.prototype.readUint32LE = Buffer4.prototype.readUInt32LE = function readUInt32LE(offset2, noAssert) {
      offset2 = offset2 >>> 0;
      if (!noAssert) checkOffset(offset2, 4, this.length);
      return (this[offset2] | this[offset2 + 1] << 8 | this[offset2 + 2] << 16) + this[offset2 + 3] * 16777216;
    };
    Buffer4.prototype.readUint32BE = Buffer4.prototype.readUInt32BE = function readUInt32BE(offset2, noAssert) {
      offset2 = offset2 >>> 0;
      if (!noAssert) checkOffset(offset2, 4, this.length);
      return this[offset2] * 16777216 + (this[offset2 + 1] << 16 | this[offset2 + 2] << 8 | this[offset2 + 3]);
    };
    Buffer4.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset2) {
      offset2 = offset2 >>> 0;
      validateNumber(offset2, "offset");
      const first = this[offset2];
      const last = this[offset2 + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset2, this.length - 8);
      }
      const lo = first + this[++offset2] * 2 ** 8 + this[++offset2] * 2 ** 16 + this[++offset2] * 2 ** 24;
      const hi = this[++offset2] + this[++offset2] * 2 ** 8 + this[++offset2] * 2 ** 16 + last * 2 ** 24;
      return BigInt(lo) + (BigInt(hi) << BigInt(32));
    });
    Buffer4.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset2) {
      offset2 = offset2 >>> 0;
      validateNumber(offset2, "offset");
      const first = this[offset2];
      const last = this[offset2 + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset2, this.length - 8);
      }
      const hi = first * 2 ** 24 + this[++offset2] * 2 ** 16 + this[++offset2] * 2 ** 8 + this[++offset2];
      const lo = this[++offset2] * 2 ** 24 + this[++offset2] * 2 ** 16 + this[++offset2] * 2 ** 8 + last;
      return (BigInt(hi) << BigInt(32)) + BigInt(lo);
    });
    Buffer4.prototype.readIntLE = function readIntLE(offset2, byteLength2, noAssert) {
      offset2 = offset2 >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) checkOffset(offset2, byteLength2, this.length);
      let val = this[offset2];
      let mul = 1;
      let i = 0;
      while (++i < byteLength2 && (mul *= 256)) {
        val += this[offset2 + i] * mul;
      }
      mul *= 128;
      if (val >= mul) val -= Math.pow(2, 8 * byteLength2);
      return val;
    };
    Buffer4.prototype.readIntBE = function readIntBE(offset2, byteLength2, noAssert) {
      offset2 = offset2 >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) checkOffset(offset2, byteLength2, this.length);
      let i = byteLength2;
      let mul = 1;
      let val = this[offset2 + --i];
      while (i > 0 && (mul *= 256)) {
        val += this[offset2 + --i] * mul;
      }
      mul *= 128;
      if (val >= mul) val -= Math.pow(2, 8 * byteLength2);
      return val;
    };
    Buffer4.prototype.readInt8 = function readInt8(offset2, noAssert) {
      offset2 = offset2 >>> 0;
      if (!noAssert) checkOffset(offset2, 1, this.length);
      if (!(this[offset2] & 128)) return this[offset2];
      return (255 - this[offset2] + 1) * -1;
    };
    Buffer4.prototype.readInt16LE = function readInt16LE(offset2, noAssert) {
      offset2 = offset2 >>> 0;
      if (!noAssert) checkOffset(offset2, 2, this.length);
      const val = this[offset2] | this[offset2 + 1] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer4.prototype.readInt16BE = function readInt16BE(offset2, noAssert) {
      offset2 = offset2 >>> 0;
      if (!noAssert) checkOffset(offset2, 2, this.length);
      const val = this[offset2 + 1] | this[offset2] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer4.prototype.readInt32LE = function readInt32LE(offset2, noAssert) {
      offset2 = offset2 >>> 0;
      if (!noAssert) checkOffset(offset2, 4, this.length);
      return this[offset2] | this[offset2 + 1] << 8 | this[offset2 + 2] << 16 | this[offset2 + 3] << 24;
    };
    Buffer4.prototype.readInt32BE = function readInt32BE(offset2, noAssert) {
      offset2 = offset2 >>> 0;
      if (!noAssert) checkOffset(offset2, 4, this.length);
      return this[offset2] << 24 | this[offset2 + 1] << 16 | this[offset2 + 2] << 8 | this[offset2 + 3];
    };
    Buffer4.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset2) {
      offset2 = offset2 >>> 0;
      validateNumber(offset2, "offset");
      const first = this[offset2];
      const last = this[offset2 + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset2, this.length - 8);
      }
      const val = this[offset2 + 4] + this[offset2 + 5] * 2 ** 8 + this[offset2 + 6] * 2 ** 16 + (last << 24);
      return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset2] * 2 ** 8 + this[++offset2] * 2 ** 16 + this[++offset2] * 2 ** 24);
    });
    Buffer4.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset2) {
      offset2 = offset2 >>> 0;
      validateNumber(offset2, "offset");
      const first = this[offset2];
      const last = this[offset2 + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset2, this.length - 8);
      }
      const val = (first << 24) + // Overflow
      this[++offset2] * 2 ** 16 + this[++offset2] * 2 ** 8 + this[++offset2];
      return (BigInt(val) << BigInt(32)) + BigInt(this[++offset2] * 2 ** 24 + this[++offset2] * 2 ** 16 + this[++offset2] * 2 ** 8 + last);
    });
    Buffer4.prototype.readFloatLE = function readFloatLE(offset2, noAssert) {
      offset2 = offset2 >>> 0;
      if (!noAssert) checkOffset(offset2, 4, this.length);
      return ieee754.read(this, offset2, true, 23, 4);
    };
    Buffer4.prototype.readFloatBE = function readFloatBE(offset2, noAssert) {
      offset2 = offset2 >>> 0;
      if (!noAssert) checkOffset(offset2, 4, this.length);
      return ieee754.read(this, offset2, false, 23, 4);
    };
    Buffer4.prototype.readDoubleLE = function readDoubleLE(offset2, noAssert) {
      offset2 = offset2 >>> 0;
      if (!noAssert) checkOffset(offset2, 8, this.length);
      return ieee754.read(this, offset2, true, 52, 8);
    };
    Buffer4.prototype.readDoubleBE = function readDoubleBE(offset2, noAssert) {
      offset2 = offset2 >>> 0;
      if (!noAssert) checkOffset(offset2, 8, this.length);
      return ieee754.read(this, offset2, false, 52, 8);
    };
    function checkInt(buf, value, offset2, ext, max, min) {
      if (!Buffer4.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
      if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
      if (offset2 + ext > buf.length) throw new RangeError("Index out of range");
    }
    Buffer4.prototype.writeUintLE = Buffer4.prototype.writeUIntLE = function writeUIntLE(value, offset2, byteLength2, noAssert) {
      value = +value;
      offset2 = offset2 >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value, offset2, byteLength2, maxBytes, 0);
      }
      let mul = 1;
      let i = 0;
      this[offset2] = value & 255;
      while (++i < byteLength2 && (mul *= 256)) {
        this[offset2 + i] = value / mul & 255;
      }
      return offset2 + byteLength2;
    };
    Buffer4.prototype.writeUintBE = Buffer4.prototype.writeUIntBE = function writeUIntBE(value, offset2, byteLength2, noAssert) {
      value = +value;
      offset2 = offset2 >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value, offset2, byteLength2, maxBytes, 0);
      }
      let i = byteLength2 - 1;
      let mul = 1;
      this[offset2 + i] = value & 255;
      while (--i >= 0 && (mul *= 256)) {
        this[offset2 + i] = value / mul & 255;
      }
      return offset2 + byteLength2;
    };
    Buffer4.prototype.writeUint8 = Buffer4.prototype.writeUInt8 = function writeUInt8(value, offset2, noAssert) {
      value = +value;
      offset2 = offset2 >>> 0;
      if (!noAssert) checkInt(this, value, offset2, 1, 255, 0);
      this[offset2] = value & 255;
      return offset2 + 1;
    };
    Buffer4.prototype.writeUint16LE = Buffer4.prototype.writeUInt16LE = function writeUInt16LE(value, offset2, noAssert) {
      value = +value;
      offset2 = offset2 >>> 0;
      if (!noAssert) checkInt(this, value, offset2, 2, 65535, 0);
      this[offset2] = value & 255;
      this[offset2 + 1] = value >>> 8;
      return offset2 + 2;
    };
    Buffer4.prototype.writeUint16BE = Buffer4.prototype.writeUInt16BE = function writeUInt16BE(value, offset2, noAssert) {
      value = +value;
      offset2 = offset2 >>> 0;
      if (!noAssert) checkInt(this, value, offset2, 2, 65535, 0);
      this[offset2] = value >>> 8;
      this[offset2 + 1] = value & 255;
      return offset2 + 2;
    };
    Buffer4.prototype.writeUint32LE = Buffer4.prototype.writeUInt32LE = function writeUInt32LE(value, offset2, noAssert) {
      value = +value;
      offset2 = offset2 >>> 0;
      if (!noAssert) checkInt(this, value, offset2, 4, 4294967295, 0);
      this[offset2 + 3] = value >>> 24;
      this[offset2 + 2] = value >>> 16;
      this[offset2 + 1] = value >>> 8;
      this[offset2] = value & 255;
      return offset2 + 4;
    };
    Buffer4.prototype.writeUint32BE = Buffer4.prototype.writeUInt32BE = function writeUInt32BE(value, offset2, noAssert) {
      value = +value;
      offset2 = offset2 >>> 0;
      if (!noAssert) checkInt(this, value, offset2, 4, 4294967295, 0);
      this[offset2] = value >>> 24;
      this[offset2 + 1] = value >>> 16;
      this[offset2 + 2] = value >>> 8;
      this[offset2 + 3] = value & 255;
      return offset2 + 4;
    };
    function wrtBigUInt64LE(buf, value, offset2, min, max) {
      checkIntBI(value, min, max, buf, offset2, 7);
      let lo = Number(value & BigInt(4294967295));
      buf[offset2++] = lo;
      lo = lo >> 8;
      buf[offset2++] = lo;
      lo = lo >> 8;
      buf[offset2++] = lo;
      lo = lo >> 8;
      buf[offset2++] = lo;
      let hi = Number(value >> BigInt(32) & BigInt(4294967295));
      buf[offset2++] = hi;
      hi = hi >> 8;
      buf[offset2++] = hi;
      hi = hi >> 8;
      buf[offset2++] = hi;
      hi = hi >> 8;
      buf[offset2++] = hi;
      return offset2;
    }
    function wrtBigUInt64BE(buf, value, offset2, min, max) {
      checkIntBI(value, min, max, buf, offset2, 7);
      let lo = Number(value & BigInt(4294967295));
      buf[offset2 + 7] = lo;
      lo = lo >> 8;
      buf[offset2 + 6] = lo;
      lo = lo >> 8;
      buf[offset2 + 5] = lo;
      lo = lo >> 8;
      buf[offset2 + 4] = lo;
      let hi = Number(value >> BigInt(32) & BigInt(4294967295));
      buf[offset2 + 3] = hi;
      hi = hi >> 8;
      buf[offset2 + 2] = hi;
      hi = hi >> 8;
      buf[offset2 + 1] = hi;
      hi = hi >> 8;
      buf[offset2] = hi;
      return offset2 + 8;
    }
    Buffer4.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset2 = 0) {
      return wrtBigUInt64LE(this, value, offset2, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    Buffer4.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset2 = 0) {
      return wrtBigUInt64BE(this, value, offset2, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    Buffer4.prototype.writeIntLE = function writeIntLE(value, offset2, byteLength2, noAssert) {
      value = +value;
      offset2 = offset2 >>> 0;
      if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value, offset2, byteLength2, limit - 1, -limit);
      }
      let i = 0;
      let mul = 1;
      let sub = 0;
      this[offset2] = value & 255;
      while (++i < byteLength2 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset2 + i - 1] !== 0) {
          sub = 1;
        }
        this[offset2 + i] = (value / mul >> 0) - sub & 255;
      }
      return offset2 + byteLength2;
    };
    Buffer4.prototype.writeIntBE = function writeIntBE(value, offset2, byteLength2, noAssert) {
      value = +value;
      offset2 = offset2 >>> 0;
      if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value, offset2, byteLength2, limit - 1, -limit);
      }
      let i = byteLength2 - 1;
      let mul = 1;
      let sub = 0;
      this[offset2 + i] = value & 255;
      while (--i >= 0 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset2 + i + 1] !== 0) {
          sub = 1;
        }
        this[offset2 + i] = (value / mul >> 0) - sub & 255;
      }
      return offset2 + byteLength2;
    };
    Buffer4.prototype.writeInt8 = function writeInt8(value, offset2, noAssert) {
      value = +value;
      offset2 = offset2 >>> 0;
      if (!noAssert) checkInt(this, value, offset2, 1, 127, -128);
      if (value < 0) value = 255 + value + 1;
      this[offset2] = value & 255;
      return offset2 + 1;
    };
    Buffer4.prototype.writeInt16LE = function writeInt16LE(value, offset2, noAssert) {
      value = +value;
      offset2 = offset2 >>> 0;
      if (!noAssert) checkInt(this, value, offset2, 2, 32767, -32768);
      this[offset2] = value & 255;
      this[offset2 + 1] = value >>> 8;
      return offset2 + 2;
    };
    Buffer4.prototype.writeInt16BE = function writeInt16BE(value, offset2, noAssert) {
      value = +value;
      offset2 = offset2 >>> 0;
      if (!noAssert) checkInt(this, value, offset2, 2, 32767, -32768);
      this[offset2] = value >>> 8;
      this[offset2 + 1] = value & 255;
      return offset2 + 2;
    };
    Buffer4.prototype.writeInt32LE = function writeInt32LE(value, offset2, noAssert) {
      value = +value;
      offset2 = offset2 >>> 0;
      if (!noAssert) checkInt(this, value, offset2, 4, 2147483647, -2147483648);
      this[offset2] = value & 255;
      this[offset2 + 1] = value >>> 8;
      this[offset2 + 2] = value >>> 16;
      this[offset2 + 3] = value >>> 24;
      return offset2 + 4;
    };
    Buffer4.prototype.writeInt32BE = function writeInt32BE(value, offset2, noAssert) {
      value = +value;
      offset2 = offset2 >>> 0;
      if (!noAssert) checkInt(this, value, offset2, 4, 2147483647, -2147483648);
      if (value < 0) value = 4294967295 + value + 1;
      this[offset2] = value >>> 24;
      this[offset2 + 1] = value >>> 16;
      this[offset2 + 2] = value >>> 8;
      this[offset2 + 3] = value & 255;
      return offset2 + 4;
    };
    Buffer4.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset2 = 0) {
      return wrtBigUInt64LE(this, value, offset2, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    Buffer4.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset2 = 0) {
      return wrtBigUInt64BE(this, value, offset2, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    function checkIEEE754(buf, value, offset2, ext, max, min) {
      if (offset2 + ext > buf.length) throw new RangeError("Index out of range");
      if (offset2 < 0) throw new RangeError("Index out of range");
    }
    function writeFloat(buf, value, offset2, littleEndian, noAssert) {
      value = +value;
      offset2 = offset2 >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset2, 4, 34028234663852886e22, -34028234663852886e22);
      }
      ieee754.write(buf, value, offset2, littleEndian, 23, 4);
      return offset2 + 4;
    }
    Buffer4.prototype.writeFloatLE = function writeFloatLE(value, offset2, noAssert) {
      return writeFloat(this, value, offset2, true, noAssert);
    };
    Buffer4.prototype.writeFloatBE = function writeFloatBE(value, offset2, noAssert) {
      return writeFloat(this, value, offset2, false, noAssert);
    };
    function writeDouble(buf, value, offset2, littleEndian, noAssert) {
      value = +value;
      offset2 = offset2 >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset2, 8, 17976931348623157e292, -17976931348623157e292);
      }
      ieee754.write(buf, value, offset2, littleEndian, 52, 8);
      return offset2 + 8;
    }
    Buffer4.prototype.writeDoubleLE = function writeDoubleLE(value, offset2, noAssert) {
      return writeDouble(this, value, offset2, true, noAssert);
    };
    Buffer4.prototype.writeDoubleBE = function writeDoubleBE(value, offset2, noAssert) {
      return writeDouble(this, value, offset2, false, noAssert);
    };
    Buffer4.prototype.copy = function copy(target, targetStart, start, end) {
      if (!Buffer4.isBuffer(target)) throw new TypeError("argument should be a Buffer");
      if (!start) start = 0;
      if (!end && end !== 0) end = this.length;
      if (targetStart >= target.length) targetStart = target.length;
      if (!targetStart) targetStart = 0;
      if (end > 0 && end < start) end = start;
      if (end === start) return 0;
      if (target.length === 0 || this.length === 0) return 0;
      if (targetStart < 0) {
        throw new RangeError("targetStart out of bounds");
      }
      if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
      if (end < 0) throw new RangeError("sourceEnd out of bounds");
      if (end > this.length) end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }
      const len = end - start;
      if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
        this.copyWithin(targetStart, start, end);
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, end),
          targetStart
        );
      }
      return len;
    };
    Buffer4.prototype.fill = function fill(val, start, end, encoding) {
      if (typeof val === "string") {
        if (typeof start === "string") {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === "string") {
          encoding = end;
          end = this.length;
        }
        if (encoding !== void 0 && typeof encoding !== "string") {
          throw new TypeError("encoding must be a string");
        }
        if (typeof encoding === "string" && !Buffer4.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
        if (val.length === 1) {
          const code = val.charCodeAt(0);
          if (encoding === "utf8" && code < 128 || encoding === "latin1") {
            val = code;
          }
        }
      } else if (typeof val === "number") {
        val = val & 255;
      } else if (typeof val === "boolean") {
        val = Number(val);
      }
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError("Out of range index");
      }
      if (end <= start) {
        return this;
      }
      start = start >>> 0;
      end = end === void 0 ? this.length : end >>> 0;
      if (!val) val = 0;
      let i;
      if (typeof val === "number") {
        for (i = start; i < end; ++i) {
          this[i] = val;
        }
      } else {
        const bytes = Buffer4.isBuffer(val) ? val : Buffer4.from(val, encoding);
        const len = bytes.length;
        if (len === 0) {
          throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        }
        for (i = 0; i < end - start; ++i) {
          this[i + start] = bytes[i % len];
        }
      }
      return this;
    };
    var errors = {};
    function E(sym, getMessage, Base) {
      errors[sym] = class NodeError extends Base {
        constructor() {
          super();
          Object.defineProperty(this, "message", {
            value: getMessage.apply(this, arguments),
            writable: true,
            configurable: true
          });
          this.name = `${this.name} [${sym}]`;
          this.stack;
          delete this.name;
        }
        get code() {
          return sym;
        }
        set code(value) {
          Object.defineProperty(this, "code", {
            configurable: true,
            enumerable: true,
            value,
            writable: true
          });
        }
        toString() {
          return `${this.name} [${sym}]: ${this.message}`;
        }
      };
    }
    E(
      "ERR_BUFFER_OUT_OF_BOUNDS",
      function(name) {
        if (name) {
          return `${name} is outside of buffer bounds`;
        }
        return "Attempt to access memory outside buffer bounds";
      },
      RangeError
    );
    E(
      "ERR_INVALID_ARG_TYPE",
      function(name, actual) {
        return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
      },
      TypeError
    );
    E(
      "ERR_OUT_OF_RANGE",
      function(str, range, input) {
        let msg = `The value of "${str}" is out of range.`;
        let received = input;
        if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
          received = addNumericalSeparator(String(input));
        } else if (typeof input === "bigint") {
          received = String(input);
          if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
            received = addNumericalSeparator(received);
          }
          received += "n";
        }
        msg += ` It must be ${range}. Received ${received}`;
        return msg;
      },
      RangeError
    );
    function addNumericalSeparator(val) {
      let res = "";
      let i = val.length;
      const start = val[0] === "-" ? 1 : 0;
      for (; i >= start + 4; i -= 3) {
        res = `_${val.slice(i - 3, i)}${res}`;
      }
      return `${val.slice(0, i)}${res}`;
    }
    function checkBounds(buf, offset2, byteLength2) {
      validateNumber(offset2, "offset");
      if (buf[offset2] === void 0 || buf[offset2 + byteLength2] === void 0) {
        boundsError(offset2, buf.length - (byteLength2 + 1));
      }
    }
    function checkIntBI(value, min, max, buf, offset2, byteLength2) {
      if (value > max || value < min) {
        const n = typeof min === "bigint" ? "n" : "";
        let range;
        if (byteLength2 > 3) {
          if (min === 0 || min === BigInt(0)) {
            range = `>= 0${n} and < 2${n} ** ${(byteLength2 + 1) * 8}${n}`;
          } else {
            range = `>= -(2${n} ** ${(byteLength2 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n}`;
          }
        } else {
          range = `>= ${min}${n} and <= ${max}${n}`;
        }
        throw new errors.ERR_OUT_OF_RANGE("value", range, value);
      }
      checkBounds(buf, offset2, byteLength2);
    }
    function validateNumber(value, name) {
      if (typeof value !== "number") {
        throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
      }
    }
    function boundsError(value, length, type2) {
      if (Math.floor(value) !== value) {
        validateNumber(value, type2);
        throw new errors.ERR_OUT_OF_RANGE(type2 || "offset", "an integer", value);
      }
      if (length < 0) {
        throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
      }
      throw new errors.ERR_OUT_OF_RANGE(
        type2 || "offset",
        `>= ${type2 ? 1 : 0} and <= ${length}`,
        value
      );
    }
    var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
    function base64clean(str) {
      str = str.split("=")[0];
      str = str.trim().replace(INVALID_BASE64_RE, "");
      if (str.length < 2) return "";
      while (str.length % 4 !== 0) {
        str = str + "=";
      }
      return str;
    }
    function utf8ToBytes(string2, units) {
      units = units || Infinity;
      let codePoint;
      const length = string2.length;
      let leadSurrogate = null;
      const bytes = [];
      for (let i = 0; i < length; ++i) {
        codePoint = string2.charCodeAt(i);
        if (codePoint > 55295 && codePoint < 57344) {
          if (!leadSurrogate) {
            if (codePoint > 56319) {
              if ((units -= 3) > -1) bytes.push(239, 191, 189);
              continue;
            } else if (i + 1 === length) {
              if ((units -= 3) > -1) bytes.push(239, 191, 189);
              continue;
            }
            leadSurrogate = codePoint;
            continue;
          }
          if (codePoint < 56320) {
            if ((units -= 3) > -1) bytes.push(239, 191, 189);
            leadSurrogate = codePoint;
            continue;
          }
          codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
        } else if (leadSurrogate) {
          if ((units -= 3) > -1) bytes.push(239, 191, 189);
        }
        leadSurrogate = null;
        if (codePoint < 128) {
          if ((units -= 1) < 0) break;
          bytes.push(codePoint);
        } else if (codePoint < 2048) {
          if ((units -= 2) < 0) break;
          bytes.push(
            codePoint >> 6 | 192,
            codePoint & 63 | 128
          );
        } else if (codePoint < 65536) {
          if ((units -= 3) < 0) break;
          bytes.push(
            codePoint >> 12 | 224,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else if (codePoint < 1114112) {
          if ((units -= 4) < 0) break;
          bytes.push(
            codePoint >> 18 | 240,
            codePoint >> 12 & 63 | 128,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else {
          throw new Error("Invalid code point");
        }
      }
      return bytes;
    }
    function asciiToBytes(str) {
      const byteArray = [];
      for (let i = 0; i < str.length; ++i) {
        byteArray.push(str.charCodeAt(i) & 255);
      }
      return byteArray;
    }
    function utf16leToBytes(str, units) {
      let c, hi, lo;
      const byteArray = [];
      for (let i = 0; i < str.length; ++i) {
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
      }
      return byteArray;
    }
    function base64ToBytes(str) {
      return base64.toByteArray(base64clean(str));
    }
    function blitBuffer(src, dst, offset2, length) {
      let i;
      for (i = 0; i < length; ++i) {
        if (i + offset2 >= dst.length || i >= src.length) break;
        dst[i + offset2] = src[i];
      }
      return i;
    }
    function isInstance(obj, type2) {
      return obj instanceof type2 || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type2.name;
    }
    function numberIsNaN(obj) {
      return obj !== obj;
    }
    var hexSliceLookupTable = function() {
      const alphabet = "0123456789abcdef";
      const table = new Array(256);
      for (let i = 0; i < 16; ++i) {
        const i16 = i * 16;
        for (let j = 0; j < 16; ++j) {
          table[i16 + j] = alphabet[i] + alphabet[j];
        }
      }
      return table;
    }();
    function defineBigIntMethod(fn) {
      return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
    }
    function BufferBigIntNotDefined() {
      throw new Error("BigInt not supported");
    }
  }
});

// node_modules/@pythnetwork/pyth-sui-js/lib/SuiPriceServiceConnection.js
var require_SuiPriceServiceConnection = __commonJS({
  "node_modules/@pythnetwork/pyth-sui-js/lib/SuiPriceServiceConnection.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SuiPriceServiceConnection = void 0;
    var price_service_client_1 = require_lib3();
    var buffer_1 = require_buffer2();
    var SuiPriceServiceConnection = class extends price_service_client_1.PriceServiceConnection {
      /**
       * Gets price update data (either batch price attestation VAAs or accumulator messages, depending on the chosen endpoint), which then
       * can be submitted to the Pyth contract to update the prices. This will throw an axios error if there is a network problem or
       * the price service returns a non-ok response (e.g: Invalid price ids)
       *
       * @param priceIds Array of hex-encoded price ids.
       * @returns Array of buffers containing the price update data.
       */
      async getPriceFeedsUpdateData(priceIds) {
        const latestVaas = await this.getLatestVaas(priceIds);
        return latestVaas.map((vaa) => buffer_1.Buffer.from(vaa, "base64"));
      }
    };
    exports2.SuiPriceServiceConnection = SuiPriceServiceConnection;
  }
});

// node_modules/@pythnetwork/pyth-sui-js/lib/client.js
var require_client5 = __commonJS({
  "node_modules/@pythnetwork/pyth-sui-js/lib/client.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SuiPythClient = void 0;
    var utils_1 = require_utils6();
    var bcs_1 = require_bcs3();
    var buffer_1 = require_buffer2();
    var MAX_ARGUMENT_SIZE = 16 * 1024;
    var SuiPythClient = class {
      constructor(provider, pythStateId, wormholeStateId) {
        __publicField(this, "provider");
        __publicField(this, "pythStateId");
        __publicField(this, "wormholeStateId");
        __publicField(this, "pythPackageId");
        __publicField(this, "wormholePackageId");
        __publicField(this, "priceTableInfo");
        __publicField(this, "priceFeedObjectIdCache", /* @__PURE__ */ new Map());
        __publicField(this, "baseUpdateFee");
        this.provider = provider;
        this.pythStateId = pythStateId;
        this.wormholeStateId = wormholeStateId;
        this.pythPackageId = void 0;
        this.wormholePackageId = void 0;
      }
      async getBaseUpdateFee() {
        if (this.baseUpdateFee === void 0) {
          const result = await this.provider.getObject({
            id: this.pythStateId,
            options: { showContent: true }
          });
          if (!result.data || !result.data.content || result.data.content.dataType !== "moveObject")
            throw new Error("Unable to fetch pyth state object");
          this.baseUpdateFee = result.data.content.fields.base_update_fee;
        }
        return this.baseUpdateFee;
      }
      /**
       * getPackageId returns the latest package id that the object belongs to. Use this to
       * fetch the latest package id for a given object id and handle package upgrades automatically.
       * @param objectId
       * @returns package id
       */
      async getPackageId(objectId) {
        const state = await this.provider.getObject({
          id: objectId,
          options: {
            showContent: true
          }
        }).then((result) => {
          var _a, _b, _c;
          if (((_b = (_a = result.data) == null ? void 0 : _a.content) == null ? void 0 : _b.dataType) == "moveObject") {
            return result.data.content.fields;
          }
          console.log((_c = result.data) == null ? void 0 : _c.content);
          throw new Error(`Cannot fetch package id for object ${objectId}`);
        });
        if ("upgrade_cap" in state) {
          return state.upgrade_cap.fields.package;
        }
        throw new Error("upgrade_cap not found");
      }
      /**
       * Adds the commands for calling wormhole and verifying the vaas and returns the verified vaas.
       * @param vaas array of vaas to verify
       * @param tx transaction block to add commands to
       */
      async verifyVaas(vaas, tx) {
        const wormholePackageId = await this.getWormholePackageId();
        const verifiedVaas = [];
        for (const vaa of vaas) {
          const [verifiedVaa] = tx.moveCall({
            target: `${wormholePackageId}::vaa::parse_and_verify`,
            arguments: [
              tx.object(this.wormholeStateId),
              tx.pure(bcs_1.bcs.vector(bcs_1.bcs.U8).serialize(Array.from(vaa), {
                maxSize: MAX_ARGUMENT_SIZE
              }).toBytes()),
              tx.object(utils_1.SUI_CLOCK_OBJECT_ID)
            ]
          });
          verifiedVaas.push(verifiedVaa);
        }
        return verifiedVaas;
      }
      /**
       * Adds the necessary commands for updating the pyth price feeds to the transaction block.
       * @param tx transaction block to add commands to
       * @param updates array of price feed updates received from the price service
       * @param feedIds array of feed ids to update (in hex format)
       */
      async updatePriceFeeds(tx, updates, feedIds) {
        const packageId = await this.getPythPackageId();
        let priceUpdatesHotPotato;
        if (updates.length > 1) {
          throw new Error("SDK does not support sending multiple accumulator messages in a single transaction");
        }
        const vaa = this.extractVaaBytesFromAccumulatorMessage(updates[0]);
        const verifiedVaas = await this.verifyVaas([vaa], tx);
        [priceUpdatesHotPotato] = tx.moveCall({
          target: `${packageId}::pyth::create_authenticated_price_infos_using_accumulator`,
          arguments: [
            tx.object(this.pythStateId),
            tx.pure(bcs_1.bcs.vector(bcs_1.bcs.U8).serialize(Array.from(updates[0]), {
              maxSize: MAX_ARGUMENT_SIZE
            }).toBytes()),
            verifiedVaas[0],
            tx.object(utils_1.SUI_CLOCK_OBJECT_ID)
          ]
        });
        const priceInfoObjects = [];
        const baseUpdateFee = await this.getBaseUpdateFee();
        const coins = tx.splitCoins(tx.gas, feedIds.map(() => tx.pure.u64(baseUpdateFee)));
        let coinId = 0;
        for (const feedId of feedIds) {
          const priceInfoObjectId = await this.getPriceFeedObjectId(feedId);
          if (!priceInfoObjectId) {
            throw new Error(`Price feed ${feedId} not found, please create it first`);
          }
          priceInfoObjects.push(priceInfoObjectId);
          [priceUpdatesHotPotato] = tx.moveCall({
            target: `${packageId}::pyth::update_single_price_feed`,
            arguments: [
              tx.object(this.pythStateId),
              priceUpdatesHotPotato,
              tx.object(priceInfoObjectId),
              coins[coinId],
              tx.object(utils_1.SUI_CLOCK_OBJECT_ID)
            ]
          });
          coinId++;
        }
        tx.moveCall({
          target: `${packageId}::hot_potato_vector::destroy`,
          arguments: [priceUpdatesHotPotato],
          typeArguments: [`${packageId}::price_info::PriceInfo`]
        });
        return priceInfoObjects;
      }
      async createPriceFeed(tx, updates) {
        const packageId = await this.getPythPackageId();
        if (updates.length > 1) {
          throw new Error("SDK does not support sending multiple accumulator messages in a single transaction");
        }
        const vaa = this.extractVaaBytesFromAccumulatorMessage(updates[0]);
        const verifiedVaas = await this.verifyVaas([vaa], tx);
        tx.moveCall({
          target: `${packageId}::pyth::create_price_feeds_using_accumulator`,
          arguments: [
            tx.object(this.pythStateId),
            tx.pure(bcs_1.bcs.vector(bcs_1.bcs.U8).serialize(Array.from(updates[0]), {
              maxSize: MAX_ARGUMENT_SIZE
            }).toBytes()),
            verifiedVaas[0],
            tx.object(utils_1.SUI_CLOCK_OBJECT_ID)
          ]
        });
      }
      /**
       * Get the packageId for the wormhole package if not already cached
       */
      async getWormholePackageId() {
        if (!this.wormholePackageId) {
          this.wormholePackageId = await this.getPackageId(this.wormholeStateId);
        }
        return this.wormholePackageId;
      }
      /**
       * Get the packageId for the pyth package if not already cached
       */
      async getPythPackageId() {
        if (!this.pythPackageId) {
          this.pythPackageId = await this.getPackageId(this.pythStateId);
        }
        return this.pythPackageId;
      }
      /**
       * Get the priceFeedObjectId for a given feedId if not already cached
       * @param feedId
       */
      async getPriceFeedObjectId(feedId) {
        const normalizedFeedId = feedId.replace("0x", "");
        if (!this.priceFeedObjectIdCache.has(normalizedFeedId)) {
          const { id: tableId, fieldType } = await this.getPriceTableInfo();
          const result = await this.provider.getDynamicFieldObject({
            parentId: tableId,
            name: {
              type: `${fieldType}::price_identifier::PriceIdentifier`,
              value: {
                bytes: Array.from(buffer_1.Buffer.from(normalizedFeedId, "hex"))
              }
            }
          });
          if (!result.data || !result.data.content) {
            return void 0;
          }
          if (result.data.content.dataType !== "moveObject") {
            throw new Error("Price feed type mismatch");
          }
          this.priceFeedObjectIdCache.set(
            normalizedFeedId,
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            result.data.content.fields.value
          );
        }
        return this.priceFeedObjectIdCache.get(normalizedFeedId);
      }
      /**
       * Fetches the price table object id for the current state id if not cached
       * @returns price table object id
       */
      async getPriceTableInfo() {
        if (this.priceTableInfo === void 0) {
          const result = await this.provider.getDynamicFieldObject({
            parentId: this.pythStateId,
            name: {
              type: "vector<u8>",
              value: "price_info"
            }
          });
          if (!result.data || !result.data.type) {
            throw new Error("Price Table not found, contract may not be initialized");
          }
          let type2 = result.data.type.replace("0x2::table::Table<", "");
          type2 = type2.replace("::price_identifier::PriceIdentifier, 0x2::object::ID>", "");
          this.priceTableInfo = { id: result.data.objectId, fieldType: type2 };
        }
        return this.priceTableInfo;
      }
      /**
       * Obtains the vaa bytes embedded in an accumulator message.
       * @param accumulatorMessage - the accumulator price update message
       * @returns vaa bytes as a uint8 array
       */
      extractVaaBytesFromAccumulatorMessage(accumulatorMessage) {
        const trailingPayloadSize = accumulatorMessage.readUint8(6);
        const vaaSizeOffset = 7 + // header bytes (header(4) + major(1) + minor(1) + trailing payload size(1))
        trailingPayloadSize + // trailing payload (variable number of bytes)
        1;
        const vaaSize = accumulatorMessage.readUint16BE(vaaSizeOffset);
        const vaaOffset = vaaSizeOffset + 2;
        return accumulatorMessage.subarray(vaaOffset, vaaOffset + vaaSize);
      }
    };
    exports2.SuiPythClient = SuiPythClient;
  }
});

// node_modules/@pythnetwork/pyth-sui-js/lib/index.js
var require_lib4 = __commonJS({
  "node_modules/@pythnetwork/pyth-sui-js/lib/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PriceFeed = exports2.Price = exports2.SuiPythClient = exports2.SuiPriceServiceConnection = void 0;
    var SuiPriceServiceConnection_1 = require_SuiPriceServiceConnection();
    Object.defineProperty(exports2, "SuiPriceServiceConnection", { enumerable: true, get: function() {
      return SuiPriceServiceConnection_1.SuiPriceServiceConnection;
    } });
    var client_1 = require_client5();
    Object.defineProperty(exports2, "SuiPythClient", { enumerable: true, get: function() {
      return client_1.SuiPythClient;
    } });
    var price_service_client_1 = require_lib3();
    Object.defineProperty(exports2, "Price", { enumerable: true, get: function() {
      return price_service_client_1.Price;
    } });
    Object.defineProperty(exports2, "PriceFeed", { enumerable: true, get: function() {
      return price_service_client_1.PriceFeed;
    } });
  }
});

// node_modules/navi-sdk/dist/libs/CallFunctions/index.js
var require_CallFunctions = __commonJS({
  "node_modules/navi-sdk/dist/libs/CallFunctions/index.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.moveInspect = moveInspect;
    exports2.getReservesDetail = getReservesDetail;
    exports2.getAddressPortfolio = getAddressPortfolio;
    exports2.getHealthFactorCall = getHealthFactorCall;
    exports2.getReserveData = getReserveData;
    exports2.getIncentiveAPY = getIncentiveAPY;
    exports2.getCoinOracleInfo = getCoinOracleInfo;
    exports2.getUserState = getUserState;
    var transactions_1 = require_transactions();
    var bcs_1 = require_bcs6();
    var address_1 = require_address();
    var PTB_1 = require_PTB();
    function inspectResultParseAndPrint(data, funName, parseType) {
      if (data.results && data.results.length > 0) {
        if (data.results[0].returnValues && data.results[0].returnValues.length > 0) {
          let values = [];
          for (let v of data.results[0].returnValues) {
            let _type = parseType ? parseType : v[1];
            if (_type == "vector<0x1::ascii::String>") {
              _type = "vector<string>";
            }
            let result = bcs_1.bcs.de(_type, Uint8Array.from(v[0]));
            values.push(result);
          }
          return values;
        }
      } else if (data.error) {
        console.log(`Get an error, msg: ${data.error}`);
      }
      return [];
    }
    function moveInspectImpl(txb, client, sender, funName, typeName) {
      return __awaiter2(this, void 0, void 0, function* () {
        const result = yield client.devInspectTransactionBlock({
          transactionBlock: txb,
          sender
        });
        return inspectResultParseAndPrint(result, funName, typeName);
      });
    }
    function moveInspect(tx, client, sender, target, args, typeArgs, typeName) {
      return __awaiter2(this, void 0, void 0, function* () {
        const funcName = target.split("::");
        tx.moveCall({
          target,
          arguments: args,
          typeArguments: typeArgs
        });
        return yield moveInspectImpl(tx, client, sender, funcName.slice(1, 3).join("::"), typeName);
      });
    }
    function getReservesDetail(assetId, client) {
      return __awaiter2(this, void 0, void 0, function* () {
        const config = yield (0, address_1.getConfig)();
        const result = yield client.getDynamicFieldObject({ parentId: config.ReserveParentId, name: { type: "u8", value: assetId } });
        return result;
      });
    }
    function getAddressPortfolio(address_2) {
      return __awaiter2(this, arguments, void 0, function* (address, prettyPrint = true, client, decimals, tokenFilter) {
        const balanceMap = /* @__PURE__ */ new Map();
        const validTokens = Object.keys(address_1.pool);
        const filteredTokens = tokenFilter ? tokenFilter.filter((token) => validTokens.includes(token)) : validTokens;
        if (tokenFilter) {
          const invalidTokens = tokenFilter.filter((token) => !validTokens.includes(token));
          if (invalidTokens.length > 0) {
            console.warn(`Some tokens passed in do not exist and have been ignored: ${invalidTokens.join(", ")}`);
          }
        }
        yield Promise.all(filteredTokens.map((poolKey) => __awaiter2(this, void 0, void 0, function* () {
          var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1;
          const reserve = address_1.pool[poolKey];
          const borrowBalance = yield client.getDynamicFieldObject({ parentId: reserve.borrowBalanceParentId, name: { type: "address", value: address } });
          const supplyBalance = yield client.getDynamicFieldObject({ parentId: reserve.supplyBalanceParentId, name: { type: "address", value: address } });
          const borrowIndexData = yield getReservesDetail(reserve.assetId, client);
          const borrowIndex = ((_e = (_d = (_c = (_b = (_a = borrowIndexData.data) === null || _a === void 0 ? void 0 : _a.content) === null || _b === void 0 ? void 0 : _b.fields) === null || _c === void 0 ? void 0 : _c.value) === null || _d === void 0 ? void 0 : _d.fields) === null || _e === void 0 ? void 0 : _e.current_borrow_index) / Math.pow(10, 27);
          const supplyIndex = ((_k = (_j = (_h = (_g = (_f = borrowIndexData.data) === null || _f === void 0 ? void 0 : _f.content) === null || _g === void 0 ? void 0 : _g.fields) === null || _h === void 0 ? void 0 : _h.value) === null || _j === void 0 ? void 0 : _j.fields) === null || _k === void 0 ? void 0 : _k.current_supply_index) / Math.pow(10, 27);
          let borrowValue = 0;
          let supplyValue = 0;
          borrowValue = borrowBalance && ((_m = (_l = borrowBalance.data) === null || _l === void 0 ? void 0 : _l.content) === null || _m === void 0 ? void 0 : _m.fields.value) !== void 0 ? ((_p = (_o = borrowBalance.data) === null || _o === void 0 ? void 0 : _o.content) === null || _p === void 0 ? void 0 : _p.fields.value) / Math.pow(10, 9) : 0;
          supplyValue = supplyBalance && ((_r = (_q = supplyBalance.data) === null || _q === void 0 ? void 0 : _q.content) === null || _r === void 0 ? void 0 : _r.fields.value) !== void 0 ? ((_t = (_s = supplyBalance.data) === null || _s === void 0 ? void 0 : _s.content) === null || _t === void 0 ? void 0 : _t.fields.value) / Math.pow(10, 9) : 0;
          borrowValue *= borrowIndex;
          supplyValue *= supplyIndex;
          if (!decimals) {
            borrowValue = borrowBalance && ((_v = (_u = borrowBalance.data) === null || _u === void 0 ? void 0 : _u.content) === null || _v === void 0 ? void 0 : _v.fields.value) !== void 0 ? (_x = (_w = borrowBalance.data) === null || _w === void 0 ? void 0 : _w.content) === null || _x === void 0 ? void 0 : _x.fields.value : 0;
            supplyValue = supplyBalance && ((_z = (_y = supplyBalance.data) === null || _y === void 0 ? void 0 : _y.content) === null || _z === void 0 ? void 0 : _z.fields.value) !== void 0 ? (_1 = (_0 = supplyBalance.data) === null || _0 === void 0 ? void 0 : _0.content) === null || _1 === void 0 ? void 0 : _1.fields.value : 0;
            borrowValue *= borrowIndex;
            supplyValue *= supplyIndex;
          }
          if (prettyPrint) {
            console.log(`| ${poolKey} | ${borrowValue} | ${supplyValue} |`);
          }
          balanceMap.set(poolKey, { borrowBalance: borrowValue, supplyBalance: supplyValue });
        })));
        return balanceMap;
      });
    }
    function getHealthFactorCall(address, client) {
      return __awaiter2(this, void 0, void 0, function* () {
        const config = yield (0, address_1.getConfig)();
        const tx = new transactions_1.Transaction();
        const result = yield moveInspect(tx, client, address, `${config.ProtocolPackage}::logic::user_health_factor`, [
          tx.object("0x06"),
          // clock object id
          tx.object(config.StorageId),
          // object id of storage
          tx.object(config.PriceOracle),
          // object id of price oracle
          tx.pure.address(address)
          // user address
        ]);
        return result;
      });
    }
    function getReserveData(address, client) {
      return __awaiter2(this, void 0, void 0, function* () {
        (0, PTB_1.registerStructs)();
        const config = yield (0, address_1.getConfig)();
        const tx = new transactions_1.Transaction();
        const result = yield moveInspect(tx, client, address, `${config.uiGetter}::getter::get_reserve_data`, [
          tx.object(config.StorageId)
        ], [], "vector<ReserveDataInfo>");
        return result[0];
      });
    }
    function getIncentiveAPY(address, client, option) {
      return __awaiter2(this, void 0, void 0, function* () {
        (0, PTB_1.registerStructs)();
        const config = yield (0, address_1.getConfig)();
        const tx = new transactions_1.Transaction();
        const result = yield moveInspect(
          tx,
          client,
          address,
          `${config.uiGetter}::incentive_getter::get_incentive_apy`,
          [
            tx.object("0x06"),
            // clock object id
            tx.object(config.IncentiveV2),
            // the incentive object v2
            tx.object(config.StorageId),
            // object id of storage
            tx.object(config.PriceOracle),
            // The price oracle object
            tx.pure.u8(option)
          ],
          [],
          // type arguments is null
          "vector<IncentiveAPYInfo>"
          // parse type
        );
        return result[0];
      });
    }
    function getCoinOracleInfo(client, oracleIds) {
      return __awaiter2(this, void 0, void 0, function* () {
        (0, PTB_1.registerStructs)();
        const config = yield (0, address_1.getConfig)();
        const tx = new transactions_1.Transaction();
        const result = yield moveInspect(
          tx,
          client,
          "0xcda879cde94eeeae2dd6df58c9ededc60bcf2f7aedb79777e47d95b2cfb016c2",
          `${config.uiGetter}::getter::get_oracle_info`,
          [
            tx.object("0x06"),
            // clock object id
            tx.object(config.PriceOracle),
            // The price oracle object
            tx.pure.vector("u8", oracleIds)
          ],
          [],
          // type arguments is null
          "vector<OracleInfo>"
          // parse type
        );
        return result[0];
      });
    }
    function getUserState(client, address) {
      return __awaiter2(this, void 0, void 0, function* () {
        (0, PTB_1.registerStructs)();
        const config = yield (0, address_1.getConfig)();
        const tx = new transactions_1.Transaction();
        const result = yield moveInspect(
          tx,
          client,
          "0xcda879cde94eeeae2dd6df58c9ededc60bcf2f7aedb79777e47d95b2cfb016c2",
          `${config.uiGetter}::getter::get_user_state`,
          [
            tx.object(config.StorageId),
            tx.pure.address(address)
          ],
          [],
          // type arguments is null
          "vector<UserStateInfo>"
        );
        return result[0];
      });
    }
  }
});

// node_modules/navi-sdk/dist/libs/PTB/V3.js
var require_V3 = __commonJS({
  "node_modules/navi-sdk/dist/libs/PTB/V3.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.registerStructs = registerStructs;
    exports2.getAvailableRewards = getAvailableRewards;
    exports2.getAvailableRewardsWithoutOption = getAvailableRewardsWithoutOption;
    exports2.claimRewardFunction = claimRewardFunction;
    exports2.claimAllRewardsPTB = claimAllRewardsPTB;
    exports2.claimRewardsByAssetIdPTB = claimRewardsByAssetIdPTB;
    exports2.claimRewardResupplyFunction = claimRewardResupplyFunction;
    exports2.claimAllRewardsResupplyPTB = claimAllRewardsResupplyPTB;
    exports2.getBorrowFee = getBorrowFee;
    exports2.calculateApy = calculateApy;
    exports2.groupByAssetCoinType = groupByAssetCoinType;
    exports2.getCurrentRules = getCurrentRules;
    exports2.getPoolsApyOuter = getPoolsApyOuter;
    exports2.getPoolApy = getPoolApy;
    exports2.getPoolsApy = getPoolsApy;
    var transactions_1 = require_transactions();
    var utils_1 = require_utils6();
    var bcs_1 = require_bcs6();
    var CallFunctions_1 = require_CallFunctions();
    var commonFunctions_1 = require_commonFunctions();
    var PoolInfo_1 = require_PoolInfo();
    var address_1 = require_address();
    var SECONDS_PER_DAY = 86400;
    var RATE_MULTIPLIER = 1e3;
    function formatCoinType(coinType) {
      return coinType.startsWith("0x") ? coinType : "0x" + coinType;
    }
    function registerStructs() {
      bcs_1.bcs.registerStructType("ClaimableReward", {
        asset_coin_type: "string",
        reward_coin_type: "string",
        user_claimable_reward: "u256",
        user_claimed_reward: "u256",
        rule_ids: "vector<address>"
      });
    }
    var getPriceFeedKey = (coinType) => {
      const formattedCoinType = coinType.startsWith("0x") ? coinType : `0x${coinType}`;
      return Object.keys(address_1.PriceFeedConfig).find((key) => address_1.PriceFeedConfig[key].coinType === formattedCoinType);
    };
    var getPoolKey = (coinType) => {
      const formattedCoinType = coinType.startsWith("0x") ? coinType : `0x${coinType}`;
      return Object.keys(address_1.pool).find((key) => (0, utils_1.normalizeStructTag)(address_1.pool[key].type) === formattedCoinType);
    };
    function getAvailableRewards(client_1, checkAddress_1) {
      return __awaiter2(this, arguments, void 0, function* (client, checkAddress, prettyPrint = true) {
        var _a;
        const protocolConfig = yield (0, address_1.getConfig)();
        const tx = new transactions_1.Transaction();
        const rewardsData = yield (0, CallFunctions_1.moveInspect)(tx, client, checkAddress, `${protocolConfig.uiGetter}::incentive_v3_getter::get_user_atomic_claimable_rewards`, [
          tx.object("0x06"),
          tx.object(protocolConfig.StorageId),
          tx.object(protocolConfig.IncentiveV3),
          tx.pure.address(checkAddress)
        ]);
        if (!rewardsData) {
          throw new Error("Failed to fetch v3 rewards data: moveInspect returned undefined.");
        }
        let rewardsList = [];
        if (Array.isArray(rewardsData)) {
          if (rewardsData.length === 5 && Array.isArray(rewardsData[0])) {
            const count = rewardsData[0].length;
            for (let i = 0; i < count; i++) {
              rewardsList.push({
                asset_coin_type: rewardsData[0][i],
                reward_coin_type: rewardsData[1][i],
                option: Number(rewardsData[2][i]),
                // Ensure rule_ids is always an array
                rule_ids: Array.isArray(rewardsData[3][i]) ? rewardsData[3][i] : [rewardsData[3][i]],
                user_claimable_reward: Number(rewardsData[4][i])
              });
            }
          } else {
            rewardsList = rewardsData;
          }
        }
        if (rewardsList.length === 0) {
          if (prettyPrint) {
            console.log("No v3 rewards");
          }
          return null;
        }
        const groupedRewards = {};
        for (const reward of rewardsList) {
          const { asset_coin_type, reward_coin_type, option, rule_ids, user_claimable_reward } = reward;
          const assetPriceFeedKey = getPriceFeedKey(asset_coin_type);
          const rewardPriceFeedKey = getPriceFeedKey(reward_coin_type);
          const assetPoolKey = getPoolKey(asset_coin_type);
          const rewardPoolKey = getPoolKey(reward_coin_type);
          if (!assetPriceFeedKey || !rewardPriceFeedKey || !assetPoolKey || !rewardPoolKey) {
            continue;
          }
          if (!groupedRewards[asset_coin_type]) {
            groupedRewards[asset_coin_type] = [];
          }
          const decimalPrecision = address_1.PriceFeedConfig[rewardPriceFeedKey].priceDecimal;
          const convertedClaimable = Number(user_claimable_reward) / Math.pow(10, decimalPrecision);
          groupedRewards[asset_coin_type].push({
            asset_id: address_1.pool[assetPoolKey].assetId.toString(),
            reward_id: address_1.pool[rewardPoolKey].assetId.toString(),
            reward_coin_type,
            option,
            rule_ids,
            user_claimable_reward: convertedClaimable
          });
        }
        if (prettyPrint) {
          console.log(`-- V3 Available Rewards --`);
          console.log(`address: ${checkAddress}`);
          for (const [assetCoinType, rewards] of Object.entries(groupedRewards)) {
            const assetKey = (_a = getPriceFeedKey(assetCoinType)) !== null && _a !== void 0 ? _a : assetCoinType;
            console.log(`Asset: ${assetKey}`);
            rewards.forEach((reward, idx) => {
              var _a2;
              const rewardKey = (_a2 = getPriceFeedKey(reward.reward_coin_type)) !== null && _a2 !== void 0 ? _a2 : reward.reward_coin_type;
              console.log(`  ${idx + 1}. Reward Coin: ${rewardKey}, Option: ${reward.option}, Claimable: ${reward.user_claimable_reward}`);
            });
          }
        }
        return groupedRewards;
      });
    }
    function getAvailableRewardsWithoutOption(client_1, userAddress_1) {
      return __awaiter2(this, arguments, void 0, function* (client, userAddress, prettyPrint = true) {
        var _a;
        const protocolConfig = yield (0, address_1.getConfig)();
        registerStructs();
        const tx = new transactions_1.Transaction();
        const claimableRewardsCall = tx.moveCall({
          target: `${protocolConfig.ProtocolPackage}::incentive_v3::get_user_claimable_rewards`,
          arguments: [
            tx.object("0x06"),
            tx.object(protocolConfig.StorageId),
            tx.object(protocolConfig.IncentiveV3),
            tx.pure.address(userAddress)
          ]
        });
        const rewardsData = yield (0, CallFunctions_1.moveInspect)(tx, client, userAddress, `${protocolConfig.ProtocolPackage}::incentive_v3::parse_claimable_rewards`, [claimableRewardsCall], [], "vector<ClaimableReward>");
        if (!rewardsData) {
          throw new Error("Failed to fetch v3 rewards data: moveInspect returned undefined.");
        }
        const rawRewards = rewardsData[0];
        if (rawRewards.length === 0) {
          if (prettyPrint) {
            console.log("No v3 rewards");
          }
          return null;
        }
        const getPriceFeedKey2 = (coinType) => Object.keys(address_1.PriceFeedConfig).find((key) => address_1.PriceFeedConfig[key].coinType === `0x${coinType}`);
        const getPoolKey2 = (coinType) => Object.keys(address_1.pool).find((key) => (0, utils_1.normalizeStructTag)(address_1.pool[key].type) === `0x${coinType}`);
        const groupedRewards = rawRewards.reduce((acc, reward) => {
          const { asset_coin_type, reward_coin_type, user_claimable_reward, user_claimed_reward, rule_ids } = reward;
          const assetPriceFeedKey = getPriceFeedKey2(asset_coin_type);
          const rewardPriceFeedKey = getPriceFeedKey2(reward_coin_type);
          const assetPoolKey = getPoolKey2(asset_coin_type);
          const rewardPoolKey = getPoolKey2(reward_coin_type);
          if (!assetPriceFeedKey || !rewardPriceFeedKey || !assetPoolKey || !rewardPoolKey) {
            return acc;
          }
          if (!acc[asset_coin_type]) {
            acc[asset_coin_type] = [];
          }
          const decimalPrecision = address_1.PriceFeedConfig[rewardPriceFeedKey].priceDecimal;
          const convertedClaimable = Number(user_claimable_reward) / Math.pow(10, decimalPrecision);
          const convertedClaimed = Number(user_claimed_reward) / Math.pow(10, decimalPrecision);
          acc[asset_coin_type].push({
            asset_id: address_1.pool[assetPoolKey].assetId.toString(),
            reward_id: address_1.pool[rewardPoolKey].assetId.toString(),
            reward_coin_type,
            user_claimable_reward: convertedClaimable,
            user_claimed_reward: convertedClaimed,
            rule_ids
          });
          return acc;
        }, {});
        if (prettyPrint) {
          console.log(`-- V3 Available Rewards --`);
          for (const [assetCoinType, rewards] of Object.entries(groupedRewards)) {
            const assetKey = (_a = getPriceFeedKey2(assetCoinType)) !== null && _a !== void 0 ? _a : assetCoinType;
            console.log(`Asset: ${assetKey}`);
            rewards.forEach((reward, idx) => {
              var _a2;
              const rewardKey = (_a2 = getPriceFeedKey2(reward.reward_coin_type)) !== null && _a2 !== void 0 ? _a2 : reward.reward_coin_type;
              console.log(`  ${idx + 1}. Reward Coin: ${rewardKey}, Claimable: ${reward.user_claimable_reward}, Claimed: ${reward.user_claimed_reward}`);
            });
          }
        }
        return groupedRewards;
      });
    }
    function claimRewardFunction(tx, rewardInfo) {
      return __awaiter2(this, void 0, void 0, function* () {
        const config = yield (0, address_1.getConfig)();
        let matchedRewardFund = null;
        for (const key of Object.keys(address_1.pool)) {
          const normalizedType = (0, utils_1.normalizeStructTag)(address_1.pool[key].type);
          const coinTypeWithoutHex = normalizedType.startsWith("0x") ? normalizedType.slice(2) : normalizedType;
          const rewardCoinTypeWithoutHex = rewardInfo.reward_coin_type.startsWith("0x") ? rewardInfo.reward_coin_type.slice(2) : rewardInfo.reward_coin_type;
          if (coinTypeWithoutHex === rewardCoinTypeWithoutHex) {
            matchedRewardFund = address_1.pool[key].rewardFundId;
            break;
          }
        }
        if (!matchedRewardFund) {
          console.log(`No matching rewardFund found for reward_coin_type: ${rewardInfo.reward_coin_type}`);
          return;
        } else {
          tx.moveCall({
            target: `${config.ProtocolPackage}::incentive_v3::claim_reward_entry`,
            arguments: [
              tx.object("0x06"),
              tx.object(config.IncentiveV3),
              tx.object(config.StorageId),
              tx.object(matchedRewardFund),
              tx.pure.vector("string", rewardInfo.asset_vector),
              tx.pure.vector("address", rewardInfo.rules_vector)
            ],
            typeArguments: [rewardInfo.reward_coin_type]
          });
        }
      });
    }
    function claimAllRewardsPTB(client, userAddress, existingTx) {
      return __awaiter2(this, void 0, void 0, function* () {
        const tx = existingTx !== null && existingTx !== void 0 ? existingTx : new transactions_1.Transaction();
        const groupedRewards = yield getAvailableRewardsWithoutOption(client, userAddress, false);
        if (!groupedRewards) {
          return tx;
        }
        const rewardMap = /* @__PURE__ */ new Map();
        for (const [poolId, rewards] of Object.entries(groupedRewards)) {
          for (const reward of rewards) {
            const { reward_coin_type: coinType, rule_ids: ruleIds } = reward;
            for (const ruleId of ruleIds) {
              if (!rewardMap.has(coinType)) {
                rewardMap.set(coinType, { assetIds: [], ruleIds: [] });
              }
              const group = rewardMap.get(coinType);
              group.assetIds.push(poolId);
              group.ruleIds.push(ruleId);
            }
          }
        }
        Array.from(rewardMap).map((_a) => __awaiter2(this, [_a], void 0, function* ([coinType, { assetIds, ruleIds }]) {
          const claimInput = {
            reward_coin_type: coinType,
            asset_vector: assetIds,
            rules_vector: ruleIds
          };
          yield claimRewardFunction(tx, claimInput);
        }));
        return tx;
      });
    }
    function filterRewardsByAssetId(groupedRewards, assetId) {
      const result = {};
      for (const assetCoinType in groupedRewards) {
        if (groupedRewards.hasOwnProperty(assetCoinType)) {
          const processedRewardsList = groupedRewards[assetCoinType];
          const filteredRewards = processedRewardsList.filter((reward) => reward.asset_id === assetId);
          if (filteredRewards.length > 0) {
            result[assetCoinType] = filteredRewards;
          }
        }
      }
      return result;
    }
    function claimRewardsByAssetIdPTB(client, userAddress, assetId, existingTx) {
      return __awaiter2(this, void 0, void 0, function* () {
        const tx = existingTx !== null && existingTx !== void 0 ? existingTx : new transactions_1.Transaction();
        const groupedRewards = yield getAvailableRewardsWithoutOption(client, userAddress, false);
        if (!groupedRewards) {
          return tx;
        }
        const filterGroupedRewards = filterRewardsByAssetId(groupedRewards, assetId.toString());
        const rewardMap = /* @__PURE__ */ new Map();
        for (const [poolId, rewards] of Object.entries(filterGroupedRewards)) {
          for (const reward of rewards) {
            const { reward_coin_type: coinType, rule_ids: ruleIds } = reward;
            for (const ruleId of ruleIds) {
              if (!rewardMap.has(coinType)) {
                rewardMap.set(coinType, { assetIds: [], ruleIds: [] });
              }
              const group = rewardMap.get(coinType);
              group.assetIds.push(poolId);
              group.ruleIds.push(ruleId);
            }
          }
        }
        Array.from(rewardMap).map((_a) => __awaiter2(this, [_a], void 0, function* ([coinType, { assetIds, ruleIds }]) {
          const claimInput = {
            reward_coin_type: coinType,
            asset_vector: assetIds,
            rules_vector: ruleIds
          };
          yield claimRewardFunction(tx, claimInput);
        }));
        return tx;
      });
    }
    function claimRewardResupplyFunction(tx, rewardInfo, userAddress) {
      return __awaiter2(this, void 0, void 0, function* () {
        const config = yield (0, address_1.getConfig)();
        let matchedRewardFund = null;
        let toPoolConfig = null;
        for (const key of Object.keys(address_1.pool)) {
          const normalizedType = (0, utils_1.normalizeStructTag)(address_1.pool[key].type);
          const coinTypeWithoutHex = normalizedType.startsWith("0x") ? normalizedType.slice(2) : normalizedType;
          const rewardCoinTypeWithoutHex = rewardInfo.reward_coin_type.startsWith("0x") ? rewardInfo.reward_coin_type.slice(2) : rewardInfo.reward_coin_type;
          if (coinTypeWithoutHex === rewardCoinTypeWithoutHex) {
            matchedRewardFund = address_1.pool[key].rewardFundId;
            toPoolConfig = address_1.pool[key];
            break;
          }
        }
        if (!matchedRewardFund || !toPoolConfig) {
          throw new Error(`No matching rewardFund found for reward_coin_type: ${rewardInfo.reward_coin_type}`);
        }
        const reward_balance = tx.moveCall({
          target: `${config.ProtocolPackage}::incentive_v3::claim_reward`,
          arguments: [
            tx.object("0x06"),
            tx.object(config.IncentiveV3),
            tx.object(config.StorageId),
            tx.object(matchedRewardFund),
            tx.pure.vector("string", rewardInfo.asset_vector),
            tx.pure.vector("address", rewardInfo.rules_vector)
          ],
          typeArguments: [toPoolConfig.type]
        });
        const [reward_coin] = tx.moveCall({
          target: "0x2::coin::from_balance",
          arguments: [reward_balance],
          typeArguments: [toPoolConfig.type]
        });
        if (address_1.noDepositCoinType.includes(rewardInfo.reward_coin_type)) {
          tx.transferObjects([reward_coin], userAddress);
        } else {
          const reward_coin_value = tx.moveCall({
            target: "0x2::coin::value",
            arguments: [reward_coin],
            typeArguments: [toPoolConfig.type]
          });
          yield (0, commonFunctions_1.depositCoin)(tx, toPoolConfig, reward_coin, reward_coin_value);
        }
      });
    }
    function claimAllRewardsResupplyPTB(client, userAddress, existingTx) {
      return __awaiter2(this, void 0, void 0, function* () {
        const tx = existingTx !== null && existingTx !== void 0 ? existingTx : new transactions_1.Transaction();
        const groupedRewards = yield getAvailableRewardsWithoutOption(client, userAddress, false);
        if (!groupedRewards) {
          return tx;
        }
        const rewardMap = /* @__PURE__ */ new Map();
        for (const [poolId, rewards] of Object.entries(groupedRewards)) {
          for (const reward of rewards) {
            const { reward_coin_type: coinType, rule_ids: ruleIds } = reward;
            for (const ruleId of ruleIds) {
              if (!rewardMap.has(coinType)) {
                rewardMap.set(coinType, { assetIds: [], ruleIds: [] });
              }
              const group = rewardMap.get(coinType);
              group.assetIds.push(poolId);
              group.ruleIds.push(ruleId);
            }
          }
        }
        Array.from(rewardMap).map((_a) => __awaiter2(this, [_a], void 0, function* ([coinType, { assetIds, ruleIds }]) {
          const claimInput = {
            reward_coin_type: coinType,
            asset_vector: assetIds,
            rules_vector: ruleIds
          };
          yield claimRewardResupplyFunction(tx, claimInput, userAddress);
        }));
        return tx;
      });
    }
    function getBorrowFee(client) {
      return __awaiter2(this, void 0, void 0, function* () {
        const protocolConfig = yield (0, address_1.getConfig)();
        const rawData = yield client.getObject({
          id: protocolConfig.IncentiveV3,
          options: { showType: true, showOwner: true, showContent: true }
        });
        const borrowFee = rawData.data.content.fields.borrow_fee_rate;
        return Number(borrowFee) / 100;
      });
    }
    function calculateRateSumAndCoins(rules, coinPriceMap) {
      return rules.reduce((acc, rule) => {
        var _a, _b, _c;
        const ruleRate = Number(rule.rate) / 1e27;
        const formattedRewardCoinType = formatCoinType(rule.rewardCoinType);
        const rewardPrice = ((_a = coinPriceMap[formattedRewardCoinType]) === null || _a === void 0 ? void 0 : _a.value) || 0;
        const rewardDecimal = Number((_b = coinPriceMap[formattedRewardCoinType]) === null || _b === void 0 ? void 0 : _b.decimals) || 9;
        if (rewardPrice === 0) {
          console.log(`No price data found for reward coin type: ${rule.rewardCoinType} (${formattedRewardCoinType})`);
        }
        if (!((_c = coinPriceMap[formattedRewardCoinType]) === null || _c === void 0 ? void 0 : _c.decimals)) {
          console.log(`No decimal data found for reward coin type: ${rule.rewardCoinType} (${formattedRewardCoinType})`);
        }
        acc.rateSum += ruleRate * rewardPrice / Math.pow(10, rewardDecimal);
        acc.rewardCoins.push(rule.rewardCoinType);
        return acc;
      }, { rateSum: 0, rewardCoins: [] });
    }
    function apyFormula(rateSum, totalValue) {
      if (totalValue <= 0)
        return 0;
      return rateSum * RATE_MULTIPLIER * SECONDS_PER_DAY * 365 * 100 / totalValue;
    }
    function calculateApy(groupedPools, reserves, coinPriceMap) {
      return __awaiter2(this, void 0, void 0, function* () {
        return groupedPools.map((group) => {
          var _a;
          const matchingReserve = reserves.find((r) => formatCoinType(r.coin_type) === formatCoinType(group.assetCoinType));
          if (!matchingReserve || !((_a = group.rules) === null || _a === void 0 ? void 0 : _a.length)) {
            return {
              asset: group.asset,
              assetCoinType: group.assetCoinType,
              supplyIncentiveApyInfo: { rewardCoin: [], apy: 0 },
              borrowIncentiveApyInfo: { rewardCoin: [], apy: 0 }
            };
          }
          const assetPrice = coinPriceMap[group.assetCoinType] || 0;
          const totalSupplyAmount = Number(matchingReserve.total_supply || 0);
          const borrowedAmount = Number(matchingReserve.total_borrow || 0);
          const enabledRules = group.rules.filter((rule) => rule.enable && rule.rate !== "0");
          const supplyRules = enabledRules.filter((r) => r.option === 1);
          const { rateSum: supplyRateSum, rewardCoins: supplyRewardCoins } = calculateRateSumAndCoins(supplyRules, coinPriceMap);
          const supplyApy = apyFormula(supplyRateSum, totalSupplyAmount / Math.pow(10, Number(9)) * assetPrice.value);
          const borrowRules = enabledRules.filter((r) => r.option === 3);
          const { rateSum: borrowRateSum, rewardCoins: borrowRewardCoins } = calculateRateSumAndCoins(borrowRules, coinPriceMap);
          const borrowApy = apyFormula(borrowRateSum, borrowedAmount / Math.pow(10, Number(9)) * assetPrice.value);
          return {
            asset: group.asset,
            assetCoinType: group.assetCoinType,
            supplyIncentiveApyInfo: {
              rewardCoin: supplyRewardCoins,
              apy: supplyApy
            },
            borrowIncentiveApyInfo: {
              rewardCoin: borrowRewardCoins,
              apy: borrowApy
            }
          };
        });
      });
    }
    function groupByAssetCoinType(incentiveData) {
      const groupedMap = /* @__PURE__ */ new Map();
      const rawPools = incentiveData.data.content.fields.pools.fields.contents;
      rawPools.forEach((poolEntry) => {
        var _a;
        const assetPool = poolEntry.fields.value.fields;
        const formattedCoinType = formatCoinType(assetPool.asset_coin_type);
        const assetPoolKey = getPoolKey(formattedCoinType);
        const { asset } = assetPool;
        const rulesList = assetPool.rules.fields.contents;
        if (!groupedMap.has(formattedCoinType)) {
          groupedMap.set(formattedCoinType, {
            asset,
            assetSymbol: ((_a = address_1.pool[assetPoolKey !== null && assetPoolKey !== void 0 ? assetPoolKey : ""]) === null || _a === void 0 ? void 0 : _a.name) || "",
            assetCoinType: formattedCoinType,
            rules: []
          });
        }
        const groupedPool = groupedMap.get(formattedCoinType);
        rulesList.forEach((ruleEntry) => {
          var _a2, _b;
          const rule = ruleEntry.fields.value.fields;
          const formattedRewardCoinType = formatCoinType(rule.reward_coin_type);
          const rewardPoolKey = getPoolKey(formattedRewardCoinType);
          const rewardPriceFeedKey = getPriceFeedKey(formattedRewardCoinType);
          groupedPool.rules.push({
            ruleId: rule.id.id,
            option: rule.option,
            optionType: rule.option === 1 ? "supply" : rule.option === 3 ? "borrow" : "",
            rewardCoinType: rule.reward_coin_type,
            rewardSymbol: rewardPoolKey && ((_a2 = address_1.pool[rewardPoolKey]) === null || _a2 === void 0 ? void 0 : _a2.name) || "",
            rewardDecimal: rewardPriceFeedKey && ((_b = address_1.PriceFeedConfig[rewardPriceFeedKey]) === null || _b === void 0 ? void 0 : _b.priceDecimal) || -1,
            rate: rule.rate,
            enable: rule.enable
          });
        });
      });
      return Array.from(groupedMap.values());
    }
    var mergeRewardCoins = (coins1, coins2) => {
      const addPrefix = (coin) => coin.startsWith("0x") ? coin : `0x${coin}`;
      return Array.from(/* @__PURE__ */ new Set([...coins1.map(addPrefix), ...coins2.map(addPrefix)]));
    };
    function mergeApyResults(v3ApyResults, v2SupplyApy, v2BorrowApy) {
      return __awaiter2(this, void 0, void 0, function* () {
        const calculateApyPercentage = (apyStr) => Number(apyStr) / 1e27 * 100;
        const getFormattedCoinType = (assetId) => {
          const poolValues = Object.values(address_1.pool);
          const poolEntry = poolValues.find((entry) => entry.assetId === assetId);
          if (!poolEntry)
            return "";
          return (0, utils_1.normalizeStructTag)(poolEntry.type);
        };
        const v2DataMap = /* @__PURE__ */ new Map();
        v2SupplyApy.forEach((supplyData) => {
          const computedApy = calculateApyPercentage(supplyData.apy);
          const existingData = v2DataMap.get(supplyData.asset_id) || {
            supply: { apy: 0, rewardCoin: [] },
            borrow: { apy: 0, rewardCoin: [] }
          };
          existingData.supply.apy += computedApy;
          existingData.supply.rewardCoin = mergeRewardCoins(existingData.supply.rewardCoin, supplyData.coin_types);
          v2DataMap.set(supplyData.asset_id, existingData);
        });
        v2BorrowApy.forEach((borrowData) => {
          const computedApy = calculateApyPercentage(borrowData.apy);
          const existingData = v2DataMap.get(borrowData.asset_id) || {
            supply: { apy: 0, rewardCoin: [] },
            borrow: { apy: 0, rewardCoin: [] }
          };
          existingData.borrow.apy += computedApy;
          existingData.borrow.rewardCoin = mergeRewardCoins(existingData.borrow.rewardCoin, borrowData.coin_types);
          v2DataMap.set(borrowData.asset_id, existingData);
        });
        const finalApyResultsMap = /* @__PURE__ */ new Map();
        v3ApyResults.forEach((v3Data) => {
          const addPrefixToCoins = (coins) => coins.map((coin) => coin.startsWith("0x") ? coin : `0x${coin}`);
          finalApyResultsMap.set(v3Data.asset, Object.assign(Object.assign({}, v3Data), { supplyIncentiveApyInfo: Object.assign(Object.assign({}, v3Data.supplyIncentiveApyInfo), { apy: Number(v3Data.supplyIncentiveApyInfo.apy.toFixed(4)), rewardCoin: addPrefixToCoins(v3Data.supplyIncentiveApyInfo.rewardCoin) }), borrowIncentiveApyInfo: Object.assign(Object.assign({}, v3Data.borrowIncentiveApyInfo), { apy: Number(v3Data.borrowIncentiveApyInfo.apy.toFixed(4)), rewardCoin: addPrefixToCoins(v3Data.borrowIncentiveApyInfo.rewardCoin) }), assetCoinType: getFormattedCoinType(v3Data.asset) }));
        });
        v2DataMap.forEach((v2Data, assetId) => {
          if (finalApyResultsMap.has(assetId)) {
            const existingApyData = finalApyResultsMap.get(assetId);
            existingApyData.supplyIncentiveApyInfo.apy = Number((existingApyData.supplyIncentiveApyInfo.apy + v2Data.supply.apy).toFixed(4));
            existingApyData.supplyIncentiveApyInfo.rewardCoin = mergeRewardCoins(existingApyData.supplyIncentiveApyInfo.rewardCoin, v2Data.supply.rewardCoin);
            existingApyData.borrowIncentiveApyInfo.apy = Number((existingApyData.borrowIncentiveApyInfo.apy + v2Data.borrow.apy).toFixed(4));
            existingApyData.borrowIncentiveApyInfo.rewardCoin = mergeRewardCoins(existingApyData.borrowIncentiveApyInfo.rewardCoin, v2Data.borrow.rewardCoin);
          } else {
            finalApyResultsMap.set(assetId, {
              asset: assetId,
              // Ensure coin type is formatted correctly, regardless of whether it's a new asset or not
              assetCoinType: getFormattedCoinType(assetId),
              supplyIncentiveApyInfo: Object.assign(Object.assign({}, v2Data.supply), { apy: Number(v2Data.supply.apy.toFixed(4)) }),
              borrowIncentiveApyInfo: Object.assign(Object.assign({}, v2Data.borrow), { apy: Number(v2Data.borrow.apy.toFixed(4)) })
            });
          }
        });
        return Array.from(finalApyResultsMap.values());
      });
    }
    function getCurrentRules(client) {
      return __awaiter2(this, void 0, void 0, function* () {
        const config = yield (0, address_1.getConfig)();
        const rawData = yield client.getObject({
          id: config.IncentiveV3,
          options: { showType: true, showOwner: true, showContent: true }
        });
        const incentiveData = rawData;
        const groupedPools = groupByAssetCoinType(incentiveData);
        const modifiedGroupedPools = groupedPools.map((pool) => ({
          asset: pool.asset,
          assetSymbol: pool.assetSymbol,
          assetCoinType: pool.assetCoinType,
          rules: pool.rules.map((rule) => ({
            ruleId: rule.ruleId,
            option: rule.option,
            optionType: rule.optionType,
            rewardSymbol: rule.rewardSymbol,
            rewardCoinType: `0x${rule.rewardCoinType}`,
            rate: rule.rate,
            ratePerWeek: rule.rewardDecimal === -1 ? null : Number(rule.rate) / 1e27 * RATE_MULTIPLIER * SECONDS_PER_DAY * 7 / Math.pow(10, Number(rule.rewardDecimal)),
            enable: rule.enable
          }))
        }));
        return modifiedGroupedPools;
      });
    }
    function getPoolApyInter(client) {
      return __awaiter2(this, void 0, void 0, function* () {
        const config = yield (0, address_1.getConfig)();
        const userAddress = "0xcda879cde94eeeae2dd6df58c9ededc60bcf2f7aedb79777e47d95b2cfb016c2";
        const [reserves, rawData, v2SupplyApy, v2BorrowApy] = yield Promise.all([
          (0, CallFunctions_1.getReserveData)(config.StorageId, client),
          client.getObject({
            id: config.IncentiveV3,
            options: { showType: true, showOwner: true, showContent: true }
          }),
          (0, CallFunctions_1.getIncentiveAPY)(userAddress, client, 1),
          (0, CallFunctions_1.getIncentiveAPY)(userAddress, client, 3)
        ]);
        const incentiveData = rawData;
        const groupedPools = groupByAssetCoinType(incentiveData);
        const coinTypeSet = /* @__PURE__ */ new Set();
        reserves.forEach((r) => {
          coinTypeSet.add(formatCoinType(r.coin_type));
        });
        groupedPools.forEach((group) => {
          coinTypeSet.add(group.assetCoinType);
          group.rules.forEach((rule) => {
            coinTypeSet.add(formatCoinType(rule.rewardCoinType));
          });
        });
        const coinTypes = Array.from(coinTypeSet);
        const coinPrices = yield (0, PoolInfo_1.fetchCoinPrices)(coinTypes, true);
        const coinPriceMap = (coinPrices === null || coinPrices === void 0 ? void 0 : coinPrices.reduce((map, price) => {
          map[formatCoinType(price.coinType)] = {
            value: price.value,
            decimals: price.decimals
          };
          return map;
        }, {})) || {};
        const v3Apy = yield calculateApy(groupedPools, reserves, coinPriceMap);
        return mergeApyResults(v3Apy, v2SupplyApy, v2BorrowApy);
      });
    }
    function getPoolsApyOuter(client, Token) {
      return __awaiter2(this, void 0, void 0, function* () {
        const config = yield (0, address_1.getConfig)();
        const userAddress = "0xcda879cde94eeeae2dd6df58c9ededc60bcf2f7aedb79777e47d95b2cfb016c2";
        const [reserves, rawData, v2SupplyApy, v2BorrowApy] = yield Promise.all([
          (0, CallFunctions_1.getReserveData)(config.StorageId, client),
          client.getObject({
            id: config.IncentiveV3,
            options: { showType: true, showOwner: true, showContent: true }
          }),
          (0, CallFunctions_1.getIncentiveAPY)(userAddress, client, 1),
          (0, CallFunctions_1.getIncentiveAPY)(userAddress, client, 3)
        ]);
        const incentiveData = rawData;
        const groupedPools = groupByAssetCoinType(incentiveData);
        const coinTypeSet = /* @__PURE__ */ new Set();
        reserves.forEach((r) => {
          coinTypeSet.add(formatCoinType(r.coin_type));
        });
        groupedPools.forEach((group) => {
          coinTypeSet.add(group.assetCoinType);
          group.rules.forEach((rule) => {
            coinTypeSet.add(formatCoinType(rule.rewardCoinType));
          });
        });
        const coinTypes = Array.from(coinTypeSet);
        const coinPrices = yield (0, PoolInfo_1.fetchCoinPrices)(coinTypes, false, Token);
        const coinPriceMap = (coinPrices === null || coinPrices === void 0 ? void 0 : coinPrices.reduce((map, price) => {
          map[formatCoinType(price.coinType)] = {
            value: price.value,
            decimals: price.decimals
          };
          return map;
        }, {})) || {};
        const v3Apy = yield calculateApy(groupedPools, reserves, coinPriceMap);
        return mergeApyResults(v3Apy, v2SupplyApy, v2BorrowApy);
      });
    }
    function addPrefixIfNeeded(address) {
      if (!address.startsWith("0x")) {
        return "0x" + address;
      }
      return address;
    }
    var transformPoolData = (data) => {
      return data.map((pool) => {
        var _a, _b;
        return {
          asset: pool.id,
          assetCoinType: addPrefixIfNeeded(pool.coinType),
          supplyIncentiveApyInfo: {
            rewardCoin: ((_a = pool.supplyIncentiveApyInfo) === null || _a === void 0 ? void 0 : _a.rewardCoin) || [],
            apy: parseFloat(pool.supplyIncentiveApyInfo.boostedApr)
          },
          borrowIncentiveApyInfo: {
            rewardCoin: ((_b = pool.borrowIncentiveApyInfo) === null || _b === void 0 ? void 0 : _b.rewardCoin) || [],
            apy: parseFloat(pool.borrowIncentiveApyInfo.boostedApr)
          }
        };
      });
    };
    function getPoolApy(client) {
      return __awaiter2(this, void 0, void 0, function* () {
        return (0, PoolInfo_1.getPoolsInfo)().then((data) => {
          if (data) {
            return transformPoolData(data);
          } else {
            return getPoolApyInter(client);
          }
        }).catch((error) => {
          console.error(error);
          throw error;
        });
      });
    }
    function getPoolsApy(client, Token) {
      return __awaiter2(this, void 0, void 0, function* () {
        return (0, PoolInfo_1.getPoolsInfo)().then((data) => {
          if (data) {
            return transformPoolData(data);
          } else {
            return getPoolsApyOuter(client, Token);
          }
        }).catch((error) => {
          console.error(error);
          throw error;
        });
      });
    }
  }
});

// node_modules/navi-sdk/dist/libs/PTB/V2.js
var require_V2 = __commonJS({
  "node_modules/navi-sdk/dist/libs/PTB/V2.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getIncentivePools = getIncentivePools;
    exports2.getAvailableRewards = getAvailableRewards;
    exports2.claimAllRewardsPTB = claimAllRewardsPTB;
    exports2.claimRewardsByAssetIdPTB = claimRewardsByAssetIdPTB;
    exports2.claimRewardFunction = claimRewardFunction;
    exports2.claimAllRewardsResupplyPTB = claimAllRewardsResupplyPTB;
    exports2.claimRewardResupplyFunction = claimRewardResupplyFunction;
    exports2.getIncentivePoolsByPhase = getIncentivePoolsByPhase;
    var transactions_1 = require_transactions();
    var address_1 = require_address();
    var utils_1 = require_utils6();
    var CallFunctions_1 = require_CallFunctions();
    var commonFunctions_1 = require_commonFunctions();
    var commonFunctions_2 = require_commonFunctions();
    function getIncentivePools(client, assetId, option, user) {
      return __awaiter2(this, void 0, void 0, function* () {
        const config = yield (0, address_1.getConfig)();
        const tx = new transactions_1.Transaction();
        const result = yield (0, CallFunctions_1.moveInspect)(
          tx,
          client,
          user,
          `${config.uiGetter}::incentive_getter::get_incentive_pools`,
          [
            tx.object("0x06"),
            // clock object id
            tx.object(config.IncentiveV2),
            // the incentive object v2
            tx.object(config.StorageId),
            // object id of storage
            tx.pure.u8(assetId),
            tx.pure.u8(option),
            tx.pure.address(user)
            // If you provide your address, the rewards that have been claimed by your address and the total rewards will be returned.
          ],
          [],
          // type arguments is null
          "vector<IncentivePoolInfo>"
          // parse type
        );
        return result[0];
      });
    }
    function getAvailableRewards(client_1, checkAddress_1) {
      return __awaiter2(this, arguments, void 0, function* (client, checkAddress, option = 1, prettyPrint = true) {
        (0, commonFunctions_1.registerStructs)();
        const assetIds = Array.from({ length: Number(Object.keys(address_1.pool).length) }, (_, i) => i);
        try {
          const incentivePools = yield Promise.all(assetIds.map((assetId) => getIncentivePools(client, assetId, option, checkAddress)));
          const allPools = incentivePools.flat();
          const activePools = allPools.filter((pool) => pool.available.trim() !== "0");
          const fundIds = [...new Set(activePools.map((item) => item.funds))];
          const funds = yield client.multiGetObjects({
            ids: fundIds,
            options: { showContent: true }
          });
          const fundDetails = funds.map((item) => {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j;
            return {
              funds: (_a = item === null || item === void 0 ? void 0 : item.data) === null || _a === void 0 ? void 0 : _a.objectId,
              reward_coin_type: (_f = (_e = (_d = (_c = (_b = item.data) === null || _b === void 0 ? void 0 : _b.content) === null || _c === void 0 ? void 0 : _c.fields) === null || _d === void 0 ? void 0 : _d.coin_type) === null || _e === void 0 ? void 0 : _e.fields) === null || _f === void 0 ? void 0 : _f.name,
              reward_coin_oracle_id: (_j = (_h = (_g = item.data) === null || _g === void 0 ? void 0 : _g.content) === null || _h === void 0 ? void 0 : _h.fields) === null || _j === void 0 ? void 0 : _j.oracle_id
            };
          });
          const mergedPools = activePools.map((pool) => {
            var _a, _b;
            const matchedFund = fundDetails.find((fund) => fund.funds === `0x${pool.funds}`);
            return Object.assign(Object.assign({}, pool), { reward_coin_type: (_a = matchedFund === null || matchedFund === void 0 ? void 0 : matchedFund.reward_coin_type) !== null && _a !== void 0 ? _a : null, reward_coin_oracle_id: (_b = matchedFund === null || matchedFund === void 0 ? void 0 : matchedFund.reward_coin_oracle_id) !== null && _b !== void 0 ? _b : null });
          });
          const priceFeedMap = Object.values(address_1.PriceFeedConfig).reduce((acc, feed) => {
            acc[feed.coinType] = feed.priceDecimal;
            return acc;
          }, {});
          const processedData = mergedPools.reduce((acc, pool) => {
            var _a, _b, _c, _d, _e;
            const priceDecimal = (_a = priceFeedMap[`0x${pool.reward_coin_type}`]) !== null && _a !== void 0 ? _a : null;
            const availableDecimal = priceDecimal !== null ? Number(BigInt(pool.available) / BigInt(Math.pow(10, 27))) / Math.pow(10, priceDecimal) : null;
            const assetId = parseInt(pool.asset_id, 10);
            const key = `${assetId}-${option}-${pool.reward_coin_type}`;
            if (acc[key]) {
              const existingAvailable = parseFloat(acc[key].available);
              const newAvailable = parseFloat((_b = availableDecimal === null || availableDecimal === void 0 ? void 0 : availableDecimal.toFixed(6)) !== null && _b !== void 0 ? _b : "0");
              acc[key].available = (existingAvailable + newAvailable).toFixed(6);
            } else {
              acc[key] = {
                asset_id: assetId,
                funds: pool.funds,
                available: (_c = availableDecimal === null || availableDecimal === void 0 ? void 0 : availableDecimal.toFixed(6)) !== null && _c !== void 0 ? _c : "0",
                reward_id: (_e = (_d = pool.reward_coin_oracle_id) === null || _d === void 0 ? void 0 : _d.toString()) !== null && _e !== void 0 ? _e : "",
                reward_coin_type: pool.reward_coin_type
              };
            }
            return acc;
          }, {});
          const assetSymbolMap = Object.values(address_1.pool).reduce((acc, poolConfig) => {
            acc[poolConfig.assetId.toString()] = poolConfig.name;
            return acc;
          }, {});
          const formattedData = Object.keys(processedData).reduce((acc, assetId) => {
            var _a;
            acc[assetId] = Object.assign(Object.assign({}, processedData[assetId]), { asset_symbol: (_a = assetSymbolMap[processedData[assetId].asset_id]) !== null && _a !== void 0 ? _a : null });
            return acc;
          }, {});
          if (prettyPrint) {
            console.log(`-- V2 available rewards --`);
            console.log(`address: ${checkAddress}`);
            Object.keys(formattedData).forEach((assetId) => {
              const assetData = formattedData[assetId];
              console.log(`Asset: ${assetData.asset_symbol}`);
              console.log(`  ${Object.keys(formattedData).indexOf(assetId) + 1}. Reward Coin: ${assetData.reward_coin_type}, Option: ${option}, Claimable: ${assetData.available}`);
            });
          }
          return formattedData;
        } catch (error) {
          console.error("Failed to get available rewards:", error);
          throw error;
        }
      });
    }
    function claimAllRewardsPTB(client, userToCheck, tx) {
      return __awaiter2(this, void 0, void 0, function* () {
        let txb = tx || new transactions_1.Transaction();
        const [rewardsBorrow, rewardsSupply] = yield Promise.all([
          getAvailableRewards(client, userToCheck, 3, false),
          getAvailableRewards(client, userToCheck, 1, false)
        ]);
        const borrowFunds = Object.values(rewardsBorrow).map((item) => item.funds);
        const supplyFunds = Object.values(rewardsSupply).map((item) => item.funds);
        const fundsIds = Array.from(/* @__PURE__ */ new Set([...borrowFunds, ...supplyFunds]));
        let oracleIds = [];
        fundsIds.forEach((fundId) => {
          if (address_1.ProFundsPoolInfo[fundId]) {
            oracleIds.push(address_1.ProFundsPoolInfo[fundId].oracleId);
          }
        });
        oracleIds = Array.from(/* @__PURE__ */ new Set([...oracleIds]));
        const coinPrice = yield (0, CallFunctions_1.getCoinOracleInfo)(client, oracleIds);
        const coinPriceMap = {};
        for (const item of coinPrice) {
          coinPriceMap[item.oracle_id] = {
            price: parseFloat(item.price) / Math.pow(10, item.decimals),
            decimals: item.decimals
          };
        }
        const rewardsArray = Object.values(rewardsSupply);
        for (const reward of rewardsArray) {
          const coinInfo = coinPriceMap[Number(reward.reward_id)];
          if (coinInfo) {
            const availableAmount = parseFloat(reward.available) * coinInfo.price;
            if (availableAmount >= 0.01) {
              yield claimRewardFunction(txb, reward.funds, reward.asset_id, 1);
            }
          }
        }
        const rewardsBorrowArray = Object.values(rewardsBorrow);
        for (const reward of rewardsBorrowArray) {
          const coinInfo = coinPriceMap[Number(reward.reward_id)];
          if (coinInfo) {
            const availableAmount = parseFloat(reward.available) * coinInfo.price;
            if (availableAmount >= 0.01) {
              yield claimRewardFunction(txb, reward.funds, reward.asset_id, 3);
            }
          }
        }
        return txb;
      });
    }
    function claimRewardsByAssetIdPTB(client, userToCheck, assetId, tx) {
      return __awaiter2(this, void 0, void 0, function* () {
        let txb = tx || new transactions_1.Transaction();
        const [rewardsBorrow, rewardsSupply] = yield Promise.all([
          getAvailableRewards(client, userToCheck, 3, false),
          getAvailableRewards(client, userToCheck, 1, false)
        ]);
        const rewardsArray = Object.values(rewardsSupply);
        for (const reward of rewardsArray) {
          if (reward.asset_id === assetId) {
            yield claimRewardFunction(txb, reward.funds, reward.asset_id, 1);
          }
        }
        const rewardsBorrowArray = Object.values(rewardsBorrow);
        for (const reward of rewardsBorrowArray) {
          if (reward.asset_id === assetId) {
            yield claimRewardFunction(txb, reward.funds, reward.asset_id, 3);
          }
        }
        return txb;
      });
    }
    function claimRewardFunction(txb, incentiveFundsPool, assetId, option) {
      return __awaiter2(this, void 0, void 0, function* () {
        const config = yield (0, address_1.getConfig)();
        txb.moveCall({
          target: `${config.ProtocolPackage}::incentive_v2::claim_reward`,
          arguments: [
            txb.object("0x06"),
            txb.object(config.IncentiveV2),
            txb.object(`0x${incentiveFundsPool}`),
            txb.object(config.StorageId),
            txb.pure.u8(assetId),
            txb.pure.u8(option)
          ],
          typeArguments: [address_1.ProFundsPoolInfo[incentiveFundsPool].coinType]
        });
      });
    }
    function claimAllRewardsResupplyPTB(client, userToCheck, tx) {
      return __awaiter2(this, void 0, void 0, function* () {
        let txb = tx || new transactions_1.Transaction();
        const [rewardsBorrow, rewardsSupply] = yield Promise.all([
          getAvailableRewards(client, userToCheck, 3, false),
          getAvailableRewards(client, userToCheck, 1, false)
        ]);
        const borrowFunds = Object.values(rewardsBorrow).map((item) => item.funds);
        const supplyFunds = Object.values(rewardsSupply).map((item) => item.funds);
        const fundsIds = Array.from(/* @__PURE__ */ new Set([...borrowFunds, ...supplyFunds]));
        let oracleIds = [];
        fundsIds.forEach((fundId) => {
          if (address_1.ProFundsPoolInfo[fundId]) {
            oracleIds.push(address_1.ProFundsPoolInfo[fundId].oracleId);
          }
        });
        oracleIds = Array.from(/* @__PURE__ */ new Set([...oracleIds]));
        const coinPrice = yield (0, CallFunctions_1.getCoinOracleInfo)(client, oracleIds);
        const coinPriceMap = {};
        for (const item of coinPrice) {
          coinPriceMap[item.oracle_id] = {
            price: parseFloat(item.price) / Math.pow(10, item.decimals),
            decimals: item.decimals
          };
        }
        const rewardsArray = Object.values(rewardsSupply);
        for (const reward of rewardsArray) {
          const coinInfo = coinPriceMap[Number(reward.reward_id)];
          if (coinInfo) {
            const availableAmount = parseFloat(reward.available) * coinInfo.price;
            if (availableAmount >= 0.01) {
              yield claimRewardResupplyFunction(txb, reward.funds, reward.asset_id, 1);
            }
          }
        }
        const rewardsBorrowArray = Object.values(rewardsBorrow);
        for (const reward of rewardsBorrowArray) {
          const coinInfo = coinPriceMap[Number(reward.reward_id)];
          if (coinInfo) {
            const availableAmount = parseFloat(reward.available) * coinInfo.price;
            if (availableAmount >= 0.01) {
              yield claimRewardResupplyFunction(txb, reward.funds, reward.asset_id, 3);
            }
          }
        }
        return txb;
      });
    }
    function claimRewardResupplyFunction(txb, incentiveFundsPool, assetId, option) {
      return __awaiter2(this, void 0, void 0, function* () {
        const config = yield (0, address_1.getConfig)();
        const reward_balance = txb.moveCall({
          target: `${config.ProtocolPackage}::incentive_v2::claim_reward_non_entry`,
          arguments: [
            txb.object("0x06"),
            txb.object(config.IncentiveV2),
            txb.object(`0x${incentiveFundsPool}`),
            txb.object(config.StorageId),
            txb.pure.u8(Number(assetId)),
            txb.pure.u8(option)
          ],
          typeArguments: [address_1.ProFundsPoolInfo[incentiveFundsPool].coinType]
        });
        const [reward_coin] = txb.moveCall({
          target: "0x2::coin::from_balance",
          arguments: [reward_balance],
          typeArguments: [address_1.ProFundsPoolInfo[incentiveFundsPool].coinType]
        });
        const reward_coin_value = txb.moveCall({
          target: "0x2::coin::value",
          arguments: [reward_coin],
          typeArguments: [address_1.ProFundsPoolInfo[incentiveFundsPool].coinType]
        });
        const foundPoolConfig = Object.values(address_1.pool).find((poolConfig) => (0, utils_1.normalizeStructTag)(poolConfig.type) === (0, utils_1.normalizeStructTag)(address_1.ProFundsPoolInfo[incentiveFundsPool].coinType));
        if (!foundPoolConfig) {
          throw new Error(`Pool configuration not found. incentiveFundsPool: ${incentiveFundsPool}, ProFundsPoolInfo: ${JSON.stringify(address_1.ProFundsPoolInfo === null || address_1.ProFundsPoolInfo === void 0 ? void 0 : address_1.ProFundsPoolInfo[incentiveFundsPool])}`);
        }
        yield (0, commonFunctions_2.depositCoin)(txb, foundPoolConfig, reward_coin, reward_coin_value);
      });
    }
    function getIncentivePoolsByPhase(client, option, user) {
      return __awaiter2(this, void 0, void 0, function* () {
        const config = yield (0, address_1.getConfig)();
        const tx = new transactions_1.Transaction();
        const result = yield (0, CallFunctions_1.moveInspect)(
          tx,
          client,
          user,
          `${config.uiGetter}::incentive_getter::get_incentive_pools_group_by_phase`,
          [
            tx.object("0x06"),
            // clock object id
            tx.object(config.IncentiveV2),
            // the incentive object v2
            tx.object(config.StorageId),
            // object id of storage
            tx.pure.u8(1),
            tx.pure.u8(option),
            tx.pure.address(user)
            // If you provide your address, the rewards that have been claimed by your address and the total rewards will be returned.
          ],
          [],
          // type arguments is null
          "vector<IncentivePoolInfoByPhase>"
          // parse type
        );
        return result[0];
      });
    }
  }
});

// node_modules/navi-sdk/dist/libs/PTB/commonFunctions.js
var require_commonFunctions = __commonJS({
  "node_modules/navi-sdk/dist/libs/PTB/commonFunctions.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports2 && exports2.__importStar || /* @__PURE__ */ function() {
      var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys(o);
      };
      return function(mod2) {
        if (mod2 && mod2.__esModule) return mod2;
        var result = {};
        if (mod2 != null) {
          for (var k = ownKeys(mod2), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding2(result, mod2, k[i]);
        }
        __setModuleDefault2(result, mod2);
        return result;
      };
    }();
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.depositCoin = depositCoin;
    exports2.depositCoinWithAccountCap = depositCoinWithAccountCap;
    exports2.withdrawCoin = withdrawCoin;
    exports2.withdrawCoinWithAccountCap = withdrawCoinWithAccountCap;
    exports2.borrowCoin = borrowCoin;
    exports2.repayDebt = repayDebt;
    exports2.getHealthFactorPTB = getHealthFactorPTB;
    exports2.returnMergedCoins = returnMergedCoins;
    exports2.flashloan = flashloan;
    exports2.repayFlashLoan = repayFlashLoan;
    exports2.liquidateFunction = liquidateFunction;
    exports2.SignAndSubmitTXB = SignAndSubmitTXB;
    exports2.stakeTovSuiPTB = stakeTovSuiPTB;
    exports2.unstakeTovSui = unstakeTovSui;
    exports2.getAvailableRewards = getAvailableRewards;
    exports2.claimAllRewardsPTB = claimAllRewardsPTB;
    exports2.claimRewardsByAssetIdPTB = claimRewardsByAssetIdPTB;
    exports2.claimAllRewardsResupplyPTB = claimAllRewardsResupplyPTB;
    exports2.updateOraclePTB = updateOraclePTB;
    exports2.registerStructs = registerStructs;
    var transactions_1 = require_transactions();
    var address_1 = require_address();
    var bcs_1 = require_bcs6();
    var pyth_sui_js_1 = require_lib4();
    var V3 = __importStar2(require_V3());
    var V2 = __importStar2(require_V2());
    function depositCoin(txb, _pool, coinObject, amount) {
      return __awaiter2(this, void 0, void 0, function* () {
        const config = yield (0, address_1.getConfig)();
        let amountObj;
        if (typeof amount === "number") {
          amountObj = txb.pure.u64(amount);
        } else {
          amountObj = amount;
        }
        txb.moveCall({
          target: `${config.ProtocolPackage}::incentive_v3::entry_deposit`,
          arguments: [
            txb.object("0x06"),
            // clock object id
            txb.object(config.StorageId),
            // object id of storage
            txb.object(_pool.poolId),
            // pool id of the asset
            txb.pure.u8(_pool.assetId),
            // the id of the asset in the protocol
            coinObject,
            // the object id of the Coin you own.
            amountObj,
            // The amount you want to deposit, decimals must be carried, like 1 sui => 1000000000
            txb.object(config.IncentiveV2),
            txb.object(config.IncentiveV3)
            // The incentive object v3
          ],
          typeArguments: [_pool.type]
        });
        return txb;
      });
    }
    function depositCoinWithAccountCap(txb, _pool, coinObject, account) {
      return __awaiter2(this, void 0, void 0, function* () {
        const config = yield (0, address_1.getConfig)();
        txb.moveCall({
          target: `${config.ProtocolPackage}::incentive_v3::deposit_with_account_cap`,
          arguments: [
            txb.object("0x06"),
            // clock object id
            txb.object(config.StorageId),
            // object id of storage
            txb.object(_pool.poolId),
            // pool id of the asset
            txb.pure.u8(_pool.assetId),
            // the id of the asset in the protocol
            coinObject,
            // the object id of the Coin you own.
            txb.object(config.IncentiveV2),
            txb.object(config.IncentiveV3),
            // The incentive object v3
            txb.object(account)
          ],
          typeArguments: [_pool.type]
        });
        return txb;
      });
    }
    function withdrawCoin(txb, _pool, amount) {
      return __awaiter2(this, void 0, void 0, function* () {
        const config = yield (0, address_1.getConfig)();
        const [ret] = txb.moveCall({
          target: `${config.ProtocolPackage}::incentive_v3::withdraw`,
          arguments: [
            txb.object("0x06"),
            // clock object id
            txb.object(config.PriceOracle),
            // object id of oracle
            txb.object(config.StorageId),
            // object id of storage
            txb.object(_pool.poolId),
            // pool id of the asset
            txb.pure.u8(_pool.assetId),
            // the id of the asset in the protocol
            txb.pure.u64(amount),
            // The amount you want to withdraw, decimals must be carried, like 1 sui => 1000000000
            txb.object(config.IncentiveV2),
            txb.object(config.IncentiveV3)
            // The incentive object v3
          ],
          typeArguments: [_pool.type]
        });
        const [coin] = txb.moveCall({
          target: `0x2::coin::from_balance`,
          arguments: [ret],
          typeArguments: [_pool.type]
        });
        return [coin];
      });
    }
    function withdrawCoinWithAccountCap(txb, _pool, account, withdrawAmount, sender) {
      return __awaiter2(this, void 0, void 0, function* () {
        const config = yield (0, address_1.getConfig)();
        const [ret] = txb.moveCall({
          target: `${config.ProtocolPackage}::incentive_v3::withdraw_with_account_cap`,
          arguments: [
            txb.sharedObjectRef({
              objectId: "0x06",
              initialSharedVersion: 1,
              mutable: false
            }),
            // clock object id
            txb.object(config.PriceOracle),
            // object id of oracle
            txb.object(config.StorageId),
            // object id of storage
            txb.object(_pool.poolId),
            // pool id of the asset
            txb.pure.u8(_pool.assetId),
            // the id of the asset in the protocol
            txb.pure.u64(withdrawAmount),
            // The amount you want to withdraw, decimals must be carried, like 1 sui => 1000000000
            txb.object(config.IncentiveV2),
            txb.object(config.IncentiveV3),
            // The incentive object v3
            txb.object(account)
          ],
          typeArguments: [_pool.type]
        });
        const [coin] = txb.moveCall({
          target: `0x2::coin::from_balance`,
          arguments: [txb.object(ret)],
          typeArguments: [_pool.type]
        });
        return [coin];
      });
    }
    function borrowCoin(txb, _pool, borrowAmount) {
      return __awaiter2(this, void 0, void 0, function* () {
        const config = yield (0, address_1.getConfig)();
        const [ret] = txb.moveCall({
          target: `${config.ProtocolPackage}::incentive_v3::borrow`,
          arguments: [
            txb.object("0x06"),
            // clock object id
            txb.object(config.PriceOracle),
            // object id of oracle
            txb.object(config.StorageId),
            // object id of storage
            txb.object(_pool.poolId),
            // pool id of the asset
            txb.pure.u8(_pool.assetId),
            // the id of the asset in the protocol
            txb.pure.u64(borrowAmount),
            // The amount you want to borrow, decimals must be carried, like 1 sui => 1000000000
            txb.object(config.IncentiveV2),
            // The incentive object v2
            txb.object(config.IncentiveV3)
            // The incentive object v3
          ],
          typeArguments: [_pool.type]
        });
        const [coin] = txb.moveCall({
          target: `0x2::coin::from_balance`,
          arguments: [txb.object(ret)],
          typeArguments: [_pool.type]
        });
        return [coin];
      });
    }
    function repayDebt(txb, _pool, coinObject, repayAmount) {
      return __awaiter2(this, void 0, void 0, function* () {
        const config = yield (0, address_1.getConfig)();
        let amountObj;
        if (typeof repayAmount === "number") {
          amountObj = txb.pure.u64(repayAmount);
        } else {
          amountObj = repayAmount;
        }
        txb.moveCall({
          target: `${config.ProtocolPackage}::incentive_v3::entry_repay`,
          arguments: [
            txb.object("0x06"),
            // clock object id
            txb.object(config.PriceOracle),
            // object id of oracle
            txb.object(config.StorageId),
            // object id of storage
            txb.object(_pool.poolId),
            // pool id of the asset
            txb.pure.u8(_pool.assetId),
            // the id of the asset in the protocol
            coinObject,
            // the object id of the Coin you own.
            amountObj,
            // The amount you want to borrow, decimals must be carried, like 1 sui => 1000000000
            txb.object(config.IncentiveV2),
            // The incentive object v2 
            txb.object(config.IncentiveV3)
            // The incentive object v3
          ],
          typeArguments: [_pool.type]
        });
        return txb;
      });
    }
    function getHealthFactorPTB(txb, address) {
      return __awaiter2(this, void 0, void 0, function* () {
        const config = yield (0, address_1.getConfig)();
        const balance = txb.moveCall({
          target: `${config.ProtocolPackage}::logic::user_health_factor`,
          arguments: [
            txb.object("0x06"),
            // clock object id
            txb.object(config.StorageId),
            // object id of storage
            txb.object(config.PriceOracle),
            // Object id of Price Oracle
            txb.pure.address(address)
          ]
        });
        return balance;
      });
    }
    function returnMergedCoins(txb, coinInfo) {
      if (coinInfo.data.length >= 2) {
        let baseObj = coinInfo.data[0].coinObjectId;
        let all_list = coinInfo.data.slice(1).map((coin) => coin.coinObjectId);
        txb.mergeCoins(baseObj, all_list);
      }
      let mergedCoinObject = txb.object(coinInfo.data[0].coinObjectId);
      return mergedCoinObject;
    }
    function flashloan(txb, _pool, amount) {
      return __awaiter2(this, void 0, void 0, function* () {
        const config = yield (0, address_1.getConfig)();
        const [balance, receipt] = txb.moveCall({
          target: `${config.ProtocolPackage}::lending::flash_loan_with_ctx`,
          arguments: [
            txb.object(address_1.flashloanConfig.id),
            // clock object id
            txb.object(_pool.poolId),
            // pool id of the asset
            txb.pure.u64(amount)
            // the id of the asset in the protocol
          ],
          typeArguments: [_pool.type]
        });
        return [balance, receipt];
      });
    }
    function repayFlashLoan(txb, _pool, receipt, repayCoin) {
      return __awaiter2(this, void 0, void 0, function* () {
        const config = yield (0, address_1.getConfig)();
        const [balance] = txb.moveCall({
          target: `${config.ProtocolPackage}::lending::flash_repay_with_ctx`,
          arguments: [
            txb.object("0x06"),
            // clock object id
            txb.object(config.StorageId),
            txb.object(_pool.poolId),
            // pool id of the asset
            receipt,
            repayCoin
            // the id of the asset in the protocol
          ],
          typeArguments: [_pool.type]
        });
        return [balance];
      });
    }
    function liquidateFunction(txb, payCoinType, payCoinObj, collateralCoinType, to_liquidate_address, to_liquidate_amount) {
      return __awaiter2(this, void 0, void 0, function* () {
        const pool_to_pay = address_1.pool[payCoinType.symbol];
        const collateral_pool = address_1.pool[collateralCoinType.symbol];
        const config = yield (0, address_1.getConfig)();
        const [collateralBalance, remainDebtBalance] = txb.moveCall({
          target: `${config.ProtocolPackage}::incentive_v3::liquidation`,
          arguments: [
            txb.object("0x06"),
            txb.object(config.PriceOracle),
            txb.object(config.StorageId),
            txb.pure.u8(pool_to_pay.assetId),
            txb.object(pool_to_pay.poolId),
            payCoinObj,
            txb.pure.u8(collateral_pool.assetId),
            txb.object(collateral_pool.poolId),
            txb.pure.address(to_liquidate_address),
            txb.object(config.IncentiveV2),
            txb.object(config.IncentiveV3)
          ],
          typeArguments: [pool_to_pay.type, collateral_pool.type]
        });
        return [collateralBalance, remainDebtBalance];
      });
    }
    function SignAndSubmitTXB(txb, client, keypair) {
      return __awaiter2(this, void 0, void 0, function* () {
        const result = yield client.signAndExecuteTransaction({
          transaction: txb,
          signer: keypair,
          requestType: "WaitForLocalExecution",
          options: {
            showEffects: true
          }
        });
        return result;
      });
    }
    function stakeTovSuiPTB(txb, suiCoinObj) {
      return __awaiter2(this, void 0, void 0, function* () {
        const [coin] = txb.moveCall({
          target: `${address_1.vSuiConfig.ProtocolPackage}::native_pool::stake_non_entry`,
          arguments: [
            txb.object(address_1.vSuiConfig.pool),
            txb.object(address_1.vSuiConfig.metadata),
            txb.object(address_1.vSuiConfig.wrapper),
            suiCoinObj
          ],
          typeArguments: []
        });
        return coin;
      });
    }
    function unstakeTovSui(txb, vSuiCoinObj) {
      return __awaiter2(this, void 0, void 0, function* () {
        const [coin] = txb.moveCall({
          target: `${address_1.vSuiConfig.ProtocolPackage}::native_pool::unstake`,
          arguments: [
            txb.object(address_1.vSuiConfig.pool),
            txb.object(address_1.vSuiConfig.metadata),
            txb.object(address_1.vSuiConfig.wrapper),
            vSuiCoinObj
          ],
          typeArguments: []
        });
        return coin;
      });
    }
    function getAvailableRewards(client_1, checkAddress_1, contractOptionTypes_1) {
      return __awaiter2(this, arguments, void 0, function* (client, checkAddress, contractOptionTypes, prettyPrint = true, includeV2 = false) {
        const v2Promises = [];
        if (includeV2 && contractOptionTypes.includes(1)) {
          v2Promises.push(V2.getAvailableRewards(client, checkAddress, 1, prettyPrint));
        } else {
          v2Promises.push(Promise.resolve(null));
        }
        if (includeV2 && contractOptionTypes.includes(3)) {
          v2Promises.push(V2.getAvailableRewards(client, checkAddress, 3, prettyPrint));
        } else {
          v2Promises.push(Promise.resolve(null));
        }
        const v3Promise = V3.getAvailableRewards(client, checkAddress, prettyPrint);
        const [v2DataOpt1, v2DataOpt3, v3Data] = yield Promise.all([
          v2Promises[0],
          v2Promises[1],
          v3Promise
        ]);
        const agg = /* @__PURE__ */ new Map();
        const processV2Data = (v2Data, rewardType) => {
          if (!v2Data)
            return;
          for (const [assetIdKey, entry] of Object.entries(v2Data)) {
            const assetId = parseInt(entry.asset_id, 10);
            const value = parseFloat(entry.available);
            if (agg.has(assetIdKey)) {
              agg.get(assetIdKey).total += value;
            } else {
              agg.set(assetIdKey, { assetId, rewardType, coinType: entry.reward_coin_type, total: value });
            }
          }
        };
        processV2Data(v2DataOpt1, 1);
        processV2Data(v2DataOpt3, 3);
        if (v3Data) {
          for (const entries of Object.values(v3Data)) {
            for (const entry of entries) {
              if (!contractOptionTypes.includes(entry.option))
                continue;
              const assetId = parseInt(entry.asset_id, 10);
              const rewardType = entry.option;
              const key = `${assetId}-${rewardType}-${entry.reward_coin_type}`;
              if (agg.has(key)) {
                agg.get(key).total += entry.user_claimable_reward;
              } else {
                agg.set(key, { assetId, rewardType, coinType: entry.reward_coin_type, total: entry.user_claimable_reward });
              }
            }
          }
        }
        const groupMap = /* @__PURE__ */ new Map();
        for (const { assetId, rewardType, coinType, total } of agg.values()) {
          const groupKey = `${assetId}-${rewardType}`;
          if (!groupMap.has(groupKey)) {
            groupMap.set(groupKey, { assetId, rewardType, rewards: /* @__PURE__ */ new Map() });
          }
          const rewardMap = groupMap.get(groupKey);
          rewardMap.rewards.set(coinType, (rewardMap.rewards.get(coinType) || 0) + total);
        }
        return Array.from(groupMap.values()).map((group) => ({
          assetId: group.assetId,
          rewardType: group.rewardType,
          rewards: Array.from(group.rewards.entries()).map(([coinType, available]) => ({
            coinType,
            available: available.toFixed(6)
          }))
        }));
      });
    }
    function claimAllRewardsPTB(client, userToCheck, existingTx) {
      return __awaiter2(this, void 0, void 0, function* () {
        let tx = existingTx || new transactions_1.Transaction();
        yield V3.claimAllRewardsPTB(client, userToCheck, tx);
        return tx;
      });
    }
    function claimRewardsByAssetIdPTB(client, userToCheck, assetId, existingTx) {
      return __awaiter2(this, void 0, void 0, function* () {
        let tx = existingTx || new transactions_1.Transaction();
        yield V3.claimRewardsByAssetIdPTB(client, userToCheck, assetId, tx);
        return tx;
      });
    }
    function claimAllRewardsResupplyPTB(client, userToCheck, existingTx) {
      return __awaiter2(this, void 0, void 0, function* () {
        let tx = existingTx || new transactions_1.Transaction();
        yield V3.claimAllRewardsResupplyPTB(client, userToCheck, tx);
        return tx;
      });
    }
    var suiPythConnection = new pyth_sui_js_1.SuiPriceServiceConnection("https://hermes.pyth.network", { timeout: 2e4 });
    function getPythStalePriceFeedId(priceIds) {
      return __awaiter2(this, void 0, void 0, function* () {
        try {
          const returnData = [];
          const latestPriceFeeds = yield suiPythConnection.getLatestPriceFeeds(priceIds);
          if (!latestPriceFeeds)
            return returnData;
          const currentTimestamp = Math.floor((/* @__PURE__ */ new Date()).valueOf() / 1e3);
          for (const priceFeed of latestPriceFeeds) {
            const uncheckedPrice = priceFeed.getPriceUnchecked();
            if (uncheckedPrice.publishTime > currentTimestamp) {
              console.warn(`pyth price feed is invalid, id: ${priceFeed.id}, publish time: ${uncheckedPrice.publishTime}, current timestamp: ${currentTimestamp}`);
              continue;
            }
            if (currentTimestamp - priceFeed.getPriceUnchecked().publishTime > 30) {
              console.info(`stale price feed, id: ${priceFeed.id}, publish time: ${uncheckedPrice.publishTime}, current timestamp: ${currentTimestamp}`);
              returnData.push(priceFeed.id);
            }
          }
          return returnData;
        } catch (error) {
          throw new Error(`failed to get pyth stale price feed id, msg: ${error.message}`);
        }
      });
    }
    function updateSinglePrice(txb, input) {
      txb.moveCall({
        target: `${address_1.OracleProConfig.PackageId}::oracle_pro::update_single_price`,
        arguments: [
          txb.object("0x6"),
          txb.object(address_1.OracleProConfig.OracleConfig),
          txb.object(address_1.OracleProConfig.PriceOracle),
          txb.object(address_1.OracleProConfig.SupraOracleHolder),
          txb.object(input.pythPriceInfoObject),
          txb.pure.address(input.feedId)
        ]
      });
    }
    function updatePythPriceFeeds(client, txb, priceFeedIds) {
      return __awaiter2(this, void 0, void 0, function* () {
        try {
          const priceUpdateData = yield suiPythConnection.getPriceFeedsUpdateData(priceFeedIds);
          const suiPythClient = new pyth_sui_js_1.SuiPythClient(client, address_1.OracleProConfig.PythStateId, address_1.OracleProConfig.WormholeStateId);
          return yield suiPythClient.updatePriceFeeds(txb, priceUpdateData, priceFeedIds);
        } catch (error) {
          throw new Error(`failed to update pyth price feeds, msg: ${error.message}`);
        }
      });
    }
    function updateOraclePTB(client, txb) {
      return __awaiter2(this, void 0, void 0, function* () {
        const pythPriceFeedIds = Object.keys(address_1.PriceFeedConfig).map((key) => address_1.PriceFeedConfig[key].pythPriceFeedId);
        const stalePriceFeedIds = yield getPythStalePriceFeedId(pythPriceFeedIds);
        if (stalePriceFeedIds.length > 0) {
          yield updatePythPriceFeeds(client, txb, stalePriceFeedIds);
          console.info(`request update pyth price feed, ids: ${stalePriceFeedIds}`);
        }
        updateSinglePrice(txb, address_1.PriceFeedConfig.SUI);
        updateSinglePrice(txb, address_1.PriceFeedConfig.WUSDC);
        updateSinglePrice(txb, address_1.PriceFeedConfig.USDT);
        updateSinglePrice(txb, address_1.PriceFeedConfig.WETH);
        updateSinglePrice(txb, address_1.PriceFeedConfig.CETUS);
        updateSinglePrice(txb, address_1.PriceFeedConfig.CERT);
        updateSinglePrice(txb, address_1.PriceFeedConfig.HASUI);
        updateSinglePrice(txb, address_1.PriceFeedConfig.NAVX);
        updateSinglePrice(txb, address_1.PriceFeedConfig.WBTC);
        updateSinglePrice(txb, address_1.PriceFeedConfig.AUSD);
        updateSinglePrice(txb, address_1.PriceFeedConfig.NUSDC);
        updateSinglePrice(txb, address_1.PriceFeedConfig.ETH);
        updateSinglePrice(txb, address_1.PriceFeedConfig.USDY);
        updateSinglePrice(txb, address_1.PriceFeedConfig.NS);
        updateSinglePrice(txb, address_1.PriceFeedConfig.LORENZOBTC);
        updateSinglePrice(txb, address_1.PriceFeedConfig.DEEP);
        updateSinglePrice(txb, address_1.PriceFeedConfig.FDUSD);
        updateSinglePrice(txb, address_1.PriceFeedConfig.BLUE);
        updateSinglePrice(txb, address_1.PriceFeedConfig.BUCK);
        updateSinglePrice(txb, address_1.PriceFeedConfig.SUIUSDT);
        updateSinglePrice(txb, address_1.PriceFeedConfig.STSUI);
        updateSinglePrice(txb, address_1.PriceFeedConfig.SUIBTC);
        updateSinglePrice(txb, address_1.PriceFeedConfig.WSOL);
        updateSinglePrice(txb, address_1.PriceFeedConfig.LBTC);
        updateSinglePrice(txb, address_1.PriceFeedConfig.WAL);
      });
    }
    function registerStructs() {
      bcs_1.bcs.registerStructType("IncentiveAPYInfo", {
        asset_id: "u8",
        apy: "u256",
        coin_types: "vector<string>"
      });
      bcs_1.bcs.registerStructType("IncentivePoolInfo", {
        pool_id: "address",
        funds: "address",
        phase: "u64",
        start_at: "u64",
        end_at: "u64",
        closed_at: "u64",
        total_supply: "u64",
        asset_id: "u8",
        option: "u8",
        factor: "u256",
        distributed: "u64",
        available: "u256",
        total: "u256"
      });
      bcs_1.bcs.registerStructType("IncentivePoolInfoByPhase", {
        phase: "u64",
        pools: "vector<IncentivePoolInfo>"
      });
      bcs_1.bcs.registerStructType("UserStateInfo", {
        asset_id: "u8",
        borrow_balance: "u256",
        supply_balance: "u256"
      });
      bcs_1.bcs.registerStructType("ReserveDataInfo", {
        id: "u8",
        oracle_id: "u8",
        coin_type: "string",
        supply_cap: "u256",
        borrow_cap: "u256",
        supply_rate: "u256",
        borrow_rate: "u256",
        supply_index: "u256",
        borrow_index: "u256",
        total_supply: "u256",
        total_borrow: "u256",
        last_update_at: "u64",
        ltv: "u256",
        treasury_factor: "u256",
        treasury_balance: "u256",
        base_rate: "u256",
        multiplier: "u256",
        jump_rate_multiplier: "u256",
        reserve_factor: "u256",
        optimal_utilization: "u256",
        liquidation_ratio: "u256",
        liquidation_bonus: "u256",
        liquidation_threshold: "u256"
      });
      bcs_1.bcs.registerStructType("OracleInfo", {
        oracle_id: "u8",
        price: "u256",
        decimals: "u8",
        valid: "bool"
      });
    }
  }
});

// node_modules/navi-sdk/dist/libs/Aggregator/config.js
var require_config = __commonJS({
  "node_modules/navi-sdk/dist/libs/Aggregator/config.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AggregatorConfig = void 0;
    exports2.updateConfig = updateConfig;
    exports2.AggregatorConfig = {
      aggregatorBaseUrl: "https://open-aggregator-api.naviprotocol.io/find_routes",
      aggregatorContract: "0x5b7d732adeb3140a2dbf2becd1e9dbe56cee0e3687379bcfe7df4357ea664313",
      cetusPackageId: "0xc6faf3703b0e8ba9ed06b7851134bbbe7565eb35ff823fd78432baa4cbeaa12e",
      cetusConfigId: "0xdaa46292632c3c4d8f31f23ea0f9b36a28ff3677e9684980e4438403a67a3d8f",
      turbosPackageId: "0x9df4666296ee324a6f11e9f664e35e7fd6b6e8c9e9058ce6ee9ad5c5343c2f87",
      kriyaV3Version: "0xf5145a7ac345ca8736cf8c76047d00d6d378f30e81be6f6eb557184d9de93c78",
      kriyaV3PackageId: "0xbd8d4489782042c6fafad4de4bc6a5e0b84a43c6c00647ffd7062d1e2bb7549e",
      kriyaV2PackageId: "0xa0eba10b173538c8fecca1dff298e488402cc9ff374f8a12ca7758eebe830b66",
      clockAddress: "0x6",
      aftermathPackageId: "0xc4049b2d1cc0f6e017fda8260e4377cecd236bd7f56a54fee120816e72e2e0dd",
      aftermathPoolRegistry: "0xfcc774493db2c45c79f688f88d28023a3e7d98e4ee9f48bbf5c7990f651577ae",
      aftermathFeeVault: "0xf194d9b1bcad972e45a7dd67dd49b3ee1e3357a00a50850c52cd51bb450e13b4",
      aftermathTreasury: "0x28e499dff5e864a2eafe476269a4f5035f1c16f338da7be18b103499abf271ce",
      aftermathInsuranceFund: "0xf0c40d67b078000e18032334c3325c47b9ec9f3d9ae4128be820d54663d14e3b",
      aftermathReferralVault: "0x35d35b0e5b177593d8c3a801462485572fc30861e6ce96a55af6dc4730709278",
      deepbookPackageId: "0x2c8d603bc51326b8c13cef9dd07031a408a48dddb541963357661df5d3204809",
      deepSponsoredPackageId: "0x5871cfe2f6a5e432caea0a894aa51fc423fba798dfed540859abdf17ecc61219",
      deepSponsoredPoolConfig: "0x0b5e88bb54746b94bc5c7912f279cba30e0c4bd0241b935ba1d0d0c032218b6f",
      deepTokenAddress: "0xdeeb7a4662eec9f2f3def03fb937a663dddaa2e215b8078a284d026b7946c270::deep::DEEP",
      bluefinPackageId: "0x6c796c3ab3421a68158e0df18e4657b2827b1f8fed5ed4b82dba9c935988711b",
      bluefinGlobalConfig: "0x03db251ba509a8d5d8777b6338836082335d93eecbdd09a11e190a1cff51c352",
      vSuiPackageId: "0x549e8b69270defbfafd4f94e17ec44cdbdd99820b33bda2278dea3b9a32d3f55",
      haSuiPackageId: "0x3f45767c1aa95b25422f675800f02d8a813ec793a00b60667d071a77ba7178a2",
      haSuiConfigId: "0x47b224762220393057ebf4f70501b6e657c3e56684737568439a04f80849b2ca",
      magmaPackageId: "0x2e704d8afc1d6d7f154dee337cc14c153f6f9ce1708213e5dc04a32afe0e45f1",
      magmaConfigId: "0x4c4e1402401f72c7d8533d0ed8d5f8949da363c7a3319ccef261ffe153d32f8a"
    };
    function updateConfig(newConfig) {
      Object.assign(exports2.AggregatorConfig, newConfig);
    }
  }
});

// node_modules/navi-sdk/dist/libs/Aggregator/getQuote.js
var require_getQuote = __commonJS({
  "node_modules/navi-sdk/dist/libs/Aggregator/getQuote.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault2 = exports2 && exports2.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getQuote = getQuote;
    var axios_1 = __importDefault2(require_axios());
    var config_1 = require_config();
    function getQuote(fromCoinAddress, toCoinAddress, amountIn, apiKey, swapOptions) {
      return __awaiter2(this, void 0, void 0, function* () {
        swapOptions = Object.assign({ baseUrl: void 0, dexList: [], byAmountIn: true, depth: 3 }, swapOptions);
        let baseUrl = config_1.AggregatorConfig.aggregatorBaseUrl;
        if (swapOptions.baseUrl) {
          baseUrl = swapOptions.baseUrl;
        }
        const params = new URLSearchParams({
          from: fromCoinAddress,
          target: toCoinAddress,
          amount: (typeof amountIn === "bigint" ? Number(amountIn) : amountIn).toString(),
          by_amount_in: (swapOptions === null || swapOptions === void 0 ? void 0 : swapOptions.byAmountIn) !== void 0 ? swapOptions.byAmountIn.toString() : "true",
          depth: (swapOptions === null || swapOptions === void 0 ? void 0 : swapOptions.depth) !== void 0 ? swapOptions.depth.toString() : "3",
          version: "2"
        }).toString();
        let dexString = "";
        if ((swapOptions === null || swapOptions === void 0 ? void 0 : swapOptions.dexList) && swapOptions.dexList.length > 0) {
          dexString = swapOptions.dexList.map((dex) => `providers=${dex}`).join("&");
        }
        const fullParams = dexString ? `${params}&${dexString}` : params;
        try {
          const axiosConfig = apiKey ? { headers: { "x-navi-token": apiKey } } : {};
          const { data } = yield axios_1.default.get(`${baseUrl}?${fullParams}`, axiosConfig);
          if (!data) {
            throw new Error("No data returned from the API.");
          }
          data.data.from = fromCoinAddress;
          data.data.target = toCoinAddress;
          return data.data;
        } catch (error) {
          console.error(`Error fetching routes from ${config_1.AggregatorConfig.aggregatorBaseUrl} with params ${JSON.stringify(params)}:`, error.message);
          throw error;
        }
      });
    }
  }
});

// node_modules/bignumber.js/bignumber.js
var require_bignumber = __commonJS({
  "node_modules/bignumber.js/bignumber.js"(exports2, module2) {
    (function(globalObject) {
      "use strict";
      var BigNumber, isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i, mathceil = Math.ceil, mathfloor = Math.floor, bignumberError = "[BigNumber Error] ", tooManyDigits = bignumberError + "Number primitive has more than 15 significant digits: ", BASE = 1e14, LOG_BASE = 14, MAX_SAFE_INTEGER = 9007199254740991, POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13], SQRT_BASE = 1e7, MAX = 1e9;
      function clone(configObject) {
        var div, convertBase, parseNumeric, P = BigNumber2.prototype = { constructor: BigNumber2, toString: null, valueOf: null }, ONE = new BigNumber2(1), DECIMAL_PLACES = 20, ROUNDING_MODE = 4, TO_EXP_NEG = -7, TO_EXP_POS = 21, MIN_EXP = -1e7, MAX_EXP = 1e7, CRYPTO = false, MODULO_MODE = 1, POW_PRECISION = 0, FORMAT = {
          prefix: "",
          groupSize: 3,
          secondaryGroupSize: 0,
          groupSeparator: ",",
          decimalSeparator: ".",
          fractionGroupSize: 0,
          fractionGroupSeparator: " ",
          // non-breaking space
          suffix: ""
        }, ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyz", alphabetHasNormalDecimalDigits = true;
        function BigNumber2(v, b) {
          var alphabet, c, caseChanged, e, i, isNum, len, str, x = this;
          if (!(x instanceof BigNumber2)) return new BigNumber2(v, b);
          if (b == null) {
            if (v && v._isBigNumber === true) {
              x.s = v.s;
              if (!v.c || v.e > MAX_EXP) {
                x.c = x.e = null;
              } else if (v.e < MIN_EXP) {
                x.c = [x.e = 0];
              } else {
                x.e = v.e;
                x.c = v.c.slice();
              }
              return;
            }
            if ((isNum = typeof v == "number") && v * 0 == 0) {
              x.s = 1 / v < 0 ? (v = -v, -1) : 1;
              if (v === ~~v) {
                for (e = 0, i = v; i >= 10; i /= 10, e++) ;
                if (e > MAX_EXP) {
                  x.c = x.e = null;
                } else {
                  x.e = e;
                  x.c = [v];
                }
                return;
              }
              str = String(v);
            } else {
              if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);
              x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
            }
            if ((e = str.indexOf(".")) > -1) str = str.replace(".", "");
            if ((i = str.search(/e/i)) > 0) {
              if (e < 0) e = i;
              e += +str.slice(i + 1);
              str = str.substring(0, i);
            } else if (e < 0) {
              e = str.length;
            }
          } else {
            intCheck(b, 2, ALPHABET.length, "Base");
            if (b == 10 && alphabetHasNormalDecimalDigits) {
              x = new BigNumber2(v);
              return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
            }
            str = String(v);
            if (isNum = typeof v == "number") {
              if (v * 0 != 0) return parseNumeric(x, str, isNum, b);
              x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;
              if (BigNumber2.DEBUG && str.replace(/^0\.0*|\./, "").length > 15) {
                throw Error(tooManyDigits + v);
              }
            } else {
              x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
            }
            alphabet = ALPHABET.slice(0, b);
            e = i = 0;
            for (len = str.length; i < len; i++) {
              if (alphabet.indexOf(c = str.charAt(i)) < 0) {
                if (c == ".") {
                  if (i > e) {
                    e = len;
                    continue;
                  }
                } else if (!caseChanged) {
                  if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {
                    caseChanged = true;
                    i = -1;
                    e = 0;
                    continue;
                  }
                }
                return parseNumeric(x, String(v), isNum, b);
              }
            }
            isNum = false;
            str = convertBase(str, b, 10, x.s);
            if ((e = str.indexOf(".")) > -1) str = str.replace(".", "");
            else e = str.length;
          }
          for (i = 0; str.charCodeAt(i) === 48; i++) ;
          for (len = str.length; str.charCodeAt(--len) === 48; ) ;
          if (str = str.slice(i, ++len)) {
            len -= i;
            if (isNum && BigNumber2.DEBUG && len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {
              throw Error(tooManyDigits + x.s * v);
            }
            if ((e = e - i - 1) > MAX_EXP) {
              x.c = x.e = null;
            } else if (e < MIN_EXP) {
              x.c = [x.e = 0];
            } else {
              x.e = e;
              x.c = [];
              i = (e + 1) % LOG_BASE;
              if (e < 0) i += LOG_BASE;
              if (i < len) {
                if (i) x.c.push(+str.slice(0, i));
                for (len -= LOG_BASE; i < len; ) {
                  x.c.push(+str.slice(i, i += LOG_BASE));
                }
                i = LOG_BASE - (str = str.slice(i)).length;
              } else {
                i -= len;
              }
              for (; i--; str += "0") ;
              x.c.push(+str);
            }
          } else {
            x.c = [x.e = 0];
          }
        }
        BigNumber2.clone = clone;
        BigNumber2.ROUND_UP = 0;
        BigNumber2.ROUND_DOWN = 1;
        BigNumber2.ROUND_CEIL = 2;
        BigNumber2.ROUND_FLOOR = 3;
        BigNumber2.ROUND_HALF_UP = 4;
        BigNumber2.ROUND_HALF_DOWN = 5;
        BigNumber2.ROUND_HALF_EVEN = 6;
        BigNumber2.ROUND_HALF_CEIL = 7;
        BigNumber2.ROUND_HALF_FLOOR = 8;
        BigNumber2.EUCLID = 9;
        BigNumber2.config = BigNumber2.set = function(obj) {
          var p, v;
          if (obj != null) {
            if (typeof obj == "object") {
              if (obj.hasOwnProperty(p = "DECIMAL_PLACES")) {
                v = obj[p];
                intCheck(v, 0, MAX, p);
                DECIMAL_PLACES = v;
              }
              if (obj.hasOwnProperty(p = "ROUNDING_MODE")) {
                v = obj[p];
                intCheck(v, 0, 8, p);
                ROUNDING_MODE = v;
              }
              if (obj.hasOwnProperty(p = "EXPONENTIAL_AT")) {
                v = obj[p];
                if (v && v.pop) {
                  intCheck(v[0], -MAX, 0, p);
                  intCheck(v[1], 0, MAX, p);
                  TO_EXP_NEG = v[0];
                  TO_EXP_POS = v[1];
                } else {
                  intCheck(v, -MAX, MAX, p);
                  TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
                }
              }
              if (obj.hasOwnProperty(p = "RANGE")) {
                v = obj[p];
                if (v && v.pop) {
                  intCheck(v[0], -MAX, -1, p);
                  intCheck(v[1], 1, MAX, p);
                  MIN_EXP = v[0];
                  MAX_EXP = v[1];
                } else {
                  intCheck(v, -MAX, MAX, p);
                  if (v) {
                    MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
                  } else {
                    throw Error(bignumberError + p + " cannot be zero: " + v);
                  }
                }
              }
              if (obj.hasOwnProperty(p = "CRYPTO")) {
                v = obj[p];
                if (v === !!v) {
                  if (v) {
                    if (typeof crypto != "undefined" && crypto && (crypto.getRandomValues || crypto.randomBytes)) {
                      CRYPTO = v;
                    } else {
                      CRYPTO = !v;
                      throw Error(bignumberError + "crypto unavailable");
                    }
                  } else {
                    CRYPTO = v;
                  }
                } else {
                  throw Error(bignumberError + p + " not true or false: " + v);
                }
              }
              if (obj.hasOwnProperty(p = "MODULO_MODE")) {
                v = obj[p];
                intCheck(v, 0, 9, p);
                MODULO_MODE = v;
              }
              if (obj.hasOwnProperty(p = "POW_PRECISION")) {
                v = obj[p];
                intCheck(v, 0, MAX, p);
                POW_PRECISION = v;
              }
              if (obj.hasOwnProperty(p = "FORMAT")) {
                v = obj[p];
                if (typeof v == "object") FORMAT = v;
                else throw Error(bignumberError + p + " not an object: " + v);
              }
              if (obj.hasOwnProperty(p = "ALPHABET")) {
                v = obj[p];
                if (typeof v == "string" && !/^.?$|[+\-.\s]|(.).*\1/.test(v)) {
                  alphabetHasNormalDecimalDigits = v.slice(0, 10) == "0123456789";
                  ALPHABET = v;
                } else {
                  throw Error(bignumberError + p + " invalid: " + v);
                }
              }
            } else {
              throw Error(bignumberError + "Object expected: " + obj);
            }
          }
          return {
            DECIMAL_PLACES,
            ROUNDING_MODE,
            EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
            RANGE: [MIN_EXP, MAX_EXP],
            CRYPTO,
            MODULO_MODE,
            POW_PRECISION,
            FORMAT,
            ALPHABET
          };
        };
        BigNumber2.isBigNumber = function(v) {
          if (!v || v._isBigNumber !== true) return false;
          if (!BigNumber2.DEBUG) return true;
          var i, n, c = v.c, e = v.e, s = v.s;
          out: if ({}.toString.call(c) == "[object Array]") {
            if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {
              if (c[0] === 0) {
                if (e === 0 && c.length === 1) return true;
                break out;
              }
              i = (e + 1) % LOG_BASE;
              if (i < 1) i += LOG_BASE;
              if (String(c[0]).length == i) {
                for (i = 0; i < c.length; i++) {
                  n = c[i];
                  if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;
                }
                if (n !== 0) return true;
              }
            }
          } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {
            return true;
          }
          throw Error(bignumberError + "Invalid BigNumber: " + v);
        };
        BigNumber2.maximum = BigNumber2.max = function() {
          return maxOrMin(arguments, -1);
        };
        BigNumber2.minimum = BigNumber2.min = function() {
          return maxOrMin(arguments, 1);
        };
        BigNumber2.random = function() {
          var pow2_53 = 9007199254740992;
          var random53bitInt = Math.random() * pow2_53 & 2097151 ? function() {
            return mathfloor(Math.random() * pow2_53);
          } : function() {
            return (Math.random() * 1073741824 | 0) * 8388608 + (Math.random() * 8388608 | 0);
          };
          return function(dp) {
            var a, b, e, k, v, i = 0, c = [], rand = new BigNumber2(ONE);
            if (dp == null) dp = DECIMAL_PLACES;
            else intCheck(dp, 0, MAX);
            k = mathceil(dp / LOG_BASE);
            if (CRYPTO) {
              if (crypto.getRandomValues) {
                a = crypto.getRandomValues(new Uint32Array(k *= 2));
                for (; i < k; ) {
                  v = a[i] * 131072 + (a[i + 1] >>> 11);
                  if (v >= 9e15) {
                    b = crypto.getRandomValues(new Uint32Array(2));
                    a[i] = b[0];
                    a[i + 1] = b[1];
                  } else {
                    c.push(v % 1e14);
                    i += 2;
                  }
                }
                i = k / 2;
              } else if (crypto.randomBytes) {
                a = crypto.randomBytes(k *= 7);
                for (; i < k; ) {
                  v = (a[i] & 31) * 281474976710656 + a[i + 1] * 1099511627776 + a[i + 2] * 4294967296 + a[i + 3] * 16777216 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];
                  if (v >= 9e15) {
                    crypto.randomBytes(7).copy(a, i);
                  } else {
                    c.push(v % 1e14);
                    i += 7;
                  }
                }
                i = k / 7;
              } else {
                CRYPTO = false;
                throw Error(bignumberError + "crypto unavailable");
              }
            }
            if (!CRYPTO) {
              for (; i < k; ) {
                v = random53bitInt();
                if (v < 9e15) c[i++] = v % 1e14;
              }
            }
            k = c[--i];
            dp %= LOG_BASE;
            if (k && dp) {
              v = POWS_TEN[LOG_BASE - dp];
              c[i] = mathfloor(k / v) * v;
            }
            for (; c[i] === 0; c.pop(), i--) ;
            if (i < 0) {
              c = [e = 0];
            } else {
              for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE) ;
              for (i = 1, v = c[0]; v >= 10; v /= 10, i++) ;
              if (i < LOG_BASE) e -= LOG_BASE - i;
            }
            rand.e = e;
            rand.c = c;
            return rand;
          };
        }();
        BigNumber2.sum = function() {
          var i = 1, args = arguments, sum = new BigNumber2(args[0]);
          for (; i < args.length; ) sum = sum.plus(args[i++]);
          return sum;
        };
        convertBase = /* @__PURE__ */ function() {
          var decimal = "0123456789";
          function toBaseOut(str, baseIn, baseOut, alphabet) {
            var j, arr = [0], arrL, i = 0, len = str.length;
            for (; i < len; ) {
              for (arrL = arr.length; arrL--; arr[arrL] *= baseIn) ;
              arr[0] += alphabet.indexOf(str.charAt(i++));
              for (j = 0; j < arr.length; j++) {
                if (arr[j] > baseOut - 1) {
                  if (arr[j + 1] == null) arr[j + 1] = 0;
                  arr[j + 1] += arr[j] / baseOut | 0;
                  arr[j] %= baseOut;
                }
              }
            }
            return arr.reverse();
          }
          return function(str, baseIn, baseOut, sign2, callerIsToString) {
            var alphabet, d, e, k, r, x, xc, y, i = str.indexOf("."), dp = DECIMAL_PLACES, rm = ROUNDING_MODE;
            if (i >= 0) {
              k = POW_PRECISION;
              POW_PRECISION = 0;
              str = str.replace(".", "");
              y = new BigNumber2(baseIn);
              x = y.pow(str.length - i);
              POW_PRECISION = k;
              y.c = toBaseOut(
                toFixedPoint(coeffToString(x.c), x.e, "0"),
                10,
                baseOut,
                decimal
              );
              y.e = y.c.length;
            }
            xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET));
            e = k = xc.length;
            for (; xc[--k] == 0; xc.pop()) ;
            if (!xc[0]) return alphabet.charAt(0);
            if (i < 0) {
              --e;
            } else {
              x.c = xc;
              x.e = e;
              x.s = sign2;
              x = div(x, y, dp, rm, baseOut);
              xc = x.c;
              r = x.r;
              e = x.e;
            }
            d = e + dp + 1;
            i = xc[d];
            k = baseOut / 2;
            r = r || d < 0 || xc[d + 1] != null;
            r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));
            if (d < 1 || !xc[0]) {
              str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
            } else {
              xc.length = d;
              if (r) {
                for (--baseOut; ++xc[--d] > baseOut; ) {
                  xc[d] = 0;
                  if (!d) {
                    ++e;
                    xc = [1].concat(xc);
                  }
                }
              }
              for (k = xc.length; !xc[--k]; ) ;
              for (i = 0, str = ""; i <= k; str += alphabet.charAt(xc[i++])) ;
              str = toFixedPoint(str, e, alphabet.charAt(0));
            }
            return str;
          };
        }();
        div = /* @__PURE__ */ function() {
          function multiply(x, k, base) {
            var m, temp, xlo, xhi, carry = 0, i = x.length, klo = k % SQRT_BASE, khi = k / SQRT_BASE | 0;
            for (x = x.slice(); i--; ) {
              xlo = x[i] % SQRT_BASE;
              xhi = x[i] / SQRT_BASE | 0;
              m = khi * xlo + xhi * klo;
              temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;
              carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
              x[i] = temp % base;
            }
            if (carry) x = [carry].concat(x);
            return x;
          }
          function compare2(a, b, aL, bL) {
            var i, cmp;
            if (aL != bL) {
              cmp = aL > bL ? 1 : -1;
            } else {
              for (i = cmp = 0; i < aL; i++) {
                if (a[i] != b[i]) {
                  cmp = a[i] > b[i] ? 1 : -1;
                  break;
                }
              }
            }
            return cmp;
          }
          function subtract(a, b, aL, base) {
            var i = 0;
            for (; aL--; ) {
              a[aL] -= i;
              i = a[aL] < b[aL] ? 1 : 0;
              a[aL] = i * base + a[aL] - b[aL];
            }
            for (; !a[0] && a.length > 1; a.splice(0, 1)) ;
          }
          return function(x, y, dp, rm, base) {
            var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0, yL, yz, s = x.s == y.s ? 1 : -1, xc = x.c, yc = y.c;
            if (!xc || !xc[0] || !yc || !yc[0]) {
              return new BigNumber2(
                // Return NaN if either NaN, or both Infinity or 0.
                !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : (
                  // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
                  xc && xc[0] == 0 || !yc ? s * 0 : s / 0
                )
              );
            }
            q = new BigNumber2(s);
            qc = q.c = [];
            e = x.e - y.e;
            s = dp + e + 1;
            if (!base) {
              base = BASE;
              e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
              s = s / LOG_BASE | 0;
            }
            for (i = 0; yc[i] == (xc[i] || 0); i++) ;
            if (yc[i] > (xc[i] || 0)) e--;
            if (s < 0) {
              qc.push(1);
              more = true;
            } else {
              xL = xc.length;
              yL = yc.length;
              i = 0;
              s += 2;
              n = mathfloor(base / (yc[0] + 1));
              if (n > 1) {
                yc = multiply(yc, n, base);
                xc = multiply(xc, n, base);
                yL = yc.length;
                xL = xc.length;
              }
              xi = yL;
              rem = xc.slice(0, yL);
              remL = rem.length;
              for (; remL < yL; rem[remL++] = 0) ;
              yz = yc.slice();
              yz = [0].concat(yz);
              yc0 = yc[0];
              if (yc[1] >= base / 2) yc0++;
              do {
                n = 0;
                cmp = compare2(yc, rem, yL, remL);
                if (cmp < 0) {
                  rem0 = rem[0];
                  if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);
                  n = mathfloor(rem0 / yc0);
                  if (n > 1) {
                    if (n >= base) n = base - 1;
                    prod = multiply(yc, n, base);
                    prodL = prod.length;
                    remL = rem.length;
                    while (compare2(prod, rem, prodL, remL) == 1) {
                      n--;
                      subtract(prod, yL < prodL ? yz : yc, prodL, base);
                      prodL = prod.length;
                      cmp = 1;
                    }
                  } else {
                    if (n == 0) {
                      cmp = n = 1;
                    }
                    prod = yc.slice();
                    prodL = prod.length;
                  }
                  if (prodL < remL) prod = [0].concat(prod);
                  subtract(rem, prod, remL, base);
                  remL = rem.length;
                  if (cmp == -1) {
                    while (compare2(yc, rem, yL, remL) < 1) {
                      n++;
                      subtract(rem, yL < remL ? yz : yc, remL, base);
                      remL = rem.length;
                    }
                  }
                } else if (cmp === 0) {
                  n++;
                  rem = [0];
                }
                qc[i++] = n;
                if (rem[0]) {
                  rem[remL++] = xc[xi] || 0;
                } else {
                  rem = [xc[xi]];
                  remL = 1;
                }
              } while ((xi++ < xL || rem[0] != null) && s--);
              more = rem[0] != null;
              if (!qc[0]) qc.splice(0, 1);
            }
            if (base == BASE) {
              for (i = 1, s = qc[0]; s >= 10; s /= 10, i++) ;
              round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);
            } else {
              q.e = e;
              q.r = +more;
            }
            return q;
          };
        }();
        function format(n, i, rm, id) {
          var c0, e, ne, len, str;
          if (rm == null) rm = ROUNDING_MODE;
          else intCheck(rm, 0, 8);
          if (!n.c) return n.toString();
          c0 = n.c[0];
          ne = n.e;
          if (i == null) {
            str = coeffToString(n.c);
            str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS) ? toExponential(str, ne) : toFixedPoint(str, ne, "0");
          } else {
            n = round(new BigNumber2(n), i, rm);
            e = n.e;
            str = coeffToString(n.c);
            len = str.length;
            if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {
              for (; len < i; str += "0", len++) ;
              str = toExponential(str, e);
            } else {
              i -= ne;
              str = toFixedPoint(str, e, "0");
              if (e + 1 > len) {
                if (--i > 0) for (str += "."; i--; str += "0") ;
              } else {
                i += e - len;
                if (i > 0) {
                  if (e + 1 == len) str += ".";
                  for (; i--; str += "0") ;
                }
              }
            }
          }
          return n.s < 0 && c0 ? "-" + str : str;
        }
        function maxOrMin(args, n) {
          var k, y, i = 1, x = new BigNumber2(args[0]);
          for (; i < args.length; i++) {
            y = new BigNumber2(args[i]);
            if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {
              x = y;
            }
          }
          return x;
        }
        function normalise(n, c, e) {
          var i = 1, j = c.length;
          for (; !c[--j]; c.pop()) ;
          for (j = c[0]; j >= 10; j /= 10, i++) ;
          if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {
            n.c = n.e = null;
          } else if (e < MIN_EXP) {
            n.c = [n.e = 0];
          } else {
            n.e = e;
            n.c = c;
          }
          return n;
        }
        parseNumeric = /* @__PURE__ */ function() {
          var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i, dotAfter = /^([^.]+)\.$/, dotBefore = /^\.([^.]+)$/, isInfinityOrNaN = /^-?(Infinity|NaN)$/, whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;
          return function(x, str, isNum, b) {
            var base, s = isNum ? str : str.replace(whitespaceOrPlus, "");
            if (isInfinityOrNaN.test(s)) {
              x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
            } else {
              if (!isNum) {
                s = s.replace(basePrefix, function(m, p1, p2) {
                  base = (p2 = p2.toLowerCase()) == "x" ? 16 : p2 == "b" ? 2 : 8;
                  return !b || b == base ? p1 : m;
                });
                if (b) {
                  base = b;
                  s = s.replace(dotAfter, "$1").replace(dotBefore, "0.$1");
                }
                if (str != s) return new BigNumber2(s, base);
              }
              if (BigNumber2.DEBUG) {
                throw Error(bignumberError + "Not a" + (b ? " base " + b : "") + " number: " + str);
              }
              x.s = null;
            }
            x.c = x.e = null;
          };
        }();
        function round(x, sd, rm, r) {
          var d, i, j, k, n, ni, rd, xc = x.c, pows10 = POWS_TEN;
          if (xc) {
            out: {
              for (d = 1, k = xc[0]; k >= 10; k /= 10, d++) ;
              i = sd - d;
              if (i < 0) {
                i += LOG_BASE;
                j = sd;
                n = xc[ni = 0];
                rd = mathfloor(n / pows10[d - j - 1] % 10);
              } else {
                ni = mathceil((i + 1) / LOG_BASE);
                if (ni >= xc.length) {
                  if (r) {
                    for (; xc.length <= ni; xc.push(0)) ;
                    n = rd = 0;
                    d = 1;
                    i %= LOG_BASE;
                    j = i - LOG_BASE + 1;
                  } else {
                    break out;
                  }
                } else {
                  n = k = xc[ni];
                  for (d = 1; k >= 10; k /= 10, d++) ;
                  i %= LOG_BASE;
                  j = i - LOG_BASE + d;
                  rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);
                }
              }
              r = r || sd < 0 || // Are there any non-zero digits after the rounding digit?
              // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
              // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
              xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);
              r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.
              (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));
              if (sd < 1 || !xc[0]) {
                xc.length = 0;
                if (r) {
                  sd -= x.e + 1;
                  xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
                  x.e = -sd || 0;
                } else {
                  xc[0] = x.e = 0;
                }
                return x;
              }
              if (i == 0) {
                xc.length = ni;
                k = 1;
                ni--;
              } else {
                xc.length = ni + 1;
                k = pows10[LOG_BASE - i];
                xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
              }
              if (r) {
                for (; ; ) {
                  if (ni == 0) {
                    for (i = 1, j = xc[0]; j >= 10; j /= 10, i++) ;
                    j = xc[0] += k;
                    for (k = 1; j >= 10; j /= 10, k++) ;
                    if (i != k) {
                      x.e++;
                      if (xc[0] == BASE) xc[0] = 1;
                    }
                    break;
                  } else {
                    xc[ni] += k;
                    if (xc[ni] != BASE) break;
                    xc[ni--] = 0;
                    k = 1;
                  }
                }
              }
              for (i = xc.length; xc[--i] === 0; xc.pop()) ;
            }
            if (x.e > MAX_EXP) {
              x.c = x.e = null;
            } else if (x.e < MIN_EXP) {
              x.c = [x.e = 0];
            }
          }
          return x;
        }
        function valueOf(n) {
          var str, e = n.e;
          if (e === null) return n.toString();
          str = coeffToString(n.c);
          str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, "0");
          return n.s < 0 ? "-" + str : str;
        }
        P.absoluteValue = P.abs = function() {
          var x = new BigNumber2(this);
          if (x.s < 0) x.s = 1;
          return x;
        };
        P.comparedTo = function(y, b) {
          return compare(this, new BigNumber2(y, b));
        };
        P.decimalPlaces = P.dp = function(dp, rm) {
          var c, n, v, x = this;
          if (dp != null) {
            intCheck(dp, 0, MAX);
            if (rm == null) rm = ROUNDING_MODE;
            else intCheck(rm, 0, 8);
            return round(new BigNumber2(x), dp + x.e + 1, rm);
          }
          if (!(c = x.c)) return null;
          n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;
          if (v = c[v]) for (; v % 10 == 0; v /= 10, n--) ;
          if (n < 0) n = 0;
          return n;
        };
        P.dividedBy = P.div = function(y, b) {
          return div(this, new BigNumber2(y, b), DECIMAL_PLACES, ROUNDING_MODE);
        };
        P.dividedToIntegerBy = P.idiv = function(y, b) {
          return div(this, new BigNumber2(y, b), 0, 1);
        };
        P.exponentiatedBy = P.pow = function(n, m) {
          var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y, x = this;
          n = new BigNumber2(n);
          if (n.c && !n.isInteger()) {
            throw Error(bignumberError + "Exponent not an integer: " + valueOf(n));
          }
          if (m != null) m = new BigNumber2(m);
          nIsBig = n.e > 14;
          if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {
            y = new BigNumber2(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));
            return m ? y.mod(m) : y;
          }
          nIsNeg = n.s < 0;
          if (m) {
            if (m.c ? !m.c[0] : !m.s) return new BigNumber2(NaN);
            isModExp = !nIsNeg && x.isInteger() && m.isInteger();
            if (isModExp) x = x.mod(m);
          } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0 ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7 : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {
            k = x.s < 0 && isOdd(n) ? -0 : 0;
            if (x.e > -1) k = 1 / k;
            return new BigNumber2(nIsNeg ? 1 / k : k);
          } else if (POW_PRECISION) {
            k = mathceil(POW_PRECISION / LOG_BASE + 2);
          }
          if (nIsBig) {
            half = new BigNumber2(0.5);
            if (nIsNeg) n.s = 1;
            nIsOdd = isOdd(n);
          } else {
            i = Math.abs(+valueOf(n));
            nIsOdd = i % 2;
          }
          y = new BigNumber2(ONE);
          for (; ; ) {
            if (nIsOdd) {
              y = y.times(x);
              if (!y.c) break;
              if (k) {
                if (y.c.length > k) y.c.length = k;
              } else if (isModExp) {
                y = y.mod(m);
              }
            }
            if (i) {
              i = mathfloor(i / 2);
              if (i === 0) break;
              nIsOdd = i % 2;
            } else {
              n = n.times(half);
              round(n, n.e + 1, 1);
              if (n.e > 14) {
                nIsOdd = isOdd(n);
              } else {
                i = +valueOf(n);
                if (i === 0) break;
                nIsOdd = i % 2;
              }
            }
            x = x.times(x);
            if (k) {
              if (x.c && x.c.length > k) x.c.length = k;
            } else if (isModExp) {
              x = x.mod(m);
            }
          }
          if (isModExp) return y;
          if (nIsNeg) y = ONE.div(y);
          return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
        };
        P.integerValue = function(rm) {
          var n = new BigNumber2(this);
          if (rm == null) rm = ROUNDING_MODE;
          else intCheck(rm, 0, 8);
          return round(n, n.e + 1, rm);
        };
        P.isEqualTo = P.eq = function(y, b) {
          return compare(this, new BigNumber2(y, b)) === 0;
        };
        P.isFinite = function() {
          return !!this.c;
        };
        P.isGreaterThan = P.gt = function(y, b) {
          return compare(this, new BigNumber2(y, b)) > 0;
        };
        P.isGreaterThanOrEqualTo = P.gte = function(y, b) {
          return (b = compare(this, new BigNumber2(y, b))) === 1 || b === 0;
        };
        P.isInteger = function() {
          return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
        };
        P.isLessThan = P.lt = function(y, b) {
          return compare(this, new BigNumber2(y, b)) < 0;
        };
        P.isLessThanOrEqualTo = P.lte = function(y, b) {
          return (b = compare(this, new BigNumber2(y, b))) === -1 || b === 0;
        };
        P.isNaN = function() {
          return !this.s;
        };
        P.isNegative = function() {
          return this.s < 0;
        };
        P.isPositive = function() {
          return this.s > 0;
        };
        P.isZero = function() {
          return !!this.c && this.c[0] == 0;
        };
        P.minus = function(y, b) {
          var i, j, t, xLTy, x = this, a = x.s;
          y = new BigNumber2(y, b);
          b = y.s;
          if (!a || !b) return new BigNumber2(NaN);
          if (a != b) {
            y.s = -b;
            return x.plus(y);
          }
          var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
          if (!xe || !ye) {
            if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber2(yc ? x : NaN);
            if (!xc[0] || !yc[0]) {
              return yc[0] ? (y.s = -b, y) : new BigNumber2(xc[0] ? x : (
                // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
                ROUNDING_MODE == 3 ? -0 : 0
              ));
            }
          }
          xe = bitFloor(xe);
          ye = bitFloor(ye);
          xc = xc.slice();
          if (a = xe - ye) {
            if (xLTy = a < 0) {
              a = -a;
              t = xc;
            } else {
              ye = xe;
              t = yc;
            }
            t.reverse();
            for (b = a; b--; t.push(0)) ;
            t.reverse();
          } else {
            j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;
            for (a = b = 0; b < j; b++) {
              if (xc[b] != yc[b]) {
                xLTy = xc[b] < yc[b];
                break;
              }
            }
          }
          if (xLTy) {
            t = xc;
            xc = yc;
            yc = t;
            y.s = -y.s;
          }
          b = (j = yc.length) - (i = xc.length);
          if (b > 0) for (; b--; xc[i++] = 0) ;
          b = BASE - 1;
          for (; j > a; ) {
            if (xc[--j] < yc[j]) {
              for (i = j; i && !xc[--i]; xc[i] = b) ;
              --xc[i];
              xc[j] += BASE;
            }
            xc[j] -= yc[j];
          }
          for (; xc[0] == 0; xc.splice(0, 1), --ye) ;
          if (!xc[0]) {
            y.s = ROUNDING_MODE == 3 ? -1 : 1;
            y.c = [y.e = 0];
            return y;
          }
          return normalise(y, xc, ye);
        };
        P.modulo = P.mod = function(y, b) {
          var q, s, x = this;
          y = new BigNumber2(y, b);
          if (!x.c || !y.s || y.c && !y.c[0]) {
            return new BigNumber2(NaN);
          } else if (!y.c || x.c && !x.c[0]) {
            return new BigNumber2(x);
          }
          if (MODULO_MODE == 9) {
            s = y.s;
            y.s = 1;
            q = div(x, y, 0, 3);
            y.s = s;
            q.s *= s;
          } else {
            q = div(x, y, 0, MODULO_MODE);
          }
          y = x.minus(q.times(y));
          if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;
          return y;
        };
        P.multipliedBy = P.times = function(y, b) {
          var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc, base, sqrtBase, x = this, xc = x.c, yc = (y = new BigNumber2(y, b)).c;
          if (!xc || !yc || !xc[0] || !yc[0]) {
            if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
              y.c = y.e = y.s = null;
            } else {
              y.s *= x.s;
              if (!xc || !yc) {
                y.c = y.e = null;
              } else {
                y.c = [0];
                y.e = 0;
              }
            }
            return y;
          }
          e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
          y.s *= x.s;
          xcL = xc.length;
          ycL = yc.length;
          if (xcL < ycL) {
            zc = xc;
            xc = yc;
            yc = zc;
            i = xcL;
            xcL = ycL;
            ycL = i;
          }
          for (i = xcL + ycL, zc = []; i--; zc.push(0)) ;
          base = BASE;
          sqrtBase = SQRT_BASE;
          for (i = ycL; --i >= 0; ) {
            c = 0;
            ylo = yc[i] % sqrtBase;
            yhi = yc[i] / sqrtBase | 0;
            for (k = xcL, j = i + k; j > i; ) {
              xlo = xc[--k] % sqrtBase;
              xhi = xc[k] / sqrtBase | 0;
              m = yhi * xlo + xhi * ylo;
              xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;
              c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
              zc[j--] = xlo % base;
            }
            zc[j] = c;
          }
          if (c) {
            ++e;
          } else {
            zc.splice(0, 1);
          }
          return normalise(y, zc, e);
        };
        P.negated = function() {
          var x = new BigNumber2(this);
          x.s = -x.s || null;
          return x;
        };
        P.plus = function(y, b) {
          var t, x = this, a = x.s;
          y = new BigNumber2(y, b);
          b = y.s;
          if (!a || !b) return new BigNumber2(NaN);
          if (a != b) {
            y.s = -b;
            return x.minus(y);
          }
          var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
          if (!xe || !ye) {
            if (!xc || !yc) return new BigNumber2(a / 0);
            if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber2(xc[0] ? x : a * 0);
          }
          xe = bitFloor(xe);
          ye = bitFloor(ye);
          xc = xc.slice();
          if (a = xe - ye) {
            if (a > 0) {
              ye = xe;
              t = yc;
            } else {
              a = -a;
              t = xc;
            }
            t.reverse();
            for (; a--; t.push(0)) ;
            t.reverse();
          }
          a = xc.length;
          b = yc.length;
          if (a - b < 0) {
            t = yc;
            yc = xc;
            xc = t;
            b = a;
          }
          for (a = 0; b; ) {
            a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
            xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
          }
          if (a) {
            xc = [a].concat(xc);
            ++ye;
          }
          return normalise(y, xc, ye);
        };
        P.precision = P.sd = function(sd, rm) {
          var c, n, v, x = this;
          if (sd != null && sd !== !!sd) {
            intCheck(sd, 1, MAX);
            if (rm == null) rm = ROUNDING_MODE;
            else intCheck(rm, 0, 8);
            return round(new BigNumber2(x), sd, rm);
          }
          if (!(c = x.c)) return null;
          v = c.length - 1;
          n = v * LOG_BASE + 1;
          if (v = c[v]) {
            for (; v % 10 == 0; v /= 10, n--) ;
            for (v = c[0]; v >= 10; v /= 10, n++) ;
          }
          if (sd && x.e + 1 > n) n = x.e + 1;
          return n;
        };
        P.shiftedBy = function(k) {
          intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
          return this.times("1e" + k);
        };
        P.squareRoot = P.sqrt = function() {
          var m, n, r, rep, t, x = this, c = x.c, s = x.s, e = x.e, dp = DECIMAL_PLACES + 4, half = new BigNumber2("0.5");
          if (s !== 1 || !c || !c[0]) {
            return new BigNumber2(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
          }
          s = Math.sqrt(+valueOf(x));
          if (s == 0 || s == 1 / 0) {
            n = coeffToString(c);
            if ((n.length + e) % 2 == 0) n += "0";
            s = Math.sqrt(+n);
            e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);
            if (s == 1 / 0) {
              n = "5e" + e;
            } else {
              n = s.toExponential();
              n = n.slice(0, n.indexOf("e") + 1) + e;
            }
            r = new BigNumber2(n);
          } else {
            r = new BigNumber2(s + "");
          }
          if (r.c[0]) {
            e = r.e;
            s = e + dp;
            if (s < 3) s = 0;
            for (; ; ) {
              t = r;
              r = half.times(t.plus(div(x, t, dp, 1)));
              if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {
                if (r.e < e) --s;
                n = n.slice(s - 3, s + 1);
                if (n == "9999" || !rep && n == "4999") {
                  if (!rep) {
                    round(t, t.e + DECIMAL_PLACES + 2, 0);
                    if (t.times(t).eq(x)) {
                      r = t;
                      break;
                    }
                  }
                  dp += 4;
                  s += 4;
                  rep = 1;
                } else {
                  if (!+n || !+n.slice(1) && n.charAt(0) == "5") {
                    round(r, r.e + DECIMAL_PLACES + 2, 1);
                    m = !r.times(r).eq(x);
                  }
                  break;
                }
              }
            }
          }
          return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
        };
        P.toExponential = function(dp, rm) {
          if (dp != null) {
            intCheck(dp, 0, MAX);
            dp++;
          }
          return format(this, dp, rm, 1);
        };
        P.toFixed = function(dp, rm) {
          if (dp != null) {
            intCheck(dp, 0, MAX);
            dp = dp + this.e + 1;
          }
          return format(this, dp, rm);
        };
        P.toFormat = function(dp, rm, format2) {
          var str, x = this;
          if (format2 == null) {
            if (dp != null && rm && typeof rm == "object") {
              format2 = rm;
              rm = null;
            } else if (dp && typeof dp == "object") {
              format2 = dp;
              dp = rm = null;
            } else {
              format2 = FORMAT;
            }
          } else if (typeof format2 != "object") {
            throw Error(bignumberError + "Argument not an object: " + format2);
          }
          str = x.toFixed(dp, rm);
          if (x.c) {
            var i, arr = str.split("."), g1 = +format2.groupSize, g2 = +format2.secondaryGroupSize, groupSeparator = format2.groupSeparator || "", intPart = arr[0], fractionPart = arr[1], isNeg = x.s < 0, intDigits = isNeg ? intPart.slice(1) : intPart, len = intDigits.length;
            if (g2) {
              i = g1;
              g1 = g2;
              g2 = i;
              len -= i;
            }
            if (g1 > 0 && len > 0) {
              i = len % g1 || g1;
              intPart = intDigits.substr(0, i);
              for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);
              if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
              if (isNeg) intPart = "-" + intPart;
            }
            str = fractionPart ? intPart + (format2.decimalSeparator || "") + ((g2 = +format2.fractionGroupSize) ? fractionPart.replace(
              new RegExp("\\d{" + g2 + "}\\B", "g"),
              "$&" + (format2.fractionGroupSeparator || "")
            ) : fractionPart) : intPart;
          }
          return (format2.prefix || "") + str + (format2.suffix || "");
        };
        P.toFraction = function(md) {
          var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s, x = this, xc = x.c;
          if (md != null) {
            n = new BigNumber2(md);
            if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
              throw Error(bignumberError + "Argument " + (n.isInteger() ? "out of range: " : "not an integer: ") + valueOf(n));
            }
          }
          if (!xc) return new BigNumber2(x);
          d = new BigNumber2(ONE);
          n1 = d0 = new BigNumber2(ONE);
          d1 = n0 = new BigNumber2(ONE);
          s = coeffToString(xc);
          e = d.e = s.length - x.e - 1;
          d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
          md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;
          exp = MAX_EXP;
          MAX_EXP = 1 / 0;
          n = new BigNumber2(s);
          n0.c[0] = 0;
          for (; ; ) {
            q = div(n, d, 0, 1);
            d2 = d0.plus(q.times(d1));
            if (d2.comparedTo(md) == 1) break;
            d0 = d1;
            d1 = d2;
            n1 = n0.plus(q.times(d2 = n1));
            n0 = d2;
            d = n.minus(q.times(d2 = d));
            n = d2;
          }
          d2 = div(md.minus(d0), d1, 0, 1);
          n0 = n0.plus(d2.times(n1));
          d0 = d0.plus(d2.times(d1));
          n0.s = n1.s = x.s;
          e = e * 2;
          r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(
            div(n0, d0, e, ROUNDING_MODE).minus(x).abs()
          ) < 1 ? [n1, d1] : [n0, d0];
          MAX_EXP = exp;
          return r;
        };
        P.toNumber = function() {
          return +valueOf(this);
        };
        P.toPrecision = function(sd, rm) {
          if (sd != null) intCheck(sd, 1, MAX);
          return format(this, sd, rm, 2);
        };
        P.toString = function(b) {
          var str, n = this, s = n.s, e = n.e;
          if (e === null) {
            if (s) {
              str = "Infinity";
              if (s < 0) str = "-" + str;
            } else {
              str = "NaN";
            }
          } else {
            if (b == null) {
              str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(coeffToString(n.c), e) : toFixedPoint(coeffToString(n.c), e, "0");
            } else if (b === 10 && alphabetHasNormalDecimalDigits) {
              n = round(new BigNumber2(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
              str = toFixedPoint(coeffToString(n.c), n.e, "0");
            } else {
              intCheck(b, 2, ALPHABET.length, "Base");
              str = convertBase(toFixedPoint(coeffToString(n.c), e, "0"), 10, b, s, true);
            }
            if (s < 0 && n.c[0]) str = "-" + str;
          }
          return str;
        };
        P.valueOf = P.toJSON = function() {
          return valueOf(this);
        };
        P._isBigNumber = true;
        if (configObject != null) BigNumber2.set(configObject);
        return BigNumber2;
      }
      function bitFloor(n) {
        var i = n | 0;
        return n > 0 || n === i ? i : i - 1;
      }
      function coeffToString(a) {
        var s, z, i = 1, j = a.length, r = a[0] + "";
        for (; i < j; ) {
          s = a[i++] + "";
          z = LOG_BASE - s.length;
          for (; z--; s = "0" + s) ;
          r += s;
        }
        for (j = r.length; r.charCodeAt(--j) === 48; ) ;
        return r.slice(0, j + 1 || 1);
      }
      function compare(x, y) {
        var a, b, xc = x.c, yc = y.c, i = x.s, j = y.s, k = x.e, l = y.e;
        if (!i || !j) return null;
        a = xc && !xc[0];
        b = yc && !yc[0];
        if (a || b) return a ? b ? 0 : -j : i;
        if (i != j) return i;
        a = i < 0;
        b = k == l;
        if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;
        if (!b) return k > l ^ a ? 1 : -1;
        j = (k = xc.length) < (l = yc.length) ? k : l;
        for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;
        return k == l ? 0 : k > l ^ a ? 1 : -1;
      }
      function intCheck(n, min, max, name) {
        if (n < min || n > max || n !== mathfloor(n)) {
          throw Error(bignumberError + (name || "Argument") + (typeof n == "number" ? n < min || n > max ? " out of range: " : " not an integer: " : " not a primitive number: ") + String(n));
        }
      }
      function isOdd(n) {
        var k = n.c.length - 1;
        return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
      }
      function toExponential(str, e) {
        return (str.length > 1 ? str.charAt(0) + "." + str.slice(1) : str) + (e < 0 ? "e" : "e+") + e;
      }
      function toFixedPoint(str, e, z) {
        var len, zs;
        if (e < 0) {
          for (zs = z + "."; ++e; zs += z) ;
          str = zs + str;
        } else {
          len = str.length;
          if (++e > len) {
            for (zs = z, e -= len; --e; zs += z) ;
            str += zs;
          } else if (e < len) {
            str = str.slice(0, e) + "." + str.slice(e);
          }
        }
        return str;
      }
      BigNumber = clone();
      BigNumber["default"] = BigNumber.BigNumber = BigNumber;
      if (typeof define == "function" && define.amd) {
        define(function() {
          return BigNumber;
        });
      } else if (typeof module2 != "undefined" && module2.exports) {
        module2.exports = BigNumber;
      } else {
        if (!globalObject) {
          globalObject = typeof self != "undefined" && self ? self : window;
        }
        globalObject.BigNumber = BigNumber;
      }
    })(exports2);
  }
});

// node_modules/navi-sdk/dist/types/V3.js
var require_V32 = __commonJS({
  "node_modules/navi-sdk/dist/types/V3.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/navi-sdk/dist/types/index.js
var require_types3 = __commonJS({
  "node_modules/navi-sdk/dist/types/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports2 && exports2.__importStar || /* @__PURE__ */ function() {
      var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys(o);
      };
      return function(mod2) {
        if (mod2 && mod2.__esModule) return mod2;
        var result = {};
        if (mod2 != null) {
          for (var k = ownKeys(mod2), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding2(result, mod2, k[i]);
        }
        __setModuleDefault2(result, mod2);
        return result;
      };
    }();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.V3Type = exports2.Dex = exports2.OptionType = void 0;
    var OptionType;
    (function(OptionType2) {
      OptionType2[OptionType2["OptionSupply"] = 1] = "OptionSupply";
      OptionType2[OptionType2["OptionWithdraw"] = 2] = "OptionWithdraw";
      OptionType2[OptionType2["OptionBorrow"] = 3] = "OptionBorrow";
      OptionType2[OptionType2["OptionRepay"] = 4] = "OptionRepay";
    })(OptionType || (exports2.OptionType = OptionType = {}));
    var Dex;
    (function(Dex2) {
      Dex2["CETUS"] = "cetus";
      Dex2["TURBOS"] = "turbos";
      Dex2["KRIYA_V2"] = "kriyaV2";
      Dex2["KRIYA_V3"] = "kriyaV3";
      Dex2["AFTERMATH"] = "aftermath";
      Dex2["DEEPBOOK"] = "deepbook";
      Dex2["BLUEFIN"] = "bluefin";
      Dex2["VSUI"] = "vSui";
      Dex2["HASUI"] = "haSui";
      Dex2["MAGMA"] = "magma";
    })(Dex || (exports2.Dex = Dex = {}));
    exports2.V3Type = __importStar2(require_V32());
  }
});

// node_modules/navi-sdk/dist/libs/Aggregator/Dex/cetus.js
var require_cetus = __commonJS({
  "node_modules/navi-sdk/dist/libs/Aggregator/Dex/cetus.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.makeCETUSPTB = makeCETUSPTB;
    var config_1 = require_config();
    function makeCETUSPTB(txb, poolId, byAmountIn, coinA, amount, a2b, typeArguments) {
      return __awaiter2(this, void 0, void 0, function* () {
        let coinTypeA = typeArguments[0];
        let coinTypeB = typeArguments[1];
        const sqrtPriceLimit = BigInt(a2b ? "4295048016" : "79226673515401279992447579055");
        const [cetusReceiveA, cetusReceiveB, cetusflashReceipt] = txb.moveCall({
          target: `${config_1.AggregatorConfig.cetusPackageId}::pool::flash_swap`,
          arguments: [
            txb.object(config_1.AggregatorConfig.cetusConfigId),
            txb.object(poolId),
            txb.pure.bool(a2b),
            txb.pure.bool(byAmountIn),
            amount,
            txb.pure.u128(sqrtPriceLimit),
            txb.object(config_1.AggregatorConfig.clockAddress)
          ],
          typeArguments: [coinTypeA, coinTypeB]
        });
        txb.moveCall({
          target: `${config_1.AggregatorConfig.cetusPackageId}::pool::swap_pay_amount`,
          arguments: [cetusflashReceipt],
          typeArguments: [coinTypeA, coinTypeB]
        });
        if (a2b) {
          const pay_coin_b = txb.moveCall({
            target: "0x2::balance::zero",
            typeArguments: [coinTypeB]
          });
          txb.moveCall({
            target: `${config_1.AggregatorConfig.cetusPackageId}::pool::repay_flash_swap`,
            arguments: [
              txb.object(config_1.AggregatorConfig.cetusConfigId),
              txb.object(poolId),
              coinA,
              pay_coin_b,
              cetusflashReceipt
            ],
            typeArguments: [coinTypeA, coinTypeB]
          });
          const coin_a = txb.moveCall({
            target: `0x2::coin::from_balance`,
            arguments: [cetusReceiveA],
            typeArguments: [coinTypeA]
          });
          const receive_coin_b = txb.moveCall({
            target: `0x2::coin::from_balance`,
            arguments: [cetusReceiveB],
            typeArguments: [coinTypeB]
          });
          return { receiveCoin: receive_coin_b, leftCoin: coin_a };
        }
        const [pay_coin_a] = txb.moveCall({
          target: "0x2::balance::zero",
          typeArguments: [coinTypeA]
        });
        txb.moveCall({
          target: `${config_1.AggregatorConfig.cetusPackageId}::pool::repay_flash_swap`,
          arguments: [
            txb.object(config_1.AggregatorConfig.cetusConfigId),
            txb.object(poolId),
            pay_coin_a,
            coinA,
            cetusflashReceipt
          ],
          typeArguments: [coinTypeA, coinTypeB]
        });
        const leftCoin = txb.moveCall({
          target: `0x2::coin::from_balance`,
          arguments: [cetusReceiveB],
          typeArguments: [coinTypeB]
        });
        const receiveCoin = txb.moveCall({
          target: `0x2::coin::from_balance`,
          arguments: [cetusReceiveA],
          typeArguments: [coinTypeA]
        });
        return { receiveCoin, leftCoin };
      });
    }
  }
});

// node_modules/navi-sdk/dist/libs/Aggregator/Dex/turbos.js
var require_turbos = __commonJS({
  "node_modules/navi-sdk/dist/libs/Aggregator/Dex/turbos.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MIN_TICK_INDEX_X64 = exports2.MAX_TICK_INDEX_X64 = exports2.MIN_TICK_INDEX = exports2.MAX_TICK_INDEX = void 0;
    exports2.makeTurbosPTB = makeTurbosPTB;
    var config_1 = require_config();
    exports2.MAX_TICK_INDEX = 443636;
    exports2.MIN_TICK_INDEX = -443636;
    exports2.MAX_TICK_INDEX_X64 = "79226673515401279992447579055";
    exports2.MIN_TICK_INDEX_X64 = "4295048016";
    function makeTurbosPTB(txb, poolId, byAmountIn, coinA, amount_in, a2b, typeArguments, userAddress, contractVersionId) {
      return __awaiter2(this, void 0, void 0, function* () {
        const ONE_MINUTE = 60 * 1e3;
        const [turbosCoinB, turbosCoinA] = txb.moveCall({
          target: `${config_1.AggregatorConfig.turbosPackageId}::swap_router::swap_${a2b ? "a_b" : "b_a"}_with_return_`,
          arguments: [
            txb.object(poolId),
            coinA,
            amount_in,
            txb.pure.u64(0),
            txb.pure.u128(a2b ? exports2.MIN_TICK_INDEX_X64 : exports2.MAX_TICK_INDEX_X64),
            txb.pure.bool(byAmountIn),
            txb.pure.address(userAddress),
            txb.pure.u64(Date.now() + ONE_MINUTE * 3),
            txb.object(config_1.AggregatorConfig.clockAddress),
            txb.object(contractVersionId)
          ],
          typeArguments
        });
        return { turbosCoinB, turbosCoinA };
      });
    }
  }
});

// node_modules/navi-sdk/dist/libs/Aggregator/Dex/kriyaV3.js
var require_kriyaV3 = __commonJS({
  "node_modules/navi-sdk/dist/libs/Aggregator/Dex/kriyaV3.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.makeKriyaV3PTB = makeKriyaV3PTB;
    var config_1 = require_config();
    function makeKriyaV3PTB(txb, poolId, byAmountIn, coinA, amount, a2b, typeArguments) {
      return __awaiter2(this, void 0, void 0, function* () {
        const sqrtPriceLimit = BigInt(a2b ? "4295048016" : "79226673515401279992447579055");
        const args = [
          txb.object(poolId),
          txb.pure.bool(a2b),
          txb.pure.bool(byAmountIn),
          typeof amount === "number" ? txb.pure.u64(amount) : amount,
          txb.pure.u128(sqrtPriceLimit),
          txb.object(config_1.AggregatorConfig.clockAddress),
          txb.object(config_1.AggregatorConfig.kriyaV3Version)
        ];
        const [receive_balance_a, receive_balance_b, receipt] = txb.moveCall({
          target: `${config_1.AggregatorConfig.kriyaV3PackageId}::trade::flash_swap`,
          typeArguments,
          arguments: args
        });
        if (a2b) {
          txb.moveCall({
            target: "0x2::balance::destroy_zero",
            arguments: [receive_balance_a],
            typeArguments: [typeArguments[0]]
          });
          let BalanceA2 = txb.moveCall({
            target: "0x2::coin::into_balance",
            arguments: [coinA],
            typeArguments: [typeArguments[0]]
          });
          const [BalanceB2] = txb.moveCall({
            target: "0x2::balance::zero",
            typeArguments: [typeArguments[1]]
          });
          txb.moveCall({
            target: `${config_1.AggregatorConfig.kriyaV3PackageId}::trade::repay_flash_swap`,
            arguments: [
              txb.object(poolId),
              receipt,
              BalanceA2,
              BalanceB2,
              txb.object(config_1.AggregatorConfig.kriyaV3Version)
            ],
            typeArguments
          });
          const receiveCoin2 = txb.moveCall({
            target: `0x2::coin::from_balance`,
            arguments: [receive_balance_b],
            typeArguments: [typeArguments[1]]
          });
          return receiveCoin2;
        }
        txb.moveCall({
          target: "0x2::balance::destroy_zero",
          arguments: [receive_balance_b],
          typeArguments: [typeArguments[1]]
        });
        let BalanceB = txb.moveCall({
          target: "0x2::coin::into_balance",
          arguments: [coinA],
          typeArguments: [typeArguments[1]]
        });
        const [BalanceA] = txb.moveCall({
          target: "0x2::balance::zero",
          typeArguments: [typeArguments[0]]
        });
        txb.moveCall({
          target: `${config_1.AggregatorConfig.kriyaV3PackageId}::trade::repay_flash_swap`,
          arguments: [
            txb.object(poolId),
            receipt,
            BalanceA,
            BalanceB,
            txb.object(config_1.AggregatorConfig.kriyaV3Version)
          ],
          typeArguments
        });
        const receiveCoin = txb.moveCall({
          target: `0x2::coin::from_balance`,
          arguments: [receive_balance_a],
          typeArguments: [typeArguments[0]]
        });
        return receiveCoin;
      });
    }
  }
});

// node_modules/navi-sdk/dist/libs/Aggregator/Dex/aftermath.js
var require_aftermath = __commonJS({
  "node_modules/navi-sdk/dist/libs/Aggregator/Dex/aftermath.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.makeAftermathPTB = makeAftermathPTB;
    var config_1 = require_config();
    function makeAftermathPTB(txb, poolId, coinA, amountOut, a2b, typeArguments) {
      return __awaiter2(this, void 0, void 0, function* () {
        const args = [
          txb.object(poolId),
          txb.object(config_1.AggregatorConfig.aftermathPoolRegistry),
          txb.object(config_1.AggregatorConfig.aftermathFeeVault),
          txb.object(config_1.AggregatorConfig.aftermathTreasury),
          txb.object(config_1.AggregatorConfig.aftermathInsuranceFund),
          txb.object(config_1.AggregatorConfig.aftermathReferralVault),
          coinA,
          txb.pure.u64(amountOut),
          txb.pure.u64("800000000000000000")
          // 80%， use https://suivision.xyz/txblock/AvASModFbU6Bmu6FNghqBsVqktnhB9QZKQjdYfnuxNvo?tab=Overview as an reference
        ];
        const res = txb.moveCall({
          target: `${config_1.AggregatorConfig.aftermathPackageId}::swap::swap_exact_in`,
          typeArguments,
          arguments: args
        });
        return res;
      });
    }
  }
});

// node_modules/navi-sdk/dist/libs/Aggregator/Dex/KriyaV2.js
var require_KriyaV2 = __commonJS({
  "node_modules/navi-sdk/dist/libs/Aggregator/Dex/KriyaV2.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.makeKriyaV2PTB = makeKriyaV2PTB;
    var config_1 = require_config();
    function makeKriyaV2PTB(txb, poolId, byAmountIn, coinA, amount, a2b, typeArguments) {
      return __awaiter2(this, void 0, void 0, function* () {
        const func = a2b ? "swap_token_x" : "swap_token_y";
        const args = [
          txb.object(poolId),
          coinA,
          typeof amount === "number" ? txb.pure.u64(amount) : amount,
          txb.pure.u64(0)
        ];
        const [coinB] = txb.moveCall({
          target: `${config_1.AggregatorConfig.kriyaV2PackageId}::spot_dex::${func}`,
          typeArguments,
          arguments: args
        });
        return coinB;
      });
    }
  }
});

// node_modules/navi-sdk/dist/libs/Aggregator/Dex/deepbook.js
var require_deepbook = __commonJS({
  "node_modules/navi-sdk/dist/libs/Aggregator/Dex/deepbook.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.makeDeepbookPTB = makeDeepbookPTB;
    var config_1 = require_config();
    function makeDeepbookPTB(txb, poolId, coinA, amountLimit, a2b, typeArguments) {
      return __awaiter2(this, void 0, void 0, function* () {
        const func = a2b ? "swap_exact_base_for_quote_sponsored" : "swap_exact_quote_for_base_sponsored";
        const [baseCoinOut, quoteCoinOut] = txb.moveCall({
          target: `${config_1.AggregatorConfig.deepSponsoredPackageId}::sponsored_deep::${func}`,
          arguments: [
            txb.object(config_1.AggregatorConfig.deepSponsoredPoolConfig),
            txb.object(poolId),
            coinA,
            txb.pure.u64(amountLimit),
            txb.object(config_1.AggregatorConfig.clockAddress)
          ],
          typeArguments
        });
        return { baseCoinOut, quoteCoinOut };
      });
    }
  }
});

// node_modules/crypto-js/core.js
var require_core2 = __commonJS({
  "node_modules/crypto-js/core.js"(exports2, module2) {
    (function(root2, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory();
      } else if (typeof define === "function" && define.amd) {
        define([], factory);
      } else {
        root2.CryptoJS = factory();
      }
    })(exports2, function() {
      var CryptoJS = CryptoJS || function(Math2, undefined2) {
        var crypto2;
        if (typeof window !== "undefined" && window.crypto) {
          crypto2 = window.crypto;
        }
        if (typeof self !== "undefined" && self.crypto) {
          crypto2 = self.crypto;
        }
        if (typeof globalThis !== "undefined" && globalThis.crypto) {
          crypto2 = globalThis.crypto;
        }
        if (!crypto2 && typeof window !== "undefined" && window.msCrypto) {
          crypto2 = window.msCrypto;
        }
        if (!crypto2 && typeof global !== "undefined" && global.crypto) {
          crypto2 = global.crypto;
        }
        if (!crypto2 && typeof __require === "function") {
          try {
            crypto2 = require_crypto();
          } catch (err) {
          }
        }
        var cryptoSecureRandomInt = function() {
          if (crypto2) {
            if (typeof crypto2.getRandomValues === "function") {
              try {
                return crypto2.getRandomValues(new Uint32Array(1))[0];
              } catch (err) {
              }
            }
            if (typeof crypto2.randomBytes === "function") {
              try {
                return crypto2.randomBytes(4).readInt32LE();
              } catch (err) {
              }
            }
          }
          throw new Error("Native crypto module could not be used to get secure random number.");
        };
        var create2 = Object.create || /* @__PURE__ */ function() {
          function F() {
          }
          return function(obj) {
            var subtype;
            F.prototype = obj;
            subtype = new F();
            F.prototype = null;
            return subtype;
          };
        }();
        var C = {};
        var C_lib = C.lib = {};
        var Base = C_lib.Base = /* @__PURE__ */ function() {
          return {
            /**
             * Creates a new object that inherits from this object.
             *
             * @param {Object} overrides Properties to copy into the new object.
             *
             * @return {Object} The new object.
             *
             * @static
             *
             * @example
             *
             *     var MyType = CryptoJS.lib.Base.extend({
             *         field: 'value',
             *
             *         method: function () {
             *         }
             *     });
             */
            extend: function(overrides) {
              var subtype = create2(this);
              if (overrides) {
                subtype.mixIn(overrides);
              }
              if (!subtype.hasOwnProperty("init") || this.init === subtype.init) {
                subtype.init = function() {
                  subtype.$super.init.apply(this, arguments);
                };
              }
              subtype.init.prototype = subtype;
              subtype.$super = this;
              return subtype;
            },
            /**
             * Extends this object and runs the init method.
             * Arguments to create() will be passed to init().
             *
             * @return {Object} The new object.
             *
             * @static
             *
             * @example
             *
             *     var instance = MyType.create();
             */
            create: function() {
              var instance2 = this.extend();
              instance2.init.apply(instance2, arguments);
              return instance2;
            },
            /**
             * Initializes a newly created object.
             * Override this method to add some logic when your objects are created.
             *
             * @example
             *
             *     var MyType = CryptoJS.lib.Base.extend({
             *         init: function () {
             *             // ...
             *         }
             *     });
             */
            init: function() {
            },
            /**
             * Copies properties into this object.
             *
             * @param {Object} properties The properties to mix in.
             *
             * @example
             *
             *     MyType.mixIn({
             *         field: 'value'
             *     });
             */
            mixIn: function(properties) {
              for (var propertyName in properties) {
                if (properties.hasOwnProperty(propertyName)) {
                  this[propertyName] = properties[propertyName];
                }
              }
              if (properties.hasOwnProperty("toString")) {
                this.toString = properties.toString;
              }
            },
            /**
             * Creates a copy of this object.
             *
             * @return {Object} The clone.
             *
             * @example
             *
             *     var clone = instance.clone();
             */
            clone: function() {
              return this.init.prototype.extend(this);
            }
          };
        }();
        var WordArray = C_lib.WordArray = Base.extend({
          /**
           * Initializes a newly created word array.
           *
           * @param {Array} words (Optional) An array of 32-bit words.
           * @param {number} sigBytes (Optional) The number of significant bytes in the words.
           *
           * @example
           *
           *     var wordArray = CryptoJS.lib.WordArray.create();
           *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
           *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
           */
          init: function(words, sigBytes) {
            words = this.words = words || [];
            if (sigBytes != undefined2) {
              this.sigBytes = sigBytes;
            } else {
              this.sigBytes = words.length * 4;
            }
          },
          /**
           * Converts this word array to a string.
           *
           * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
           *
           * @return {string} The stringified word array.
           *
           * @example
           *
           *     var string = wordArray + '';
           *     var string = wordArray.toString();
           *     var string = wordArray.toString(CryptoJS.enc.Utf8);
           */
          toString: function(encoder) {
            return (encoder || Hex).stringify(this);
          },
          /**
           * Concatenates a word array to this word array.
           *
           * @param {WordArray} wordArray The word array to append.
           *
           * @return {WordArray} This word array.
           *
           * @example
           *
           *     wordArray1.concat(wordArray2);
           */
          concat: function(wordArray) {
            var thisWords = this.words;
            var thatWords = wordArray.words;
            var thisSigBytes = this.sigBytes;
            var thatSigBytes = wordArray.sigBytes;
            this.clamp();
            if (thisSigBytes % 4) {
              for (var i = 0; i < thatSigBytes; i++) {
                var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 255;
                thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;
              }
            } else {
              for (var j = 0; j < thatSigBytes; j += 4) {
                thisWords[thisSigBytes + j >>> 2] = thatWords[j >>> 2];
              }
            }
            this.sigBytes += thatSigBytes;
            return this;
          },
          /**
           * Removes insignificant bits.
           *
           * @example
           *
           *     wordArray.clamp();
           */
          clamp: function() {
            var words = this.words;
            var sigBytes = this.sigBytes;
            words[sigBytes >>> 2] &= 4294967295 << 32 - sigBytes % 4 * 8;
            words.length = Math2.ceil(sigBytes / 4);
          },
          /**
           * Creates a copy of this word array.
           *
           * @return {WordArray} The clone.
           *
           * @example
           *
           *     var clone = wordArray.clone();
           */
          clone: function() {
            var clone = Base.clone.call(this);
            clone.words = this.words.slice(0);
            return clone;
          },
          /**
           * Creates a word array filled with random bytes.
           *
           * @param {number} nBytes The number of random bytes to generate.
           *
           * @return {WordArray} The random word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.lib.WordArray.random(16);
           */
          random: function(nBytes) {
            var words = [];
            for (var i = 0; i < nBytes; i += 4) {
              words.push(cryptoSecureRandomInt());
            }
            return new WordArray.init(words, nBytes);
          }
        });
        var C_enc = C.enc = {};
        var Hex = C_enc.Hex = {
          /**
           * Converts a word array to a hex string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The hex string.
           *
           * @static
           *
           * @example
           *
           *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var hexChars = [];
            for (var i = 0; i < sigBytes; i++) {
              var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              hexChars.push((bite >>> 4).toString(16));
              hexChars.push((bite & 15).toString(16));
            }
            return hexChars.join("");
          },
          /**
           * Converts a hex string to a word array.
           *
           * @param {string} hexStr The hex string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
           */
          parse: function(hexStr) {
            var hexStrLength = hexStr.length;
            var words = [];
            for (var i = 0; i < hexStrLength; i += 2) {
              words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;
            }
            return new WordArray.init(words, hexStrLength / 2);
          }
        };
        var Latin1 = C_enc.Latin1 = {
          /**
           * Converts a word array to a Latin1 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The Latin1 string.
           *
           * @static
           *
           * @example
           *
           *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var latin1Chars = [];
            for (var i = 0; i < sigBytes; i++) {
              var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              latin1Chars.push(String.fromCharCode(bite));
            }
            return latin1Chars.join("");
          },
          /**
           * Converts a Latin1 string to a word array.
           *
           * @param {string} latin1Str The Latin1 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
           */
          parse: function(latin1Str) {
            var latin1StrLength = latin1Str.length;
            var words = [];
            for (var i = 0; i < latin1StrLength; i++) {
              words[i >>> 2] |= (latin1Str.charCodeAt(i) & 255) << 24 - i % 4 * 8;
            }
            return new WordArray.init(words, latin1StrLength);
          }
        };
        var Utf8 = C_enc.Utf8 = {
          /**
           * Converts a word array to a UTF-8 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The UTF-8 string.
           *
           * @static
           *
           * @example
           *
           *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
           */
          stringify: function(wordArray) {
            try {
              return decodeURIComponent(escape(Latin1.stringify(wordArray)));
            } catch (e) {
              throw new Error("Malformed UTF-8 data");
            }
          },
          /**
           * Converts a UTF-8 string to a word array.
           *
           * @param {string} utf8Str The UTF-8 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
           */
          parse: function(utf8Str) {
            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
          }
        };
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
          /**
           * Resets this block algorithm's data buffer to its initial state.
           *
           * @example
           *
           *     bufferedBlockAlgorithm.reset();
           */
          reset: function() {
            this._data = new WordArray.init();
            this._nDataBytes = 0;
          },
          /**
           * Adds new data to this block algorithm's buffer.
           *
           * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
           *
           * @example
           *
           *     bufferedBlockAlgorithm._append('data');
           *     bufferedBlockAlgorithm._append(wordArray);
           */
          _append: function(data) {
            if (typeof data == "string") {
              data = Utf8.parse(data);
            }
            this._data.concat(data);
            this._nDataBytes += data.sigBytes;
          },
          /**
           * Processes available data blocks.
           *
           * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
           *
           * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
           *
           * @return {WordArray} The processed data.
           *
           * @example
           *
           *     var processedData = bufferedBlockAlgorithm._process();
           *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
           */
          _process: function(doFlush) {
            var processedWords;
            var data = this._data;
            var dataWords = data.words;
            var dataSigBytes = data.sigBytes;
            var blockSize = this.blockSize;
            var blockSizeBytes = blockSize * 4;
            var nBlocksReady = dataSigBytes / blockSizeBytes;
            if (doFlush) {
              nBlocksReady = Math2.ceil(nBlocksReady);
            } else {
              nBlocksReady = Math2.max((nBlocksReady | 0) - this._minBufferSize, 0);
            }
            var nWordsReady = nBlocksReady * blockSize;
            var nBytesReady = Math2.min(nWordsReady * 4, dataSigBytes);
            if (nWordsReady) {
              for (var offset2 = 0; offset2 < nWordsReady; offset2 += blockSize) {
                this._doProcessBlock(dataWords, offset2);
              }
              processedWords = dataWords.splice(0, nWordsReady);
              data.sigBytes -= nBytesReady;
            }
            return new WordArray.init(processedWords, nBytesReady);
          },
          /**
           * Creates a copy of this object.
           *
           * @return {Object} The clone.
           *
           * @example
           *
           *     var clone = bufferedBlockAlgorithm.clone();
           */
          clone: function() {
            var clone = Base.clone.call(this);
            clone._data = this._data.clone();
            return clone;
          },
          _minBufferSize: 0
        });
        var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
          /**
           * Configuration options.
           */
          cfg: Base.extend(),
          /**
           * Initializes a newly created hasher.
           *
           * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
           *
           * @example
           *
           *     var hasher = CryptoJS.algo.SHA256.create();
           */
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
            this.reset();
          },
          /**
           * Resets this hasher to its initial state.
           *
           * @example
           *
           *     hasher.reset();
           */
          reset: function() {
            BufferedBlockAlgorithm.reset.call(this);
            this._doReset();
          },
          /**
           * Updates this hasher with a message.
           *
           * @param {WordArray|string} messageUpdate The message to append.
           *
           * @return {Hasher} This hasher.
           *
           * @example
           *
           *     hasher.update('message');
           *     hasher.update(wordArray);
           */
          update: function(messageUpdate) {
            this._append(messageUpdate);
            this._process();
            return this;
          },
          /**
           * Finalizes the hash computation.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} messageUpdate (Optional) A final message update.
           *
           * @return {WordArray} The hash.
           *
           * @example
           *
           *     var hash = hasher.finalize();
           *     var hash = hasher.finalize('message');
           *     var hash = hasher.finalize(wordArray);
           */
          finalize: function(messageUpdate) {
            if (messageUpdate) {
              this._append(messageUpdate);
            }
            var hash = this._doFinalize();
            return hash;
          },
          blockSize: 512 / 32,
          /**
           * Creates a shortcut function to a hasher's object interface.
           *
           * @param {Hasher} hasher The hasher to create a helper for.
           *
           * @return {Function} The shortcut function.
           *
           * @static
           *
           * @example
           *
           *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
           */
          _createHelper: function(hasher) {
            return function(message, cfg) {
              return new hasher.init(cfg).finalize(message);
            };
          },
          /**
           * Creates a shortcut function to the HMAC's object interface.
           *
           * @param {Hasher} hasher The hasher to use in this HMAC helper.
           *
           * @return {Function} The shortcut function.
           *
           * @static
           *
           * @example
           *
           *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
           */
          _createHmacHelper: function(hasher) {
            return function(message, key) {
              return new C_algo.HMAC.init(hasher, key).finalize(message);
            };
          }
        });
        var C_algo = C.algo = {};
        return C;
      }(Math);
      return CryptoJS;
    });
  }
});

// node_modules/crypto-js/x64-core.js
var require_x64_core = __commonJS({
  "node_modules/crypto-js/x64-core.js"(exports2, module2) {
    (function(root2, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core2());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root2.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function(undefined2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var X32WordArray = C_lib.WordArray;
        var C_x64 = C.x64 = {};
        var X64Word = C_x64.Word = Base.extend({
          /**
           * Initializes a newly created 64-bit word.
           *
           * @param {number} high The high 32 bits.
           * @param {number} low The low 32 bits.
           *
           * @example
           *
           *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
           */
          init: function(high, low) {
            this.high = high;
            this.low = low;
          }
          /**
           * Bitwise NOTs this word.
           *
           * @return {X64Word} A new x64-Word object after negating.
           *
           * @example
           *
           *     var negated = x64Word.not();
           */
          // not: function () {
          // var high = ~this.high;
          // var low = ~this.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Bitwise ANDs this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to AND with this word.
           *
           * @return {X64Word} A new x64-Word object after ANDing.
           *
           * @example
           *
           *     var anded = x64Word.and(anotherX64Word);
           */
          // and: function (word) {
          // var high = this.high & word.high;
          // var low = this.low & word.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Bitwise ORs this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to OR with this word.
           *
           * @return {X64Word} A new x64-Word object after ORing.
           *
           * @example
           *
           *     var ored = x64Word.or(anotherX64Word);
           */
          // or: function (word) {
          // var high = this.high | word.high;
          // var low = this.low | word.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Bitwise XORs this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to XOR with this word.
           *
           * @return {X64Word} A new x64-Word object after XORing.
           *
           * @example
           *
           *     var xored = x64Word.xor(anotherX64Word);
           */
          // xor: function (word) {
          // var high = this.high ^ word.high;
          // var low = this.low ^ word.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Shifts this word n bits to the left.
           *
           * @param {number} n The number of bits to shift.
           *
           * @return {X64Word} A new x64-Word object after shifting.
           *
           * @example
           *
           *     var shifted = x64Word.shiftL(25);
           */
          // shiftL: function (n) {
          // if (n < 32) {
          // var high = (this.high << n) | (this.low >>> (32 - n));
          // var low = this.low << n;
          // } else {
          // var high = this.low << (n - 32);
          // var low = 0;
          // }
          // return X64Word.create(high, low);
          // },
          /**
           * Shifts this word n bits to the right.
           *
           * @param {number} n The number of bits to shift.
           *
           * @return {X64Word} A new x64-Word object after shifting.
           *
           * @example
           *
           *     var shifted = x64Word.shiftR(7);
           */
          // shiftR: function (n) {
          // if (n < 32) {
          // var low = (this.low >>> n) | (this.high << (32 - n));
          // var high = this.high >>> n;
          // } else {
          // var low = this.high >>> (n - 32);
          // var high = 0;
          // }
          // return X64Word.create(high, low);
          // },
          /**
           * Rotates this word n bits to the left.
           *
           * @param {number} n The number of bits to rotate.
           *
           * @return {X64Word} A new x64-Word object after rotating.
           *
           * @example
           *
           *     var rotated = x64Word.rotL(25);
           */
          // rotL: function (n) {
          // return this.shiftL(n).or(this.shiftR(64 - n));
          // },
          /**
           * Rotates this word n bits to the right.
           *
           * @param {number} n The number of bits to rotate.
           *
           * @return {X64Word} A new x64-Word object after rotating.
           *
           * @example
           *
           *     var rotated = x64Word.rotR(7);
           */
          // rotR: function (n) {
          // return this.shiftR(n).or(this.shiftL(64 - n));
          // },
          /**
           * Adds this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to add with this word.
           *
           * @return {X64Word} A new x64-Word object after adding.
           *
           * @example
           *
           *     var added = x64Word.add(anotherX64Word);
           */
          // add: function (word) {
          // var low = (this.low + word.low) | 0;
          // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
          // var high = (this.high + word.high + carry) | 0;
          // return X64Word.create(high, low);
          // }
        });
        var X64WordArray = C_x64.WordArray = Base.extend({
          /**
           * Initializes a newly created word array.
           *
           * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
           * @param {number} sigBytes (Optional) The number of significant bytes in the words.
           *
           * @example
           *
           *     var wordArray = CryptoJS.x64.WordArray.create();
           *
           *     var wordArray = CryptoJS.x64.WordArray.create([
           *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
           *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
           *     ]);
           *
           *     var wordArray = CryptoJS.x64.WordArray.create([
           *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
           *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
           *     ], 10);
           */
          init: function(words, sigBytes) {
            words = this.words = words || [];
            if (sigBytes != undefined2) {
              this.sigBytes = sigBytes;
            } else {
              this.sigBytes = words.length * 8;
            }
          },
          /**
           * Converts this 64-bit word array to a 32-bit word array.
           *
           * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
           *
           * @example
           *
           *     var x32WordArray = x64WordArray.toX32();
           */
          toX32: function() {
            var x64Words = this.words;
            var x64WordsLength = x64Words.length;
            var x32Words = [];
            for (var i = 0; i < x64WordsLength; i++) {
              var x64Word = x64Words[i];
              x32Words.push(x64Word.high);
              x32Words.push(x64Word.low);
            }
            return X32WordArray.create(x32Words, this.sigBytes);
          },
          /**
           * Creates a copy of this word array.
           *
           * @return {X64WordArray} The clone.
           *
           * @example
           *
           *     var clone = x64WordArray.clone();
           */
          clone: function() {
            var clone = Base.clone.call(this);
            var words = clone.words = this.words.slice(0);
            var wordsLength = words.length;
            for (var i = 0; i < wordsLength; i++) {
              words[i] = words[i].clone();
            }
            return clone;
          }
        });
      })();
      return CryptoJS;
    });
  }
});

// node_modules/crypto-js/lib-typedarrays.js
var require_lib_typedarrays = __commonJS({
  "node_modules/crypto-js/lib-typedarrays.js"(exports2, module2) {
    (function(root2, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core2());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root2.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        if (typeof ArrayBuffer != "function") {
          return;
        }
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var superInit = WordArray.init;
        var subInit = WordArray.init = function(typedArray) {
          if (typedArray instanceof ArrayBuffer) {
            typedArray = new Uint8Array(typedArray);
          }
          if (typedArray instanceof Int8Array || typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray || typedArray instanceof Int16Array || typedArray instanceof Uint16Array || typedArray instanceof Int32Array || typedArray instanceof Uint32Array || typedArray instanceof Float32Array || typedArray instanceof Float64Array) {
            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
          }
          if (typedArray instanceof Uint8Array) {
            var typedArrayByteLength = typedArray.byteLength;
            var words = [];
            for (var i = 0; i < typedArrayByteLength; i++) {
              words[i >>> 2] |= typedArray[i] << 24 - i % 4 * 8;
            }
            superInit.call(this, words, typedArrayByteLength);
          } else {
            superInit.apply(this, arguments);
          }
        };
        subInit.prototype = WordArray;
      })();
      return CryptoJS.lib.WordArray;
    });
  }
});

// node_modules/crypto-js/enc-utf16.js
var require_enc_utf16 = __commonJS({
  "node_modules/crypto-js/enc-utf16.js"(exports2, module2) {
    (function(root2, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core2());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root2.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {
          /**
           * Converts a word array to a UTF-16 BE string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The UTF-16 BE string.
           *
           * @static
           *
           * @example
           *
           *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var utf16Chars = [];
            for (var i = 0; i < sigBytes; i += 2) {
              var codePoint = words[i >>> 2] >>> 16 - i % 4 * 8 & 65535;
              utf16Chars.push(String.fromCharCode(codePoint));
            }
            return utf16Chars.join("");
          },
          /**
           * Converts a UTF-16 BE string to a word array.
           *
           * @param {string} utf16Str The UTF-16 BE string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
           */
          parse: function(utf16Str) {
            var utf16StrLength = utf16Str.length;
            var words = [];
            for (var i = 0; i < utf16StrLength; i++) {
              words[i >>> 1] |= utf16Str.charCodeAt(i) << 16 - i % 2 * 16;
            }
            return WordArray.create(words, utf16StrLength * 2);
          }
        };
        C_enc.Utf16LE = {
          /**
           * Converts a word array to a UTF-16 LE string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The UTF-16 LE string.
           *
           * @static
           *
           * @example
           *
           *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var utf16Chars = [];
            for (var i = 0; i < sigBytes; i += 2) {
              var codePoint = swapEndian(words[i >>> 2] >>> 16 - i % 4 * 8 & 65535);
              utf16Chars.push(String.fromCharCode(codePoint));
            }
            return utf16Chars.join("");
          },
          /**
           * Converts a UTF-16 LE string to a word array.
           *
           * @param {string} utf16Str The UTF-16 LE string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
           */
          parse: function(utf16Str) {
            var utf16StrLength = utf16Str.length;
            var words = [];
            for (var i = 0; i < utf16StrLength; i++) {
              words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << 16 - i % 2 * 16);
            }
            return WordArray.create(words, utf16StrLength * 2);
          }
        };
        function swapEndian(word) {
          return word << 8 & 4278255360 | word >>> 8 & 16711935;
        }
      })();
      return CryptoJS.enc.Utf16;
    });
  }
});

// node_modules/crypto-js/enc-base64.js
var require_enc_base64 = __commonJS({
  "node_modules/crypto-js/enc-base64.js"(exports2, module2) {
    (function(root2, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core2());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root2.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        var Base64 = C_enc.Base64 = {
          /**
           * Converts a word array to a Base64 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The Base64 string.
           *
           * @static
           *
           * @example
           *
           *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var map = this._map;
            wordArray.clamp();
            var base64Chars = [];
            for (var i = 0; i < sigBytes; i += 3) {
              var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 255;
              var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 255;
              var triplet = byte1 << 16 | byte2 << 8 | byte3;
              for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {
                base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 63));
              }
            }
            var paddingChar = map.charAt(64);
            if (paddingChar) {
              while (base64Chars.length % 4) {
                base64Chars.push(paddingChar);
              }
            }
            return base64Chars.join("");
          },
          /**
           * Converts a Base64 string to a word array.
           *
           * @param {string} base64Str The Base64 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
           */
          parse: function(base64Str) {
            var base64StrLength = base64Str.length;
            var map = this._map;
            var reverseMap = this._reverseMap;
            if (!reverseMap) {
              reverseMap = this._reverseMap = [];
              for (var j = 0; j < map.length; j++) {
                reverseMap[map.charCodeAt(j)] = j;
              }
            }
            var paddingChar = map.charAt(64);
            if (paddingChar) {
              var paddingIndex = base64Str.indexOf(paddingChar);
              if (paddingIndex !== -1) {
                base64StrLength = paddingIndex;
              }
            }
            return parseLoop(base64Str, base64StrLength, reverseMap);
          },
          _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
        };
        function parseLoop(base64Str, base64StrLength, reverseMap) {
          var words = [];
          var nBytes = 0;
          for (var i = 0; i < base64StrLength; i++) {
            if (i % 4) {
              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;
              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;
              var bitsCombined = bits1 | bits2;
              words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
              nBytes++;
            }
          }
          return WordArray.create(words, nBytes);
        }
      })();
      return CryptoJS.enc.Base64;
    });
  }
});

// node_modules/crypto-js/enc-base64url.js
var require_enc_base64url = __commonJS({
  "node_modules/crypto-js/enc-base64url.js"(exports2, module2) {
    (function(root2, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core2());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root2.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        var Base64url = C_enc.Base64url = {
          /**
           * Converts a word array to a Base64url string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @param {boolean} urlSafe Whether to use url safe
           *
           * @return {string} The Base64url string.
           *
           * @static
           *
           * @example
           *
           *     var base64String = CryptoJS.enc.Base64url.stringify(wordArray);
           */
          stringify: function(wordArray, urlSafe) {
            if (urlSafe === void 0) {
              urlSafe = true;
            }
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var map = urlSafe ? this._safe_map : this._map;
            wordArray.clamp();
            var base64Chars = [];
            for (var i = 0; i < sigBytes; i += 3) {
              var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 255;
              var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 255;
              var triplet = byte1 << 16 | byte2 << 8 | byte3;
              for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {
                base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 63));
              }
            }
            var paddingChar = map.charAt(64);
            if (paddingChar) {
              while (base64Chars.length % 4) {
                base64Chars.push(paddingChar);
              }
            }
            return base64Chars.join("");
          },
          /**
           * Converts a Base64url string to a word array.
           *
           * @param {string} base64Str The Base64url string.
           *
           * @param {boolean} urlSafe Whether to use url safe
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Base64url.parse(base64String);
           */
          parse: function(base64Str, urlSafe) {
            if (urlSafe === void 0) {
              urlSafe = true;
            }
            var base64StrLength = base64Str.length;
            var map = urlSafe ? this._safe_map : this._map;
            var reverseMap = this._reverseMap;
            if (!reverseMap) {
              reverseMap = this._reverseMap = [];
              for (var j = 0; j < map.length; j++) {
                reverseMap[map.charCodeAt(j)] = j;
              }
            }
            var paddingChar = map.charAt(64);
            if (paddingChar) {
              var paddingIndex = base64Str.indexOf(paddingChar);
              if (paddingIndex !== -1) {
                base64StrLength = paddingIndex;
              }
            }
            return parseLoop(base64Str, base64StrLength, reverseMap);
          },
          _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
          _safe_map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"
        };
        function parseLoop(base64Str, base64StrLength, reverseMap) {
          var words = [];
          var nBytes = 0;
          for (var i = 0; i < base64StrLength; i++) {
            if (i % 4) {
              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;
              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;
              var bitsCombined = bits1 | bits2;
              words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
              nBytes++;
            }
          }
          return WordArray.create(words, nBytes);
        }
      })();
      return CryptoJS.enc.Base64url;
    });
  }
});

// node_modules/crypto-js/md5.js
var require_md5 = __commonJS({
  "node_modules/crypto-js/md5.js"(exports2, module2) {
    (function(root2, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core2());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root2.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function(Math2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var T = [];
        (function() {
          for (var i = 0; i < 64; i++) {
            T[i] = Math2.abs(Math2.sin(i + 1)) * 4294967296 | 0;
          }
        })();
        var MD5 = C_algo.MD5 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              1732584193,
              4023233417,
              2562383102,
              271733878
            ]);
          },
          _doProcessBlock: function(M, offset2) {
            for (var i = 0; i < 16; i++) {
              var offset_i = offset2 + i;
              var M_offset_i = M[offset_i];
              M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
            }
            var H = this._hash.words;
            var M_offset_0 = M[offset2 + 0];
            var M_offset_1 = M[offset2 + 1];
            var M_offset_2 = M[offset2 + 2];
            var M_offset_3 = M[offset2 + 3];
            var M_offset_4 = M[offset2 + 4];
            var M_offset_5 = M[offset2 + 5];
            var M_offset_6 = M[offset2 + 6];
            var M_offset_7 = M[offset2 + 7];
            var M_offset_8 = M[offset2 + 8];
            var M_offset_9 = M[offset2 + 9];
            var M_offset_10 = M[offset2 + 10];
            var M_offset_11 = M[offset2 + 11];
            var M_offset_12 = M[offset2 + 12];
            var M_offset_13 = M[offset2 + 13];
            var M_offset_14 = M[offset2 + 14];
            var M_offset_15 = M[offset2 + 15];
            var a = H[0];
            var b = H[1];
            var c = H[2];
            var d = H[3];
            a = FF(a, b, c, d, M_offset_0, 7, T[0]);
            d = FF(d, a, b, c, M_offset_1, 12, T[1]);
            c = FF(c, d, a, b, M_offset_2, 17, T[2]);
            b = FF(b, c, d, a, M_offset_3, 22, T[3]);
            a = FF(a, b, c, d, M_offset_4, 7, T[4]);
            d = FF(d, a, b, c, M_offset_5, 12, T[5]);
            c = FF(c, d, a, b, M_offset_6, 17, T[6]);
            b = FF(b, c, d, a, M_offset_7, 22, T[7]);
            a = FF(a, b, c, d, M_offset_8, 7, T[8]);
            d = FF(d, a, b, c, M_offset_9, 12, T[9]);
            c = FF(c, d, a, b, M_offset_10, 17, T[10]);
            b = FF(b, c, d, a, M_offset_11, 22, T[11]);
            a = FF(a, b, c, d, M_offset_12, 7, T[12]);
            d = FF(d, a, b, c, M_offset_13, 12, T[13]);
            c = FF(c, d, a, b, M_offset_14, 17, T[14]);
            b = FF(b, c, d, a, M_offset_15, 22, T[15]);
            a = GG(a, b, c, d, M_offset_1, 5, T[16]);
            d = GG(d, a, b, c, M_offset_6, 9, T[17]);
            c = GG(c, d, a, b, M_offset_11, 14, T[18]);
            b = GG(b, c, d, a, M_offset_0, 20, T[19]);
            a = GG(a, b, c, d, M_offset_5, 5, T[20]);
            d = GG(d, a, b, c, M_offset_10, 9, T[21]);
            c = GG(c, d, a, b, M_offset_15, 14, T[22]);
            b = GG(b, c, d, a, M_offset_4, 20, T[23]);
            a = GG(a, b, c, d, M_offset_9, 5, T[24]);
            d = GG(d, a, b, c, M_offset_14, 9, T[25]);
            c = GG(c, d, a, b, M_offset_3, 14, T[26]);
            b = GG(b, c, d, a, M_offset_8, 20, T[27]);
            a = GG(a, b, c, d, M_offset_13, 5, T[28]);
            d = GG(d, a, b, c, M_offset_2, 9, T[29]);
            c = GG(c, d, a, b, M_offset_7, 14, T[30]);
            b = GG(b, c, d, a, M_offset_12, 20, T[31]);
            a = HH(a, b, c, d, M_offset_5, 4, T[32]);
            d = HH(d, a, b, c, M_offset_8, 11, T[33]);
            c = HH(c, d, a, b, M_offset_11, 16, T[34]);
            b = HH(b, c, d, a, M_offset_14, 23, T[35]);
            a = HH(a, b, c, d, M_offset_1, 4, T[36]);
            d = HH(d, a, b, c, M_offset_4, 11, T[37]);
            c = HH(c, d, a, b, M_offset_7, 16, T[38]);
            b = HH(b, c, d, a, M_offset_10, 23, T[39]);
            a = HH(a, b, c, d, M_offset_13, 4, T[40]);
            d = HH(d, a, b, c, M_offset_0, 11, T[41]);
            c = HH(c, d, a, b, M_offset_3, 16, T[42]);
            b = HH(b, c, d, a, M_offset_6, 23, T[43]);
            a = HH(a, b, c, d, M_offset_9, 4, T[44]);
            d = HH(d, a, b, c, M_offset_12, 11, T[45]);
            c = HH(c, d, a, b, M_offset_15, 16, T[46]);
            b = HH(b, c, d, a, M_offset_2, 23, T[47]);
            a = II(a, b, c, d, M_offset_0, 6, T[48]);
            d = II(d, a, b, c, M_offset_7, 10, T[49]);
            c = II(c, d, a, b, M_offset_14, 15, T[50]);
            b = II(b, c, d, a, M_offset_5, 21, T[51]);
            a = II(a, b, c, d, M_offset_12, 6, T[52]);
            d = II(d, a, b, c, M_offset_3, 10, T[53]);
            c = II(c, d, a, b, M_offset_10, 15, T[54]);
            b = II(b, c, d, a, M_offset_1, 21, T[55]);
            a = II(a, b, c, d, M_offset_8, 6, T[56]);
            d = II(d, a, b, c, M_offset_15, 10, T[57]);
            c = II(c, d, a, b, M_offset_6, 15, T[58]);
            b = II(b, c, d, a, M_offset_13, 21, T[59]);
            a = II(a, b, c, d, M_offset_4, 6, T[60]);
            d = II(d, a, b, c, M_offset_11, 10, T[61]);
            c = II(c, d, a, b, M_offset_2, 15, T[62]);
            b = II(b, c, d, a, M_offset_9, 21, T[63]);
            H[0] = H[0] + a | 0;
            H[1] = H[1] + b | 0;
            H[2] = H[2] + c | 0;
            H[3] = H[3] + d | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            var nBitsTotalH = Math2.floor(nBitsTotal / 4294967296);
            var nBitsTotalL = nBitsTotal;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 16711935 | (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 4278255360;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 16711935 | (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 4278255360;
            data.sigBytes = (dataWords.length + 1) * 4;
            this._process();
            var hash = this._hash;
            var H = hash.words;
            for (var i = 0; i < 4; i++) {
              var H_i = H[i];
              H[i] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
            }
            return hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        function FF(a, b, c, d, x, s, t) {
          var n = a + (b & c | ~b & d) + x + t;
          return (n << s | n >>> 32 - s) + b;
        }
        function GG(a, b, c, d, x, s, t) {
          var n = a + (b & d | c & ~d) + x + t;
          return (n << s | n >>> 32 - s) + b;
        }
        function HH(a, b, c, d, x, s, t) {
          var n = a + (b ^ c ^ d) + x + t;
          return (n << s | n >>> 32 - s) + b;
        }
        function II(a, b, c, d, x, s, t) {
          var n = a + (c ^ (b | ~d)) + x + t;
          return (n << s | n >>> 32 - s) + b;
        }
        C.MD5 = Hasher._createHelper(MD5);
        C.HmacMD5 = Hasher._createHmacHelper(MD5);
      })(Math);
      return CryptoJS.MD5;
    });
  }
});

// node_modules/crypto-js/sha1.js
var require_sha1 = __commonJS({
  "node_modules/crypto-js/sha1.js"(exports2, module2) {
    (function(root2, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core2());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root2.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var W = [];
        var SHA1 = C_algo.SHA1 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              1732584193,
              4023233417,
              2562383102,
              271733878,
              3285377520
            ]);
          },
          _doProcessBlock: function(M, offset2) {
            var H = this._hash.words;
            var a = H[0];
            var b = H[1];
            var c = H[2];
            var d = H[3];
            var e = H[4];
            for (var i = 0; i < 80; i++) {
              if (i < 16) {
                W[i] = M[offset2 + i] | 0;
              } else {
                var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
                W[i] = n << 1 | n >>> 31;
              }
              var t = (a << 5 | a >>> 27) + e + W[i];
              if (i < 20) {
                t += (b & c | ~b & d) + 1518500249;
              } else if (i < 40) {
                t += (b ^ c ^ d) + 1859775393;
              } else if (i < 60) {
                t += (b & c | b & d | c & d) - 1894007588;
              } else {
                t += (b ^ c ^ d) - 899497514;
              }
              e = d;
              d = c;
              c = b << 30 | b >>> 2;
              b = a;
              a = t;
            }
            H[0] = H[0] + a | 0;
            H[1] = H[1] + b | 0;
            H[2] = H[2] + c | 0;
            H[3] = H[3] + d | 0;
            H[4] = H[4] + e | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            return this._hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        C.SHA1 = Hasher._createHelper(SHA1);
        C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
      })();
      return CryptoJS.SHA1;
    });
  }
});

// node_modules/crypto-js/sha256.js
var require_sha2562 = __commonJS({
  "node_modules/crypto-js/sha256.js"(exports2, module2) {
    (function(root2, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core2());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root2.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function(Math2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var H = [];
        var K2 = [];
        (function() {
          function isPrime(n2) {
            var sqrtN = Math2.sqrt(n2);
            for (var factor = 2; factor <= sqrtN; factor++) {
              if (!(n2 % factor)) {
                return false;
              }
            }
            return true;
          }
          function getFractionalBits(n2) {
            return (n2 - (n2 | 0)) * 4294967296 | 0;
          }
          var n = 2;
          var nPrime = 0;
          while (nPrime < 64) {
            if (isPrime(n)) {
              if (nPrime < 8) {
                H[nPrime] = getFractionalBits(Math2.pow(n, 1 / 2));
              }
              K2[nPrime] = getFractionalBits(Math2.pow(n, 1 / 3));
              nPrime++;
            }
            n++;
          }
        })();
        var W = [];
        var SHA256 = C_algo.SHA256 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init(H.slice(0));
          },
          _doProcessBlock: function(M, offset2) {
            var H2 = this._hash.words;
            var a = H2[0];
            var b = H2[1];
            var c = H2[2];
            var d = H2[3];
            var e = H2[4];
            var f2 = H2[5];
            var g = H2[6];
            var h = H2[7];
            for (var i = 0; i < 64; i++) {
              if (i < 16) {
                W[i] = M[offset2 + i] | 0;
              } else {
                var gamma0x = W[i - 15];
                var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
                var gamma1x = W[i - 2];
                var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
                W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
              }
              var ch = e & f2 ^ ~e & g;
              var maj = a & b ^ a & c ^ b & c;
              var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);
              var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);
              var t1 = h + sigma1 + ch + K2[i] + W[i];
              var t2 = sigma0 + maj;
              h = g;
              g = f2;
              f2 = e;
              e = d + t1 | 0;
              d = c;
              c = b;
              b = a;
              a = t1 + t2 | 0;
            }
            H2[0] = H2[0] + a | 0;
            H2[1] = H2[1] + b | 0;
            H2[2] = H2[2] + c | 0;
            H2[3] = H2[3] + d | 0;
            H2[4] = H2[4] + e | 0;
            H2[5] = H2[5] + f2 | 0;
            H2[6] = H2[6] + g | 0;
            H2[7] = H2[7] + h | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math2.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            return this._hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        C.SHA256 = Hasher._createHelper(SHA256);
        C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
      })(Math);
      return CryptoJS.SHA256;
    });
  }
});

// node_modules/crypto-js/sha224.js
var require_sha224 = __commonJS({
  "node_modules/crypto-js/sha224.js"(exports2, module2) {
    (function(root2, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core2(), require_sha2562());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./sha256"], factory);
      } else {
        factory(root2.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var SHA256 = C_algo.SHA256;
        var SHA224 = C_algo.SHA224 = SHA256.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              3238371032,
              914150663,
              812702999,
              4144912697,
              4290775857,
              1750603025,
              1694076839,
              3204075428
            ]);
          },
          _doFinalize: function() {
            var hash = SHA256._doFinalize.call(this);
            hash.sigBytes -= 4;
            return hash;
          }
        });
        C.SHA224 = SHA256._createHelper(SHA224);
        C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
      })();
      return CryptoJS.SHA224;
    });
  }
});

// node_modules/crypto-js/sha512.js
var require_sha5122 = __commonJS({
  "node_modules/crypto-js/sha512.js"(exports2, module2) {
    (function(root2, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core2(), require_x64_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core"], factory);
      } else {
        factory(root2.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Hasher = C_lib.Hasher;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var X64WordArray = C_x64.WordArray;
        var C_algo = C.algo;
        function X64Word_create() {
          return X64Word.create.apply(X64Word, arguments);
        }
        var K2 = [
          X64Word_create(1116352408, 3609767458),
          X64Word_create(1899447441, 602891725),
          X64Word_create(3049323471, 3964484399),
          X64Word_create(3921009573, 2173295548),
          X64Word_create(961987163, 4081628472),
          X64Word_create(1508970993, 3053834265),
          X64Word_create(2453635748, 2937671579),
          X64Word_create(2870763221, 3664609560),
          X64Word_create(3624381080, 2734883394),
          X64Word_create(310598401, 1164996542),
          X64Word_create(607225278, 1323610764),
          X64Word_create(1426881987, 3590304994),
          X64Word_create(1925078388, 4068182383),
          X64Word_create(2162078206, 991336113),
          X64Word_create(2614888103, 633803317),
          X64Word_create(3248222580, 3479774868),
          X64Word_create(3835390401, 2666613458),
          X64Word_create(4022224774, 944711139),
          X64Word_create(264347078, 2341262773),
          X64Word_create(604807628, 2007800933),
          X64Word_create(770255983, 1495990901),
          X64Word_create(1249150122, 1856431235),
          X64Word_create(1555081692, 3175218132),
          X64Word_create(1996064986, 2198950837),
          X64Word_create(2554220882, 3999719339),
          X64Word_create(2821834349, 766784016),
          X64Word_create(2952996808, 2566594879),
          X64Word_create(3210313671, 3203337956),
          X64Word_create(3336571891, 1034457026),
          X64Word_create(3584528711, 2466948901),
          X64Word_create(113926993, 3758326383),
          X64Word_create(338241895, 168717936),
          X64Word_create(666307205, 1188179964),
          X64Word_create(773529912, 1546045734),
          X64Word_create(1294757372, 1522805485),
          X64Word_create(1396182291, 2643833823),
          X64Word_create(1695183700, 2343527390),
          X64Word_create(1986661051, 1014477480),
          X64Word_create(2177026350, 1206759142),
          X64Word_create(2456956037, 344077627),
          X64Word_create(2730485921, 1290863460),
          X64Word_create(2820302411, 3158454273),
          X64Word_create(3259730800, 3505952657),
          X64Word_create(3345764771, 106217008),
          X64Word_create(3516065817, 3606008344),
          X64Word_create(3600352804, 1432725776),
          X64Word_create(4094571909, 1467031594),
          X64Word_create(275423344, 851169720),
          X64Word_create(430227734, 3100823752),
          X64Word_create(506948616, 1363258195),
          X64Word_create(659060556, 3750685593),
          X64Word_create(883997877, 3785050280),
          X64Word_create(958139571, 3318307427),
          X64Word_create(1322822218, 3812723403),
          X64Word_create(1537002063, 2003034995),
          X64Word_create(1747873779, 3602036899),
          X64Word_create(1955562222, 1575990012),
          X64Word_create(2024104815, 1125592928),
          X64Word_create(2227730452, 2716904306),
          X64Word_create(2361852424, 442776044),
          X64Word_create(2428436474, 593698344),
          X64Word_create(2756734187, 3733110249),
          X64Word_create(3204031479, 2999351573),
          X64Word_create(3329325298, 3815920427),
          X64Word_create(3391569614, 3928383900),
          X64Word_create(3515267271, 566280711),
          X64Word_create(3940187606, 3454069534),
          X64Word_create(4118630271, 4000239992),
          X64Word_create(116418474, 1914138554),
          X64Word_create(174292421, 2731055270),
          X64Word_create(289380356, 3203993006),
          X64Word_create(460393269, 320620315),
          X64Word_create(685471733, 587496836),
          X64Word_create(852142971, 1086792851),
          X64Word_create(1017036298, 365543100),
          X64Word_create(1126000580, 2618297676),
          X64Word_create(1288033470, 3409855158),
          X64Word_create(1501505948, 4234509866),
          X64Word_create(1607167915, 987167468),
          X64Word_create(1816402316, 1246189591)
        ];
        var W = [];
        (function() {
          for (var i = 0; i < 80; i++) {
            W[i] = X64Word_create();
          }
        })();
        var SHA512 = C_algo.SHA512 = Hasher.extend({
          _doReset: function() {
            this._hash = new X64WordArray.init([
              new X64Word.init(1779033703, 4089235720),
              new X64Word.init(3144134277, 2227873595),
              new X64Word.init(1013904242, 4271175723),
              new X64Word.init(2773480762, 1595750129),
              new X64Word.init(1359893119, 2917565137),
              new X64Word.init(2600822924, 725511199),
              new X64Word.init(528734635, 4215389547),
              new X64Word.init(1541459225, 327033209)
            ]);
          },
          _doProcessBlock: function(M, offset2) {
            var H = this._hash.words;
            var H0 = H[0];
            var H1 = H[1];
            var H2 = H[2];
            var H3 = H[3];
            var H4 = H[4];
            var H5 = H[5];
            var H6 = H[6];
            var H7 = H[7];
            var H0h = H0.high;
            var H0l = H0.low;
            var H1h = H1.high;
            var H1l = H1.low;
            var H2h = H2.high;
            var H2l = H2.low;
            var H3h = H3.high;
            var H3l = H3.low;
            var H4h = H4.high;
            var H4l = H4.low;
            var H5h = H5.high;
            var H5l = H5.low;
            var H6h = H6.high;
            var H6l = H6.low;
            var H7h = H7.high;
            var H7l = H7.low;
            var ah = H0h;
            var al = H0l;
            var bh = H1h;
            var bl = H1l;
            var ch = H2h;
            var cl = H2l;
            var dh = H3h;
            var dl = H3l;
            var eh = H4h;
            var el = H4l;
            var fh = H5h;
            var fl = H5l;
            var gh = H6h;
            var gl = H6l;
            var hh = H7h;
            var hl = H7l;
            for (var i = 0; i < 80; i++) {
              var Wil;
              var Wih;
              var Wi = W[i];
              if (i < 16) {
                Wih = Wi.high = M[offset2 + i * 2] | 0;
                Wil = Wi.low = M[offset2 + i * 2 + 1] | 0;
              } else {
                var gamma0x = W[i - 15];
                var gamma0xh = gamma0x.high;
                var gamma0xl = gamma0x.low;
                var gamma0h = (gamma0xh >>> 1 | gamma0xl << 31) ^ (gamma0xh >>> 8 | gamma0xl << 24) ^ gamma0xh >>> 7;
                var gamma0l = (gamma0xl >>> 1 | gamma0xh << 31) ^ (gamma0xl >>> 8 | gamma0xh << 24) ^ (gamma0xl >>> 7 | gamma0xh << 25);
                var gamma1x = W[i - 2];
                var gamma1xh = gamma1x.high;
                var gamma1xl = gamma1x.low;
                var gamma1h = (gamma1xh >>> 19 | gamma1xl << 13) ^ (gamma1xh << 3 | gamma1xl >>> 29) ^ gamma1xh >>> 6;
                var gamma1l = (gamma1xl >>> 19 | gamma1xh << 13) ^ (gamma1xl << 3 | gamma1xh >>> 29) ^ (gamma1xl >>> 6 | gamma1xh << 26);
                var Wi7 = W[i - 7];
                var Wi7h = Wi7.high;
                var Wi7l = Wi7.low;
                var Wi16 = W[i - 16];
                var Wi16h = Wi16.high;
                var Wi16l = Wi16.low;
                Wil = gamma0l + Wi7l;
                Wih = gamma0h + Wi7h + (Wil >>> 0 < gamma0l >>> 0 ? 1 : 0);
                Wil = Wil + gamma1l;
                Wih = Wih + gamma1h + (Wil >>> 0 < gamma1l >>> 0 ? 1 : 0);
                Wil = Wil + Wi16l;
                Wih = Wih + Wi16h + (Wil >>> 0 < Wi16l >>> 0 ? 1 : 0);
                Wi.high = Wih;
                Wi.low = Wil;
              }
              var chh = eh & fh ^ ~eh & gh;
              var chl = el & fl ^ ~el & gl;
              var majh = ah & bh ^ ah & ch ^ bh & ch;
              var majl = al & bl ^ al & cl ^ bl & cl;
              var sigma0h = (ah >>> 28 | al << 4) ^ (ah << 30 | al >>> 2) ^ (ah << 25 | al >>> 7);
              var sigma0l = (al >>> 28 | ah << 4) ^ (al << 30 | ah >>> 2) ^ (al << 25 | ah >>> 7);
              var sigma1h = (eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9);
              var sigma1l = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9);
              var Ki = K2[i];
              var Kih = Ki.high;
              var Kil = Ki.low;
              var t1l = hl + sigma1l;
              var t1h = hh + sigma1h + (t1l >>> 0 < hl >>> 0 ? 1 : 0);
              var t1l = t1l + chl;
              var t1h = t1h + chh + (t1l >>> 0 < chl >>> 0 ? 1 : 0);
              var t1l = t1l + Kil;
              var t1h = t1h + Kih + (t1l >>> 0 < Kil >>> 0 ? 1 : 0);
              var t1l = t1l + Wil;
              var t1h = t1h + Wih + (t1l >>> 0 < Wil >>> 0 ? 1 : 0);
              var t2l = sigma0l + majl;
              var t2h = sigma0h + majh + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0);
              hh = gh;
              hl = gl;
              gh = fh;
              gl = fl;
              fh = eh;
              fl = el;
              el = dl + t1l | 0;
              eh = dh + t1h + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
              dh = ch;
              dl = cl;
              ch = bh;
              cl = bl;
              bh = ah;
              bl = al;
              al = t1l + t2l | 0;
              ah = t1h + t2h + (al >>> 0 < t1l >>> 0 ? 1 : 0) | 0;
            }
            H0l = H0.low = H0l + al;
            H0.high = H0h + ah + (H0l >>> 0 < al >>> 0 ? 1 : 0);
            H1l = H1.low = H1l + bl;
            H1.high = H1h + bh + (H1l >>> 0 < bl >>> 0 ? 1 : 0);
            H2l = H2.low = H2l + cl;
            H2.high = H2h + ch + (H2l >>> 0 < cl >>> 0 ? 1 : 0);
            H3l = H3.low = H3l + dl;
            H3.high = H3h + dh + (H3l >>> 0 < dl >>> 0 ? 1 : 0);
            H4l = H4.low = H4l + el;
            H4.high = H4h + eh + (H4l >>> 0 < el >>> 0 ? 1 : 0);
            H5l = H5.low = H5l + fl;
            H5.high = H5h + fh + (H5l >>> 0 < fl >>> 0 ? 1 : 0);
            H6l = H6.low = H6l + gl;
            H6.high = H6h + gh + (H6l >>> 0 < gl >>> 0 ? 1 : 0);
            H7l = H7.low = H7l + hl;
            H7.high = H7h + hh + (H7l >>> 0 < hl >>> 0 ? 1 : 0);
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 128 >>> 10 << 5) + 30] = Math.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 128 >>> 10 << 5) + 31] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            var hash = this._hash.toX32();
            return hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          },
          blockSize: 1024 / 32
        });
        C.SHA512 = Hasher._createHelper(SHA512);
        C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
      })();
      return CryptoJS.SHA512;
    });
  }
});

// node_modules/crypto-js/sha384.js
var require_sha384 = __commonJS({
  "node_modules/crypto-js/sha384.js"(exports2, module2) {
    (function(root2, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core2(), require_x64_core(), require_sha5122());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core", "./sha512"], factory);
      } else {
        factory(root2.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var X64WordArray = C_x64.WordArray;
        var C_algo = C.algo;
        var SHA512 = C_algo.SHA512;
        var SHA384 = C_algo.SHA384 = SHA512.extend({
          _doReset: function() {
            this._hash = new X64WordArray.init([
              new X64Word.init(3418070365, 3238371032),
              new X64Word.init(1654270250, 914150663),
              new X64Word.init(2438529370, 812702999),
              new X64Word.init(355462360, 4144912697),
              new X64Word.init(1731405415, 4290775857),
              new X64Word.init(2394180231, 1750603025),
              new X64Word.init(3675008525, 1694076839),
              new X64Word.init(1203062813, 3204075428)
            ]);
          },
          _doFinalize: function() {
            var hash = SHA512._doFinalize.call(this);
            hash.sigBytes -= 16;
            return hash;
          }
        });
        C.SHA384 = SHA512._createHelper(SHA384);
        C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
      })();
      return CryptoJS.SHA384;
    });
  }
});

// node_modules/crypto-js/sha3.js
var require_sha3 = __commonJS({
  "node_modules/crypto-js/sha3.js"(exports2, module2) {
    (function(root2, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core2(), require_x64_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core"], factory);
      } else {
        factory(root2.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function(Math2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var C_algo = C.algo;
        var RHO_OFFSETS = [];
        var PI_INDEXES = [];
        var ROUND_CONSTANTS = [];
        (function() {
          var x = 1, y = 0;
          for (var t = 0; t < 24; t++) {
            RHO_OFFSETS[x + 5 * y] = (t + 1) * (t + 2) / 2 % 64;
            var newX = y % 5;
            var newY = (2 * x + 3 * y) % 5;
            x = newX;
            y = newY;
          }
          for (var x = 0; x < 5; x++) {
            for (var y = 0; y < 5; y++) {
              PI_INDEXES[x + 5 * y] = y + (2 * x + 3 * y) % 5 * 5;
            }
          }
          var LFSR = 1;
          for (var i = 0; i < 24; i++) {
            var roundConstantMsw = 0;
            var roundConstantLsw = 0;
            for (var j = 0; j < 7; j++) {
              if (LFSR & 1) {
                var bitPosition = (1 << j) - 1;
                if (bitPosition < 32) {
                  roundConstantLsw ^= 1 << bitPosition;
                } else {
                  roundConstantMsw ^= 1 << bitPosition - 32;
                }
              }
              if (LFSR & 128) {
                LFSR = LFSR << 1 ^ 113;
              } else {
                LFSR <<= 1;
              }
            }
            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
          }
        })();
        var T = [];
        (function() {
          for (var i = 0; i < 25; i++) {
            T[i] = X64Word.create();
          }
        })();
        var SHA3 = C_algo.SHA3 = Hasher.extend({
          /**
           * Configuration options.
           *
           * @property {number} outputLength
           *   The desired number of bits in the output hash.
           *   Only values permitted are: 224, 256, 384, 512.
           *   Default: 512
           */
          cfg: Hasher.cfg.extend({
            outputLength: 512
          }),
          _doReset: function() {
            var state = this._state = [];
            for (var i = 0; i < 25; i++) {
              state[i] = new X64Word.init();
            }
            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
          },
          _doProcessBlock: function(M, offset2) {
            var state = this._state;
            var nBlockSizeLanes = this.blockSize / 2;
            for (var i = 0; i < nBlockSizeLanes; i++) {
              var M2i = M[offset2 + 2 * i];
              var M2i1 = M[offset2 + 2 * i + 1];
              M2i = (M2i << 8 | M2i >>> 24) & 16711935 | (M2i << 24 | M2i >>> 8) & 4278255360;
              M2i1 = (M2i1 << 8 | M2i1 >>> 24) & 16711935 | (M2i1 << 24 | M2i1 >>> 8) & 4278255360;
              var lane = state[i];
              lane.high ^= M2i1;
              lane.low ^= M2i;
            }
            for (var round = 0; round < 24; round++) {
              for (var x = 0; x < 5; x++) {
                var tMsw = 0, tLsw = 0;
                for (var y = 0; y < 5; y++) {
                  var lane = state[x + 5 * y];
                  tMsw ^= lane.high;
                  tLsw ^= lane.low;
                }
                var Tx = T[x];
                Tx.high = tMsw;
                Tx.low = tLsw;
              }
              for (var x = 0; x < 5; x++) {
                var Tx4 = T[(x + 4) % 5];
                var Tx1 = T[(x + 1) % 5];
                var Tx1Msw = Tx1.high;
                var Tx1Lsw = Tx1.low;
                var tMsw = Tx4.high ^ (Tx1Msw << 1 | Tx1Lsw >>> 31);
                var tLsw = Tx4.low ^ (Tx1Lsw << 1 | Tx1Msw >>> 31);
                for (var y = 0; y < 5; y++) {
                  var lane = state[x + 5 * y];
                  lane.high ^= tMsw;
                  lane.low ^= tLsw;
                }
              }
              for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
                var tMsw;
                var tLsw;
                var lane = state[laneIndex];
                var laneMsw = lane.high;
                var laneLsw = lane.low;
                var rhoOffset = RHO_OFFSETS[laneIndex];
                if (rhoOffset < 32) {
                  tMsw = laneMsw << rhoOffset | laneLsw >>> 32 - rhoOffset;
                  tLsw = laneLsw << rhoOffset | laneMsw >>> 32 - rhoOffset;
                } else {
                  tMsw = laneLsw << rhoOffset - 32 | laneMsw >>> 64 - rhoOffset;
                  tLsw = laneMsw << rhoOffset - 32 | laneLsw >>> 64 - rhoOffset;
                }
                var TPiLane = T[PI_INDEXES[laneIndex]];
                TPiLane.high = tMsw;
                TPiLane.low = tLsw;
              }
              var T0 = T[0];
              var state0 = state[0];
              T0.high = state0.high;
              T0.low = state0.low;
              for (var x = 0; x < 5; x++) {
                for (var y = 0; y < 5; y++) {
                  var laneIndex = x + 5 * y;
                  var lane = state[laneIndex];
                  var TLane = T[laneIndex];
                  var Tx1Lane = T[(x + 1) % 5 + 5 * y];
                  var Tx2Lane = T[(x + 2) % 5 + 5 * y];
                  lane.high = TLane.high ^ ~Tx1Lane.high & Tx2Lane.high;
                  lane.low = TLane.low ^ ~Tx1Lane.low & Tx2Lane.low;
                }
              }
              var lane = state[0];
              var roundConstant = ROUND_CONSTANTS[round];
              lane.high ^= roundConstant.high;
              lane.low ^= roundConstant.low;
            }
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            var blockSizeBits = this.blockSize * 32;
            dataWords[nBitsLeft >>> 5] |= 1 << 24 - nBitsLeft % 32;
            dataWords[(Math2.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits >>> 5) - 1] |= 128;
            data.sigBytes = dataWords.length * 4;
            this._process();
            var state = this._state;
            var outputLengthBytes = this.cfg.outputLength / 8;
            var outputLengthLanes = outputLengthBytes / 8;
            var hashWords = [];
            for (var i = 0; i < outputLengthLanes; i++) {
              var lane = state[i];
              var laneMsw = lane.high;
              var laneLsw = lane.low;
              laneMsw = (laneMsw << 8 | laneMsw >>> 24) & 16711935 | (laneMsw << 24 | laneMsw >>> 8) & 4278255360;
              laneLsw = (laneLsw << 8 | laneLsw >>> 24) & 16711935 | (laneLsw << 24 | laneLsw >>> 8) & 4278255360;
              hashWords.push(laneLsw);
              hashWords.push(laneMsw);
            }
            return new WordArray.init(hashWords, outputLengthBytes);
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            var state = clone._state = this._state.slice(0);
            for (var i = 0; i < 25; i++) {
              state[i] = state[i].clone();
            }
            return clone;
          }
        });
        C.SHA3 = Hasher._createHelper(SHA3);
        C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
      })(Math);
      return CryptoJS.SHA3;
    });
  }
});

// node_modules/crypto-js/ripemd160.js
var require_ripemd160 = __commonJS({
  "node_modules/crypto-js/ripemd160.js"(exports2, module2) {
    (function(root2, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core2());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root2.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function(Math2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var _zl = WordArray.create([
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          7,
          4,
          13,
          1,
          10,
          6,
          15,
          3,
          12,
          0,
          9,
          5,
          2,
          14,
          11,
          8,
          3,
          10,
          14,
          4,
          9,
          15,
          8,
          1,
          2,
          7,
          0,
          6,
          13,
          11,
          5,
          12,
          1,
          9,
          11,
          10,
          0,
          8,
          12,
          4,
          13,
          3,
          7,
          15,
          14,
          5,
          6,
          2,
          4,
          0,
          5,
          9,
          7,
          12,
          2,
          10,
          14,
          1,
          3,
          8,
          11,
          6,
          15,
          13
        ]);
        var _zr = WordArray.create([
          5,
          14,
          7,
          0,
          9,
          2,
          11,
          4,
          13,
          6,
          15,
          8,
          1,
          10,
          3,
          12,
          6,
          11,
          3,
          7,
          0,
          13,
          5,
          10,
          14,
          15,
          8,
          12,
          4,
          9,
          1,
          2,
          15,
          5,
          1,
          3,
          7,
          14,
          6,
          9,
          11,
          8,
          12,
          2,
          10,
          0,
          4,
          13,
          8,
          6,
          4,
          1,
          3,
          11,
          15,
          0,
          5,
          12,
          2,
          13,
          9,
          7,
          10,
          14,
          12,
          15,
          10,
          4,
          1,
          5,
          8,
          7,
          6,
          2,
          13,
          14,
          0,
          3,
          9,
          11
        ]);
        var _sl = WordArray.create([
          11,
          14,
          15,
          12,
          5,
          8,
          7,
          9,
          11,
          13,
          14,
          15,
          6,
          7,
          9,
          8,
          7,
          6,
          8,
          13,
          11,
          9,
          7,
          15,
          7,
          12,
          15,
          9,
          11,
          7,
          13,
          12,
          11,
          13,
          6,
          7,
          14,
          9,
          13,
          15,
          14,
          8,
          13,
          6,
          5,
          12,
          7,
          5,
          11,
          12,
          14,
          15,
          14,
          15,
          9,
          8,
          9,
          14,
          5,
          6,
          8,
          6,
          5,
          12,
          9,
          15,
          5,
          11,
          6,
          8,
          13,
          12,
          5,
          12,
          13,
          14,
          11,
          8,
          5,
          6
        ]);
        var _sr = WordArray.create([
          8,
          9,
          9,
          11,
          13,
          15,
          15,
          5,
          7,
          7,
          8,
          11,
          14,
          14,
          12,
          6,
          9,
          13,
          15,
          7,
          12,
          8,
          9,
          11,
          7,
          7,
          12,
          7,
          6,
          15,
          13,
          11,
          9,
          7,
          15,
          11,
          8,
          6,
          6,
          14,
          12,
          13,
          5,
          14,
          13,
          13,
          7,
          5,
          15,
          5,
          8,
          11,
          14,
          14,
          6,
          14,
          6,
          9,
          12,
          9,
          12,
          5,
          15,
          8,
          8,
          5,
          12,
          9,
          12,
          5,
          14,
          6,
          8,
          13,
          6,
          5,
          15,
          13,
          11,
          11
        ]);
        var _hl = WordArray.create([0, 1518500249, 1859775393, 2400959708, 2840853838]);
        var _hr = WordArray.create([1352829926, 1548603684, 1836072691, 2053994217, 0]);
        var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
          _doReset: function() {
            this._hash = WordArray.create([1732584193, 4023233417, 2562383102, 271733878, 3285377520]);
          },
          _doProcessBlock: function(M, offset2) {
            for (var i = 0; i < 16; i++) {
              var offset_i = offset2 + i;
              var M_offset_i = M[offset_i];
              M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
            }
            var H = this._hash.words;
            var hl = _hl.words;
            var hr = _hr.words;
            var zl = _zl.words;
            var zr = _zr.words;
            var sl = _sl.words;
            var sr = _sr.words;
            var al, bl, cl, dl, el;
            var ar, br, cr, dr, er;
            ar = al = H[0];
            br = bl = H[1];
            cr = cl = H[2];
            dr = dl = H[3];
            er = el = H[4];
            var t;
            for (var i = 0; i < 80; i += 1) {
              t = al + M[offset2 + zl[i]] | 0;
              if (i < 16) {
                t += f1(bl, cl, dl) + hl[0];
              } else if (i < 32) {
                t += f2(bl, cl, dl) + hl[1];
              } else if (i < 48) {
                t += f3(bl, cl, dl) + hl[2];
              } else if (i < 64) {
                t += f4(bl, cl, dl) + hl[3];
              } else {
                t += f5(bl, cl, dl) + hl[4];
              }
              t = t | 0;
              t = rotl(t, sl[i]);
              t = t + el | 0;
              al = el;
              el = dl;
              dl = rotl(cl, 10);
              cl = bl;
              bl = t;
              t = ar + M[offset2 + zr[i]] | 0;
              if (i < 16) {
                t += f5(br, cr, dr) + hr[0];
              } else if (i < 32) {
                t += f4(br, cr, dr) + hr[1];
              } else if (i < 48) {
                t += f3(br, cr, dr) + hr[2];
              } else if (i < 64) {
                t += f2(br, cr, dr) + hr[3];
              } else {
                t += f1(br, cr, dr) + hr[4];
              }
              t = t | 0;
              t = rotl(t, sr[i]);
              t = t + er | 0;
              ar = er;
              er = dr;
              dr = rotl(cr, 10);
              cr = br;
              br = t;
            }
            t = H[1] + cl + dr | 0;
            H[1] = H[2] + dl + er | 0;
            H[2] = H[3] + el + ar | 0;
            H[3] = H[4] + al + br | 0;
            H[4] = H[0] + bl + cr | 0;
            H[0] = t;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotal << 8 | nBitsTotal >>> 24) & 16711935 | (nBitsTotal << 24 | nBitsTotal >>> 8) & 4278255360;
            data.sigBytes = (dataWords.length + 1) * 4;
            this._process();
            var hash = this._hash;
            var H = hash.words;
            for (var i = 0; i < 5; i++) {
              var H_i = H[i];
              H[i] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
            }
            return hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        function f1(x, y, z) {
          return x ^ y ^ z;
        }
        function f2(x, y, z) {
          return x & y | ~x & z;
        }
        function f3(x, y, z) {
          return (x | ~y) ^ z;
        }
        function f4(x, y, z) {
          return x & z | y & ~z;
        }
        function f5(x, y, z) {
          return x ^ (y | ~z);
        }
        function rotl(x, n) {
          return x << n | x >>> 32 - n;
        }
        C.RIPEMD160 = Hasher._createHelper(RIPEMD160);
        C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
      })(Math);
      return CryptoJS.RIPEMD160;
    });
  }
});

// node_modules/crypto-js/hmac.js
var require_hmac2 = __commonJS({
  "node_modules/crypto-js/hmac.js"(exports2, module2) {
    (function(root2, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core2());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root2.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var C_enc = C.enc;
        var Utf8 = C_enc.Utf8;
        var C_algo = C.algo;
        var HMAC = C_algo.HMAC = Base.extend({
          /**
           * Initializes a newly created HMAC.
           *
           * @param {Hasher} hasher The hash algorithm to use.
           * @param {WordArray|string} key The secret key.
           *
           * @example
           *
           *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
           */
          init: function(hasher, key) {
            hasher = this._hasher = new hasher.init();
            if (typeof key == "string") {
              key = Utf8.parse(key);
            }
            var hasherBlockSize = hasher.blockSize;
            var hasherBlockSizeBytes = hasherBlockSize * 4;
            if (key.sigBytes > hasherBlockSizeBytes) {
              key = hasher.finalize(key);
            }
            key.clamp();
            var oKey = this._oKey = key.clone();
            var iKey = this._iKey = key.clone();
            var oKeyWords = oKey.words;
            var iKeyWords = iKey.words;
            for (var i = 0; i < hasherBlockSize; i++) {
              oKeyWords[i] ^= 1549556828;
              iKeyWords[i] ^= 909522486;
            }
            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;
            this.reset();
          },
          /**
           * Resets this HMAC to its initial state.
           *
           * @example
           *
           *     hmacHasher.reset();
           */
          reset: function() {
            var hasher = this._hasher;
            hasher.reset();
            hasher.update(this._iKey);
          },
          /**
           * Updates this HMAC with a message.
           *
           * @param {WordArray|string} messageUpdate The message to append.
           *
           * @return {HMAC} This HMAC instance.
           *
           * @example
           *
           *     hmacHasher.update('message');
           *     hmacHasher.update(wordArray);
           */
          update: function(messageUpdate) {
            this._hasher.update(messageUpdate);
            return this;
          },
          /**
           * Finalizes the HMAC computation.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} messageUpdate (Optional) A final message update.
           *
           * @return {WordArray} The HMAC.
           *
           * @example
           *
           *     var hmac = hmacHasher.finalize();
           *     var hmac = hmacHasher.finalize('message');
           *     var hmac = hmacHasher.finalize(wordArray);
           */
          finalize: function(messageUpdate) {
            var hasher = this._hasher;
            var innerHash = hasher.finalize(messageUpdate);
            hasher.reset();
            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));
            return hmac;
          }
        });
      })();
    });
  }
});

// node_modules/crypto-js/pbkdf2.js
var require_pbkdf22 = __commonJS({
  "node_modules/crypto-js/pbkdf2.js"(exports2, module2) {
    (function(root2, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core2(), require_sha2562(), require_hmac2());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./sha256", "./hmac"], factory);
      } else {
        factory(root2.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var SHA256 = C_algo.SHA256;
        var HMAC = C_algo.HMAC;
        var PBKDF2 = C_algo.PBKDF2 = Base.extend({
          /**
           * Configuration options.
           *
           * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
           * @property {Hasher} hasher The hasher to use. Default: SHA256
           * @property {number} iterations The number of iterations to perform. Default: 250000
           */
          cfg: Base.extend({
            keySize: 128 / 32,
            hasher: SHA256,
            iterations: 25e4
          }),
          /**
           * Initializes a newly created key derivation function.
           *
           * @param {Object} cfg (Optional) The configuration options to use for the derivation.
           *
           * @example
           *
           *     var kdf = CryptoJS.algo.PBKDF2.create();
           *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
           *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
           */
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
          },
          /**
           * Computes the Password-Based Key Derivation Function 2.
           *
           * @param {WordArray|string} password The password.
           * @param {WordArray|string} salt A salt.
           *
           * @return {WordArray} The derived key.
           *
           * @example
           *
           *     var key = kdf.compute(password, salt);
           */
          compute: function(password, salt) {
            var cfg = this.cfg;
            var hmac = HMAC.create(cfg.hasher, password);
            var derivedKey = WordArray.create();
            var blockIndex = WordArray.create([1]);
            var derivedKeyWords = derivedKey.words;
            var blockIndexWords = blockIndex.words;
            var keySize = cfg.keySize;
            var iterations = cfg.iterations;
            while (derivedKeyWords.length < keySize) {
              var block = hmac.update(salt).finalize(blockIndex);
              hmac.reset();
              var blockWords = block.words;
              var blockWordsLength = blockWords.length;
              var intermediate = block;
              for (var i = 1; i < iterations; i++) {
                intermediate = hmac.finalize(intermediate);
                hmac.reset();
                var intermediateWords = intermediate.words;
                for (var j = 0; j < blockWordsLength; j++) {
                  blockWords[j] ^= intermediateWords[j];
                }
              }
              derivedKey.concat(block);
              blockIndexWords[0]++;
            }
            derivedKey.sigBytes = keySize * 4;
            return derivedKey;
          }
        });
        C.PBKDF2 = function(password, salt, cfg) {
          return PBKDF2.create(cfg).compute(password, salt);
        };
      })();
      return CryptoJS.PBKDF2;
    });
  }
});

// node_modules/crypto-js/evpkdf.js
var require_evpkdf = __commonJS({
  "node_modules/crypto-js/evpkdf.js"(exports2, module2) {
    (function(root2, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core2(), require_sha1(), require_hmac2());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./sha1", "./hmac"], factory);
      } else {
        factory(root2.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var MD5 = C_algo.MD5;
        var EvpKDF = C_algo.EvpKDF = Base.extend({
          /**
           * Configuration options.
           *
           * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
           * @property {Hasher} hasher The hash algorithm to use. Default: MD5
           * @property {number} iterations The number of iterations to perform. Default: 1
           */
          cfg: Base.extend({
            keySize: 128 / 32,
            hasher: MD5,
            iterations: 1
          }),
          /**
           * Initializes a newly created key derivation function.
           *
           * @param {Object} cfg (Optional) The configuration options to use for the derivation.
           *
           * @example
           *
           *     var kdf = CryptoJS.algo.EvpKDF.create();
           *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
           *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
           */
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
          },
          /**
           * Derives a key from a password.
           *
           * @param {WordArray|string} password The password.
           * @param {WordArray|string} salt A salt.
           *
           * @return {WordArray} The derived key.
           *
           * @example
           *
           *     var key = kdf.compute(password, salt);
           */
          compute: function(password, salt) {
            var block;
            var cfg = this.cfg;
            var hasher = cfg.hasher.create();
            var derivedKey = WordArray.create();
            var derivedKeyWords = derivedKey.words;
            var keySize = cfg.keySize;
            var iterations = cfg.iterations;
            while (derivedKeyWords.length < keySize) {
              if (block) {
                hasher.update(block);
              }
              block = hasher.update(password).finalize(salt);
              hasher.reset();
              for (var i = 1; i < iterations; i++) {
                block = hasher.finalize(block);
                hasher.reset();
              }
              derivedKey.concat(block);
            }
            derivedKey.sigBytes = keySize * 4;
            return derivedKey;
          }
        });
        C.EvpKDF = function(password, salt, cfg) {
          return EvpKDF.create(cfg).compute(password, salt);
        };
      })();
      return CryptoJS.EvpKDF;
    });
  }
});

// node_modules/crypto-js/cipher-core.js
var require_cipher_core = __commonJS({
  "node_modules/crypto-js/cipher-core.js"(exports2, module2) {
    (function(root2, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core2(), require_evpkdf());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./evpkdf"], factory);
      } else {
        factory(root2.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.lib.Cipher || function(undefined2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
        var C_enc = C.enc;
        var Utf8 = C_enc.Utf8;
        var Base64 = C_enc.Base64;
        var C_algo = C.algo;
        var EvpKDF = C_algo.EvpKDF;
        var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
          /**
           * Configuration options.
           *
           * @property {WordArray} iv The IV to use for this operation.
           */
          cfg: Base.extend(),
          /**
           * Creates this cipher in encryption mode.
           *
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {Cipher} A cipher instance.
           *
           * @static
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
           */
          createEncryptor: function(key, cfg) {
            return this.create(this._ENC_XFORM_MODE, key, cfg);
          },
          /**
           * Creates this cipher in decryption mode.
           *
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {Cipher} A cipher instance.
           *
           * @static
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
           */
          createDecryptor: function(key, cfg) {
            return this.create(this._DEC_XFORM_MODE, key, cfg);
          },
          /**
           * Initializes a newly created cipher.
           *
           * @param {number} xformMode Either the encryption or decryption transormation mode constant.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
           */
          init: function(xformMode, key, cfg) {
            this.cfg = this.cfg.extend(cfg);
            this._xformMode = xformMode;
            this._key = key;
            this.reset();
          },
          /**
           * Resets this cipher to its initial state.
           *
           * @example
           *
           *     cipher.reset();
           */
          reset: function() {
            BufferedBlockAlgorithm.reset.call(this);
            this._doReset();
          },
          /**
           * Adds data to be encrypted or decrypted.
           *
           * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
           *
           * @return {WordArray} The data after processing.
           *
           * @example
           *
           *     var encrypted = cipher.process('data');
           *     var encrypted = cipher.process(wordArray);
           */
          process: function(dataUpdate) {
            this._append(dataUpdate);
            return this._process();
          },
          /**
           * Finalizes the encryption or decryption process.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
           *
           * @return {WordArray} The data after final processing.
           *
           * @example
           *
           *     var encrypted = cipher.finalize();
           *     var encrypted = cipher.finalize('data');
           *     var encrypted = cipher.finalize(wordArray);
           */
          finalize: function(dataUpdate) {
            if (dataUpdate) {
              this._append(dataUpdate);
            }
            var finalProcessedData = this._doFinalize();
            return finalProcessedData;
          },
          keySize: 128 / 32,
          ivSize: 128 / 32,
          _ENC_XFORM_MODE: 1,
          _DEC_XFORM_MODE: 2,
          /**
           * Creates shortcut functions to a cipher's object interface.
           *
           * @param {Cipher} cipher The cipher to create a helper for.
           *
           * @return {Object} An object with encrypt and decrypt shortcut functions.
           *
           * @static
           *
           * @example
           *
           *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
           */
          _createHelper: /* @__PURE__ */ function() {
            function selectCipherStrategy(key) {
              if (typeof key == "string") {
                return PasswordBasedCipher;
              } else {
                return SerializableCipher;
              }
            }
            return function(cipher) {
              return {
                encrypt: function(message, key, cfg) {
                  return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
                },
                decrypt: function(ciphertext, key, cfg) {
                  return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
                }
              };
            };
          }()
        });
        var StreamCipher = C_lib.StreamCipher = Cipher.extend({
          _doFinalize: function() {
            var finalProcessedBlocks = this._process(true);
            return finalProcessedBlocks;
          },
          blockSize: 1
        });
        var C_mode = C.mode = {};
        var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
          /**
           * Creates this mode for encryption.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @static
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
           */
          createEncryptor: function(cipher, iv) {
            return this.Encryptor.create(cipher, iv);
          },
          /**
           * Creates this mode for decryption.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @static
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
           */
          createDecryptor: function(cipher, iv) {
            return this.Decryptor.create(cipher, iv);
          },
          /**
           * Initializes a newly created mode.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
           */
          init: function(cipher, iv) {
            this._cipher = cipher;
            this._iv = iv;
          }
        });
        var CBC = C_mode.CBC = function() {
          var CBC2 = BlockCipherMode.extend();
          CBC2.Encryptor = CBC2.extend({
            /**
             * Processes the data block at offset.
             *
             * @param {Array} words The data words to operate on.
             * @param {number} offset The offset where the block starts.
             *
             * @example
             *
             *     mode.processBlock(data.words, offset);
             */
            processBlock: function(words, offset2) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              xorBlock.call(this, words, offset2, blockSize);
              cipher.encryptBlock(words, offset2);
              this._prevBlock = words.slice(offset2, offset2 + blockSize);
            }
          });
          CBC2.Decryptor = CBC2.extend({
            /**
             * Processes the data block at offset.
             *
             * @param {Array} words The data words to operate on.
             * @param {number} offset The offset where the block starts.
             *
             * @example
             *
             *     mode.processBlock(data.words, offset);
             */
            processBlock: function(words, offset2) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              var thisBlock = words.slice(offset2, offset2 + blockSize);
              cipher.decryptBlock(words, offset2);
              xorBlock.call(this, words, offset2, blockSize);
              this._prevBlock = thisBlock;
            }
          });
          function xorBlock(words, offset2, blockSize) {
            var block;
            var iv = this._iv;
            if (iv) {
              block = iv;
              this._iv = undefined2;
            } else {
              block = this._prevBlock;
            }
            for (var i = 0; i < blockSize; i++) {
              words[offset2 + i] ^= block[i];
            }
          }
          return CBC2;
        }();
        var C_pad = C.pad = {};
        var Pkcs7 = C_pad.Pkcs7 = {
          /**
           * Pads data using the algorithm defined in PKCS #5/7.
           *
           * @param {WordArray} data The data to pad.
           * @param {number} blockSize The multiple that the data should be padded to.
           *
           * @static
           *
           * @example
           *
           *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
           */
          pad: function(data, blockSize) {
            var blockSizeBytes = blockSize * 4;
            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
            var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes;
            var paddingWords = [];
            for (var i = 0; i < nPaddingBytes; i += 4) {
              paddingWords.push(paddingWord);
            }
            var padding = WordArray.create(paddingWords, nPaddingBytes);
            data.concat(padding);
          },
          /**
           * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
           *
           * @param {WordArray} data The data to unpad.
           *
           * @static
           *
           * @example
           *
           *     CryptoJS.pad.Pkcs7.unpad(wordArray);
           */
          unpad: function(data) {
            var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
            data.sigBytes -= nPaddingBytes;
          }
        };
        var BlockCipher = C_lib.BlockCipher = Cipher.extend({
          /**
           * Configuration options.
           *
           * @property {Mode} mode The block mode to use. Default: CBC
           * @property {Padding} padding The padding strategy to use. Default: Pkcs7
           */
          cfg: Cipher.cfg.extend({
            mode: CBC,
            padding: Pkcs7
          }),
          reset: function() {
            var modeCreator;
            Cipher.reset.call(this);
            var cfg = this.cfg;
            var iv = cfg.iv;
            var mode = cfg.mode;
            if (this._xformMode == this._ENC_XFORM_MODE) {
              modeCreator = mode.createEncryptor;
            } else {
              modeCreator = mode.createDecryptor;
              this._minBufferSize = 1;
            }
            if (this._mode && this._mode.__creator == modeCreator) {
              this._mode.init(this, iv && iv.words);
            } else {
              this._mode = modeCreator.call(mode, this, iv && iv.words);
              this._mode.__creator = modeCreator;
            }
          },
          _doProcessBlock: function(words, offset2) {
            this._mode.processBlock(words, offset2);
          },
          _doFinalize: function() {
            var finalProcessedBlocks;
            var padding = this.cfg.padding;
            if (this._xformMode == this._ENC_XFORM_MODE) {
              padding.pad(this._data, this.blockSize);
              finalProcessedBlocks = this._process(true);
            } else {
              finalProcessedBlocks = this._process(true);
              padding.unpad(finalProcessedBlocks);
            }
            return finalProcessedBlocks;
          },
          blockSize: 128 / 32
        });
        var CipherParams = C_lib.CipherParams = Base.extend({
          /**
           * Initializes a newly created cipher params object.
           *
           * @param {Object} cipherParams An object with any of the possible cipher parameters.
           *
           * @example
           *
           *     var cipherParams = CryptoJS.lib.CipherParams.create({
           *         ciphertext: ciphertextWordArray,
           *         key: keyWordArray,
           *         iv: ivWordArray,
           *         salt: saltWordArray,
           *         algorithm: CryptoJS.algo.AES,
           *         mode: CryptoJS.mode.CBC,
           *         padding: CryptoJS.pad.PKCS7,
           *         blockSize: 4,
           *         formatter: CryptoJS.format.OpenSSL
           *     });
           */
          init: function(cipherParams) {
            this.mixIn(cipherParams);
          },
          /**
           * Converts this cipher params object to a string.
           *
           * @param {Format} formatter (Optional) The formatting strategy to use.
           *
           * @return {string} The stringified cipher params.
           *
           * @throws Error If neither the formatter nor the default formatter is set.
           *
           * @example
           *
           *     var string = cipherParams + '';
           *     var string = cipherParams.toString();
           *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
           */
          toString: function(formatter) {
            return (formatter || this.formatter).stringify(this);
          }
        });
        var C_format = C.format = {};
        var OpenSSLFormatter = C_format.OpenSSL = {
          /**
           * Converts a cipher params object to an OpenSSL-compatible string.
           *
           * @param {CipherParams} cipherParams The cipher params object.
           *
           * @return {string} The OpenSSL-compatible string.
           *
           * @static
           *
           * @example
           *
           *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
           */
          stringify: function(cipherParams) {
            var wordArray;
            var ciphertext = cipherParams.ciphertext;
            var salt = cipherParams.salt;
            if (salt) {
              wordArray = WordArray.create([1398893684, 1701076831]).concat(salt).concat(ciphertext);
            } else {
              wordArray = ciphertext;
            }
            return wordArray.toString(Base64);
          },
          /**
           * Converts an OpenSSL-compatible string to a cipher params object.
           *
           * @param {string} openSSLStr The OpenSSL-compatible string.
           *
           * @return {CipherParams} The cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
           */
          parse: function(openSSLStr) {
            var salt;
            var ciphertext = Base64.parse(openSSLStr);
            var ciphertextWords = ciphertext.words;
            if (ciphertextWords[0] == 1398893684 && ciphertextWords[1] == 1701076831) {
              salt = WordArray.create(ciphertextWords.slice(2, 4));
              ciphertextWords.splice(0, 4);
              ciphertext.sigBytes -= 16;
            }
            return CipherParams.create({ ciphertext, salt });
          }
        };
        var SerializableCipher = C_lib.SerializableCipher = Base.extend({
          /**
           * Configuration options.
           *
           * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
           */
          cfg: Base.extend({
            format: OpenSSLFormatter
          }),
          /**
           * Encrypts a message.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {WordArray|string} message The message to encrypt.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {CipherParams} A cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           */
          encrypt: function(cipher, message, key, cfg) {
            cfg = this.cfg.extend(cfg);
            var encryptor = cipher.createEncryptor(key, cfg);
            var ciphertext = encryptor.finalize(message);
            var cipherCfg = encryptor.cfg;
            return CipherParams.create({
              ciphertext,
              key,
              iv: cipherCfg.iv,
              algorithm: cipher,
              mode: cipherCfg.mode,
              padding: cipherCfg.padding,
              blockSize: cipher.blockSize,
              formatter: cfg.format
            });
          },
          /**
           * Decrypts serialized ciphertext.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {WordArray} The plaintext.
           *
           * @static
           *
           * @example
           *
           *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           */
          decrypt: function(cipher, ciphertext, key, cfg) {
            cfg = this.cfg.extend(cfg);
            ciphertext = this._parse(ciphertext, cfg.format);
            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);
            return plaintext;
          },
          /**
           * Converts serialized ciphertext to CipherParams,
           * else assumed CipherParams already and returns ciphertext unchanged.
           *
           * @param {CipherParams|string} ciphertext The ciphertext.
           * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
           *
           * @return {CipherParams} The unserialized ciphertext.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
           */
          _parse: function(ciphertext, format) {
            if (typeof ciphertext == "string") {
              return format.parse(ciphertext, this);
            } else {
              return ciphertext;
            }
          }
        });
        var C_kdf = C.kdf = {};
        var OpenSSLKdf = C_kdf.OpenSSL = {
          /**
           * Derives a key and IV from a password.
           *
           * @param {string} password The password to derive from.
           * @param {number} keySize The size in words of the key to generate.
           * @param {number} ivSize The size in words of the IV to generate.
           * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
           *
           * @return {CipherParams} A cipher params object with the key, IV, and salt.
           *
           * @static
           *
           * @example
           *
           *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
           *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
           */
          execute: function(password, keySize, ivSize, salt, hasher) {
            if (!salt) {
              salt = WordArray.random(64 / 8);
            }
            if (!hasher) {
              var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);
            } else {
              var key = EvpKDF.create({ keySize: keySize + ivSize, hasher }).compute(password, salt);
            }
            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
            key.sigBytes = keySize * 4;
            return CipherParams.create({ key, iv, salt });
          }
        };
        var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
          /**
           * Configuration options.
           *
           * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
           */
          cfg: SerializableCipher.cfg.extend({
            kdf: OpenSSLKdf
          }),
          /**
           * Encrypts a message using a password.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {WordArray|string} message The message to encrypt.
           * @param {string} password The password.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {CipherParams} A cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
           *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
           */
          encrypt: function(cipher, message, password, cfg) {
            cfg = this.cfg.extend(cfg);
            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, cfg.salt, cfg.hasher);
            cfg.iv = derivedParams.iv;
            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);
            ciphertext.mixIn(derivedParams);
            return ciphertext;
          },
          /**
           * Decrypts serialized ciphertext using a password.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
           * @param {string} password The password.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {WordArray} The plaintext.
           *
           * @static
           *
           * @example
           *
           *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
           *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
           */
          decrypt: function(cipher, ciphertext, password, cfg) {
            cfg = this.cfg.extend(cfg);
            ciphertext = this._parse(ciphertext, cfg.format);
            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt, cfg.hasher);
            cfg.iv = derivedParams.iv;
            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);
            return plaintext;
          }
        });
      }();
    });
  }
});

// node_modules/crypto-js/mode-cfb.js
var require_mode_cfb = __commonJS({
  "node_modules/crypto-js/mode-cfb.js"(exports2, module2) {
    (function(root2, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core2(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root2.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.mode.CFB = function() {
        var CFB = CryptoJS.lib.BlockCipherMode.extend();
        CFB.Encryptor = CFB.extend({
          processBlock: function(words, offset2) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            generateKeystreamAndEncrypt.call(this, words, offset2, blockSize, cipher);
            this._prevBlock = words.slice(offset2, offset2 + blockSize);
          }
        });
        CFB.Decryptor = CFB.extend({
          processBlock: function(words, offset2) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var thisBlock = words.slice(offset2, offset2 + blockSize);
            generateKeystreamAndEncrypt.call(this, words, offset2, blockSize, cipher);
            this._prevBlock = thisBlock;
          }
        });
        function generateKeystreamAndEncrypt(words, offset2, blockSize, cipher) {
          var keystream;
          var iv = this._iv;
          if (iv) {
            keystream = iv.slice(0);
            this._iv = void 0;
          } else {
            keystream = this._prevBlock;
          }
          cipher.encryptBlock(keystream, 0);
          for (var i = 0; i < blockSize; i++) {
            words[offset2 + i] ^= keystream[i];
          }
        }
        return CFB;
      }();
      return CryptoJS.mode.CFB;
    });
  }
});

// node_modules/crypto-js/mode-ctr.js
var require_mode_ctr = __commonJS({
  "node_modules/crypto-js/mode-ctr.js"(exports2, module2) {
    (function(root2, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core2(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root2.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.mode.CTR = function() {
        var CTR = CryptoJS.lib.BlockCipherMode.extend();
        var Encryptor = CTR.Encryptor = CTR.extend({
          processBlock: function(words, offset2) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var counter = this._counter;
            if (iv) {
              counter = this._counter = iv.slice(0);
              this._iv = void 0;
            }
            var keystream = counter.slice(0);
            cipher.encryptBlock(keystream, 0);
            counter[blockSize - 1] = counter[blockSize - 1] + 1 | 0;
            for (var i = 0; i < blockSize; i++) {
              words[offset2 + i] ^= keystream[i];
            }
          }
        });
        CTR.Decryptor = Encryptor;
        return CTR;
      }();
      return CryptoJS.mode.CTR;
    });
  }
});

// node_modules/crypto-js/mode-ctr-gladman.js
var require_mode_ctr_gladman = __commonJS({
  "node_modules/crypto-js/mode-ctr-gladman.js"(exports2, module2) {
    (function(root2, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core2(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root2.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.mode.CTRGladman = function() {
        var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();
        function incWord(word) {
          if ((word >> 24 & 255) === 255) {
            var b1 = word >> 16 & 255;
            var b2 = word >> 8 & 255;
            var b3 = word & 255;
            if (b1 === 255) {
              b1 = 0;
              if (b2 === 255) {
                b2 = 0;
                if (b3 === 255) {
                  b3 = 0;
                } else {
                  ++b3;
                }
              } else {
                ++b2;
              }
            } else {
              ++b1;
            }
            word = 0;
            word += b1 << 16;
            word += b2 << 8;
            word += b3;
          } else {
            word += 1 << 24;
          }
          return word;
        }
        function incCounter(counter) {
          if ((counter[0] = incWord(counter[0])) === 0) {
            counter[1] = incWord(counter[1]);
          }
          return counter;
        }
        var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
          processBlock: function(words, offset2) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var counter = this._counter;
            if (iv) {
              counter = this._counter = iv.slice(0);
              this._iv = void 0;
            }
            incCounter(counter);
            var keystream = counter.slice(0);
            cipher.encryptBlock(keystream, 0);
            for (var i = 0; i < blockSize; i++) {
              words[offset2 + i] ^= keystream[i];
            }
          }
        });
        CTRGladman.Decryptor = Encryptor;
        return CTRGladman;
      }();
      return CryptoJS.mode.CTRGladman;
    });
  }
});

// node_modules/crypto-js/mode-ofb.js
var require_mode_ofb = __commonJS({
  "node_modules/crypto-js/mode-ofb.js"(exports2, module2) {
    (function(root2, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core2(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root2.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.mode.OFB = function() {
        var OFB = CryptoJS.lib.BlockCipherMode.extend();
        var Encryptor = OFB.Encryptor = OFB.extend({
          processBlock: function(words, offset2) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var keystream = this._keystream;
            if (iv) {
              keystream = this._keystream = iv.slice(0);
              this._iv = void 0;
            }
            cipher.encryptBlock(keystream, 0);
            for (var i = 0; i < blockSize; i++) {
              words[offset2 + i] ^= keystream[i];
            }
          }
        });
        OFB.Decryptor = Encryptor;
        return OFB;
      }();
      return CryptoJS.mode.OFB;
    });
  }
});

// node_modules/crypto-js/mode-ecb.js
var require_mode_ecb = __commonJS({
  "node_modules/crypto-js/mode-ecb.js"(exports2, module2) {
    (function(root2, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core2(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root2.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.mode.ECB = function() {
        var ECB = CryptoJS.lib.BlockCipherMode.extend();
        ECB.Encryptor = ECB.extend({
          processBlock: function(words, offset2) {
            this._cipher.encryptBlock(words, offset2);
          }
        });
        ECB.Decryptor = ECB.extend({
          processBlock: function(words, offset2) {
            this._cipher.decryptBlock(words, offset2);
          }
        });
        return ECB;
      }();
      return CryptoJS.mode.ECB;
    });
  }
});

// node_modules/crypto-js/pad-ansix923.js
var require_pad_ansix923 = __commonJS({
  "node_modules/crypto-js/pad-ansix923.js"(exports2, module2) {
    (function(root2, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core2(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root2.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.pad.AnsiX923 = {
        pad: function(data, blockSize) {
          var dataSigBytes = data.sigBytes;
          var blockSizeBytes = blockSize * 4;
          var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;
          var lastBytePos = dataSigBytes + nPaddingBytes - 1;
          data.clamp();
          data.words[lastBytePos >>> 2] |= nPaddingBytes << 24 - lastBytePos % 4 * 8;
          data.sigBytes += nPaddingBytes;
        },
        unpad: function(data) {
          var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
          data.sigBytes -= nPaddingBytes;
        }
      };
      return CryptoJS.pad.Ansix923;
    });
  }
});

// node_modules/crypto-js/pad-iso10126.js
var require_pad_iso10126 = __commonJS({
  "node_modules/crypto-js/pad-iso10126.js"(exports2, module2) {
    (function(root2, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core2(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root2.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.pad.Iso10126 = {
        pad: function(data, blockSize) {
          var blockSizeBytes = blockSize * 4;
          var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
          data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));
        },
        unpad: function(data) {
          var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
          data.sigBytes -= nPaddingBytes;
        }
      };
      return CryptoJS.pad.Iso10126;
    });
  }
});

// node_modules/crypto-js/pad-iso97971.js
var require_pad_iso97971 = __commonJS({
  "node_modules/crypto-js/pad-iso97971.js"(exports2, module2) {
    (function(root2, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core2(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root2.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.pad.Iso97971 = {
        pad: function(data, blockSize) {
          data.concat(CryptoJS.lib.WordArray.create([2147483648], 1));
          CryptoJS.pad.ZeroPadding.pad(data, blockSize);
        },
        unpad: function(data) {
          CryptoJS.pad.ZeroPadding.unpad(data);
          data.sigBytes--;
        }
      };
      return CryptoJS.pad.Iso97971;
    });
  }
});

// node_modules/crypto-js/pad-zeropadding.js
var require_pad_zeropadding = __commonJS({
  "node_modules/crypto-js/pad-zeropadding.js"(exports2, module2) {
    (function(root2, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core2(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root2.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.pad.ZeroPadding = {
        pad: function(data, blockSize) {
          var blockSizeBytes = blockSize * 4;
          data.clamp();
          data.sigBytes += blockSizeBytes - (data.sigBytes % blockSizeBytes || blockSizeBytes);
        },
        unpad: function(data) {
          var dataWords = data.words;
          var i = data.sigBytes - 1;
          for (var i = data.sigBytes - 1; i >= 0; i--) {
            if (dataWords[i >>> 2] >>> 24 - i % 4 * 8 & 255) {
              data.sigBytes = i + 1;
              break;
            }
          }
        }
      };
      return CryptoJS.pad.ZeroPadding;
    });
  }
});

// node_modules/crypto-js/pad-nopadding.js
var require_pad_nopadding = __commonJS({
  "node_modules/crypto-js/pad-nopadding.js"(exports2, module2) {
    (function(root2, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core2(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root2.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.pad.NoPadding = {
        pad: function() {
        },
        unpad: function() {
        }
      };
      return CryptoJS.pad.NoPadding;
    });
  }
});

// node_modules/crypto-js/format-hex.js
var require_format_hex = __commonJS({
  "node_modules/crypto-js/format-hex.js"(exports2, module2) {
    (function(root2, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core2(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root2.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function(undefined2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var CipherParams = C_lib.CipherParams;
        var C_enc = C.enc;
        var Hex = C_enc.Hex;
        var C_format = C.format;
        var HexFormatter = C_format.Hex = {
          /**
           * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
           *
           * @param {CipherParams} cipherParams The cipher params object.
           *
           * @return {string} The hexadecimally encoded string.
           *
           * @static
           *
           * @example
           *
           *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
           */
          stringify: function(cipherParams) {
            return cipherParams.ciphertext.toString(Hex);
          },
          /**
           * Converts a hexadecimally encoded ciphertext string to a cipher params object.
           *
           * @param {string} input The hexadecimally encoded string.
           *
           * @return {CipherParams} The cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
           */
          parse: function(input) {
            var ciphertext = Hex.parse(input);
            return CipherParams.create({ ciphertext });
          }
        };
      })();
      return CryptoJS.format.Hex;
    });
  }
});

// node_modules/crypto-js/aes.js
var require_aes = __commonJS({
  "node_modules/crypto-js/aes.js"(exports2, module2) {
    (function(root2, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core2(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root2.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C.algo;
        var SBOX = [];
        var INV_SBOX = [];
        var SUB_MIX_0 = [];
        var SUB_MIX_1 = [];
        var SUB_MIX_2 = [];
        var SUB_MIX_3 = [];
        var INV_SUB_MIX_0 = [];
        var INV_SUB_MIX_1 = [];
        var INV_SUB_MIX_2 = [];
        var INV_SUB_MIX_3 = [];
        (function() {
          var d = [];
          for (var i = 0; i < 256; i++) {
            if (i < 128) {
              d[i] = i << 1;
            } else {
              d[i] = i << 1 ^ 283;
            }
          }
          var x = 0;
          var xi = 0;
          for (var i = 0; i < 256; i++) {
            var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
            sx = sx >>> 8 ^ sx & 255 ^ 99;
            SBOX[x] = sx;
            INV_SBOX[sx] = x;
            var x2 = d[x];
            var x4 = d[x2];
            var x8 = d[x4];
            var t = d[sx] * 257 ^ sx * 16843008;
            SUB_MIX_0[x] = t << 24 | t >>> 8;
            SUB_MIX_1[x] = t << 16 | t >>> 16;
            SUB_MIX_2[x] = t << 8 | t >>> 24;
            SUB_MIX_3[x] = t;
            var t = x8 * 16843009 ^ x4 * 65537 ^ x2 * 257 ^ x * 16843008;
            INV_SUB_MIX_0[sx] = t << 24 | t >>> 8;
            INV_SUB_MIX_1[sx] = t << 16 | t >>> 16;
            INV_SUB_MIX_2[sx] = t << 8 | t >>> 24;
            INV_SUB_MIX_3[sx] = t;
            if (!x) {
              x = xi = 1;
            } else {
              x = x2 ^ d[d[d[x8 ^ x2]]];
              xi ^= d[d[xi]];
            }
          }
        })();
        var RCON = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
        var AES = C_algo.AES = BlockCipher.extend({
          _doReset: function() {
            var t;
            if (this._nRounds && this._keyPriorReset === this._key) {
              return;
            }
            var key = this._keyPriorReset = this._key;
            var keyWords = key.words;
            var keySize = key.sigBytes / 4;
            var nRounds = this._nRounds = keySize + 6;
            var ksRows = (nRounds + 1) * 4;
            var keySchedule = this._keySchedule = [];
            for (var ksRow = 0; ksRow < ksRows; ksRow++) {
              if (ksRow < keySize) {
                keySchedule[ksRow] = keyWords[ksRow];
              } else {
                t = keySchedule[ksRow - 1];
                if (!(ksRow % keySize)) {
                  t = t << 8 | t >>> 24;
                  t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 255] << 16 | SBOX[t >>> 8 & 255] << 8 | SBOX[t & 255];
                  t ^= RCON[ksRow / keySize | 0] << 24;
                } else if (keySize > 6 && ksRow % keySize == 4) {
                  t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 255] << 16 | SBOX[t >>> 8 & 255] << 8 | SBOX[t & 255];
                }
                keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
              }
            }
            var invKeySchedule = this._invKeySchedule = [];
            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
              var ksRow = ksRows - invKsRow;
              if (invKsRow % 4) {
                var t = keySchedule[ksRow];
              } else {
                var t = keySchedule[ksRow - 4];
              }
              if (invKsRow < 4 || ksRow <= 4) {
                invKeySchedule[invKsRow] = t;
              } else {
                invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[t >>> 16 & 255]] ^ INV_SUB_MIX_2[SBOX[t >>> 8 & 255]] ^ INV_SUB_MIX_3[SBOX[t & 255]];
              }
            }
          },
          encryptBlock: function(M, offset2) {
            this._doCryptBlock(M, offset2, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
          },
          decryptBlock: function(M, offset2) {
            var t = M[offset2 + 1];
            M[offset2 + 1] = M[offset2 + 3];
            M[offset2 + 3] = t;
            this._doCryptBlock(M, offset2, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);
            var t = M[offset2 + 1];
            M[offset2 + 1] = M[offset2 + 3];
            M[offset2 + 3] = t;
          },
          _doCryptBlock: function(M, offset2, keySchedule, SUB_MIX_02, SUB_MIX_12, SUB_MIX_22, SUB_MIX_32, SBOX2) {
            var nRounds = this._nRounds;
            var s0 = M[offset2] ^ keySchedule[0];
            var s1 = M[offset2 + 1] ^ keySchedule[1];
            var s2 = M[offset2 + 2] ^ keySchedule[2];
            var s3 = M[offset2 + 3] ^ keySchedule[3];
            var ksRow = 4;
            for (var round = 1; round < nRounds; round++) {
              var t0 = SUB_MIX_02[s0 >>> 24] ^ SUB_MIX_12[s1 >>> 16 & 255] ^ SUB_MIX_22[s2 >>> 8 & 255] ^ SUB_MIX_32[s3 & 255] ^ keySchedule[ksRow++];
              var t1 = SUB_MIX_02[s1 >>> 24] ^ SUB_MIX_12[s2 >>> 16 & 255] ^ SUB_MIX_22[s3 >>> 8 & 255] ^ SUB_MIX_32[s0 & 255] ^ keySchedule[ksRow++];
              var t2 = SUB_MIX_02[s2 >>> 24] ^ SUB_MIX_12[s3 >>> 16 & 255] ^ SUB_MIX_22[s0 >>> 8 & 255] ^ SUB_MIX_32[s1 & 255] ^ keySchedule[ksRow++];
              var t3 = SUB_MIX_02[s3 >>> 24] ^ SUB_MIX_12[s0 >>> 16 & 255] ^ SUB_MIX_22[s1 >>> 8 & 255] ^ SUB_MIX_32[s2 & 255] ^ keySchedule[ksRow++];
              s0 = t0;
              s1 = t1;
              s2 = t2;
              s3 = t3;
            }
            var t0 = (SBOX2[s0 >>> 24] << 24 | SBOX2[s1 >>> 16 & 255] << 16 | SBOX2[s2 >>> 8 & 255] << 8 | SBOX2[s3 & 255]) ^ keySchedule[ksRow++];
            var t1 = (SBOX2[s1 >>> 24] << 24 | SBOX2[s2 >>> 16 & 255] << 16 | SBOX2[s3 >>> 8 & 255] << 8 | SBOX2[s0 & 255]) ^ keySchedule[ksRow++];
            var t2 = (SBOX2[s2 >>> 24] << 24 | SBOX2[s3 >>> 16 & 255] << 16 | SBOX2[s0 >>> 8 & 255] << 8 | SBOX2[s1 & 255]) ^ keySchedule[ksRow++];
            var t3 = (SBOX2[s3 >>> 24] << 24 | SBOX2[s0 >>> 16 & 255] << 16 | SBOX2[s1 >>> 8 & 255] << 8 | SBOX2[s2 & 255]) ^ keySchedule[ksRow++];
            M[offset2] = t0;
            M[offset2 + 1] = t1;
            M[offset2 + 2] = t2;
            M[offset2 + 3] = t3;
          },
          keySize: 256 / 32
        });
        C.AES = BlockCipher._createHelper(AES);
      })();
      return CryptoJS.AES;
    });
  }
});

// node_modules/crypto-js/tripledes.js
var require_tripledes = __commonJS({
  "node_modules/crypto-js/tripledes.js"(exports2, module2) {
    (function(root2, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core2(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root2.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C.algo;
        var PC1 = [
          57,
          49,
          41,
          33,
          25,
          17,
          9,
          1,
          58,
          50,
          42,
          34,
          26,
          18,
          10,
          2,
          59,
          51,
          43,
          35,
          27,
          19,
          11,
          3,
          60,
          52,
          44,
          36,
          63,
          55,
          47,
          39,
          31,
          23,
          15,
          7,
          62,
          54,
          46,
          38,
          30,
          22,
          14,
          6,
          61,
          53,
          45,
          37,
          29,
          21,
          13,
          5,
          28,
          20,
          12,
          4
        ];
        var PC2 = [
          14,
          17,
          11,
          24,
          1,
          5,
          3,
          28,
          15,
          6,
          21,
          10,
          23,
          19,
          12,
          4,
          26,
          8,
          16,
          7,
          27,
          20,
          13,
          2,
          41,
          52,
          31,
          37,
          47,
          55,
          30,
          40,
          51,
          45,
          33,
          48,
          44,
          49,
          39,
          56,
          34,
          53,
          46,
          42,
          50,
          36,
          29,
          32
        ];
        var BIT_SHIFTS = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];
        var SBOX_P = [
          {
            0: 8421888,
            268435456: 32768,
            536870912: 8421378,
            805306368: 2,
            1073741824: 512,
            1342177280: 8421890,
            1610612736: 8389122,
            1879048192: 8388608,
            2147483648: 514,
            2415919104: 8389120,
            2684354560: 33280,
            2952790016: 8421376,
            3221225472: 32770,
            3489660928: 8388610,
            3758096384: 0,
            4026531840: 33282,
            134217728: 0,
            402653184: 8421890,
            671088640: 33282,
            939524096: 32768,
            1207959552: 8421888,
            1476395008: 512,
            1744830464: 8421378,
            2013265920: 2,
            2281701376: 8389120,
            2550136832: 33280,
            2818572288: 8421376,
            3087007744: 8389122,
            3355443200: 8388610,
            3623878656: 32770,
            3892314112: 514,
            4160749568: 8388608,
            1: 32768,
            268435457: 2,
            536870913: 8421888,
            805306369: 8388608,
            1073741825: 8421378,
            1342177281: 33280,
            1610612737: 512,
            1879048193: 8389122,
            2147483649: 8421890,
            2415919105: 8421376,
            2684354561: 8388610,
            2952790017: 33282,
            3221225473: 514,
            3489660929: 8389120,
            3758096385: 32770,
            4026531841: 0,
            134217729: 8421890,
            402653185: 8421376,
            671088641: 8388608,
            939524097: 512,
            1207959553: 32768,
            1476395009: 8388610,
            1744830465: 2,
            2013265921: 33282,
            2281701377: 32770,
            2550136833: 8389122,
            2818572289: 514,
            3087007745: 8421888,
            3355443201: 8389120,
            3623878657: 0,
            3892314113: 33280,
            4160749569: 8421378
          },
          {
            0: 1074282512,
            16777216: 16384,
            33554432: 524288,
            50331648: 1074266128,
            67108864: 1073741840,
            83886080: 1074282496,
            100663296: 1073758208,
            117440512: 16,
            134217728: 540672,
            150994944: 1073758224,
            167772160: 1073741824,
            184549376: 540688,
            201326592: 524304,
            218103808: 0,
            234881024: 16400,
            251658240: 1074266112,
            8388608: 1073758208,
            25165824: 540688,
            41943040: 16,
            58720256: 1073758224,
            75497472: 1074282512,
            92274688: 1073741824,
            109051904: 524288,
            125829120: 1074266128,
            142606336: 524304,
            159383552: 0,
            176160768: 16384,
            192937984: 1074266112,
            209715200: 1073741840,
            226492416: 540672,
            243269632: 1074282496,
            260046848: 16400,
            268435456: 0,
            285212672: 1074266128,
            301989888: 1073758224,
            318767104: 1074282496,
            335544320: 1074266112,
            352321536: 16,
            369098752: 540688,
            385875968: 16384,
            402653184: 16400,
            419430400: 524288,
            436207616: 524304,
            452984832: 1073741840,
            469762048: 540672,
            486539264: 1073758208,
            503316480: 1073741824,
            520093696: 1074282512,
            276824064: 540688,
            293601280: 524288,
            310378496: 1074266112,
            327155712: 16384,
            343932928: 1073758208,
            360710144: 1074282512,
            377487360: 16,
            394264576: 1073741824,
            411041792: 1074282496,
            427819008: 1073741840,
            444596224: 1073758224,
            461373440: 524304,
            478150656: 0,
            494927872: 16400,
            511705088: 1074266128,
            528482304: 540672
          },
          {
            0: 260,
            1048576: 0,
            2097152: 67109120,
            3145728: 65796,
            4194304: 65540,
            5242880: 67108868,
            6291456: 67174660,
            7340032: 67174400,
            8388608: 67108864,
            9437184: 67174656,
            10485760: 65792,
            11534336: 67174404,
            12582912: 67109124,
            13631488: 65536,
            14680064: 4,
            15728640: 256,
            524288: 67174656,
            1572864: 67174404,
            2621440: 0,
            3670016: 67109120,
            4718592: 67108868,
            5767168: 65536,
            6815744: 65540,
            7864320: 260,
            8912896: 4,
            9961472: 256,
            11010048: 67174400,
            12058624: 65796,
            13107200: 65792,
            14155776: 67109124,
            15204352: 67174660,
            16252928: 67108864,
            16777216: 67174656,
            17825792: 65540,
            18874368: 65536,
            19922944: 67109120,
            20971520: 256,
            22020096: 67174660,
            23068672: 67108868,
            24117248: 0,
            25165824: 67109124,
            26214400: 67108864,
            27262976: 4,
            28311552: 65792,
            29360128: 67174400,
            30408704: 260,
            31457280: 65796,
            32505856: 67174404,
            17301504: 67108864,
            18350080: 260,
            19398656: 67174656,
            20447232: 0,
            21495808: 65540,
            22544384: 67109120,
            23592960: 256,
            24641536: 67174404,
            25690112: 65536,
            26738688: 67174660,
            27787264: 65796,
            28835840: 67108868,
            29884416: 67109124,
            30932992: 67174400,
            31981568: 4,
            33030144: 65792
          },
          {
            0: 2151682048,
            65536: 2147487808,
            131072: 4198464,
            196608: 2151677952,
            262144: 0,
            327680: 4198400,
            393216: 2147483712,
            458752: 4194368,
            524288: 2147483648,
            589824: 4194304,
            655360: 64,
            720896: 2147487744,
            786432: 2151678016,
            851968: 4160,
            917504: 4096,
            983040: 2151682112,
            32768: 2147487808,
            98304: 64,
            163840: 2151678016,
            229376: 2147487744,
            294912: 4198400,
            360448: 2151682112,
            425984: 0,
            491520: 2151677952,
            557056: 4096,
            622592: 2151682048,
            688128: 4194304,
            753664: 4160,
            819200: 2147483648,
            884736: 4194368,
            950272: 4198464,
            1015808: 2147483712,
            1048576: 4194368,
            1114112: 4198400,
            1179648: 2147483712,
            1245184: 0,
            1310720: 4160,
            1376256: 2151678016,
            1441792: 2151682048,
            1507328: 2147487808,
            1572864: 2151682112,
            1638400: 2147483648,
            1703936: 2151677952,
            1769472: 4198464,
            1835008: 2147487744,
            1900544: 4194304,
            1966080: 64,
            2031616: 4096,
            1081344: 2151677952,
            1146880: 2151682112,
            1212416: 0,
            1277952: 4198400,
            1343488: 4194368,
            1409024: 2147483648,
            1474560: 2147487808,
            1540096: 64,
            1605632: 2147483712,
            1671168: 4096,
            1736704: 2147487744,
            1802240: 2151678016,
            1867776: 4160,
            1933312: 2151682048,
            1998848: 4194304,
            2064384: 4198464
          },
          {
            0: 128,
            4096: 17039360,
            8192: 262144,
            12288: 536870912,
            16384: 537133184,
            20480: 16777344,
            24576: 553648256,
            28672: 262272,
            32768: 16777216,
            36864: 537133056,
            40960: 536871040,
            45056: 553910400,
            49152: 553910272,
            53248: 0,
            57344: 17039488,
            61440: 553648128,
            2048: 17039488,
            6144: 553648256,
            10240: 128,
            14336: 17039360,
            18432: 262144,
            22528: 537133184,
            26624: 553910272,
            30720: 536870912,
            34816: 537133056,
            38912: 0,
            43008: 553910400,
            47104: 16777344,
            51200: 536871040,
            55296: 553648128,
            59392: 16777216,
            63488: 262272,
            65536: 262144,
            69632: 128,
            73728: 536870912,
            77824: 553648256,
            81920: 16777344,
            86016: 553910272,
            90112: 537133184,
            94208: 16777216,
            98304: 553910400,
            102400: 553648128,
            106496: 17039360,
            110592: 537133056,
            114688: 262272,
            118784: 536871040,
            122880: 0,
            126976: 17039488,
            67584: 553648256,
            71680: 16777216,
            75776: 17039360,
            79872: 537133184,
            83968: 536870912,
            88064: 17039488,
            92160: 128,
            96256: 553910272,
            100352: 262272,
            104448: 553910400,
            108544: 0,
            112640: 553648128,
            116736: 16777344,
            120832: 262144,
            124928: 537133056,
            129024: 536871040
          },
          {
            0: 268435464,
            256: 8192,
            512: 270532608,
            768: 270540808,
            1024: 268443648,
            1280: 2097152,
            1536: 2097160,
            1792: 268435456,
            2048: 0,
            2304: 268443656,
            2560: 2105344,
            2816: 8,
            3072: 270532616,
            3328: 2105352,
            3584: 8200,
            3840: 270540800,
            128: 270532608,
            384: 270540808,
            640: 8,
            896: 2097152,
            1152: 2105352,
            1408: 268435464,
            1664: 268443648,
            1920: 8200,
            2176: 2097160,
            2432: 8192,
            2688: 268443656,
            2944: 270532616,
            3200: 0,
            3456: 270540800,
            3712: 2105344,
            3968: 268435456,
            4096: 268443648,
            4352: 270532616,
            4608: 270540808,
            4864: 8200,
            5120: 2097152,
            5376: 268435456,
            5632: 268435464,
            5888: 2105344,
            6144: 2105352,
            6400: 0,
            6656: 8,
            6912: 270532608,
            7168: 8192,
            7424: 268443656,
            7680: 270540800,
            7936: 2097160,
            4224: 8,
            4480: 2105344,
            4736: 2097152,
            4992: 268435464,
            5248: 268443648,
            5504: 8200,
            5760: 270540808,
            6016: 270532608,
            6272: 270540800,
            6528: 270532616,
            6784: 8192,
            7040: 2105352,
            7296: 2097160,
            7552: 0,
            7808: 268435456,
            8064: 268443656
          },
          {
            0: 1048576,
            16: 33555457,
            32: 1024,
            48: 1049601,
            64: 34604033,
            80: 0,
            96: 1,
            112: 34603009,
            128: 33555456,
            144: 1048577,
            160: 33554433,
            176: 34604032,
            192: 34603008,
            208: 1025,
            224: 1049600,
            240: 33554432,
            8: 34603009,
            24: 0,
            40: 33555457,
            56: 34604032,
            72: 1048576,
            88: 33554433,
            104: 33554432,
            120: 1025,
            136: 1049601,
            152: 33555456,
            168: 34603008,
            184: 1048577,
            200: 1024,
            216: 34604033,
            232: 1,
            248: 1049600,
            256: 33554432,
            272: 1048576,
            288: 33555457,
            304: 34603009,
            320: 1048577,
            336: 33555456,
            352: 34604032,
            368: 1049601,
            384: 1025,
            400: 34604033,
            416: 1049600,
            432: 1,
            448: 0,
            464: 34603008,
            480: 33554433,
            496: 1024,
            264: 1049600,
            280: 33555457,
            296: 34603009,
            312: 1,
            328: 33554432,
            344: 1048576,
            360: 1025,
            376: 34604032,
            392: 33554433,
            408: 34603008,
            424: 0,
            440: 34604033,
            456: 1049601,
            472: 1024,
            488: 33555456,
            504: 1048577
          },
          {
            0: 134219808,
            1: 131072,
            2: 134217728,
            3: 32,
            4: 131104,
            5: 134350880,
            6: 134350848,
            7: 2048,
            8: 134348800,
            9: 134219776,
            10: 133120,
            11: 134348832,
            12: 2080,
            13: 0,
            14: 134217760,
            15: 133152,
            2147483648: 2048,
            2147483649: 134350880,
            2147483650: 134219808,
            2147483651: 134217728,
            2147483652: 134348800,
            2147483653: 133120,
            2147483654: 133152,
            2147483655: 32,
            2147483656: 134217760,
            2147483657: 2080,
            2147483658: 131104,
            2147483659: 134350848,
            2147483660: 0,
            2147483661: 134348832,
            2147483662: 134219776,
            2147483663: 131072,
            16: 133152,
            17: 134350848,
            18: 32,
            19: 2048,
            20: 134219776,
            21: 134217760,
            22: 134348832,
            23: 131072,
            24: 0,
            25: 131104,
            26: 134348800,
            27: 134219808,
            28: 134350880,
            29: 133120,
            30: 2080,
            31: 134217728,
            2147483664: 131072,
            2147483665: 2048,
            2147483666: 134348832,
            2147483667: 133152,
            2147483668: 32,
            2147483669: 134348800,
            2147483670: 134217728,
            2147483671: 134219808,
            2147483672: 134350880,
            2147483673: 134217760,
            2147483674: 134219776,
            2147483675: 0,
            2147483676: 133120,
            2147483677: 2080,
            2147483678: 131104,
            2147483679: 134350848
          }
        ];
        var SBOX_MASK = [
          4160749569,
          528482304,
          33030144,
          2064384,
          129024,
          8064,
          504,
          2147483679
        ];
        var DES = C_algo.DES = BlockCipher.extend({
          _doReset: function() {
            var key = this._key;
            var keyWords = key.words;
            var keyBits = [];
            for (var i = 0; i < 56; i++) {
              var keyBitPos = PC1[i] - 1;
              keyBits[i] = keyWords[keyBitPos >>> 5] >>> 31 - keyBitPos % 32 & 1;
            }
            var subKeys = this._subKeys = [];
            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
              var subKey = subKeys[nSubKey] = [];
              var bitShift = BIT_SHIFTS[nSubKey];
              for (var i = 0; i < 24; i++) {
                subKey[i / 6 | 0] |= keyBits[(PC2[i] - 1 + bitShift) % 28] << 31 - i % 6;
                subKey[4 + (i / 6 | 0)] |= keyBits[28 + (PC2[i + 24] - 1 + bitShift) % 28] << 31 - i % 6;
              }
              subKey[0] = subKey[0] << 1 | subKey[0] >>> 31;
              for (var i = 1; i < 7; i++) {
                subKey[i] = subKey[i] >>> (i - 1) * 4 + 3;
              }
              subKey[7] = subKey[7] << 5 | subKey[7] >>> 27;
            }
            var invSubKeys = this._invSubKeys = [];
            for (var i = 0; i < 16; i++) {
              invSubKeys[i] = subKeys[15 - i];
            }
          },
          encryptBlock: function(M, offset2) {
            this._doCryptBlock(M, offset2, this._subKeys);
          },
          decryptBlock: function(M, offset2) {
            this._doCryptBlock(M, offset2, this._invSubKeys);
          },
          _doCryptBlock: function(M, offset2, subKeys) {
            this._lBlock = M[offset2];
            this._rBlock = M[offset2 + 1];
            exchangeLR.call(this, 4, 252645135);
            exchangeLR.call(this, 16, 65535);
            exchangeRL.call(this, 2, 858993459);
            exchangeRL.call(this, 8, 16711935);
            exchangeLR.call(this, 1, 1431655765);
            for (var round = 0; round < 16; round++) {
              var subKey = subKeys[round];
              var lBlock = this._lBlock;
              var rBlock = this._rBlock;
              var f2 = 0;
              for (var i = 0; i < 8; i++) {
                f2 |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
              }
              this._lBlock = rBlock;
              this._rBlock = lBlock ^ f2;
            }
            var t = this._lBlock;
            this._lBlock = this._rBlock;
            this._rBlock = t;
            exchangeLR.call(this, 1, 1431655765);
            exchangeRL.call(this, 8, 16711935);
            exchangeRL.call(this, 2, 858993459);
            exchangeLR.call(this, 16, 65535);
            exchangeLR.call(this, 4, 252645135);
            M[offset2] = this._lBlock;
            M[offset2 + 1] = this._rBlock;
          },
          keySize: 64 / 32,
          ivSize: 64 / 32,
          blockSize: 64 / 32
        });
        function exchangeLR(offset2, mask2) {
          var t = (this._lBlock >>> offset2 ^ this._rBlock) & mask2;
          this._rBlock ^= t;
          this._lBlock ^= t << offset2;
        }
        function exchangeRL(offset2, mask2) {
          var t = (this._rBlock >>> offset2 ^ this._lBlock) & mask2;
          this._lBlock ^= t;
          this._rBlock ^= t << offset2;
        }
        C.DES = BlockCipher._createHelper(DES);
        var TripleDES = C_algo.TripleDES = BlockCipher.extend({
          _doReset: function() {
            var key = this._key;
            var keyWords = key.words;
            if (keyWords.length !== 2 && keyWords.length !== 4 && keyWords.length < 6) {
              throw new Error("Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.");
            }
            var key1 = keyWords.slice(0, 2);
            var key2 = keyWords.length < 4 ? keyWords.slice(0, 2) : keyWords.slice(2, 4);
            var key3 = keyWords.length < 6 ? keyWords.slice(0, 2) : keyWords.slice(4, 6);
            this._des1 = DES.createEncryptor(WordArray.create(key1));
            this._des2 = DES.createEncryptor(WordArray.create(key2));
            this._des3 = DES.createEncryptor(WordArray.create(key3));
          },
          encryptBlock: function(M, offset2) {
            this._des1.encryptBlock(M, offset2);
            this._des2.decryptBlock(M, offset2);
            this._des3.encryptBlock(M, offset2);
          },
          decryptBlock: function(M, offset2) {
            this._des3.decryptBlock(M, offset2);
            this._des2.encryptBlock(M, offset2);
            this._des1.decryptBlock(M, offset2);
          },
          keySize: 192 / 32,
          ivSize: 64 / 32,
          blockSize: 64 / 32
        });
        C.TripleDES = BlockCipher._createHelper(TripleDES);
      })();
      return CryptoJS.TripleDES;
    });
  }
});

// node_modules/crypto-js/rc4.js
var require_rc4 = __commonJS({
  "node_modules/crypto-js/rc4.js"(exports2, module2) {
    (function(root2, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core2(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root2.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        var RC4 = C_algo.RC4 = StreamCipher.extend({
          _doReset: function() {
            var key = this._key;
            var keyWords = key.words;
            var keySigBytes = key.sigBytes;
            var S = this._S = [];
            for (var i = 0; i < 256; i++) {
              S[i] = i;
            }
            for (var i = 0, j = 0; i < 256; i++) {
              var keyByteIndex = i % keySigBytes;
              var keyByte = keyWords[keyByteIndex >>> 2] >>> 24 - keyByteIndex % 4 * 8 & 255;
              j = (j + S[i] + keyByte) % 256;
              var t = S[i];
              S[i] = S[j];
              S[j] = t;
            }
            this._i = this._j = 0;
          },
          _doProcessBlock: function(M, offset2) {
            M[offset2] ^= generateKeystreamWord.call(this);
          },
          keySize: 256 / 32,
          ivSize: 0
        });
        function generateKeystreamWord() {
          var S = this._S;
          var i = this._i;
          var j = this._j;
          var keystreamWord = 0;
          for (var n = 0; n < 4; n++) {
            i = (i + 1) % 256;
            j = (j + S[i]) % 256;
            var t = S[i];
            S[i] = S[j];
            S[j] = t;
            keystreamWord |= S[(S[i] + S[j]) % 256] << 24 - n * 8;
          }
          this._i = i;
          this._j = j;
          return keystreamWord;
        }
        C.RC4 = StreamCipher._createHelper(RC4);
        var RC4Drop = C_algo.RC4Drop = RC4.extend({
          /**
           * Configuration options.
           *
           * @property {number} drop The number of keystream words to drop. Default 192
           */
          cfg: RC4.cfg.extend({
            drop: 192
          }),
          _doReset: function() {
            RC4._doReset.call(this);
            for (var i = this.cfg.drop; i > 0; i--) {
              generateKeystreamWord.call(this);
            }
          }
        });
        C.RC4Drop = StreamCipher._createHelper(RC4Drop);
      })();
      return CryptoJS.RC4;
    });
  }
});

// node_modules/crypto-js/rabbit.js
var require_rabbit = __commonJS({
  "node_modules/crypto-js/rabbit.js"(exports2, module2) {
    (function(root2, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core2(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root2.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        var S = [];
        var C_ = [];
        var G = [];
        var Rabbit = C_algo.Rabbit = StreamCipher.extend({
          _doReset: function() {
            var K2 = this._key.words;
            var iv = this.cfg.iv;
            for (var i = 0; i < 4; i++) {
              K2[i] = (K2[i] << 8 | K2[i] >>> 24) & 16711935 | (K2[i] << 24 | K2[i] >>> 8) & 4278255360;
            }
            var X = this._X = [
              K2[0],
              K2[3] << 16 | K2[2] >>> 16,
              K2[1],
              K2[0] << 16 | K2[3] >>> 16,
              K2[2],
              K2[1] << 16 | K2[0] >>> 16,
              K2[3],
              K2[2] << 16 | K2[1] >>> 16
            ];
            var C2 = this._C = [
              K2[2] << 16 | K2[2] >>> 16,
              K2[0] & 4294901760 | K2[1] & 65535,
              K2[3] << 16 | K2[3] >>> 16,
              K2[1] & 4294901760 | K2[2] & 65535,
              K2[0] << 16 | K2[0] >>> 16,
              K2[2] & 4294901760 | K2[3] & 65535,
              K2[1] << 16 | K2[1] >>> 16,
              K2[3] & 4294901760 | K2[0] & 65535
            ];
            this._b = 0;
            for (var i = 0; i < 4; i++) {
              nextState.call(this);
            }
            for (var i = 0; i < 8; i++) {
              C2[i] ^= X[i + 4 & 7];
            }
            if (iv) {
              var IV = iv.words;
              var IV_0 = IV[0];
              var IV_1 = IV[1];
              var i0 = (IV_0 << 8 | IV_0 >>> 24) & 16711935 | (IV_0 << 24 | IV_0 >>> 8) & 4278255360;
              var i2 = (IV_1 << 8 | IV_1 >>> 24) & 16711935 | (IV_1 << 24 | IV_1 >>> 8) & 4278255360;
              var i1 = i0 >>> 16 | i2 & 4294901760;
              var i3 = i2 << 16 | i0 & 65535;
              C2[0] ^= i0;
              C2[1] ^= i1;
              C2[2] ^= i2;
              C2[3] ^= i3;
              C2[4] ^= i0;
              C2[5] ^= i1;
              C2[6] ^= i2;
              C2[7] ^= i3;
              for (var i = 0; i < 4; i++) {
                nextState.call(this);
              }
            }
          },
          _doProcessBlock: function(M, offset2) {
            var X = this._X;
            nextState.call(this);
            S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
            S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
            S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
            S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
            for (var i = 0; i < 4; i++) {
              S[i] = (S[i] << 8 | S[i] >>> 24) & 16711935 | (S[i] << 24 | S[i] >>> 8) & 4278255360;
              M[offset2 + i] ^= S[i];
            }
          },
          blockSize: 128 / 32,
          ivSize: 64 / 32
        });
        function nextState() {
          var X = this._X;
          var C2 = this._C;
          for (var i = 0; i < 8; i++) {
            C_[i] = C2[i];
          }
          C2[0] = C2[0] + 1295307597 + this._b | 0;
          C2[1] = C2[1] + 3545052371 + (C2[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
          C2[2] = C2[2] + 886263092 + (C2[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
          C2[3] = C2[3] + 1295307597 + (C2[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
          C2[4] = C2[4] + 3545052371 + (C2[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
          C2[5] = C2[5] + 886263092 + (C2[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
          C2[6] = C2[6] + 1295307597 + (C2[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
          C2[7] = C2[7] + 3545052371 + (C2[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
          this._b = C2[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
          for (var i = 0; i < 8; i++) {
            var gx = X[i] + C2[i];
            var ga = gx & 65535;
            var gb = gx >>> 16;
            var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
            var gl = ((gx & 4294901760) * gx | 0) + ((gx & 65535) * gx | 0);
            G[i] = gh ^ gl;
          }
          X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
          X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
          X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
          X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
          X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
          X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
          X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
          X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
        }
        C.Rabbit = StreamCipher._createHelper(Rabbit);
      })();
      return CryptoJS.Rabbit;
    });
  }
});

// node_modules/crypto-js/rabbit-legacy.js
var require_rabbit_legacy = __commonJS({
  "node_modules/crypto-js/rabbit-legacy.js"(exports2, module2) {
    (function(root2, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core2(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root2.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        var S = [];
        var C_ = [];
        var G = [];
        var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
          _doReset: function() {
            var K2 = this._key.words;
            var iv = this.cfg.iv;
            var X = this._X = [
              K2[0],
              K2[3] << 16 | K2[2] >>> 16,
              K2[1],
              K2[0] << 16 | K2[3] >>> 16,
              K2[2],
              K2[1] << 16 | K2[0] >>> 16,
              K2[3],
              K2[2] << 16 | K2[1] >>> 16
            ];
            var C2 = this._C = [
              K2[2] << 16 | K2[2] >>> 16,
              K2[0] & 4294901760 | K2[1] & 65535,
              K2[3] << 16 | K2[3] >>> 16,
              K2[1] & 4294901760 | K2[2] & 65535,
              K2[0] << 16 | K2[0] >>> 16,
              K2[2] & 4294901760 | K2[3] & 65535,
              K2[1] << 16 | K2[1] >>> 16,
              K2[3] & 4294901760 | K2[0] & 65535
            ];
            this._b = 0;
            for (var i = 0; i < 4; i++) {
              nextState.call(this);
            }
            for (var i = 0; i < 8; i++) {
              C2[i] ^= X[i + 4 & 7];
            }
            if (iv) {
              var IV = iv.words;
              var IV_0 = IV[0];
              var IV_1 = IV[1];
              var i0 = (IV_0 << 8 | IV_0 >>> 24) & 16711935 | (IV_0 << 24 | IV_0 >>> 8) & 4278255360;
              var i2 = (IV_1 << 8 | IV_1 >>> 24) & 16711935 | (IV_1 << 24 | IV_1 >>> 8) & 4278255360;
              var i1 = i0 >>> 16 | i2 & 4294901760;
              var i3 = i2 << 16 | i0 & 65535;
              C2[0] ^= i0;
              C2[1] ^= i1;
              C2[2] ^= i2;
              C2[3] ^= i3;
              C2[4] ^= i0;
              C2[5] ^= i1;
              C2[6] ^= i2;
              C2[7] ^= i3;
              for (var i = 0; i < 4; i++) {
                nextState.call(this);
              }
            }
          },
          _doProcessBlock: function(M, offset2) {
            var X = this._X;
            nextState.call(this);
            S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
            S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
            S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
            S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
            for (var i = 0; i < 4; i++) {
              S[i] = (S[i] << 8 | S[i] >>> 24) & 16711935 | (S[i] << 24 | S[i] >>> 8) & 4278255360;
              M[offset2 + i] ^= S[i];
            }
          },
          blockSize: 128 / 32,
          ivSize: 64 / 32
        });
        function nextState() {
          var X = this._X;
          var C2 = this._C;
          for (var i = 0; i < 8; i++) {
            C_[i] = C2[i];
          }
          C2[0] = C2[0] + 1295307597 + this._b | 0;
          C2[1] = C2[1] + 3545052371 + (C2[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
          C2[2] = C2[2] + 886263092 + (C2[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
          C2[3] = C2[3] + 1295307597 + (C2[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
          C2[4] = C2[4] + 3545052371 + (C2[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
          C2[5] = C2[5] + 886263092 + (C2[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
          C2[6] = C2[6] + 1295307597 + (C2[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
          C2[7] = C2[7] + 3545052371 + (C2[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
          this._b = C2[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
          for (var i = 0; i < 8; i++) {
            var gx = X[i] + C2[i];
            var ga = gx & 65535;
            var gb = gx >>> 16;
            var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
            var gl = ((gx & 4294901760) * gx | 0) + ((gx & 65535) * gx | 0);
            G[i] = gh ^ gl;
          }
          X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
          X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
          X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
          X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
          X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
          X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
          X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
          X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
        }
        C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
      })();
      return CryptoJS.RabbitLegacy;
    });
  }
});

// node_modules/crypto-js/blowfish.js
var require_blowfish = __commonJS({
  "node_modules/crypto-js/blowfish.js"(exports2, module2) {
    (function(root2, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core2(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root2.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C.algo;
        const N = 16;
        const ORIG_P = [
          608135816,
          2242054355,
          320440878,
          57701188,
          2752067618,
          698298832,
          137296536,
          3964562569,
          1160258022,
          953160567,
          3193202383,
          887688300,
          3232508343,
          3380367581,
          1065670069,
          3041331479,
          2450970073,
          2306472731
        ];
        const ORIG_S = [
          [
            3509652390,
            2564797868,
            805139163,
            3491422135,
            3101798381,
            1780907670,
            3128725573,
            4046225305,
            614570311,
            3012652279,
            134345442,
            2240740374,
            1667834072,
            1901547113,
            2757295779,
            4103290238,
            227898511,
            1921955416,
            1904987480,
            2182433518,
            2069144605,
            3260701109,
            2620446009,
            720527379,
            3318853667,
            677414384,
            3393288472,
            3101374703,
            2390351024,
            1614419982,
            1822297739,
            2954791486,
            3608508353,
            3174124327,
            2024746970,
            1432378464,
            3864339955,
            2857741204,
            1464375394,
            1676153920,
            1439316330,
            715854006,
            3033291828,
            289532110,
            2706671279,
            2087905683,
            3018724369,
            1668267050,
            732546397,
            1947742710,
            3462151702,
            2609353502,
            2950085171,
            1814351708,
            2050118529,
            680887927,
            999245976,
            1800124847,
            3300911131,
            1713906067,
            1641548236,
            4213287313,
            1216130144,
            1575780402,
            4018429277,
            3917837745,
            3693486850,
            3949271944,
            596196993,
            3549867205,
            258830323,
            2213823033,
            772490370,
            2760122372,
            1774776394,
            2652871518,
            566650946,
            4142492826,
            1728879713,
            2882767088,
            1783734482,
            3629395816,
            2517608232,
            2874225571,
            1861159788,
            326777828,
            3124490320,
            2130389656,
            2716951837,
            967770486,
            1724537150,
            2185432712,
            2364442137,
            1164943284,
            2105845187,
            998989502,
            3765401048,
            2244026483,
            1075463327,
            1455516326,
            1322494562,
            910128902,
            469688178,
            1117454909,
            936433444,
            3490320968,
            3675253459,
            1240580251,
            122909385,
            2157517691,
            634681816,
            4142456567,
            3825094682,
            3061402683,
            2540495037,
            79693498,
            3249098678,
            1084186820,
            1583128258,
            426386531,
            1761308591,
            1047286709,
            322548459,
            995290223,
            1845252383,
            2603652396,
            3431023940,
            2942221577,
            3202600964,
            3727903485,
            1712269319,
            422464435,
            3234572375,
            1170764815,
            3523960633,
            3117677531,
            1434042557,
            442511882,
            3600875718,
            1076654713,
            1738483198,
            4213154764,
            2393238008,
            3677496056,
            1014306527,
            4251020053,
            793779912,
            2902807211,
            842905082,
            4246964064,
            1395751752,
            1040244610,
            2656851899,
            3396308128,
            445077038,
            3742853595,
            3577915638,
            679411651,
            2892444358,
            2354009459,
            1767581616,
            3150600392,
            3791627101,
            3102740896,
            284835224,
            4246832056,
            1258075500,
            768725851,
            2589189241,
            3069724005,
            3532540348,
            1274779536,
            3789419226,
            2764799539,
            1660621633,
            3471099624,
            4011903706,
            913787905,
            3497959166,
            737222580,
            2514213453,
            2928710040,
            3937242737,
            1804850592,
            3499020752,
            2949064160,
            2386320175,
            2390070455,
            2415321851,
            4061277028,
            2290661394,
            2416832540,
            1336762016,
            1754252060,
            3520065937,
            3014181293,
            791618072,
            3188594551,
            3933548030,
            2332172193,
            3852520463,
            3043980520,
            413987798,
            3465142937,
            3030929376,
            4245938359,
            2093235073,
            3534596313,
            375366246,
            2157278981,
            2479649556,
            555357303,
            3870105701,
            2008414854,
            3344188149,
            4221384143,
            3956125452,
            2067696032,
            3594591187,
            2921233993,
            2428461,
            544322398,
            577241275,
            1471733935,
            610547355,
            4027169054,
            1432588573,
            1507829418,
            2025931657,
            3646575487,
            545086370,
            48609733,
            2200306550,
            1653985193,
            298326376,
            1316178497,
            3007786442,
            2064951626,
            458293330,
            2589141269,
            3591329599,
            3164325604,
            727753846,
            2179363840,
            146436021,
            1461446943,
            4069977195,
            705550613,
            3059967265,
            3887724982,
            4281599278,
            3313849956,
            1404054877,
            2845806497,
            146425753,
            1854211946
          ],
          [
            1266315497,
            3048417604,
            3681880366,
            3289982499,
            290971e4,
            1235738493,
            2632868024,
            2414719590,
            3970600049,
            1771706367,
            1449415276,
            3266420449,
            422970021,
            1963543593,
            2690192192,
            3826793022,
            1062508698,
            1531092325,
            1804592342,
            2583117782,
            2714934279,
            4024971509,
            1294809318,
            4028980673,
            1289560198,
            2221992742,
            1669523910,
            35572830,
            157838143,
            1052438473,
            1016535060,
            1802137761,
            1753167236,
            1386275462,
            3080475397,
            2857371447,
            1040679964,
            2145300060,
            2390574316,
            1461121720,
            2956646967,
            4031777805,
            4028374788,
            33600511,
            2920084762,
            1018524850,
            629373528,
            3691585981,
            3515945977,
            2091462646,
            2486323059,
            586499841,
            988145025,
            935516892,
            3367335476,
            2599673255,
            2839830854,
            265290510,
            3972581182,
            2759138881,
            3795373465,
            1005194799,
            847297441,
            406762289,
            1314163512,
            1332590856,
            1866599683,
            4127851711,
            750260880,
            613907577,
            1450815602,
            3165620655,
            3734664991,
            3650291728,
            3012275730,
            3704569646,
            1427272223,
            778793252,
            1343938022,
            2676280711,
            2052605720,
            1946737175,
            3164576444,
            3914038668,
            3967478842,
            3682934266,
            1661551462,
            3294938066,
            4011595847,
            840292616,
            3712170807,
            616741398,
            312560963,
            711312465,
            1351876610,
            322626781,
            1910503582,
            271666773,
            2175563734,
            1594956187,
            70604529,
            3617834859,
            1007753275,
            1495573769,
            4069517037,
            2549218298,
            2663038764,
            504708206,
            2263041392,
            3941167025,
            2249088522,
            1514023603,
            1998579484,
            1312622330,
            694541497,
            2582060303,
            2151582166,
            1382467621,
            776784248,
            2618340202,
            3323268794,
            2497899128,
            2784771155,
            503983604,
            4076293799,
            907881277,
            423175695,
            432175456,
            1378068232,
            4145222326,
            3954048622,
            3938656102,
            3820766613,
            2793130115,
            2977904593,
            26017576,
            3274890735,
            3194772133,
            1700274565,
            1756076034,
            4006520079,
            3677328699,
            720338349,
            1533947780,
            354530856,
            688349552,
            3973924725,
            1637815568,
            332179504,
            3949051286,
            53804574,
            2852348879,
            3044236432,
            1282449977,
            3583942155,
            3416972820,
            4006381244,
            1617046695,
            2628476075,
            3002303598,
            1686838959,
            431878346,
            2686675385,
            1700445008,
            1080580658,
            1009431731,
            832498133,
            3223435511,
            2605976345,
            2271191193,
            2516031870,
            1648197032,
            4164389018,
            2548247927,
            300782431,
            375919233,
            238389289,
            3353747414,
            2531188641,
            2019080857,
            1475708069,
            455242339,
            2609103871,
            448939670,
            3451063019,
            1395535956,
            2413381860,
            1841049896,
            1491858159,
            885456874,
            4264095073,
            4001119347,
            1565136089,
            3898914787,
            1108368660,
            540939232,
            1173283510,
            2745871338,
            3681308437,
            4207628240,
            3343053890,
            4016749493,
            1699691293,
            1103962373,
            3625875870,
            2256883143,
            3830138730,
            1031889488,
            3479347698,
            1535977030,
            4236805024,
            3251091107,
            2132092099,
            1774941330,
            1199868427,
            1452454533,
            157007616,
            2904115357,
            342012276,
            595725824,
            1480756522,
            206960106,
            497939518,
            591360097,
            863170706,
            2375253569,
            3596610801,
            1814182875,
            2094937945,
            3421402208,
            1082520231,
            3463918190,
            2785509508,
            435703966,
            3908032597,
            1641649973,
            2842273706,
            3305899714,
            1510255612,
            2148256476,
            2655287854,
            3276092548,
            4258621189,
            236887753,
            3681803219,
            274041037,
            1734335097,
            3815195456,
            3317970021,
            1899903192,
            1026095262,
            4050517792,
            356393447,
            2410691914,
            3873677099,
            3682840055
          ],
          [
            3913112168,
            2491498743,
            4132185628,
            2489919796,
            1091903735,
            1979897079,
            3170134830,
            3567386728,
            3557303409,
            857797738,
            1136121015,
            1342202287,
            507115054,
            2535736646,
            337727348,
            3213592640,
            1301675037,
            2528481711,
            1895095763,
            1721773893,
            3216771564,
            62756741,
            2142006736,
            835421444,
            2531993523,
            1442658625,
            3659876326,
            2882144922,
            676362277,
            1392781812,
            170690266,
            3921047035,
            1759253602,
            3611846912,
            1745797284,
            664899054,
            1329594018,
            3901205900,
            3045908486,
            2062866102,
            2865634940,
            3543621612,
            3464012697,
            1080764994,
            553557557,
            3656615353,
            3996768171,
            991055499,
            499776247,
            1265440854,
            648242737,
            3940784050,
            980351604,
            3713745714,
            1749149687,
            3396870395,
            4211799374,
            3640570775,
            1161844396,
            3125318951,
            1431517754,
            545492359,
            4268468663,
            3499529547,
            1437099964,
            2702547544,
            3433638243,
            2581715763,
            2787789398,
            1060185593,
            1593081372,
            2418618748,
            4260947970,
            69676912,
            2159744348,
            86519011,
            2512459080,
            3838209314,
            1220612927,
            3339683548,
            133810670,
            1090789135,
            1078426020,
            1569222167,
            845107691,
            3583754449,
            4072456591,
            1091646820,
            628848692,
            1613405280,
            3757631651,
            526609435,
            236106946,
            48312990,
            2942717905,
            3402727701,
            1797494240,
            859738849,
            992217954,
            4005476642,
            2243076622,
            3870952857,
            3732016268,
            765654824,
            3490871365,
            2511836413,
            1685915746,
            3888969200,
            1414112111,
            2273134842,
            3281911079,
            4080962846,
            172450625,
            2569994100,
            980381355,
            4109958455,
            2819808352,
            2716589560,
            2568741196,
            3681446669,
            3329971472,
            1835478071,
            660984891,
            3704678404,
            4045999559,
            3422617507,
            3040415634,
            1762651403,
            1719377915,
            3470491036,
            2693910283,
            3642056355,
            3138596744,
            1364962596,
            2073328063,
            1983633131,
            926494387,
            3423689081,
            2150032023,
            4096667949,
            1749200295,
            3328846651,
            309677260,
            2016342300,
            1779581495,
            3079819751,
            111262694,
            1274766160,
            443224088,
            298511866,
            1025883608,
            3806446537,
            1145181785,
            168956806,
            3641502830,
            3584813610,
            1689216846,
            3666258015,
            3200248200,
            1692713982,
            2646376535,
            4042768518,
            1618508792,
            1610833997,
            3523052358,
            4130873264,
            2001055236,
            3610705100,
            2202168115,
            4028541809,
            2961195399,
            1006657119,
            2006996926,
            3186142756,
            1430667929,
            3210227297,
            1314452623,
            4074634658,
            4101304120,
            2273951170,
            1399257539,
            3367210612,
            3027628629,
            1190975929,
            2062231137,
            2333990788,
            2221543033,
            2438960610,
            1181637006,
            548689776,
            2362791313,
            3372408396,
            3104550113,
            3145860560,
            296247880,
            1970579870,
            3078560182,
            3769228297,
            1714227617,
            3291629107,
            3898220290,
            166772364,
            1251581989,
            493813264,
            448347421,
            195405023,
            2709975567,
            677966185,
            3703036547,
            1463355134,
            2715995803,
            1338867538,
            1343315457,
            2802222074,
            2684532164,
            233230375,
            2599980071,
            2000651841,
            3277868038,
            1638401717,
            4028070440,
            3237316320,
            6314154,
            819756386,
            300326615,
            590932579,
            1405279636,
            3267499572,
            3150704214,
            2428286686,
            3959192993,
            3461946742,
            1862657033,
            1266418056,
            963775037,
            2089974820,
            2263052895,
            1917689273,
            448879540,
            3550394620,
            3981727096,
            150775221,
            3627908307,
            1303187396,
            508620638,
            2975983352,
            2726630617,
            1817252668,
            1876281319,
            1457606340,
            908771278,
            3720792119,
            3617206836,
            2455994898,
            1729034894,
            1080033504
          ],
          [
            976866871,
            3556439503,
            2881648439,
            1522871579,
            1555064734,
            1336096578,
            3548522304,
            2579274686,
            3574697629,
            3205460757,
            3593280638,
            3338716283,
            3079412587,
            564236357,
            2993598910,
            1781952180,
            1464380207,
            3163844217,
            3332601554,
            1699332808,
            1393555694,
            1183702653,
            3581086237,
            1288719814,
            691649499,
            2847557200,
            2895455976,
            3193889540,
            2717570544,
            1781354906,
            1676643554,
            2592534050,
            3230253752,
            1126444790,
            2770207658,
            2633158820,
            2210423226,
            2615765581,
            2414155088,
            3127139286,
            673620729,
            2805611233,
            1269405062,
            4015350505,
            3341807571,
            4149409754,
            1057255273,
            2012875353,
            2162469141,
            2276492801,
            2601117357,
            993977747,
            3918593370,
            2654263191,
            753973209,
            36408145,
            2530585658,
            25011837,
            3520020182,
            2088578344,
            530523599,
            2918365339,
            1524020338,
            1518925132,
            3760827505,
            3759777254,
            1202760957,
            3985898139,
            3906192525,
            674977740,
            4174734889,
            2031300136,
            2019492241,
            3983892565,
            4153806404,
            3822280332,
            352677332,
            2297720250,
            60907813,
            90501309,
            3286998549,
            1016092578,
            2535922412,
            2839152426,
            457141659,
            509813237,
            4120667899,
            652014361,
            1966332200,
            2975202805,
            55981186,
            2327461051,
            676427537,
            3255491064,
            2882294119,
            3433927263,
            1307055953,
            942726286,
            933058658,
            2468411793,
            3933900994,
            4215176142,
            1361170020,
            2001714738,
            2830558078,
            3274259782,
            1222529897,
            1679025792,
            2729314320,
            3714953764,
            1770335741,
            151462246,
            3013232138,
            1682292957,
            1483529935,
            471910574,
            1539241949,
            458788160,
            3436315007,
            1807016891,
            3718408830,
            978976581,
            1043663428,
            3165965781,
            1927990952,
            4200891579,
            2372276910,
            3208408903,
            3533431907,
            1412390302,
            2931980059,
            4132332400,
            1947078029,
            3881505623,
            4168226417,
            2941484381,
            1077988104,
            1320477388,
            886195818,
            18198404,
            3786409e3,
            2509781533,
            112762804,
            3463356488,
            1866414978,
            891333506,
            18488651,
            661792760,
            1628790961,
            3885187036,
            3141171499,
            876946877,
            2693282273,
            1372485963,
            791857591,
            2686433993,
            3759982718,
            3167212022,
            3472953795,
            2716379847,
            445679433,
            3561995674,
            3504004811,
            3574258232,
            54117162,
            3331405415,
            2381918588,
            3769707343,
            4154350007,
            1140177722,
            4074052095,
            668550556,
            3214352940,
            367459370,
            261225585,
            2610173221,
            4209349473,
            3468074219,
            3265815641,
            314222801,
            3066103646,
            3808782860,
            282218597,
            3406013506,
            3773591054,
            379116347,
            1285071038,
            846784868,
            2669647154,
            3771962079,
            3550491691,
            2305946142,
            453669953,
            1268987020,
            3317592352,
            3279303384,
            3744833421,
            2610507566,
            3859509063,
            266596637,
            3847019092,
            517658769,
            3462560207,
            3443424879,
            370717030,
            4247526661,
            2224018117,
            4143653529,
            4112773975,
            2788324899,
            2477274417,
            1456262402,
            2901442914,
            1517677493,
            1846949527,
            2295493580,
            3734397586,
            2176403920,
            1280348187,
            1908823572,
            3871786941,
            846861322,
            1172426758,
            3287448474,
            3383383037,
            1655181056,
            3139813346,
            901632758,
            1897031941,
            2986607138,
            3066810236,
            3447102507,
            1393639104,
            373351379,
            950779232,
            625454576,
            3124240540,
            4148612726,
            2007998917,
            544563296,
            2244738638,
            2330496472,
            2058025392,
            1291430526,
            424198748,
            50039436,
            29584100,
            3605783033,
            2429876329,
            2791104160,
            1057563949,
            3255363231,
            3075367218,
            3463963227,
            1469046755,
            985887462
          ]
        ];
        var BLOWFISH_CTX = {
          pbox: [],
          sbox: []
        };
        function F(ctx, x) {
          let a = x >> 24 & 255;
          let b = x >> 16 & 255;
          let c = x >> 8 & 255;
          let d = x & 255;
          let y = ctx.sbox[0][a] + ctx.sbox[1][b];
          y = y ^ ctx.sbox[2][c];
          y = y + ctx.sbox[3][d];
          return y;
        }
        function BlowFish_Encrypt(ctx, left, right) {
          let Xl = left;
          let Xr = right;
          let temp;
          for (let i = 0; i < N; ++i) {
            Xl = Xl ^ ctx.pbox[i];
            Xr = F(ctx, Xl) ^ Xr;
            temp = Xl;
            Xl = Xr;
            Xr = temp;
          }
          temp = Xl;
          Xl = Xr;
          Xr = temp;
          Xr = Xr ^ ctx.pbox[N];
          Xl = Xl ^ ctx.pbox[N + 1];
          return { left: Xl, right: Xr };
        }
        function BlowFish_Decrypt(ctx, left, right) {
          let Xl = left;
          let Xr = right;
          let temp;
          for (let i = N + 1; i > 1; --i) {
            Xl = Xl ^ ctx.pbox[i];
            Xr = F(ctx, Xl) ^ Xr;
            temp = Xl;
            Xl = Xr;
            Xr = temp;
          }
          temp = Xl;
          Xl = Xr;
          Xr = temp;
          Xr = Xr ^ ctx.pbox[1];
          Xl = Xl ^ ctx.pbox[0];
          return { left: Xl, right: Xr };
        }
        function BlowFishInit(ctx, key, keysize) {
          for (let Row = 0; Row < 4; Row++) {
            ctx.sbox[Row] = [];
            for (let Col = 0; Col < 256; Col++) {
              ctx.sbox[Row][Col] = ORIG_S[Row][Col];
            }
          }
          let keyIndex = 0;
          for (let index = 0; index < N + 2; index++) {
            ctx.pbox[index] = ORIG_P[index] ^ key[keyIndex];
            keyIndex++;
            if (keyIndex >= keysize) {
              keyIndex = 0;
            }
          }
          let Data1 = 0;
          let Data2 = 0;
          let res = 0;
          for (let i = 0; i < N + 2; i += 2) {
            res = BlowFish_Encrypt(ctx, Data1, Data2);
            Data1 = res.left;
            Data2 = res.right;
            ctx.pbox[i] = Data1;
            ctx.pbox[i + 1] = Data2;
          }
          for (let i = 0; i < 4; i++) {
            for (let j = 0; j < 256; j += 2) {
              res = BlowFish_Encrypt(ctx, Data1, Data2);
              Data1 = res.left;
              Data2 = res.right;
              ctx.sbox[i][j] = Data1;
              ctx.sbox[i][j + 1] = Data2;
            }
          }
          return true;
        }
        var Blowfish = C_algo.Blowfish = BlockCipher.extend({
          _doReset: function() {
            if (this._keyPriorReset === this._key) {
              return;
            }
            var key = this._keyPriorReset = this._key;
            var keyWords = key.words;
            var keySize = key.sigBytes / 4;
            BlowFishInit(BLOWFISH_CTX, keyWords, keySize);
          },
          encryptBlock: function(M, offset2) {
            var res = BlowFish_Encrypt(BLOWFISH_CTX, M[offset2], M[offset2 + 1]);
            M[offset2] = res.left;
            M[offset2 + 1] = res.right;
          },
          decryptBlock: function(M, offset2) {
            var res = BlowFish_Decrypt(BLOWFISH_CTX, M[offset2], M[offset2 + 1]);
            M[offset2] = res.left;
            M[offset2 + 1] = res.right;
          },
          blockSize: 64 / 32,
          keySize: 128 / 32,
          ivSize: 64 / 32
        });
        C.Blowfish = BlockCipher._createHelper(Blowfish);
      })();
      return CryptoJS.Blowfish;
    });
  }
});

// node_modules/crypto-js/index.js
var require_crypto_js = __commonJS({
  "node_modules/crypto-js/index.js"(exports2, module2) {
    (function(root2, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core2(), require_x64_core(), require_lib_typedarrays(), require_enc_utf16(), require_enc_base64(), require_enc_base64url(), require_md5(), require_sha1(), require_sha2562(), require_sha224(), require_sha5122(), require_sha384(), require_sha3(), require_ripemd160(), require_hmac2(), require_pbkdf22(), require_evpkdf(), require_cipher_core(), require_mode_cfb(), require_mode_ctr(), require_mode_ctr_gladman(), require_mode_ofb(), require_mode_ecb(), require_pad_ansix923(), require_pad_iso10126(), require_pad_iso97971(), require_pad_zeropadding(), require_pad_nopadding(), require_format_hex(), require_aes(), require_tripledes(), require_rc4(), require_rabbit(), require_rabbit_legacy(), require_blowfish());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core", "./lib-typedarrays", "./enc-utf16", "./enc-base64", "./enc-base64url", "./md5", "./sha1", "./sha256", "./sha224", "./sha512", "./sha384", "./sha3", "./ripemd160", "./hmac", "./pbkdf2", "./evpkdf", "./cipher-core", "./mode-cfb", "./mode-ctr", "./mode-ctr-gladman", "./mode-ofb", "./mode-ecb", "./pad-ansix923", "./pad-iso10126", "./pad-iso97971", "./pad-zeropadding", "./pad-nopadding", "./format-hex", "./aes", "./tripledes", "./rc4", "./rabbit", "./rabbit-legacy", "./blowfish"], factory);
      } else {
        root2.CryptoJS = factory(root2.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      return CryptoJS;
    });
  }
});

// node_modules/navi-sdk/dist/libs/Aggregator/utils.js
var require_utils10 = __commonJS({
  "node_modules/navi-sdk/dist/libs/Aggregator/utils.js"(exports2) {
    "use strict";
    var __importDefault2 = exports2 && exports2.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.generateRefId = generateRefId;
    var crypto_js_1 = __importDefault2(require_crypto_js());
    var RESERVED_IDS_ARRAY = [1873161113, 8190801341];
    var RESERVED_REF_IDS = new Set(RESERVED_IDS_ARRAY);
    var REF_ID_MOD = Math.pow(10, 10);
    function generateRefId(apiKey) {
      const digest = crypto_js_1.default.SHA256(apiKey).toString(crypto_js_1.default.enc.Hex);
      let refIdCandidate = parseInt(digest.slice(0, 16), 16);
      refIdCandidate = refIdCandidate % REF_ID_MOD;
      let offset2 = 0;
      let finalRefId = refIdCandidate;
      while (RESERVED_REF_IDS.has(finalRefId)) {
        throw new Error("Ref ID conflict, please try a new apiKey");
      }
      return finalRefId;
    }
  }
});

// node_modules/navi-sdk/dist/libs/Aggregator/Dex/bluefin.js
var require_bluefin = __commonJS({
  "node_modules/navi-sdk/dist/libs/Aggregator/Dex/bluefin.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.makeBluefinPTB = makeBluefinPTB;
    var config_1 = require_config();
    var utils_1 = require_utils6();
    function makeBluefinPTB(txb, poolId, pathTempCoin, amount, a2b, typeArguments) {
      return __awaiter2(this, void 0, void 0, function* () {
        const coinA = a2b ? pathTempCoin : zeroCoin(txb, typeArguments[0]);
        const coinB = a2b ? zeroCoin(txb, typeArguments[1]) : pathTempCoin;
        const coinAInBalance = coinToBalance(txb, coinA, typeArguments[0]);
        const coinBInBalance = coinToBalance(txb, coinB, typeArguments[1]);
        const sqrtPriceLimit = BigInt(a2b ? "4295048017" : "79226673515401279992447579054");
        const args = [
          txb.object(utils_1.SUI_CLOCK_OBJECT_ID),
          txb.object(config_1.AggregatorConfig.bluefinGlobalConfig),
          txb.object(poolId),
          coinAInBalance,
          coinBInBalance,
          txb.pure.bool(a2b),
          txb.pure.bool(true),
          amount,
          txb.pure.u64(0),
          txb.pure.u128(sqrtPriceLimit.toString())
        ];
        const [coinAOutInBalance, coinBOutInBalance] = txb.moveCall({
          target: `${config_1.AggregatorConfig.bluefinPackageId}::pool::swap`,
          typeArguments,
          arguments: args
        });
        const coinAOut = balanceToCoin(txb, coinAOutInBalance, typeArguments[0]);
        const coinBOut = balanceToCoin(txb, coinBOutInBalance, typeArguments[1]);
        return {
          coinAOut,
          coinBOut
        };
      });
    }
    var zeroCoin = (txb, coinType) => {
      return txb.moveCall({
        target: "0x2::coin::zero",
        typeArguments: [coinType]
      });
    };
    function coinToBalance(txb, coin, coinType) {
      return txb.moveCall({
        target: "0x2::coin::into_balance",
        arguments: [coin],
        typeArguments: [coinType]
      });
    }
    function balanceToCoin(txb, coin, coinType) {
      return txb.moveCall({
        target: `0x2::coin::from_balance`,
        arguments: [coin],
        typeArguments: [coinType]
      });
    }
  }
});

// node_modules/navi-sdk/dist/libs/Aggregator/Dex/vSui.js
var require_vSui = __commonJS({
  "node_modules/navi-sdk/dist/libs/Aggregator/Dex/vSui.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.makeVSUIPTB = makeVSUIPTB;
    var config_1 = require_config();
    var address_1 = require_address();
    function makeVSUIPTB(txb, pathTempCoin, a2b) {
      return __awaiter2(this, void 0, void 0, function* () {
        let coinB;
        if (a2b) {
          [coinB] = txb.moveCall({
            target: `${config_1.AggregatorConfig.vSuiPackageId}::native_pool::stake_non_entry`,
            typeArguments: [],
            arguments: [
              txb.object(address_1.vSuiConfig.pool),
              txb.object(address_1.vSuiConfig.metadata),
              txb.object(address_1.vSuiConfig.wrapper),
              pathTempCoin
            ]
          });
        } else {
          const [unstakeTicket] = txb.moveCall({
            target: `${config_1.AggregatorConfig.vSuiPackageId}::native_pool::mint_ticket_non_entry`,
            typeArguments: [],
            arguments: [
              txb.object(address_1.vSuiConfig.pool),
              txb.object(address_1.vSuiConfig.metadata),
              pathTempCoin
            ]
          });
          [coinB] = txb.moveCall({
            target: `${config_1.AggregatorConfig.vSuiPackageId}::native_pool::burn_ticket_non_entry`,
            arguments: [
              txb.object(address_1.vSuiConfig.pool),
              txb.object(address_1.vSuiConfig.wrapper),
              unstakeTicket
            ],
            typeArguments: []
          });
        }
        return coinB;
      });
    }
  }
});

// node_modules/navi-sdk/dist/libs/Aggregator/Dex/haSui.js
var require_haSui = __commonJS({
  "node_modules/navi-sdk/dist/libs/Aggregator/Dex/haSui.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.makeHASUIPTB = makeHASUIPTB;
    var config_1 = require_config();
    var address_1 = require_address();
    function makeHASUIPTB(txb, pathTempCoin, a2b) {
      return __awaiter2(this, void 0, void 0, function* () {
        const func = a2b ? "request_stake_coin" : "request_unstake_instant_coin";
        let coinB;
        if (a2b) {
          [coinB] = txb.moveCall({
            target: `${config_1.AggregatorConfig.haSuiPackageId}::staking::${func}`,
            typeArguments: [],
            arguments: [
              txb.object(address_1.vSuiConfig.wrapper),
              txb.object(config_1.AggregatorConfig.haSuiConfigId),
              pathTempCoin,
              txb.pure.address("0x0000000000000000000000000000000000000000000000000000000000000000")
            ]
          });
        } else {
          [coinB] = txb.moveCall({
            target: `${config_1.AggregatorConfig.haSuiPackageId}::staking::${func}`,
            typeArguments: [],
            arguments: [
              txb.object(address_1.vSuiConfig.wrapper),
              txb.object(config_1.AggregatorConfig.haSuiConfigId),
              pathTempCoin
            ]
          });
        }
        return coinB;
      });
    }
  }
});

// node_modules/navi-sdk/dist/libs/Aggregator/Dex/magma.js
var require_magma = __commonJS({
  "node_modules/navi-sdk/dist/libs/Aggregator/Dex/magma.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.makeMAGMAPTB = makeMAGMAPTB;
    var config_1 = require_config();
    function makeMAGMAPTB(txb, poolId, byAmountIn, coinA, coinB, amount, a2b, typeArguments) {
      return __awaiter2(this, void 0, void 0, function* () {
        let coinTypeA = typeArguments[0];
        let coinTypeB = typeArguments[1];
        const sqrtPriceLimit = BigInt(a2b ? "4295048016" : "79226673515401279992447579055");
        const coinABs = txb.moveCall({
          target: `${config_1.AggregatorConfig.magmaPackageId}::router::swap`,
          arguments: [
            txb.object(config_1.AggregatorConfig.magmaConfigId),
            txb.object(poolId),
            coinA,
            coinB,
            txb.pure.bool(a2b),
            txb.pure.bool(byAmountIn),
            amount,
            txb.pure.u128(sqrtPriceLimit),
            txb.pure.bool(false),
            txb.object(config_1.AggregatorConfig.clockAddress)
          ],
          typeArguments: [coinTypeA, coinTypeB]
        });
        return coinABs;
      });
    }
  }
});

// node_modules/navi-sdk/dist/libs/Aggregator/swapPTB.js
var require_swapPTB = __commonJS({
  "node_modules/navi-sdk/dist/libs/Aggregator/swapPTB.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault2 = exports2 && exports2.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getCoins = getCoins;
    exports2.getCoinPTB = getCoinPTB;
    exports2.buildSwapPTBFromQuote = buildSwapPTBFromQuote;
    exports2.swapPTB = swapPTB;
    exports2.checkIfNAVIIntegrated = checkIfNAVIIntegrated;
    var bignumber_js_1 = __importDefault2(require_bignumber());
    var config_1 = require_config();
    var types_1 = require_types3();
    var commonFunctions_1 = require_commonFunctions();
    var cetus_1 = require_cetus();
    var turbos_1 = require_turbos();
    var kriyaV3_1 = require_kriyaV3();
    var aftermath_1 = require_aftermath();
    var KriyaV2_1 = require_KriyaV2();
    var deepbook_1 = require_deepbook();
    var getQuote_1 = require_getQuote();
    var utils_1 = require_utils10();
    var bluefin_1 = require_bluefin();
    var vSui_1 = require_vSui();
    var haSui_1 = require_haSui();
    var magma_1 = require_magma();
    function getCoins(client_1, address_1) {
      return __awaiter2(this, arguments, void 0, function* (client, address, coinType = "0x2::sui::SUI") {
        const coinAddress = coinType.address ? coinType.address : coinType;
        const coinDetails = yield client.getCoins({
          owner: address,
          coinType: coinAddress
        });
        return coinDetails;
      });
    }
    function getCoinPTB(address, coin, amountIn, txb, client) {
      return __awaiter2(this, void 0, void 0, function* () {
        let coinA;
        if (coin === "0x2::sui::SUI") {
          coinA = txb.splitCoins(txb.gas, [txb.pure.u64(amountIn)]);
        } else {
          const coinInfo = yield getCoins(client, address, coin);
          if (!coinInfo.data[0]) {
            throw new Error("Insufficient balance for this coin");
          }
          const mergedCoin = (0, commonFunctions_1.returnMergedCoins)(txb, coinInfo);
          coinA = txb.splitCoins(mergedCoin, [txb.pure.u64(amountIn)]);
        }
        return coinA;
      });
    }
    function buildSwapPTBFromQuote(userAddress_1, txb_1, minAmountOut_1, coinIn_1, quote_1) {
      return __awaiter2(this, arguments, void 0, function* (userAddress, txb, minAmountOut, coinIn, quote, referral = 0, ifPrint = true, apiKey, swapOptions) {
        var _a, _b, _c, _d;
        if (!quote.routes || quote.routes.length === 0) {
          throw new Error("No routes found in data");
        }
        const tokenA = quote.from;
        const tokenB = quote.target;
        const allPaths = JSON.parse(JSON.stringify(quote.routes));
        if (ifPrint) {
          console.log(`tokenA: ${tokenA}, tokenB: ${tokenB}`);
        }
        if (Number(quote.amount_in) !== quote.routes.reduce((sum, route) => sum + Number(route.amount_in), 0)) {
          throw new Error("Outer amount_in does not match the sum of route amount_in values");
        }
        const serviceFee = (swapOptions === null || swapOptions === void 0 ? void 0 : swapOptions.serviceFee) || (swapOptions === null || swapOptions === void 0 ? void 0 : swapOptions.feeOption);
        if (serviceFee && serviceFee.fee > 0 && serviceFee.receiverAddress && serviceFee.receiverAddress !== "0x0") {
          const totalAmount = quote.amount_in;
          const serviceFeeAmount = new bignumber_js_1.default(totalAmount).multipliedBy(serviceFee.fee).toFixed(0);
          const newAmountIn = new bignumber_js_1.default(totalAmount).minus(serviceFeeAmount).toFixed(0);
          const serviceFeeCoinIn = txb.splitCoins(coinIn, [serviceFeeAmount]);
          const [router, serviceFeeRouter] = yield Promise.all([
            (0, getQuote_1.getQuote)(tokenA, tokenB, newAmountIn, apiKey, swapOptions),
            new Promise((resolve, reject) => {
              if (serviceFeeAmount === "0") {
                resolve(null);
                return;
              }
              if (tokenA === "0x549e8b69270defbfafd4f94e17ec44cdbdd99820b33bda2278dea3b9a32d3f55::cert::CERT") {
                resolve({
                  routes: [],
                  amount_in: serviceFeeAmount,
                  amount_out: serviceFeeAmount,
                  from: tokenA,
                  target: tokenA,
                  dexList: []
                });
                return;
              }
              (0, getQuote_1.getQuote)(tokenA, "0x549e8b69270defbfafd4f94e17ec44cdbdd99820b33bda2278dea3b9a32d3f55::cert::CERT", serviceFeeAmount, apiKey, swapOptions).then((router2) => {
                resolve(router2);
              }).catch(reject);
            })
          ]);
          if (!router.amount_out) {
            router.amount_out = "0";
          }
          if (serviceFeeRouter && !serviceFeeRouter.amount_out) {
            serviceFeeRouter.amount_out = "0";
          }
          const [coinOut, feeCoinOut] = yield Promise.all([
            buildSwapPTBFromQuote(userAddress, txb, minAmountOut, coinIn, router, referral),
            !!serviceFeeRouter && serviceFeeCoinIn ? serviceFeeRouter.from === serviceFeeRouter.target ? serviceFeeCoinIn : buildSwapPTBFromQuote(userAddress, txb, 0, serviceFeeCoinIn, serviceFeeRouter, referral) : new Promise((resolve) => {
              resolve(null);
            })
          ]);
          if (feeCoinOut) {
            txb.moveCall({
              package: config_1.AggregatorConfig.aggregatorContract,
              module: "slippage",
              function: "emit_referral_event",
              arguments: [
                coinOut,
                feeCoinOut,
                txb.pure.address(serviceFee.receiverAddress),
                txb.pure.u8(((_a = router.from_token) === null || _a === void 0 ? void 0 : _a.decimals) || 9),
                txb.pure.u8(((_b = router.to_token) === null || _b === void 0 ? void 0 : _b.decimals) || 9),
                txb.pure.u8(9),
                txb.pure.u64(router.amount_in),
                txb.pure.u64(Math.floor((((_c = router.from_token) === null || _c === void 0 ? void 0 : _c.price) || 0) * 1e9)),
                txb.pure.u64(Math.floor((((_d = router.to_token) === null || _d === void 0 ? void 0 : _d.price) || 0) * 1e9)),
                txb.pure.u64((0, bignumber_js_1.default)(serviceFee.fee).multipliedBy(1e4).toFixed(0)),
                txb.pure.u64(referral)
              ],
              typeArguments: [
                router.from,
                router.target,
                "0x549e8b69270defbfafd4f94e17ec44cdbdd99820b33bda2278dea3b9a32d3f55::cert::CERT"
              ]
            });
            txb.transferObjects([feeCoinOut], serviceFee.receiverAddress);
          }
          return coinOut;
        }
        const finalCoinB = txb.moveCall({
          target: "0x2::coin::zero",
          typeArguments: [tokenB]
        });
        for (let i = 0; i < allPaths.length; i++) {
          const path = allPaths[i];
          const pathCoinAmountIn = Math.floor(path.amount_in);
          const pathCoinAmountOut = path.amount_out;
          if (ifPrint) {
            console.log(`Path Index: `, i, `Amount In: `, pathCoinAmountIn, `Expected Amount Out: `, pathCoinAmountOut);
          }
          let pathTempCoin = txb.splitCoins(coinIn, [pathCoinAmountIn]);
          for (let j = 0; j < path.path.length; j++) {
            const route = path.path[j];
            const poolId = route.id;
            const provider = route.provider;
            const tempTokenA = route.from;
            const tempTokenB = route.target;
            const a2b = route.a2b;
            const typeArguments = route.info_for_ptb.typeArguments;
            let amountInPTB;
            let tuborsVersion;
            if (provider === "turbos") {
              tuborsVersion = route.info_for_ptb.contractVersionId;
            }
            if (ifPrint) {
              console.log(`Route Index: `, i, "-", j, `provider: `, provider, `from: `, tempTokenA, `to: `, tempTokenB);
            }
            amountInPTB = txb.moveCall({
              target: "0x2::coin::value",
              arguments: [pathTempCoin],
              typeArguments: [tempTokenA]
            });
            switch (provider) {
              case types_1.Dex.CETUS: {
                let toSwapBalance = txb.moveCall({
                  target: "0x2::coin::into_balance",
                  arguments: [pathTempCoin],
                  typeArguments: [tempTokenA]
                });
                const { receiveCoin, leftCoin } = yield (0, cetus_1.makeCETUSPTB)(txb, poolId, true, toSwapBalance, amountInPTB, a2b, typeArguments);
                txb.transferObjects([leftCoin], userAddress);
                pathTempCoin = receiveCoin;
                break;
              }
              case types_1.Dex.TURBOS: {
                pathTempCoin = txb.makeMoveVec({
                  elements: [pathTempCoin]
                });
                const { turbosCoinB, turbosCoinA } = yield (0, turbos_1.makeTurbosPTB)(txb, poolId, true, pathTempCoin, amountInPTB, a2b, typeArguments, userAddress, tuborsVersion);
                txb.transferObjects([turbosCoinA], userAddress);
                pathTempCoin = turbosCoinB;
                break;
              }
              case types_1.Dex.KRIYA_V2: {
                pathTempCoin = yield (0, KriyaV2_1.makeKriyaV2PTB)(txb, poolId, true, pathTempCoin, amountInPTB, a2b, typeArguments);
                break;
              }
              case types_1.Dex.KRIYA_V3: {
                pathTempCoin = yield (0, kriyaV3_1.makeKriyaV3PTB)(txb, poolId, true, pathTempCoin, amountInPTB, a2b, typeArguments);
                break;
              }
              case types_1.Dex.AFTERMATH: {
                const amountLimit = route.info_for_ptb.amountLimit;
                pathTempCoin = yield (0, aftermath_1.makeAftermathPTB)(txb, poolId, pathTempCoin, amountLimit, a2b, typeArguments);
                break;
              }
              case types_1.Dex.DEEPBOOK: {
                const amountLimit = route.info_for_ptb.amountLimit;
                const { baseCoinOut, quoteCoinOut } = yield (0, deepbook_1.makeDeepbookPTB)(txb, poolId, pathTempCoin, amountLimit, a2b, typeArguments);
                if (a2b) {
                  pathTempCoin = quoteCoinOut;
                  txb.transferObjects([baseCoinOut], userAddress);
                } else {
                  pathTempCoin = baseCoinOut;
                  txb.transferObjects([quoteCoinOut], userAddress);
                }
                break;
              }
              case types_1.Dex.BLUEFIN: {
                const { coinAOut, coinBOut } = yield (0, bluefin_1.makeBluefinPTB)(txb, poolId, pathTempCoin, amountInPTB, a2b, typeArguments);
                if (a2b) {
                  txb.transferObjects([coinAOut], userAddress);
                  pathTempCoin = coinBOut;
                } else {
                  txb.transferObjects([coinBOut], userAddress);
                  pathTempCoin = coinAOut;
                }
                break;
              }
              case types_1.Dex.MAGMA: {
                const coinA = a2b ? pathTempCoin : txb.moveCall({
                  target: "0x2::coin::zero",
                  typeArguments: [tempTokenB]
                });
                const coinB = a2b ? txb.moveCall({
                  target: "0x2::coin::zero",
                  typeArguments: [tempTokenB]
                }) : pathTempCoin;
                const coinABs = yield (0, magma_1.makeMAGMAPTB)(txb, poolId, true, coinA, coinB, amountInPTB, a2b, typeArguments);
                if (a2b) {
                  txb.transferObjects([coinABs[0]], userAddress);
                  pathTempCoin = coinABs[1];
                } else {
                  txb.transferObjects([coinABs[1]], userAddress);
                  pathTempCoin = coinABs[0];
                }
                break;
              }
              case types_1.Dex.VSUI: {
                pathTempCoin = yield (0, vSui_1.makeVSUIPTB)(txb, pathTempCoin, a2b);
                break;
              }
              case types_1.Dex.HASUI: {
                pathTempCoin = yield (0, haSui_1.makeHASUIPTB)(txb, pathTempCoin, a2b);
                break;
              }
              default: {
                break;
              }
            }
          }
          txb.mergeCoins(finalCoinB, [pathTempCoin]);
        }
        txb.transferObjects([coinIn], userAddress);
        txb.moveCall({
          target: `${config_1.AggregatorConfig.aggregatorContract}::slippage::check_slippage_v2`,
          arguments: [
            finalCoinB,
            // output coin object
            txb.pure.u64(Math.floor(minAmountOut)),
            // min amount out
            txb.pure.u64(quote.amount_in),
            // amount in
            txb.pure.u64(referral)
            // refferal id
          ],
          typeArguments: [tokenA, tokenB]
        });
        return finalCoinB;
      });
    }
    function swapPTB(address_1, txb_1, fromCoinAddress_1, toCoinAddress_1, coin_1, amountIn_1, minAmountOut_1, apiKey_1) {
      return __awaiter2(this, arguments, void 0, function* (address, txb, fromCoinAddress, toCoinAddress, coin, amountIn, minAmountOut, apiKey, swapOptions = {
        baseUrl: void 0,
        dexList: [],
        byAmountIn: true,
        depth: 3,
        ifPrint: true
      }) {
        const refId = apiKey ? (0, utils_1.generateRefId)(apiKey) : 0;
        const quote = yield (0, getQuote_1.getQuote)(fromCoinAddress, toCoinAddress, amountIn, apiKey, swapOptions);
        const finalCoinB = yield buildSwapPTBFromQuote(address, txb, minAmountOut, coin, quote, refId, swapOptions.ifPrint, apiKey, swapOptions);
        return finalCoinB;
      });
    }
    function checkIfNAVIIntegrated(digest, client) {
      return __awaiter2(this, void 0, void 0, function* () {
        var _a, _b;
        const results = yield client.getTransactionBlock({
          digest,
          options: { showEvents: true }
        });
        return (_b = (_a = results.events) === null || _a === void 0 ? void 0 : _a.some((event) => event.type.includes(`${config_1.AggregatorConfig.aggregatorContract}::slippage`))) !== null && _b !== void 0 ? _b : false;
      });
    }
  }
});

// node_modules/navi-sdk/dist/libs/Aggregator/index.js
var require_Aggregator = __commonJS({
  "node_modules/navi-sdk/dist/libs/Aggregator/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p)) __createBinding2(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_getQuote(), exports2);
    __exportStar2(require_config(), exports2);
    __exportStar2(require_swapPTB(), exports2);
    __exportStar2(require_utils10(), exports2);
  }
});

// node_modules/navi-sdk/dist/libs/PTB/migrate.js
var require_migrate = __commonJS({
  "node_modules/navi-sdk/dist/libs/PTB/migrate.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getFlashloanFee = getFlashloanFee;
    exports2.migrateSupplyPTB = migrateSupplyPTB;
    exports2.migrateBorrowPTB = migrateBorrowPTB;
    exports2.migratePTB = migratePTB;
    exports2.getMigratableCoins = getMigratableCoins;
    var PoolInfo_1 = require_PoolInfo();
    var address_1 = require_address();
    var PTB_1 = require_PTB();
    function getFlashloanFee(coin) {
      return __awaiter2(this, void 0, void 0, function* () {
        const flashloanFeeUrl = "https://open-api.naviprotocol.io/api/navi/flashloan";
        try {
          const response = yield fetch(flashloanFeeUrl);
          const feeData = yield response.json();
          const suiKey = "0x0000000000000000000000000000000000000000000000000000000000000002::sui::SUI";
          if (coin.address === address_1.Sui.address) {
            if (!feeData.data[suiKey]) {
              throw new TypeError("Unable to retrieve flashloan fee for SUI.");
            }
            return Number(feeData.data[suiKey].flashloanFee);
          } else {
            if (!feeData.data[coin.address]) {
              throw new TypeError(`Unsupported coin: ${coin.symbol}`);
            }
            return feeData.data[coin.address].flashloanFee || 0;
          }
        } catch (error) {
          console.error(`Error fetching flashloan fee: ${error.message}`);
          throw error;
        }
      });
    }
    function fromMinUnit(amount, decimal) {
      return amount / Math.pow(10, decimal);
    }
    function calculateBorrowAmount(formCoinAmountInMin, formCoinPrice, toCoinPrice, feeRate, slippage, formDecimal, toDecimal) {
      if ([formCoinAmountInMin, formCoinPrice, toCoinPrice, feeRate, slippage, formDecimal, toDecimal].some((param) => typeof param !== "number" || isNaN(param))) {
        throw new Error("All input parameters must be valid numbers.");
      }
      if (formCoinAmountInMin <= 0) {
        throw new Error("The amount of formCoin must be greater than 0.");
      }
      if (formCoinPrice <= 0 || toCoinPrice <= 0) {
        throw new Error("Coin prices must be greater than 0.");
      }
      if (feeRate < 0 || slippage < 0) {
        throw new Error("Fee rate and slippage cannot be negative.");
      }
      if (!Number.isInteger(formDecimal) || !Number.isInteger(toDecimal) || formDecimal < 0 || toDecimal < 0) {
        throw new Error("Decimals must be non-negative integers.");
      }
      const R = formCoinPrice * Math.pow(10, toDecimal) / (toCoinPrice * Math.pow(10, formDecimal));
      const borrowAmount = formCoinAmountInMin * R * (1 - slippage) / (1 + feeRate);
      if (borrowAmount <= 0) {
        throw new Error("The calculated borrow amount must be positive.");
      }
      const finalBorrowAmount = Math.floor(borrowAmount);
      const shouldSwapAmount = Math.floor(formCoinAmountInMin * R);
      const expectAmount = Math.floor(shouldSwapAmount * (1 + feeRate));
      return [finalBorrowAmount, shouldSwapAmount, expectAmount];
    }
    function calcRealPriceFromSui(originalPrice, targetCoin, migrateOptions) {
      return __awaiter2(this, void 0, void 0, function* () {
        let quoteResult;
        try {
          quoteResult = yield (0, PTB_1.getQuote)(address_1.Sui.address, targetCoin.address, 1e9, migrateOptions === null || migrateOptions === void 0 ? void 0 : migrateOptions.apiKey, { baseUrl: migrateOptions === null || migrateOptions === void 0 ? void 0 : migrateOptions.baseUrl });
          console.log("Quote obtained:", quoteResult);
        } catch (error) {
          console.error(`Failed to get quote: ${error.message}`);
          throw error;
        }
        const amountOutNum = Number(quoteResult === null || quoteResult === void 0 ? void 0 : quoteResult.amount_out);
        return 1e9 / amountOutNum * originalPrice;
      });
    }
    function migrateSupplyPTB(txb, fromCoin, toCoin, amount, address, migrateOptions) {
      return __awaiter2(this, void 0, void 0, function* () {
        var _a;
        if (fromCoin.address === toCoin.address) {
          throw new Error("fromCoin and toCoin cannot be the same.");
        }
        if (amount <= 0) {
          throw new Error("Amount must be greater than 0.");
        }
        const allPools = yield (0, PoolInfo_1.getPoolInfo)();
        const fromPoolConfig = address_1.pool[fromCoin.symbol];
        const toPoolConfig = address_1.pool[toCoin.symbol];
        const fromPoolInfo = allPools[String(fromPoolConfig.assetId)];
        const toPoolInfo = allPools[String(toPoolConfig.assetId)];
        let fromCoinPrice = fromPoolInfo.tokenPrice;
        let toCoinPrice = toPoolInfo.tokenPrice;
        if (fromCoin.symbol === "vSui" || fromCoin.symbol === "haSui") {
          fromCoinPrice = yield calcRealPriceFromSui(fromCoinPrice, fromCoin, migrateOptions);
        }
        if (toCoin.symbol === "vSui" || toCoin.symbol === "haSui") {
          toCoinPrice = yield calcRealPriceFromSui(toCoinPrice, toCoin, migrateOptions);
        }
        const toCoinFlashloanFee = yield getFlashloanFee(toCoin);
        const formCoinAmountInMin = amount;
        const slippage = (_a = migrateOptions === null || migrateOptions === void 0 ? void 0 : migrateOptions.slippage) !== null && _a !== void 0 ? _a : 5e-3;
        const [borrowAmountInMin, shouldSwapAmount, _noUse] = calculateBorrowAmount(formCoinAmountInMin, Number(fromCoinPrice), Number(toCoinPrice), toCoinFlashloanFee, slippage, fromCoin.decimal, toCoin.decimal);
        console.log(`Borrow Amount Calculation:
        User Input Amount: ${amount} ${fromCoin.symbol}
        From Coin: ${fromCoin.symbol} (Price: ${fromCoinPrice})
        To Coin: ${toCoin.symbol} (Price: ${toCoinPrice})
        Fee Rate: ${toCoinFlashloanFee * 100}%
        Slippage: ${slippage * 100}%
        Borrow Amount in Min Units: ${borrowAmountInMin}
        should Amount in Min Units: ${shouldSwapAmount}
        Borrow Amount in normal: ${fromMinUnit(borrowAmountInMin, toCoin.decimal)}
        should Amount in normal: ${fromMinUnit(shouldSwapAmount, toCoin.decimal)}
        `);
        const [flashloanBalance, receipt] = yield (0, PTB_1.flashloan)(txb, toPoolConfig, borrowAmountInMin);
        const [flashCoin] = txb.moveCall({
          target: "0x2::coin::from_balance",
          arguments: [flashloanBalance],
          typeArguments: [toCoin.address]
        });
        yield (0, PTB_1.depositCoin)(txb, toPoolConfig, flashCoin, borrowAmountInMin);
        const [withdrawnFromCoin] = yield (0, PTB_1.withdrawCoin)(txb, fromPoolConfig, formCoinAmountInMin);
        let quote;
        try {
          quote = yield (0, PTB_1.getQuote)(fromCoin.address, toCoin.address, formCoinAmountInMin, migrateOptions === null || migrateOptions === void 0 ? void 0 : migrateOptions.apiKey, { baseUrl: migrateOptions === null || migrateOptions === void 0 ? void 0 : migrateOptions.baseUrl });
          console.log("Quote obtained:", quote);
        } catch (error) {
          console.error(`Error in getQuote: ${error.message}`);
          throw error;
        }
        const minAmountOut = Math.floor(shouldSwapAmount * (1 - slippage));
        const swappedToCoin = yield (0, PTB_1.buildSwapPTBFromQuote)(address, txb, minAmountOut, withdrawnFromCoin, quote);
        const repayBalance = txb.moveCall({
          target: "0x2::coin::into_balance",
          arguments: [swappedToCoin],
          typeArguments: [toCoin.address]
        });
        const [leftBalance] = yield (0, PTB_1.repayFlashLoan)(txb, toPoolConfig, receipt, repayBalance);
        const [extraCoin] = txb.moveCall({
          target: "0x2::coin::from_balance",
          arguments: [leftBalance],
          typeArguments: [toCoin.address]
        });
        txb.transferObjects([extraCoin], address);
        return txb;
      });
    }
    function migrateBorrowPTB(txb, fromCoin, toCoin, amount, address, migrateOptions) {
      return __awaiter2(this, void 0, void 0, function* () {
        var _a;
        if (fromCoin.address === toCoin.address) {
          throw new Error("fromCoin and toCoin cannot be the same.");
        }
        if (amount <= 0) {
          throw new Error("Amount must be greater than 0.");
        }
        const allPools = yield (0, PoolInfo_1.getPoolInfo)();
        const fromPoolConfig = address_1.pool[fromCoin.symbol];
        const toPoolConfig = address_1.pool[toCoin.symbol];
        const fromPoolInfo = allPools[String(fromPoolConfig.assetId)];
        const toPoolInfo = allPools[String(toPoolConfig.assetId)];
        let fromCoinPrice = fromPoolInfo.tokenPrice;
        let toCoinPrice = toPoolInfo.tokenPrice;
        if (fromCoin.symbol === "vSui" || fromCoin.symbol === "haSui") {
          fromCoinPrice = yield calcRealPriceFromSui(fromCoinPrice, fromCoin, migrateOptions);
        }
        if (toCoin.symbol === "vSui" || toCoin.symbol === "haSui") {
          toCoinPrice = yield calcRealPriceFromSui(toCoinPrice, toCoin, migrateOptions);
        }
        const toCoinFlashloanFee = yield getFlashloanFee(toCoin);
        const fromCoinAmountInMin = amount;
        const slippage = (_a = migrateOptions === null || migrateOptions === void 0 ? void 0 : migrateOptions.slippage) !== null && _a !== void 0 ? _a : 5e-3;
        const [borrowAmountInMin, shouldSwapAmount, loanAmount] = calculateBorrowAmount(fromCoinAmountInMin, Number(fromCoinPrice), Number(toCoinPrice), toCoinFlashloanFee, slippage, fromCoin.decimal, toCoin.decimal);
        console.log(`Borrow Amount Calculation:
        User Input Amount: ${amount} ${fromCoin.symbol}
        From Coin: ${fromCoin.symbol} (Price: ${fromCoinPrice})
        To Coin: ${toCoin.symbol} (Price: ${toCoinPrice})
        Fee Rate: ${toCoinFlashloanFee * 100}%
        Slippage: ${slippage * 100}%
        Borrow Amount in Min Units: ${borrowAmountInMin}
        should Amount in Min Units: ${shouldSwapAmount}
        Borrow Amount in normal: ${fromMinUnit(borrowAmountInMin, toCoin.decimal)}
        should Amount in normal: ${fromMinUnit(shouldSwapAmount, toCoin.decimal)}
        loanAmount Amount in Units: ${loanAmount}
        loanAmount Amount in normal: ${fromMinUnit(loanAmount, toCoin.decimal)}
        `);
        const [flashloanBalance, receipt] = yield (0, PTB_1.flashloan)(txb, toPoolConfig, shouldSwapAmount);
        const [flashCoin] = txb.moveCall({
          target: "0x2::coin::from_balance",
          arguments: [flashloanBalance],
          typeArguments: [toCoin.address]
        });
        let quote;
        try {
          quote = yield (0, PTB_1.getQuote)(toCoin.address, fromCoin.address, shouldSwapAmount, migrateOptions === null || migrateOptions === void 0 ? void 0 : migrateOptions.apiKey, { baseUrl: migrateOptions === null || migrateOptions === void 0 ? void 0 : migrateOptions.baseUrl });
          console.log("Quote obtained:", quote);
        } catch (error) {
          console.error(`Failed to get quote: ${error.message}`);
          throw error;
        }
        const minAmountOut = Math.floor(Number(quote.amount_out) * (1 - slippage));
        const swappedFromCoin = yield (0, PTB_1.buildSwapPTBFromQuote)(address, txb, minAmountOut, flashCoin, quote);
        const swapCoinValue = txb.moveCall({
          target: "0x2::coin::value",
          arguments: [swappedFromCoin],
          typeArguments: [fromCoin.address]
        });
        yield (0, PTB_1.repayDebt)(txb, fromPoolConfig, swappedFromCoin, swapCoinValue);
        const [borrowedToCoin] = yield (0, PTB_1.borrowCoin)(txb, toPoolConfig, loanAmount);
        const repayBalance = txb.moveCall({
          target: "0x2::coin::into_balance",
          arguments: [borrowedToCoin],
          typeArguments: [toCoin.address]
        });
        const [leftBalance] = yield (0, PTB_1.repayFlashLoan)(txb, toPoolConfig, receipt, repayBalance);
        const [extraCoin] = txb.moveCall({
          target: "0x2::coin::from_balance",
          arguments: [leftBalance],
          typeArguments: [toCoin.address]
        });
        txb.transferObjects([extraCoin], address);
        return txb;
      });
    }
    function migratePTB(txb, supplyFromCoin, supplyToCoin, borrowFromCoin, borrowToCoin, supplyAmount, borrowAmount, address, migrateOptions) {
      return __awaiter2(this, void 0, void 0, function* () {
        try {
          yield migrateSupplyPTB(txb, supplyFromCoin, supplyToCoin, supplyAmount, address, migrateOptions);
          console.log("Supply migration completed successfully.");
        } catch (error) {
          console.error(`Error in migrateSupplyPTB: ${error.message}`);
        }
        try {
          yield migrateBorrowPTB(txb, borrowFromCoin, borrowToCoin, borrowAmount, address, migrateOptions);
          console.log("Borrow migration completed successfully.");
        } catch (error) {
          console.error(`Error in migrateBorrowPTB: ${error.message}`);
        }
        return txb;
      });
    }
    function getMigratableCoins() {
      return [address_1.Sui, address_1.wUSDC, address_1.nUSDC, address_1.vSui, address_1.USDT];
    }
  }
});

// node_modules/navi-sdk/dist/libs/PTB/index.js
var require_PTB = __commonJS({
  "node_modules/navi-sdk/dist/libs/PTB/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p)) __createBinding2(exports3, m, p);
    };
    var __importStar2 = exports2 && exports2.__importStar || /* @__PURE__ */ function() {
      var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys(o);
      };
      return function(mod2) {
        if (mod2 && mod2.__esModule) return mod2;
        var result = {};
        if (mod2 != null) {
          for (var k = ownKeys(mod2), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding2(result, mod2, k[i]);
        }
        __setModuleDefault2(result, mod2);
        return result;
      };
    }();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getPoolsApy = exports2.getCurrentRules = exports2.getBorrowFee = exports2.getPoolApy = exports2.migrateModule = exports2.claimRewardsByAssetIdPTB = exports2.claimAllRewardsResupplyPTB = exports2.updateOraclePTB = exports2.registerStructs = exports2.claimAllRewardsPTB = exports2.getAvailableRewards = exports2.liquidateFunction = exports2.SignAndSubmitTXB = exports2.repayFlashLoan = exports2.flashloan = exports2.returnMergedCoins = exports2.repayDebt = exports2.borrowCoin = exports2.getHealthFactorPTB = exports2.withdrawCoinWithAccountCap = exports2.withdrawCoin = exports2.unstakeTovSui = exports2.stakeTovSuiPTB = exports2.depositCoinWithAccountCap = exports2.depositCoin = void 0;
    var commonFunctions_1 = require_commonFunctions();
    Object.defineProperty(exports2, "depositCoin", { enumerable: true, get: function() {
      return commonFunctions_1.depositCoin;
    } });
    Object.defineProperty(exports2, "depositCoinWithAccountCap", { enumerable: true, get: function() {
      return commonFunctions_1.depositCoinWithAccountCap;
    } });
    Object.defineProperty(exports2, "stakeTovSuiPTB", { enumerable: true, get: function() {
      return commonFunctions_1.stakeTovSuiPTB;
    } });
    Object.defineProperty(exports2, "unstakeTovSui", { enumerable: true, get: function() {
      return commonFunctions_1.unstakeTovSui;
    } });
    Object.defineProperty(exports2, "withdrawCoin", { enumerable: true, get: function() {
      return commonFunctions_1.withdrawCoin;
    } });
    Object.defineProperty(exports2, "withdrawCoinWithAccountCap", { enumerable: true, get: function() {
      return commonFunctions_1.withdrawCoinWithAccountCap;
    } });
    Object.defineProperty(exports2, "getHealthFactorPTB", { enumerable: true, get: function() {
      return commonFunctions_1.getHealthFactorPTB;
    } });
    Object.defineProperty(exports2, "borrowCoin", { enumerable: true, get: function() {
      return commonFunctions_1.borrowCoin;
    } });
    Object.defineProperty(exports2, "repayDebt", { enumerable: true, get: function() {
      return commonFunctions_1.repayDebt;
    } });
    Object.defineProperty(exports2, "returnMergedCoins", { enumerable: true, get: function() {
      return commonFunctions_1.returnMergedCoins;
    } });
    Object.defineProperty(exports2, "flashloan", { enumerable: true, get: function() {
      return commonFunctions_1.flashloan;
    } });
    Object.defineProperty(exports2, "repayFlashLoan", { enumerable: true, get: function() {
      return commonFunctions_1.repayFlashLoan;
    } });
    Object.defineProperty(exports2, "SignAndSubmitTXB", { enumerable: true, get: function() {
      return commonFunctions_1.SignAndSubmitTXB;
    } });
    Object.defineProperty(exports2, "liquidateFunction", { enumerable: true, get: function() {
      return commonFunctions_1.liquidateFunction;
    } });
    Object.defineProperty(exports2, "getAvailableRewards", { enumerable: true, get: function() {
      return commonFunctions_1.getAvailableRewards;
    } });
    Object.defineProperty(exports2, "claimAllRewardsPTB", { enumerable: true, get: function() {
      return commonFunctions_1.claimAllRewardsPTB;
    } });
    Object.defineProperty(exports2, "registerStructs", { enumerable: true, get: function() {
      return commonFunctions_1.registerStructs;
    } });
    Object.defineProperty(exports2, "updateOraclePTB", { enumerable: true, get: function() {
      return commonFunctions_1.updateOraclePTB;
    } });
    Object.defineProperty(exports2, "claimAllRewardsResupplyPTB", { enumerable: true, get: function() {
      return commonFunctions_1.claimAllRewardsResupplyPTB;
    } });
    Object.defineProperty(exports2, "claimRewardsByAssetIdPTB", { enumerable: true, get: function() {
      return commonFunctions_1.claimRewardsByAssetIdPTB;
    } });
    __exportStar2(require_Aggregator(), exports2);
    exports2.migrateModule = __importStar2(require_migrate());
    var V3_1 = require_V3();
    Object.defineProperty(exports2, "getPoolApy", { enumerable: true, get: function() {
      return V3_1.getPoolApy;
    } });
    Object.defineProperty(exports2, "getBorrowFee", { enumerable: true, get: function() {
      return V3_1.getBorrowFee;
    } });
    Object.defineProperty(exports2, "getCurrentRules", { enumerable: true, get: function() {
      return V3_1.getCurrentRules;
    } });
    Object.defineProperty(exports2, "getPoolsApy", { enumerable: true, get: function() {
      return V3_1.getPoolsApy;
    } });
  }
});

// ../node_modules/has-symbols/shams.js
var require_shams = __commonJS({
  "../node_modules/has-symbols/shams.js"(exports2, module2) {
    "use strict";
    module2.exports = function hasSymbols() {
      if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
        return false;
      }
      if (typeof Symbol.iterator === "symbol") {
        return true;
      }
      var obj = {};
      var sym = Symbol("test");
      var symObj = Object(sym);
      if (typeof sym === "string") {
        return false;
      }
      if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
        return false;
      }
      if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
        return false;
      }
      var symVal = 42;
      obj[sym] = symVal;
      for (var _ in obj) {
        return false;
      }
      if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
        return false;
      }
      if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
        return false;
      }
      var syms = Object.getOwnPropertySymbols(obj);
      if (syms.length !== 1 || syms[0] !== sym) {
        return false;
      }
      if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
        return false;
      }
      if (typeof Object.getOwnPropertyDescriptor === "function") {
        var descriptor = (
          /** @type {PropertyDescriptor} */
          Object.getOwnPropertyDescriptor(obj, sym)
        );
        if (descriptor.value !== symVal || descriptor.enumerable !== true) {
          return false;
        }
      }
      return true;
    };
  }
});

// ../node_modules/has-tostringtag/shams.js
var require_shams2 = __commonJS({
  "../node_modules/has-tostringtag/shams.js"(exports2, module2) {
    "use strict";
    var hasSymbols = require_shams();
    module2.exports = function hasToStringTagShams() {
      return hasSymbols() && !!Symbol.toStringTag;
    };
  }
});

// ../node_modules/es-object-atoms/index.js
var require_es_object_atoms = __commonJS({
  "../node_modules/es-object-atoms/index.js"(exports2, module2) {
    "use strict";
    module2.exports = Object;
  }
});

// ../node_modules/es-errors/index.js
var require_es_errors = __commonJS({
  "../node_modules/es-errors/index.js"(exports2, module2) {
    "use strict";
    module2.exports = Error;
  }
});

// ../node_modules/es-errors/eval.js
var require_eval = __commonJS({
  "../node_modules/es-errors/eval.js"(exports2, module2) {
    "use strict";
    module2.exports = EvalError;
  }
});

// ../node_modules/es-errors/range.js
var require_range = __commonJS({
  "../node_modules/es-errors/range.js"(exports2, module2) {
    "use strict";
    module2.exports = RangeError;
  }
});

// ../node_modules/es-errors/ref.js
var require_ref = __commonJS({
  "../node_modules/es-errors/ref.js"(exports2, module2) {
    "use strict";
    module2.exports = ReferenceError;
  }
});

// ../node_modules/es-errors/syntax.js
var require_syntax = __commonJS({
  "../node_modules/es-errors/syntax.js"(exports2, module2) {
    "use strict";
    module2.exports = SyntaxError;
  }
});

// ../node_modules/es-errors/type.js
var require_type = __commonJS({
  "../node_modules/es-errors/type.js"(exports2, module2) {
    "use strict";
    module2.exports = TypeError;
  }
});

// ../node_modules/es-errors/uri.js
var require_uri = __commonJS({
  "../node_modules/es-errors/uri.js"(exports2, module2) {
    "use strict";
    module2.exports = URIError;
  }
});

// ../node_modules/math-intrinsics/abs.js
var require_abs = __commonJS({
  "../node_modules/math-intrinsics/abs.js"(exports2, module2) {
    "use strict";
    module2.exports = Math.abs;
  }
});

// ../node_modules/math-intrinsics/floor.js
var require_floor = __commonJS({
  "../node_modules/math-intrinsics/floor.js"(exports2, module2) {
    "use strict";
    module2.exports = Math.floor;
  }
});

// ../node_modules/math-intrinsics/max.js
var require_max = __commonJS({
  "../node_modules/math-intrinsics/max.js"(exports2, module2) {
    "use strict";
    module2.exports = Math.max;
  }
});

// ../node_modules/math-intrinsics/min.js
var require_min = __commonJS({
  "../node_modules/math-intrinsics/min.js"(exports2, module2) {
    "use strict";
    module2.exports = Math.min;
  }
});

// ../node_modules/math-intrinsics/pow.js
var require_pow = __commonJS({
  "../node_modules/math-intrinsics/pow.js"(exports2, module2) {
    "use strict";
    module2.exports = Math.pow;
  }
});

// ../node_modules/math-intrinsics/round.js
var require_round = __commonJS({
  "../node_modules/math-intrinsics/round.js"(exports2, module2) {
    "use strict";
    module2.exports = Math.round;
  }
});

// ../node_modules/math-intrinsics/isNaN.js
var require_isNaN = __commonJS({
  "../node_modules/math-intrinsics/isNaN.js"(exports2, module2) {
    "use strict";
    module2.exports = Number.isNaN || function isNaN2(a) {
      return a !== a;
    };
  }
});

// ../node_modules/math-intrinsics/sign.js
var require_sign = __commonJS({
  "../node_modules/math-intrinsics/sign.js"(exports2, module2) {
    "use strict";
    var $isNaN = require_isNaN();
    module2.exports = function sign2(number2) {
      if ($isNaN(number2) || number2 === 0) {
        return number2;
      }
      return number2 < 0 ? -1 : 1;
    };
  }
});

// ../node_modules/gopd/gOPD.js
var require_gOPD = __commonJS({
  "../node_modules/gopd/gOPD.js"(exports2, module2) {
    "use strict";
    module2.exports = Object.getOwnPropertyDescriptor;
  }
});

// ../node_modules/gopd/index.js
var require_gopd = __commonJS({
  "../node_modules/gopd/index.js"(exports2, module2) {
    "use strict";
    var $gOPD = require_gOPD();
    if ($gOPD) {
      try {
        $gOPD([], "length");
      } catch (e) {
        $gOPD = null;
      }
    }
    module2.exports = $gOPD;
  }
});

// ../node_modules/es-define-property/index.js
var require_es_define_property = __commonJS({
  "../node_modules/es-define-property/index.js"(exports2, module2) {
    "use strict";
    var $defineProperty = Object.defineProperty || false;
    if ($defineProperty) {
      try {
        $defineProperty({}, "a", { value: 1 });
      } catch (e) {
        $defineProperty = false;
      }
    }
    module2.exports = $defineProperty;
  }
});

// ../node_modules/has-symbols/index.js
var require_has_symbols = __commonJS({
  "../node_modules/has-symbols/index.js"(exports2, module2) {
    "use strict";
    var origSymbol = typeof Symbol !== "undefined" && Symbol;
    var hasSymbolSham = require_shams();
    module2.exports = function hasNativeSymbols() {
      if (typeof origSymbol !== "function") {
        return false;
      }
      if (typeof Symbol !== "function") {
        return false;
      }
      if (typeof origSymbol("foo") !== "symbol") {
        return false;
      }
      if (typeof Symbol("bar") !== "symbol") {
        return false;
      }
      return hasSymbolSham();
    };
  }
});

// ../node_modules/get-proto/Reflect.getPrototypeOf.js
var require_Reflect_getPrototypeOf = __commonJS({
  "../node_modules/get-proto/Reflect.getPrototypeOf.js"(exports2, module2) {
    "use strict";
    module2.exports = typeof Reflect !== "undefined" && Reflect.getPrototypeOf || null;
  }
});

// ../node_modules/get-proto/Object.getPrototypeOf.js
var require_Object_getPrototypeOf = __commonJS({
  "../node_modules/get-proto/Object.getPrototypeOf.js"(exports2, module2) {
    "use strict";
    var $Object = require_es_object_atoms();
    module2.exports = $Object.getPrototypeOf || null;
  }
});

// ../node_modules/function-bind/implementation.js
var require_implementation = __commonJS({
  "../node_modules/function-bind/implementation.js"(exports2, module2) {
    "use strict";
    var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
    var toStr = Object.prototype.toString;
    var max = Math.max;
    var funcType = "[object Function]";
    var concatty = function concatty2(a, b) {
      var arr = [];
      for (var i = 0; i < a.length; i += 1) {
        arr[i] = a[i];
      }
      for (var j = 0; j < b.length; j += 1) {
        arr[j + a.length] = b[j];
      }
      return arr;
    };
    var slicy = function slicy2(arrLike, offset2) {
      var arr = [];
      for (var i = offset2 || 0, j = 0; i < arrLike.length; i += 1, j += 1) {
        arr[j] = arrLike[i];
      }
      return arr;
    };
    var joiny = function(arr, joiner) {
      var str = "";
      for (var i = 0; i < arr.length; i += 1) {
        str += arr[i];
        if (i + 1 < arr.length) {
          str += joiner;
        }
      }
      return str;
    };
    module2.exports = function bind(that) {
      var target = this;
      if (typeof target !== "function" || toStr.apply(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
      }
      var args = slicy(arguments, 1);
      var bound;
      var binder = function() {
        if (this instanceof bound) {
          var result = target.apply(
            this,
            concatty(args, arguments)
          );
          if (Object(result) === result) {
            return result;
          }
          return this;
        }
        return target.apply(
          that,
          concatty(args, arguments)
        );
      };
      var boundLength = max(0, target.length - args.length);
      var boundArgs = [];
      for (var i = 0; i < boundLength; i++) {
        boundArgs[i] = "$" + i;
      }
      bound = Function("binder", "return function (" + joiny(boundArgs, ",") + "){ return binder.apply(this,arguments); }")(binder);
      if (target.prototype) {
        var Empty = function Empty2() {
        };
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
      }
      return bound;
    };
  }
});

// ../node_modules/function-bind/index.js
var require_function_bind = __commonJS({
  "../node_modules/function-bind/index.js"(exports2, module2) {
    "use strict";
    var implementation = require_implementation();
    module2.exports = Function.prototype.bind || implementation;
  }
});

// ../node_modules/call-bind-apply-helpers/functionCall.js
var require_functionCall = __commonJS({
  "../node_modules/call-bind-apply-helpers/functionCall.js"(exports2, module2) {
    "use strict";
    module2.exports = Function.prototype.call;
  }
});

// ../node_modules/call-bind-apply-helpers/functionApply.js
var require_functionApply = __commonJS({
  "../node_modules/call-bind-apply-helpers/functionApply.js"(exports2, module2) {
    "use strict";
    module2.exports = Function.prototype.apply;
  }
});

// ../node_modules/call-bind-apply-helpers/reflectApply.js
var require_reflectApply = __commonJS({
  "../node_modules/call-bind-apply-helpers/reflectApply.js"(exports2, module2) {
    "use strict";
    module2.exports = typeof Reflect !== "undefined" && Reflect && Reflect.apply;
  }
});

// ../node_modules/call-bind-apply-helpers/actualApply.js
var require_actualApply = __commonJS({
  "../node_modules/call-bind-apply-helpers/actualApply.js"(exports2, module2) {
    "use strict";
    var bind = require_function_bind();
    var $apply = require_functionApply();
    var $call = require_functionCall();
    var $reflectApply = require_reflectApply();
    module2.exports = $reflectApply || bind.call($call, $apply);
  }
});

// ../node_modules/call-bind-apply-helpers/index.js
var require_call_bind_apply_helpers = __commonJS({
  "../node_modules/call-bind-apply-helpers/index.js"(exports2, module2) {
    "use strict";
    var bind = require_function_bind();
    var $TypeError = require_type();
    var $call = require_functionCall();
    var $actualApply = require_actualApply();
    module2.exports = function callBindBasic(args) {
      if (args.length < 1 || typeof args[0] !== "function") {
        throw new $TypeError("a function is required");
      }
      return $actualApply(bind, $call, args);
    };
  }
});

// ../node_modules/dunder-proto/get.js
var require_get = __commonJS({
  "../node_modules/dunder-proto/get.js"(exports2, module2) {
    "use strict";
    var callBind = require_call_bind_apply_helpers();
    var gOPD = require_gopd();
    var hasProtoAccessor;
    try {
      hasProtoAccessor = /** @type {{ __proto__?: typeof Array.prototype }} */
      [].__proto__ === Array.prototype;
    } catch (e) {
      if (!e || typeof e !== "object" || !("code" in e) || e.code !== "ERR_PROTO_ACCESS") {
        throw e;
      }
    }
    var desc = !!hasProtoAccessor && gOPD && gOPD(
      Object.prototype,
      /** @type {keyof typeof Object.prototype} */
      "__proto__"
    );
    var $Object = Object;
    var $getPrototypeOf = $Object.getPrototypeOf;
    module2.exports = desc && typeof desc.get === "function" ? callBind([desc.get]) : typeof $getPrototypeOf === "function" ? (
      /** @type {import('./get')} */
      function getDunder(value) {
        return $getPrototypeOf(value == null ? value : $Object(value));
      }
    ) : false;
  }
});

// ../node_modules/get-proto/index.js
var require_get_proto = __commonJS({
  "../node_modules/get-proto/index.js"(exports2, module2) {
    "use strict";
    var reflectGetProto = require_Reflect_getPrototypeOf();
    var originalGetProto = require_Object_getPrototypeOf();
    var getDunderProto = require_get();
    module2.exports = reflectGetProto ? function getProto(O) {
      return reflectGetProto(O);
    } : originalGetProto ? function getProto(O) {
      if (!O || typeof O !== "object" && typeof O !== "function") {
        throw new TypeError("getProto: not an object");
      }
      return originalGetProto(O);
    } : getDunderProto ? function getProto(O) {
      return getDunderProto(O);
    } : null;
  }
});

// ../node_modules/hasown/index.js
var require_hasown = __commonJS({
  "../node_modules/hasown/index.js"(exports2, module2) {
    "use strict";
    var call = Function.prototype.call;
    var $hasOwn = Object.prototype.hasOwnProperty;
    var bind = require_function_bind();
    module2.exports = bind.call(call, $hasOwn);
  }
});

// ../node_modules/get-intrinsic/index.js
var require_get_intrinsic = __commonJS({
  "../node_modules/get-intrinsic/index.js"(exports2, module2) {
    "use strict";
    var undefined2;
    var $Object = require_es_object_atoms();
    var $Error = require_es_errors();
    var $EvalError = require_eval();
    var $RangeError = require_range();
    var $ReferenceError = require_ref();
    var $SyntaxError = require_syntax();
    var $TypeError = require_type();
    var $URIError = require_uri();
    var abs = require_abs();
    var floor = require_floor();
    var max = require_max();
    var min = require_min();
    var pow = require_pow();
    var round = require_round();
    var sign2 = require_sign();
    var $Function = Function;
    var getEvalledConstructor = function(expressionSyntax) {
      try {
        return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
      } catch (e) {
      }
    };
    var $gOPD = require_gopd();
    var $defineProperty = require_es_define_property();
    var throwTypeError = function() {
      throw new $TypeError();
    };
    var ThrowTypeError = $gOPD ? function() {
      try {
        arguments.callee;
        return throwTypeError;
      } catch (calleeThrows) {
        try {
          return $gOPD(arguments, "callee").get;
        } catch (gOPDthrows) {
          return throwTypeError;
        }
      }
    }() : throwTypeError;
    var hasSymbols = require_has_symbols()();
    var getProto = require_get_proto();
    var $ObjectGPO = require_Object_getPrototypeOf();
    var $ReflectGPO = require_Reflect_getPrototypeOf();
    var $apply = require_functionApply();
    var $call = require_functionCall();
    var needsEval = {};
    var TypedArray = typeof Uint8Array === "undefined" || !getProto ? undefined2 : getProto(Uint8Array);
    var INTRINSICS = {
      __proto__: null,
      "%AggregateError%": typeof AggregateError === "undefined" ? undefined2 : AggregateError,
      "%Array%": Array,
      "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined2 : ArrayBuffer,
      "%ArrayIteratorPrototype%": hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined2,
      "%AsyncFromSyncIteratorPrototype%": undefined2,
      "%AsyncFunction%": needsEval,
      "%AsyncGenerator%": needsEval,
      "%AsyncGeneratorFunction%": needsEval,
      "%AsyncIteratorPrototype%": needsEval,
      "%Atomics%": typeof Atomics === "undefined" ? undefined2 : Atomics,
      "%BigInt%": typeof BigInt === "undefined" ? undefined2 : BigInt,
      "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined2 : BigInt64Array,
      "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined2 : BigUint64Array,
      "%Boolean%": Boolean,
      "%DataView%": typeof DataView === "undefined" ? undefined2 : DataView,
      "%Date%": Date,
      "%decodeURI%": decodeURI,
      "%decodeURIComponent%": decodeURIComponent,
      "%encodeURI%": encodeURI,
      "%encodeURIComponent%": encodeURIComponent,
      "%Error%": $Error,
      "%eval%": eval,
      // eslint-disable-line no-eval
      "%EvalError%": $EvalError,
      "%Float16Array%": typeof Float16Array === "undefined" ? undefined2 : Float16Array,
      "%Float32Array%": typeof Float32Array === "undefined" ? undefined2 : Float32Array,
      "%Float64Array%": typeof Float64Array === "undefined" ? undefined2 : Float64Array,
      "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined2 : FinalizationRegistry,
      "%Function%": $Function,
      "%GeneratorFunction%": needsEval,
      "%Int8Array%": typeof Int8Array === "undefined" ? undefined2 : Int8Array,
      "%Int16Array%": typeof Int16Array === "undefined" ? undefined2 : Int16Array,
      "%Int32Array%": typeof Int32Array === "undefined" ? undefined2 : Int32Array,
      "%isFinite%": isFinite,
      "%isNaN%": isNaN,
      "%IteratorPrototype%": hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined2,
      "%JSON%": typeof JSON === "object" ? JSON : undefined2,
      "%Map%": typeof Map === "undefined" ? undefined2 : Map,
      "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),
      "%Math%": Math,
      "%Number%": Number,
      "%Object%": $Object,
      "%Object.getOwnPropertyDescriptor%": $gOPD,
      "%parseFloat%": parseFloat,
      "%parseInt%": parseInt,
      "%Promise%": typeof Promise === "undefined" ? undefined2 : Promise,
      "%Proxy%": typeof Proxy === "undefined" ? undefined2 : Proxy,
      "%RangeError%": $RangeError,
      "%ReferenceError%": $ReferenceError,
      "%Reflect%": typeof Reflect === "undefined" ? undefined2 : Reflect,
      "%RegExp%": RegExp,
      "%Set%": typeof Set === "undefined" ? undefined2 : Set,
      "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),
      "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined2 : SharedArrayBuffer,
      "%String%": String,
      "%StringIteratorPrototype%": hasSymbols && getProto ? getProto(""[Symbol.iterator]()) : undefined2,
      "%Symbol%": hasSymbols ? Symbol : undefined2,
      "%SyntaxError%": $SyntaxError,
      "%ThrowTypeError%": ThrowTypeError,
      "%TypedArray%": TypedArray,
      "%TypeError%": $TypeError,
      "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined2 : Uint8Array,
      "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined2 : Uint8ClampedArray,
      "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined2 : Uint16Array,
      "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined2 : Uint32Array,
      "%URIError%": $URIError,
      "%WeakMap%": typeof WeakMap === "undefined" ? undefined2 : WeakMap,
      "%WeakRef%": typeof WeakRef === "undefined" ? undefined2 : WeakRef,
      "%WeakSet%": typeof WeakSet === "undefined" ? undefined2 : WeakSet,
      "%Function.prototype.call%": $call,
      "%Function.prototype.apply%": $apply,
      "%Object.defineProperty%": $defineProperty,
      "%Object.getPrototypeOf%": $ObjectGPO,
      "%Math.abs%": abs,
      "%Math.floor%": floor,
      "%Math.max%": max,
      "%Math.min%": min,
      "%Math.pow%": pow,
      "%Math.round%": round,
      "%Math.sign%": sign2,
      "%Reflect.getPrototypeOf%": $ReflectGPO
    };
    if (getProto) {
      try {
        null.error;
      } catch (e) {
        errorProto = getProto(getProto(e));
        INTRINSICS["%Error.prototype%"] = errorProto;
      }
    }
    var errorProto;
    var doEval = function doEval2(name) {
      var value;
      if (name === "%AsyncFunction%") {
        value = getEvalledConstructor("async function () {}");
      } else if (name === "%GeneratorFunction%") {
        value = getEvalledConstructor("function* () {}");
      } else if (name === "%AsyncGeneratorFunction%") {
        value = getEvalledConstructor("async function* () {}");
      } else if (name === "%AsyncGenerator%") {
        var fn = doEval2("%AsyncGeneratorFunction%");
        if (fn) {
          value = fn.prototype;
        }
      } else if (name === "%AsyncIteratorPrototype%") {
        var gen2 = doEval2("%AsyncGenerator%");
        if (gen2 && getProto) {
          value = getProto(gen2.prototype);
        }
      }
      INTRINSICS[name] = value;
      return value;
    };
    var LEGACY_ALIASES = {
      __proto__: null,
      "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
      "%ArrayPrototype%": ["Array", "prototype"],
      "%ArrayProto_entries%": ["Array", "prototype", "entries"],
      "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
      "%ArrayProto_keys%": ["Array", "prototype", "keys"],
      "%ArrayProto_values%": ["Array", "prototype", "values"],
      "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
      "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
      "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
      "%BooleanPrototype%": ["Boolean", "prototype"],
      "%DataViewPrototype%": ["DataView", "prototype"],
      "%DatePrototype%": ["Date", "prototype"],
      "%ErrorPrototype%": ["Error", "prototype"],
      "%EvalErrorPrototype%": ["EvalError", "prototype"],
      "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
      "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
      "%FunctionPrototype%": ["Function", "prototype"],
      "%Generator%": ["GeneratorFunction", "prototype"],
      "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
      "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
      "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
      "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
      "%JSONParse%": ["JSON", "parse"],
      "%JSONStringify%": ["JSON", "stringify"],
      "%MapPrototype%": ["Map", "prototype"],
      "%NumberPrototype%": ["Number", "prototype"],
      "%ObjectPrototype%": ["Object", "prototype"],
      "%ObjProto_toString%": ["Object", "prototype", "toString"],
      "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
      "%PromisePrototype%": ["Promise", "prototype"],
      "%PromiseProto_then%": ["Promise", "prototype", "then"],
      "%Promise_all%": ["Promise", "all"],
      "%Promise_reject%": ["Promise", "reject"],
      "%Promise_resolve%": ["Promise", "resolve"],
      "%RangeErrorPrototype%": ["RangeError", "prototype"],
      "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
      "%RegExpPrototype%": ["RegExp", "prototype"],
      "%SetPrototype%": ["Set", "prototype"],
      "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
      "%StringPrototype%": ["String", "prototype"],
      "%SymbolPrototype%": ["Symbol", "prototype"],
      "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
      "%TypedArrayPrototype%": ["TypedArray", "prototype"],
      "%TypeErrorPrototype%": ["TypeError", "prototype"],
      "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
      "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
      "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
      "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
      "%URIErrorPrototype%": ["URIError", "prototype"],
      "%WeakMapPrototype%": ["WeakMap", "prototype"],
      "%WeakSetPrototype%": ["WeakSet", "prototype"]
    };
    var bind = require_function_bind();
    var hasOwn = require_hasown();
    var $concat = bind.call($call, Array.prototype.concat);
    var $spliceApply = bind.call($apply, Array.prototype.splice);
    var $replace = bind.call($call, String.prototype.replace);
    var $strSlice = bind.call($call, String.prototype.slice);
    var $exec = bind.call($call, RegExp.prototype.exec);
    var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = function stringToPath2(string2) {
      var first = $strSlice(string2, 0, 1);
      var last = $strSlice(string2, -1);
      if (first === "%" && last !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
      } else if (last === "%" && first !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
      }
      var result = [];
      $replace(string2, rePropName, function(match, number2, quote, subString) {
        result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number2 || match;
      });
      return result;
    };
    var getBaseIntrinsic = function getBaseIntrinsic2(name, allowMissing) {
      var intrinsicName = name;
      var alias;
      if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
        alias = LEGACY_ALIASES[intrinsicName];
        intrinsicName = "%" + alias[0] + "%";
      }
      if (hasOwn(INTRINSICS, intrinsicName)) {
        var value = INTRINSICS[intrinsicName];
        if (value === needsEval) {
          value = doEval(intrinsicName);
        }
        if (typeof value === "undefined" && !allowMissing) {
          throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
        }
        return {
          alias,
          name: intrinsicName,
          value
        };
      }
      throw new $SyntaxError("intrinsic " + name + " does not exist!");
    };
    module2.exports = function GetIntrinsic(name, allowMissing) {
      if (typeof name !== "string" || name.length === 0) {
        throw new $TypeError("intrinsic name must be a non-empty string");
      }
      if (arguments.length > 1 && typeof allowMissing !== "boolean") {
        throw new $TypeError('"allowMissing" argument must be a boolean');
      }
      if ($exec(/^%?[^%]*%?$/, name) === null) {
        throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
      }
      var parts = stringToPath(name);
      var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
      var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
      var intrinsicRealName = intrinsic.name;
      var value = intrinsic.value;
      var skipFurtherCaching = false;
      var alias = intrinsic.alias;
      if (alias) {
        intrinsicBaseName = alias[0];
        $spliceApply(parts, $concat([0, 1], alias));
      }
      for (var i = 1, isOwn = true; i < parts.length; i += 1) {
        var part = parts[i];
        var first = $strSlice(part, 0, 1);
        var last = $strSlice(part, -1);
        if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
          throw new $SyntaxError("property names with quotes must have matching quotes");
        }
        if (part === "constructor" || !isOwn) {
          skipFurtherCaching = true;
        }
        intrinsicBaseName += "." + part;
        intrinsicRealName = "%" + intrinsicBaseName + "%";
        if (hasOwn(INTRINSICS, intrinsicRealName)) {
          value = INTRINSICS[intrinsicRealName];
        } else if (value != null) {
          if (!(part in value)) {
            if (!allowMissing) {
              throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
            }
            return void undefined2;
          }
          if ($gOPD && i + 1 >= parts.length) {
            var desc = $gOPD(value, part);
            isOwn = !!desc;
            if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
              value = desc.get;
            } else {
              value = value[part];
            }
          } else {
            isOwn = hasOwn(value, part);
            value = value[part];
          }
          if (isOwn && !skipFurtherCaching) {
            INTRINSICS[intrinsicRealName] = value;
          }
        }
      }
      return value;
    };
  }
});

// ../node_modules/call-bound/index.js
var require_call_bound = __commonJS({
  "../node_modules/call-bound/index.js"(exports2, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBindBasic = require_call_bind_apply_helpers();
    var $indexOf = callBindBasic([GetIntrinsic("%String.prototype.indexOf%")]);
    module2.exports = function callBoundIntrinsic(name, allowMissing) {
      var intrinsic = (
        /** @type {(this: unknown, ...args: unknown[]) => unknown} */
        GetIntrinsic(name, !!allowMissing)
      );
      if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) {
        return callBindBasic(
          /** @type {const} */
          [intrinsic]
        );
      }
      return intrinsic;
    };
  }
});

// ../node_modules/is-arguments/index.js
var require_is_arguments = __commonJS({
  "../node_modules/is-arguments/index.js"(exports2, module2) {
    "use strict";
    var hasToStringTag = require_shams2()();
    var callBound = require_call_bound();
    var $toString = callBound("Object.prototype.toString");
    var isStandardArguments = function isArguments(value) {
      if (hasToStringTag && value && typeof value === "object" && Symbol.toStringTag in value) {
        return false;
      }
      return $toString(value) === "[object Arguments]";
    };
    var isLegacyArguments = function isArguments(value) {
      if (isStandardArguments(value)) {
        return true;
      }
      return value !== null && typeof value === "object" && "length" in value && typeof value.length === "number" && value.length >= 0 && $toString(value) !== "[object Array]" && "callee" in value && $toString(value.callee) === "[object Function]";
    };
    var supportsStandardArguments = function() {
      return isStandardArguments(arguments);
    }();
    isStandardArguments.isLegacyArguments = isLegacyArguments;
    module2.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;
  }
});

// ../node_modules/is-regex/index.js
var require_is_regex = __commonJS({
  "../node_modules/is-regex/index.js"(exports2, module2) {
    "use strict";
    var callBound = require_call_bound();
    var hasToStringTag = require_shams2()();
    var hasOwn = require_hasown();
    var gOPD = require_gopd();
    var fn;
    if (hasToStringTag) {
      $exec = callBound("RegExp.prototype.exec");
      isRegexMarker = {};
      throwRegexMarker = function() {
        throw isRegexMarker;
      };
      badStringifier = {
        toString: throwRegexMarker,
        valueOf: throwRegexMarker
      };
      if (typeof Symbol.toPrimitive === "symbol") {
        badStringifier[Symbol.toPrimitive] = throwRegexMarker;
      }
      fn = function isRegex(value) {
        if (!value || typeof value !== "object") {
          return false;
        }
        var descriptor = (
          /** @type {NonNullable<typeof gOPD>} */
          gOPD(
            /** @type {{ lastIndex?: unknown }} */
            value,
            "lastIndex"
          )
        );
        var hasLastIndexDataProperty = descriptor && hasOwn(descriptor, "value");
        if (!hasLastIndexDataProperty) {
          return false;
        }
        try {
          $exec(
            value,
            /** @type {string} */
            /** @type {unknown} */
            badStringifier
          );
        } catch (e) {
          return e === isRegexMarker;
        }
      };
    } else {
      $toString = callBound("Object.prototype.toString");
      regexClass = "[object RegExp]";
      fn = function isRegex(value) {
        if (!value || typeof value !== "object" && typeof value !== "function") {
          return false;
        }
        return $toString(value) === regexClass;
      };
    }
    var $exec;
    var isRegexMarker;
    var throwRegexMarker;
    var badStringifier;
    var $toString;
    var regexClass;
    module2.exports = fn;
  }
});

// ../node_modules/safe-regex-test/index.js
var require_safe_regex_test = __commonJS({
  "../node_modules/safe-regex-test/index.js"(exports2, module2) {
    "use strict";
    var callBound = require_call_bound();
    var isRegex = require_is_regex();
    var $exec = callBound("RegExp.prototype.exec");
    var $TypeError = require_type();
    module2.exports = function regexTester(regex) {
      if (!isRegex(regex)) {
        throw new $TypeError("`regex` must be a RegExp");
      }
      return function test(s) {
        return $exec(regex, s) !== null;
      };
    };
  }
});

// ../node_modules/is-generator-function/index.js
var require_is_generator_function = __commonJS({
  "../node_modules/is-generator-function/index.js"(exports2, module2) {
    "use strict";
    var callBound = require_call_bound();
    var safeRegexTest = require_safe_regex_test();
    var isFnRegex = safeRegexTest(/^\s*(?:function)?\*/);
    var hasToStringTag = require_shams2()();
    var getProto = require_get_proto();
    var toStr = callBound("Object.prototype.toString");
    var fnToStr = callBound("Function.prototype.toString");
    var getGeneratorFunc = function() {
      if (!hasToStringTag) {
        return false;
      }
      try {
        return Function("return function*() {}")();
      } catch (e) {
      }
    };
    var GeneratorFunction;
    module2.exports = function isGeneratorFunction(fn) {
      if (typeof fn !== "function") {
        return false;
      }
      if (isFnRegex(fnToStr(fn))) {
        return true;
      }
      if (!hasToStringTag) {
        var str = toStr(fn);
        return str === "[object GeneratorFunction]";
      }
      if (!getProto) {
        return false;
      }
      if (typeof GeneratorFunction === "undefined") {
        var generatorFunc = getGeneratorFunc();
        GeneratorFunction = generatorFunc ? (
          /** @type {GeneratorFunctionConstructor} */
          getProto(generatorFunc)
        ) : false;
      }
      return getProto(fn) === GeneratorFunction;
    };
  }
});

// ../node_modules/is-callable/index.js
var require_is_callable = __commonJS({
  "../node_modules/is-callable/index.js"(exports2, module2) {
    "use strict";
    var fnToStr = Function.prototype.toString;
    var reflectApply = typeof Reflect === "object" && Reflect !== null && Reflect.apply;
    var badArrayLike;
    var isCallableMarker;
    if (typeof reflectApply === "function" && typeof Object.defineProperty === "function") {
      try {
        badArrayLike = Object.defineProperty({}, "length", {
          get: function() {
            throw isCallableMarker;
          }
        });
        isCallableMarker = {};
        reflectApply(function() {
          throw 42;
        }, null, badArrayLike);
      } catch (_) {
        if (_ !== isCallableMarker) {
          reflectApply = null;
        }
      }
    } else {
      reflectApply = null;
    }
    var constructorRegex = /^\s*class\b/;
    var isES6ClassFn = function isES6ClassFunction(value) {
      try {
        var fnStr = fnToStr.call(value);
        return constructorRegex.test(fnStr);
      } catch (e) {
        return false;
      }
    };
    var tryFunctionObject = function tryFunctionToStr(value) {
      try {
        if (isES6ClassFn(value)) {
          return false;
        }
        fnToStr.call(value);
        return true;
      } catch (e) {
        return false;
      }
    };
    var toStr = Object.prototype.toString;
    var objectClass = "[object Object]";
    var fnClass = "[object Function]";
    var genClass = "[object GeneratorFunction]";
    var ddaClass = "[object HTMLAllCollection]";
    var ddaClass2 = "[object HTML document.all class]";
    var ddaClass3 = "[object HTMLCollection]";
    var hasToStringTag = typeof Symbol === "function" && !!Symbol.toStringTag;
    var isIE68 = !(0 in [,]);
    var isDDA = function isDocumentDotAll() {
      return false;
    };
    if (typeof document === "object") {
      all = document.all;
      if (toStr.call(all) === toStr.call(document.all)) {
        isDDA = function isDocumentDotAll(value) {
          if ((isIE68 || !value) && (typeof value === "undefined" || typeof value === "object")) {
            try {
              var str = toStr.call(value);
              return (str === ddaClass || str === ddaClass2 || str === ddaClass3 || str === objectClass) && value("") == null;
            } catch (e) {
            }
          }
          return false;
        };
      }
    }
    var all;
    module2.exports = reflectApply ? function isCallable(value) {
      if (isDDA(value)) {
        return true;
      }
      if (!value) {
        return false;
      }
      if (typeof value !== "function" && typeof value !== "object") {
        return false;
      }
      try {
        reflectApply(value, null, badArrayLike);
      } catch (e) {
        if (e !== isCallableMarker) {
          return false;
        }
      }
      return !isES6ClassFn(value) && tryFunctionObject(value);
    } : function isCallable(value) {
      if (isDDA(value)) {
        return true;
      }
      if (!value) {
        return false;
      }
      if (typeof value !== "function" && typeof value !== "object") {
        return false;
      }
      if (hasToStringTag) {
        return tryFunctionObject(value);
      }
      if (isES6ClassFn(value)) {
        return false;
      }
      var strClass = toStr.call(value);
      if (strClass !== fnClass && strClass !== genClass && !/^\[object HTML/.test(strClass)) {
        return false;
      }
      return tryFunctionObject(value);
    };
  }
});

// ../node_modules/for-each/index.js
var require_for_each = __commonJS({
  "../node_modules/for-each/index.js"(exports2, module2) {
    "use strict";
    var isCallable = require_is_callable();
    var toStr = Object.prototype.toString;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var forEachArray = function forEachArray2(array2, iterator, receiver) {
      for (var i = 0, len = array2.length; i < len; i++) {
        if (hasOwnProperty.call(array2, i)) {
          if (receiver == null) {
            iterator(array2[i], i, array2);
          } else {
            iterator.call(receiver, array2[i], i, array2);
          }
        }
      }
    };
    var forEachString = function forEachString2(string2, iterator, receiver) {
      for (var i = 0, len = string2.length; i < len; i++) {
        if (receiver == null) {
          iterator(string2.charAt(i), i, string2);
        } else {
          iterator.call(receiver, string2.charAt(i), i, string2);
        }
      }
    };
    var forEachObject = function forEachObject2(object, iterator, receiver) {
      for (var k in object) {
        if (hasOwnProperty.call(object, k)) {
          if (receiver == null) {
            iterator(object[k], k, object);
          } else {
            iterator.call(receiver, object[k], k, object);
          }
        }
      }
    };
    function isArray(x) {
      return toStr.call(x) === "[object Array]";
    }
    module2.exports = function forEach(list, iterator, thisArg) {
      if (!isCallable(iterator)) {
        throw new TypeError("iterator must be a function");
      }
      var receiver;
      if (arguments.length >= 3) {
        receiver = thisArg;
      }
      if (isArray(list)) {
        forEachArray(list, iterator, receiver);
      } else if (typeof list === "string") {
        forEachString(list, iterator, receiver);
      } else {
        forEachObject(list, iterator, receiver);
      }
    };
  }
});

// ../node_modules/possible-typed-array-names/index.js
var require_possible_typed_array_names = __commonJS({
  "../node_modules/possible-typed-array-names/index.js"(exports2, module2) {
    "use strict";
    module2.exports = [
      "Float16Array",
      "Float32Array",
      "Float64Array",
      "Int8Array",
      "Int16Array",
      "Int32Array",
      "Uint8Array",
      "Uint8ClampedArray",
      "Uint16Array",
      "Uint32Array",
      "BigInt64Array",
      "BigUint64Array"
    ];
  }
});

// ../node_modules/available-typed-arrays/index.js
var require_available_typed_arrays = __commonJS({
  "../node_modules/available-typed-arrays/index.js"(exports2, module2) {
    "use strict";
    var possibleNames = require_possible_typed_array_names();
    var g = typeof globalThis === "undefined" ? global : globalThis;
    module2.exports = function availableTypedArrays() {
      var out = [];
      for (var i = 0; i < possibleNames.length; i++) {
        if (typeof g[possibleNames[i]] === "function") {
          out[out.length] = possibleNames[i];
        }
      }
      return out;
    };
  }
});

// ../node_modules/define-data-property/index.js
var require_define_data_property = __commonJS({
  "../node_modules/define-data-property/index.js"(exports2, module2) {
    "use strict";
    var $defineProperty = require_es_define_property();
    var $SyntaxError = require_syntax();
    var $TypeError = require_type();
    var gopd = require_gopd();
    module2.exports = function defineDataProperty(obj, property, value) {
      if (!obj || typeof obj !== "object" && typeof obj !== "function") {
        throw new $TypeError("`obj` must be an object or a function`");
      }
      if (typeof property !== "string" && typeof property !== "symbol") {
        throw new $TypeError("`property` must be a string or a symbol`");
      }
      if (arguments.length > 3 && typeof arguments[3] !== "boolean" && arguments[3] !== null) {
        throw new $TypeError("`nonEnumerable`, if provided, must be a boolean or null");
      }
      if (arguments.length > 4 && typeof arguments[4] !== "boolean" && arguments[4] !== null) {
        throw new $TypeError("`nonWritable`, if provided, must be a boolean or null");
      }
      if (arguments.length > 5 && typeof arguments[5] !== "boolean" && arguments[5] !== null) {
        throw new $TypeError("`nonConfigurable`, if provided, must be a boolean or null");
      }
      if (arguments.length > 6 && typeof arguments[6] !== "boolean") {
        throw new $TypeError("`loose`, if provided, must be a boolean");
      }
      var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
      var nonWritable = arguments.length > 4 ? arguments[4] : null;
      var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
      var loose = arguments.length > 6 ? arguments[6] : false;
      var desc = !!gopd && gopd(obj, property);
      if ($defineProperty) {
        $defineProperty(obj, property, {
          configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
          enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
          value,
          writable: nonWritable === null && desc ? desc.writable : !nonWritable
        });
      } else if (loose || !nonEnumerable && !nonWritable && !nonConfigurable) {
        obj[property] = value;
      } else {
        throw new $SyntaxError("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");
      }
    };
  }
});

// ../node_modules/has-property-descriptors/index.js
var require_has_property_descriptors = __commonJS({
  "../node_modules/has-property-descriptors/index.js"(exports2, module2) {
    "use strict";
    var $defineProperty = require_es_define_property();
    var hasPropertyDescriptors = function hasPropertyDescriptors2() {
      return !!$defineProperty;
    };
    hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
      if (!$defineProperty) {
        return null;
      }
      try {
        return $defineProperty([], "length", { value: 1 }).length !== 1;
      } catch (e) {
        return true;
      }
    };
    module2.exports = hasPropertyDescriptors;
  }
});

// ../node_modules/set-function-length/index.js
var require_set_function_length = __commonJS({
  "../node_modules/set-function-length/index.js"(exports2, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var define3 = require_define_data_property();
    var hasDescriptors = require_has_property_descriptors()();
    var gOPD = require_gopd();
    var $TypeError = require_type();
    var $floor = GetIntrinsic("%Math.floor%");
    module2.exports = function setFunctionLength(fn, length) {
      if (typeof fn !== "function") {
        throw new $TypeError("`fn` is not a function");
      }
      if (typeof length !== "number" || length < 0 || length > 4294967295 || $floor(length) !== length) {
        throw new $TypeError("`length` must be a positive 32-bit integer");
      }
      var loose = arguments.length > 2 && !!arguments[2];
      var functionLengthIsConfigurable = true;
      var functionLengthIsWritable = true;
      if ("length" in fn && gOPD) {
        var desc = gOPD(fn, "length");
        if (desc && !desc.configurable) {
          functionLengthIsConfigurable = false;
        }
        if (desc && !desc.writable) {
          functionLengthIsWritable = false;
        }
      }
      if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
        if (hasDescriptors) {
          define3(
            /** @type {Parameters<define>[0]} */
            fn,
            "length",
            length,
            true,
            true
          );
        } else {
          define3(
            /** @type {Parameters<define>[0]} */
            fn,
            "length",
            length
          );
        }
      }
      return fn;
    };
  }
});

// ../node_modules/call-bind-apply-helpers/applyBind.js
var require_applyBind = __commonJS({
  "../node_modules/call-bind-apply-helpers/applyBind.js"(exports2, module2) {
    "use strict";
    var bind = require_function_bind();
    var $apply = require_functionApply();
    var actualApply = require_actualApply();
    module2.exports = function applyBind() {
      return actualApply(bind, $apply, arguments);
    };
  }
});

// ../node_modules/call-bind/index.js
var require_call_bind = __commonJS({
  "../node_modules/call-bind/index.js"(exports2, module2) {
    "use strict";
    var setFunctionLength = require_set_function_length();
    var $defineProperty = require_es_define_property();
    var callBindBasic = require_call_bind_apply_helpers();
    var applyBind = require_applyBind();
    module2.exports = function callBind(originalFunction) {
      var func = callBindBasic(arguments);
      var adjustedLength = originalFunction.length - (arguments.length - 1);
      return setFunctionLength(
        func,
        1 + (adjustedLength > 0 ? adjustedLength : 0),
        true
      );
    };
    if ($defineProperty) {
      $defineProperty(module2.exports, "apply", { value: applyBind });
    } else {
      module2.exports.apply = applyBind;
    }
  }
});

// ../node_modules/which-typed-array/index.js
var require_which_typed_array = __commonJS({
  "../node_modules/which-typed-array/index.js"(exports2, module2) {
    "use strict";
    var forEach = require_for_each();
    var availableTypedArrays = require_available_typed_arrays();
    var callBind = require_call_bind();
    var callBound = require_call_bound();
    var gOPD = require_gopd();
    var getProto = require_get_proto();
    var $toString = callBound("Object.prototype.toString");
    var hasToStringTag = require_shams2()();
    var g = typeof globalThis === "undefined" ? global : globalThis;
    var typedArrays = availableTypedArrays();
    var $slice = callBound("String.prototype.slice");
    var $indexOf = callBound("Array.prototype.indexOf", true) || function indexOf(array2, value) {
      for (var i = 0; i < array2.length; i += 1) {
        if (array2[i] === value) {
          return i;
        }
      }
      return -1;
    };
    var cache = { __proto__: null };
    if (hasToStringTag && gOPD && getProto) {
      forEach(typedArrays, function(typedArray) {
        var arr = new g[typedArray]();
        if (Symbol.toStringTag in arr && getProto) {
          var proto = getProto(arr);
          var descriptor = gOPD(proto, Symbol.toStringTag);
          if (!descriptor && proto) {
            var superProto = getProto(proto);
            descriptor = gOPD(superProto, Symbol.toStringTag);
          }
          cache["$" + typedArray] = callBind(descriptor.get);
        }
      });
    } else {
      forEach(typedArrays, function(typedArray) {
        var arr = new g[typedArray]();
        var fn = arr.slice || arr.set;
        if (fn) {
          cache[
            /** @type {`$${import('.').TypedArrayName}`} */
            "$" + typedArray
          ] = /** @type {import('./types').BoundSlice | import('./types').BoundSet} */
          // @ts-expect-error TODO FIXME
          callBind(fn);
        }
      });
    }
    var tryTypedArrays = function tryAllTypedArrays(value) {
      var found = false;
      forEach(
        /** @type {Record<`\$${import('.').TypedArrayName}`, Getter>} */
        cache,
        /** @type {(getter: Getter, name: `\$${import('.').TypedArrayName}`) => void} */
        function(getter, typedArray) {
          if (!found) {
            try {
              if ("$" + getter(value) === typedArray) {
                found = /** @type {import('.').TypedArrayName} */
                $slice(typedArray, 1);
              }
            } catch (e) {
            }
          }
        }
      );
      return found;
    };
    var trySlices = function tryAllSlices(value) {
      var found = false;
      forEach(
        /** @type {Record<`\$${import('.').TypedArrayName}`, Getter>} */
        cache,
        /** @type {(getter: Getter, name: `\$${import('.').TypedArrayName}`) => void} */
        function(getter, name) {
          if (!found) {
            try {
              getter(value);
              found = /** @type {import('.').TypedArrayName} */
              $slice(name, 1);
            } catch (e) {
            }
          }
        }
      );
      return found;
    };
    module2.exports = function whichTypedArray(value) {
      if (!value || typeof value !== "object") {
        return false;
      }
      if (!hasToStringTag) {
        var tag = $slice($toString(value), 8, -1);
        if ($indexOf(typedArrays, tag) > -1) {
          return tag;
        }
        if (tag !== "Object") {
          return false;
        }
        return trySlices(value);
      }
      if (!gOPD) {
        return null;
      }
      return tryTypedArrays(value);
    };
  }
});

// ../node_modules/is-typed-array/index.js
var require_is_typed_array = __commonJS({
  "../node_modules/is-typed-array/index.js"(exports2, module2) {
    "use strict";
    var whichTypedArray = require_which_typed_array();
    module2.exports = function isTypedArray(value) {
      return !!whichTypedArray(value);
    };
  }
});

// ../node_modules/util/support/types.js
var require_types4 = __commonJS({
  "../node_modules/util/support/types.js"(exports2) {
    "use strict";
    var isArgumentsObject = require_is_arguments();
    var isGeneratorFunction = require_is_generator_function();
    var whichTypedArray = require_which_typed_array();
    var isTypedArray = require_is_typed_array();
    function uncurryThis(f2) {
      return f2.call.bind(f2);
    }
    var BigIntSupported = typeof BigInt !== "undefined";
    var SymbolSupported = typeof Symbol !== "undefined";
    var ObjectToString = uncurryThis(Object.prototype.toString);
    var numberValue = uncurryThis(Number.prototype.valueOf);
    var stringValue = uncurryThis(String.prototype.valueOf);
    var booleanValue = uncurryThis(Boolean.prototype.valueOf);
    if (BigIntSupported) {
      bigIntValue = uncurryThis(BigInt.prototype.valueOf);
    }
    var bigIntValue;
    if (SymbolSupported) {
      symbolValue = uncurryThis(Symbol.prototype.valueOf);
    }
    var symbolValue;
    function checkBoxedPrimitive(value, prototypeValueOf) {
      if (typeof value !== "object") {
        return false;
      }
      try {
        prototypeValueOf(value);
        return true;
      } catch (e) {
        return false;
      }
    }
    exports2.isArgumentsObject = isArgumentsObject;
    exports2.isGeneratorFunction = isGeneratorFunction;
    exports2.isTypedArray = isTypedArray;
    function isPromise(input) {
      return typeof Promise !== "undefined" && input instanceof Promise || input !== null && typeof input === "object" && typeof input.then === "function" && typeof input.catch === "function";
    }
    exports2.isPromise = isPromise;
    function isArrayBufferView(value) {
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        return ArrayBuffer.isView(value);
      }
      return isTypedArray(value) || isDataView(value);
    }
    exports2.isArrayBufferView = isArrayBufferView;
    function isUint8Array(value) {
      return whichTypedArray(value) === "Uint8Array";
    }
    exports2.isUint8Array = isUint8Array;
    function isUint8ClampedArray(value) {
      return whichTypedArray(value) === "Uint8ClampedArray";
    }
    exports2.isUint8ClampedArray = isUint8ClampedArray;
    function isUint16Array(value) {
      return whichTypedArray(value) === "Uint16Array";
    }
    exports2.isUint16Array = isUint16Array;
    function isUint32Array(value) {
      return whichTypedArray(value) === "Uint32Array";
    }
    exports2.isUint32Array = isUint32Array;
    function isInt8Array(value) {
      return whichTypedArray(value) === "Int8Array";
    }
    exports2.isInt8Array = isInt8Array;
    function isInt16Array(value) {
      return whichTypedArray(value) === "Int16Array";
    }
    exports2.isInt16Array = isInt16Array;
    function isInt32Array(value) {
      return whichTypedArray(value) === "Int32Array";
    }
    exports2.isInt32Array = isInt32Array;
    function isFloat32Array(value) {
      return whichTypedArray(value) === "Float32Array";
    }
    exports2.isFloat32Array = isFloat32Array;
    function isFloat64Array(value) {
      return whichTypedArray(value) === "Float64Array";
    }
    exports2.isFloat64Array = isFloat64Array;
    function isBigInt64Array(value) {
      return whichTypedArray(value) === "BigInt64Array";
    }
    exports2.isBigInt64Array = isBigInt64Array;
    function isBigUint64Array(value) {
      return whichTypedArray(value) === "BigUint64Array";
    }
    exports2.isBigUint64Array = isBigUint64Array;
    function isMapToString(value) {
      return ObjectToString(value) === "[object Map]";
    }
    isMapToString.working = typeof Map !== "undefined" && isMapToString(/* @__PURE__ */ new Map());
    function isMap(value) {
      if (typeof Map === "undefined") {
        return false;
      }
      return isMapToString.working ? isMapToString(value) : value instanceof Map;
    }
    exports2.isMap = isMap;
    function isSetToString(value) {
      return ObjectToString(value) === "[object Set]";
    }
    isSetToString.working = typeof Set !== "undefined" && isSetToString(/* @__PURE__ */ new Set());
    function isSet(value) {
      if (typeof Set === "undefined") {
        return false;
      }
      return isSetToString.working ? isSetToString(value) : value instanceof Set;
    }
    exports2.isSet = isSet;
    function isWeakMapToString(value) {
      return ObjectToString(value) === "[object WeakMap]";
    }
    isWeakMapToString.working = typeof WeakMap !== "undefined" && isWeakMapToString(/* @__PURE__ */ new WeakMap());
    function isWeakMap(value) {
      if (typeof WeakMap === "undefined") {
        return false;
      }
      return isWeakMapToString.working ? isWeakMapToString(value) : value instanceof WeakMap;
    }
    exports2.isWeakMap = isWeakMap;
    function isWeakSetToString(value) {
      return ObjectToString(value) === "[object WeakSet]";
    }
    isWeakSetToString.working = typeof WeakSet !== "undefined" && isWeakSetToString(/* @__PURE__ */ new WeakSet());
    function isWeakSet(value) {
      return isWeakSetToString(value);
    }
    exports2.isWeakSet = isWeakSet;
    function isArrayBufferToString(value) {
      return ObjectToString(value) === "[object ArrayBuffer]";
    }
    isArrayBufferToString.working = typeof ArrayBuffer !== "undefined" && isArrayBufferToString(new ArrayBuffer());
    function isArrayBuffer(value) {
      if (typeof ArrayBuffer === "undefined") {
        return false;
      }
      return isArrayBufferToString.working ? isArrayBufferToString(value) : value instanceof ArrayBuffer;
    }
    exports2.isArrayBuffer = isArrayBuffer;
    function isDataViewToString(value) {
      return ObjectToString(value) === "[object DataView]";
    }
    isDataViewToString.working = typeof ArrayBuffer !== "undefined" && typeof DataView !== "undefined" && isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1));
    function isDataView(value) {
      if (typeof DataView === "undefined") {
        return false;
      }
      return isDataViewToString.working ? isDataViewToString(value) : value instanceof DataView;
    }
    exports2.isDataView = isDataView;
    var SharedArrayBufferCopy = typeof SharedArrayBuffer !== "undefined" ? SharedArrayBuffer : void 0;
    function isSharedArrayBufferToString(value) {
      return ObjectToString(value) === "[object SharedArrayBuffer]";
    }
    function isSharedArrayBuffer(value) {
      if (typeof SharedArrayBufferCopy === "undefined") {
        return false;
      }
      if (typeof isSharedArrayBufferToString.working === "undefined") {
        isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
      }
      return isSharedArrayBufferToString.working ? isSharedArrayBufferToString(value) : value instanceof SharedArrayBufferCopy;
    }
    exports2.isSharedArrayBuffer = isSharedArrayBuffer;
    function isAsyncFunction(value) {
      return ObjectToString(value) === "[object AsyncFunction]";
    }
    exports2.isAsyncFunction = isAsyncFunction;
    function isMapIterator(value) {
      return ObjectToString(value) === "[object Map Iterator]";
    }
    exports2.isMapIterator = isMapIterator;
    function isSetIterator(value) {
      return ObjectToString(value) === "[object Set Iterator]";
    }
    exports2.isSetIterator = isSetIterator;
    function isGeneratorObject(value) {
      return ObjectToString(value) === "[object Generator]";
    }
    exports2.isGeneratorObject = isGeneratorObject;
    function isWebAssemblyCompiledModule(value) {
      return ObjectToString(value) === "[object WebAssembly.Module]";
    }
    exports2.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;
    function isNumberObject(value) {
      return checkBoxedPrimitive(value, numberValue);
    }
    exports2.isNumberObject = isNumberObject;
    function isStringObject(value) {
      return checkBoxedPrimitive(value, stringValue);
    }
    exports2.isStringObject = isStringObject;
    function isBooleanObject(value) {
      return checkBoxedPrimitive(value, booleanValue);
    }
    exports2.isBooleanObject = isBooleanObject;
    function isBigIntObject(value) {
      return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
    }
    exports2.isBigIntObject = isBigIntObject;
    function isSymbolObject(value) {
      return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
    }
    exports2.isSymbolObject = isSymbolObject;
    function isBoxedPrimitive(value) {
      return isNumberObject(value) || isStringObject(value) || isBooleanObject(value) || isBigIntObject(value) || isSymbolObject(value);
    }
    exports2.isBoxedPrimitive = isBoxedPrimitive;
    function isAnyArrayBuffer(value) {
      return typeof Uint8Array !== "undefined" && (isArrayBuffer(value) || isSharedArrayBuffer(value));
    }
    exports2.isAnyArrayBuffer = isAnyArrayBuffer;
    ["isProxy", "isExternal", "isModuleNamespaceObject"].forEach(function(method2) {
      Object.defineProperty(exports2, method2, {
        enumerable: false,
        value: function() {
          throw new Error(method2 + " is not supported in userland");
        }
      });
    });
  }
});

// ../node_modules/util/support/isBufferBrowser.js
var require_isBufferBrowser = __commonJS({
  "../node_modules/util/support/isBufferBrowser.js"(exports2, module2) {
    module2.exports = function isBuffer(arg) {
      return arg && typeof arg === "object" && typeof arg.copy === "function" && typeof arg.fill === "function" && typeof arg.readUInt8 === "function";
    };
  }
});

// ../node_modules/inherits/inherits_browser.js
var require_inherits_browser = __commonJS({
  "../node_modules/inherits/inherits_browser.js"(exports2, module2) {
    if (typeof Object.create === "function") {
      module2.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      module2.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
  }
});

// ../node_modules/util/util.js
var require_util = __commonJS({
  "../node_modules/util/util.js"(exports2) {
    var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors2(obj) {
      var keys = Object.keys(obj);
      var descriptors = {};
      for (var i = 0; i < keys.length; i++) {
        descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
      }
      return descriptors;
    };
    var formatRegExp = /%[sdj%]/g;
    exports2.format = function(f2) {
      if (!isString(f2)) {
        var objects = [];
        for (var i = 0; i < arguments.length; i++) {
          objects.push(inspect(arguments[i]));
        }
        return objects.join(" ");
      }
      var i = 1;
      var args = arguments;
      var len = args.length;
      var str = String(f2).replace(formatRegExp, function(x2) {
        if (x2 === "%%") return "%";
        if (i >= len) return x2;
        switch (x2) {
          case "%s":
            return String(args[i++]);
          case "%d":
            return Number(args[i++]);
          case "%j":
            try {
              return JSON.stringify(args[i++]);
            } catch (_) {
              return "[Circular]";
            }
          default:
            return x2;
        }
      });
      for (var x = args[i]; i < len; x = args[++i]) {
        if (isNull(x) || !isObject2(x)) {
          str += " " + x;
        } else {
          str += " " + inspect(x);
        }
      }
      return str;
    };
    exports2.deprecate = function(fn, msg) {
      if (typeof process !== "undefined" && process.noDeprecation === true) {
        return fn;
      }
      if (typeof process === "undefined") {
        return function() {
          return exports2.deprecate(fn, msg).apply(this, arguments);
        };
      }
      var warned = false;
      function deprecated() {
        if (!warned) {
          if (process.throwDeprecation) {
            throw new Error(msg);
          } else if (process.traceDeprecation) {
            console.trace(msg);
          } else {
            console.error(msg);
          }
          warned = true;
        }
        return fn.apply(this, arguments);
      }
      return deprecated;
    };
    var debugs = {};
    var debugEnvRegex = /^$/;
    if (process.env.NODE_DEBUG) {
      debugEnv = process.env.NODE_DEBUG;
      debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, "\\$&").replace(/\*/g, ".*").replace(/,/g, "$|^").toUpperCase();
      debugEnvRegex = new RegExp("^" + debugEnv + "$", "i");
    }
    var debugEnv;
    exports2.debuglog = function(set) {
      set = set.toUpperCase();
      if (!debugs[set]) {
        if (debugEnvRegex.test(set)) {
          var pid = process.pid;
          debugs[set] = function() {
            var msg = exports2.format.apply(exports2, arguments);
            console.error("%s %d: %s", set, pid, msg);
          };
        } else {
          debugs[set] = function() {
          };
        }
      }
      return debugs[set];
    };
    function inspect(obj, opts) {
      var ctx = {
        seen: [],
        stylize: stylizeNoColor
      };
      if (arguments.length >= 3) ctx.depth = arguments[2];
      if (arguments.length >= 4) ctx.colors = arguments[3];
      if (isBoolean(opts)) {
        ctx.showHidden = opts;
      } else if (opts) {
        exports2._extend(ctx, opts);
      }
      if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
      if (isUndefined(ctx.depth)) ctx.depth = 2;
      if (isUndefined(ctx.colors)) ctx.colors = false;
      if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
      if (ctx.colors) ctx.stylize = stylizeWithColor;
      return formatValue(ctx, obj, ctx.depth);
    }
    exports2.inspect = inspect;
    inspect.colors = {
      "bold": [1, 22],
      "italic": [3, 23],
      "underline": [4, 24],
      "inverse": [7, 27],
      "white": [37, 39],
      "grey": [90, 39],
      "black": [30, 39],
      "blue": [34, 39],
      "cyan": [36, 39],
      "green": [32, 39],
      "magenta": [35, 39],
      "red": [31, 39],
      "yellow": [33, 39]
    };
    inspect.styles = {
      "special": "cyan",
      "number": "yellow",
      "boolean": "yellow",
      "undefined": "grey",
      "null": "bold",
      "string": "green",
      "date": "magenta",
      // "name": intentionally not styling
      "regexp": "red"
    };
    function stylizeWithColor(str, styleType) {
      var style = inspect.styles[styleType];
      if (style) {
        return "\x1B[" + inspect.colors[style][0] + "m" + str + "\x1B[" + inspect.colors[style][1] + "m";
      } else {
        return str;
      }
    }
    function stylizeNoColor(str, styleType) {
      return str;
    }
    function arrayToHash(array2) {
      var hash = {};
      array2.forEach(function(val, idx) {
        hash[val] = true;
      });
      return hash;
    }
    function formatValue(ctx, value, recurseTimes) {
      if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
      value.inspect !== exports2.inspect && // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
        var ret = value.inspect(recurseTimes, ctx);
        if (!isString(ret)) {
          ret = formatValue(ctx, ret, recurseTimes);
        }
        return ret;
      }
      var primitive = formatPrimitive(ctx, value);
      if (primitive) {
        return primitive;
      }
      var keys = Object.keys(value);
      var visibleKeys = arrayToHash(keys);
      if (ctx.showHidden) {
        keys = Object.getOwnPropertyNames(value);
      }
      if (isError(value) && (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)) {
        return formatError(value);
      }
      if (keys.length === 0) {
        if (isFunction(value)) {
          var name = value.name ? ": " + value.name : "";
          return ctx.stylize("[Function" + name + "]", "special");
        }
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
        }
        if (isDate(value)) {
          return ctx.stylize(Date.prototype.toString.call(value), "date");
        }
        if (isError(value)) {
          return formatError(value);
        }
      }
      var base = "", array2 = false, braces = ["{", "}"];
      if (isArray(value)) {
        array2 = true;
        braces = ["[", "]"];
      }
      if (isFunction(value)) {
        var n = value.name ? ": " + value.name : "";
        base = " [Function" + n + "]";
      }
      if (isRegExp(value)) {
        base = " " + RegExp.prototype.toString.call(value);
      }
      if (isDate(value)) {
        base = " " + Date.prototype.toUTCString.call(value);
      }
      if (isError(value)) {
        base = " " + formatError(value);
      }
      if (keys.length === 0 && (!array2 || value.length == 0)) {
        return braces[0] + base + braces[1];
      }
      if (recurseTimes < 0) {
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
        } else {
          return ctx.stylize("[Object]", "special");
        }
      }
      ctx.seen.push(value);
      var output;
      if (array2) {
        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
      } else {
        output = keys.map(function(key) {
          return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array2);
        });
      }
      ctx.seen.pop();
      return reduceToSingleString(output, base, braces);
    }
    function formatPrimitive(ctx, value) {
      if (isUndefined(value))
        return ctx.stylize("undefined", "undefined");
      if (isString(value)) {
        var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
        return ctx.stylize(simple, "string");
      }
      if (isNumber(value))
        return ctx.stylize("" + value, "number");
      if (isBoolean(value))
        return ctx.stylize("" + value, "boolean");
      if (isNull(value))
        return ctx.stylize("null", "null");
    }
    function formatError(value) {
      return "[" + Error.prototype.toString.call(value) + "]";
    }
    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
      var output = [];
      for (var i = 0, l = value.length; i < l; ++i) {
        if (hasOwnProperty(value, String(i))) {
          output.push(formatProperty(
            ctx,
            value,
            recurseTimes,
            visibleKeys,
            String(i),
            true
          ));
        } else {
          output.push("");
        }
      }
      keys.forEach(function(key) {
        if (!key.match(/^\d+$/)) {
          output.push(formatProperty(
            ctx,
            value,
            recurseTimes,
            visibleKeys,
            key,
            true
          ));
        }
      });
      return output;
    }
    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array2) {
      var name, str, desc;
      desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
      if (desc.get) {
        if (desc.set) {
          str = ctx.stylize("[Getter/Setter]", "special");
        } else {
          str = ctx.stylize("[Getter]", "special");
        }
      } else {
        if (desc.set) {
          str = ctx.stylize("[Setter]", "special");
        }
      }
      if (!hasOwnProperty(visibleKeys, key)) {
        name = "[" + key + "]";
      }
      if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
          if (isNull(recurseTimes)) {
            str = formatValue(ctx, desc.value, null);
          } else {
            str = formatValue(ctx, desc.value, recurseTimes - 1);
          }
          if (str.indexOf("\n") > -1) {
            if (array2) {
              str = str.split("\n").map(function(line) {
                return "  " + line;
              }).join("\n").slice(2);
            } else {
              str = "\n" + str.split("\n").map(function(line) {
                return "   " + line;
              }).join("\n");
            }
          }
        } else {
          str = ctx.stylize("[Circular]", "special");
        }
      }
      if (isUndefined(name)) {
        if (array2 && key.match(/^\d+$/)) {
          return str;
        }
        name = JSON.stringify("" + key);
        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name = name.slice(1, -1);
          name = ctx.stylize(name, "name");
        } else {
          name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
          name = ctx.stylize(name, "string");
        }
      }
      return name + ": " + str;
    }
    function reduceToSingleString(output, base, braces) {
      var numLinesEst = 0;
      var length = output.reduce(function(prev, cur) {
        numLinesEst++;
        if (cur.indexOf("\n") >= 0) numLinesEst++;
        return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
      }, 0);
      if (length > 60) {
        return braces[0] + (base === "" ? "" : base + "\n ") + " " + output.join(",\n  ") + " " + braces[1];
      }
      return braces[0] + base + " " + output.join(", ") + " " + braces[1];
    }
    exports2.types = require_types4();
    function isArray(ar) {
      return Array.isArray(ar);
    }
    exports2.isArray = isArray;
    function isBoolean(arg) {
      return typeof arg === "boolean";
    }
    exports2.isBoolean = isBoolean;
    function isNull(arg) {
      return arg === null;
    }
    exports2.isNull = isNull;
    function isNullOrUndefined(arg) {
      return arg == null;
    }
    exports2.isNullOrUndefined = isNullOrUndefined;
    function isNumber(arg) {
      return typeof arg === "number";
    }
    exports2.isNumber = isNumber;
    function isString(arg) {
      return typeof arg === "string";
    }
    exports2.isString = isString;
    function isSymbol(arg) {
      return typeof arg === "symbol";
    }
    exports2.isSymbol = isSymbol;
    function isUndefined(arg) {
      return arg === void 0;
    }
    exports2.isUndefined = isUndefined;
    function isRegExp(re) {
      return isObject2(re) && objectToString(re) === "[object RegExp]";
    }
    exports2.isRegExp = isRegExp;
    exports2.types.isRegExp = isRegExp;
    function isObject2(arg) {
      return typeof arg === "object" && arg !== null;
    }
    exports2.isObject = isObject2;
    function isDate(d) {
      return isObject2(d) && objectToString(d) === "[object Date]";
    }
    exports2.isDate = isDate;
    exports2.types.isDate = isDate;
    function isError(e) {
      return isObject2(e) && (objectToString(e) === "[object Error]" || e instanceof Error);
    }
    exports2.isError = isError;
    exports2.types.isNativeError = isError;
    function isFunction(arg) {
      return typeof arg === "function";
    }
    exports2.isFunction = isFunction;
    function isPrimitive(arg) {
      return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || // ES6 symbol
      typeof arg === "undefined";
    }
    exports2.isPrimitive = isPrimitive;
    exports2.isBuffer = require_isBufferBrowser();
    function objectToString(o) {
      return Object.prototype.toString.call(o);
    }
    function pad(n) {
      return n < 10 ? "0" + n.toString(10) : n.toString(10);
    }
    var months = [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec"
    ];
    function timestamp() {
      var d = /* @__PURE__ */ new Date();
      var time = [
        pad(d.getHours()),
        pad(d.getMinutes()),
        pad(d.getSeconds())
      ].join(":");
      return [d.getDate(), months[d.getMonth()], time].join(" ");
    }
    exports2.log = function() {
      console.log("%s - %s", timestamp(), exports2.format.apply(exports2, arguments));
    };
    exports2.inherits = require_inherits_browser();
    exports2._extend = function(origin, add) {
      if (!add || !isObject2(add)) return origin;
      var keys = Object.keys(add);
      var i = keys.length;
      while (i--) {
        origin[keys[i]] = add[keys[i]];
      }
      return origin;
    };
    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
    var kCustomPromisifiedSymbol = typeof Symbol !== "undefined" ? Symbol("util.promisify.custom") : void 0;
    exports2.promisify = function promisify(original) {
      if (typeof original !== "function")
        throw new TypeError('The "original" argument must be of type Function');
      if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
        var fn = original[kCustomPromisifiedSymbol];
        if (typeof fn !== "function") {
          throw new TypeError('The "util.promisify.custom" argument must be of type Function');
        }
        Object.defineProperty(fn, kCustomPromisifiedSymbol, {
          value: fn,
          enumerable: false,
          writable: false,
          configurable: true
        });
        return fn;
      }
      function fn() {
        var promiseResolve, promiseReject;
        var promise = new Promise(function(resolve, reject) {
          promiseResolve = resolve;
          promiseReject = reject;
        });
        var args = [];
        for (var i = 0; i < arguments.length; i++) {
          args.push(arguments[i]);
        }
        args.push(function(err, value) {
          if (err) {
            promiseReject(err);
          } else {
            promiseResolve(value);
          }
        });
        try {
          original.apply(this, args);
        } catch (err) {
          promiseReject(err);
        }
        return promise;
      }
      Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
      if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
        value: fn,
        enumerable: false,
        writable: false,
        configurable: true
      });
      return Object.defineProperties(
        fn,
        getOwnPropertyDescriptors(original)
      );
    };
    exports2.promisify.custom = kCustomPromisifiedSymbol;
    function callbackifyOnRejected(reason, cb) {
      if (!reason) {
        var newReason = new Error("Promise was rejected with a falsy value");
        newReason.reason = reason;
        reason = newReason;
      }
      return cb(reason);
    }
    function callbackify(original) {
      if (typeof original !== "function") {
        throw new TypeError('The "original" argument must be of type Function');
      }
      function callbackified() {
        var args = [];
        for (var i = 0; i < arguments.length; i++) {
          args.push(arguments[i]);
        }
        var maybeCb = args.pop();
        if (typeof maybeCb !== "function") {
          throw new TypeError("The last argument must be of type Function");
        }
        var self2 = this;
        var cb = function() {
          return maybeCb.apply(self2, arguments);
        };
        original.apply(this, args).then(
          function(ret) {
            process.nextTick(cb.bind(null, null, ret));
          },
          function(rej) {
            process.nextTick(callbackifyOnRejected.bind(null, rej, cb));
          }
        );
      }
      Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
      Object.defineProperties(
        callbackified,
        getOwnPropertyDescriptors(original)
      );
      return callbackified;
    }
    exports2.callbackify = callbackify;
  }
});

// ../node_modules/assert/build/internal/errors.js
var require_errors3 = __commonJS({
  "../node_modules/assert/build/internal/errors.js"(exports2, module2) {
    "use strict";
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null) return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    function _classCallCheck(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      Object.defineProperty(subClass, "prototype", { writable: false });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self2, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized(self2);
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    var codes = {};
    var assert3;
    var util;
    function createErrorType(code, message, Base) {
      if (!Base) {
        Base = Error;
      }
      function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") {
          return message;
        } else {
          return message(arg1, arg2, arg3);
        }
      }
      var NodeError = function(_Base) {
        _inherits(NodeError2, _Base);
        var _super = _createSuper(NodeError2);
        function NodeError2(arg1, arg2, arg3) {
          var _this;
          _classCallCheck(this, NodeError2);
          _this = _super.call(this, getMessage(arg1, arg2, arg3));
          _this.code = code;
          return _this;
        }
        return _createClass(NodeError2);
      }(Base);
      codes[code] = NodeError;
    }
    function oneOf(expected, thing) {
      if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
          return String(i);
        });
        if (len > 2) {
          return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
        } else if (len === 2) {
          return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        } else {
          return "of ".concat(thing, " ").concat(expected[0]);
        }
      } else {
        return "of ".concat(thing, " ").concat(String(expected));
      }
    }
    function startsWith(str, search, pos) {
      return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
    }
    function endsWith(str, search, this_len) {
      if (this_len === void 0 || this_len > str.length) {
        this_len = str.length;
      }
      return str.substring(this_len - search.length, this_len) === search;
    }
    function includes(str, search, start) {
      if (typeof start !== "number") {
        start = 0;
      }
      if (start + search.length > str.length) {
        return false;
      } else {
        return str.indexOf(search, start) !== -1;
      }
    }
    createErrorType("ERR_AMBIGUOUS_ARGUMENT", 'The "%s" argument is ambiguous. %s', TypeError);
    createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
      if (assert3 === void 0) assert3 = require_assert();
      assert3(typeof name === "string", "'name' must be a string");
      var determiner;
      if (typeof expected === "string" && startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
      } else {
        determiner = "must be";
      }
      var msg;
      if (endsWith(name, " argument")) {
        msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
      } else {
        var type2 = includes(name, ".") ? "property" : "argument";
        msg = 'The "'.concat(name, '" ').concat(type2, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
      }
      msg += ". Received type ".concat(_typeof(actual));
      return msg;
    }, TypeError);
    createErrorType("ERR_INVALID_ARG_VALUE", function(name, value) {
      var reason = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "is invalid";
      if (util === void 0) util = require_util();
      var inspected = util.inspect(value);
      if (inspected.length > 128) {
        inspected = "".concat(inspected.slice(0, 128), "...");
      }
      return "The argument '".concat(name, "' ").concat(reason, ". Received ").concat(inspected);
    }, TypeError, RangeError);
    createErrorType("ERR_INVALID_RETURN_VALUE", function(input, name, value) {
      var type2;
      if (value && value.constructor && value.constructor.name) {
        type2 = "instance of ".concat(value.constructor.name);
      } else {
        type2 = "type ".concat(_typeof(value));
      }
      return "Expected ".concat(input, ' to be returned from the "').concat(name, '"') + " function but got ".concat(type2, ".");
    }, TypeError);
    createErrorType("ERR_MISSING_ARGS", function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      if (assert3 === void 0) assert3 = require_assert();
      assert3(args.length > 0, "At least one arg needs to be specified");
      var msg = "The ";
      var len = args.length;
      args = args.map(function(a) {
        return '"'.concat(a, '"');
      });
      switch (len) {
        case 1:
          msg += "".concat(args[0], " argument");
          break;
        case 2:
          msg += "".concat(args[0], " and ").concat(args[1], " arguments");
          break;
        default:
          msg += args.slice(0, len - 1).join(", ");
          msg += ", and ".concat(args[len - 1], " arguments");
          break;
      }
      return "".concat(msg, " must be specified");
    }, TypeError);
    module2.exports.codes = codes;
  }
});

// ../node_modules/assert/build/internal/assert/assertion_error.js
var require_assertion_error = __commonJS({
  "../node_modules/assert/build/internal/assert/assertion_error.js"(exports2, module2) {
    "use strict";
    function ownKeys(e, r) {
      var t = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e);
        r && (o = o.filter(function(r2) {
          return Object.getOwnPropertyDescriptor(e, r2).enumerable;
        })), t.push.apply(t, o);
      }
      return t;
    }
    function _objectSpread(e) {
      for (var r = 1; r < arguments.length; r++) {
        var t = null != arguments[r] ? arguments[r] : {};
        r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
          _defineProperty(e, r2, t[r2]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
          Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
        });
      }
      return e;
    }
    function _defineProperty(obj, key, value) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _classCallCheck(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null) return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      Object.defineProperty(subClass, "prototype", { writable: false });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self2, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized(self2);
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _wrapNativeSuper(Class) {
      var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
      _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
        if (Class2 === null || !_isNativeFunction(Class2)) return Class2;
        if (typeof Class2 !== "function") {
          throw new TypeError("Super expression must either be null or a function");
        }
        if (typeof _cache !== "undefined") {
          if (_cache.has(Class2)) return _cache.get(Class2);
          _cache.set(Class2, Wrapper);
        }
        function Wrapper() {
          return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
        }
        Wrapper.prototype = Object.create(Class2.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } });
        return _setPrototypeOf(Wrapper, Class2);
      };
      return _wrapNativeSuper(Class);
    }
    function _construct(Parent, args, Class) {
      if (_isNativeReflectConstruct()) {
        _construct = Reflect.construct.bind();
      } else {
        _construct = function _construct2(Parent2, args2, Class2) {
          var a = [null];
          a.push.apply(a, args2);
          var Constructor = Function.bind.apply(Parent2, a);
          var instance2 = new Constructor();
          if (Class2) _setPrototypeOf(instance2, Class2.prototype);
          return instance2;
        };
      }
      return _construct.apply(null, arguments);
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _isNativeFunction(fn) {
      return Function.toString.call(fn).indexOf("[native code]") !== -1;
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    var _require = require_util();
    var inspect = _require.inspect;
    var _require2 = require_errors3();
    var ERR_INVALID_ARG_TYPE = _require2.codes.ERR_INVALID_ARG_TYPE;
    function endsWith(str, search, this_len) {
      if (this_len === void 0 || this_len > str.length) {
        this_len = str.length;
      }
      return str.substring(this_len - search.length, this_len) === search;
    }
    function repeat(str, count) {
      count = Math.floor(count);
      if (str.length == 0 || count == 0) return "";
      var maxCount = str.length * count;
      count = Math.floor(Math.log(count) / Math.log(2));
      while (count) {
        str += str;
        count--;
      }
      str += str.substring(0, maxCount - str.length);
      return str;
    }
    var blue = "";
    var green = "";
    var red = "";
    var white = "";
    var kReadableOperator = {
      deepStrictEqual: "Expected values to be strictly deep-equal:",
      strictEqual: "Expected values to be strictly equal:",
      strictEqualObject: 'Expected "actual" to be reference-equal to "expected":',
      deepEqual: "Expected values to be loosely deep-equal:",
      equal: "Expected values to be loosely equal:",
      notDeepStrictEqual: 'Expected "actual" not to be strictly deep-equal to:',
      notStrictEqual: 'Expected "actual" to be strictly unequal to:',
      notStrictEqualObject: 'Expected "actual" not to be reference-equal to "expected":',
      notDeepEqual: 'Expected "actual" not to be loosely deep-equal to:',
      notEqual: 'Expected "actual" to be loosely unequal to:',
      notIdentical: "Values identical but not reference-equal:"
    };
    var kMaxShortLength = 10;
    function copyError(source) {
      var keys = Object.keys(source);
      var target = Object.create(Object.getPrototypeOf(source));
      keys.forEach(function(key) {
        target[key] = source[key];
      });
      Object.defineProperty(target, "message", {
        value: source.message
      });
      return target;
    }
    function inspectValue(val) {
      return inspect(val, {
        compact: false,
        customInspect: false,
        depth: 1e3,
        maxArrayLength: Infinity,
        // Assert compares only enumerable properties (with a few exceptions).
        showHidden: false,
        // Having a long line as error is better than wrapping the line for
        // comparison for now.
        // TODO(BridgeAR): `breakLength` should be limited as soon as soon as we
        // have meta information about the inspected properties (i.e., know where
        // in what line the property starts and ends).
        breakLength: Infinity,
        // Assert does not detect proxies currently.
        showProxy: false,
        sorted: true,
        // Inspect getters as we also check them when comparing entries.
        getters: true
      });
    }
    function createErrDiff(actual, expected, operator) {
      var other = "";
      var res = "";
      var lastPos = 0;
      var end = "";
      var skipped = false;
      var actualInspected = inspectValue(actual);
      var actualLines = actualInspected.split("\n");
      var expectedLines = inspectValue(expected).split("\n");
      var i = 0;
      var indicator = "";
      if (operator === "strictEqual" && _typeof(actual) === "object" && _typeof(expected) === "object" && actual !== null && expected !== null) {
        operator = "strictEqualObject";
      }
      if (actualLines.length === 1 && expectedLines.length === 1 && actualLines[0] !== expectedLines[0]) {
        var inputLength = actualLines[0].length + expectedLines[0].length;
        if (inputLength <= kMaxShortLength) {
          if ((_typeof(actual) !== "object" || actual === null) && (_typeof(expected) !== "object" || expected === null) && (actual !== 0 || expected !== 0)) {
            return "".concat(kReadableOperator[operator], "\n\n") + "".concat(actualLines[0], " !== ").concat(expectedLines[0], "\n");
          }
        } else if (operator !== "strictEqualObject") {
          var maxLength = process.stderr && process.stderr.isTTY ? process.stderr.columns : 80;
          if (inputLength < maxLength) {
            while (actualLines[0][i] === expectedLines[0][i]) {
              i++;
            }
            if (i > 2) {
              indicator = "\n  ".concat(repeat(" ", i), "^");
              i = 0;
            }
          }
        }
      }
      var a = actualLines[actualLines.length - 1];
      var b = expectedLines[expectedLines.length - 1];
      while (a === b) {
        if (i++ < 2) {
          end = "\n  ".concat(a).concat(end);
        } else {
          other = a;
        }
        actualLines.pop();
        expectedLines.pop();
        if (actualLines.length === 0 || expectedLines.length === 0) break;
        a = actualLines[actualLines.length - 1];
        b = expectedLines[expectedLines.length - 1];
      }
      var maxLines = Math.max(actualLines.length, expectedLines.length);
      if (maxLines === 0) {
        var _actualLines = actualInspected.split("\n");
        if (_actualLines.length > 30) {
          _actualLines[26] = "".concat(blue, "...").concat(white);
          while (_actualLines.length > 27) {
            _actualLines.pop();
          }
        }
        return "".concat(kReadableOperator.notIdentical, "\n\n").concat(_actualLines.join("\n"), "\n");
      }
      if (i > 3) {
        end = "\n".concat(blue, "...").concat(white).concat(end);
        skipped = true;
      }
      if (other !== "") {
        end = "\n  ".concat(other).concat(end);
        other = "";
      }
      var printedLines = 0;
      var msg = kReadableOperator[operator] + "\n".concat(green, "+ actual").concat(white, " ").concat(red, "- expected").concat(white);
      var skippedMsg = " ".concat(blue, "...").concat(white, " Lines skipped");
      for (i = 0; i < maxLines; i++) {
        var cur = i - lastPos;
        if (actualLines.length < i + 1) {
          if (cur > 1 && i > 2) {
            if (cur > 4) {
              res += "\n".concat(blue, "...").concat(white);
              skipped = true;
            } else if (cur > 3) {
              res += "\n  ".concat(expectedLines[i - 2]);
              printedLines++;
            }
            res += "\n  ".concat(expectedLines[i - 1]);
            printedLines++;
          }
          lastPos = i;
          other += "\n".concat(red, "-").concat(white, " ").concat(expectedLines[i]);
          printedLines++;
        } else if (expectedLines.length < i + 1) {
          if (cur > 1 && i > 2) {
            if (cur > 4) {
              res += "\n".concat(blue, "...").concat(white);
              skipped = true;
            } else if (cur > 3) {
              res += "\n  ".concat(actualLines[i - 2]);
              printedLines++;
            }
            res += "\n  ".concat(actualLines[i - 1]);
            printedLines++;
          }
          lastPos = i;
          res += "\n".concat(green, "+").concat(white, " ").concat(actualLines[i]);
          printedLines++;
        } else {
          var expectedLine = expectedLines[i];
          var actualLine = actualLines[i];
          var divergingLines = actualLine !== expectedLine && (!endsWith(actualLine, ",") || actualLine.slice(0, -1) !== expectedLine);
          if (divergingLines && endsWith(expectedLine, ",") && expectedLine.slice(0, -1) === actualLine) {
            divergingLines = false;
            actualLine += ",";
          }
          if (divergingLines) {
            if (cur > 1 && i > 2) {
              if (cur > 4) {
                res += "\n".concat(blue, "...").concat(white);
                skipped = true;
              } else if (cur > 3) {
                res += "\n  ".concat(actualLines[i - 2]);
                printedLines++;
              }
              res += "\n  ".concat(actualLines[i - 1]);
              printedLines++;
            }
            lastPos = i;
            res += "\n".concat(green, "+").concat(white, " ").concat(actualLine);
            other += "\n".concat(red, "-").concat(white, " ").concat(expectedLine);
            printedLines += 2;
          } else {
            res += other;
            other = "";
            if (cur === 1 || i === 0) {
              res += "\n  ".concat(actualLine);
              printedLines++;
            }
          }
        }
        if (printedLines > 20 && i < maxLines - 2) {
          return "".concat(msg).concat(skippedMsg, "\n").concat(res, "\n").concat(blue, "...").concat(white).concat(other, "\n") + "".concat(blue, "...").concat(white);
        }
      }
      return "".concat(msg).concat(skipped ? skippedMsg : "", "\n").concat(res).concat(other).concat(end).concat(indicator);
    }
    var AssertionError = function(_Error, _inspect$custom) {
      _inherits(AssertionError2, _Error);
      var _super = _createSuper(AssertionError2);
      function AssertionError2(options) {
        var _this;
        _classCallCheck(this, AssertionError2);
        if (_typeof(options) !== "object" || options === null) {
          throw new ERR_INVALID_ARG_TYPE("options", "Object", options);
        }
        var message = options.message, operator = options.operator, stackStartFn = options.stackStartFn;
        var actual = options.actual, expected = options.expected;
        var limit = Error.stackTraceLimit;
        Error.stackTraceLimit = 0;
        if (message != null) {
          _this = _super.call(this, String(message));
        } else {
          if (process.stderr && process.stderr.isTTY) {
            if (process.stderr && process.stderr.getColorDepth && process.stderr.getColorDepth() !== 1) {
              blue = "\x1B[34m";
              green = "\x1B[32m";
              white = "\x1B[39m";
              red = "\x1B[31m";
            } else {
              blue = "";
              green = "";
              white = "";
              red = "";
            }
          }
          if (_typeof(actual) === "object" && actual !== null && _typeof(expected) === "object" && expected !== null && "stack" in actual && actual instanceof Error && "stack" in expected && expected instanceof Error) {
            actual = copyError(actual);
            expected = copyError(expected);
          }
          if (operator === "deepStrictEqual" || operator === "strictEqual") {
            _this = _super.call(this, createErrDiff(actual, expected, operator));
          } else if (operator === "notDeepStrictEqual" || operator === "notStrictEqual") {
            var base = kReadableOperator[operator];
            var res = inspectValue(actual).split("\n");
            if (operator === "notStrictEqual" && _typeof(actual) === "object" && actual !== null) {
              base = kReadableOperator.notStrictEqualObject;
            }
            if (res.length > 30) {
              res[26] = "".concat(blue, "...").concat(white);
              while (res.length > 27) {
                res.pop();
              }
            }
            if (res.length === 1) {
              _this = _super.call(this, "".concat(base, " ").concat(res[0]));
            } else {
              _this = _super.call(this, "".concat(base, "\n\n").concat(res.join("\n"), "\n"));
            }
          } else {
            var _res = inspectValue(actual);
            var other = "";
            var knownOperators = kReadableOperator[operator];
            if (operator === "notDeepEqual" || operator === "notEqual") {
              _res = "".concat(kReadableOperator[operator], "\n\n").concat(_res);
              if (_res.length > 1024) {
                _res = "".concat(_res.slice(0, 1021), "...");
              }
            } else {
              other = "".concat(inspectValue(expected));
              if (_res.length > 512) {
                _res = "".concat(_res.slice(0, 509), "...");
              }
              if (other.length > 512) {
                other = "".concat(other.slice(0, 509), "...");
              }
              if (operator === "deepEqual" || operator === "equal") {
                _res = "".concat(knownOperators, "\n\n").concat(_res, "\n\nshould equal\n\n");
              } else {
                other = " ".concat(operator, " ").concat(other);
              }
            }
            _this = _super.call(this, "".concat(_res).concat(other));
          }
        }
        Error.stackTraceLimit = limit;
        _this.generatedMessage = !message;
        Object.defineProperty(_assertThisInitialized(_this), "name", {
          value: "AssertionError [ERR_ASSERTION]",
          enumerable: false,
          writable: true,
          configurable: true
        });
        _this.code = "ERR_ASSERTION";
        _this.actual = actual;
        _this.expected = expected;
        _this.operator = operator;
        if (Error.captureStackTrace) {
          Error.captureStackTrace(_assertThisInitialized(_this), stackStartFn);
        }
        _this.stack;
        _this.name = "AssertionError";
        return _possibleConstructorReturn(_this);
      }
      _createClass(AssertionError2, [{
        key: "toString",
        value: function toString() {
          return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
        }
      }, {
        key: _inspect$custom,
        value: function value(recurseTimes, ctx) {
          return inspect(this, _objectSpread(_objectSpread({}, ctx), {}, {
            customInspect: false,
            depth: 0
          }));
        }
      }]);
      return AssertionError2;
    }(_wrapNativeSuper(Error), inspect.custom);
    module2.exports = AssertionError;
  }
});

// ../node_modules/object-keys/isArguments.js
var require_isArguments = __commonJS({
  "../node_modules/object-keys/isArguments.js"(exports2, module2) {
    "use strict";
    var toStr = Object.prototype.toString;
    module2.exports = function isArguments(value) {
      var str = toStr.call(value);
      var isArgs = str === "[object Arguments]";
      if (!isArgs) {
        isArgs = str !== "[object Array]" && value !== null && typeof value === "object" && typeof value.length === "number" && value.length >= 0 && toStr.call(value.callee) === "[object Function]";
      }
      return isArgs;
    };
  }
});

// ../node_modules/object-keys/implementation.js
var require_implementation2 = __commonJS({
  "../node_modules/object-keys/implementation.js"(exports2, module2) {
    "use strict";
    var keysShim;
    if (!Object.keys) {
      has = Object.prototype.hasOwnProperty;
      toStr = Object.prototype.toString;
      isArgs = require_isArguments();
      isEnumerable = Object.prototype.propertyIsEnumerable;
      hasDontEnumBug = !isEnumerable.call({ toString: null }, "toString");
      hasProtoEnumBug = isEnumerable.call(function() {
      }, "prototype");
      dontEnums = [
        "toString",
        "toLocaleString",
        "valueOf",
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "constructor"
      ];
      equalsConstructorPrototype = function(o) {
        var ctor = o.constructor;
        return ctor && ctor.prototype === o;
      };
      excludedKeys = {
        $applicationCache: true,
        $console: true,
        $external: true,
        $frame: true,
        $frameElement: true,
        $frames: true,
        $innerHeight: true,
        $innerWidth: true,
        $onmozfullscreenchange: true,
        $onmozfullscreenerror: true,
        $outerHeight: true,
        $outerWidth: true,
        $pageXOffset: true,
        $pageYOffset: true,
        $parent: true,
        $scrollLeft: true,
        $scrollTop: true,
        $scrollX: true,
        $scrollY: true,
        $self: true,
        $webkitIndexedDB: true,
        $webkitStorageInfo: true,
        $window: true
      };
      hasAutomationEqualityBug = function() {
        if (typeof window === "undefined") {
          return false;
        }
        for (var k in window) {
          try {
            if (!excludedKeys["$" + k] && has.call(window, k) && window[k] !== null && typeof window[k] === "object") {
              try {
                equalsConstructorPrototype(window[k]);
              } catch (e) {
                return true;
              }
            }
          } catch (e) {
            return true;
          }
        }
        return false;
      }();
      equalsConstructorPrototypeIfNotBuggy = function(o) {
        if (typeof window === "undefined" || !hasAutomationEqualityBug) {
          return equalsConstructorPrototype(o);
        }
        try {
          return equalsConstructorPrototype(o);
        } catch (e) {
          return false;
        }
      };
      keysShim = function keys(object) {
        var isObject2 = object !== null && typeof object === "object";
        var isFunction = toStr.call(object) === "[object Function]";
        var isArguments = isArgs(object);
        var isString = isObject2 && toStr.call(object) === "[object String]";
        var theKeys = [];
        if (!isObject2 && !isFunction && !isArguments) {
          throw new TypeError("Object.keys called on a non-object");
        }
        var skipProto = hasProtoEnumBug && isFunction;
        if (isString && object.length > 0 && !has.call(object, 0)) {
          for (var i = 0; i < object.length; ++i) {
            theKeys.push(String(i));
          }
        }
        if (isArguments && object.length > 0) {
          for (var j = 0; j < object.length; ++j) {
            theKeys.push(String(j));
          }
        } else {
          for (var name in object) {
            if (!(skipProto && name === "prototype") && has.call(object, name)) {
              theKeys.push(String(name));
            }
          }
        }
        if (hasDontEnumBug) {
          var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);
          for (var k = 0; k < dontEnums.length; ++k) {
            if (!(skipConstructor && dontEnums[k] === "constructor") && has.call(object, dontEnums[k])) {
              theKeys.push(dontEnums[k]);
            }
          }
        }
        return theKeys;
      };
    }
    var has;
    var toStr;
    var isArgs;
    var isEnumerable;
    var hasDontEnumBug;
    var hasProtoEnumBug;
    var dontEnums;
    var equalsConstructorPrototype;
    var excludedKeys;
    var hasAutomationEqualityBug;
    var equalsConstructorPrototypeIfNotBuggy;
    module2.exports = keysShim;
  }
});

// ../node_modules/object-keys/index.js
var require_object_keys = __commonJS({
  "../node_modules/object-keys/index.js"(exports2, module2) {
    "use strict";
    var slice = Array.prototype.slice;
    var isArgs = require_isArguments();
    var origKeys = Object.keys;
    var keysShim = origKeys ? function keys(o) {
      return origKeys(o);
    } : require_implementation2();
    var originalKeys = Object.keys;
    keysShim.shim = function shimObjectKeys() {
      if (Object.keys) {
        var keysWorksWithArguments = function() {
          var args = Object.keys(arguments);
          return args && args.length === arguments.length;
        }(1, 2);
        if (!keysWorksWithArguments) {
          Object.keys = function keys(object) {
            if (isArgs(object)) {
              return originalKeys(slice.call(object));
            }
            return originalKeys(object);
          };
        }
      } else {
        Object.keys = keysShim;
      }
      return Object.keys || keysShim;
    };
    module2.exports = keysShim;
  }
});

// ../node_modules/object.assign/implementation.js
var require_implementation3 = __commonJS({
  "../node_modules/object.assign/implementation.js"(exports2, module2) {
    "use strict";
    var objectKeys = require_object_keys();
    var hasSymbols = require_shams()();
    var callBound = require_call_bound();
    var $Object = require_es_object_atoms();
    var $push = callBound("Array.prototype.push");
    var $propIsEnumerable = callBound("Object.prototype.propertyIsEnumerable");
    var originalGetSymbols = hasSymbols ? $Object.getOwnPropertySymbols : null;
    module2.exports = function assign(target, source1) {
      if (target == null) {
        throw new TypeError("target must be an object");
      }
      var to = $Object(target);
      if (arguments.length === 1) {
        return to;
      }
      for (var s = 1; s < arguments.length; ++s) {
        var from = $Object(arguments[s]);
        var keys = objectKeys(from);
        var getSymbols = hasSymbols && ($Object.getOwnPropertySymbols || originalGetSymbols);
        if (getSymbols) {
          var syms = getSymbols(from);
          for (var j = 0; j < syms.length; ++j) {
            var key = syms[j];
            if ($propIsEnumerable(from, key)) {
              $push(keys, key);
            }
          }
        }
        for (var i = 0; i < keys.length; ++i) {
          var nextKey = keys[i];
          if ($propIsEnumerable(from, nextKey)) {
            var propValue = from[nextKey];
            to[nextKey] = propValue;
          }
        }
      }
      return to;
    };
  }
});

// ../node_modules/object.assign/polyfill.js
var require_polyfill = __commonJS({
  "../node_modules/object.assign/polyfill.js"(exports2, module2) {
    "use strict";
    var implementation = require_implementation3();
    var lacksProperEnumerationOrder = function() {
      if (!Object.assign) {
        return false;
      }
      var str = "abcdefghijklmnopqrst";
      var letters = str.split("");
      var map = {};
      for (var i = 0; i < letters.length; ++i) {
        map[letters[i]] = letters[i];
      }
      var obj = Object.assign({}, map);
      var actual = "";
      for (var k in obj) {
        actual += k;
      }
      return str !== actual;
    };
    var assignHasPendingExceptions = function() {
      if (!Object.assign || !Object.preventExtensions) {
        return false;
      }
      var thrower = Object.preventExtensions({ 1: 2 });
      try {
        Object.assign(thrower, "xy");
      } catch (e) {
        return thrower[1] === "y";
      }
      return false;
    };
    module2.exports = function getPolyfill() {
      if (!Object.assign) {
        return implementation;
      }
      if (lacksProperEnumerationOrder()) {
        return implementation;
      }
      if (assignHasPendingExceptions()) {
        return implementation;
      }
      return Object.assign;
    };
  }
});

// ../node_modules/object-is/implementation.js
var require_implementation4 = __commonJS({
  "../node_modules/object-is/implementation.js"(exports2, module2) {
    "use strict";
    var numberIsNaN = function(value) {
      return value !== value;
    };
    module2.exports = function is2(a, b) {
      if (a === 0 && b === 0) {
        return 1 / a === 1 / b;
      }
      if (a === b) {
        return true;
      }
      if (numberIsNaN(a) && numberIsNaN(b)) {
        return true;
      }
      return false;
    };
  }
});

// ../node_modules/object-is/polyfill.js
var require_polyfill2 = __commonJS({
  "../node_modules/object-is/polyfill.js"(exports2, module2) {
    "use strict";
    var implementation = require_implementation4();
    module2.exports = function getPolyfill() {
      return typeof Object.is === "function" ? Object.is : implementation;
    };
  }
});

// ../node_modules/call-bind/callBound.js
var require_callBound = __commonJS({
  "../node_modules/call-bind/callBound.js"(exports2, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBind = require_call_bind();
    var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
    module2.exports = function callBoundIntrinsic(name, allowMissing) {
      var intrinsic = GetIntrinsic(name, !!allowMissing);
      if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) {
        return callBind(intrinsic);
      }
      return intrinsic;
    };
  }
});

// ../node_modules/define-properties/index.js
var require_define_properties = __commonJS({
  "../node_modules/define-properties/index.js"(exports2, module2) {
    "use strict";
    var keys = require_object_keys();
    var hasSymbols = typeof Symbol === "function" && typeof Symbol("foo") === "symbol";
    var toStr = Object.prototype.toString;
    var concat = Array.prototype.concat;
    var defineDataProperty = require_define_data_property();
    var isFunction = function(fn) {
      return typeof fn === "function" && toStr.call(fn) === "[object Function]";
    };
    var supportsDescriptors = require_has_property_descriptors()();
    var defineProperty = function(object, name, value, predicate) {
      if (name in object) {
        if (predicate === true) {
          if (object[name] === value) {
            return;
          }
        } else if (!isFunction(predicate) || !predicate()) {
          return;
        }
      }
      if (supportsDescriptors) {
        defineDataProperty(object, name, value, true);
      } else {
        defineDataProperty(object, name, value);
      }
    };
    var defineProperties = function(object, map) {
      var predicates = arguments.length > 2 ? arguments[2] : {};
      var props = keys(map);
      if (hasSymbols) {
        props = concat.call(props, Object.getOwnPropertySymbols(map));
      }
      for (var i = 0; i < props.length; i += 1) {
        defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
      }
    };
    defineProperties.supportsDescriptors = !!supportsDescriptors;
    module2.exports = defineProperties;
  }
});

// ../node_modules/object-is/shim.js
var require_shim = __commonJS({
  "../node_modules/object-is/shim.js"(exports2, module2) {
    "use strict";
    var getPolyfill = require_polyfill2();
    var define3 = require_define_properties();
    module2.exports = function shimObjectIs() {
      var polyfill = getPolyfill();
      define3(Object, { is: polyfill }, {
        is: function testObjectIs() {
          return Object.is !== polyfill;
        }
      });
      return polyfill;
    };
  }
});

// ../node_modules/object-is/index.js
var require_object_is = __commonJS({
  "../node_modules/object-is/index.js"(exports2, module2) {
    "use strict";
    var define3 = require_define_properties();
    var callBind = require_call_bind();
    var implementation = require_implementation4();
    var getPolyfill = require_polyfill2();
    var shim = require_shim();
    var polyfill = callBind(getPolyfill(), Object);
    define3(polyfill, {
      getPolyfill,
      implementation,
      shim
    });
    module2.exports = polyfill;
  }
});

// ../node_modules/is-nan/implementation.js
var require_implementation5 = __commonJS({
  "../node_modules/is-nan/implementation.js"(exports2, module2) {
    "use strict";
    module2.exports = function isNaN2(value) {
      return value !== value;
    };
  }
});

// ../node_modules/is-nan/polyfill.js
var require_polyfill3 = __commonJS({
  "../node_modules/is-nan/polyfill.js"(exports2, module2) {
    "use strict";
    var implementation = require_implementation5();
    module2.exports = function getPolyfill() {
      if (Number.isNaN && Number.isNaN(NaN) && !Number.isNaN("a")) {
        return Number.isNaN;
      }
      return implementation;
    };
  }
});

// ../node_modules/is-nan/shim.js
var require_shim2 = __commonJS({
  "../node_modules/is-nan/shim.js"(exports2, module2) {
    "use strict";
    var define3 = require_define_properties();
    var getPolyfill = require_polyfill3();
    module2.exports = function shimNumberIsNaN() {
      var polyfill = getPolyfill();
      define3(Number, { isNaN: polyfill }, {
        isNaN: function testIsNaN() {
          return Number.isNaN !== polyfill;
        }
      });
      return polyfill;
    };
  }
});

// ../node_modules/is-nan/index.js
var require_is_nan = __commonJS({
  "../node_modules/is-nan/index.js"(exports2, module2) {
    "use strict";
    var callBind = require_call_bind();
    var define3 = require_define_properties();
    var implementation = require_implementation5();
    var getPolyfill = require_polyfill3();
    var shim = require_shim2();
    var polyfill = callBind(getPolyfill(), Number);
    define3(polyfill, {
      getPolyfill,
      implementation,
      shim
    });
    module2.exports = polyfill;
  }
});

// ../node_modules/assert/build/internal/util/comparisons.js
var require_comparisons = __commonJS({
  "../node_modules/assert/build/internal/util/comparisons.js"(exports2, module2) {
    "use strict";
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    function _iterableToArrayLimit(r, l) {
      var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
      if (null != t) {
        var e, n, i, u, a = [], f2 = true, o = false;
        try {
          if (i = (t = t.call(r)).next, 0 === l) {
            if (Object(t) !== t) return;
            f2 = false;
          } else for (; !(f2 = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f2 = true) ;
        } catch (r2) {
          o = true, n = r2;
        } finally {
          try {
            if (!f2 && null != t.return && (u = t.return(), Object(u) !== u)) return;
          } finally {
            if (o) throw n;
          }
        }
        return a;
      }
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    var regexFlagsSupported = /a/g.flags !== void 0;
    var arrayFromSet = function arrayFromSet2(set) {
      var array2 = [];
      set.forEach(function(value) {
        return array2.push(value);
      });
      return array2;
    };
    var arrayFromMap = function arrayFromMap2(map) {
      var array2 = [];
      map.forEach(function(value, key) {
        return array2.push([key, value]);
      });
      return array2;
    };
    var objectIs = Object.is ? Object.is : require_object_is();
    var objectGetOwnPropertySymbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols : function() {
      return [];
    };
    var numberIsNaN = Number.isNaN ? Number.isNaN : require_is_nan();
    function uncurryThis(f2) {
      return f2.call.bind(f2);
    }
    var hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);
    var propertyIsEnumerable = uncurryThis(Object.prototype.propertyIsEnumerable);
    var objectToString = uncurryThis(Object.prototype.toString);
    var _require$types = require_util().types;
    var isAnyArrayBuffer = _require$types.isAnyArrayBuffer;
    var isArrayBufferView = _require$types.isArrayBufferView;
    var isDate = _require$types.isDate;
    var isMap = _require$types.isMap;
    var isRegExp = _require$types.isRegExp;
    var isSet = _require$types.isSet;
    var isNativeError = _require$types.isNativeError;
    var isBoxedPrimitive = _require$types.isBoxedPrimitive;
    var isNumberObject = _require$types.isNumberObject;
    var isStringObject = _require$types.isStringObject;
    var isBooleanObject = _require$types.isBooleanObject;
    var isBigIntObject = _require$types.isBigIntObject;
    var isSymbolObject = _require$types.isSymbolObject;
    var isFloat32Array = _require$types.isFloat32Array;
    var isFloat64Array = _require$types.isFloat64Array;
    function isNonIndex(key) {
      if (key.length === 0 || key.length > 10) return true;
      for (var i = 0; i < key.length; i++) {
        var code = key.charCodeAt(i);
        if (code < 48 || code > 57) return true;
      }
      return key.length === 10 && key >= Math.pow(2, 32);
    }
    function getOwnNonIndexProperties(value) {
      return Object.keys(value).filter(isNonIndex).concat(objectGetOwnPropertySymbols(value).filter(Object.prototype.propertyIsEnumerable.bind(value)));
    }
    function compare(a, b) {
      if (a === b) {
        return 0;
      }
      var x = a.length;
      var y = b.length;
      for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break;
        }
      }
      if (x < y) {
        return -1;
      }
      if (y < x) {
        return 1;
      }
      return 0;
    }
    var ONLY_ENUMERABLE = void 0;
    var kStrict = true;
    var kLoose = false;
    var kNoIterator = 0;
    var kIsArray = 1;
    var kIsSet = 2;
    var kIsMap = 3;
    function areSimilarRegExps(a, b) {
      return regexFlagsSupported ? a.source === b.source && a.flags === b.flags : RegExp.prototype.toString.call(a) === RegExp.prototype.toString.call(b);
    }
    function areSimilarFloatArrays(a, b) {
      if (a.byteLength !== b.byteLength) {
        return false;
      }
      for (var offset2 = 0; offset2 < a.byteLength; offset2++) {
        if (a[offset2] !== b[offset2]) {
          return false;
        }
      }
      return true;
    }
    function areSimilarTypedArrays(a, b) {
      if (a.byteLength !== b.byteLength) {
        return false;
      }
      return compare(new Uint8Array(a.buffer, a.byteOffset, a.byteLength), new Uint8Array(b.buffer, b.byteOffset, b.byteLength)) === 0;
    }
    function areEqualArrayBuffers(buf1, buf2) {
      return buf1.byteLength === buf2.byteLength && compare(new Uint8Array(buf1), new Uint8Array(buf2)) === 0;
    }
    function isEqualBoxedPrimitive(val1, val2) {
      if (isNumberObject(val1)) {
        return isNumberObject(val2) && objectIs(Number.prototype.valueOf.call(val1), Number.prototype.valueOf.call(val2));
      }
      if (isStringObject(val1)) {
        return isStringObject(val2) && String.prototype.valueOf.call(val1) === String.prototype.valueOf.call(val2);
      }
      if (isBooleanObject(val1)) {
        return isBooleanObject(val2) && Boolean.prototype.valueOf.call(val1) === Boolean.prototype.valueOf.call(val2);
      }
      if (isBigIntObject(val1)) {
        return isBigIntObject(val2) && BigInt.prototype.valueOf.call(val1) === BigInt.prototype.valueOf.call(val2);
      }
      return isSymbolObject(val2) && Symbol.prototype.valueOf.call(val1) === Symbol.prototype.valueOf.call(val2);
    }
    function innerDeepEqual(val1, val2, strict, memos) {
      if (val1 === val2) {
        if (val1 !== 0) return true;
        return strict ? objectIs(val1, val2) : true;
      }
      if (strict) {
        if (_typeof(val1) !== "object") {
          return typeof val1 === "number" && numberIsNaN(val1) && numberIsNaN(val2);
        }
        if (_typeof(val2) !== "object" || val1 === null || val2 === null) {
          return false;
        }
        if (Object.getPrototypeOf(val1) !== Object.getPrototypeOf(val2)) {
          return false;
        }
      } else {
        if (val1 === null || _typeof(val1) !== "object") {
          if (val2 === null || _typeof(val2) !== "object") {
            return val1 == val2;
          }
          return false;
        }
        if (val2 === null || _typeof(val2) !== "object") {
          return false;
        }
      }
      var val1Tag = objectToString(val1);
      var val2Tag = objectToString(val2);
      if (val1Tag !== val2Tag) {
        return false;
      }
      if (Array.isArray(val1)) {
        if (val1.length !== val2.length) {
          return false;
        }
        var keys1 = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);
        var keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);
        if (keys1.length !== keys2.length) {
          return false;
        }
        return keyCheck(val1, val2, strict, memos, kIsArray, keys1);
      }
      if (val1Tag === "[object Object]") {
        if (!isMap(val1) && isMap(val2) || !isSet(val1) && isSet(val2)) {
          return false;
        }
      }
      if (isDate(val1)) {
        if (!isDate(val2) || Date.prototype.getTime.call(val1) !== Date.prototype.getTime.call(val2)) {
          return false;
        }
      } else if (isRegExp(val1)) {
        if (!isRegExp(val2) || !areSimilarRegExps(val1, val2)) {
          return false;
        }
      } else if (isNativeError(val1) || val1 instanceof Error) {
        if (val1.message !== val2.message || val1.name !== val2.name) {
          return false;
        }
      } else if (isArrayBufferView(val1)) {
        if (!strict && (isFloat32Array(val1) || isFloat64Array(val1))) {
          if (!areSimilarFloatArrays(val1, val2)) {
            return false;
          }
        } else if (!areSimilarTypedArrays(val1, val2)) {
          return false;
        }
        var _keys = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);
        var _keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);
        if (_keys.length !== _keys2.length) {
          return false;
        }
        return keyCheck(val1, val2, strict, memos, kNoIterator, _keys);
      } else if (isSet(val1)) {
        if (!isSet(val2) || val1.size !== val2.size) {
          return false;
        }
        return keyCheck(val1, val2, strict, memos, kIsSet);
      } else if (isMap(val1)) {
        if (!isMap(val2) || val1.size !== val2.size) {
          return false;
        }
        return keyCheck(val1, val2, strict, memos, kIsMap);
      } else if (isAnyArrayBuffer(val1)) {
        if (!areEqualArrayBuffers(val1, val2)) {
          return false;
        }
      } else if (isBoxedPrimitive(val1) && !isEqualBoxedPrimitive(val1, val2)) {
        return false;
      }
      return keyCheck(val1, val2, strict, memos, kNoIterator);
    }
    function getEnumerables(val, keys) {
      return keys.filter(function(k) {
        return propertyIsEnumerable(val, k);
      });
    }
    function keyCheck(val1, val2, strict, memos, iterationType, aKeys) {
      if (arguments.length === 5) {
        aKeys = Object.keys(val1);
        var bKeys = Object.keys(val2);
        if (aKeys.length !== bKeys.length) {
          return false;
        }
      }
      var i = 0;
      for (; i < aKeys.length; i++) {
        if (!hasOwnProperty(val2, aKeys[i])) {
          return false;
        }
      }
      if (strict && arguments.length === 5) {
        var symbolKeysA = objectGetOwnPropertySymbols(val1);
        if (symbolKeysA.length !== 0) {
          var count = 0;
          for (i = 0; i < symbolKeysA.length; i++) {
            var key = symbolKeysA[i];
            if (propertyIsEnumerable(val1, key)) {
              if (!propertyIsEnumerable(val2, key)) {
                return false;
              }
              aKeys.push(key);
              count++;
            } else if (propertyIsEnumerable(val2, key)) {
              return false;
            }
          }
          var symbolKeysB = objectGetOwnPropertySymbols(val2);
          if (symbolKeysA.length !== symbolKeysB.length && getEnumerables(val2, symbolKeysB).length !== count) {
            return false;
          }
        } else {
          var _symbolKeysB = objectGetOwnPropertySymbols(val2);
          if (_symbolKeysB.length !== 0 && getEnumerables(val2, _symbolKeysB).length !== 0) {
            return false;
          }
        }
      }
      if (aKeys.length === 0 && (iterationType === kNoIterator || iterationType === kIsArray && val1.length === 0 || val1.size === 0)) {
        return true;
      }
      if (memos === void 0) {
        memos = {
          val1: /* @__PURE__ */ new Map(),
          val2: /* @__PURE__ */ new Map(),
          position: 0
        };
      } else {
        var val2MemoA = memos.val1.get(val1);
        if (val2MemoA !== void 0) {
          var val2MemoB = memos.val2.get(val2);
          if (val2MemoB !== void 0) {
            return val2MemoA === val2MemoB;
          }
        }
        memos.position++;
      }
      memos.val1.set(val1, memos.position);
      memos.val2.set(val2, memos.position);
      var areEq = objEquiv(val1, val2, strict, aKeys, memos, iterationType);
      memos.val1.delete(val1);
      memos.val2.delete(val2);
      return areEq;
    }
    function setHasEqualElement(set, val1, strict, memo) {
      var setValues = arrayFromSet(set);
      for (var i = 0; i < setValues.length; i++) {
        var val2 = setValues[i];
        if (innerDeepEqual(val1, val2, strict, memo)) {
          set.delete(val2);
          return true;
        }
      }
      return false;
    }
    function findLooseMatchingPrimitives(prim) {
      switch (_typeof(prim)) {
        case "undefined":
          return null;
        case "object":
          return void 0;
        case "symbol":
          return false;
        case "string":
          prim = +prim;
        // Loose equal entries exist only if the string is possible to convert to
        // a regular number and not NaN.
        // Fall through
        case "number":
          if (numberIsNaN(prim)) {
            return false;
          }
      }
      return true;
    }
    function setMightHaveLoosePrim(a, b, prim) {
      var altValue = findLooseMatchingPrimitives(prim);
      if (altValue != null) return altValue;
      return b.has(altValue) && !a.has(altValue);
    }
    function mapMightHaveLoosePrim(a, b, prim, item, memo) {
      var altValue = findLooseMatchingPrimitives(prim);
      if (altValue != null) {
        return altValue;
      }
      var curB = b.get(altValue);
      if (curB === void 0 && !b.has(altValue) || !innerDeepEqual(item, curB, false, memo)) {
        return false;
      }
      return !a.has(altValue) && innerDeepEqual(item, curB, false, memo);
    }
    function setEquiv(a, b, strict, memo) {
      var set = null;
      var aValues = arrayFromSet(a);
      for (var i = 0; i < aValues.length; i++) {
        var val = aValues[i];
        if (_typeof(val) === "object" && val !== null) {
          if (set === null) {
            set = /* @__PURE__ */ new Set();
          }
          set.add(val);
        } else if (!b.has(val)) {
          if (strict) return false;
          if (!setMightHaveLoosePrim(a, b, val)) {
            return false;
          }
          if (set === null) {
            set = /* @__PURE__ */ new Set();
          }
          set.add(val);
        }
      }
      if (set !== null) {
        var bValues = arrayFromSet(b);
        for (var _i = 0; _i < bValues.length; _i++) {
          var _val = bValues[_i];
          if (_typeof(_val) === "object" && _val !== null) {
            if (!setHasEqualElement(set, _val, strict, memo)) return false;
          } else if (!strict && !a.has(_val) && !setHasEqualElement(set, _val, strict, memo)) {
            return false;
          }
        }
        return set.size === 0;
      }
      return true;
    }
    function mapHasEqualEntry(set, map, key1, item1, strict, memo) {
      var setValues = arrayFromSet(set);
      for (var i = 0; i < setValues.length; i++) {
        var key2 = setValues[i];
        if (innerDeepEqual(key1, key2, strict, memo) && innerDeepEqual(item1, map.get(key2), strict, memo)) {
          set.delete(key2);
          return true;
        }
      }
      return false;
    }
    function mapEquiv(a, b, strict, memo) {
      var set = null;
      var aEntries = arrayFromMap(a);
      for (var i = 0; i < aEntries.length; i++) {
        var _aEntries$i = _slicedToArray(aEntries[i], 2), key = _aEntries$i[0], item1 = _aEntries$i[1];
        if (_typeof(key) === "object" && key !== null) {
          if (set === null) {
            set = /* @__PURE__ */ new Set();
          }
          set.add(key);
        } else {
          var item2 = b.get(key);
          if (item2 === void 0 && !b.has(key) || !innerDeepEqual(item1, item2, strict, memo)) {
            if (strict) return false;
            if (!mapMightHaveLoosePrim(a, b, key, item1, memo)) return false;
            if (set === null) {
              set = /* @__PURE__ */ new Set();
            }
            set.add(key);
          }
        }
      }
      if (set !== null) {
        var bEntries = arrayFromMap(b);
        for (var _i2 = 0; _i2 < bEntries.length; _i2++) {
          var _bEntries$_i = _slicedToArray(bEntries[_i2], 2), _key = _bEntries$_i[0], item = _bEntries$_i[1];
          if (_typeof(_key) === "object" && _key !== null) {
            if (!mapHasEqualEntry(set, a, _key, item, strict, memo)) return false;
          } else if (!strict && (!a.has(_key) || !innerDeepEqual(a.get(_key), item, false, memo)) && !mapHasEqualEntry(set, a, _key, item, false, memo)) {
            return false;
          }
        }
        return set.size === 0;
      }
      return true;
    }
    function objEquiv(a, b, strict, keys, memos, iterationType) {
      var i = 0;
      if (iterationType === kIsSet) {
        if (!setEquiv(a, b, strict, memos)) {
          return false;
        }
      } else if (iterationType === kIsMap) {
        if (!mapEquiv(a, b, strict, memos)) {
          return false;
        }
      } else if (iterationType === kIsArray) {
        for (; i < a.length; i++) {
          if (hasOwnProperty(a, i)) {
            if (!hasOwnProperty(b, i) || !innerDeepEqual(a[i], b[i], strict, memos)) {
              return false;
            }
          } else if (hasOwnProperty(b, i)) {
            return false;
          } else {
            var keysA = Object.keys(a);
            for (; i < keysA.length; i++) {
              var key = keysA[i];
              if (!hasOwnProperty(b, key) || !innerDeepEqual(a[key], b[key], strict, memos)) {
                return false;
              }
            }
            if (keysA.length !== Object.keys(b).length) {
              return false;
            }
            return true;
          }
        }
      }
      for (i = 0; i < keys.length; i++) {
        var _key2 = keys[i];
        if (!innerDeepEqual(a[_key2], b[_key2], strict, memos)) {
          return false;
        }
      }
      return true;
    }
    function isDeepEqual(val1, val2) {
      return innerDeepEqual(val1, val2, kLoose);
    }
    function isDeepStrictEqual(val1, val2) {
      return innerDeepEqual(val1, val2, kStrict);
    }
    module2.exports = {
      isDeepEqual,
      isDeepStrictEqual
    };
  }
});

// ../node_modules/assert/build/assert.js
var require_assert = __commonJS({
  "../node_modules/assert/build/assert.js"(exports2, module2) {
    "use strict";
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null) return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    function _classCallCheck(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    var _require = require_errors3();
    var _require$codes = _require.codes;
    var ERR_AMBIGUOUS_ARGUMENT = _require$codes.ERR_AMBIGUOUS_ARGUMENT;
    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
    var ERR_INVALID_ARG_VALUE = _require$codes.ERR_INVALID_ARG_VALUE;
    var ERR_INVALID_RETURN_VALUE = _require$codes.ERR_INVALID_RETURN_VALUE;
    var ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;
    var AssertionError = require_assertion_error();
    var _require2 = require_util();
    var inspect = _require2.inspect;
    var _require$types = require_util().types;
    var isPromise = _require$types.isPromise;
    var isRegExp = _require$types.isRegExp;
    var objectAssign = require_polyfill()();
    var objectIs = require_polyfill2()();
    var RegExpPrototypeTest = require_callBound()("RegExp.prototype.test");
    var isDeepEqual;
    var isDeepStrictEqual;
    function lazyLoadComparison() {
      var comparison = require_comparisons();
      isDeepEqual = comparison.isDeepEqual;
      isDeepStrictEqual = comparison.isDeepStrictEqual;
    }
    var warned = false;
    var assert3 = module2.exports = ok;
    var NO_EXCEPTION_SENTINEL = {};
    function innerFail(obj) {
      if (obj.message instanceof Error) throw obj.message;
      throw new AssertionError(obj);
    }
    function fail(actual, expected, message, operator, stackStartFn) {
      var argsLen = arguments.length;
      var internalMessage;
      if (argsLen === 0) {
        internalMessage = "Failed";
      } else if (argsLen === 1) {
        message = actual;
        actual = void 0;
      } else {
        if (warned === false) {
          warned = true;
          var warn = process.emitWarning ? process.emitWarning : console.warn.bind(console);
          warn("assert.fail() with more than one argument is deprecated. Please use assert.strictEqual() instead or only pass a message.", "DeprecationWarning", "DEP0094");
        }
        if (argsLen === 2) operator = "!=";
      }
      if (message instanceof Error) throw message;
      var errArgs = {
        actual,
        expected,
        operator: operator === void 0 ? "fail" : operator,
        stackStartFn: stackStartFn || fail
      };
      if (message !== void 0) {
        errArgs.message = message;
      }
      var err = new AssertionError(errArgs);
      if (internalMessage) {
        err.message = internalMessage;
        err.generatedMessage = true;
      }
      throw err;
    }
    assert3.fail = fail;
    assert3.AssertionError = AssertionError;
    function innerOk(fn, argLen, value, message) {
      if (!value) {
        var generatedMessage = false;
        if (argLen === 0) {
          generatedMessage = true;
          message = "No value argument passed to `assert.ok()`";
        } else if (message instanceof Error) {
          throw message;
        }
        var err = new AssertionError({
          actual: value,
          expected: true,
          message,
          operator: "==",
          stackStartFn: fn
        });
        err.generatedMessage = generatedMessage;
        throw err;
      }
    }
    function ok() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      innerOk.apply(void 0, [ok, args.length].concat(args));
    }
    assert3.ok = ok;
    assert3.equal = function equal(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (actual != expected) {
        innerFail({
          actual,
          expected,
          message,
          operator: "==",
          stackStartFn: equal
        });
      }
    };
    assert3.notEqual = function notEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (actual == expected) {
        innerFail({
          actual,
          expected,
          message,
          operator: "!=",
          stackStartFn: notEqual
        });
      }
    };
    assert3.deepEqual = function deepEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (isDeepEqual === void 0) lazyLoadComparison();
      if (!isDeepEqual(actual, expected)) {
        innerFail({
          actual,
          expected,
          message,
          operator: "deepEqual",
          stackStartFn: deepEqual
        });
      }
    };
    assert3.notDeepEqual = function notDeepEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (isDeepEqual === void 0) lazyLoadComparison();
      if (isDeepEqual(actual, expected)) {
        innerFail({
          actual,
          expected,
          message,
          operator: "notDeepEqual",
          stackStartFn: notDeepEqual
        });
      }
    };
    assert3.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (isDeepEqual === void 0) lazyLoadComparison();
      if (!isDeepStrictEqual(actual, expected)) {
        innerFail({
          actual,
          expected,
          message,
          operator: "deepStrictEqual",
          stackStartFn: deepStrictEqual
        });
      }
    };
    assert3.notDeepStrictEqual = notDeepStrictEqual;
    function notDeepStrictEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (isDeepEqual === void 0) lazyLoadComparison();
      if (isDeepStrictEqual(actual, expected)) {
        innerFail({
          actual,
          expected,
          message,
          operator: "notDeepStrictEqual",
          stackStartFn: notDeepStrictEqual
        });
      }
    }
    assert3.strictEqual = function strictEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (!objectIs(actual, expected)) {
        innerFail({
          actual,
          expected,
          message,
          operator: "strictEqual",
          stackStartFn: strictEqual
        });
      }
    };
    assert3.notStrictEqual = function notStrictEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (objectIs(actual, expected)) {
        innerFail({
          actual,
          expected,
          message,
          operator: "notStrictEqual",
          stackStartFn: notStrictEqual
        });
      }
    };
    var Comparison = _createClass(function Comparison2(obj, keys, actual) {
      var _this = this;
      _classCallCheck(this, Comparison2);
      keys.forEach(function(key) {
        if (key in obj) {
          if (actual !== void 0 && typeof actual[key] === "string" && isRegExp(obj[key]) && RegExpPrototypeTest(obj[key], actual[key])) {
            _this[key] = actual[key];
          } else {
            _this[key] = obj[key];
          }
        }
      });
    });
    function compareExceptionKey(actual, expected, key, message, keys, fn) {
      if (!(key in actual) || !isDeepStrictEqual(actual[key], expected[key])) {
        if (!message) {
          var a = new Comparison(actual, keys);
          var b = new Comparison(expected, keys, actual);
          var err = new AssertionError({
            actual: a,
            expected: b,
            operator: "deepStrictEqual",
            stackStartFn: fn
          });
          err.actual = actual;
          err.expected = expected;
          err.operator = fn.name;
          throw err;
        }
        innerFail({
          actual,
          expected,
          message,
          operator: fn.name,
          stackStartFn: fn
        });
      }
    }
    function expectedException(actual, expected, msg, fn) {
      if (typeof expected !== "function") {
        if (isRegExp(expected)) return RegExpPrototypeTest(expected, actual);
        if (arguments.length === 2) {
          throw new ERR_INVALID_ARG_TYPE("expected", ["Function", "RegExp"], expected);
        }
        if (_typeof(actual) !== "object" || actual === null) {
          var err = new AssertionError({
            actual,
            expected,
            message: msg,
            operator: "deepStrictEqual",
            stackStartFn: fn
          });
          err.operator = fn.name;
          throw err;
        }
        var keys = Object.keys(expected);
        if (expected instanceof Error) {
          keys.push("name", "message");
        } else if (keys.length === 0) {
          throw new ERR_INVALID_ARG_VALUE("error", expected, "may not be an empty object");
        }
        if (isDeepEqual === void 0) lazyLoadComparison();
        keys.forEach(function(key) {
          if (typeof actual[key] === "string" && isRegExp(expected[key]) && RegExpPrototypeTest(expected[key], actual[key])) {
            return;
          }
          compareExceptionKey(actual, expected, key, msg, keys, fn);
        });
        return true;
      }
      if (expected.prototype !== void 0 && actual instanceof expected) {
        return true;
      }
      if (Error.isPrototypeOf(expected)) {
        return false;
      }
      return expected.call({}, actual) === true;
    }
    function getActual(fn) {
      if (typeof fn !== "function") {
        throw new ERR_INVALID_ARG_TYPE("fn", "Function", fn);
      }
      try {
        fn();
      } catch (e) {
        return e;
      }
      return NO_EXCEPTION_SENTINEL;
    }
    function checkIsPromise(obj) {
      return isPromise(obj) || obj !== null && _typeof(obj) === "object" && typeof obj.then === "function" && typeof obj.catch === "function";
    }
    function waitForActual(promiseFn) {
      return Promise.resolve().then(function() {
        var resultPromise;
        if (typeof promiseFn === "function") {
          resultPromise = promiseFn();
          if (!checkIsPromise(resultPromise)) {
            throw new ERR_INVALID_RETURN_VALUE("instance of Promise", "promiseFn", resultPromise);
          }
        } else if (checkIsPromise(promiseFn)) {
          resultPromise = promiseFn;
        } else {
          throw new ERR_INVALID_ARG_TYPE("promiseFn", ["Function", "Promise"], promiseFn);
        }
        return Promise.resolve().then(function() {
          return resultPromise;
        }).then(function() {
          return NO_EXCEPTION_SENTINEL;
        }).catch(function(e) {
          return e;
        });
      });
    }
    function expectsError(stackStartFn, actual, error, message) {
      if (typeof error === "string") {
        if (arguments.length === 4) {
          throw new ERR_INVALID_ARG_TYPE("error", ["Object", "Error", "Function", "RegExp"], error);
        }
        if (_typeof(actual) === "object" && actual !== null) {
          if (actual.message === error) {
            throw new ERR_AMBIGUOUS_ARGUMENT("error/message", 'The error message "'.concat(actual.message, '" is identical to the message.'));
          }
        } else if (actual === error) {
          throw new ERR_AMBIGUOUS_ARGUMENT("error/message", 'The error "'.concat(actual, '" is identical to the message.'));
        }
        message = error;
        error = void 0;
      } else if (error != null && _typeof(error) !== "object" && typeof error !== "function") {
        throw new ERR_INVALID_ARG_TYPE("error", ["Object", "Error", "Function", "RegExp"], error);
      }
      if (actual === NO_EXCEPTION_SENTINEL) {
        var details = "";
        if (error && error.name) {
          details += " (".concat(error.name, ")");
        }
        details += message ? ": ".concat(message) : ".";
        var fnType = stackStartFn.name === "rejects" ? "rejection" : "exception";
        innerFail({
          actual: void 0,
          expected: error,
          operator: stackStartFn.name,
          message: "Missing expected ".concat(fnType).concat(details),
          stackStartFn
        });
      }
      if (error && !expectedException(actual, error, message, stackStartFn)) {
        throw actual;
      }
    }
    function expectsNoError(stackStartFn, actual, error, message) {
      if (actual === NO_EXCEPTION_SENTINEL) return;
      if (typeof error === "string") {
        message = error;
        error = void 0;
      }
      if (!error || expectedException(actual, error)) {
        var details = message ? ": ".concat(message) : ".";
        var fnType = stackStartFn.name === "doesNotReject" ? "rejection" : "exception";
        innerFail({
          actual,
          expected: error,
          operator: stackStartFn.name,
          message: "Got unwanted ".concat(fnType).concat(details, "\n") + 'Actual message: "'.concat(actual && actual.message, '"'),
          stackStartFn
        });
      }
      throw actual;
    }
    assert3.throws = function throws(promiseFn) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }
      expectsError.apply(void 0, [throws, getActual(promiseFn)].concat(args));
    };
    assert3.rejects = function rejects(promiseFn) {
      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }
      return waitForActual(promiseFn).then(function(result) {
        return expectsError.apply(void 0, [rejects, result].concat(args));
      });
    };
    assert3.doesNotThrow = function doesNotThrow(fn) {
      for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        args[_key4 - 1] = arguments[_key4];
      }
      expectsNoError.apply(void 0, [doesNotThrow, getActual(fn)].concat(args));
    };
    assert3.doesNotReject = function doesNotReject(fn) {
      for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
        args[_key5 - 1] = arguments[_key5];
      }
      return waitForActual(fn).then(function(result) {
        return expectsNoError.apply(void 0, [doesNotReject, result].concat(args));
      });
    };
    assert3.ifError = function ifError(err) {
      if (err !== null && err !== void 0) {
        var message = "ifError got unwanted exception: ";
        if (_typeof(err) === "object" && typeof err.message === "string") {
          if (err.message.length === 0 && err.constructor) {
            message += err.constructor.name;
          } else {
            message += err.message;
          }
        } else {
          message += inspect(err);
        }
        var newErr = new AssertionError({
          actual: err,
          expected: null,
          operator: "ifError",
          message,
          stackStartFn: ifError
        });
        var origStack = err.stack;
        if (typeof origStack === "string") {
          var tmp2 = origStack.split("\n");
          tmp2.shift();
          var tmp1 = newErr.stack.split("\n");
          for (var i = 0; i < tmp2.length; i++) {
            var pos = tmp1.indexOf(tmp2[i]);
            if (pos !== -1) {
              tmp1 = tmp1.slice(0, pos);
              break;
            }
          }
          newErr.stack = "".concat(tmp1.join("\n"), "\n").concat(tmp2.join("\n"));
        }
        throw newErr;
      }
    };
    function internalMatch(string2, regexp, message, fn, fnName) {
      if (!isRegExp(regexp)) {
        throw new ERR_INVALID_ARG_TYPE("regexp", "RegExp", regexp);
      }
      var match = fnName === "match";
      if (typeof string2 !== "string" || RegExpPrototypeTest(regexp, string2) !== match) {
        if (message instanceof Error) {
          throw message;
        }
        var generatedMessage = !message;
        message = message || (typeof string2 !== "string" ? 'The "string" argument must be of type string. Received type ' + "".concat(_typeof(string2), " (").concat(inspect(string2), ")") : (match ? "The input did not match the regular expression " : "The input was expected to not match the regular expression ") + "".concat(inspect(regexp), ". Input:\n\n").concat(inspect(string2), "\n"));
        var err = new AssertionError({
          actual: string2,
          expected: regexp,
          message,
          operator: fnName,
          stackStartFn: fn
        });
        err.generatedMessage = generatedMessage;
        throw err;
      }
    }
    assert3.match = function match(string2, regexp, message) {
      internalMatch(string2, regexp, message, match, "match");
    };
    assert3.doesNotMatch = function doesNotMatch(string2, regexp, message) {
      internalMatch(string2, regexp, message, doesNotMatch, "doesNotMatch");
    };
    function strict() {
      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }
      innerOk.apply(void 0, [strict, args.length].concat(args));
    }
    assert3.strict = objectAssign(strict, assert3, {
      equal: assert3.strictEqual,
      deepEqual: assert3.deepStrictEqual,
      notEqual: assert3.notStrictEqual,
      notDeepEqual: assert3.notDeepStrictEqual
    });
    assert3.strict.strict = assert3.strict;
  }
});

// node_modules/navi-sdk/dist/libs/AccountManager/index.js
var require_AccountManager = __commonJS({
  "node_modules/navi-sdk/dist/libs/AccountManager/index.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault2 = exports2 && exports2.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AccountManager = void 0;
    var ed25519_1 = require_ed255192();
    var client_1 = require_client4();
    var Coins_1 = require_Coins();
    var transactions_1 = require_transactions();
    var address_1 = require_address();
    var PTB_1 = require_PTB();
    var CallFunctions_1 = require_CallFunctions();
    var assert_1 = __importDefault2(require_assert());
    var PTB_2 = require_PTB();
    var AccountManager = class {
      /**
       * AccountManager class for managing user accounts.
       */
      constructor({ mnemonic = "", network = "mainnet", accountIndex = 0, privateKey = "" } = {}) {
        this.client = new client_1.SuiClient({ url: (0, client_1.getFullnodeUrl)("mainnet") });
        this.address = "";
        if (privateKey && privateKey !== "") {
          this.keypair = ed25519_1.Ed25519Keypair.fromSecretKey(privateKey);
        } else {
          this.keypair = ed25519_1.Ed25519Keypair.deriveKeypair(mnemonic, this.getDerivationPath(accountIndex));
        }
        const validNetworkTypes = ["mainnet", "testnet", "devnet", "localnet"];
        try {
          if (validNetworkTypes.includes(network)) {
            this.client = new client_1.SuiClient({
              url: (0, client_1.getFullnodeUrl)(network)
            });
          } else {
            this.client = new client_1.SuiClient({ url: network });
          }
        } catch (e) {
          console.log("Invalid network type or RPC", e);
        }
        this.address = this.keypair.getPublicKey().toSuiAddress();
        (0, PTB_2.registerStructs)();
      }
      /**
       * Returns the derivation path for a given address index.
       *
       * @param addressIndex - The index of the address.
       * @returns The derivation path as a string.
       */
      getDerivationPath(addressIndex) {
        return `m/44'/784'/0'/0'/${addressIndex}'`;
      }
      /**
       * Retrieves the public key associated with the account.
       * @returns The public key as a Sui address string.
       */
      getPublicKey() {
        return this.keypair.getPublicKey().toSuiAddress();
      }
      /**
       * fetchAllCoins is a helper function that recursively retrieves all coin data for the given account.
       * It handles pagination by utilizing the cursor provided in the response.
       * Recursion is necessary because a single request cannot retrieve all data
       * if the user's data exceeds QUERY_MAX_RESULT_LIMIT_CHECKPOINTS (50).
       *
       * @param account - The account address to retrieve coin data for.
       * @param cursor - An optional cursor for pagination. Default is null.
       * @returns A Promise that resolves to an array containing all the coins owned by the account.
       */
      fetchAllCoins(account_1) {
        return __awaiter2(this, arguments, void 0, function* (account, cursor = null) {
          const { data, nextCursor, hasNextPage } = yield this.client.getAllCoins({
            owner: account,
            cursor
          });
          if (!hasNextPage)
            return data;
          const newData = yield this.fetchAllCoins(account, nextCursor);
          return [...data, ...newData];
        });
      }
      /**
       * getAllCoins is an asynchronous function that retrieves all the coins owned by the specified account.
       * It utilizes a recursive function to fetch all pages of coin data if pagination is required.
       *
       * @param prettyPrint - A boolean indicating whether to print the coin data in a formatted manner. Default is true.
       * @returns A Promise that resolves to an array containing all the coins owned by the account.
       */
      getAllCoins() {
        return __awaiter2(this, arguments, void 0, function* (prettyPrint = true) {
          const allData = yield this.fetchAllCoins(this.address);
          if (prettyPrint) {
            allData.forEach(({ coinType, coinObjectId, balance }) => {
              console.log("Coin Type: ", coinType, "| Obj id: ", coinObjectId, " | Balance: ", balance);
            });
          }
          return allData;
        });
      }
      /**
       * getWalletBalance is an asynchronous function that retrieves the balance of all coins in the wallet.
       *
       * @param prettyPrint - A boolean indicating whether to print the data in a pretty format. Default is false.
       * @returns A Promise that resolves to an object containing the balance of each coin in the wallet. Record<string, number>
       */
      getWalletBalance() {
        return __awaiter2(this, arguments, void 0, function* (prettyPrint = true) {
          const allBalances = yield this.client.getAllBalances({ owner: this.address });
          const coinBalances = {};
          for (const { coinType, totalBalance } of allBalances) {
            const decimal = yield this.getCoinDecimal(coinType);
            coinBalances[coinType] = Number(totalBalance) / Math.pow(10, decimal);
          }
          if (prettyPrint) {
            Object.entries(coinBalances).forEach(([coinType, balance]) => {
              const coinName = address_1.AddressMap[coinType] ? `Coin Type: ${address_1.AddressMap[coinType]}` : `Unknown Coin Type: ${coinType}`;
              console.log(coinName, "| Balance: ", balance);
            });
          }
          return coinBalances;
        });
      }
      /**
       * fetchCoins is a helper function that recursively retrieves coin objects for the given account and coin type.
       * It handles pagination by utilizing the cursor provided in the response.
       *
       * @param account - The account address to retrieve coin data for.
       * @param coinType - The coin type to retrieve.
       * @param cursor - An optional cursor for pagination. Default is null.
       * @returns A Promise that resolves to an array containing all the coin objects of the specified type owned by the account.
       */
      fetchCoins(account_1, coinType_1) {
        return __awaiter2(this, arguments, void 0, function* (account, coinType, cursor = null) {
          const { data, nextCursor, hasNextPage } = yield this.client.getCoins({
            owner: account,
            coinType,
            cursor
          });
          if (!hasNextPage)
            return data;
          const newData = yield this.fetchCoins(account, coinType, nextCursor);
          return [...data, ...newData];
        });
      }
      /**
       * Retrieves coin objects based on the specified coin type, with pagination handling.
       * Recursively fetches all coin objects if they exceed QUERY_MAX_RESULT_LIMIT_CHECKPOINTS (50).
       *
       * @param coinType - The coin type to retrieve coin objects for. Defaults to "0x2::sui::SUI".
       * @returns A Promise that resolves to the retrieved coin objects.
       */
      getCoins() {
        return __awaiter2(this, arguments, void 0, function* (coinType = "0x2::sui::SUI") {
          const coinAddress = coinType.address ? coinType.address : coinType;
          const data = [...yield this.fetchCoins(this.address, coinAddress)];
          return { data };
        });
      }
      /**
       * Creates an account capability.
       * @returns A Promise that resolves to the result of the account creation.
       */
      createAccountCap() {
        return __awaiter2(this, void 0, void 0, function* () {
          let txb = new transactions_1.Transaction();
          let sender = this.getPublicKey();
          txb.setSender(sender);
          const config = yield (0, address_1.getConfig)();
          const [ret] = txb.moveCall({
            target: `${config.ProtocolPackage}::lending::create_account`
          });
          txb.transferObjects([ret], this.getPublicKey());
          const result = (0, PTB_1.SignAndSubmitTXB)(txb, this.client, this.keypair);
          return result;
        });
      }
      /**
       * Sends coins to multiple recipients.
       *
       * @param coinType - The type of coin to send.
       * @param recipients - An array of recipient addresses.
       * @param amounts - An array of amounts to send to each recipient.
       * @returns A promise that resolves to the result of the transaction.
       * @throws An error if the recipient list contains an empty address string, or if the length of the recipient array is not equal to the length of the amounts array, or if there is insufficient balance for the coin.
       */
      sendCoinsToMany(coinType, recipients, amounts) {
        return __awaiter2(this, void 0, void 0, function* () {
          const coinAddress = coinType.address ? coinType.address : coinType;
          if (recipients.some((address) => address.trim() === "")) {
            throw new Error("Recipient list contains an empty address string.");
          }
          if (recipients.length !== amounts.length) {
            throw new Error("recipients.length !== amounts.length");
          }
          let sender = this.getPublicKey();
          const coinBalance = yield (0, Coins_1.getCoinAmount)(this.client, this.getPublicKey(), coinAddress);
          if (coinBalance > 0 && coinBalance >= amounts.reduce((a, b) => a + b, 0)) {
            const txb = new transactions_1.Transaction();
            txb.setSender(sender);
            let coinInfo = yield this.getCoins(coinAddress);
            let coins;
            if (coinAddress == "0x2::sui::SUI") {
              coins = txb.splitCoins(txb.gas, amounts);
            } else {
              if (coinInfo.data.length >= 2) {
                let baseObj = coinInfo.data[0].coinObjectId;
                let allList = coinInfo.data.slice(1).map((coin) => coin.coinObjectId);
                txb.mergeCoins(baseObj, allList);
              }
              let mergedCoin = txb.object(coinInfo.data[0].coinObjectId);
              coins = txb.splitCoins(mergedCoin, amounts);
            }
            recipients.forEach((address, index) => {
              txb.transferObjects([coins[index]], address);
            });
            const result = (0, PTB_1.SignAndSubmitTXB)(txb, this.client, this.keypair);
            return result;
          } else {
            throw new Error("Insufficient balance for this Coin");
          }
        });
      }
      /**
       * Sends a specified amount of coins to a recipient.
       *
       * @param coinType - The type of coin to send.
       * @param recipient - The address of the recipient.
       * @param amount - The amount of coins to send.
       * @returns A promise that resolves when the coins are sent.
       */
      sendCoin(coinType, recipient, amount) {
        return __awaiter2(this, void 0, void 0, function* () {
          const coinAddress = coinType.address ? coinType.address : coinType;
          return yield this.sendCoinsToMany(coinAddress, [recipient], [amount]);
        });
      }
      /**
       * Transfers multiple objects to multiple recipients.
       * @param objects - An array of objects to be transferred.
       * @param recipients - An array of recipients for the objects.
       * @returns A promise that resolves with the result of the transfer.
       * @throws An error if the length of objects and recipient arrays are not the same.
       */
      transferObjectsToMany(objects, recipients) {
        return __awaiter2(this, void 0, void 0, function* () {
          if (objects.length !== recipients.length) {
            throw new Error("The length of objects and recipients should be the same");
          } else {
            let sender = this.getPublicKey();
            const txb = new transactions_1.Transaction();
            txb.setSender(sender);
            objects.forEach((object, index) => {
              txb.transferObjects([txb.object(object)], recipients[index]);
            });
            const result = (0, PTB_1.SignAndSubmitTXB)(txb, this.client, this.keypair);
            return result;
          }
        });
      }
      /**
       * Transfers an object to a recipient.
       * @param object - The object to be transferred.
       * @param recipient - The recipient of the object.
       * @returns A promise that resolves when the transfer is complete.
       */
      transferObject(object, recipient) {
        return __awaiter2(this, void 0, void 0, function* () {
          return yield this.transferObjectsToMany([object], [recipient]);
        });
      }
      /**
       * Deposits a specified amount of a given coin type to Navi.
       * @param coinType - The coin type to deposit.
       * @param amount - The amount to deposit.
       * @returns A promise that resolves to the result of the deposit transaction.
       * @throws An error if there is insufficient balance for the coin.
       */
      depositToNavi(coinType, amount) {
        return __awaiter2(this, void 0, void 0, function* () {
          const coinSymbol = coinType.symbol;
          let txb = new transactions_1.Transaction();
          let sender = this.getPublicKey();
          txb.setSender(sender);
          const poolConfig = address_1.pool[coinSymbol];
          let coinInfo = yield this.getCoins(coinType.address);
          if (!coinInfo.data[0]) {
            throw new Error("Insufficient balance for this Coin");
          }
          if (coinSymbol == "Sui") {
            const [toDeposit] = txb.splitCoins(txb.gas, [amount]);
            yield (0, PTB_1.depositCoin)(txb, poolConfig, toDeposit, amount);
          } else {
            const mergedCoinObject = (0, PTB_1.returnMergedCoins)(txb, coinInfo);
            const mergedCoinObjectWithAmount = txb.splitCoins(mergedCoinObject, [
              amount
            ]);
            yield (0, PTB_1.depositCoin)(txb, poolConfig, mergedCoinObjectWithAmount, amount);
          }
          const result = (0, PTB_1.SignAndSubmitTXB)(txb, this.client, this.keypair);
          return result;
        });
      }
      /**
       * Deposits a specified amount of a given coin type to Navi with an account cap address.
       * @param coinType - The coin type to deposit.
       * @param amount - The amount to deposit.
       * @param accountCapAddress - The account cap address.
       * @returns A promise that resolves to the result of the deposit transaction.
       * @throws An error if there is insufficient balance for the coin.
       */
      depositToNaviWithAccountCap(coinType, amount, accountCapAddress) {
        return __awaiter2(this, void 0, void 0, function* () {
          const coinSymbol = coinType.symbol ? coinType.symbol : coinType;
          let txb = new transactions_1.Transaction();
          let sender = this.getPublicKey();
          txb.setSender(sender);
          const poolConfig = address_1.pool[coinSymbol];
          let coinInfo = yield this.getCoins(coinType.address);
          if (!coinInfo.data[0]) {
            throw new Error("Insufficient balance for this Coin");
          }
          if (coinSymbol == "Sui") {
            const [toDeposit] = txb.splitCoins(txb.gas, [amount]);
            yield (0, PTB_1.depositCoinWithAccountCap)(txb, poolConfig, toDeposit, accountCapAddress);
          } else {
            const mergedCoinObject = (0, PTB_1.returnMergedCoins)(txb, coinInfo);
            const mergedCoinObjectWithAmount = txb.splitCoins(mergedCoinObject, [
              amount
            ]);
            yield (0, PTB_1.depositCoinWithAccountCap)(txb, poolConfig, mergedCoinObjectWithAmount, accountCapAddress);
          }
          const result = (0, PTB_1.SignAndSubmitTXB)(txb, this.client, this.keypair);
          return result;
        });
      }
      /**
       * Withdraws a specified amount of coins.
       * @param coinType - The type of coin to withdraw.
       * @param amount - The amount of coins to withdraw.
       * @param updateOracle - A boolean indicating whether to update the oracle. Default is true. Set to false to save gas.
       * @returns A promise that resolves to the result of the withdrawal.
       */
      withdraw(coinType_1, amount_1) {
        return __awaiter2(this, arguments, void 0, function* (coinType, amount, updateOracle = true) {
          const coinSymbol = coinType.symbol ? coinType.symbol : coinType;
          let txb = new transactions_1.Transaction();
          if (updateOracle) {
            yield (0, PTB_1.updateOraclePTB)(this.client, txb);
          }
          let sender = this.getPublicKey();
          txb.setSender(sender);
          const poolConfig = address_1.pool[coinSymbol];
          const [returnCoin] = yield (0, PTB_1.withdrawCoin)(txb, poolConfig, amount);
          txb.transferObjects([returnCoin], sender);
          const result = (0, PTB_1.SignAndSubmitTXB)(txb, this.client, this.keypair);
          return result;
        });
      }
      /**
       * Withdraws a specified amount of coins with an account cap.
       *
       * @param coinType - The type of coin to withdraw.
       * @param withdrawAmount - The amount of coins to withdraw.
       * @param accountCapAddress - The address of the account cap.
       * @param updateOracle - A boolean indicating whether to update the oracle. Default is true. Set to false to save gas.
       * @returns A promise that resolves to the result of the withdrawal.
       */
      withdrawWithAccountCap(coinType_1, withdrawAmount_1, accountCapAddress_1) {
        return __awaiter2(this, arguments, void 0, function* (coinType, withdrawAmount, accountCapAddress, updateOracle = true) {
          const coinSymbol = coinType.symbol ? coinType.symbol : coinType;
          let txb = new transactions_1.Transaction();
          if (updateOracle) {
            yield (0, PTB_1.updateOraclePTB)(this.client, txb);
          }
          let sender = this.getPublicKey();
          txb.setSender(sender);
          const poolConfig = address_1.pool[coinSymbol];
          const [returnCoin] = yield (0, PTB_1.withdrawCoinWithAccountCap)(txb, poolConfig, accountCapAddress, withdrawAmount, sender);
          txb.transferObjects([returnCoin], sender);
          const result = (0, PTB_1.SignAndSubmitTXB)(txb, this.client, this.keypair);
          return result;
        });
      }
      /**
       * Borrows a specified amount of a given coin.
       *
       * @param coinType - The type of coin to borrow.
       * @param borrowAmount - The amount of the coin to borrow.
       * @returns A promise that resolves to the result of the borrowing operation.
       */
      borrow(coinType_1, borrowAmount_1) {
        return __awaiter2(this, arguments, void 0, function* (coinType, borrowAmount, updateOracle = true) {
          const coinSymbol = coinType.symbol ? coinType.symbol : coinType;
          let txb = new transactions_1.Transaction();
          if (updateOracle) {
            yield (0, PTB_1.updateOraclePTB)(this.client, txb);
          }
          let sender = this.getPublicKey();
          txb.setSender(sender);
          const poolConfig = address_1.pool[coinSymbol];
          const [returnCoin] = yield (0, PTB_1.borrowCoin)(txb, poolConfig, borrowAmount);
          txb.transferObjects([returnCoin], sender);
          const result = (0, PTB_1.SignAndSubmitTXB)(txb, this.client, this.keypair);
          return result;
        });
      }
      /**
       * Repays a specified amount of a given coin type.
       *
       * @param coinType - The coin type or coin symbol to repay.
       * @param repayAmount - The amount to repay.
       * @returns A promise that resolves to the result of the repayment transaction.
       * @throws An error if there is insufficient balance for the specified coin.
       */
      repay(coinType, repayAmount) {
        return __awaiter2(this, void 0, void 0, function* () {
          const coinSymbol = coinType.symbol ? coinType.symbol : coinType;
          let txb = new transactions_1.Transaction();
          let sender = this.getPublicKey();
          txb.setSender(sender);
          const poolConfig = address_1.pool[coinSymbol];
          let coinInfo = yield this.getCoins(coinType.address);
          if (!coinInfo.data[0]) {
            throw new Error("Insufficient balance for this Coin");
          }
          if (coinSymbol == "Sui") {
            const [toDeposit] = txb.splitCoins(txb.gas, [repayAmount]);
            yield (0, PTB_1.repayDebt)(txb, poolConfig, toDeposit, repayAmount);
          } else {
            const mergedCoinObject = (0, PTB_1.returnMergedCoins)(txb, coinInfo);
            const mergedCoinObjectWithAmount = txb.splitCoins(mergedCoinObject, [
              repayAmount
            ]);
            yield (0, PTB_1.repayDebt)(txb, poolConfig, mergedCoinObjectWithAmount, repayAmount);
          }
          const result = (0, PTB_1.SignAndSubmitTXB)(txb, this.client, this.keypair);
          return result;
        });
      }
      /**
       * Liquidates a specified amount of coins.
       *
       * @param payCoinType - The coin type to be paid for liquidation.
       * @param liquidationAddress - The address to which the liquidated coins will be transferred.
       * @param collateralCoinType - The coin type to be used as collateral for liquidation.
       * @param liquidationAmount - The amount of coins to be liquidated (optional, default is 0).
       * @param updateOracle - A boolean indicating whether to update the oracle. Default is true. Set to false to save gas.
       * @returns PtbResult - The result of the liquidation transaction.
       */
      liquidate(payCoinType_1, liquidationAddress_1, collateralCoinType_1) {
        return __awaiter2(this, arguments, void 0, function* (payCoinType, liquidationAddress, collateralCoinType, liquidationAmount = 0, updateOracle = true) {
          let txb = new transactions_1.Transaction();
          if (updateOracle) {
            yield (0, PTB_1.updateOraclePTB)(this.client, txb);
          }
          txb.setSender(this.address);
          let coinInfo = yield this.getCoins(payCoinType.address);
          let allBalance = yield this.client.getBalance({ owner: this.address, coinType: payCoinType.address });
          let { totalBalance } = allBalance;
          if (liquidationAmount != 0) {
            (0, assert_1.default)(liquidationAmount * Math.pow(10, payCoinType.decimal) <= Number(totalBalance), "Insufficient balance for this Coin, please don't apply decimals to liquidationAmount");
            totalBalance = (liquidationAmount * Math.pow(10, payCoinType.decimal)).toString();
          }
          if (payCoinType.symbol == "Sui") {
            totalBalance = (Number(totalBalance) - 1 * 1e9).toString();
            let [mergedCoin] = txb.splitCoins(txb.gas, [txb.pure.u64(Number(totalBalance))]);
            const [mergedCoinBalance] = txb.moveCall({
              target: `0x2::coin::into_balance`,
              arguments: [mergedCoin],
              typeArguments: [payCoinType.address]
            });
            const [collateralBalance, remainingDebtBalance] = yield (0, PTB_1.liquidateFunction)(txb, payCoinType, mergedCoinBalance, collateralCoinType, liquidationAddress, totalBalance);
            const [collateralCoin] = txb.moveCall({
              target: `0x2::coin::from_balance`,
              arguments: [collateralBalance],
              typeArguments: [collateralCoinType.address]
            });
            const [leftDebtCoin] = txb.moveCall({
              target: `0x2::coin::from_balance`,
              arguments: [remainingDebtBalance],
              typeArguments: [payCoinType.address]
            });
            txb.transferObjects([collateralCoin, leftDebtCoin], this.address);
          } else {
            if (coinInfo.data.length >= 2) {
              const txbMerge = new transactions_1.Transaction();
              txbMerge.setSender(this.address);
              let baseObj = coinInfo.data[0].coinObjectId;
              let allList = coinInfo.data.slice(1).map((coin) => coin.coinObjectId);
              txb.mergeCoins(baseObj, allList);
              (0, PTB_1.SignAndSubmitTXB)(txbMerge, this.client, this.keypair);
            }
            let mergedCoin = txb.object(coinInfo.data[0].coinObjectId);
            const [collateralCoinBalance] = txb.moveCall({
              target: `0x2::coin::into_balance`,
              arguments: [mergedCoin],
              typeArguments: [payCoinType.address]
            });
            const [collateralBalance, remainingDebtBalance] = yield (0, PTB_1.liquidateFunction)(txb, payCoinType, collateralCoinBalance, collateralCoinType, liquidationAddress, totalBalance);
            const [collateralCoin] = txb.moveCall({
              target: `0x2::coin::from_balance`,
              arguments: [collateralBalance],
              typeArguments: [collateralCoinType.address]
            });
            const [leftDebtCoin] = txb.moveCall({
              target: `0x2::coin::from_balance`,
              arguments: [remainingDebtBalance],
              typeArguments: [payCoinType.address]
            });
            txb.transferObjects([collateralCoin, leftDebtCoin], this.address);
          }
          const result = (0, PTB_1.SignAndSubmitTXB)(txb, this.client, this.keypair);
          return result;
        });
      }
      /**
       * Retrieves the health factor for a given address.
       * @param address - The address for which to retrieve the health factor. Defaults to the instance's address.
       * @returns The health factor as a number.
       */
      getHealthFactor() {
        return __awaiter2(this, arguments, void 0, function* (address = this.address, client) {
          const result = yield (0, CallFunctions_1.getHealthFactorCall)(address, client ? client : this.client);
          const healthFactor = Number(result[0]) / Math.pow(10, 27);
          return healthFactor;
        });
      }
      /**
       * Retrieves the dynamic health factor for a given user in a specific pool.
       * @param userAddress - The address of the user.
       * @param poolName - The name of the pool.
       * @param estimatedSupply - The estimated supply value (default: 0).
       * @param estimatedBorrow - The estimated borrow value (default: 0).
       * @param isIncrease - A boolean indicating whether the estimated supply or borrow is increasing (default: true).
       * @returns The health factor for the user in the pool.
       * @throws Error if the pool does not exist.
       */
      getDynamicHealthFactor(userAddress_1, coinType_1) {
        return __awaiter2(this, arguments, void 0, function* (userAddress, coinType, estimatedSupply = 0, estimatedBorrow = 0, isIncrease = true) {
          const poolConfig = address_1.pool[coinType.symbol];
          if (!poolConfig) {
            throw new Error("Pool does not exist");
          }
          const config = yield (0, address_1.getConfig)();
          const tx = new transactions_1.Transaction();
          const result = yield (0, CallFunctions_1.moveInspect)(tx, this.client, this.getPublicKey(), `${config.ProtocolPackage}::dynamic_calculator::dynamic_health_factor`, [
            tx.object("0x06"),
            // clock object id
            tx.object(config.StorageId),
            // object id of storage
            tx.object(config.PriceOracle),
            // object id of price oracle
            tx.object(poolConfig.poolId),
            tx.pure.address(userAddress),
            // user address,
            tx.pure.u8(poolConfig.assetId),
            tx.pure.u64(estimatedSupply),
            tx.pure.u64(estimatedBorrow),
            tx.pure.bool(isIncrease)
          ], [poolConfig.type]);
          const healthFactor = Number(result[0]) / Math.pow(10, 27);
          if (estimatedSupply > 0) {
            console.log("With EstimateSupply Change: ", `${estimatedSupply}`, " address: ", `${userAddress}`, " health factor is: ", healthFactor.toString());
          } else if (estimatedBorrow > 0) {
            console.log("With EstimateBorrow Change: ", `${estimatedBorrow}`, " address: ", `${userAddress}`, " health factor is: ", healthFactor.toString());
          } else {
            console.log("address: ", `${userAddress}`, " health factor is: ", healthFactor.toString());
          }
          return healthFactor.toString();
        });
      }
      /**
       * Retrieves the decimal value for a given coin type.
       * If the coin type has an address property, it uses that address. Otherwise, it uses the coin type itself.
       *
       * @param coinType - The coin type or coin object.
       * @returns The decimal value of the coin.
       */
      getCoinDecimal(coinType) {
        return __awaiter2(this, void 0, void 0, function* () {
          const coinAddress = coinType.address ? coinType.address : coinType;
          const decimal = yield (0, Coins_1.getCoinDecimal)(this.client, coinAddress);
          return decimal;
        });
      }
      parseResult(msg) {
        console.log(JSON.stringify(msg, null, 2));
      }
      /**
       * Retrieves the detailed information of a reserve based on the provided asset ID.
       * @param assetId - The ID of the asset for which to retrieve the reserve details.
       * @returns A Promise that resolves to the parsed result of the reserve details.
       */
      getReservesDetail(assetId) {
        return __awaiter2(this, void 0, void 0, function* () {
          return (0, CallFunctions_1.getReservesDetail)(assetId, this.client);
        });
      }
      /**
       * Retrieves the NAVI portfolio for the current account.
       * @param prettyPrint - A boolean indicating whether to print the portfolio in a pretty format. Default is true.
       * @returns A Promise that resolves to a Map containing the borrow and supply balances for each reserve.
       */
      getNAVIPortfolio() {
        return __awaiter2(this, arguments, void 0, function* (address = this.address, prettyPrint = true) {
          return (0, CallFunctions_1.getAddressPortfolio)(address, prettyPrint, this.client);
        });
      }
      /**
       * Claims all available rewards for the specified account.
       * @param updateOracle - A boolean indicating whether to update the oracle. Default is true. Set to false to save gas.
       * @returns PTB result
       */
      claimAllRewards() {
        return __awaiter2(this, arguments, void 0, function* (updateOracle = true) {
          let txb = yield (0, PTB_1.claimAllRewardsPTB)(this.client, this.address);
          txb.setSender(this.address);
          const result = (0, PTB_1.SignAndSubmitTXB)(txb, this.client, this.keypair);
          return result;
        });
      }
      /**
       * Stakes a specified amount of SuitoVoloSui.
       * @param stakeAmount The amount of SuitoVoloSui to stake. Must be greater than 1Sui.
       * @returns PTB result
       */
      stakeSuitoVoloSui(stakeAmount) {
        return __awaiter2(this, void 0, void 0, function* () {
          let txb = new transactions_1.Transaction();
          txb.setSender(this.address);
          (0, assert_1.default)(stakeAmount >= 1e9, "Stake amount should be greater than 1Sui");
          const [toSwapSui] = txb.splitCoins(txb.gas, [stakeAmount]);
          const vSuiCoin = yield (0, PTB_1.stakeTovSuiPTB)(txb, toSwapSui);
          txb.transferObjects([vSuiCoin], this.address);
          const result = (0, PTB_1.SignAndSubmitTXB)(txb, this.client, this.keypair);
          return result;
        });
      }
      /**
       * Unstakes a specified amount of SUI from VOLO SUI.
       * If no amount is provided, unstakes all available vSUI. Must be greater than 1vSui.
       *
       * @param unstakeAmount - The amount of SUI to unstake. If not provided, all available vSUI will be unstaked.
       * @returns PTB result
       */
      unstakeSuiFromVoloSui() {
        return __awaiter2(this, arguments, void 0, function* (unstakeAmount = -1) {
          let txb = new transactions_1.Transaction();
          txb.setSender(this.address);
          let coinInfo = yield this.getCoins(address_1.vSui.address);
          if (coinInfo.data.length >= 2) {
            const txbMerge = new transactions_1.Transaction();
            txbMerge.setSender(this.address);
            let baseObj = coinInfo.data[0].coinObjectId;
            let allList = coinInfo.data.slice(1).map((coin) => coin.coinObjectId);
            txbMerge.mergeCoins(baseObj, allList);
            yield (0, PTB_1.SignAndSubmitTXB)(txbMerge, this.client, this.keypair);
          }
          coinInfo = yield this.getCoins(address_1.vSui.address);
          if (unstakeAmount == -1) {
            unstakeAmount = Number(coinInfo.data[0].balance);
          }
          (0, assert_1.default)(unstakeAmount >= 1e9, "Unstake amount should >= 1vSui");
          let mergedCoin = txb.object(coinInfo.data[0].coinObjectId);
          const [splittedCoin] = txb.splitCoins(mergedCoin, [unstakeAmount]);
          yield (0, PTB_1.unstakeTovSui)(txb, splittedCoin);
          const result = (0, PTB_1.SignAndSubmitTXB)(txb, this.client, this.keypair);
          return result;
        });
      }
      /**
       * Updates the Oracle.
       *
       * @returns The result of the transaction submission.
       */
      updateOracle() {
        return __awaiter2(this, void 0, void 0, function* () {
          let txb = new transactions_1.Transaction();
          txb.setSender(this.address);
          yield (0, PTB_1.updateOraclePTB)(this.client, txb);
          const result = (0, PTB_1.SignAndSubmitTXB)(txb, this.client, this.keypair);
          return result;
        });
      }
      swap(fromCoinAddress_1, toCoinAddress_1, amountIn_1, minAmountOut_1, apiKey_1) {
        return __awaiter2(this, arguments, void 0, function* (fromCoinAddress, toCoinAddress, amountIn, minAmountOut, apiKey, swapOptions = { baseUrl: void 0, dexList: [], byAmountIn: true, depth: 3 }) {
          const txb = new transactions_1.Transaction();
          txb.setSender(this.address);
          const coinA = yield (0, PTB_1.getCoinPTB)(this.address, fromCoinAddress, amountIn, txb, this.client);
          const finalCoinB = yield (0, PTB_1.swapPTB)(this.address, txb, fromCoinAddress, toCoinAddress, coinA, amountIn, minAmountOut, apiKey, swapOptions);
          txb.transferObjects([finalCoinB], this.address);
          const result = yield (0, PTB_1.SignAndSubmitTXB)(txb, this.client, this.keypair);
          return result;
        });
      }
      dryRunSwap(fromCoinAddress_1, toCoinAddress_1, amountIn_1, minAmountOut_1, apiKey_1) {
        return __awaiter2(this, arguments, void 0, function* (fromCoinAddress, toCoinAddress, amountIn, minAmountOut, apiKey, swapOptions = { baseUrl: void 0, dexList: [], byAmountIn: true, depth: 3 }) {
          const txb = new transactions_1.Transaction();
          txb.setSender(this.address);
          const coinA = yield (0, PTB_1.getCoinPTB)(this.address, fromCoinAddress, amountIn, txb, this.client);
          const finalCoinB = yield (0, PTB_1.swapPTB)(this.address, txb, fromCoinAddress, toCoinAddress, coinA, amountIn, minAmountOut, apiKey, swapOptions);
          txb.transferObjects([finalCoinB], this.address);
          const dryRunTxBytes = yield txb.build({
            client: this.client
          });
          const dryRunResult = yield this.client.dryRunTransactionBlock({ transactionBlock: dryRunTxBytes });
          return dryRunResult;
        });
      }
    };
    exports2.AccountManager = AccountManager;
  }
});

// node_modules/@scure/bip39/wordlists/english.js
var require_english = __commonJS({
  "node_modules/@scure/bip39/wordlists/english.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.wordlist = void 0;
    exports2.wordlist = `abandon
ability
able
about
above
absent
absorb
abstract
absurd
abuse
access
accident
account
accuse
achieve
acid
acoustic
acquire
across
act
action
actor
actress
actual
adapt
add
addict
address
adjust
admit
adult
advance
advice
aerobic
affair
afford
afraid
again
age
agent
agree
ahead
aim
air
airport
aisle
alarm
album
alcohol
alert
alien
all
alley
allow
almost
alone
alpha
already
also
alter
always
amateur
amazing
among
amount
amused
analyst
anchor
ancient
anger
angle
angry
animal
ankle
announce
annual
another
answer
antenna
antique
anxiety
any
apart
apology
appear
apple
approve
april
arch
arctic
area
arena
argue
arm
armed
armor
army
around
arrange
arrest
arrive
arrow
art
artefact
artist
artwork
ask
aspect
assault
asset
assist
assume
asthma
athlete
atom
attack
attend
attitude
attract
auction
audit
august
aunt
author
auto
autumn
average
avocado
avoid
awake
aware
away
awesome
awful
awkward
axis
baby
bachelor
bacon
badge
bag
balance
balcony
ball
bamboo
banana
banner
bar
barely
bargain
barrel
base
basic
basket
battle
beach
bean
beauty
because
become
beef
before
begin
behave
behind
believe
below
belt
bench
benefit
best
betray
better
between
beyond
bicycle
bid
bike
bind
biology
bird
birth
bitter
black
blade
blame
blanket
blast
bleak
bless
blind
blood
blossom
blouse
blue
blur
blush
board
boat
body
boil
bomb
bone
bonus
book
boost
border
boring
borrow
boss
bottom
bounce
box
boy
bracket
brain
brand
brass
brave
bread
breeze
brick
bridge
brief
bright
bring
brisk
broccoli
broken
bronze
broom
brother
brown
brush
bubble
buddy
budget
buffalo
build
bulb
bulk
bullet
bundle
bunker
burden
burger
burst
bus
business
busy
butter
buyer
buzz
cabbage
cabin
cable
cactus
cage
cake
call
calm
camera
camp
can
canal
cancel
candy
cannon
canoe
canvas
canyon
capable
capital
captain
car
carbon
card
cargo
carpet
carry
cart
case
cash
casino
castle
casual
cat
catalog
catch
category
cattle
caught
cause
caution
cave
ceiling
celery
cement
census
century
cereal
certain
chair
chalk
champion
change
chaos
chapter
charge
chase
chat
cheap
check
cheese
chef
cherry
chest
chicken
chief
child
chimney
choice
choose
chronic
chuckle
chunk
churn
cigar
cinnamon
circle
citizen
city
civil
claim
clap
clarify
claw
clay
clean
clerk
clever
click
client
cliff
climb
clinic
clip
clock
clog
close
cloth
cloud
clown
club
clump
cluster
clutch
coach
coast
coconut
code
coffee
coil
coin
collect
color
column
combine
come
comfort
comic
common
company
concert
conduct
confirm
congress
connect
consider
control
convince
cook
cool
copper
copy
coral
core
corn
correct
cost
cotton
couch
country
couple
course
cousin
cover
coyote
crack
cradle
craft
cram
crane
crash
crater
crawl
crazy
cream
credit
creek
crew
cricket
crime
crisp
critic
crop
cross
crouch
crowd
crucial
cruel
cruise
crumble
crunch
crush
cry
crystal
cube
culture
cup
cupboard
curious
current
curtain
curve
cushion
custom
cute
cycle
dad
damage
damp
dance
danger
daring
dash
daughter
dawn
day
deal
debate
debris
decade
december
decide
decline
decorate
decrease
deer
defense
define
defy
degree
delay
deliver
demand
demise
denial
dentist
deny
depart
depend
deposit
depth
deputy
derive
describe
desert
design
desk
despair
destroy
detail
detect
develop
device
devote
diagram
dial
diamond
diary
dice
diesel
diet
differ
digital
dignity
dilemma
dinner
dinosaur
direct
dirt
disagree
discover
disease
dish
dismiss
disorder
display
distance
divert
divide
divorce
dizzy
doctor
document
dog
doll
dolphin
domain
donate
donkey
donor
door
dose
double
dove
draft
dragon
drama
drastic
draw
dream
dress
drift
drill
drink
drip
drive
drop
drum
dry
duck
dumb
dune
during
dust
dutch
duty
dwarf
dynamic
eager
eagle
early
earn
earth
easily
east
easy
echo
ecology
economy
edge
edit
educate
effort
egg
eight
either
elbow
elder
electric
elegant
element
elephant
elevator
elite
else
embark
embody
embrace
emerge
emotion
employ
empower
empty
enable
enact
end
endless
endorse
enemy
energy
enforce
engage
engine
enhance
enjoy
enlist
enough
enrich
enroll
ensure
enter
entire
entry
envelope
episode
equal
equip
era
erase
erode
erosion
error
erupt
escape
essay
essence
estate
eternal
ethics
evidence
evil
evoke
evolve
exact
example
excess
exchange
excite
exclude
excuse
execute
exercise
exhaust
exhibit
exile
exist
exit
exotic
expand
expect
expire
explain
expose
express
extend
extra
eye
eyebrow
fabric
face
faculty
fade
faint
faith
fall
false
fame
family
famous
fan
fancy
fantasy
farm
fashion
fat
fatal
father
fatigue
fault
favorite
feature
february
federal
fee
feed
feel
female
fence
festival
fetch
fever
few
fiber
fiction
field
figure
file
film
filter
final
find
fine
finger
finish
fire
firm
first
fiscal
fish
fit
fitness
fix
flag
flame
flash
flat
flavor
flee
flight
flip
float
flock
floor
flower
fluid
flush
fly
foam
focus
fog
foil
fold
follow
food
foot
force
forest
forget
fork
fortune
forum
forward
fossil
foster
found
fox
fragile
frame
frequent
fresh
friend
fringe
frog
front
frost
frown
frozen
fruit
fuel
fun
funny
furnace
fury
future
gadget
gain
galaxy
gallery
game
gap
garage
garbage
garden
garlic
garment
gas
gasp
gate
gather
gauge
gaze
general
genius
genre
gentle
genuine
gesture
ghost
giant
gift
giggle
ginger
giraffe
girl
give
glad
glance
glare
glass
glide
glimpse
globe
gloom
glory
glove
glow
glue
goat
goddess
gold
good
goose
gorilla
gospel
gossip
govern
gown
grab
grace
grain
grant
grape
grass
gravity
great
green
grid
grief
grit
grocery
group
grow
grunt
guard
guess
guide
guilt
guitar
gun
gym
habit
hair
half
hammer
hamster
hand
happy
harbor
hard
harsh
harvest
hat
have
hawk
hazard
head
health
heart
heavy
hedgehog
height
hello
helmet
help
hen
hero
hidden
high
hill
hint
hip
hire
history
hobby
hockey
hold
hole
holiday
hollow
home
honey
hood
hope
horn
horror
horse
hospital
host
hotel
hour
hover
hub
huge
human
humble
humor
hundred
hungry
hunt
hurdle
hurry
hurt
husband
hybrid
ice
icon
idea
identify
idle
ignore
ill
illegal
illness
image
imitate
immense
immune
impact
impose
improve
impulse
inch
include
income
increase
index
indicate
indoor
industry
infant
inflict
inform
inhale
inherit
initial
inject
injury
inmate
inner
innocent
input
inquiry
insane
insect
inside
inspire
install
intact
interest
into
invest
invite
involve
iron
island
isolate
issue
item
ivory
jacket
jaguar
jar
jazz
jealous
jeans
jelly
jewel
job
join
joke
journey
joy
judge
juice
jump
jungle
junior
junk
just
kangaroo
keen
keep
ketchup
key
kick
kid
kidney
kind
kingdom
kiss
kit
kitchen
kite
kitten
kiwi
knee
knife
knock
know
lab
label
labor
ladder
lady
lake
lamp
language
laptop
large
later
latin
laugh
laundry
lava
law
lawn
lawsuit
layer
lazy
leader
leaf
learn
leave
lecture
left
leg
legal
legend
leisure
lemon
lend
length
lens
leopard
lesson
letter
level
liar
liberty
library
license
life
lift
light
like
limb
limit
link
lion
liquid
list
little
live
lizard
load
loan
lobster
local
lock
logic
lonely
long
loop
lottery
loud
lounge
love
loyal
lucky
luggage
lumber
lunar
lunch
luxury
lyrics
machine
mad
magic
magnet
maid
mail
main
major
make
mammal
man
manage
mandate
mango
mansion
manual
maple
marble
march
margin
marine
market
marriage
mask
mass
master
match
material
math
matrix
matter
maximum
maze
meadow
mean
measure
meat
mechanic
medal
media
melody
melt
member
memory
mention
menu
mercy
merge
merit
merry
mesh
message
metal
method
middle
midnight
milk
million
mimic
mind
minimum
minor
minute
miracle
mirror
misery
miss
mistake
mix
mixed
mixture
mobile
model
modify
mom
moment
monitor
monkey
monster
month
moon
moral
more
morning
mosquito
mother
motion
motor
mountain
mouse
move
movie
much
muffin
mule
multiply
muscle
museum
mushroom
music
must
mutual
myself
mystery
myth
naive
name
napkin
narrow
nasty
nation
nature
near
neck
need
negative
neglect
neither
nephew
nerve
nest
net
network
neutral
never
news
next
nice
night
noble
noise
nominee
noodle
normal
north
nose
notable
note
nothing
notice
novel
now
nuclear
number
nurse
nut
oak
obey
object
oblige
obscure
observe
obtain
obvious
occur
ocean
october
odor
off
offer
office
often
oil
okay
old
olive
olympic
omit
once
one
onion
online
only
open
opera
opinion
oppose
option
orange
orbit
orchard
order
ordinary
organ
orient
original
orphan
ostrich
other
outdoor
outer
output
outside
oval
oven
over
own
owner
oxygen
oyster
ozone
pact
paddle
page
pair
palace
palm
panda
panel
panic
panther
paper
parade
parent
park
parrot
party
pass
patch
path
patient
patrol
pattern
pause
pave
payment
peace
peanut
pear
peasant
pelican
pen
penalty
pencil
people
pepper
perfect
permit
person
pet
phone
photo
phrase
physical
piano
picnic
picture
piece
pig
pigeon
pill
pilot
pink
pioneer
pipe
pistol
pitch
pizza
place
planet
plastic
plate
play
please
pledge
pluck
plug
plunge
poem
poet
point
polar
pole
police
pond
pony
pool
popular
portion
position
possible
post
potato
pottery
poverty
powder
power
practice
praise
predict
prefer
prepare
present
pretty
prevent
price
pride
primary
print
priority
prison
private
prize
problem
process
produce
profit
program
project
promote
proof
property
prosper
protect
proud
provide
public
pudding
pull
pulp
pulse
pumpkin
punch
pupil
puppy
purchase
purity
purpose
purse
push
put
puzzle
pyramid
quality
quantum
quarter
question
quick
quit
quiz
quote
rabbit
raccoon
race
rack
radar
radio
rail
rain
raise
rally
ramp
ranch
random
range
rapid
rare
rate
rather
raven
raw
razor
ready
real
reason
rebel
rebuild
recall
receive
recipe
record
recycle
reduce
reflect
reform
refuse
region
regret
regular
reject
relax
release
relief
rely
remain
remember
remind
remove
render
renew
rent
reopen
repair
repeat
replace
report
require
rescue
resemble
resist
resource
response
result
retire
retreat
return
reunion
reveal
review
reward
rhythm
rib
ribbon
rice
rich
ride
ridge
rifle
right
rigid
ring
riot
ripple
risk
ritual
rival
river
road
roast
robot
robust
rocket
romance
roof
rookie
room
rose
rotate
rough
round
route
royal
rubber
rude
rug
rule
run
runway
rural
sad
saddle
sadness
safe
sail
salad
salmon
salon
salt
salute
same
sample
sand
satisfy
satoshi
sauce
sausage
save
say
scale
scan
scare
scatter
scene
scheme
school
science
scissors
scorpion
scout
scrap
screen
script
scrub
sea
search
season
seat
second
secret
section
security
seed
seek
segment
select
sell
seminar
senior
sense
sentence
series
service
session
settle
setup
seven
shadow
shaft
shallow
share
shed
shell
sheriff
shield
shift
shine
ship
shiver
shock
shoe
shoot
shop
short
shoulder
shove
shrimp
shrug
shuffle
shy
sibling
sick
side
siege
sight
sign
silent
silk
silly
silver
similar
simple
since
sing
siren
sister
situate
six
size
skate
sketch
ski
skill
skin
skirt
skull
slab
slam
sleep
slender
slice
slide
slight
slim
slogan
slot
slow
slush
small
smart
smile
smoke
smooth
snack
snake
snap
sniff
snow
soap
soccer
social
sock
soda
soft
solar
soldier
solid
solution
solve
someone
song
soon
sorry
sort
soul
sound
soup
source
south
space
spare
spatial
spawn
speak
special
speed
spell
spend
sphere
spice
spider
spike
spin
spirit
split
spoil
sponsor
spoon
sport
spot
spray
spread
spring
spy
square
squeeze
squirrel
stable
stadium
staff
stage
stairs
stamp
stand
start
state
stay
steak
steel
stem
step
stereo
stick
still
sting
stock
stomach
stone
stool
story
stove
strategy
street
strike
strong
struggle
student
stuff
stumble
style
subject
submit
subway
success
such
sudden
suffer
sugar
suggest
suit
summer
sun
sunny
sunset
super
supply
supreme
sure
surface
surge
surprise
surround
survey
suspect
sustain
swallow
swamp
swap
swarm
swear
sweet
swift
swim
swing
switch
sword
symbol
symptom
syrup
system
table
tackle
tag
tail
talent
talk
tank
tape
target
task
taste
tattoo
taxi
teach
team
tell
ten
tenant
tennis
tent
term
test
text
thank
that
theme
then
theory
there
they
thing
this
thought
three
thrive
throw
thumb
thunder
ticket
tide
tiger
tilt
timber
time
tiny
tip
tired
tissue
title
toast
tobacco
today
toddler
toe
together
toilet
token
tomato
tomorrow
tone
tongue
tonight
tool
tooth
top
topic
topple
torch
tornado
tortoise
toss
total
tourist
toward
tower
town
toy
track
trade
traffic
tragic
train
transfer
trap
trash
travel
tray
treat
tree
trend
trial
tribe
trick
trigger
trim
trip
trophy
trouble
truck
true
truly
trumpet
trust
truth
try
tube
tuition
tumble
tuna
tunnel
turkey
turn
turtle
twelve
twenty
twice
twin
twist
two
type
typical
ugly
umbrella
unable
unaware
uncle
uncover
under
undo
unfair
unfold
unhappy
uniform
unique
unit
universe
unknown
unlock
until
unusual
unveil
update
upgrade
uphold
upon
upper
upset
urban
urge
usage
use
used
useful
useless
usual
utility
vacant
vacuum
vague
valid
valley
valve
van
vanish
vapor
various
vast
vault
vehicle
velvet
vendor
venture
venue
verb
verify
version
very
vessel
veteran
viable
vibrant
vicious
victory
video
view
village
vintage
violin
virtual
virus
visa
visit
visual
vital
vivid
vocal
voice
void
volcano
volume
vote
voyage
wage
wagon
wait
walk
wall
walnut
want
warfare
warm
warrior
wash
wasp
waste
water
wave
way
wealth
weapon
wear
weasel
weather
web
wedding
weekend
weird
welcome
west
wet
whale
what
wheat
wheel
when
where
whip
whisper
wide
width
wife
wild
will
win
window
wine
wing
wink
winner
winter
wire
wisdom
wise
wish
witness
wolf
woman
wonder
wood
wool
word
work
world
worry
worth
wrap
wreck
wrestle
wrist
write
wrong
yard
year
yellow
you
young
youth
zebra
zero
zone
zoo`.split("\n");
  }
});

// node_modules/navi-sdk/dist/naviSDK.js
var require_naviSDK = __commonJS({
  "node_modules/navi-sdk/dist/naviSDK.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports2 && exports2.__importStar || /* @__PURE__ */ function() {
      var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys(o);
      };
      return function(mod2) {
        if (mod2 && mod2.__esModule) return mod2;
        var result = {};
        if (mod2 != null) {
          for (var k = ownKeys(mod2), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding2(result, mod2, k[i]);
        }
        __setModuleDefault2(result, mod2);
        return result;
      };
    }();
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NAVISDKClient = void 0;
    var AccountManager_1 = require_AccountManager();
    var PoolInfo_1 = require_PoolInfo();
    var bip39 = __importStar2(require_bip39());
    var english_1 = require_english();
    var address_1 = require_address();
    var PTB_1 = require_PTB();
    var getQuote_1 = require_getQuote();
    var NAVISDKClient = class {
      /**
       * Constructs a new instance of the NAVISDKClient.
       *
       * @param {Object} params - The initialization parameters.
       * @param {string} [params.mnemonic=""] - The mnemonic for account generation. If not provided, a new one will be generated.
       * @param {string} params.networkType - The network type to connect to. Defaults to "mainnet" if not specified.
       * @param {number} [params.wordLength=12] - The word length for the mnemonic. Can be 12 or 24.
       * @param {number} [params.numberOfAccounts=10] - The number of accounts to generate.
       * @param {string[]} [params.privateKeyList=[""]] - A list of private keys for account initialization.
       */
      constructor({ mnemonic = "", networkType, wordLength = 12, numberOfAccounts = 10, privateKeyList = [""] } = {}) {
        this.accounts = [];
        this.mnemonic = "";
        this.networkType = "";
        this.networkType = networkType || "mainnet";
        if (privateKeyList && privateKeyList.length > 0 && privateKeyList[0] !== "") {
          this.accounts = privateKeyList.map((privateKey) => new AccountManager_1.AccountManager({ privateKey, network: this.networkType }));
        } else {
          this.mnemonic = mnemonic !== "" ? mnemonic : bip39.generateMnemonic(english_1.wordlist, wordLength === 12 ? 128 : 256);
          for (let i = 0; i < numberOfAccounts; i++) {
            this.account = new AccountManager_1.AccountManager({ mnemonic: this.mnemonic, network: this.networkType, accountIndex: i });
            this.accounts.push(this.account);
          }
        }
        console.log("Network Type:", this.networkType);
      }
      /**
       * Retrieves all accounts stored in the Navi SDK.
       * @returns An array of all accounts.
       */
      getAllAccounts() {
        this.accounts.forEach((account, index) => {
          console.log(`index: ${index}, address: ${account.getPublicKey()}`);
        });
        return this.accounts;
      }
      /**
       * Retrieves the mnemonic associated with the Navi SDK instance.
       * @returns The mnemonic string.
       */
      getMnemonic() {
        console.log(`mnemonic: ${this.mnemonic}`);
        return this.mnemonic;
      }
      /**
       * Retrieves the pool information for a specific coin symbol.
       * If no coin symbol is provided, it retrieves the pool information for all coins.
       * @param coinType - The data type of the coin for which to retrieve the pool information.
       * @returns A Promise that resolves to the pool information.
       */
      getPoolInfo(coinType) {
        return __awaiter2(this, void 0, void 0, function* () {
          return (0, PoolInfo_1.getPoolInfo)(coinType, this.accounts[0].client);
        });
      }
      /**
       * Retrieves the reserve detail for a given asset ID.
       * @param coinType - The CoinInfo data type for which to retrieve the reserve detail.
       * @returns A Promise that resolves when the reserve detail is retrieved.
       */
      getReserveDetail(coinType) {
        return __awaiter2(this, void 0, void 0, function* () {
          const reserve = address_1.pool[coinType.symbol];
          return this.accounts[0].getReservesDetail(reserve.assetId);
        });
      }
      /**
       * Retrieves the health factor for a given address.
       * @param address - The address for which to retrieve the health factor.
       * @returns A promise that resolves to the health factor value.
       */
      getHealthFactor(address) {
        return __awaiter2(this, void 0, void 0, function* () {
          if (this.accounts.length === 0) {
            this.account = new AccountManager_1.AccountManager();
            this.accounts.push(this.account);
            yield this.accounts[0].getHealthFactor(address);
            this.accounts.splice(0, 1);
          }
          return this.accounts[0].getHealthFactor(address);
        });
      }
      /**
       * Retrieves the dynamic health factor for a given address and pool.
       * @param address - The address to retrieve the dynamic health factor for.
       * @param coinType - The type of the pool.
       * @param estimateSupply - The estimated supply value.
       * @param estimateBorrow - The estimated borrow value.
       * @param isIncrease - A boolean indicating whether the estimated supply or borrow is increasing (default: true).
       * @returns A Promise that resolves to the dynamic health factor.
       */
      getDynamicHealthFactor(address_2, coinType_1, estimateSupply_1, estimateBorrow_1) {
        return __awaiter2(this, arguments, void 0, function* (address, coinType, estimateSupply, estimateBorrow, isIncrease = true) {
          if (this.accounts.length === 0) {
            this.account = new AccountManager_1.AccountManager();
            this.accounts.push(this.account);
            yield this.accounts[0].getDynamicHealthFactor(address, coinType, estimateSupply, estimateBorrow, isIncrease);
            this.accounts.splice(0, 1);
          }
          return this.accounts[0].getDynamicHealthFactor(address, coinType, estimateSupply, estimateBorrow, isIncrease);
        });
      }
      /**
       * Retrieves all NAVI portfolios for the accounts.
       * @returns A promise that resolves to an array of results for each account.
       */
      getAllNaviPortfolios() {
        return __awaiter2(this, void 0, void 0, function* () {
          const results = yield Promise.all(this.accounts.map((account) => account.getNAVIPortfolio(account.address, false)));
          const balanceMap = /* @__PURE__ */ new Map();
          results.forEach((result) => {
            result.forEach((value, key) => {
              const balance = balanceMap.get(key) || { borrowBalance: 0, supplyBalance: 0 };
              balance.borrowBalance += value.borrowBalance;
              balance.supplyBalance += value.supplyBalance;
              balanceMap.set(key, balance);
            });
          });
          return balanceMap;
        });
      }
      /**
       * Retrieves the balances of all accounts.
       * @returns A record containing the balances of each coin.
       */
      getAllBalances() {
        return __awaiter2(this, void 0, void 0, function* () {
          const balancePromises = this.accounts.map((account) => account.getWalletBalance(false));
          const balancesAll = yield Promise.all(balancePromises);
          const coinBalances = {};
          balancesAll.forEach((balance) => {
            Object.entries(balance).forEach(([coin, amount]) => {
              coinBalances[coin] = (coinBalances[coin] || 0) + amount;
            });
          });
          return coinBalances;
        });
      }
      /**
       * Checks the available rewards for a given address.
       * @param address - The address to check rewards for.
       * @param option - The option type for rewards.
       * @returns A promise that resolves with the available rewards.
       */
      getAddressAvailableRewards() {
        return __awaiter2(this, arguments, void 0, function* (address = this.accounts[0].address, option = [1]) {
          const client = this.accounts[0].client;
          return (0, PTB_1.getAvailableRewards)(client, address, option, true);
        });
      }
      /**
       * Retrieves the claimed rewards history for a given user address.
       * @param userAddress - The address of the user to retrieve the rewards history for. Defaults to the first account's address.
       * @param page - The page number to retrieve. Defaults to 1.
       * @param size - The number of records per page. Defaults to 400.
       * @returns A promise that resolves with the user's claimed rewards history.
       */
      getClaimedRewardsHistory() {
        return __awaiter2(this, arguments, void 0, function* (userAddress = this.accounts[0].address, page = 1, size = 400) {
          return (0, PoolInfo_1.getUserRewardHistory)(userAddress, page, size);
        });
      }
      /**
       * Retrieves a quote for swapping one coin to another.
       * @param fromCoinAddress - The address of the coin to swap from.
       * @param toCoinAddress - The address of the coin to swap to.
       * @param amountIn - The amount of the fromCoin to swap. Can be a number, string, or bigint.
       * @param apiKey - The API key for authentication.
       * @param swapOptions - Optional. The options for the swap, including baseUrl, dexList, byAmountIn, and depth.
       * @returns A promise that resolves with the quote for the swap.
       */
      getQuote(fromCoinAddress_1, toCoinAddress_1, amountIn_1, apiKey_1) {
        return __awaiter2(this, arguments, void 0, function* (fromCoinAddress, toCoinAddress, amountIn, apiKey, swapOptions = { baseUrl: void 0, dexList: [], byAmountIn: true, depth: 3 }) {
          return (0, getQuote_1.getQuote)(fromCoinAddress, toCoinAddress, amountIn, apiKey, swapOptions);
        });
      }
    };
    exports2.NAVISDKClient = NAVISDKClient;
  }
});

// node_modules/@mayanfinance/swap-sdk/node_modules/cross-fetch/dist/browser-ponyfill.js
var require_browser_ponyfill = __commonJS({
  "node_modules/@mayanfinance/swap-sdk/node_modules/cross-fetch/dist/browser-ponyfill.js"(exports2, module2) {
    var __global__ = typeof globalThis !== "undefined" && globalThis || typeof self !== "undefined" && self || typeof global !== "undefined" && global;
    var __globalThis__ = function() {
      function F() {
        this.fetch = false;
        this.DOMException = __global__.DOMException;
      }
      F.prototype = __global__;
      return new F();
    }();
    (function(globalThis2) {
      var irrelevant = function(exports3) {
        var g = typeof globalThis2 !== "undefined" && globalThis2 || typeof self !== "undefined" && self || // eslint-disable-next-line no-undef
        typeof global !== "undefined" && global || {};
        var support = {
          searchParams: "URLSearchParams" in g,
          iterable: "Symbol" in g && "iterator" in Symbol,
          blob: "FileReader" in g && "Blob" in g && function() {
            try {
              new Blob();
              return true;
            } catch (e) {
              return false;
            }
          }(),
          formData: "FormData" in g,
          arrayBuffer: "ArrayBuffer" in g
        };
        function isDataView(obj) {
          return obj && DataView.prototype.isPrototypeOf(obj);
        }
        if (support.arrayBuffer) {
          var viewClasses = [
            "[object Int8Array]",
            "[object Uint8Array]",
            "[object Uint8ClampedArray]",
            "[object Int16Array]",
            "[object Uint16Array]",
            "[object Int32Array]",
            "[object Uint32Array]",
            "[object Float32Array]",
            "[object Float64Array]"
          ];
          var isArrayBufferView = ArrayBuffer.isView || function(obj) {
            return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
          };
        }
        function normalizeName(name) {
          if (typeof name !== "string") {
            name = String(name);
          }
          if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === "") {
            throw new TypeError('Invalid character in header field name: "' + name + '"');
          }
          return name.toLowerCase();
        }
        function normalizeValue(value) {
          if (typeof value !== "string") {
            value = String(value);
          }
          return value;
        }
        function iteratorFor(items) {
          var iterator = {
            next: function() {
              var value = items.shift();
              return { done: value === void 0, value };
            }
          };
          if (support.iterable) {
            iterator[Symbol.iterator] = function() {
              return iterator;
            };
          }
          return iterator;
        }
        function Headers2(headers) {
          this.map = {};
          if (headers instanceof Headers2) {
            headers.forEach(function(value, name) {
              this.append(name, value);
            }, this);
          } else if (Array.isArray(headers)) {
            headers.forEach(function(header) {
              if (header.length != 2) {
                throw new TypeError("Headers constructor: expected name/value pair to be length 2, found" + header.length);
              }
              this.append(header[0], header[1]);
            }, this);
          } else if (headers) {
            Object.getOwnPropertyNames(headers).forEach(function(name) {
              this.append(name, headers[name]);
            }, this);
          }
        }
        Headers2.prototype.append = function(name, value) {
          name = normalizeName(name);
          value = normalizeValue(value);
          var oldValue = this.map[name];
          this.map[name] = oldValue ? oldValue + ", " + value : value;
        };
        Headers2.prototype["delete"] = function(name) {
          delete this.map[normalizeName(name)];
        };
        Headers2.prototype.get = function(name) {
          name = normalizeName(name);
          return this.has(name) ? this.map[name] : null;
        };
        Headers2.prototype.has = function(name) {
          return this.map.hasOwnProperty(normalizeName(name));
        };
        Headers2.prototype.set = function(name, value) {
          this.map[normalizeName(name)] = normalizeValue(value);
        };
        Headers2.prototype.forEach = function(callback, thisArg) {
          for (var name in this.map) {
            if (this.map.hasOwnProperty(name)) {
              callback.call(thisArg, this.map[name], name, this);
            }
          }
        };
        Headers2.prototype.keys = function() {
          var items = [];
          this.forEach(function(value, name) {
            items.push(name);
          });
          return iteratorFor(items);
        };
        Headers2.prototype.values = function() {
          var items = [];
          this.forEach(function(value) {
            items.push(value);
          });
          return iteratorFor(items);
        };
        Headers2.prototype.entries = function() {
          var items = [];
          this.forEach(function(value, name) {
            items.push([name, value]);
          });
          return iteratorFor(items);
        };
        if (support.iterable) {
          Headers2.prototype[Symbol.iterator] = Headers2.prototype.entries;
        }
        function consumed(body) {
          if (body._noBody) return;
          if (body.bodyUsed) {
            return Promise.reject(new TypeError("Already read"));
          }
          body.bodyUsed = true;
        }
        function fileReaderReady(reader) {
          return new Promise(function(resolve, reject) {
            reader.onload = function() {
              resolve(reader.result);
            };
            reader.onerror = function() {
              reject(reader.error);
            };
          });
        }
        function readBlobAsArrayBuffer(blob3) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          reader.readAsArrayBuffer(blob3);
          return promise;
        }
        function readBlobAsText(blob3) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          var match = /charset=([A-Za-z0-9_-]+)/.exec(blob3.type);
          var encoding = match ? match[1] : "utf-8";
          reader.readAsText(blob3, encoding);
          return promise;
        }
        function readArrayBufferAsText(buf) {
          var view = new Uint8Array(buf);
          var chars = new Array(view.length);
          for (var i = 0; i < view.length; i++) {
            chars[i] = String.fromCharCode(view[i]);
          }
          return chars.join("");
        }
        function bufferClone(buf) {
          if (buf.slice) {
            return buf.slice(0);
          } else {
            var view = new Uint8Array(buf.byteLength);
            view.set(new Uint8Array(buf));
            return view.buffer;
          }
        }
        function Body() {
          this.bodyUsed = false;
          this._initBody = function(body) {
            this.bodyUsed = this.bodyUsed;
            this._bodyInit = body;
            if (!body) {
              this._noBody = true;
              this._bodyText = "";
            } else if (typeof body === "string") {
              this._bodyText = body;
            } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
              this._bodyBlob = body;
            } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
              this._bodyFormData = body;
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
              this._bodyText = body.toString();
            } else if (support.arrayBuffer && support.blob && isDataView(body)) {
              this._bodyArrayBuffer = bufferClone(body.buffer);
              this._bodyInit = new Blob([this._bodyArrayBuffer]);
            } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
              this._bodyArrayBuffer = bufferClone(body);
            } else {
              this._bodyText = body = Object.prototype.toString.call(body);
            }
            if (!this.headers.get("content-type")) {
              if (typeof body === "string") {
                this.headers.set("content-type", "text/plain;charset=UTF-8");
              } else if (this._bodyBlob && this._bodyBlob.type) {
                this.headers.set("content-type", this._bodyBlob.type);
              } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
              }
            }
          };
          if (support.blob) {
            this.blob = function() {
              var rejected = consumed(this);
              if (rejected) {
                return rejected;
              }
              if (this._bodyBlob) {
                return Promise.resolve(this._bodyBlob);
              } else if (this._bodyArrayBuffer) {
                return Promise.resolve(new Blob([this._bodyArrayBuffer]));
              } else if (this._bodyFormData) {
                throw new Error("could not read FormData body as blob");
              } else {
                return Promise.resolve(new Blob([this._bodyText]));
              }
            };
          }
          this.arrayBuffer = function() {
            if (this._bodyArrayBuffer) {
              var isConsumed = consumed(this);
              if (isConsumed) {
                return isConsumed;
              } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
                return Promise.resolve(
                  this._bodyArrayBuffer.buffer.slice(
                    this._bodyArrayBuffer.byteOffset,
                    this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
                  )
                );
              } else {
                return Promise.resolve(this._bodyArrayBuffer);
              }
            } else if (support.blob) {
              return this.blob().then(readBlobAsArrayBuffer);
            } else {
              throw new Error("could not read as ArrayBuffer");
            }
          };
          this.text = function() {
            var rejected = consumed(this);
            if (rejected) {
              return rejected;
            }
            if (this._bodyBlob) {
              return readBlobAsText(this._bodyBlob);
            } else if (this._bodyArrayBuffer) {
              return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
            } else if (this._bodyFormData) {
              throw new Error("could not read FormData body as text");
            } else {
              return Promise.resolve(this._bodyText);
            }
          };
          if (support.formData) {
            this.formData = function() {
              return this.text().then(decode2);
            };
          }
          this.json = function() {
            return this.text().then(JSON.parse);
          };
          return this;
        }
        var methods = ["CONNECT", "DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT", "TRACE"];
        function normalizeMethod(method2) {
          var upcased = method2.toUpperCase();
          return methods.indexOf(upcased) > -1 ? upcased : method2;
        }
        function Request2(input, options) {
          if (!(this instanceof Request2)) {
            throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
          }
          options = options || {};
          var body = options.body;
          if (input instanceof Request2) {
            if (input.bodyUsed) {
              throw new TypeError("Already read");
            }
            this.url = input.url;
            this.credentials = input.credentials;
            if (!options.headers) {
              this.headers = new Headers2(input.headers);
            }
            this.method = input.method;
            this.mode = input.mode;
            this.signal = input.signal;
            if (!body && input._bodyInit != null) {
              body = input._bodyInit;
              input.bodyUsed = true;
            }
          } else {
            this.url = String(input);
          }
          this.credentials = options.credentials || this.credentials || "same-origin";
          if (options.headers || !this.headers) {
            this.headers = new Headers2(options.headers);
          }
          this.method = normalizeMethod(options.method || this.method || "GET");
          this.mode = options.mode || this.mode || null;
          this.signal = options.signal || this.signal || function() {
            if ("AbortController" in g) {
              var ctrl = new AbortController();
              return ctrl.signal;
            }
          }();
          this.referrer = null;
          if ((this.method === "GET" || this.method === "HEAD") && body) {
            throw new TypeError("Body not allowed for GET or HEAD requests");
          }
          this._initBody(body);
          if (this.method === "GET" || this.method === "HEAD") {
            if (options.cache === "no-store" || options.cache === "no-cache") {
              var reParamSearch = /([?&])_=[^&]*/;
              if (reParamSearch.test(this.url)) {
                this.url = this.url.replace(reParamSearch, "$1_=" + (/* @__PURE__ */ new Date()).getTime());
              } else {
                var reQueryString = /\?/;
                this.url += (reQueryString.test(this.url) ? "&" : "?") + "_=" + (/* @__PURE__ */ new Date()).getTime();
              }
            }
          }
        }
        Request2.prototype.clone = function() {
          return new Request2(this, { body: this._bodyInit });
        };
        function decode2(body) {
          var form = new FormData();
          body.trim().split("&").forEach(function(bytes) {
            if (bytes) {
              var split2 = bytes.split("=");
              var name = split2.shift().replace(/\+/g, " ");
              var value = split2.join("=").replace(/\+/g, " ");
              form.append(decodeURIComponent(name), decodeURIComponent(value));
            }
          });
          return form;
        }
        function parseHeaders(rawHeaders) {
          var headers = new Headers2();
          var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
          preProcessedHeaders.split("\r").map(function(header) {
            return header.indexOf("\n") === 0 ? header.substr(1, header.length) : header;
          }).forEach(function(line) {
            var parts = line.split(":");
            var key = parts.shift().trim();
            if (key) {
              var value = parts.join(":").trim();
              try {
                headers.append(key, value);
              } catch (error) {
                console.warn("Response " + error.message);
              }
            }
          });
          return headers;
        }
        Body.call(Request2.prototype);
        function Response2(bodyInit, options) {
          if (!(this instanceof Response2)) {
            throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
          }
          if (!options) {
            options = {};
          }
          this.type = "default";
          this.status = options.status === void 0 ? 200 : options.status;
          if (this.status < 200 || this.status > 599) {
            throw new RangeError("Failed to construct 'Response': The status provided (0) is outside the range [200, 599].");
          }
          this.ok = this.status >= 200 && this.status < 300;
          this.statusText = options.statusText === void 0 ? "" : "" + options.statusText;
          this.headers = new Headers2(options.headers);
          this.url = options.url || "";
          this._initBody(bodyInit);
        }
        Body.call(Response2.prototype);
        Response2.prototype.clone = function() {
          return new Response2(this._bodyInit, {
            status: this.status,
            statusText: this.statusText,
            headers: new Headers2(this.headers),
            url: this.url
          });
        };
        Response2.error = function() {
          var response = new Response2(null, { status: 200, statusText: "" });
          response.ok = false;
          response.status = 0;
          response.type = "error";
          return response;
        };
        var redirectStatuses = [301, 302, 303, 307, 308];
        Response2.redirect = function(url, status) {
          if (redirectStatuses.indexOf(status) === -1) {
            throw new RangeError("Invalid status code");
          }
          return new Response2(null, { status, headers: { location: url } });
        };
        exports3.DOMException = g.DOMException;
        try {
          new exports3.DOMException();
        } catch (err) {
          exports3.DOMException = function(message, name) {
            this.message = message;
            this.name = name;
            var error = Error(message);
            this.stack = error.stack;
          };
          exports3.DOMException.prototype = Object.create(Error.prototype);
          exports3.DOMException.prototype.constructor = exports3.DOMException;
        }
        function fetch2(input, init) {
          return new Promise(function(resolve, reject) {
            var request = new Request2(input, init);
            if (request.signal && request.signal.aborted) {
              return reject(new exports3.DOMException("Aborted", "AbortError"));
            }
            var xhr = new XMLHttpRequest();
            function abortXhr() {
              xhr.abort();
            }
            xhr.onload = function() {
              var options = {
                statusText: xhr.statusText,
                headers: parseHeaders(xhr.getAllResponseHeaders() || "")
              };
              if (request.url.indexOf("file://") === 0 && (xhr.status < 200 || xhr.status > 599)) {
                options.status = 200;
              } else {
                options.status = xhr.status;
              }
              options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
              var body = "response" in xhr ? xhr.response : xhr.responseText;
              setTimeout(function() {
                resolve(new Response2(body, options));
              }, 0);
            };
            xhr.onerror = function() {
              setTimeout(function() {
                reject(new TypeError("Network request failed"));
              }, 0);
            };
            xhr.ontimeout = function() {
              setTimeout(function() {
                reject(new TypeError("Network request timed out"));
              }, 0);
            };
            xhr.onabort = function() {
              setTimeout(function() {
                reject(new exports3.DOMException("Aborted", "AbortError"));
              }, 0);
            };
            function fixUrl(url) {
              try {
                return url === "" && g.location.href ? g.location.href : url;
              } catch (e) {
                return url;
              }
            }
            xhr.open(request.method, fixUrl(request.url), true);
            if (request.credentials === "include") {
              xhr.withCredentials = true;
            } else if (request.credentials === "omit") {
              xhr.withCredentials = false;
            }
            if ("responseType" in xhr) {
              if (support.blob) {
                xhr.responseType = "blob";
              } else if (support.arrayBuffer) {
                xhr.responseType = "arraybuffer";
              }
            }
            if (init && typeof init.headers === "object" && !(init.headers instanceof Headers2 || g.Headers && init.headers instanceof g.Headers)) {
              var names = [];
              Object.getOwnPropertyNames(init.headers).forEach(function(name) {
                names.push(normalizeName(name));
                xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
              });
              request.headers.forEach(function(value, name) {
                if (names.indexOf(name) === -1) {
                  xhr.setRequestHeader(name, value);
                }
              });
            } else {
              request.headers.forEach(function(value, name) {
                xhr.setRequestHeader(name, value);
              });
            }
            if (request.signal) {
              request.signal.addEventListener("abort", abortXhr);
              xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                  request.signal.removeEventListener("abort", abortXhr);
                }
              };
            }
            xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
          });
        }
        fetch2.polyfill = true;
        if (!g.fetch) {
          g.fetch = fetch2;
          g.Headers = Headers2;
          g.Request = Request2;
          g.Response = Response2;
        }
        exports3.Headers = Headers2;
        exports3.Request = Request2;
        exports3.Response = Response2;
        exports3.fetch = fetch2;
        Object.defineProperty(exports3, "__esModule", { value: true });
        return exports3;
      }({});
    })(__globalThis__);
    __globalThis__.fetch.ponyfill = true;
    delete __globalThis__.fetch.polyfill;
    var ctx = __global__.fetch ? __global__ : __globalThis__;
    exports2 = ctx.fetch;
    exports2.default = ctx.fetch;
    exports2.fetch = ctx.fetch;
    exports2.Headers = ctx.Headers;
    exports2.Request = ctx.Request;
    exports2.Response = ctx.Response;
    module2.exports = exports2;
  }
});

// node_modules/ethers/node_modules/tslib/tslib.es6.mjs
var tslib_es6_exports = {};
__export(tslib_es6_exports, {
  __addDisposableResource: () => __addDisposableResource,
  __assign: () => __assign,
  __asyncDelegator: () => __asyncDelegator,
  __asyncGenerator: () => __asyncGenerator,
  __asyncValues: () => __asyncValues,
  __await: () => __await,
  __awaiter: () => __awaiter,
  __classPrivateFieldGet: () => __classPrivateFieldGet,
  __classPrivateFieldIn: () => __classPrivateFieldIn,
  __classPrivateFieldSet: () => __classPrivateFieldSet,
  __createBinding: () => __createBinding,
  __decorate: () => __decorate,
  __disposeResources: () => __disposeResources,
  __esDecorate: () => __esDecorate,
  __exportStar: () => __exportStar,
  __extends: () => __extends,
  __generator: () => __generator,
  __importDefault: () => __importDefault,
  __importStar: () => __importStar,
  __makeTemplateObject: () => __makeTemplateObject,
  __metadata: () => __metadata,
  __param: () => __param,
  __propKey: () => __propKey,
  __read: () => __read,
  __rest: () => __rest,
  __runInitializers: () => __runInitializers,
  __setFunctionName: () => __setFunctionName,
  __spread: () => __spread,
  __spreadArray: () => __spreadArray,
  __spreadArrays: () => __spreadArrays,
  __values: () => __values,
  default: () => tslib_es6_default
});
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f2) {
    if (f2 !== void 0 && typeof f2 !== "function") throw new TypeError("Function expected");
    return f2;
  }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _, done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
    var context = {};
    for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
    for (var p in contextIn.access) context.access[p] = contextIn.access[p];
    context.addInitializer = function(f2) {
      if (done) throw new TypeError("Cannot add initializers after decoration has completed");
      extraInitializers.push(accept(f2 || null));
    };
    var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
    if (kind === "accessor") {
      if (result === void 0) continue;
      if (result === null || typeof result !== "object") throw new TypeError("Object expected");
      if (_ = accept(result.get)) descriptor.get = _;
      if (_ = accept(result.set)) descriptor.set = _;
      if (_ = accept(result.init)) initializers.unshift(_);
    } else if (_ = accept(result)) {
      if (kind === "field") initializers.unshift(_);
      else descriptor[key] = _;
    }
  }
  if (target) Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
}
function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
}
function __propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
}
function __setFunctionName(f2, name, prefix) {
  if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f2, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1) throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f2, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
  return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f2) throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _) try {
      if (f2 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _.label++;
          return { value: op[1], done: false };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2];
            _.ops.push(op);
            break;
          }
          if (t[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f2 = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __exportStar(m, o) {
  for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
}
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read(arguments[i]));
  return ar;
}
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function awaitReturn(f2) {
    return function(v) {
      return Promise.resolve(v).then(f2, reject);
    };
  }
  function verb(n, f2) {
    if (g[n]) {
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
      if (f2) i[n] = f2(i[n]);
    }
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f2, v) {
    if (f2(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function(e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function() {
    return this;
  }, i;
  function verb(n, f2) {
    i[n] = o[n] ? function(v) {
      return (p = !p) ? { value: __await(o[n](v)), done: false } : f2 ? f2(v) : v;
    } : f2;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar(mod2) {
  if (mod2 && mod2.__esModule) return mod2;
  var result = {};
  if (mod2 != null) {
    for (var k in mod2) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod2, k)) __createBinding(result, mod2, k);
  }
  __setModuleDefault(result, mod2);
  return result;
}
function __importDefault(mod2) {
  return mod2 && mod2.__esModule ? mod2 : { default: mod2 };
}
function __classPrivateFieldGet(receiver, state, kind, f2) {
  if (kind === "a" && !f2) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f2) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f2) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state.set(receiver, value), value;
}
function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}
function __addDisposableResource(env, value, async) {
  if (value !== null && value !== void 0) {
    if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
    var dispose, inner;
    if (async) {
      if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
      dispose = value[Symbol.asyncDispose];
    }
    if (dispose === void 0) {
      if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
      dispose = value[Symbol.dispose];
      if (async) inner = dispose;
    }
    if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
    if (inner) dispose = function() {
      try {
        inner.call(this);
      } catch (e) {
        return Promise.reject(e);
      }
    };
    env.stack.push({ value, dispose, async });
  } else if (async) {
    env.stack.push({ async: true });
  }
  return value;
}
function __disposeResources(env) {
  function fail(e) {
    env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
    env.hasError = true;
  }
  var r, s = 0;
  function next() {
    while (r = env.stack.pop()) {
      try {
        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);
        if (r.dispose) {
          var result = r.dispose.call(r.value);
          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) {
            fail(e);
            return next();
          });
        } else s |= 1;
      } catch (e) {
        fail(e);
      }
    }
    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();
    if (env.hasError) throw env.error;
  }
  return next();
}
var extendStatics, __assign, __createBinding, __setModuleDefault, _SuppressedError, tslib_es6_default;
var init_tslib_es6 = __esm({
  "node_modules/ethers/node_modules/tslib/tslib.es6.mjs"() {
    extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
      };
      return extendStatics(d, b);
    };
    __assign = function() {
      __assign = Object.assign || function __assign2(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    __createBinding = Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    };
    __setModuleDefault = Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    };
    _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
      var e = new Error(message);
      return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };
    tslib_es6_default = {
      __extends,
      __assign,
      __rest,
      __decorate,
      __param,
      __metadata,
      __awaiter,
      __generator,
      __createBinding,
      __exportStar,
      __values,
      __read,
      __spread,
      __spreadArrays,
      __spreadArray,
      __await,
      __asyncGenerator,
      __asyncDelegator,
      __asyncValues,
      __makeTemplateObject,
      __importStar,
      __importDefault,
      __classPrivateFieldGet,
      __classPrivateFieldSet,
      __classPrivateFieldIn,
      __addDisposableResource,
      __disposeResources
    };
  }
});

// node_modules/ethers/lib.commonjs/_version.js
var require_version2 = __commonJS({
  "node_modules/ethers/lib.commonjs/_version.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.version = void 0;
    exports2.version = "6.13.5";
  }
});

// node_modules/ethers/lib.commonjs/utils/properties.js
var require_properties = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/properties.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defineProperties = exports2.resolveProperties = void 0;
    function checkType(value, type2, name) {
      const types = type2.split("|").map((t) => t.trim());
      for (let i = 0; i < types.length; i++) {
        switch (type2) {
          case "any":
            return;
          case "bigint":
          case "boolean":
          case "number":
          case "string":
            if (typeof value === type2) {
              return;
            }
        }
      }
      const error = new Error(`invalid value for type ${type2}`);
      error.code = "INVALID_ARGUMENT";
      error.argument = `value.${name}`;
      error.value = value;
      throw error;
    }
    async function resolveProperties(value) {
      const keys = Object.keys(value);
      const results = await Promise.all(keys.map((k) => Promise.resolve(value[k])));
      return results.reduce((accum, v, index) => {
        accum[keys[index]] = v;
        return accum;
      }, {});
    }
    exports2.resolveProperties = resolveProperties;
    function defineProperties(target, values, types) {
      for (let key in values) {
        let value = values[key];
        const type2 = types ? types[key] : null;
        if (type2) {
          checkType(value, type2, key);
        }
        Object.defineProperty(target, key, { enumerable: true, value, writable: false });
      }
    }
    exports2.defineProperties = defineProperties;
  }
});

// node_modules/ethers/lib.commonjs/utils/errors.js
var require_errors4 = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/errors.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.assertPrivate = exports2.assertNormalize = exports2.assertArgumentCount = exports2.assertArgument = exports2.assert = exports2.makeError = exports2.isCallException = exports2.isError = void 0;
    var _version_js_1 = require_version2();
    var properties_js_1 = require_properties();
    function stringify2(value) {
      if (value == null) {
        return "null";
      }
      if (Array.isArray(value)) {
        return "[ " + value.map(stringify2).join(", ") + " ]";
      }
      if (value instanceof Uint8Array) {
        const HEX = "0123456789abcdef";
        let result = "0x";
        for (let i = 0; i < value.length; i++) {
          result += HEX[value[i] >> 4];
          result += HEX[value[i] & 15];
        }
        return result;
      }
      if (typeof value === "object" && typeof value.toJSON === "function") {
        return stringify2(value.toJSON());
      }
      switch (typeof value) {
        case "boolean":
        case "symbol":
          return value.toString();
        case "bigint":
          return BigInt(value).toString();
        case "number":
          return value.toString();
        case "string":
          return JSON.stringify(value);
        case "object": {
          const keys = Object.keys(value);
          keys.sort();
          return "{ " + keys.map((k) => `${stringify2(k)}: ${stringify2(value[k])}`).join(", ") + " }";
        }
      }
      return `[ COULD NOT SERIALIZE ]`;
    }
    function isError(error, code) {
      return error && error.code === code;
    }
    exports2.isError = isError;
    function isCallException(error) {
      return isError(error, "CALL_EXCEPTION");
    }
    exports2.isCallException = isCallException;
    function makeError(message, code, info) {
      let shortMessage = message;
      {
        const details = [];
        if (info) {
          if ("message" in info || "code" in info || "name" in info) {
            throw new Error(`value will overwrite populated values: ${stringify2(info)}`);
          }
          for (const key in info) {
            if (key === "shortMessage") {
              continue;
            }
            const value = info[key];
            details.push(key + "=" + stringify2(value));
          }
        }
        details.push(`code=${code}`);
        details.push(`version=${_version_js_1.version}`);
        if (details.length) {
          message += " (" + details.join(", ") + ")";
        }
      }
      let error;
      switch (code) {
        case "INVALID_ARGUMENT":
          error = new TypeError(message);
          break;
        case "NUMERIC_FAULT":
        case "BUFFER_OVERRUN":
          error = new RangeError(message);
          break;
        default:
          error = new Error(message);
      }
      (0, properties_js_1.defineProperties)(error, { code });
      if (info) {
        Object.assign(error, info);
      }
      if (error.shortMessage == null) {
        (0, properties_js_1.defineProperties)(error, { shortMessage });
      }
      return error;
    }
    exports2.makeError = makeError;
    function assert3(check, message, code, info) {
      if (!check) {
        throw makeError(message, code, info);
      }
    }
    exports2.assert = assert3;
    function assertArgument(check, message, name, value) {
      assert3(check, message, "INVALID_ARGUMENT", { argument: name, value });
    }
    exports2.assertArgument = assertArgument;
    function assertArgumentCount(count, expectedCount, message) {
      if (message == null) {
        message = "";
      }
      if (message) {
        message = ": " + message;
      }
      assert3(count >= expectedCount, "missing argument" + message, "MISSING_ARGUMENT", {
        count,
        expectedCount
      });
      assert3(count <= expectedCount, "too many arguments" + message, "UNEXPECTED_ARGUMENT", {
        count,
        expectedCount
      });
    }
    exports2.assertArgumentCount = assertArgumentCount;
    var _normalizeForms = ["NFD", "NFC", "NFKD", "NFKC"].reduce((accum, form) => {
      try {
        if ("test".normalize(form) !== "test") {
          throw new Error("bad");
        }
        ;
        if (form === "NFD") {
          const check = String.fromCharCode(233).normalize("NFD");
          const expected = String.fromCharCode(101, 769);
          if (check !== expected) {
            throw new Error("broken");
          }
        }
        accum.push(form);
      } catch (error) {
      }
      return accum;
    }, []);
    function assertNormalize(form) {
      assert3(_normalizeForms.indexOf(form) >= 0, "platform missing String.prototype.normalize", "UNSUPPORTED_OPERATION", {
        operation: "String.prototype.normalize",
        info: { form }
      });
    }
    exports2.assertNormalize = assertNormalize;
    function assertPrivate(givenGuard, guard, className) {
      if (className == null) {
        className = "";
      }
      if (givenGuard !== guard) {
        let method2 = className, operation = "new";
        if (className) {
          method2 += ".";
          operation += " " + className;
        }
        assert3(false, `private constructor; use ${method2}from* methods`, "UNSUPPORTED_OPERATION", {
          operation
        });
      }
    }
    exports2.assertPrivate = assertPrivate;
  }
});

// node_modules/ethers/lib.commonjs/utils/data.js
var require_data = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/data.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.zeroPadBytes = exports2.zeroPadValue = exports2.stripZerosLeft = exports2.dataSlice = exports2.dataLength = exports2.concat = exports2.hexlify = exports2.isBytesLike = exports2.isHexString = exports2.getBytesCopy = exports2.getBytes = void 0;
    var errors_js_1 = require_errors4();
    function _getBytes(value, name, copy) {
      if (value instanceof Uint8Array) {
        if (copy) {
          return new Uint8Array(value);
        }
        return value;
      }
      if (typeof value === "string" && value.match(/^0x(?:[0-9a-f][0-9a-f])*$/i)) {
        const result = new Uint8Array((value.length - 2) / 2);
        let offset2 = 2;
        for (let i = 0; i < result.length; i++) {
          result[i] = parseInt(value.substring(offset2, offset2 + 2), 16);
          offset2 += 2;
        }
        return result;
      }
      (0, errors_js_1.assertArgument)(false, "invalid BytesLike value", name || "value", value);
    }
    function getBytes(value, name) {
      return _getBytes(value, name, false);
    }
    exports2.getBytes = getBytes;
    function getBytesCopy(value, name) {
      return _getBytes(value, name, true);
    }
    exports2.getBytesCopy = getBytesCopy;
    function isHexString(value, length) {
      if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
        return false;
      }
      if (typeof length === "number" && value.length !== 2 + 2 * length) {
        return false;
      }
      if (length === true && value.length % 2 !== 0) {
        return false;
      }
      return true;
    }
    exports2.isHexString = isHexString;
    function isBytesLike(value) {
      return isHexString(value, true) || value instanceof Uint8Array;
    }
    exports2.isBytesLike = isBytesLike;
    var HexCharacters = "0123456789abcdef";
    function hexlify(data) {
      const bytes = getBytes(data);
      let result = "0x";
      for (let i = 0; i < bytes.length; i++) {
        const v = bytes[i];
        result += HexCharacters[(v & 240) >> 4] + HexCharacters[v & 15];
      }
      return result;
    }
    exports2.hexlify = hexlify;
    function concat(datas) {
      return "0x" + datas.map((d) => hexlify(d).substring(2)).join("");
    }
    exports2.concat = concat;
    function dataLength(data) {
      if (isHexString(data, true)) {
        return (data.length - 2) / 2;
      }
      return getBytes(data).length;
    }
    exports2.dataLength = dataLength;
    function dataSlice(data, start, end) {
      const bytes = getBytes(data);
      if (end != null && end > bytes.length) {
        (0, errors_js_1.assert)(false, "cannot slice beyond data bounds", "BUFFER_OVERRUN", {
          buffer: bytes,
          length: bytes.length,
          offset: end
        });
      }
      return hexlify(bytes.slice(start == null ? 0 : start, end == null ? bytes.length : end));
    }
    exports2.dataSlice = dataSlice;
    function stripZerosLeft(data) {
      let bytes = hexlify(data).substring(2);
      while (bytes.startsWith("00")) {
        bytes = bytes.substring(2);
      }
      return "0x" + bytes;
    }
    exports2.stripZerosLeft = stripZerosLeft;
    function zeroPad(data, length, left) {
      const bytes = getBytes(data);
      (0, errors_js_1.assert)(length >= bytes.length, "padding exceeds data length", "BUFFER_OVERRUN", {
        buffer: new Uint8Array(bytes),
        length,
        offset: length + 1
      });
      const result = new Uint8Array(length);
      result.fill(0);
      if (left) {
        result.set(bytes, length - bytes.length);
      } else {
        result.set(bytes, 0);
      }
      return hexlify(result);
    }
    function zeroPadValue(data, length) {
      return zeroPad(data, length, true);
    }
    exports2.zeroPadValue = zeroPadValue;
    function zeroPadBytes(data, length) {
      return zeroPad(data, length, false);
    }
    exports2.zeroPadBytes = zeroPadBytes;
  }
});

// node_modules/ethers/lib.commonjs/utils/maths.js
var require_maths = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/maths.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toQuantity = exports2.toBeArray = exports2.toBeHex = exports2.toNumber = exports2.getNumber = exports2.toBigInt = exports2.getUint = exports2.getBigInt = exports2.mask = exports2.toTwos = exports2.fromTwos = void 0;
    var data_js_1 = require_data();
    var errors_js_1 = require_errors4();
    var BN_0 = BigInt(0);
    var BN_1 = BigInt(1);
    var maxValue = 9007199254740991;
    function fromTwos(_value, _width) {
      const value = getUint(_value, "value");
      const width = BigInt(getNumber(_width, "width"));
      (0, errors_js_1.assert)(value >> width === BN_0, "overflow", "NUMERIC_FAULT", {
        operation: "fromTwos",
        fault: "overflow",
        value: _value
      });
      if (value >> width - BN_1) {
        const mask3 = (BN_1 << width) - BN_1;
        return -((~value & mask3) + BN_1);
      }
      return value;
    }
    exports2.fromTwos = fromTwos;
    function toTwos(_value, _width) {
      let value = getBigInt(_value, "value");
      const width = BigInt(getNumber(_width, "width"));
      const limit = BN_1 << width - BN_1;
      if (value < BN_0) {
        value = -value;
        (0, errors_js_1.assert)(value <= limit, "too low", "NUMERIC_FAULT", {
          operation: "toTwos",
          fault: "overflow",
          value: _value
        });
        const mask3 = (BN_1 << width) - BN_1;
        return (~value & mask3) + BN_1;
      } else {
        (0, errors_js_1.assert)(value < limit, "too high", "NUMERIC_FAULT", {
          operation: "toTwos",
          fault: "overflow",
          value: _value
        });
      }
      return value;
    }
    exports2.toTwos = toTwos;
    function mask2(_value, _bits) {
      const value = getUint(_value, "value");
      const bits = BigInt(getNumber(_bits, "bits"));
      return value & (BN_1 << bits) - BN_1;
    }
    exports2.mask = mask2;
    function getBigInt(value, name) {
      switch (typeof value) {
        case "bigint":
          return value;
        case "number":
          (0, errors_js_1.assertArgument)(Number.isInteger(value), "underflow", name || "value", value);
          (0, errors_js_1.assertArgument)(value >= -maxValue && value <= maxValue, "overflow", name || "value", value);
          return BigInt(value);
        case "string":
          try {
            if (value === "") {
              throw new Error("empty string");
            }
            if (value[0] === "-" && value[1] !== "-") {
              return -BigInt(value.substring(1));
            }
            return BigInt(value);
          } catch (e) {
            (0, errors_js_1.assertArgument)(false, `invalid BigNumberish string: ${e.message}`, name || "value", value);
          }
      }
      (0, errors_js_1.assertArgument)(false, "invalid BigNumberish value", name || "value", value);
    }
    exports2.getBigInt = getBigInt;
    function getUint(value, name) {
      const result = getBigInt(value, name);
      (0, errors_js_1.assert)(result >= BN_0, "unsigned value cannot be negative", "NUMERIC_FAULT", {
        fault: "overflow",
        operation: "getUint",
        value
      });
      return result;
    }
    exports2.getUint = getUint;
    var Nibbles = "0123456789abcdef";
    function toBigInt(value) {
      if (value instanceof Uint8Array) {
        let result = "0x0";
        for (const v of value) {
          result += Nibbles[v >> 4];
          result += Nibbles[v & 15];
        }
        return BigInt(result);
      }
      return getBigInt(value);
    }
    exports2.toBigInt = toBigInt;
    function getNumber(value, name) {
      switch (typeof value) {
        case "bigint":
          (0, errors_js_1.assertArgument)(value >= -maxValue && value <= maxValue, "overflow", name || "value", value);
          return Number(value);
        case "number":
          (0, errors_js_1.assertArgument)(Number.isInteger(value), "underflow", name || "value", value);
          (0, errors_js_1.assertArgument)(value >= -maxValue && value <= maxValue, "overflow", name || "value", value);
          return value;
        case "string":
          try {
            if (value === "") {
              throw new Error("empty string");
            }
            return getNumber(BigInt(value), name);
          } catch (e) {
            (0, errors_js_1.assertArgument)(false, `invalid numeric string: ${e.message}`, name || "value", value);
          }
      }
      (0, errors_js_1.assertArgument)(false, "invalid numeric value", name || "value", value);
    }
    exports2.getNumber = getNumber;
    function toNumber(value) {
      return getNumber(toBigInt(value));
    }
    exports2.toNumber = toNumber;
    function toBeHex(_value, _width) {
      const value = getUint(_value, "value");
      let result = value.toString(16);
      if (_width == null) {
        if (result.length % 2) {
          result = "0" + result;
        }
      } else {
        const width = getNumber(_width, "width");
        (0, errors_js_1.assert)(width * 2 >= result.length, `value exceeds width (${width} bytes)`, "NUMERIC_FAULT", {
          operation: "toBeHex",
          fault: "overflow",
          value: _value
        });
        while (result.length < width * 2) {
          result = "0" + result;
        }
      }
      return "0x" + result;
    }
    exports2.toBeHex = toBeHex;
    function toBeArray(_value) {
      const value = getUint(_value, "value");
      if (value === BN_0) {
        return new Uint8Array([]);
      }
      let hex = value.toString(16);
      if (hex.length % 2) {
        hex = "0" + hex;
      }
      const result = new Uint8Array(hex.length / 2);
      for (let i = 0; i < result.length; i++) {
        const offset2 = i * 2;
        result[i] = parseInt(hex.substring(offset2, offset2 + 2), 16);
      }
      return result;
    }
    exports2.toBeArray = toBeArray;
    function toQuantity(value) {
      let result = (0, data_js_1.hexlify)((0, data_js_1.isBytesLike)(value) ? value : toBeArray(value)).substring(2);
      while (result.startsWith("0")) {
        result = result.substring(1);
      }
      if (result === "") {
        result = "0";
      }
      return "0x" + result;
    }
    exports2.toQuantity = toQuantity;
  }
});

// node_modules/ethers/lib.commonjs/utils/base58.js
var require_base58 = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/base58.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decodeBase58 = exports2.encodeBase58 = void 0;
    var data_js_1 = require_data();
    var errors_js_1 = require_errors4();
    var maths_js_1 = require_maths();
    var Alphabet = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
    var Lookup = null;
    function getAlpha(letter) {
      if (Lookup == null) {
        Lookup = {};
        for (let i = 0; i < Alphabet.length; i++) {
          Lookup[Alphabet[i]] = BigInt(i);
        }
      }
      const result = Lookup[letter];
      (0, errors_js_1.assertArgument)(result != null, `invalid base58 value`, "letter", letter);
      return result;
    }
    var BN_0 = BigInt(0);
    var BN_58 = BigInt(58);
    function encodeBase58(_value) {
      const bytes = (0, data_js_1.getBytes)(_value);
      let value = (0, maths_js_1.toBigInt)(bytes);
      let result = "";
      while (value) {
        result = Alphabet[Number(value % BN_58)] + result;
        value /= BN_58;
      }
      for (let i = 0; i < bytes.length; i++) {
        if (bytes[i]) {
          break;
        }
        result = Alphabet[0] + result;
      }
      return result;
    }
    exports2.encodeBase58 = encodeBase58;
    function decodeBase58(value) {
      let result = BN_0;
      for (let i = 0; i < value.length; i++) {
        result *= BN_58;
        result += getAlpha(value[i]);
      }
      return result;
    }
    exports2.decodeBase58 = decodeBase58;
  }
});

// node_modules/ethers/lib.commonjs/utils/base64-browser.js
var require_base64_browser = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/base64-browser.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.encodeBase64 = exports2.decodeBase64 = void 0;
    var data_js_1 = require_data();
    function decodeBase64(textData) {
      textData = atob(textData);
      const data = new Uint8Array(textData.length);
      for (let i = 0; i < textData.length; i++) {
        data[i] = textData.charCodeAt(i);
      }
      return (0, data_js_1.getBytes)(data);
    }
    exports2.decodeBase64 = decodeBase64;
    function encodeBase64(_data) {
      const data = (0, data_js_1.getBytes)(_data);
      let textData = "";
      for (let i = 0; i < data.length; i++) {
        textData += String.fromCharCode(data[i]);
      }
      return btoa(textData);
    }
    exports2.encodeBase64 = encodeBase64;
  }
});

// node_modules/ethers/lib.commonjs/utils/events.js
var require_events = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/events.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EventPayload = void 0;
    var properties_js_1 = require_properties();
    var _listener;
    var EventPayload = class {
      /**
       *  Create a new **EventPayload** for %%emitter%% with
       *  the %%listener%% and for %%filter%%.
       */
      constructor(emitter, listener, filter) {
        /**
         *  The event filter.
         */
        __publicField(this, "filter");
        /**
         *  The **EventEmitterable**.
         */
        __publicField(this, "emitter");
        __privateAdd(this, _listener);
        __privateSet(this, _listener, listener);
        (0, properties_js_1.defineProperties)(this, { emitter, filter });
      }
      /**
       *  Unregister the triggered listener for future events.
       */
      async removeListener() {
        if (__privateGet(this, _listener) == null) {
          return;
        }
        await this.emitter.off(this.filter, __privateGet(this, _listener));
      }
    };
    _listener = new WeakMap();
    exports2.EventPayload = EventPayload;
  }
});

// node_modules/ethers/lib.commonjs/utils/utf8.js
var require_utf8 = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/utf8.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toUtf8CodePoints = exports2.toUtf8String = exports2.toUtf8Bytes = exports2.Utf8ErrorFuncs = void 0;
    var data_js_1 = require_data();
    var errors_js_1 = require_errors4();
    function errorFunc(reason, offset2, bytes, output, badCodepoint) {
      (0, errors_js_1.assertArgument)(false, `invalid codepoint at offset ${offset2}; ${reason}`, "bytes", bytes);
    }
    function ignoreFunc(reason, offset2, bytes, output, badCodepoint) {
      if (reason === "BAD_PREFIX" || reason === "UNEXPECTED_CONTINUE") {
        let i = 0;
        for (let o = offset2 + 1; o < bytes.length; o++) {
          if (bytes[o] >> 6 !== 2) {
            break;
          }
          i++;
        }
        return i;
      }
      if (reason === "OVERRUN") {
        return bytes.length - offset2 - 1;
      }
      return 0;
    }
    function replaceFunc(reason, offset2, bytes, output, badCodepoint) {
      if (reason === "OVERLONG") {
        (0, errors_js_1.assertArgument)(typeof badCodepoint === "number", "invalid bad code point for replacement", "badCodepoint", badCodepoint);
        output.push(badCodepoint);
        return 0;
      }
      output.push(65533);
      return ignoreFunc(reason, offset2, bytes, output, badCodepoint);
    }
    exports2.Utf8ErrorFuncs = Object.freeze({
      error: errorFunc,
      ignore: ignoreFunc,
      replace: replaceFunc
    });
    function getUtf8CodePoints(_bytes, onError) {
      if (onError == null) {
        onError = exports2.Utf8ErrorFuncs.error;
      }
      const bytes = (0, data_js_1.getBytes)(_bytes, "bytes");
      const result = [];
      let i = 0;
      while (i < bytes.length) {
        const c = bytes[i++];
        if (c >> 7 === 0) {
          result.push(c);
          continue;
        }
        let extraLength = null;
        let overlongMask = null;
        if ((c & 224) === 192) {
          extraLength = 1;
          overlongMask = 127;
        } else if ((c & 240) === 224) {
          extraLength = 2;
          overlongMask = 2047;
        } else if ((c & 248) === 240) {
          extraLength = 3;
          overlongMask = 65535;
        } else {
          if ((c & 192) === 128) {
            i += onError("UNEXPECTED_CONTINUE", i - 1, bytes, result);
          } else {
            i += onError("BAD_PREFIX", i - 1, bytes, result);
          }
          continue;
        }
        if (i - 1 + extraLength >= bytes.length) {
          i += onError("OVERRUN", i - 1, bytes, result);
          continue;
        }
        let res = c & (1 << 8 - extraLength - 1) - 1;
        for (let j = 0; j < extraLength; j++) {
          let nextChar = bytes[i];
          if ((nextChar & 192) != 128) {
            i += onError("MISSING_CONTINUE", i, bytes, result);
            res = null;
            break;
          }
          ;
          res = res << 6 | nextChar & 63;
          i++;
        }
        if (res === null) {
          continue;
        }
        if (res > 1114111) {
          i += onError("OUT_OF_RANGE", i - 1 - extraLength, bytes, result, res);
          continue;
        }
        if (res >= 55296 && res <= 57343) {
          i += onError("UTF16_SURROGATE", i - 1 - extraLength, bytes, result, res);
          continue;
        }
        if (res <= overlongMask) {
          i += onError("OVERLONG", i - 1 - extraLength, bytes, result, res);
          continue;
        }
        result.push(res);
      }
      return result;
    }
    function toUtf8Bytes(str, form) {
      (0, errors_js_1.assertArgument)(typeof str === "string", "invalid string value", "str", str);
      if (form != null) {
        (0, errors_js_1.assertNormalize)(form);
        str = str.normalize(form);
      }
      let result = [];
      for (let i = 0; i < str.length; i++) {
        const c = str.charCodeAt(i);
        if (c < 128) {
          result.push(c);
        } else if (c < 2048) {
          result.push(c >> 6 | 192);
          result.push(c & 63 | 128);
        } else if ((c & 64512) == 55296) {
          i++;
          const c2 = str.charCodeAt(i);
          (0, errors_js_1.assertArgument)(i < str.length && (c2 & 64512) === 56320, "invalid surrogate pair", "str", str);
          const pair = 65536 + ((c & 1023) << 10) + (c2 & 1023);
          result.push(pair >> 18 | 240);
          result.push(pair >> 12 & 63 | 128);
          result.push(pair >> 6 & 63 | 128);
          result.push(pair & 63 | 128);
        } else {
          result.push(c >> 12 | 224);
          result.push(c >> 6 & 63 | 128);
          result.push(c & 63 | 128);
        }
      }
      return new Uint8Array(result);
    }
    exports2.toUtf8Bytes = toUtf8Bytes;
    function _toUtf8String(codePoints) {
      return codePoints.map((codePoint) => {
        if (codePoint <= 65535) {
          return String.fromCharCode(codePoint);
        }
        codePoint -= 65536;
        return String.fromCharCode((codePoint >> 10 & 1023) + 55296, (codePoint & 1023) + 56320);
      }).join("");
    }
    function toUtf8String(bytes, onError) {
      return _toUtf8String(getUtf8CodePoints(bytes, onError));
    }
    exports2.toUtf8String = toUtf8String;
    function toUtf8CodePoints(str, form) {
      return getUtf8CodePoints(toUtf8Bytes(str, form));
    }
    exports2.toUtf8CodePoints = toUtf8CodePoints;
  }
});

// node_modules/ethers/lib.commonjs/utils/geturl-browser.js
var require_geturl_browser = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/geturl-browser.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getUrl = exports2.createGetUrl = void 0;
    var errors_js_1 = require_errors4();
    function createGetUrl(options) {
      async function getUrl2(req, _signal) {
        (0, errors_js_1.assert)(_signal == null || !_signal.cancelled, "request cancelled before sending", "CANCELLED");
        const protocol = req.url.split(":")[0].toLowerCase();
        (0, errors_js_1.assert)(protocol === "http" || protocol === "https", `unsupported protocol ${protocol}`, "UNSUPPORTED_OPERATION", {
          info: { protocol },
          operation: "request"
        });
        (0, errors_js_1.assert)(protocol === "https" || !req.credentials || req.allowInsecureAuthentication, "insecure authorized connections unsupported", "UNSUPPORTED_OPERATION", {
          operation: "request"
        });
        let error = null;
        const controller = new AbortController();
        const timer = setTimeout(() => {
          error = (0, errors_js_1.makeError)("request timeout", "TIMEOUT");
          controller.abort();
        }, req.timeout);
        if (_signal) {
          _signal.addListener(() => {
            error = (0, errors_js_1.makeError)("request cancelled", "CANCELLED");
            controller.abort();
          });
        }
        const init = {
          method: req.method,
          headers: new Headers(Array.from(req)),
          body: req.body || void 0,
          signal: controller.signal
        };
        let resp;
        try {
          resp = await fetch(req.url, init);
        } catch (_error) {
          clearTimeout(timer);
          if (error) {
            throw error;
          }
          throw _error;
        }
        clearTimeout(timer);
        const headers = {};
        resp.headers.forEach((value, key) => {
          headers[key.toLowerCase()] = value;
        });
        const respBody = await resp.arrayBuffer();
        const body = respBody == null ? null : new Uint8Array(respBody);
        return {
          statusCode: resp.status,
          statusMessage: resp.statusText,
          headers,
          body
        };
      }
      return getUrl2;
    }
    exports2.createGetUrl = createGetUrl;
    var defaultGetUrl = createGetUrl({});
    async function getUrl(req, _signal) {
      return defaultGetUrl(req, _signal);
    }
    exports2.getUrl = getUrl;
  }
});

// node_modules/ethers/lib.commonjs/utils/fetch.js
var require_fetch = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/fetch.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FetchResponse = exports2.FetchRequest = exports2.FetchCancelSignal = void 0;
    var base64_js_1 = require_base64_browser();
    var data_js_1 = require_data();
    var errors_js_1 = require_errors4();
    var properties_js_1 = require_properties();
    var utf8_js_1 = require_utf8();
    var geturl_js_1 = require_geturl_browser();
    var MAX_ATTEMPTS = 12;
    var SLOT_INTERVAL = 250;
    var defaultGetUrlFunc = (0, geturl_js_1.createGetUrl)();
    var reData = new RegExp("^data:([^;:]*)?(;base64)?,(.*)$", "i");
    var reIpfs = new RegExp("^ipfs://(ipfs/)?(.*)$", "i");
    var locked = false;
    async function dataGatewayFunc(url, signal) {
      try {
        const match = url.match(reData);
        if (!match) {
          throw new Error("invalid data");
        }
        return new FetchResponse(200, "OK", {
          "content-type": match[1] || "text/plain"
        }, match[2] ? (0, base64_js_1.decodeBase64)(match[3]) : unpercent(match[3]));
      } catch (error) {
        return new FetchResponse(599, "BAD REQUEST (invalid data: URI)", {}, null, new FetchRequest(url));
      }
    }
    function getIpfsGatewayFunc(baseUrl) {
      async function gatewayIpfs(url, signal) {
        try {
          const match = url.match(reIpfs);
          if (!match) {
            throw new Error("invalid link");
          }
          return new FetchRequest(`${baseUrl}${match[2]}`);
        } catch (error) {
          return new FetchResponse(599, "BAD REQUEST (invalid IPFS URI)", {}, null, new FetchRequest(url));
        }
      }
      return gatewayIpfs;
    }
    var Gateways = {
      "data": dataGatewayFunc,
      "ipfs": getIpfsGatewayFunc("https://gateway.ipfs.io/ipfs/")
    };
    var fetchSignals = /* @__PURE__ */ new WeakMap();
    var _listeners, _cancelled;
    var FetchCancelSignal = class {
      constructor(request) {
        __privateAdd(this, _listeners);
        __privateAdd(this, _cancelled);
        __privateSet(this, _listeners, []);
        __privateSet(this, _cancelled, false);
        fetchSignals.set(request, () => {
          if (__privateGet(this, _cancelled)) {
            return;
          }
          __privateSet(this, _cancelled, true);
          for (const listener of __privateGet(this, _listeners)) {
            setTimeout(() => {
              listener();
            }, 0);
          }
          __privateSet(this, _listeners, []);
        });
      }
      addListener(listener) {
        (0, errors_js_1.assert)(!__privateGet(this, _cancelled), "singal already cancelled", "UNSUPPORTED_OPERATION", {
          operation: "fetchCancelSignal.addCancelListener"
        });
        __privateGet(this, _listeners).push(listener);
      }
      get cancelled() {
        return __privateGet(this, _cancelled);
      }
      checkSignal() {
        (0, errors_js_1.assert)(!this.cancelled, "cancelled", "CANCELLED", {});
      }
    };
    _listeners = new WeakMap();
    _cancelled = new WeakMap();
    exports2.FetchCancelSignal = FetchCancelSignal;
    function checkSignal(signal) {
      if (signal == null) {
        throw new Error("missing signal; should not happen");
      }
      signal.checkSignal();
      return signal;
    }
    var _allowInsecure, _gzip, _headers, _method, _timeout, _url, _body, _bodyType, _creds, _preflight, _process, _retry, _signal, _throttle, _getUrlFunc, _FetchRequest_instances, send_fn;
    var _FetchRequest = class _FetchRequest {
      /**
       *  Create a new FetchRequest instance with default values.
       *
       *  Once created, each property may be set before issuing a
       *  ``.send()`` to make the request.
       */
      constructor(url) {
        __privateAdd(this, _FetchRequest_instances);
        __privateAdd(this, _allowInsecure);
        __privateAdd(this, _gzip);
        __privateAdd(this, _headers);
        __privateAdd(this, _method);
        __privateAdd(this, _timeout);
        __privateAdd(this, _url);
        __privateAdd(this, _body);
        __privateAdd(this, _bodyType);
        __privateAdd(this, _creds);
        // Hooks
        __privateAdd(this, _preflight);
        __privateAdd(this, _process);
        __privateAdd(this, _retry);
        __privateAdd(this, _signal);
        __privateAdd(this, _throttle);
        __privateAdd(this, _getUrlFunc);
        __privateSet(this, _url, String(url));
        __privateSet(this, _allowInsecure, false);
        __privateSet(this, _gzip, true);
        __privateSet(this, _headers, {});
        __privateSet(this, _method, "");
        __privateSet(this, _timeout, 3e5);
        __privateSet(this, _throttle, {
          slotInterval: SLOT_INTERVAL,
          maxAttempts: MAX_ATTEMPTS
        });
        __privateSet(this, _getUrlFunc, null);
      }
      /**
       *  The fetch URL to request.
       */
      get url() {
        return __privateGet(this, _url);
      }
      set url(url) {
        __privateSet(this, _url, String(url));
      }
      /**
       *  The fetch body, if any, to send as the request body. //(default: null)//
       *
       *  When setting a body, the intrinsic ``Content-Type`` is automatically
       *  set and will be used if **not overridden** by setting a custom
       *  header.
       *
       *  If %%body%% is null, the body is cleared (along with the
       *  intrinsic ``Content-Type``).
       *
       *  If %%body%% is a string, the intrinsic ``Content-Type`` is set to
       *  ``text/plain``.
       *
       *  If %%body%% is a Uint8Array, the intrinsic ``Content-Type`` is set to
       *  ``application/octet-stream``.
       *
       *  If %%body%% is any other object, the intrinsic ``Content-Type`` is
       *  set to ``application/json``.
       */
      get body() {
        if (__privateGet(this, _body) == null) {
          return null;
        }
        return new Uint8Array(__privateGet(this, _body));
      }
      set body(body) {
        if (body == null) {
          __privateSet(this, _body, void 0);
          __privateSet(this, _bodyType, void 0);
        } else if (typeof body === "string") {
          __privateSet(this, _body, (0, utf8_js_1.toUtf8Bytes)(body));
          __privateSet(this, _bodyType, "text/plain");
        } else if (body instanceof Uint8Array) {
          __privateSet(this, _body, body);
          __privateSet(this, _bodyType, "application/octet-stream");
        } else if (typeof body === "object") {
          __privateSet(this, _body, (0, utf8_js_1.toUtf8Bytes)(JSON.stringify(body)));
          __privateSet(this, _bodyType, "application/json");
        } else {
          throw new Error("invalid body");
        }
      }
      /**
       *  Returns true if the request has a body.
       */
      hasBody() {
        return __privateGet(this, _body) != null;
      }
      /**
       *  The HTTP method to use when requesting the URI. If no method
       *  has been explicitly set, then ``GET`` is used if the body is
       *  null and ``POST`` otherwise.
       */
      get method() {
        if (__privateGet(this, _method)) {
          return __privateGet(this, _method);
        }
        if (this.hasBody()) {
          return "POST";
        }
        return "GET";
      }
      set method(method2) {
        if (method2 == null) {
          method2 = "";
        }
        __privateSet(this, _method, String(method2).toUpperCase());
      }
      /**
       *  The headers that will be used when requesting the URI. All
       *  keys are lower-case.
       *
       *  This object is a copy, so any changes will **NOT** be reflected
       *  in the ``FetchRequest``.
       *
       *  To set a header entry, use the ``setHeader`` method.
       */
      get headers() {
        const headers = Object.assign({}, __privateGet(this, _headers));
        if (__privateGet(this, _creds)) {
          headers["authorization"] = `Basic ${(0, base64_js_1.encodeBase64)((0, utf8_js_1.toUtf8Bytes)(__privateGet(this, _creds)))}`;
        }
        ;
        if (this.allowGzip) {
          headers["accept-encoding"] = "gzip";
        }
        if (headers["content-type"] == null && __privateGet(this, _bodyType)) {
          headers["content-type"] = __privateGet(this, _bodyType);
        }
        if (this.body) {
          headers["content-length"] = String(this.body.length);
        }
        return headers;
      }
      /**
       *  Get the header for %%key%%, ignoring case.
       */
      getHeader(key) {
        return this.headers[key.toLowerCase()];
      }
      /**
       *  Set the header for %%key%% to %%value%%. All values are coerced
       *  to a string.
       */
      setHeader(key, value) {
        __privateGet(this, _headers)[String(key).toLowerCase()] = String(value);
      }
      /**
       *  Clear all headers, resetting all intrinsic headers.
       */
      clearHeaders() {
        __privateSet(this, _headers, {});
      }
      [Symbol.iterator]() {
        const headers = this.headers;
        const keys = Object.keys(headers);
        let index = 0;
        return {
          next: () => {
            if (index < keys.length) {
              const key = keys[index++];
              return {
                value: [key, headers[key]],
                done: false
              };
            }
            return { value: void 0, done: true };
          }
        };
      }
      /**
       *  The value that will be sent for the ``Authorization`` header.
       *
       *  To set the credentials, use the ``setCredentials`` method.
       */
      get credentials() {
        return __privateGet(this, _creds) || null;
      }
      /**
       *  Sets an ``Authorization`` for %%username%% with %%password%%.
       */
      setCredentials(username, password) {
        (0, errors_js_1.assertArgument)(!username.match(/:/), "invalid basic authentication username", "username", "[REDACTED]");
        __privateSet(this, _creds, `${username}:${password}`);
      }
      /**
       *  Enable and request gzip-encoded responses. The response will
       *  automatically be decompressed. //(default: true)//
       */
      get allowGzip() {
        return __privateGet(this, _gzip);
      }
      set allowGzip(value) {
        __privateSet(this, _gzip, !!value);
      }
      /**
       *  Allow ``Authentication`` credentials to be sent over insecure
       *  channels. //(default: false)//
       */
      get allowInsecureAuthentication() {
        return !!__privateGet(this, _allowInsecure);
      }
      set allowInsecureAuthentication(value) {
        __privateSet(this, _allowInsecure, !!value);
      }
      /**
       *  The timeout (in milliseconds) to wait for a complete response.
       *  //(default: 5 minutes)//
       */
      get timeout() {
        return __privateGet(this, _timeout);
      }
      set timeout(timeout) {
        (0, errors_js_1.assertArgument)(timeout >= 0, "timeout must be non-zero", "timeout", timeout);
        __privateSet(this, _timeout, timeout);
      }
      /**
       *  This function is called prior to each request, for example
       *  during a redirection or retry in case of server throttling.
       *
       *  This offers an opportunity to populate headers or update
       *  content before sending a request.
       */
      get preflightFunc() {
        return __privateGet(this, _preflight) || null;
      }
      set preflightFunc(preflight) {
        __privateSet(this, _preflight, preflight);
      }
      /**
       *  This function is called after each response, offering an
       *  opportunity to provide client-level throttling or updating
       *  response data.
       *
       *  Any error thrown in this causes the ``send()`` to throw.
       *
       *  To schedule a retry attempt (assuming the maximum retry limit
       *  has not been reached), use [[response.throwThrottleError]].
       */
      get processFunc() {
        return __privateGet(this, _process) || null;
      }
      set processFunc(process2) {
        __privateSet(this, _process, process2);
      }
      /**
       *  This function is called on each retry attempt.
       */
      get retryFunc() {
        return __privateGet(this, _retry) || null;
      }
      set retryFunc(retry) {
        __privateSet(this, _retry, retry);
      }
      /**
       *  This function is called to fetch content from HTTP and
       *  HTTPS URLs and is platform specific (e.g. nodejs vs
       *  browsers).
       *
       *  This is by default the currently registered global getUrl
       *  function, which can be changed using [[registerGetUrl]].
       *  If this has been set, setting is to ``null`` will cause
       *  this FetchRequest (and any future clones) to revert back to
       *  using the currently registered global getUrl function.
       *
       *  Setting this is generally not necessary, but may be useful
       *  for developers that wish to intercept requests or to
       *  configurege a proxy or other agent.
       */
      get getUrlFunc() {
        return __privateGet(this, _getUrlFunc) || defaultGetUrlFunc;
      }
      set getUrlFunc(value) {
        __privateSet(this, _getUrlFunc, value);
      }
      toString() {
        return `<FetchRequest method=${JSON.stringify(this.method)} url=${JSON.stringify(this.url)} headers=${JSON.stringify(this.headers)} body=${__privateGet(this, _body) ? (0, data_js_1.hexlify)(__privateGet(this, _body)) : "null"}>`;
      }
      /**
       *  Update the throttle parameters used to determine maximum
       *  attempts and exponential-backoff properties.
       */
      setThrottleParams(params) {
        if (params.slotInterval != null) {
          __privateGet(this, _throttle).slotInterval = params.slotInterval;
        }
        if (params.maxAttempts != null) {
          __privateGet(this, _throttle).maxAttempts = params.maxAttempts;
        }
      }
      /**
       *  Resolves to the response by sending the request.
       */
      send() {
        (0, errors_js_1.assert)(__privateGet(this, _signal) == null, "request already sent", "UNSUPPORTED_OPERATION", { operation: "fetchRequest.send" });
        __privateSet(this, _signal, new FetchCancelSignal(this));
        return __privateMethod(this, _FetchRequest_instances, send_fn).call(this, 0, getTime() + this.timeout, 0, this, new FetchResponse(0, "", {}, null, this));
      }
      /**
       *  Cancels the inflight response, causing a ``CANCELLED``
       *  error to be rejected from the [[send]].
       */
      cancel() {
        (0, errors_js_1.assert)(__privateGet(this, _signal) != null, "request has not been sent", "UNSUPPORTED_OPERATION", { operation: "fetchRequest.cancel" });
        const signal = fetchSignals.get(this);
        if (!signal) {
          throw new Error("missing signal; should not happen");
        }
        signal();
      }
      /**
       *  Returns a new [[FetchRequest]] that represents the redirection
       *  to %%location%%.
       */
      redirect(location) {
        const current = this.url.split(":")[0].toLowerCase();
        const target = location.split(":")[0].toLowerCase();
        (0, errors_js_1.assert)(this.method === "GET" && (current !== "https" || target !== "http") && location.match(/^https?:/), `unsupported redirect`, "UNSUPPORTED_OPERATION", {
          operation: `redirect(${this.method} ${JSON.stringify(this.url)} => ${JSON.stringify(location)})`
        });
        const req = new _FetchRequest(location);
        req.method = "GET";
        req.allowGzip = this.allowGzip;
        req.timeout = this.timeout;
        __privateSet(req, _headers, Object.assign({}, __privateGet(this, _headers)));
        if (__privateGet(this, _body)) {
          __privateSet(req, _body, new Uint8Array(__privateGet(this, _body)));
        }
        __privateSet(req, _bodyType, __privateGet(this, _bodyType));
        return req;
      }
      /**
       *  Create a new copy of this request.
       */
      clone() {
        const clone = new _FetchRequest(this.url);
        __privateSet(clone, _method, __privateGet(this, _method));
        if (__privateGet(this, _body)) {
          __privateSet(clone, _body, __privateGet(this, _body));
        }
        __privateSet(clone, _bodyType, __privateGet(this, _bodyType));
        __privateSet(clone, _headers, Object.assign({}, __privateGet(this, _headers)));
        __privateSet(clone, _creds, __privateGet(this, _creds));
        if (this.allowGzip) {
          clone.allowGzip = true;
        }
        clone.timeout = this.timeout;
        if (this.allowInsecureAuthentication) {
          clone.allowInsecureAuthentication = true;
        }
        __privateSet(clone, _preflight, __privateGet(this, _preflight));
        __privateSet(clone, _process, __privateGet(this, _process));
        __privateSet(clone, _retry, __privateGet(this, _retry));
        __privateSet(clone, _throttle, Object.assign({}, __privateGet(this, _throttle)));
        __privateSet(clone, _getUrlFunc, __privateGet(this, _getUrlFunc));
        return clone;
      }
      /**
       *  Locks all static configuration for gateways and FetchGetUrlFunc
       *  registration.
       */
      static lockConfig() {
        locked = true;
      }
      /**
       *  Get the current Gateway function for %%scheme%%.
       */
      static getGateway(scheme) {
        return Gateways[scheme.toLowerCase()] || null;
      }
      /**
       *  Use the %%func%% when fetching URIs using %%scheme%%.
       *
       *  This method affects all requests globally.
       *
       *  If [[lockConfig]] has been called, no change is made and this
       *  throws.
       */
      static registerGateway(scheme, func) {
        scheme = scheme.toLowerCase();
        if (scheme === "http" || scheme === "https") {
          throw new Error(`cannot intercept ${scheme}; use registerGetUrl`);
        }
        if (locked) {
          throw new Error("gateways locked");
        }
        Gateways[scheme] = func;
      }
      /**
       *  Use %%getUrl%% when fetching URIs over HTTP and HTTPS requests.
       *
       *  This method affects all requests globally.
       *
       *  If [[lockConfig]] has been called, no change is made and this
       *  throws.
       */
      static registerGetUrl(getUrl) {
        if (locked) {
          throw new Error("gateways locked");
        }
        defaultGetUrlFunc = getUrl;
      }
      /**
       *  Creates a getUrl function that fetches content from HTTP and
       *  HTTPS URLs.
       *
       *  The available %%options%% are dependent on the platform
       *  implementation of the default getUrl function.
       *
       *  This is not generally something that is needed, but is useful
       *  when trying to customize simple behaviour when fetching HTTP
       *  content.
       */
      static createGetUrlFunc(options) {
        return (0, geturl_js_1.createGetUrl)(options);
      }
      /**
       *  Creates a function that can "fetch" data URIs.
       *
       *  Note that this is automatically done internally to support
       *  data URIs, so it is not necessary to register it.
       *
       *  This is not generally something that is needed, but may
       *  be useful in a wrapper to perfom custom data URI functionality.
       */
      static createDataGateway() {
        return dataGatewayFunc;
      }
      /**
       *  Creates a function that will fetch IPFS (unvalidated) from
       *  a custom gateway baseUrl.
       *
       *  The default IPFS gateway used internally is
       *  ``"https:/\/gateway.ipfs.io/ipfs/"``.
       */
      static createIpfsGatewayFunc(baseUrl) {
        return getIpfsGatewayFunc(baseUrl);
      }
    };
    _allowInsecure = new WeakMap();
    _gzip = new WeakMap();
    _headers = new WeakMap();
    _method = new WeakMap();
    _timeout = new WeakMap();
    _url = new WeakMap();
    _body = new WeakMap();
    _bodyType = new WeakMap();
    _creds = new WeakMap();
    _preflight = new WeakMap();
    _process = new WeakMap();
    _retry = new WeakMap();
    _signal = new WeakMap();
    _throttle = new WeakMap();
    _getUrlFunc = new WeakMap();
    _FetchRequest_instances = new WeakSet();
    send_fn = async function(attempt, expires, delay, _request2, _response) {
      var _a, _b, _c;
      if (attempt >= __privateGet(this, _throttle).maxAttempts) {
        return _response.makeServerError("exceeded maximum retry limit");
      }
      (0, errors_js_1.assert)(getTime() <= expires, "timeout", "TIMEOUT", {
        operation: "request.send",
        reason: "timeout",
        request: _request2
      });
      if (delay > 0) {
        await wait(delay);
      }
      let req = this.clone();
      const scheme = (req.url.split(":")[0] || "").toLowerCase();
      if (scheme in Gateways) {
        const result = await Gateways[scheme](req.url, checkSignal(__privateGet(_request2, _signal)));
        if (result instanceof FetchResponse) {
          let response2 = result;
          if (this.processFunc) {
            checkSignal(__privateGet(_request2, _signal));
            try {
              response2 = await this.processFunc(req, response2);
            } catch (error) {
              if (error.throttle == null || typeof error.stall !== "number") {
                response2.makeServerError("error in post-processing function", error).assertOk();
              }
            }
          }
          return response2;
        }
        req = result;
      }
      if (this.preflightFunc) {
        req = await this.preflightFunc(req);
      }
      const resp = await this.getUrlFunc(req, checkSignal(__privateGet(_request2, _signal)));
      let response = new FetchResponse(resp.statusCode, resp.statusMessage, resp.headers, resp.body, _request2);
      if (response.statusCode === 301 || response.statusCode === 302) {
        try {
          const location = response.headers.location || "";
          return __privateMethod(_a = req.redirect(location), _FetchRequest_instances, send_fn).call(_a, attempt + 1, expires, 0, _request2, response);
        } catch (error) {
        }
        return response;
      } else if (response.statusCode === 429) {
        if (this.retryFunc == null || await this.retryFunc(req, response, attempt)) {
          const retryAfter = response.headers["retry-after"];
          let delay2 = __privateGet(this, _throttle).slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));
          if (typeof retryAfter === "string" && retryAfter.match(/^[1-9][0-9]*$/)) {
            delay2 = parseInt(retryAfter);
          }
          return __privateMethod(_b = req.clone(), _FetchRequest_instances, send_fn).call(_b, attempt + 1, expires, delay2, _request2, response);
        }
      }
      if (this.processFunc) {
        checkSignal(__privateGet(_request2, _signal));
        try {
          response = await this.processFunc(req, response);
        } catch (error) {
          if (error.throttle == null || typeof error.stall !== "number") {
            response.makeServerError("error in post-processing function", error).assertOk();
          }
          let delay2 = __privateGet(this, _throttle).slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));
          ;
          if (error.stall >= 0) {
            delay2 = error.stall;
          }
          return __privateMethod(_c = req.clone(), _FetchRequest_instances, send_fn).call(_c, attempt + 1, expires, delay2, _request2, response);
        }
      }
      return response;
    };
    var FetchRequest = _FetchRequest;
    exports2.FetchRequest = FetchRequest;
    var _statusCode, _statusMessage, _headers2, _body2, _request, _error;
    var _FetchResponse = class _FetchResponse {
      constructor(statusCode, statusMessage, headers, body, request) {
        __privateAdd(this, _statusCode);
        __privateAdd(this, _statusMessage);
        __privateAdd(this, _headers2);
        __privateAdd(this, _body2);
        __privateAdd(this, _request);
        __privateAdd(this, _error);
        __privateSet(this, _statusCode, statusCode);
        __privateSet(this, _statusMessage, statusMessage);
        __privateSet(this, _headers2, Object.keys(headers).reduce((accum, k) => {
          accum[k.toLowerCase()] = String(headers[k]);
          return accum;
        }, {}));
        __privateSet(this, _body2, body == null ? null : new Uint8Array(body));
        __privateSet(this, _request, request || null);
        __privateSet(this, _error, { message: "" });
      }
      toString() {
        return `<FetchResponse status=${this.statusCode} body=${__privateGet(this, _body2) ? (0, data_js_1.hexlify)(__privateGet(this, _body2)) : "null"}>`;
      }
      /**
       *  The response status code.
       */
      get statusCode() {
        return __privateGet(this, _statusCode);
      }
      /**
       *  The response status message.
       */
      get statusMessage() {
        return __privateGet(this, _statusMessage);
      }
      /**
       *  The response headers. All keys are lower-case.
       */
      get headers() {
        return Object.assign({}, __privateGet(this, _headers2));
      }
      /**
       *  The response body, or ``null`` if there was no body.
       */
      get body() {
        return __privateGet(this, _body2) == null ? null : new Uint8Array(__privateGet(this, _body2));
      }
      /**
       *  The response body as a UTF-8 encoded string, or the empty
       *  string (i.e. ``""``) if there was no body.
       *
       *  An error is thrown if the body is invalid UTF-8 data.
       */
      get bodyText() {
        try {
          return __privateGet(this, _body2) == null ? "" : (0, utf8_js_1.toUtf8String)(__privateGet(this, _body2));
        } catch (error) {
          (0, errors_js_1.assert)(false, "response body is not valid UTF-8 data", "UNSUPPORTED_OPERATION", {
            operation: "bodyText",
            info: { response: this }
          });
        }
      }
      /**
       *  The response body, decoded as JSON.
       *
       *  An error is thrown if the body is invalid JSON-encoded data
       *  or if there was no body.
       */
      get bodyJson() {
        try {
          return JSON.parse(this.bodyText);
        } catch (error) {
          (0, errors_js_1.assert)(false, "response body is not valid JSON", "UNSUPPORTED_OPERATION", {
            operation: "bodyJson",
            info: { response: this }
          });
        }
      }
      [Symbol.iterator]() {
        const headers = this.headers;
        const keys = Object.keys(headers);
        let index = 0;
        return {
          next: () => {
            if (index < keys.length) {
              const key = keys[index++];
              return {
                value: [key, headers[key]],
                done: false
              };
            }
            return { value: void 0, done: true };
          }
        };
      }
      /**
       *  Return a Response with matching headers and body, but with
       *  an error status code (i.e. 599) and %%message%% with an
       *  optional %%error%%.
       */
      makeServerError(message, error) {
        let statusMessage;
        if (!message) {
          message = `${this.statusCode} ${this.statusMessage}`;
          statusMessage = `CLIENT ESCALATED SERVER ERROR (${message})`;
        } else {
          statusMessage = `CLIENT ESCALATED SERVER ERROR (${this.statusCode} ${this.statusMessage}; ${message})`;
        }
        const response = new _FetchResponse(599, statusMessage, this.headers, this.body, __privateGet(this, _request) || void 0);
        __privateSet(response, _error, { message, error });
        return response;
      }
      /**
       *  If called within a [request.processFunc](FetchRequest-processFunc)
       *  call, causes the request to retry as if throttled for %%stall%%
       *  milliseconds.
       */
      throwThrottleError(message, stall) {
        if (stall == null) {
          stall = -1;
        } else {
          (0, errors_js_1.assertArgument)(Number.isInteger(stall) && stall >= 0, "invalid stall timeout", "stall", stall);
        }
        const error = new Error(message || "throttling requests");
        (0, properties_js_1.defineProperties)(error, { stall, throttle: true });
        throw error;
      }
      /**
       *  Get the header value for %%key%%, ignoring case.
       */
      getHeader(key) {
        return this.headers[key.toLowerCase()];
      }
      /**
       *  Returns true if the response has a body.
       */
      hasBody() {
        return __privateGet(this, _body2) != null;
      }
      /**
       *  The request made for this response.
       */
      get request() {
        return __privateGet(this, _request);
      }
      /**
       *  Returns true if this response was a success statusCode.
       */
      ok() {
        return __privateGet(this, _error).message === "" && this.statusCode >= 200 && this.statusCode < 300;
      }
      /**
       *  Throws a ``SERVER_ERROR`` if this response is not ok.
       */
      assertOk() {
        if (this.ok()) {
          return;
        }
        let { message, error } = __privateGet(this, _error);
        if (message === "") {
          message = `server response ${this.statusCode} ${this.statusMessage}`;
        }
        let requestUrl = null;
        if (this.request) {
          requestUrl = this.request.url;
        }
        let responseBody = null;
        try {
          if (__privateGet(this, _body2)) {
            responseBody = (0, utf8_js_1.toUtf8String)(__privateGet(this, _body2));
          }
        } catch (e) {
        }
        (0, errors_js_1.assert)(false, message, "SERVER_ERROR", {
          request: this.request || "unknown request",
          response: this,
          error,
          info: {
            requestUrl,
            responseBody,
            responseStatus: `${this.statusCode} ${this.statusMessage}`
          }
        });
      }
    };
    _statusCode = new WeakMap();
    _statusMessage = new WeakMap();
    _headers2 = new WeakMap();
    _body2 = new WeakMap();
    _request = new WeakMap();
    _error = new WeakMap();
    var FetchResponse = _FetchResponse;
    exports2.FetchResponse = FetchResponse;
    function getTime() {
      return (/* @__PURE__ */ new Date()).getTime();
    }
    function unpercent(value) {
      return (0, utf8_js_1.toUtf8Bytes)(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {
        return String.fromCharCode(parseInt(code, 16));
      }));
    }
    function wait(delay) {
      return new Promise((resolve) => setTimeout(resolve, delay));
    }
  }
});

// node_modules/ethers/lib.commonjs/utils/fixednumber.js
var require_fixednumber = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/fixednumber.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FixedNumber = void 0;
    var data_js_1 = require_data();
    var errors_js_1 = require_errors4();
    var maths_js_1 = require_maths();
    var properties_js_1 = require_properties();
    var BN_N1 = BigInt(-1);
    var BN_0 = BigInt(0);
    var BN_1 = BigInt(1);
    var BN_5 = BigInt(5);
    var _guard = {};
    var Zeros = "0000";
    while (Zeros.length < 80) {
      Zeros += Zeros;
    }
    function getTens(decimals) {
      let result = Zeros;
      while (result.length < decimals) {
        result += result;
      }
      return BigInt("1" + result.substring(0, decimals));
    }
    function checkValue(val, format, safeOp) {
      const width = BigInt(format.width);
      if (format.signed) {
        const limit = BN_1 << width - BN_1;
        (0, errors_js_1.assert)(safeOp == null || val >= -limit && val < limit, "overflow", "NUMERIC_FAULT", {
          operation: safeOp,
          fault: "overflow",
          value: val
        });
        if (val > BN_0) {
          val = (0, maths_js_1.fromTwos)((0, maths_js_1.mask)(val, width), width);
        } else {
          val = -(0, maths_js_1.fromTwos)((0, maths_js_1.mask)(-val, width), width);
        }
      } else {
        const limit = BN_1 << width;
        (0, errors_js_1.assert)(safeOp == null || val >= 0 && val < limit, "overflow", "NUMERIC_FAULT", {
          operation: safeOp,
          fault: "overflow",
          value: val
        });
        val = (val % limit + limit) % limit & limit - BN_1;
      }
      return val;
    }
    function getFormat(value) {
      if (typeof value === "number") {
        value = `fixed128x${value}`;
      }
      let signed = true;
      let width = 128;
      let decimals = 18;
      if (typeof value === "string") {
        if (value === "fixed") {
        } else if (value === "ufixed") {
          signed = false;
        } else {
          const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
          (0, errors_js_1.assertArgument)(match, "invalid fixed format", "format", value);
          signed = match[1] !== "u";
          width = parseInt(match[2]);
          decimals = parseInt(match[3]);
        }
      } else if (value) {
        const v = value;
        const check = (key, type2, defaultValue) => {
          if (v[key] == null) {
            return defaultValue;
          }
          (0, errors_js_1.assertArgument)(typeof v[key] === type2, "invalid fixed format (" + key + " not " + type2 + ")", "format." + key, v[key]);
          return v[key];
        };
        signed = check("signed", "boolean", signed);
        width = check("width", "number", width);
        decimals = check("decimals", "number", decimals);
      }
      (0, errors_js_1.assertArgument)(width % 8 === 0, "invalid FixedNumber width (not byte aligned)", "format.width", width);
      (0, errors_js_1.assertArgument)(decimals <= 80, "invalid FixedNumber decimals (too large)", "format.decimals", decimals);
      const name = (signed ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
      return { signed, width, decimals, name };
    }
    function toString(val, decimals) {
      let negative = "";
      if (val < BN_0) {
        negative = "-";
        val *= BN_N1;
      }
      let str = val.toString();
      if (decimals === 0) {
        return negative + str;
      }
      while (str.length <= decimals) {
        str = Zeros + str;
      }
      const index = str.length - decimals;
      str = str.substring(0, index) + "." + str.substring(index);
      while (str[0] === "0" && str[1] !== ".") {
        str = str.substring(1);
      }
      while (str[str.length - 1] === "0" && str[str.length - 2] !== ".") {
        str = str.substring(0, str.length - 1);
      }
      return negative + str;
    }
    var _format, _val, _tens, _FixedNumber_instances, checkFormat_fn, checkValue_fn, add_fn, sub_fn, mul_fn, div_fn;
    var _FixedNumber = class _FixedNumber {
      // Use this when changing this file to get some typing info,
      // but then switch to any to mask the internal type
      //constructor(guard: any, value: bigint, format: _FixedFormat) {
      /**
       *  @private
       */
      constructor(guard, value, format) {
        __privateAdd(this, _FixedNumber_instances);
        /**
         *  The specific fixed-point arithmetic field for this value.
         */
        __publicField(this, "format");
        __privateAdd(this, _format);
        // The actual value (accounting for decimals)
        __privateAdd(this, _val);
        // A base-10 value to multiple values by to maintain the magnitude
        __privateAdd(this, _tens);
        /**
         *  This is a property so console.log shows a human-meaningful value.
         *
         *  @private
         */
        __publicField(this, "_value");
        (0, errors_js_1.assertPrivate)(guard, _guard, "FixedNumber");
        __privateSet(this, _val, value);
        __privateSet(this, _format, format);
        const _value = toString(value, format.decimals);
        (0, properties_js_1.defineProperties)(this, { format: format.name, _value });
        __privateSet(this, _tens, getTens(format.decimals));
      }
      /**
       *  If true, negative values are permitted, otherwise only
       *  positive values and zero are allowed.
       */
      get signed() {
        return __privateGet(this, _format).signed;
      }
      /**
       *  The number of bits available to store the value.
       */
      get width() {
        return __privateGet(this, _format).width;
      }
      /**
       *  The number of decimal places in the fixed-point arithment field.
       */
      get decimals() {
        return __privateGet(this, _format).decimals;
      }
      /**
       *  The value as an integer, based on the smallest unit the
       *  [[decimals]] allow.
       */
      get value() {
        return __privateGet(this, _val);
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%this%% added
       *  to %%other%%, ignoring overflow.
       */
      addUnsafe(other) {
        return __privateMethod(this, _FixedNumber_instances, add_fn).call(this, other);
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%this%% added
       *  to %%other%%. A [[NumericFaultError]] is thrown if overflow
       *  occurs.
       */
      add(other) {
        return __privateMethod(this, _FixedNumber_instances, add_fn).call(this, other, "add");
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%other%% subtracted
       *  from %%this%%, ignoring overflow.
       */
      subUnsafe(other) {
        return __privateMethod(this, _FixedNumber_instances, sub_fn).call(this, other);
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%other%% subtracted
       *  from %%this%%. A [[NumericFaultError]] is thrown if overflow
       *  occurs.
       */
      sub(other) {
        return __privateMethod(this, _FixedNumber_instances, sub_fn).call(this, other, "sub");
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied
       *  by %%other%%, ignoring overflow and underflow (precision loss).
       */
      mulUnsafe(other) {
        return __privateMethod(this, _FixedNumber_instances, mul_fn).call(this, other);
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied
       *  by %%other%%. A [[NumericFaultError]] is thrown if overflow
       *  occurs.
       */
      mul(other) {
        return __privateMethod(this, _FixedNumber_instances, mul_fn).call(this, other, "mul");
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied
       *  by %%other%%. A [[NumericFaultError]] is thrown if overflow
       *  occurs or if underflow (precision loss) occurs.
       */
      mulSignal(other) {
        __privateMethod(this, _FixedNumber_instances, checkFormat_fn).call(this, other);
        const value = __privateGet(this, _val) * __privateGet(other, _val);
        (0, errors_js_1.assert)(value % __privateGet(this, _tens) === BN_0, "precision lost during signalling mul", "NUMERIC_FAULT", {
          operation: "mulSignal",
          fault: "underflow",
          value: this
        });
        return __privateMethod(this, _FixedNumber_instances, checkValue_fn).call(this, value / __privateGet(this, _tens), "mulSignal");
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%this%% divided
       *  by %%other%%, ignoring underflow (precision loss). A
       *  [[NumericFaultError]] is thrown if overflow occurs.
       */
      divUnsafe(other) {
        return __privateMethod(this, _FixedNumber_instances, div_fn).call(this, other);
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%this%% divided
       *  by %%other%%, ignoring underflow (precision loss). A
       *  [[NumericFaultError]] is thrown if overflow occurs.
       */
      div(other) {
        return __privateMethod(this, _FixedNumber_instances, div_fn).call(this, other, "div");
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%this%% divided
       *  by %%other%%. A [[NumericFaultError]] is thrown if underflow
       *  (precision loss) occurs.
       */
      divSignal(other) {
        (0, errors_js_1.assert)(__privateGet(other, _val) !== BN_0, "division by zero", "NUMERIC_FAULT", {
          operation: "div",
          fault: "divide-by-zero",
          value: this
        });
        __privateMethod(this, _FixedNumber_instances, checkFormat_fn).call(this, other);
        const value = __privateGet(this, _val) * __privateGet(this, _tens);
        (0, errors_js_1.assert)(value % __privateGet(other, _val) === BN_0, "precision lost during signalling div", "NUMERIC_FAULT", {
          operation: "divSignal",
          fault: "underflow",
          value: this
        });
        return __privateMethod(this, _FixedNumber_instances, checkValue_fn).call(this, value / __privateGet(other, _val), "divSignal");
      }
      /**
       *  Returns a comparison result between %%this%% and %%other%%.
       *
       *  This is suitable for use in sorting, where ``-1`` implies %%this%%
       *  is smaller, ``1`` implies %%this%% is larger and ``0`` implies
       *  both are equal.
       */
      cmp(other) {
        let a = this.value, b = other.value;
        const delta = this.decimals - other.decimals;
        if (delta > 0) {
          b *= getTens(delta);
        } else if (delta < 0) {
          a *= getTens(-delta);
        }
        if (a < b) {
          return -1;
        }
        if (a > b) {
          return 1;
        }
        return 0;
      }
      /**
       *  Returns true if %%other%% is equal to %%this%%.
       */
      eq(other) {
        return this.cmp(other) === 0;
      }
      /**
       *  Returns true if %%other%% is less than to %%this%%.
       */
      lt(other) {
        return this.cmp(other) < 0;
      }
      /**
       *  Returns true if %%other%% is less than or equal to %%this%%.
       */
      lte(other) {
        return this.cmp(other) <= 0;
      }
      /**
       *  Returns true if %%other%% is greater than to %%this%%.
       */
      gt(other) {
        return this.cmp(other) > 0;
      }
      /**
       *  Returns true if %%other%% is greater than or equal to %%this%%.
       */
      gte(other) {
        return this.cmp(other) >= 0;
      }
      /**
       *  Returns a new [[FixedNumber]] which is the largest **integer**
       *  that is less than or equal to %%this%%.
       *
       *  The decimal component of the result will always be ``0``.
       */
      floor() {
        let val = __privateGet(this, _val);
        if (__privateGet(this, _val) < BN_0) {
          val -= __privateGet(this, _tens) - BN_1;
        }
        val = __privateGet(this, _val) / __privateGet(this, _tens) * __privateGet(this, _tens);
        return __privateMethod(this, _FixedNumber_instances, checkValue_fn).call(this, val, "floor");
      }
      /**
       *  Returns a new [[FixedNumber]] which is the smallest **integer**
       *  that is greater than or equal to %%this%%.
       *
       *  The decimal component of the result will always be ``0``.
       */
      ceiling() {
        let val = __privateGet(this, _val);
        if (__privateGet(this, _val) > BN_0) {
          val += __privateGet(this, _tens) - BN_1;
        }
        val = __privateGet(this, _val) / __privateGet(this, _tens) * __privateGet(this, _tens);
        return __privateMethod(this, _FixedNumber_instances, checkValue_fn).call(this, val, "ceiling");
      }
      /**
       *  Returns a new [[FixedNumber]] with the decimal component
       *  rounded up on ties at %%decimals%% places.
       */
      round(decimals) {
        if (decimals == null) {
          decimals = 0;
        }
        if (decimals >= this.decimals) {
          return this;
        }
        const delta = this.decimals - decimals;
        const bump = BN_5 * getTens(delta - 1);
        let value = this.value + bump;
        const tens = getTens(delta);
        value = value / tens * tens;
        checkValue(value, __privateGet(this, _format), "round");
        return new _FixedNumber(_guard, value, __privateGet(this, _format));
      }
      /**
       *  Returns true if %%this%% is equal to ``0``.
       */
      isZero() {
        return __privateGet(this, _val) === BN_0;
      }
      /**
       *  Returns true if %%this%% is less than ``0``.
       */
      isNegative() {
        return __privateGet(this, _val) < BN_0;
      }
      /**
       *  Returns the string representation of %%this%%.
       */
      toString() {
        return this._value;
      }
      /**
       *  Returns a float approximation.
       *
       *  Due to IEEE 754 precission (or lack thereof), this function
       *  can only return an approximation and most values will contain
       *  rounding errors.
       */
      toUnsafeFloat() {
        return parseFloat(this.toString());
      }
      /**
       *  Return a new [[FixedNumber]] with the same value but has had
       *  its field set to %%format%%.
       *
       *  This will throw if the value cannot fit into %%format%%.
       */
      toFormat(format) {
        return _FixedNumber.fromString(this.toString(), format);
      }
      /**
       *  Creates a new [[FixedNumber]] for %%value%% divided by
       *  %%decimal%% places with %%format%%.
       *
       *  This will throw a [[NumericFaultError]] if %%value%% (once adjusted
       *  for %%decimals%%) cannot fit in %%format%%, either due to overflow
       *  or underflow (precision loss).
       */
      static fromValue(_value, _decimals, _format2) {
        const decimals = _decimals == null ? 0 : (0, maths_js_1.getNumber)(_decimals);
        const format = getFormat(_format2);
        let value = (0, maths_js_1.getBigInt)(_value, "value");
        const delta = decimals - format.decimals;
        if (delta > 0) {
          const tens = getTens(delta);
          (0, errors_js_1.assert)(value % tens === BN_0, "value loses precision for format", "NUMERIC_FAULT", {
            operation: "fromValue",
            fault: "underflow",
            value: _value
          });
          value /= tens;
        } else if (delta < 0) {
          value *= getTens(-delta);
        }
        checkValue(value, format, "fromValue");
        return new _FixedNumber(_guard, value, format);
      }
      /**
       *  Creates a new [[FixedNumber]] for %%value%% with %%format%%.
       *
       *  This will throw a [[NumericFaultError]] if %%value%% cannot fit
       *  in %%format%%, either due to overflow or underflow (precision loss).
       */
      static fromString(_value, _format2) {
        const match = _value.match(/^(-?)([0-9]*)\.?([0-9]*)$/);
        (0, errors_js_1.assertArgument)(match && match[2].length + match[3].length > 0, "invalid FixedNumber string value", "value", _value);
        const format = getFormat(_format2);
        let whole = match[2] || "0", decimal = match[3] || "";
        while (decimal.length < format.decimals) {
          decimal += Zeros;
        }
        (0, errors_js_1.assert)(decimal.substring(format.decimals).match(/^0*$/), "too many decimals for format", "NUMERIC_FAULT", {
          operation: "fromString",
          fault: "underflow",
          value: _value
        });
        decimal = decimal.substring(0, format.decimals);
        const value = BigInt(match[1] + whole + decimal);
        checkValue(value, format, "fromString");
        return new _FixedNumber(_guard, value, format);
      }
      /**
       *  Creates a new [[FixedNumber]] with the big-endian representation
       *  %%value%% with %%format%%.
       *
       *  This will throw a [[NumericFaultError]] if %%value%% cannot fit
       *  in %%format%% due to overflow.
       */
      static fromBytes(_value, _format2) {
        let value = (0, maths_js_1.toBigInt)((0, data_js_1.getBytes)(_value, "value"));
        const format = getFormat(_format2);
        if (format.signed) {
          value = (0, maths_js_1.fromTwos)(value, format.width);
        }
        checkValue(value, format, "fromBytes");
        return new _FixedNumber(_guard, value, format);
      }
    };
    _format = new WeakMap();
    _val = new WeakMap();
    _tens = new WeakMap();
    _FixedNumber_instances = new WeakSet();
    checkFormat_fn = function(other) {
      (0, errors_js_1.assertArgument)(this.format === other.format, "incompatible format; use fixedNumber.toFormat", "other", other);
    };
    checkValue_fn = function(val, safeOp) {
      val = checkValue(val, __privateGet(this, _format), safeOp);
      return new _FixedNumber(_guard, val, __privateGet(this, _format));
    };
    add_fn = function(o, safeOp) {
      __privateMethod(this, _FixedNumber_instances, checkFormat_fn).call(this, o);
      return __privateMethod(this, _FixedNumber_instances, checkValue_fn).call(this, __privateGet(this, _val) + __privateGet(o, _val), safeOp);
    };
    sub_fn = function(o, safeOp) {
      __privateMethod(this, _FixedNumber_instances, checkFormat_fn).call(this, o);
      return __privateMethod(this, _FixedNumber_instances, checkValue_fn).call(this, __privateGet(this, _val) - __privateGet(o, _val), safeOp);
    };
    mul_fn = function(o, safeOp) {
      __privateMethod(this, _FixedNumber_instances, checkFormat_fn).call(this, o);
      return __privateMethod(this, _FixedNumber_instances, checkValue_fn).call(this, __privateGet(this, _val) * __privateGet(o, _val) / __privateGet(this, _tens), safeOp);
    };
    div_fn = function(o, safeOp) {
      (0, errors_js_1.assert)(__privateGet(o, _val) !== BN_0, "division by zero", "NUMERIC_FAULT", {
        operation: "div",
        fault: "divide-by-zero",
        value: this
      });
      __privateMethod(this, _FixedNumber_instances, checkFormat_fn).call(this, o);
      return __privateMethod(this, _FixedNumber_instances, checkValue_fn).call(this, __privateGet(this, _val) * __privateGet(this, _tens) / __privateGet(o, _val), safeOp);
    };
    var FixedNumber = _FixedNumber;
    exports2.FixedNumber = FixedNumber;
  }
});

// node_modules/ethers/lib.commonjs/utils/rlp-decode.js
var require_rlp_decode = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/rlp-decode.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decodeRlp = void 0;
    var data_js_1 = require_data();
    var errors_js_1 = require_errors4();
    var data_js_2 = require_data();
    function hexlifyByte(value) {
      let result = value.toString(16);
      while (result.length < 2) {
        result = "0" + result;
      }
      return "0x" + result;
    }
    function unarrayifyInteger(data, offset2, length) {
      let result = 0;
      for (let i = 0; i < length; i++) {
        result = result * 256 + data[offset2 + i];
      }
      return result;
    }
    function _decodeChildren(data, offset2, childOffset, length) {
      const result = [];
      while (childOffset < offset2 + 1 + length) {
        const decoded = _decode(data, childOffset);
        result.push(decoded.result);
        childOffset += decoded.consumed;
        (0, errors_js_1.assert)(childOffset <= offset2 + 1 + length, "child data too short", "BUFFER_OVERRUN", {
          buffer: data,
          length,
          offset: offset2
        });
      }
      return { consumed: 1 + length, result };
    }
    function _decode(data, offset2) {
      (0, errors_js_1.assert)(data.length !== 0, "data too short", "BUFFER_OVERRUN", {
        buffer: data,
        length: 0,
        offset: 1
      });
      const checkOffset = (offset3) => {
        (0, errors_js_1.assert)(offset3 <= data.length, "data short segment too short", "BUFFER_OVERRUN", {
          buffer: data,
          length: data.length,
          offset: offset3
        });
      };
      if (data[offset2] >= 248) {
        const lengthLength = data[offset2] - 247;
        checkOffset(offset2 + 1 + lengthLength);
        const length = unarrayifyInteger(data, offset2 + 1, lengthLength);
        checkOffset(offset2 + 1 + lengthLength + length);
        return _decodeChildren(data, offset2, offset2 + 1 + lengthLength, lengthLength + length);
      } else if (data[offset2] >= 192) {
        const length = data[offset2] - 192;
        checkOffset(offset2 + 1 + length);
        return _decodeChildren(data, offset2, offset2 + 1, length);
      } else if (data[offset2] >= 184) {
        const lengthLength = data[offset2] - 183;
        checkOffset(offset2 + 1 + lengthLength);
        const length = unarrayifyInteger(data, offset2 + 1, lengthLength);
        checkOffset(offset2 + 1 + lengthLength + length);
        const result = (0, data_js_1.hexlify)(data.slice(offset2 + 1 + lengthLength, offset2 + 1 + lengthLength + length));
        return { consumed: 1 + lengthLength + length, result };
      } else if (data[offset2] >= 128) {
        const length = data[offset2] - 128;
        checkOffset(offset2 + 1 + length);
        const result = (0, data_js_1.hexlify)(data.slice(offset2 + 1, offset2 + 1 + length));
        return { consumed: 1 + length, result };
      }
      return { consumed: 1, result: hexlifyByte(data[offset2]) };
    }
    function decodeRlp(_data) {
      const data = (0, data_js_2.getBytes)(_data, "data");
      const decoded = _decode(data, 0);
      (0, errors_js_1.assertArgument)(decoded.consumed === data.length, "unexpected junk after rlp payload", "data", _data);
      return decoded.result;
    }
    exports2.decodeRlp = decodeRlp;
  }
});

// node_modules/ethers/lib.commonjs/utils/rlp-encode.js
var require_rlp_encode = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/rlp-encode.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.encodeRlp = void 0;
    var data_js_1 = require_data();
    function arrayifyInteger(value) {
      const result = [];
      while (value) {
        result.unshift(value & 255);
        value >>= 8;
      }
      return result;
    }
    function _encode(object) {
      if (Array.isArray(object)) {
        let payload = [];
        object.forEach(function(child) {
          payload = payload.concat(_encode(child));
        });
        if (payload.length <= 55) {
          payload.unshift(192 + payload.length);
          return payload;
        }
        const length2 = arrayifyInteger(payload.length);
        length2.unshift(247 + length2.length);
        return length2.concat(payload);
      }
      const data = Array.prototype.slice.call((0, data_js_1.getBytes)(object, "object"));
      if (data.length === 1 && data[0] <= 127) {
        return data;
      } else if (data.length <= 55) {
        data.unshift(128 + data.length);
        return data;
      }
      const length = arrayifyInteger(data.length);
      length.unshift(183 + length.length);
      return length.concat(data);
    }
    var nibbles = "0123456789abcdef";
    function encodeRlp(object) {
      let result = "0x";
      for (const v of _encode(object)) {
        result += nibbles[v >> 4];
        result += nibbles[v & 15];
      }
      return result;
    }
    exports2.encodeRlp = encodeRlp;
  }
});

// node_modules/ethers/lib.commonjs/utils/units.js
var require_units = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/units.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseEther = exports2.formatEther = exports2.parseUnits = exports2.formatUnits = void 0;
    var errors_js_1 = require_errors4();
    var fixednumber_js_1 = require_fixednumber();
    var maths_js_1 = require_maths();
    var names = [
      "wei",
      "kwei",
      "mwei",
      "gwei",
      "szabo",
      "finney",
      "ether"
    ];
    function formatUnits(value, unit) {
      let decimals = 18;
      if (typeof unit === "string") {
        const index = names.indexOf(unit);
        (0, errors_js_1.assertArgument)(index >= 0, "invalid unit", "unit", unit);
        decimals = 3 * index;
      } else if (unit != null) {
        decimals = (0, maths_js_1.getNumber)(unit, "unit");
      }
      return fixednumber_js_1.FixedNumber.fromValue(value, decimals, { decimals, width: 512 }).toString();
    }
    exports2.formatUnits = formatUnits;
    function parseUnits(value, unit) {
      (0, errors_js_1.assertArgument)(typeof value === "string", "value must be a string", "value", value);
      let decimals = 18;
      if (typeof unit === "string") {
        const index = names.indexOf(unit);
        (0, errors_js_1.assertArgument)(index >= 0, "invalid unit", "unit", unit);
        decimals = 3 * index;
      } else if (unit != null) {
        decimals = (0, maths_js_1.getNumber)(unit, "unit");
      }
      return fixednumber_js_1.FixedNumber.fromString(value, { decimals, width: 512 }).value;
    }
    exports2.parseUnits = parseUnits;
    function formatEther(wei) {
      return formatUnits(wei, 18);
    }
    exports2.formatEther = formatEther;
    function parseEther(ether) {
      return parseUnits(ether, 18);
    }
    exports2.parseEther = parseEther;
  }
});

// node_modules/ethers/lib.commonjs/utils/uuid.js
var require_uuid = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/uuid.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.uuidV4 = void 0;
    var data_js_1 = require_data();
    function uuidV4(randomBytes2) {
      const bytes = (0, data_js_1.getBytes)(randomBytes2, "randomBytes");
      bytes[6] = bytes[6] & 15 | 64;
      bytes[8] = bytes[8] & 63 | 128;
      const value = (0, data_js_1.hexlify)(bytes);
      return [
        value.substring(2, 10),
        value.substring(10, 14),
        value.substring(14, 18),
        value.substring(18, 22),
        value.substring(22, 34)
      ].join("-");
    }
    exports2.uuidV4 = uuidV4;
  }
});

// node_modules/ethers/lib.commonjs/utils/index.js
var require_utils11 = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toUtf8String = exports2.toUtf8CodePoints = exports2.toUtf8Bytes = exports2.parseUnits = exports2.formatUnits = exports2.parseEther = exports2.formatEther = exports2.encodeRlp = exports2.decodeRlp = exports2.defineProperties = exports2.resolveProperties = exports2.toQuantity = exports2.toBeArray = exports2.toBeHex = exports2.toNumber = exports2.toBigInt = exports2.getUint = exports2.getNumber = exports2.getBigInt = exports2.mask = exports2.toTwos = exports2.fromTwos = exports2.FixedNumber = exports2.FetchCancelSignal = exports2.FetchResponse = exports2.FetchRequest = exports2.EventPayload = exports2.makeError = exports2.assertNormalize = exports2.assertPrivate = exports2.assertArgumentCount = exports2.assertArgument = exports2.assert = exports2.isError = exports2.isCallException = exports2.zeroPadBytes = exports2.zeroPadValue = exports2.stripZerosLeft = exports2.dataSlice = exports2.dataLength = exports2.concat = exports2.hexlify = exports2.isBytesLike = exports2.isHexString = exports2.getBytesCopy = exports2.getBytes = exports2.encodeBase64 = exports2.decodeBase64 = exports2.encodeBase58 = exports2.decodeBase58 = void 0;
    exports2.uuidV4 = exports2.Utf8ErrorFuncs = void 0;
    var base58_js_1 = require_base58();
    Object.defineProperty(exports2, "decodeBase58", { enumerable: true, get: function() {
      return base58_js_1.decodeBase58;
    } });
    Object.defineProperty(exports2, "encodeBase58", { enumerable: true, get: function() {
      return base58_js_1.encodeBase58;
    } });
    var base64_js_1 = require_base64_browser();
    Object.defineProperty(exports2, "decodeBase64", { enumerable: true, get: function() {
      return base64_js_1.decodeBase64;
    } });
    Object.defineProperty(exports2, "encodeBase64", { enumerable: true, get: function() {
      return base64_js_1.encodeBase64;
    } });
    var data_js_1 = require_data();
    Object.defineProperty(exports2, "getBytes", { enumerable: true, get: function() {
      return data_js_1.getBytes;
    } });
    Object.defineProperty(exports2, "getBytesCopy", { enumerable: true, get: function() {
      return data_js_1.getBytesCopy;
    } });
    Object.defineProperty(exports2, "isHexString", { enumerable: true, get: function() {
      return data_js_1.isHexString;
    } });
    Object.defineProperty(exports2, "isBytesLike", { enumerable: true, get: function() {
      return data_js_1.isBytesLike;
    } });
    Object.defineProperty(exports2, "hexlify", { enumerable: true, get: function() {
      return data_js_1.hexlify;
    } });
    Object.defineProperty(exports2, "concat", { enumerable: true, get: function() {
      return data_js_1.concat;
    } });
    Object.defineProperty(exports2, "dataLength", { enumerable: true, get: function() {
      return data_js_1.dataLength;
    } });
    Object.defineProperty(exports2, "dataSlice", { enumerable: true, get: function() {
      return data_js_1.dataSlice;
    } });
    Object.defineProperty(exports2, "stripZerosLeft", { enumerable: true, get: function() {
      return data_js_1.stripZerosLeft;
    } });
    Object.defineProperty(exports2, "zeroPadValue", { enumerable: true, get: function() {
      return data_js_1.zeroPadValue;
    } });
    Object.defineProperty(exports2, "zeroPadBytes", { enumerable: true, get: function() {
      return data_js_1.zeroPadBytes;
    } });
    var errors_js_1 = require_errors4();
    Object.defineProperty(exports2, "isCallException", { enumerable: true, get: function() {
      return errors_js_1.isCallException;
    } });
    Object.defineProperty(exports2, "isError", { enumerable: true, get: function() {
      return errors_js_1.isError;
    } });
    Object.defineProperty(exports2, "assert", { enumerable: true, get: function() {
      return errors_js_1.assert;
    } });
    Object.defineProperty(exports2, "assertArgument", { enumerable: true, get: function() {
      return errors_js_1.assertArgument;
    } });
    Object.defineProperty(exports2, "assertArgumentCount", { enumerable: true, get: function() {
      return errors_js_1.assertArgumentCount;
    } });
    Object.defineProperty(exports2, "assertPrivate", { enumerable: true, get: function() {
      return errors_js_1.assertPrivate;
    } });
    Object.defineProperty(exports2, "assertNormalize", { enumerable: true, get: function() {
      return errors_js_1.assertNormalize;
    } });
    Object.defineProperty(exports2, "makeError", { enumerable: true, get: function() {
      return errors_js_1.makeError;
    } });
    var events_js_1 = require_events();
    Object.defineProperty(exports2, "EventPayload", { enumerable: true, get: function() {
      return events_js_1.EventPayload;
    } });
    var fetch_js_1 = require_fetch();
    Object.defineProperty(exports2, "FetchRequest", { enumerable: true, get: function() {
      return fetch_js_1.FetchRequest;
    } });
    Object.defineProperty(exports2, "FetchResponse", { enumerable: true, get: function() {
      return fetch_js_1.FetchResponse;
    } });
    Object.defineProperty(exports2, "FetchCancelSignal", { enumerable: true, get: function() {
      return fetch_js_1.FetchCancelSignal;
    } });
    var fixednumber_js_1 = require_fixednumber();
    Object.defineProperty(exports2, "FixedNumber", { enumerable: true, get: function() {
      return fixednumber_js_1.FixedNumber;
    } });
    var maths_js_1 = require_maths();
    Object.defineProperty(exports2, "fromTwos", { enumerable: true, get: function() {
      return maths_js_1.fromTwos;
    } });
    Object.defineProperty(exports2, "toTwos", { enumerable: true, get: function() {
      return maths_js_1.toTwos;
    } });
    Object.defineProperty(exports2, "mask", { enumerable: true, get: function() {
      return maths_js_1.mask;
    } });
    Object.defineProperty(exports2, "getBigInt", { enumerable: true, get: function() {
      return maths_js_1.getBigInt;
    } });
    Object.defineProperty(exports2, "getNumber", { enumerable: true, get: function() {
      return maths_js_1.getNumber;
    } });
    Object.defineProperty(exports2, "getUint", { enumerable: true, get: function() {
      return maths_js_1.getUint;
    } });
    Object.defineProperty(exports2, "toBigInt", { enumerable: true, get: function() {
      return maths_js_1.toBigInt;
    } });
    Object.defineProperty(exports2, "toNumber", { enumerable: true, get: function() {
      return maths_js_1.toNumber;
    } });
    Object.defineProperty(exports2, "toBeHex", { enumerable: true, get: function() {
      return maths_js_1.toBeHex;
    } });
    Object.defineProperty(exports2, "toBeArray", { enumerable: true, get: function() {
      return maths_js_1.toBeArray;
    } });
    Object.defineProperty(exports2, "toQuantity", { enumerable: true, get: function() {
      return maths_js_1.toQuantity;
    } });
    var properties_js_1 = require_properties();
    Object.defineProperty(exports2, "resolveProperties", { enumerable: true, get: function() {
      return properties_js_1.resolveProperties;
    } });
    Object.defineProperty(exports2, "defineProperties", { enumerable: true, get: function() {
      return properties_js_1.defineProperties;
    } });
    var rlp_decode_js_1 = require_rlp_decode();
    Object.defineProperty(exports2, "decodeRlp", { enumerable: true, get: function() {
      return rlp_decode_js_1.decodeRlp;
    } });
    var rlp_encode_js_1 = require_rlp_encode();
    Object.defineProperty(exports2, "encodeRlp", { enumerable: true, get: function() {
      return rlp_encode_js_1.encodeRlp;
    } });
    var units_js_1 = require_units();
    Object.defineProperty(exports2, "formatEther", { enumerable: true, get: function() {
      return units_js_1.formatEther;
    } });
    Object.defineProperty(exports2, "parseEther", { enumerable: true, get: function() {
      return units_js_1.parseEther;
    } });
    Object.defineProperty(exports2, "formatUnits", { enumerable: true, get: function() {
      return units_js_1.formatUnits;
    } });
    Object.defineProperty(exports2, "parseUnits", { enumerable: true, get: function() {
      return units_js_1.parseUnits;
    } });
    var utf8_js_1 = require_utf8();
    Object.defineProperty(exports2, "toUtf8Bytes", { enumerable: true, get: function() {
      return utf8_js_1.toUtf8Bytes;
    } });
    Object.defineProperty(exports2, "toUtf8CodePoints", { enumerable: true, get: function() {
      return utf8_js_1.toUtf8CodePoints;
    } });
    Object.defineProperty(exports2, "toUtf8String", { enumerable: true, get: function() {
      return utf8_js_1.toUtf8String;
    } });
    Object.defineProperty(exports2, "Utf8ErrorFuncs", { enumerable: true, get: function() {
      return utf8_js_1.Utf8ErrorFuncs;
    } });
    var uuid_js_1 = require_uuid();
    Object.defineProperty(exports2, "uuidV4", { enumerable: true, get: function() {
      return uuid_js_1.uuidV4;
    } });
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/abstract-coder.js
var require_abstract_coder = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/abstract-coder.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Reader = exports2.Writer = exports2.Coder = exports2.checkResultErrors = exports2.Result = exports2.WordSize = void 0;
    var index_js_1 = require_utils11();
    exports2.WordSize = 32;
    var Padding = new Uint8Array(exports2.WordSize);
    var passProperties = ["then"];
    var _guard = {};
    var resultNames = /* @__PURE__ */ new WeakMap();
    function getNames(result) {
      return resultNames.get(result);
    }
    function setNames(result, names) {
      resultNames.set(result, names);
    }
    function throwError(name, error) {
      const wrapped = new Error(`deferred error during ABI decoding triggered accessing ${name}`);
      wrapped.error = error;
      throw wrapped;
    }
    function toObject(names, items, deep) {
      if (names.indexOf(null) >= 0) {
        return items.map((item, index) => {
          if (item instanceof Result) {
            return toObject(getNames(item), item, deep);
          }
          return item;
        });
      }
      return names.reduce((accum, name, index) => {
        let item = items.getValue(name);
        if (!(name in accum)) {
          if (deep && item instanceof Result) {
            item = toObject(getNames(item), item, deep);
          }
          accum[name] = item;
        }
        return accum;
      }, {});
    }
    var _names;
    var _Result = class _Result extends Array {
      /**
       *  @private
       */
      constructor(...args) {
        const guard = args[0];
        let items = args[1];
        let names = (args[2] || []).slice();
        let wrap = true;
        if (guard !== _guard) {
          items = args;
          names = [];
          wrap = false;
        }
        super(items.length);
        // No longer used; but cannot be removed as it will remove the
        // #private field from the .d.ts which may break backwards
        // compatibility
        __privateAdd(this, _names);
        items.forEach((item, index) => {
          this[index] = item;
        });
        const nameCounts = names.reduce((accum, name) => {
          if (typeof name === "string") {
            accum.set(name, (accum.get(name) || 0) + 1);
          }
          return accum;
        }, /* @__PURE__ */ new Map());
        setNames(this, Object.freeze(items.map((item, index) => {
          const name = names[index];
          if (name != null && nameCounts.get(name) === 1) {
            return name;
          }
          return null;
        })));
        __privateSet(this, _names, []);
        if (__privateGet(this, _names) == null) {
          void __privateGet(this, _names);
        }
        if (!wrap) {
          return;
        }
        Object.freeze(this);
        const proxy = new Proxy(this, {
          get: (target, prop, receiver) => {
            if (typeof prop === "string") {
              if (prop.match(/^[0-9]+$/)) {
                const index = (0, index_js_1.getNumber)(prop, "%index");
                if (index < 0 || index >= this.length) {
                  throw new RangeError("out of result range");
                }
                const item = target[index];
                if (item instanceof Error) {
                  throwError(`index ${index}`, item);
                }
                return item;
              }
              if (passProperties.indexOf(prop) >= 0) {
                return Reflect.get(target, prop, receiver);
              }
              const value = target[prop];
              if (value instanceof Function) {
                return function(...args2) {
                  return value.apply(this === receiver ? target : this, args2);
                };
              } else if (!(prop in target)) {
                return target.getValue.apply(this === receiver ? target : this, [prop]);
              }
            }
            return Reflect.get(target, prop, receiver);
          }
        });
        setNames(proxy, getNames(this));
        return proxy;
      }
      /**
       *  Returns the Result as a normal Array. If %%deep%%, any children
       *  which are Result objects are also converted to a normal Array.
       *
       *  This will throw if there are any outstanding deferred
       *  errors.
       */
      toArray(deep) {
        const result = [];
        this.forEach((item, index) => {
          if (item instanceof Error) {
            throwError(`index ${index}`, item);
          }
          if (deep && item instanceof _Result) {
            item = item.toArray(deep);
          }
          result.push(item);
        });
        return result;
      }
      /**
       *  Returns the Result as an Object with each name-value pair. If
       *  %%deep%%, any children which are Result objects are also
       *  converted to an Object.
       *
       *  This will throw if any value is unnamed, or if there are
       *  any outstanding deferred errors.
       */
      toObject(deep) {
        const names = getNames(this);
        return names.reduce((accum, name, index) => {
          (0, index_js_1.assert)(name != null, `value at index ${index} unnamed`, "UNSUPPORTED_OPERATION", {
            operation: "toObject()"
          });
          return toObject(names, this, deep);
        }, {});
      }
      /**
       *  @_ignore
       */
      slice(start, end) {
        if (start == null) {
          start = 0;
        }
        if (start < 0) {
          start += this.length;
          if (start < 0) {
            start = 0;
          }
        }
        if (end == null) {
          end = this.length;
        }
        if (end < 0) {
          end += this.length;
          if (end < 0) {
            end = 0;
          }
        }
        if (end > this.length) {
          end = this.length;
        }
        const _names2 = getNames(this);
        const result = [], names = [];
        for (let i = start; i < end; i++) {
          result.push(this[i]);
          names.push(_names2[i]);
        }
        return new _Result(_guard, result, names);
      }
      /**
       *  @_ignore
       */
      filter(callback, thisArg) {
        const _names2 = getNames(this);
        const result = [], names = [];
        for (let i = 0; i < this.length; i++) {
          const item = this[i];
          if (item instanceof Error) {
            throwError(`index ${i}`, item);
          }
          if (callback.call(thisArg, item, i, this)) {
            result.push(item);
            names.push(_names2[i]);
          }
        }
        return new _Result(_guard, result, names);
      }
      /**
       *  @_ignore
       */
      map(callback, thisArg) {
        const result = [];
        for (let i = 0; i < this.length; i++) {
          const item = this[i];
          if (item instanceof Error) {
            throwError(`index ${i}`, item);
          }
          result.push(callback.call(thisArg, item, i, this));
        }
        return result;
      }
      /**
       *  Returns the value for %%name%%.
       *
       *  Since it is possible to have a key whose name conflicts with
       *  a method on a [[Result]] or its superclass Array, or any
       *  JavaScript keyword, this ensures all named values are still
       *  accessible by name.
       */
      getValue(name) {
        const index = getNames(this).indexOf(name);
        if (index === -1) {
          return void 0;
        }
        const value = this[index];
        if (value instanceof Error) {
          throwError(`property ${JSON.stringify(name)}`, value.error);
        }
        return value;
      }
      /**
       *  Creates a new [[Result]] for %%items%% with each entry
       *  also accessible by its corresponding name in %%keys%%.
       */
      static fromItems(items, keys) {
        return new _Result(_guard, items, keys);
      }
    };
    _names = new WeakMap();
    var Result = _Result;
    exports2.Result = Result;
    function checkResultErrors(result) {
      const errors = [];
      const checkErrors = function(path, object) {
        if (!Array.isArray(object)) {
          return;
        }
        for (let key in object) {
          const childPath = path.slice();
          childPath.push(key);
          try {
            checkErrors(childPath, object[key]);
          } catch (error) {
            errors.push({ path: childPath, error });
          }
        }
      };
      checkErrors([], result);
      return errors;
    }
    exports2.checkResultErrors = checkResultErrors;
    function getValue(value) {
      let bytes = (0, index_js_1.toBeArray)(value);
      (0, index_js_1.assert)(bytes.length <= exports2.WordSize, "value out-of-bounds", "BUFFER_OVERRUN", { buffer: bytes, length: exports2.WordSize, offset: bytes.length });
      if (bytes.length !== exports2.WordSize) {
        bytes = (0, index_js_1.getBytesCopy)((0, index_js_1.concat)([Padding.slice(bytes.length % exports2.WordSize), bytes]));
      }
      return bytes;
    }
    var Coder = class {
      constructor(name, type2, localName, dynamic) {
        // The coder name:
        //   - address, uint256, tuple, array, etc.
        __publicField(this, "name");
        // The fully expanded type, including composite types:
        //   - address, uint256, tuple(address,bytes), uint256[3][4][],  etc.
        __publicField(this, "type");
        // The localName bound in the signature, in this example it is "baz":
        //   - tuple(address foo, uint bar) baz
        __publicField(this, "localName");
        // Whether this type is dynamic:
        //  - Dynamic: bytes, string, address[], tuple(boolean[]), etc.
        //  - Not Dynamic: address, uint256, boolean[3], tuple(address, uint8)
        __publicField(this, "dynamic");
        (0, index_js_1.defineProperties)(this, { name, type: type2, localName, dynamic }, {
          name: "string",
          type: "string",
          localName: "string",
          dynamic: "boolean"
        });
      }
      _throwError(message, value) {
        (0, index_js_1.assertArgument)(false, message, this.localName, value);
      }
    };
    exports2.Coder = Coder;
    var _data, _dataLength, _Writer_instances, writeData_fn;
    var Writer = class {
      constructor() {
        __privateAdd(this, _Writer_instances);
        // An array of WordSize lengthed objects to concatenation
        __privateAdd(this, _data);
        __privateAdd(this, _dataLength);
        __privateSet(this, _data, []);
        __privateSet(this, _dataLength, 0);
      }
      get data() {
        return (0, index_js_1.concat)(__privateGet(this, _data));
      }
      get length() {
        return __privateGet(this, _dataLength);
      }
      appendWriter(writer) {
        return __privateMethod(this, _Writer_instances, writeData_fn).call(this, (0, index_js_1.getBytesCopy)(writer.data));
      }
      // Arrayish item; pad on the right to *nearest* WordSize
      writeBytes(value) {
        let bytes = (0, index_js_1.getBytesCopy)(value);
        const paddingOffset = bytes.length % exports2.WordSize;
        if (paddingOffset) {
          bytes = (0, index_js_1.getBytesCopy)((0, index_js_1.concat)([bytes, Padding.slice(paddingOffset)]));
        }
        return __privateMethod(this, _Writer_instances, writeData_fn).call(this, bytes);
      }
      // Numeric item; pad on the left *to* WordSize
      writeValue(value) {
        return __privateMethod(this, _Writer_instances, writeData_fn).call(this, getValue(value));
      }
      // Inserts a numeric place-holder, returning a callback that can
      // be used to asjust the value later
      writeUpdatableValue() {
        const offset2 = __privateGet(this, _data).length;
        __privateGet(this, _data).push(Padding);
        __privateSet(this, _dataLength, __privateGet(this, _dataLength) + exports2.WordSize);
        return (value) => {
          __privateGet(this, _data)[offset2] = getValue(value);
        };
      }
    };
    _data = new WeakMap();
    _dataLength = new WeakMap();
    _Writer_instances = new WeakSet();
    writeData_fn = function(data) {
      __privateGet(this, _data).push(data);
      __privateSet(this, _dataLength, __privateGet(this, _dataLength) + data.length);
      return data.length;
    };
    exports2.Writer = Writer;
    var _data2, _offset, _bytesRead, _parent, _maxInflation, _Reader_instances, incrementBytesRead_fn, peekBytes_fn;
    var _Reader = class _Reader {
      constructor(data, allowLoose, maxInflation) {
        __privateAdd(this, _Reader_instances);
        // Allows incomplete unpadded data to be read; otherwise an error
        // is raised if attempting to overrun the buffer. This is required
        // to deal with an old Solidity bug, in which event data for
        // external (not public thoguh) was tightly packed.
        __publicField(this, "allowLoose");
        __privateAdd(this, _data2);
        __privateAdd(this, _offset);
        __privateAdd(this, _bytesRead);
        __privateAdd(this, _parent);
        __privateAdd(this, _maxInflation);
        (0, index_js_1.defineProperties)(this, { allowLoose: !!allowLoose });
        __privateSet(this, _data2, (0, index_js_1.getBytesCopy)(data));
        __privateSet(this, _bytesRead, 0);
        __privateSet(this, _parent, null);
        __privateSet(this, _maxInflation, maxInflation != null ? maxInflation : 1024);
        __privateSet(this, _offset, 0);
      }
      get data() {
        return (0, index_js_1.hexlify)(__privateGet(this, _data2));
      }
      get dataLength() {
        return __privateGet(this, _data2).length;
      }
      get consumed() {
        return __privateGet(this, _offset);
      }
      get bytes() {
        return new Uint8Array(__privateGet(this, _data2));
      }
      // Create a sub-reader with the same underlying data, but offset
      subReader(offset2) {
        const reader = new _Reader(__privateGet(this, _data2).slice(__privateGet(this, _offset) + offset2), this.allowLoose, __privateGet(this, _maxInflation));
        __privateSet(reader, _parent, this);
        return reader;
      }
      // Read bytes
      readBytes(length, loose) {
        let bytes = __privateMethod(this, _Reader_instances, peekBytes_fn).call(this, 0, length, !!loose);
        __privateMethod(this, _Reader_instances, incrementBytesRead_fn).call(this, length);
        __privateSet(this, _offset, __privateGet(this, _offset) + bytes.length);
        return bytes.slice(0, length);
      }
      // Read a numeric values
      readValue() {
        return (0, index_js_1.toBigInt)(this.readBytes(exports2.WordSize));
      }
      readIndex() {
        return (0, index_js_1.toNumber)(this.readBytes(exports2.WordSize));
      }
    };
    _data2 = new WeakMap();
    _offset = new WeakMap();
    _bytesRead = new WeakMap();
    _parent = new WeakMap();
    _maxInflation = new WeakMap();
    _Reader_instances = new WeakSet();
    incrementBytesRead_fn = function(count) {
      var _a;
      if (__privateGet(this, _parent)) {
        return __privateMethod(_a = __privateGet(this, _parent), _Reader_instances, incrementBytesRead_fn).call(_a, count);
      }
      __privateSet(this, _bytesRead, __privateGet(this, _bytesRead) + count);
      (0, index_js_1.assert)(__privateGet(this, _maxInflation) < 1 || __privateGet(this, _bytesRead) <= __privateGet(this, _maxInflation) * this.dataLength, `compressed ABI data exceeds inflation ratio of ${__privateGet(this, _maxInflation)} ( see: https://github.com/ethers-io/ethers.js/issues/4537 )`, "BUFFER_OVERRUN", {
        buffer: (0, index_js_1.getBytesCopy)(__privateGet(this, _data2)),
        offset: __privateGet(this, _offset),
        length: count,
        info: {
          bytesRead: __privateGet(this, _bytesRead),
          dataLength: this.dataLength
        }
      });
    };
    peekBytes_fn = function(offset2, length, loose) {
      let alignedLength = Math.ceil(length / exports2.WordSize) * exports2.WordSize;
      if (__privateGet(this, _offset) + alignedLength > __privateGet(this, _data2).length) {
        if (this.allowLoose && loose && __privateGet(this, _offset) + length <= __privateGet(this, _data2).length) {
          alignedLength = length;
        } else {
          (0, index_js_1.assert)(false, "data out-of-bounds", "BUFFER_OVERRUN", {
            buffer: (0, index_js_1.getBytesCopy)(__privateGet(this, _data2)),
            length: __privateGet(this, _data2).length,
            offset: __privateGet(this, _offset) + alignedLength
          });
        }
      }
      return __privateGet(this, _data2).slice(__privateGet(this, _offset), __privateGet(this, _offset) + alignedLength);
    };
    var Reader = _Reader;
    exports2.Reader = Reader;
  }
});

// node_modules/ethers/node_modules/@noble/hashes/_assert.js
var require_assert2 = __commonJS({
  "node_modules/ethers/node_modules/@noble/hashes/_assert.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.output = exports2.exists = exports2.hash = exports2.bytes = exports2.bool = exports2.number = void 0;
    function number2(n) {
      if (!Number.isSafeInteger(n) || n < 0)
        throw new Error(`Wrong positive integer: ${n}`);
    }
    exports2.number = number2;
    function bool(b) {
      if (typeof b !== "boolean")
        throw new Error(`Expected boolean, not ${b}`);
    }
    exports2.bool = bool;
    function bytes(b, ...lengths) {
      if (!(b instanceof Uint8Array))
        throw new Error("Expected Uint8Array");
      if (lengths.length > 0 && !lengths.includes(b.length))
        throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);
    }
    exports2.bytes = bytes;
    function hash(hash2) {
      if (typeof hash2 !== "function" || typeof hash2.create !== "function")
        throw new Error("Hash should be wrapped by utils.wrapConstructor");
      number2(hash2.outputLen);
      number2(hash2.blockLen);
    }
    exports2.hash = hash;
    function exists(instance2, checkFinished = true) {
      if (instance2.destroyed)
        throw new Error("Hash instance has been destroyed");
      if (checkFinished && instance2.finished)
        throw new Error("Hash#digest() has already been called");
    }
    exports2.exists = exists;
    function output(out, instance2) {
      bytes(out);
      const min = instance2.outputLen;
      if (out.length < min) {
        throw new Error(`digestInto() expects output buffer of length at least ${min}`);
      }
    }
    exports2.output = output;
    var assert3 = { number: number2, bool, bytes, hash, exists, output };
    exports2.default = assert3;
  }
});

// node_modules/ethers/node_modules/@noble/hashes/crypto.js
var require_crypto3 = __commonJS({
  "node_modules/ethers/node_modules/@noble/hashes/crypto.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.crypto = void 0;
    exports2.crypto = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
  }
});

// node_modules/ethers/node_modules/@noble/hashes/utils.js
var require_utils12 = __commonJS({
  "node_modules/ethers/node_modules/@noble/hashes/utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.randomBytes = exports2.wrapXOFConstructorWithOpts = exports2.wrapConstructorWithOpts = exports2.wrapConstructor = exports2.checkOpts = exports2.Hash = exports2.concatBytes = exports2.toBytes = exports2.utf8ToBytes = exports2.asyncLoop = exports2.nextTick = exports2.hexToBytes = exports2.bytesToHex = exports2.isLE = exports2.rotr = exports2.createView = exports2.u32 = exports2.u8 = void 0;
    var crypto_1 = require_crypto3();
    var u8a = (a) => a instanceof Uint8Array;
    var u82 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
    exports2.u8 = u82;
    var u323 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
    exports2.u32 = u323;
    var createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
    exports2.createView = createView;
    var rotr = (word, shift) => word << 32 - shift | word >>> shift;
    exports2.rotr = rotr;
    exports2.isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
    if (!exports2.isLE)
      throw new Error("Non little-endian hardware is not supported");
    var hexes = Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
    function bytesToHex(bytes) {
      if (!u8a(bytes))
        throw new Error("Uint8Array expected");
      let hex = "";
      for (let i = 0; i < bytes.length; i++) {
        hex += hexes[bytes[i]];
      }
      return hex;
    }
    exports2.bytesToHex = bytesToHex;
    function hexToBytes(hex) {
      if (typeof hex !== "string")
        throw new Error("hex string expected, got " + typeof hex);
      const len = hex.length;
      if (len % 2)
        throw new Error("padded hex string expected, got unpadded hex of length " + len);
      const array2 = new Uint8Array(len / 2);
      for (let i = 0; i < array2.length; i++) {
        const j = i * 2;
        const hexByte = hex.slice(j, j + 2);
        const byte = Number.parseInt(hexByte, 16);
        if (Number.isNaN(byte) || byte < 0)
          throw new Error("Invalid byte sequence");
        array2[i] = byte;
      }
      return array2;
    }
    exports2.hexToBytes = hexToBytes;
    var nextTick = async () => {
    };
    exports2.nextTick = nextTick;
    async function asyncLoop(iters, tick, cb) {
      let ts = Date.now();
      for (let i = 0; i < iters; i++) {
        cb(i);
        const diff = Date.now() - ts;
        if (diff >= 0 && diff < tick)
          continue;
        await (0, exports2.nextTick)();
        ts += diff;
      }
    }
    exports2.asyncLoop = asyncLoop;
    function utf8ToBytes(str) {
      if (typeof str !== "string")
        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
      return new Uint8Array(new TextEncoder().encode(str));
    }
    exports2.utf8ToBytes = utf8ToBytes;
    function toBytes2(data) {
      if (typeof data === "string")
        data = utf8ToBytes(data);
      if (!u8a(data))
        throw new Error(`expected Uint8Array, got ${typeof data}`);
      return data;
    }
    exports2.toBytes = toBytes2;
    function concatBytes2(...arrays) {
      const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));
      let pad = 0;
      arrays.forEach((a) => {
        if (!u8a(a))
          throw new Error("Uint8Array expected");
        r.set(a, pad);
        pad += a.length;
      });
      return r;
    }
    exports2.concatBytes = concatBytes2;
    var Hash2 = class {
      // Safe version that clones internal state
      clone() {
        return this._cloneInto();
      }
    };
    exports2.Hash = Hash2;
    var toStr = {}.toString;
    function checkOpts(defaults, opts) {
      if (opts !== void 0 && toStr.call(opts) !== "[object Object]")
        throw new Error("Options should be object or undefined");
      const merged = Object.assign(defaults, opts);
      return merged;
    }
    exports2.checkOpts = checkOpts;
    function wrapConstructor(hashCons) {
      const hashC = (msg) => hashCons().update(toBytes2(msg)).digest();
      const tmp = hashCons();
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = () => hashCons();
      return hashC;
    }
    exports2.wrapConstructor = wrapConstructor;
    function wrapConstructorWithOpts(hashCons) {
      const hashC = (msg, opts) => hashCons(opts).update(toBytes2(msg)).digest();
      const tmp = hashCons({});
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = (opts) => hashCons(opts);
      return hashC;
    }
    exports2.wrapConstructorWithOpts = wrapConstructorWithOpts;
    function wrapXOFConstructorWithOpts(hashCons) {
      const hashC = (msg, opts) => hashCons(opts).update(toBytes2(msg)).digest();
      const tmp = hashCons({});
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = (opts) => hashCons(opts);
      return hashC;
    }
    exports2.wrapXOFConstructorWithOpts = wrapXOFConstructorWithOpts;
    function randomBytes2(bytesLength = 32) {
      if (crypto_1.crypto && typeof crypto_1.crypto.getRandomValues === "function") {
        return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength));
      }
      throw new Error("crypto.getRandomValues must be defined");
    }
    exports2.randomBytes = randomBytes2;
  }
});

// node_modules/ethers/node_modules/@noble/hashes/hmac.js
var require_hmac3 = __commonJS({
  "node_modules/ethers/node_modules/@noble/hashes/hmac.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hmac = exports2.HMAC = void 0;
    var _assert_js_1 = require_assert2();
    var utils_js_1 = require_utils12();
    var HMAC = class extends utils_js_1.Hash {
      constructor(hash, _key) {
        super();
        this.finished = false;
        this.destroyed = false;
        (0, _assert_js_1.hash)(hash);
        const key = (0, utils_js_1.toBytes)(_key);
        this.iHash = hash.create();
        if (typeof this.iHash.update !== "function")
          throw new Error("Expected instance of class which extends utils.Hash");
        this.blockLen = this.iHash.blockLen;
        this.outputLen = this.iHash.outputLen;
        const blockLen = this.blockLen;
        const pad = new Uint8Array(blockLen);
        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);
        for (let i = 0; i < pad.length; i++)
          pad[i] ^= 54;
        this.iHash.update(pad);
        this.oHash = hash.create();
        for (let i = 0; i < pad.length; i++)
          pad[i] ^= 54 ^ 92;
        this.oHash.update(pad);
        pad.fill(0);
      }
      update(buf) {
        (0, _assert_js_1.exists)(this);
        this.iHash.update(buf);
        return this;
      }
      digestInto(out) {
        (0, _assert_js_1.exists)(this);
        (0, _assert_js_1.bytes)(out, this.outputLen);
        this.finished = true;
        this.iHash.digestInto(out);
        this.oHash.update(out);
        this.oHash.digestInto(out);
        this.destroy();
      }
      digest() {
        const out = new Uint8Array(this.oHash.outputLen);
        this.digestInto(out);
        return out;
      }
      _cloneInto(to) {
        to || (to = Object.create(Object.getPrototypeOf(this), {}));
        const { oHash, iHash, finished: finished2, destroyed, blockLen, outputLen } = this;
        to = to;
        to.finished = finished2;
        to.destroyed = destroyed;
        to.blockLen = blockLen;
        to.outputLen = outputLen;
        to.oHash = oHash._cloneInto(to.oHash);
        to.iHash = iHash._cloneInto(to.iHash);
        return to;
      }
      destroy() {
        this.destroyed = true;
        this.oHash.destroy();
        this.iHash.destroy();
      }
    };
    exports2.HMAC = HMAC;
    var hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();
    exports2.hmac = hmac;
    exports2.hmac.create = (hash, key) => new HMAC(hash, key);
  }
});

// node_modules/ethers/node_modules/@noble/hashes/pbkdf2.js
var require_pbkdf23 = __commonJS({
  "node_modules/ethers/node_modules/@noble/hashes/pbkdf2.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.pbkdf2Async = exports2.pbkdf2 = void 0;
    var _assert_js_1 = require_assert2();
    var hmac_js_1 = require_hmac3();
    var utils_js_1 = require_utils12();
    function pbkdf2Init(hash, _password, _salt, _opts) {
      (0, _assert_js_1.hash)(hash);
      const opts = (0, utils_js_1.checkOpts)({ dkLen: 32, asyncTick: 10 }, _opts);
      const { c, dkLen, asyncTick } = opts;
      (0, _assert_js_1.number)(c);
      (0, _assert_js_1.number)(dkLen);
      (0, _assert_js_1.number)(asyncTick);
      if (c < 1)
        throw new Error("PBKDF2: iterations (c) should be >= 1");
      const password = (0, utils_js_1.toBytes)(_password);
      const salt = (0, utils_js_1.toBytes)(_salt);
      const DK = new Uint8Array(dkLen);
      const PRF = hmac_js_1.hmac.create(hash, password);
      const PRFSalt = PRF._cloneInto().update(salt);
      return { c, dkLen, asyncTick, DK, PRF, PRFSalt };
    }
    function pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {
      PRF.destroy();
      PRFSalt.destroy();
      if (prfW)
        prfW.destroy();
      u.fill(0);
      return DK;
    }
    function pbkdf2(hash, password, salt, opts) {
      const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);
      let prfW;
      const arr = new Uint8Array(4);
      const view = (0, utils_js_1.createView)(arr);
      const u = new Uint8Array(PRF.outputLen);
      for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
        const Ti = DK.subarray(pos, pos + PRF.outputLen);
        view.setInt32(0, ti, false);
        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
        Ti.set(u.subarray(0, Ti.length));
        for (let ui = 1; ui < c; ui++) {
          PRF._cloneInto(prfW).update(u).digestInto(u);
          for (let i = 0; i < Ti.length; i++)
            Ti[i] ^= u[i];
        }
      }
      return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
    }
    exports2.pbkdf2 = pbkdf2;
    async function pbkdf2Async(hash, password, salt, opts) {
      const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);
      let prfW;
      const arr = new Uint8Array(4);
      const view = (0, utils_js_1.createView)(arr);
      const u = new Uint8Array(PRF.outputLen);
      for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
        const Ti = DK.subarray(pos, pos + PRF.outputLen);
        view.setInt32(0, ti, false);
        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
        Ti.set(u.subarray(0, Ti.length));
        await (0, utils_js_1.asyncLoop)(c - 1, asyncTick, () => {
          PRF._cloneInto(prfW).update(u).digestInto(u);
          for (let i = 0; i < Ti.length; i++)
            Ti[i] ^= u[i];
        });
      }
      return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
    }
    exports2.pbkdf2Async = pbkdf2Async;
  }
});

// node_modules/ethers/node_modules/@noble/hashes/_sha2.js
var require_sha22 = __commonJS({
  "node_modules/ethers/node_modules/@noble/hashes/_sha2.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SHA2 = void 0;
    var _assert_js_1 = require_assert2();
    var utils_js_1 = require_utils12();
    function setBigUint64(view, byteOffset, value, isLE) {
      if (typeof view.setBigUint64 === "function")
        return view.setBigUint64(byteOffset, value, isLE);
      const _32n = BigInt(32);
      const _u32_max = BigInt(4294967295);
      const wh = Number(value >> _32n & _u32_max);
      const wl = Number(value & _u32_max);
      const h = isLE ? 4 : 0;
      const l = isLE ? 0 : 4;
      view.setUint32(byteOffset + h, wh, isLE);
      view.setUint32(byteOffset + l, wl, isLE);
    }
    var SHA2 = class extends utils_js_1.Hash {
      constructor(blockLen, outputLen, padOffset, isLE) {
        super();
        this.blockLen = blockLen;
        this.outputLen = outputLen;
        this.padOffset = padOffset;
        this.isLE = isLE;
        this.finished = false;
        this.length = 0;
        this.pos = 0;
        this.destroyed = false;
        this.buffer = new Uint8Array(blockLen);
        this.view = (0, utils_js_1.createView)(this.buffer);
      }
      update(data) {
        (0, _assert_js_1.exists)(this);
        const { view, buffer, blockLen } = this;
        data = (0, utils_js_1.toBytes)(data);
        const len = data.length;
        for (let pos = 0; pos < len; ) {
          const take = Math.min(blockLen - this.pos, len - pos);
          if (take === blockLen) {
            const dataView = (0, utils_js_1.createView)(data);
            for (; blockLen <= len - pos; pos += blockLen)
              this.process(dataView, pos);
            continue;
          }
          buffer.set(data.subarray(pos, pos + take), this.pos);
          this.pos += take;
          pos += take;
          if (this.pos === blockLen) {
            this.process(view, 0);
            this.pos = 0;
          }
        }
        this.length += data.length;
        this.roundClean();
        return this;
      }
      digestInto(out) {
        (0, _assert_js_1.exists)(this);
        (0, _assert_js_1.output)(out, this);
        this.finished = true;
        const { buffer, view, blockLen, isLE } = this;
        let { pos } = this;
        buffer[pos++] = 128;
        this.buffer.subarray(pos).fill(0);
        if (this.padOffset > blockLen - pos) {
          this.process(view, 0);
          pos = 0;
        }
        for (let i = pos; i < blockLen; i++)
          buffer[i] = 0;
        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);
        this.process(view, 0);
        const oview = (0, utils_js_1.createView)(out);
        const len = this.outputLen;
        if (len % 4)
          throw new Error("_sha2: outputLen should be aligned to 32bit");
        const outLen = len / 4;
        const state = this.get();
        if (outLen > state.length)
          throw new Error("_sha2: outputLen bigger than state");
        for (let i = 0; i < outLen; i++)
          oview.setUint32(4 * i, state[i], isLE);
      }
      digest() {
        const { buffer, outputLen } = this;
        this.digestInto(buffer);
        const res = buffer.slice(0, outputLen);
        this.destroy();
        return res;
      }
      _cloneInto(to) {
        to || (to = new this.constructor());
        to.set(...this.get());
        const { blockLen, buffer, length, finished: finished2, destroyed, pos } = this;
        to.length = length;
        to.pos = pos;
        to.finished = finished2;
        to.destroyed = destroyed;
        if (length % blockLen)
          to.buffer.set(buffer);
        return to;
      }
    };
    exports2.SHA2 = SHA2;
  }
});

// node_modules/ethers/node_modules/@noble/hashes/sha256.js
var require_sha2563 = __commonJS({
  "node_modules/ethers/node_modules/@noble/hashes/sha256.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sha224 = exports2.sha256 = void 0;
    var _sha2_js_1 = require_sha22();
    var utils_js_1 = require_utils12();
    var Chi = (a, b, c) => a & b ^ ~a & c;
    var Maj = (a, b, c) => a & b ^ a & c ^ b & c;
    var SHA256_K = new Uint32Array([
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ]);
    var IV = new Uint32Array([
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ]);
    var SHA256_W = new Uint32Array(64);
    var SHA256 = class extends _sha2_js_1.SHA2 {
      constructor() {
        super(64, 32, 8, false);
        this.A = IV[0] | 0;
        this.B = IV[1] | 0;
        this.C = IV[2] | 0;
        this.D = IV[3] | 0;
        this.E = IV[4] | 0;
        this.F = IV[5] | 0;
        this.G = IV[6] | 0;
        this.H = IV[7] | 0;
      }
      get() {
        const { A, B, C, D, E, F, G, H } = this;
        return [A, B, C, D, E, F, G, H];
      }
      // prettier-ignore
      set(A, B, C, D, E, F, G, H) {
        this.A = A | 0;
        this.B = B | 0;
        this.C = C | 0;
        this.D = D | 0;
        this.E = E | 0;
        this.F = F | 0;
        this.G = G | 0;
        this.H = H | 0;
      }
      process(view, offset2) {
        for (let i = 0; i < 16; i++, offset2 += 4)
          SHA256_W[i] = view.getUint32(offset2, false);
        for (let i = 16; i < 64; i++) {
          const W15 = SHA256_W[i - 15];
          const W2 = SHA256_W[i - 2];
          const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ W15 >>> 3;
          const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ W2 >>> 10;
          SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;
        }
        let { A, B, C, D, E, F, G, H } = this;
        for (let i = 0; i < 64; i++) {
          const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);
          const T1 = H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;
          const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);
          const T2 = sigma0 + Maj(A, B, C) | 0;
          H = G;
          G = F;
          F = E;
          E = D + T1 | 0;
          D = C;
          C = B;
          B = A;
          A = T1 + T2 | 0;
        }
        A = A + this.A | 0;
        B = B + this.B | 0;
        C = C + this.C | 0;
        D = D + this.D | 0;
        E = E + this.E | 0;
        F = F + this.F | 0;
        G = G + this.G | 0;
        H = H + this.H | 0;
        this.set(A, B, C, D, E, F, G, H);
      }
      roundClean() {
        SHA256_W.fill(0);
      }
      destroy() {
        this.set(0, 0, 0, 0, 0, 0, 0, 0);
        this.buffer.fill(0);
      }
    };
    var SHA224 = class extends SHA256 {
      constructor() {
        super();
        this.A = 3238371032 | 0;
        this.B = 914150663 | 0;
        this.C = 812702999 | 0;
        this.D = 4144912697 | 0;
        this.E = 4290775857 | 0;
        this.F = 1750603025 | 0;
        this.G = 1694076839 | 0;
        this.H = 3204075428 | 0;
        this.outputLen = 28;
      }
    };
    exports2.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());
    exports2.sha224 = (0, utils_js_1.wrapConstructor)(() => new SHA224());
  }
});

// node_modules/ethers/node_modules/@noble/hashes/_u64.js
var require_u642 = __commonJS({
  "node_modules/ethers/node_modules/@noble/hashes/_u64.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.add5L = exports2.add5H = exports2.add4H = exports2.add4L = exports2.add3H = exports2.add3L = exports2.add = exports2.rotlBL = exports2.rotlBH = exports2.rotlSL = exports2.rotlSH = exports2.rotr32L = exports2.rotr32H = exports2.rotrBL = exports2.rotrBH = exports2.rotrSL = exports2.rotrSH = exports2.shrSL = exports2.shrSH = exports2.toBig = exports2.split = exports2.fromBig = void 0;
    var U32_MASK64 = BigInt(2 ** 32 - 1);
    var _32n = BigInt(32);
    function fromBig(n, le = false) {
      if (le)
        return { h: Number(n & U32_MASK64), l: Number(n >> _32n & U32_MASK64) };
      return { h: Number(n >> _32n & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
    }
    exports2.fromBig = fromBig;
    function split2(lst, le = false) {
      let Ah = new Uint32Array(lst.length);
      let Al = new Uint32Array(lst.length);
      for (let i = 0; i < lst.length; i++) {
        const { h, l } = fromBig(lst[i], le);
        [Ah[i], Al[i]] = [h, l];
      }
      return [Ah, Al];
    }
    exports2.split = split2;
    var toBig = (h, l) => BigInt(h >>> 0) << _32n | BigInt(l >>> 0);
    exports2.toBig = toBig;
    var shrSH = (h, _l, s) => h >>> s;
    exports2.shrSH = shrSH;
    var shrSL = (h, l, s) => h << 32 - s | l >>> s;
    exports2.shrSL = shrSL;
    var rotrSH = (h, l, s) => h >>> s | l << 32 - s;
    exports2.rotrSH = rotrSH;
    var rotrSL = (h, l, s) => h << 32 - s | l >>> s;
    exports2.rotrSL = rotrSL;
    var rotrBH = (h, l, s) => h << 64 - s | l >>> s - 32;
    exports2.rotrBH = rotrBH;
    var rotrBL = (h, l, s) => h >>> s - 32 | l << 64 - s;
    exports2.rotrBL = rotrBL;
    var rotr32H = (_h, l) => l;
    exports2.rotr32H = rotr32H;
    var rotr32L = (h, _l) => h;
    exports2.rotr32L = rotr32L;
    var rotlSH2 = (h, l, s) => h << s | l >>> 32 - s;
    exports2.rotlSH = rotlSH2;
    var rotlSL2 = (h, l, s) => l << s | h >>> 32 - s;
    exports2.rotlSL = rotlSL2;
    var rotlBH2 = (h, l, s) => l << s - 32 | h >>> 64 - s;
    exports2.rotlBH = rotlBH2;
    var rotlBL2 = (h, l, s) => h << s - 32 | l >>> 64 - s;
    exports2.rotlBL = rotlBL2;
    function add(Ah, Al, Bh, Bl) {
      const l = (Al >>> 0) + (Bl >>> 0);
      return { h: Ah + Bh + (l / 2 ** 32 | 0) | 0, l: l | 0 };
    }
    exports2.add = add;
    var add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
    exports2.add3L = add3L;
    var add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
    exports2.add3H = add3H;
    var add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
    exports2.add4L = add4L;
    var add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
    exports2.add4H = add4H;
    var add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
    exports2.add5L = add5L;
    var add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
    exports2.add5H = add5H;
    var u642 = {
      fromBig,
      split: split2,
      toBig,
      shrSH,
      shrSL,
      rotrSH,
      rotrSL,
      rotrBH,
      rotrBL,
      rotr32H,
      rotr32L,
      rotlSH: rotlSH2,
      rotlSL: rotlSL2,
      rotlBH: rotlBH2,
      rotlBL: rotlBL2,
      add,
      add3L,
      add3H,
      add4L,
      add4H,
      add5H,
      add5L
    };
    exports2.default = u642;
  }
});

// node_modules/ethers/node_modules/@noble/hashes/sha512.js
var require_sha5123 = __commonJS({
  "node_modules/ethers/node_modules/@noble/hashes/sha512.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sha384 = exports2.sha512_256 = exports2.sha512_224 = exports2.sha512 = exports2.SHA512 = void 0;
    var _sha2_js_1 = require_sha22();
    var _u64_js_1 = require_u642();
    var utils_js_1 = require_utils12();
    var [SHA512_Kh, SHA512_Kl] = (() => _u64_js_1.default.split([
      "0x428a2f98d728ae22",
      "0x7137449123ef65cd",
      "0xb5c0fbcfec4d3b2f",
      "0xe9b5dba58189dbbc",
      "0x3956c25bf348b538",
      "0x59f111f1b605d019",
      "0x923f82a4af194f9b",
      "0xab1c5ed5da6d8118",
      "0xd807aa98a3030242",
      "0x12835b0145706fbe",
      "0x243185be4ee4b28c",
      "0x550c7dc3d5ffb4e2",
      "0x72be5d74f27b896f",
      "0x80deb1fe3b1696b1",
      "0x9bdc06a725c71235",
      "0xc19bf174cf692694",
      "0xe49b69c19ef14ad2",
      "0xefbe4786384f25e3",
      "0x0fc19dc68b8cd5b5",
      "0x240ca1cc77ac9c65",
      "0x2de92c6f592b0275",
      "0x4a7484aa6ea6e483",
      "0x5cb0a9dcbd41fbd4",
      "0x76f988da831153b5",
      "0x983e5152ee66dfab",
      "0xa831c66d2db43210",
      "0xb00327c898fb213f",
      "0xbf597fc7beef0ee4",
      "0xc6e00bf33da88fc2",
      "0xd5a79147930aa725",
      "0x06ca6351e003826f",
      "0x142929670a0e6e70",
      "0x27b70a8546d22ffc",
      "0x2e1b21385c26c926",
      "0x4d2c6dfc5ac42aed",
      "0x53380d139d95b3df",
      "0x650a73548baf63de",
      "0x766a0abb3c77b2a8",
      "0x81c2c92e47edaee6",
      "0x92722c851482353b",
      "0xa2bfe8a14cf10364",
      "0xa81a664bbc423001",
      "0xc24b8b70d0f89791",
      "0xc76c51a30654be30",
      "0xd192e819d6ef5218",
      "0xd69906245565a910",
      "0xf40e35855771202a",
      "0x106aa07032bbd1b8",
      "0x19a4c116b8d2d0c8",
      "0x1e376c085141ab53",
      "0x2748774cdf8eeb99",
      "0x34b0bcb5e19b48a8",
      "0x391c0cb3c5c95a63",
      "0x4ed8aa4ae3418acb",
      "0x5b9cca4f7763e373",
      "0x682e6ff3d6b2b8a3",
      "0x748f82ee5defb2fc",
      "0x78a5636f43172f60",
      "0x84c87814a1f0ab72",
      "0x8cc702081a6439ec",
      "0x90befffa23631e28",
      "0xa4506cebde82bde9",
      "0xbef9a3f7b2c67915",
      "0xc67178f2e372532b",
      "0xca273eceea26619c",
      "0xd186b8c721c0c207",
      "0xeada7dd6cde0eb1e",
      "0xf57d4f7fee6ed178",
      "0x06f067aa72176fba",
      "0x0a637dc5a2c898a6",
      "0x113f9804bef90dae",
      "0x1b710b35131c471b",
      "0x28db77f523047d84",
      "0x32caab7b40c72493",
      "0x3c9ebe0a15c9bebc",
      "0x431d67c49c100d4c",
      "0x4cc5d4becb3e42b6",
      "0x597f299cfc657e2a",
      "0x5fcb6fab3ad6faec",
      "0x6c44198c4a475817"
    ].map((n) => BigInt(n))))();
    var SHA512_W_H = new Uint32Array(80);
    var SHA512_W_L = new Uint32Array(80);
    var SHA512 = class extends _sha2_js_1.SHA2 {
      constructor() {
        super(128, 64, 16, false);
        this.Ah = 1779033703 | 0;
        this.Al = 4089235720 | 0;
        this.Bh = 3144134277 | 0;
        this.Bl = 2227873595 | 0;
        this.Ch = 1013904242 | 0;
        this.Cl = 4271175723 | 0;
        this.Dh = 2773480762 | 0;
        this.Dl = 1595750129 | 0;
        this.Eh = 1359893119 | 0;
        this.El = 2917565137 | 0;
        this.Fh = 2600822924 | 0;
        this.Fl = 725511199 | 0;
        this.Gh = 528734635 | 0;
        this.Gl = 4215389547 | 0;
        this.Hh = 1541459225 | 0;
        this.Hl = 327033209 | 0;
      }
      // prettier-ignore
      get() {
        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
      }
      // prettier-ignore
      set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
        this.Ah = Ah | 0;
        this.Al = Al | 0;
        this.Bh = Bh | 0;
        this.Bl = Bl | 0;
        this.Ch = Ch | 0;
        this.Cl = Cl | 0;
        this.Dh = Dh | 0;
        this.Dl = Dl | 0;
        this.Eh = Eh | 0;
        this.El = El | 0;
        this.Fh = Fh | 0;
        this.Fl = Fl | 0;
        this.Gh = Gh | 0;
        this.Gl = Gl | 0;
        this.Hh = Hh | 0;
        this.Hl = Hl | 0;
      }
      process(view, offset2) {
        for (let i = 0; i < 16; i++, offset2 += 4) {
          SHA512_W_H[i] = view.getUint32(offset2);
          SHA512_W_L[i] = view.getUint32(offset2 += 4);
        }
        for (let i = 16; i < 80; i++) {
          const W15h = SHA512_W_H[i - 15] | 0;
          const W15l = SHA512_W_L[i - 15] | 0;
          const s0h = _u64_js_1.default.rotrSH(W15h, W15l, 1) ^ _u64_js_1.default.rotrSH(W15h, W15l, 8) ^ _u64_js_1.default.shrSH(W15h, W15l, 7);
          const s0l = _u64_js_1.default.rotrSL(W15h, W15l, 1) ^ _u64_js_1.default.rotrSL(W15h, W15l, 8) ^ _u64_js_1.default.shrSL(W15h, W15l, 7);
          const W2h = SHA512_W_H[i - 2] | 0;
          const W2l = SHA512_W_L[i - 2] | 0;
          const s1h = _u64_js_1.default.rotrSH(W2h, W2l, 19) ^ _u64_js_1.default.rotrBH(W2h, W2l, 61) ^ _u64_js_1.default.shrSH(W2h, W2l, 6);
          const s1l = _u64_js_1.default.rotrSL(W2h, W2l, 19) ^ _u64_js_1.default.rotrBL(W2h, W2l, 61) ^ _u64_js_1.default.shrSL(W2h, W2l, 6);
          const SUMl = _u64_js_1.default.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);
          const SUMh = _u64_js_1.default.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);
          SHA512_W_H[i] = SUMh | 0;
          SHA512_W_L[i] = SUMl | 0;
        }
        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
        for (let i = 0; i < 80; i++) {
          const sigma1h = _u64_js_1.default.rotrSH(Eh, El, 14) ^ _u64_js_1.default.rotrSH(Eh, El, 18) ^ _u64_js_1.default.rotrBH(Eh, El, 41);
          const sigma1l = _u64_js_1.default.rotrSL(Eh, El, 14) ^ _u64_js_1.default.rotrSL(Eh, El, 18) ^ _u64_js_1.default.rotrBL(Eh, El, 41);
          const CHIh = Eh & Fh ^ ~Eh & Gh;
          const CHIl = El & Fl ^ ~El & Gl;
          const T1ll = _u64_js_1.default.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);
          const T1h = _u64_js_1.default.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);
          const T1l = T1ll | 0;
          const sigma0h = _u64_js_1.default.rotrSH(Ah, Al, 28) ^ _u64_js_1.default.rotrBH(Ah, Al, 34) ^ _u64_js_1.default.rotrBH(Ah, Al, 39);
          const sigma0l = _u64_js_1.default.rotrSL(Ah, Al, 28) ^ _u64_js_1.default.rotrBL(Ah, Al, 34) ^ _u64_js_1.default.rotrBL(Ah, Al, 39);
          const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;
          const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;
          Hh = Gh | 0;
          Hl = Gl | 0;
          Gh = Fh | 0;
          Gl = Fl | 0;
          Fh = Eh | 0;
          Fl = El | 0;
          ({ h: Eh, l: El } = _u64_js_1.default.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
          Dh = Ch | 0;
          Dl = Cl | 0;
          Ch = Bh | 0;
          Cl = Bl | 0;
          Bh = Ah | 0;
          Bl = Al | 0;
          const All = _u64_js_1.default.add3L(T1l, sigma0l, MAJl);
          Ah = _u64_js_1.default.add3H(All, T1h, sigma0h, MAJh);
          Al = All | 0;
        }
        ({ h: Ah, l: Al } = _u64_js_1.default.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
        ({ h: Bh, l: Bl } = _u64_js_1.default.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
        ({ h: Ch, l: Cl } = _u64_js_1.default.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
        ({ h: Dh, l: Dl } = _u64_js_1.default.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
        ({ h: Eh, l: El } = _u64_js_1.default.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
        ({ h: Fh, l: Fl } = _u64_js_1.default.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
        ({ h: Gh, l: Gl } = _u64_js_1.default.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
        ({ h: Hh, l: Hl } = _u64_js_1.default.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
      }
      roundClean() {
        SHA512_W_H.fill(0);
        SHA512_W_L.fill(0);
      }
      destroy() {
        this.buffer.fill(0);
        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      }
    };
    exports2.SHA512 = SHA512;
    var SHA512_224 = class extends SHA512 {
      constructor() {
        super();
        this.Ah = 2352822216 | 0;
        this.Al = 424955298 | 0;
        this.Bh = 1944164710 | 0;
        this.Bl = 2312950998 | 0;
        this.Ch = 502970286 | 0;
        this.Cl = 855612546 | 0;
        this.Dh = 1738396948 | 0;
        this.Dl = 1479516111 | 0;
        this.Eh = 258812777 | 0;
        this.El = 2077511080 | 0;
        this.Fh = 2011393907 | 0;
        this.Fl = 79989058 | 0;
        this.Gh = 1067287976 | 0;
        this.Gl = 1780299464 | 0;
        this.Hh = 286451373 | 0;
        this.Hl = 2446758561 | 0;
        this.outputLen = 28;
      }
    };
    var SHA512_256 = class extends SHA512 {
      constructor() {
        super();
        this.Ah = 573645204 | 0;
        this.Al = 4230739756 | 0;
        this.Bh = 2673172387 | 0;
        this.Bl = 3360449730 | 0;
        this.Ch = 596883563 | 0;
        this.Cl = 1867755857 | 0;
        this.Dh = 2520282905 | 0;
        this.Dl = 1497426621 | 0;
        this.Eh = 2519219938 | 0;
        this.El = 2827943907 | 0;
        this.Fh = 3193839141 | 0;
        this.Fl = 1401305490 | 0;
        this.Gh = 721525244 | 0;
        this.Gl = 746961066 | 0;
        this.Hh = 246885852 | 0;
        this.Hl = 2177182882 | 0;
        this.outputLen = 32;
      }
    };
    var SHA384 = class extends SHA512 {
      constructor() {
        super();
        this.Ah = 3418070365 | 0;
        this.Al = 3238371032 | 0;
        this.Bh = 1654270250 | 0;
        this.Bl = 914150663 | 0;
        this.Ch = 2438529370 | 0;
        this.Cl = 812702999 | 0;
        this.Dh = 355462360 | 0;
        this.Dl = 4144912697 | 0;
        this.Eh = 1731405415 | 0;
        this.El = 4290775857 | 0;
        this.Fh = 2394180231 | 0;
        this.Fl = 1750603025 | 0;
        this.Gh = 3675008525 | 0;
        this.Gl = 1694076839 | 0;
        this.Hh = 1203062813 | 0;
        this.Hl = 3204075428 | 0;
        this.outputLen = 48;
      }
    };
    exports2.sha512 = (0, utils_js_1.wrapConstructor)(() => new SHA512());
    exports2.sha512_224 = (0, utils_js_1.wrapConstructor)(() => new SHA512_224());
    exports2.sha512_256 = (0, utils_js_1.wrapConstructor)(() => new SHA512_256());
    exports2.sha384 = (0, utils_js_1.wrapConstructor)(() => new SHA384());
  }
});

// node_modules/ethers/lib.commonjs/crypto/crypto-browser.js
var require_crypto_browser = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/crypto-browser.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.randomBytes = exports2.pbkdf2Sync = exports2.createHmac = exports2.createHash = void 0;
    var hmac_1 = require_hmac3();
    var pbkdf2_1 = require_pbkdf23();
    var sha256_1 = require_sha2563();
    var sha512_1 = require_sha5123();
    var index_js_1 = require_utils11();
    function getGlobal() {
      if (typeof self !== "undefined") {
        return self;
      }
      if (typeof window !== "undefined") {
        return window;
      }
      if (typeof global !== "undefined") {
        return global;
      }
      throw new Error("unable to locate global object");
    }
    var anyGlobal = getGlobal();
    var crypto2 = anyGlobal.crypto || anyGlobal.msCrypto;
    function createHash(algo) {
      switch (algo) {
        case "sha256":
          return sha256_1.sha256.create();
        case "sha512":
          return sha512_1.sha512.create();
      }
      (0, index_js_1.assertArgument)(false, "invalid hashing algorithm name", "algorithm", algo);
    }
    exports2.createHash = createHash;
    function createHmac(_algo, key) {
      const algo = { sha256: sha256_1.sha256, sha512: sha512_1.sha512 }[_algo];
      (0, index_js_1.assertArgument)(algo != null, "invalid hmac algorithm", "algorithm", _algo);
      return hmac_1.hmac.create(algo, key);
    }
    exports2.createHmac = createHmac;
    function pbkdf2Sync(password, salt, iterations, keylen, _algo) {
      const algo = { sha256: sha256_1.sha256, sha512: sha512_1.sha512 }[_algo];
      (0, index_js_1.assertArgument)(algo != null, "invalid pbkdf2 algorithm", "algorithm", _algo);
      return (0, pbkdf2_1.pbkdf2)(algo, password, salt, { c: iterations, dkLen: keylen });
    }
    exports2.pbkdf2Sync = pbkdf2Sync;
    function randomBytes2(length) {
      (0, index_js_1.assert)(crypto2 != null, "platform does not support secure random numbers", "UNSUPPORTED_OPERATION", {
        operation: "randomBytes"
      });
      (0, index_js_1.assertArgument)(Number.isInteger(length) && length > 0 && length <= 1024, "invalid length", "length", length);
      const result = new Uint8Array(length);
      crypto2.getRandomValues(result);
      return result;
    }
    exports2.randomBytes = randomBytes2;
  }
});

// node_modules/ethers/lib.commonjs/crypto/hmac.js
var require_hmac4 = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/hmac.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.computeHmac = void 0;
    var crypto_js_1 = require_crypto_browser();
    var index_js_1 = require_utils11();
    var locked = false;
    var _computeHmac = function(algorithm2, key, data) {
      return (0, crypto_js_1.createHmac)(algorithm2, key).update(data).digest();
    };
    var __computeHmac = _computeHmac;
    function computeHmac(algorithm2, _key, _data) {
      const key = (0, index_js_1.getBytes)(_key, "key");
      const data = (0, index_js_1.getBytes)(_data, "data");
      return (0, index_js_1.hexlify)(__computeHmac(algorithm2, key, data));
    }
    exports2.computeHmac = computeHmac;
    computeHmac._ = _computeHmac;
    computeHmac.lock = function() {
      locked = true;
    };
    computeHmac.register = function(func) {
      if (locked) {
        throw new Error("computeHmac is locked");
      }
      __computeHmac = func;
    };
    Object.freeze(computeHmac);
  }
});

// node_modules/ethers/node_modules/@noble/hashes/sha3.js
var require_sha32 = __commonJS({
  "node_modules/ethers/node_modules/@noble/hashes/sha3.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.shake256 = exports2.shake128 = exports2.keccak_512 = exports2.keccak_384 = exports2.keccak_256 = exports2.keccak_224 = exports2.sha3_512 = exports2.sha3_384 = exports2.sha3_256 = exports2.sha3_224 = exports2.Keccak = exports2.keccakP = void 0;
    var _assert_js_1 = require_assert2();
    var _u64_js_1 = require_u642();
    var utils_js_1 = require_utils12();
    var [SHA3_PI2, SHA3_ROTL2, _SHA3_IOTA2] = [[], [], []];
    var _0n3 = BigInt(0);
    var _1n3 = BigInt(1);
    var _2n3 = BigInt(2);
    var _7n2 = BigInt(7);
    var _256n2 = BigInt(256);
    var _0x71n2 = BigInt(113);
    for (let round = 0, R = _1n3, x = 1, y = 0; round < 24; round++) {
      [x, y] = [y, (2 * x + 3 * y) % 5];
      SHA3_PI2.push(2 * (5 * y + x));
      SHA3_ROTL2.push((round + 1) * (round + 2) / 2 % 64);
      let t = _0n3;
      for (let j = 0; j < 7; j++) {
        R = (R << _1n3 ^ (R >> _7n2) * _0x71n2) % _256n2;
        if (R & _2n3)
          t ^= _1n3 << (_1n3 << BigInt(j)) - _1n3;
      }
      _SHA3_IOTA2.push(t);
    }
    var [SHA3_IOTA_H2, SHA3_IOTA_L2] = (0, _u64_js_1.split)(_SHA3_IOTA2, true);
    var rotlH2 = (h, l, s) => s > 32 ? (0, _u64_js_1.rotlBH)(h, l, s) : (0, _u64_js_1.rotlSH)(h, l, s);
    var rotlL2 = (h, l, s) => s > 32 ? (0, _u64_js_1.rotlBL)(h, l, s) : (0, _u64_js_1.rotlSL)(h, l, s);
    function keccakP2(s, rounds = 24) {
      const B = new Uint32Array(5 * 2);
      for (let round = 24 - rounds; round < 24; round++) {
        for (let x = 0; x < 10; x++)
          B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
        for (let x = 0; x < 10; x += 2) {
          const idx1 = (x + 8) % 10;
          const idx0 = (x + 2) % 10;
          const B0 = B[idx0];
          const B1 = B[idx0 + 1];
          const Th = rotlH2(B0, B1, 1) ^ B[idx1];
          const Tl = rotlL2(B0, B1, 1) ^ B[idx1 + 1];
          for (let y = 0; y < 50; y += 10) {
            s[x + y] ^= Th;
            s[x + y + 1] ^= Tl;
          }
        }
        let curH = s[2];
        let curL = s[3];
        for (let t = 0; t < 24; t++) {
          const shift = SHA3_ROTL2[t];
          const Th = rotlH2(curH, curL, shift);
          const Tl = rotlL2(curH, curL, shift);
          const PI = SHA3_PI2[t];
          curH = s[PI];
          curL = s[PI + 1];
          s[PI] = Th;
          s[PI + 1] = Tl;
        }
        for (let y = 0; y < 50; y += 10) {
          for (let x = 0; x < 10; x++)
            B[x] = s[y + x];
          for (let x = 0; x < 10; x++)
            s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
        }
        s[0] ^= SHA3_IOTA_H2[round];
        s[1] ^= SHA3_IOTA_L2[round];
      }
      B.fill(0);
    }
    exports2.keccakP = keccakP2;
    var Keccak2 = class _Keccak extends utils_js_1.Hash {
      // NOTE: we accept arguments in bytes instead of bits here.
      constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
        super();
        this.blockLen = blockLen;
        this.suffix = suffix;
        this.outputLen = outputLen;
        this.enableXOF = enableXOF;
        this.rounds = rounds;
        this.pos = 0;
        this.posOut = 0;
        this.finished = false;
        this.destroyed = false;
        (0, _assert_js_1.number)(outputLen);
        if (0 >= this.blockLen || this.blockLen >= 200)
          throw new Error("Sha3 supports only keccak-f1600 function");
        this.state = new Uint8Array(200);
        this.state32 = (0, utils_js_1.u32)(this.state);
      }
      keccak() {
        keccakP2(this.state32, this.rounds);
        this.posOut = 0;
        this.pos = 0;
      }
      update(data) {
        (0, _assert_js_1.exists)(this);
        const { blockLen, state } = this;
        data = (0, utils_js_1.toBytes)(data);
        const len = data.length;
        for (let pos = 0; pos < len; ) {
          const take = Math.min(blockLen - this.pos, len - pos);
          for (let i = 0; i < take; i++)
            state[this.pos++] ^= data[pos++];
          if (this.pos === blockLen)
            this.keccak();
        }
        return this;
      }
      finish() {
        if (this.finished)
          return;
        this.finished = true;
        const { state, suffix, pos, blockLen } = this;
        state[pos] ^= suffix;
        if ((suffix & 128) !== 0 && pos === blockLen - 1)
          this.keccak();
        state[blockLen - 1] ^= 128;
        this.keccak();
      }
      writeInto(out) {
        (0, _assert_js_1.exists)(this, false);
        (0, _assert_js_1.bytes)(out);
        this.finish();
        const bufferOut = this.state;
        const { blockLen } = this;
        for (let pos = 0, len = out.length; pos < len; ) {
          if (this.posOut >= blockLen)
            this.keccak();
          const take = Math.min(blockLen - this.posOut, len - pos);
          out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
          this.posOut += take;
          pos += take;
        }
        return out;
      }
      xofInto(out) {
        if (!this.enableXOF)
          throw new Error("XOF is not possible for this instance");
        return this.writeInto(out);
      }
      xof(bytes) {
        (0, _assert_js_1.number)(bytes);
        return this.xofInto(new Uint8Array(bytes));
      }
      digestInto(out) {
        (0, _assert_js_1.output)(out, this);
        if (this.finished)
          throw new Error("digest() was already called");
        this.writeInto(out);
        this.destroy();
        return out;
      }
      digest() {
        return this.digestInto(new Uint8Array(this.outputLen));
      }
      destroy() {
        this.destroyed = true;
        this.state.fill(0);
      }
      _cloneInto(to) {
        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
        to || (to = new _Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
        to.state32.set(this.state32);
        to.pos = this.pos;
        to.posOut = this.posOut;
        to.finished = this.finished;
        to.rounds = rounds;
        to.suffix = suffix;
        to.outputLen = outputLen;
        to.enableXOF = enableXOF;
        to.destroyed = this.destroyed;
        return to;
      }
    };
    exports2.Keccak = Keccak2;
    var gen2 = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructor)(() => new Keccak2(blockLen, suffix, outputLen));
    exports2.sha3_224 = gen2(6, 144, 224 / 8);
    exports2.sha3_256 = gen2(6, 136, 256 / 8);
    exports2.sha3_384 = gen2(6, 104, 384 / 8);
    exports2.sha3_512 = gen2(6, 72, 512 / 8);
    exports2.keccak_224 = gen2(1, 144, 224 / 8);
    exports2.keccak_256 = gen2(1, 136, 256 / 8);
    exports2.keccak_384 = gen2(1, 104, 384 / 8);
    exports2.keccak_512 = gen2(1, 72, 512 / 8);
    var genShake2 = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapXOFConstructorWithOpts)((opts = {}) => new Keccak2(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));
    exports2.shake128 = genShake2(31, 168, 128 / 8);
    exports2.shake256 = genShake2(31, 136, 256 / 8);
  }
});

// node_modules/ethers/lib.commonjs/crypto/keccak.js
var require_keccak = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/keccak.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.keccak256 = void 0;
    var sha3_1 = require_sha32();
    var index_js_1 = require_utils11();
    var locked = false;
    var _keccak256 = function(data) {
      return (0, sha3_1.keccak_256)(data);
    };
    var __keccak256 = _keccak256;
    function keccak256(_data) {
      const data = (0, index_js_1.getBytes)(_data, "data");
      return (0, index_js_1.hexlify)(__keccak256(data));
    }
    exports2.keccak256 = keccak256;
    keccak256._ = _keccak256;
    keccak256.lock = function() {
      locked = true;
    };
    keccak256.register = function(func) {
      if (locked) {
        throw new TypeError("keccak256 is locked");
      }
      __keccak256 = func;
    };
    Object.freeze(keccak256);
  }
});

// node_modules/ethers/node_modules/@noble/hashes/ripemd160.js
var require_ripemd1602 = __commonJS({
  "node_modules/ethers/node_modules/@noble/hashes/ripemd160.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ripemd160 = exports2.RIPEMD160 = void 0;
    var _sha2_js_1 = require_sha22();
    var utils_js_1 = require_utils12();
    var Rho = new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);
    var Id = Uint8Array.from({ length: 16 }, (_, i) => i);
    var Pi = Id.map((i) => (9 * i + 5) % 16);
    var idxL = [Id];
    var idxR = [Pi];
    for (let i = 0; i < 4; i++)
      for (let j of [idxL, idxR])
        j.push(j[i].map((k) => Rho[k]));
    var shifts = [
      [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
      [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
      [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
      [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
      [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
    ].map((i) => new Uint8Array(i));
    var shiftsL = idxL.map((idx, i) => idx.map((j) => shifts[i][j]));
    var shiftsR = idxR.map((idx, i) => idx.map((j) => shifts[i][j]));
    var Kl = new Uint32Array([
      0,
      1518500249,
      1859775393,
      2400959708,
      2840853838
    ]);
    var Kr = new Uint32Array([
      1352829926,
      1548603684,
      1836072691,
      2053994217,
      0
    ]);
    var rotl = (word, shift) => word << shift | word >>> 32 - shift;
    function f2(group, x, y, z) {
      if (group === 0)
        return x ^ y ^ z;
      else if (group === 1)
        return x & y | ~x & z;
      else if (group === 2)
        return (x | ~y) ^ z;
      else if (group === 3)
        return x & z | y & ~z;
      else
        return x ^ (y | ~z);
    }
    var BUF = new Uint32Array(16);
    var RIPEMD160 = class extends _sha2_js_1.SHA2 {
      constructor() {
        super(64, 20, 8, true);
        this.h0 = 1732584193 | 0;
        this.h1 = 4023233417 | 0;
        this.h2 = 2562383102 | 0;
        this.h3 = 271733878 | 0;
        this.h4 = 3285377520 | 0;
      }
      get() {
        const { h0, h1, h2, h3, h4 } = this;
        return [h0, h1, h2, h3, h4];
      }
      set(h0, h1, h2, h3, h4) {
        this.h0 = h0 | 0;
        this.h1 = h1 | 0;
        this.h2 = h2 | 0;
        this.h3 = h3 | 0;
        this.h4 = h4 | 0;
      }
      process(view, offset2) {
        for (let i = 0; i < 16; i++, offset2 += 4)
          BUF[i] = view.getUint32(offset2, true);
        let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;
        for (let group = 0; group < 5; group++) {
          const rGroup = 4 - group;
          const hbl = Kl[group], hbr = Kr[group];
          const rl = idxL[group], rr = idxR[group];
          const sl = shiftsL[group], sr = shiftsR[group];
          for (let i = 0; i < 16; i++) {
            const tl = rotl(al + f2(group, bl, cl, dl) + BUF[rl[i]] + hbl, sl[i]) + el | 0;
            al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl;
          }
          for (let i = 0; i < 16; i++) {
            const tr = rotl(ar + f2(rGroup, br, cr, dr) + BUF[rr[i]] + hbr, sr[i]) + er | 0;
            ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr;
          }
        }
        this.set(this.h1 + cl + dr | 0, this.h2 + dl + er | 0, this.h3 + el + ar | 0, this.h4 + al + br | 0, this.h0 + bl + cr | 0);
      }
      roundClean() {
        BUF.fill(0);
      }
      destroy() {
        this.destroyed = true;
        this.buffer.fill(0);
        this.set(0, 0, 0, 0, 0);
      }
    };
    exports2.RIPEMD160 = RIPEMD160;
    exports2.ripemd160 = (0, utils_js_1.wrapConstructor)(() => new RIPEMD160());
  }
});

// node_modules/ethers/lib.commonjs/crypto/ripemd160.js
var require_ripemd1603 = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/ripemd160.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ripemd160 = void 0;
    var ripemd160_1 = require_ripemd1602();
    var index_js_1 = require_utils11();
    var locked = false;
    var _ripemd160 = function(data) {
      return (0, ripemd160_1.ripemd160)(data);
    };
    var __ripemd160 = _ripemd160;
    function ripemd160(_data) {
      const data = (0, index_js_1.getBytes)(_data, "data");
      return (0, index_js_1.hexlify)(__ripemd160(data));
    }
    exports2.ripemd160 = ripemd160;
    ripemd160._ = _ripemd160;
    ripemd160.lock = function() {
      locked = true;
    };
    ripemd160.register = function(func) {
      if (locked) {
        throw new TypeError("ripemd160 is locked");
      }
      __ripemd160 = func;
    };
    Object.freeze(ripemd160);
  }
});

// node_modules/ethers/lib.commonjs/crypto/pbkdf2.js
var require_pbkdf24 = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/pbkdf2.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.pbkdf2 = void 0;
    var crypto_js_1 = require_crypto_browser();
    var index_js_1 = require_utils11();
    var locked = false;
    var _pbkdf2 = function(password, salt, iterations, keylen, algo) {
      return (0, crypto_js_1.pbkdf2Sync)(password, salt, iterations, keylen, algo);
    };
    var __pbkdf2 = _pbkdf2;
    function pbkdf2(_password, _salt, iterations, keylen, algo) {
      const password = (0, index_js_1.getBytes)(_password, "password");
      const salt = (0, index_js_1.getBytes)(_salt, "salt");
      return (0, index_js_1.hexlify)(__pbkdf2(password, salt, iterations, keylen, algo));
    }
    exports2.pbkdf2 = pbkdf2;
    pbkdf2._ = _pbkdf2;
    pbkdf2.lock = function() {
      locked = true;
    };
    pbkdf2.register = function(func) {
      if (locked) {
        throw new Error("pbkdf2 is locked");
      }
      __pbkdf2 = func;
    };
    Object.freeze(pbkdf2);
  }
});

// node_modules/ethers/lib.commonjs/crypto/random.js
var require_random = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/random.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.randomBytes = void 0;
    var crypto_js_1 = require_crypto_browser();
    var locked = false;
    var _randomBytes = function(length) {
      return new Uint8Array((0, crypto_js_1.randomBytes)(length));
    };
    var __randomBytes = _randomBytes;
    function randomBytes2(length) {
      return __randomBytes(length);
    }
    exports2.randomBytes = randomBytes2;
    randomBytes2._ = _randomBytes;
    randomBytes2.lock = function() {
      locked = true;
    };
    randomBytes2.register = function(func) {
      if (locked) {
        throw new Error("randomBytes is locked");
      }
      __randomBytes = func;
    };
    Object.freeze(randomBytes2);
  }
});

// node_modules/ethers/node_modules/@noble/hashes/scrypt.js
var require_scrypt = __commonJS({
  "node_modules/ethers/node_modules/@noble/hashes/scrypt.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.scryptAsync = exports2.scrypt = void 0;
    var _assert_js_1 = require_assert2();
    var sha256_js_1 = require_sha2563();
    var pbkdf2_js_1 = require_pbkdf23();
    var utils_js_1 = require_utils12();
    var rotl = (a, b) => a << b | a >>> 32 - b;
    function XorAndSalsa(prev, pi, input, ii, out, oi) {
      let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];
      let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];
      let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];
      let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];
      let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];
      let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];
      let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];
      let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];
      let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;
      for (let i = 0; i < 8; i += 2) {
        x04 ^= rotl(x00 + x12 | 0, 7);
        x08 ^= rotl(x04 + x00 | 0, 9);
        x12 ^= rotl(x08 + x04 | 0, 13);
        x00 ^= rotl(x12 + x08 | 0, 18);
        x09 ^= rotl(x05 + x01 | 0, 7);
        x13 ^= rotl(x09 + x05 | 0, 9);
        x01 ^= rotl(x13 + x09 | 0, 13);
        x05 ^= rotl(x01 + x13 | 0, 18);
        x14 ^= rotl(x10 + x06 | 0, 7);
        x02 ^= rotl(x14 + x10 | 0, 9);
        x06 ^= rotl(x02 + x14 | 0, 13);
        x10 ^= rotl(x06 + x02 | 0, 18);
        x03 ^= rotl(x15 + x11 | 0, 7);
        x07 ^= rotl(x03 + x15 | 0, 9);
        x11 ^= rotl(x07 + x03 | 0, 13);
        x15 ^= rotl(x11 + x07 | 0, 18);
        x01 ^= rotl(x00 + x03 | 0, 7);
        x02 ^= rotl(x01 + x00 | 0, 9);
        x03 ^= rotl(x02 + x01 | 0, 13);
        x00 ^= rotl(x03 + x02 | 0, 18);
        x06 ^= rotl(x05 + x04 | 0, 7);
        x07 ^= rotl(x06 + x05 | 0, 9);
        x04 ^= rotl(x07 + x06 | 0, 13);
        x05 ^= rotl(x04 + x07 | 0, 18);
        x11 ^= rotl(x10 + x09 | 0, 7);
        x08 ^= rotl(x11 + x10 | 0, 9);
        x09 ^= rotl(x08 + x11 | 0, 13);
        x10 ^= rotl(x09 + x08 | 0, 18);
        x12 ^= rotl(x15 + x14 | 0, 7);
        x13 ^= rotl(x12 + x15 | 0, 9);
        x14 ^= rotl(x13 + x12 | 0, 13);
        x15 ^= rotl(x14 + x13 | 0, 18);
      }
      out[oi++] = y00 + x00 | 0;
      out[oi++] = y01 + x01 | 0;
      out[oi++] = y02 + x02 | 0;
      out[oi++] = y03 + x03 | 0;
      out[oi++] = y04 + x04 | 0;
      out[oi++] = y05 + x05 | 0;
      out[oi++] = y06 + x06 | 0;
      out[oi++] = y07 + x07 | 0;
      out[oi++] = y08 + x08 | 0;
      out[oi++] = y09 + x09 | 0;
      out[oi++] = y10 + x10 | 0;
      out[oi++] = y11 + x11 | 0;
      out[oi++] = y12 + x12 | 0;
      out[oi++] = y13 + x13 | 0;
      out[oi++] = y14 + x14 | 0;
      out[oi++] = y15 + x15 | 0;
    }
    function BlockMix(input, ii, out, oi, r) {
      let head = oi + 0;
      let tail = oi + 16 * r;
      for (let i = 0; i < 16; i++)
        out[tail + i] = input[ii + (2 * r - 1) * 16 + i];
      for (let i = 0; i < r; i++, head += 16, ii += 16) {
        XorAndSalsa(out, tail, input, ii, out, head);
        if (i > 0)
          tail += 16;
        XorAndSalsa(out, head, input, ii += 16, out, tail);
      }
    }
    function scryptInit(password, salt, _opts) {
      const opts = (0, utils_js_1.checkOpts)({
        dkLen: 32,
        asyncTick: 10,
        maxmem: 1024 ** 3 + 1024
      }, _opts);
      const { N, r, p, dkLen, asyncTick, maxmem, onProgress } = opts;
      (0, _assert_js_1.number)(N);
      (0, _assert_js_1.number)(r);
      (0, _assert_js_1.number)(p);
      (0, _assert_js_1.number)(dkLen);
      (0, _assert_js_1.number)(asyncTick);
      (0, _assert_js_1.number)(maxmem);
      if (onProgress !== void 0 && typeof onProgress !== "function")
        throw new Error("progressCb should be function");
      const blockSize = 128 * r;
      const blockSize32 = blockSize / 4;
      if (N <= 1 || (N & N - 1) !== 0 || N >= 2 ** (blockSize / 8) || N > 2 ** 32) {
        throw new Error("Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32");
      }
      if (p < 0 || p > (2 ** 32 - 1) * 32 / blockSize) {
        throw new Error("Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)");
      }
      if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {
        throw new Error("Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32");
      }
      const memUsed = blockSize * (N + p);
      if (memUsed > maxmem) {
        throw new Error(`Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`);
      }
      const B = (0, pbkdf2_js_1.pbkdf2)(sha256_js_1.sha256, password, salt, { c: 1, dkLen: blockSize * p });
      const B32 = (0, utils_js_1.u32)(B);
      const V = (0, utils_js_1.u32)(new Uint8Array(blockSize * N));
      const tmp = (0, utils_js_1.u32)(new Uint8Array(blockSize));
      let blockMixCb = () => {
      };
      if (onProgress) {
        const totalBlockMix = 2 * N * p;
        const callbackPer = Math.max(Math.floor(totalBlockMix / 1e4), 1);
        let blockMixCnt = 0;
        blockMixCb = () => {
          blockMixCnt++;
          if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))
            onProgress(blockMixCnt / totalBlockMix);
        };
      }
      return { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick };
    }
    function scryptOutput(password, dkLen, B, V, tmp) {
      const res = (0, pbkdf2_js_1.pbkdf2)(sha256_js_1.sha256, password, B, { c: 1, dkLen });
      B.fill(0);
      V.fill(0);
      tmp.fill(0);
      return res;
    }
    function scrypt(password, salt, opts) {
      const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb } = scryptInit(password, salt, opts);
      for (let pi = 0; pi < p; pi++) {
        const Pi = blockSize32 * pi;
        for (let i = 0; i < blockSize32; i++)
          V[i] = B32[Pi + i];
        for (let i = 0, pos = 0; i < N - 1; i++) {
          BlockMix(V, pos, V, pos += blockSize32, r);
          blockMixCb();
        }
        BlockMix(V, (N - 1) * blockSize32, B32, Pi, r);
        blockMixCb();
        for (let i = 0; i < N; i++) {
          const j = B32[Pi + blockSize32 - 16] % N;
          for (let k = 0; k < blockSize32; k++)
            tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k];
          BlockMix(tmp, 0, B32, Pi, r);
          blockMixCb();
        }
      }
      return scryptOutput(password, dkLen, B, V, tmp);
    }
    exports2.scrypt = scrypt;
    async function scryptAsync(password, salt, opts) {
      const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick } = scryptInit(password, salt, opts);
      for (let pi = 0; pi < p; pi++) {
        const Pi = blockSize32 * pi;
        for (let i = 0; i < blockSize32; i++)
          V[i] = B32[Pi + i];
        let pos = 0;
        await (0, utils_js_1.asyncLoop)(N - 1, asyncTick, () => {
          BlockMix(V, pos, V, pos += blockSize32, r);
          blockMixCb();
        });
        BlockMix(V, (N - 1) * blockSize32, B32, Pi, r);
        blockMixCb();
        await (0, utils_js_1.asyncLoop)(N, asyncTick, () => {
          const j = B32[Pi + blockSize32 - 16] % N;
          for (let k = 0; k < blockSize32; k++)
            tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k];
          BlockMix(tmp, 0, B32, Pi, r);
          blockMixCb();
        });
      }
      return scryptOutput(password, dkLen, B, V, tmp);
    }
    exports2.scryptAsync = scryptAsync;
  }
});

// node_modules/ethers/lib.commonjs/crypto/scrypt.js
var require_scrypt2 = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/scrypt.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.scryptSync = exports2.scrypt = void 0;
    var scrypt_1 = require_scrypt();
    var index_js_1 = require_utils11();
    var lockedSync = false;
    var lockedAsync = false;
    var _scryptAsync = async function(passwd, salt, N, r, p, dkLen, onProgress) {
      return await (0, scrypt_1.scryptAsync)(passwd, salt, { N, r, p, dkLen, onProgress });
    };
    var _scryptSync = function(passwd, salt, N, r, p, dkLen) {
      return (0, scrypt_1.scrypt)(passwd, salt, { N, r, p, dkLen });
    };
    var __scryptAsync = _scryptAsync;
    var __scryptSync = _scryptSync;
    async function scrypt(_passwd, _salt, N, r, p, dkLen, progress) {
      const passwd = (0, index_js_1.getBytes)(_passwd, "passwd");
      const salt = (0, index_js_1.getBytes)(_salt, "salt");
      return (0, index_js_1.hexlify)(await __scryptAsync(passwd, salt, N, r, p, dkLen, progress));
    }
    exports2.scrypt = scrypt;
    scrypt._ = _scryptAsync;
    scrypt.lock = function() {
      lockedAsync = true;
    };
    scrypt.register = function(func) {
      if (lockedAsync) {
        throw new Error("scrypt is locked");
      }
      __scryptAsync = func;
    };
    Object.freeze(scrypt);
    function scryptSync(_passwd, _salt, N, r, p, dkLen) {
      const passwd = (0, index_js_1.getBytes)(_passwd, "passwd");
      const salt = (0, index_js_1.getBytes)(_salt, "salt");
      return (0, index_js_1.hexlify)(__scryptSync(passwd, salt, N, r, p, dkLen));
    }
    exports2.scryptSync = scryptSync;
    scryptSync._ = _scryptSync;
    scryptSync.lock = function() {
      lockedSync = true;
    };
    scryptSync.register = function(func) {
      if (lockedSync) {
        throw new Error("scryptSync is locked");
      }
      __scryptSync = func;
    };
    Object.freeze(scryptSync);
  }
});

// node_modules/ethers/lib.commonjs/crypto/sha2.js
var require_sha23 = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/sha2.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sha512 = exports2.sha256 = void 0;
    var crypto_js_1 = require_crypto_browser();
    var index_js_1 = require_utils11();
    var _sha256 = function(data) {
      return (0, crypto_js_1.createHash)("sha256").update(data).digest();
    };
    var _sha512 = function(data) {
      return (0, crypto_js_1.createHash)("sha512").update(data).digest();
    };
    var __sha256 = _sha256;
    var __sha512 = _sha512;
    var locked256 = false;
    var locked512 = false;
    function sha2563(_data) {
      const data = (0, index_js_1.getBytes)(_data, "data");
      return (0, index_js_1.hexlify)(__sha256(data));
    }
    exports2.sha256 = sha2563;
    sha2563._ = _sha256;
    sha2563.lock = function() {
      locked256 = true;
    };
    sha2563.register = function(func) {
      if (locked256) {
        throw new Error("sha256 is locked");
      }
      __sha256 = func;
    };
    Object.freeze(sha2563);
    function sha512(_data) {
      const data = (0, index_js_1.getBytes)(_data, "data");
      return (0, index_js_1.hexlify)(__sha512(data));
    }
    exports2.sha512 = sha512;
    sha512._ = _sha512;
    sha512.lock = function() {
      locked512 = true;
    };
    sha512.register = function(func) {
      if (locked512) {
        throw new Error("sha512 is locked");
      }
      __sha512 = func;
    };
    Object.freeze(sha2563);
  }
});

// node_modules/ethers/node_modules/@noble/curves/abstract/utils.js
var require_utils13 = __commonJS({
  "node_modules/ethers/node_modules/@noble/curves/abstract/utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.validateObject = exports2.createHmacDrbg = exports2.bitMask = exports2.bitSet = exports2.bitGet = exports2.bitLen = exports2.utf8ToBytes = exports2.equalBytes = exports2.concatBytes = exports2.ensureBytes = exports2.numberToVarBytesBE = exports2.numberToBytesLE = exports2.numberToBytesBE = exports2.bytesToNumberLE = exports2.bytesToNumberBE = exports2.hexToBytes = exports2.hexToNumber = exports2.numberToHexUnpadded = exports2.bytesToHex = void 0;
    var _0n3 = BigInt(0);
    var _1n3 = BigInt(1);
    var _2n3 = BigInt(2);
    var u8a = (a) => a instanceof Uint8Array;
    var hexes = Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
    function bytesToHex(bytes) {
      if (!u8a(bytes))
        throw new Error("Uint8Array expected");
      let hex = "";
      for (let i = 0; i < bytes.length; i++) {
        hex += hexes[bytes[i]];
      }
      return hex;
    }
    exports2.bytesToHex = bytesToHex;
    function numberToHexUnpadded(num2) {
      const hex = num2.toString(16);
      return hex.length & 1 ? `0${hex}` : hex;
    }
    exports2.numberToHexUnpadded = numberToHexUnpadded;
    function hexToNumber(hex) {
      if (typeof hex !== "string")
        throw new Error("hex string expected, got " + typeof hex);
      return BigInt(hex === "" ? "0" : `0x${hex}`);
    }
    exports2.hexToNumber = hexToNumber;
    function hexToBytes(hex) {
      if (typeof hex !== "string")
        throw new Error("hex string expected, got " + typeof hex);
      const len = hex.length;
      if (len % 2)
        throw new Error("padded hex string expected, got unpadded hex of length " + len);
      const array2 = new Uint8Array(len / 2);
      for (let i = 0; i < array2.length; i++) {
        const j = i * 2;
        const hexByte = hex.slice(j, j + 2);
        const byte = Number.parseInt(hexByte, 16);
        if (Number.isNaN(byte) || byte < 0)
          throw new Error("Invalid byte sequence");
        array2[i] = byte;
      }
      return array2;
    }
    exports2.hexToBytes = hexToBytes;
    function bytesToNumberBE2(bytes) {
      return hexToNumber(bytesToHex(bytes));
    }
    exports2.bytesToNumberBE = bytesToNumberBE2;
    function bytesToNumberLE(bytes) {
      if (!u8a(bytes))
        throw new Error("Uint8Array expected");
      return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));
    }
    exports2.bytesToNumberLE = bytesToNumberLE;
    function numberToBytesBE2(n, len) {
      return hexToBytes(n.toString(16).padStart(len * 2, "0"));
    }
    exports2.numberToBytesBE = numberToBytesBE2;
    function numberToBytesLE(n, len) {
      return numberToBytesBE2(n, len).reverse();
    }
    exports2.numberToBytesLE = numberToBytesLE;
    function numberToVarBytesBE(n) {
      return hexToBytes(numberToHexUnpadded(n));
    }
    exports2.numberToVarBytesBE = numberToVarBytesBE;
    function ensureBytes2(title, hex, expectedLength) {
      let res;
      if (typeof hex === "string") {
        try {
          res = hexToBytes(hex);
        } catch (e) {
          throw new Error(`${title} must be valid hex string, got "${hex}". Cause: ${e}`);
        }
      } else if (u8a(hex)) {
        res = Uint8Array.from(hex);
      } else {
        throw new Error(`${title} must be hex string or Uint8Array`);
      }
      const len = res.length;
      if (typeof expectedLength === "number" && len !== expectedLength)
        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);
      return res;
    }
    exports2.ensureBytes = ensureBytes2;
    function concatBytes2(...arrays) {
      const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));
      let pad = 0;
      arrays.forEach((a) => {
        if (!u8a(a))
          throw new Error("Uint8Array expected");
        r.set(a, pad);
        pad += a.length;
      });
      return r;
    }
    exports2.concatBytes = concatBytes2;
    function equalBytes(b1, b2) {
      if (b1.length !== b2.length)
        return false;
      for (let i = 0; i < b1.length; i++)
        if (b1[i] !== b2[i])
          return false;
      return true;
    }
    exports2.equalBytes = equalBytes;
    function utf8ToBytes(str) {
      if (typeof str !== "string")
        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
      return new Uint8Array(new TextEncoder().encode(str));
    }
    exports2.utf8ToBytes = utf8ToBytes;
    function bitLen(n) {
      let len;
      for (len = 0; n > _0n3; n >>= _1n3, len += 1)
        ;
      return len;
    }
    exports2.bitLen = bitLen;
    function bitGet(n, pos) {
      return n >> BigInt(pos) & _1n3;
    }
    exports2.bitGet = bitGet;
    var bitSet = (n, pos, value) => {
      return n | (value ? _1n3 : _0n3) << BigInt(pos);
    };
    exports2.bitSet = bitSet;
    var bitMask = (n) => (_2n3 << BigInt(n - 1)) - _1n3;
    exports2.bitMask = bitMask;
    var u8n = (data) => new Uint8Array(data);
    var u8fr = (arr) => Uint8Array.from(arr);
    function createHmacDrbg(hashLen, qByteLen, hmacFn) {
      if (typeof hashLen !== "number" || hashLen < 2)
        throw new Error("hashLen must be a number");
      if (typeof qByteLen !== "number" || qByteLen < 2)
        throw new Error("qByteLen must be a number");
      if (typeof hmacFn !== "function")
        throw new Error("hmacFn must be a function");
      let v = u8n(hashLen);
      let k = u8n(hashLen);
      let i = 0;
      const reset = () => {
        v.fill(1);
        k.fill(0);
        i = 0;
      };
      const h = (...b) => hmacFn(k, v, ...b);
      const reseed = (seed = u8n()) => {
        k = h(u8fr([0]), seed);
        v = h();
        if (seed.length === 0)
          return;
        k = h(u8fr([1]), seed);
        v = h();
      };
      const gen2 = () => {
        if (i++ >= 1e3)
          throw new Error("drbg: tried 1000 values");
        let len = 0;
        const out = [];
        while (len < qByteLen) {
          v = h();
          const sl = v.slice();
          out.push(sl);
          len += v.length;
        }
        return concatBytes2(...out);
      };
      const genUntil = (seed, pred) => {
        reset();
        reseed(seed);
        let res = void 0;
        while (!(res = pred(gen2())))
          reseed();
        reset();
        return res;
      };
      return genUntil;
    }
    exports2.createHmacDrbg = createHmacDrbg;
    var validatorFns = {
      bigint: (val) => typeof val === "bigint",
      function: (val) => typeof val === "function",
      boolean: (val) => typeof val === "boolean",
      string: (val) => typeof val === "string",
      stringOrUint8Array: (val) => typeof val === "string" || val instanceof Uint8Array,
      isSafeInteger: (val) => Number.isSafeInteger(val),
      array: (val) => Array.isArray(val),
      field: (val, object) => object.Fp.isValid(val),
      hash: (val) => typeof val === "function" && Number.isSafeInteger(val.outputLen)
    };
    function validateObject(object, validators, optValidators = {}) {
      const checkField = (fieldName, type2, isOptional) => {
        const checkVal = validatorFns[type2];
        if (typeof checkVal !== "function")
          throw new Error(`Invalid validator "${type2}", expected function`);
        const val = object[fieldName];
        if (isOptional && val === void 0)
          return;
        if (!checkVal(val, object)) {
          throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type2}`);
        }
      };
      for (const [fieldName, type2] of Object.entries(validators))
        checkField(fieldName, type2, false);
      for (const [fieldName, type2] of Object.entries(optValidators))
        checkField(fieldName, type2, true);
      return object;
    }
    exports2.validateObject = validateObject;
  }
});

// node_modules/ethers/node_modules/@noble/curves/abstract/modular.js
var require_modular2 = __commonJS({
  "node_modules/ethers/node_modules/@noble/curves/abstract/modular.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mapHashToField = exports2.getMinHashLength = exports2.getFieldBytesLength = exports2.hashToPrivateScalar = exports2.FpSqrtEven = exports2.FpSqrtOdd = exports2.Field = exports2.nLength = exports2.FpIsSquare = exports2.FpDiv = exports2.FpInvertBatch = exports2.FpPow = exports2.validateField = exports2.isNegativeLE = exports2.FpSqrt = exports2.tonelliShanks = exports2.invert = exports2.pow2 = exports2.pow = exports2.mod = void 0;
    var utils_js_1 = require_utils13();
    var _0n3 = BigInt(0);
    var _1n3 = BigInt(1);
    var _2n3 = BigInt(2);
    var _3n = BigInt(3);
    var _4n = BigInt(4);
    var _5n = BigInt(5);
    var _8n = BigInt(8);
    var _9n = BigInt(9);
    var _16n = BigInt(16);
    function mod2(a, b) {
      const result = a % b;
      return result >= _0n3 ? result : b + result;
    }
    exports2.mod = mod2;
    function pow(num2, power, modulo) {
      if (modulo <= _0n3 || power < _0n3)
        throw new Error("Expected power/modulo > 0");
      if (modulo === _1n3)
        return _0n3;
      let res = _1n3;
      while (power > _0n3) {
        if (power & _1n3)
          res = res * num2 % modulo;
        num2 = num2 * num2 % modulo;
        power >>= _1n3;
      }
      return res;
    }
    exports2.pow = pow;
    function pow22(x, power, modulo) {
      let res = x;
      while (power-- > _0n3) {
        res *= res;
        res %= modulo;
      }
      return res;
    }
    exports2.pow2 = pow22;
    function invert(number2, modulo) {
      if (number2 === _0n3 || modulo <= _0n3) {
        throw new Error(`invert: expected positive integers, got n=${number2} mod=${modulo}`);
      }
      let a = mod2(number2, modulo);
      let b = modulo;
      let x = _0n3, y = _1n3, u = _1n3, v = _0n3;
      while (a !== _0n3) {
        const q = b / a;
        const r = b % a;
        const m = x - u * q;
        const n = y - v * q;
        b = a, a = r, x = u, y = v, u = m, v = n;
      }
      const gcd = b;
      if (gcd !== _1n3)
        throw new Error("invert: does not exist");
      return mod2(x, modulo);
    }
    exports2.invert = invert;
    function tonelliShanks(P) {
      const legendreC = (P - _1n3) / _2n3;
      let Q, S, Z;
      for (Q = P - _1n3, S = 0; Q % _2n3 === _0n3; Q /= _2n3, S++)
        ;
      for (Z = _2n3; Z < P && pow(Z, legendreC, P) !== P - _1n3; Z++)
        ;
      if (S === 1) {
        const p1div4 = (P + _1n3) / _4n;
        return function tonelliFast(Fp, n) {
          const root2 = Fp.pow(n, p1div4);
          if (!Fp.eql(Fp.sqr(root2), n))
            throw new Error("Cannot find square root");
          return root2;
        };
      }
      const Q1div2 = (Q + _1n3) / _2n3;
      return function tonelliSlow(Fp, n) {
        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))
          throw new Error("Cannot find square root");
        let r = S;
        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q);
        let x = Fp.pow(n, Q1div2);
        let b = Fp.pow(n, Q);
        while (!Fp.eql(b, Fp.ONE)) {
          if (Fp.eql(b, Fp.ZERO))
            return Fp.ZERO;
          let m = 1;
          for (let t2 = Fp.sqr(b); m < r; m++) {
            if (Fp.eql(t2, Fp.ONE))
              break;
            t2 = Fp.sqr(t2);
          }
          const ge = Fp.pow(g, _1n3 << BigInt(r - m - 1));
          g = Fp.sqr(ge);
          x = Fp.mul(x, ge);
          b = Fp.mul(b, g);
          r = m;
        }
        return x;
      };
    }
    exports2.tonelliShanks = tonelliShanks;
    function FpSqrt(P) {
      if (P % _4n === _3n) {
        const p1div4 = (P + _1n3) / _4n;
        return function sqrt3mod4(Fp, n) {
          const root2 = Fp.pow(n, p1div4);
          if (!Fp.eql(Fp.sqr(root2), n))
            throw new Error("Cannot find square root");
          return root2;
        };
      }
      if (P % _8n === _5n) {
        const c1 = (P - _5n) / _8n;
        return function sqrt5mod8(Fp, n) {
          const n2 = Fp.mul(n, _2n3);
          const v = Fp.pow(n2, c1);
          const nv = Fp.mul(n, v);
          const i = Fp.mul(Fp.mul(nv, _2n3), v);
          const root2 = Fp.mul(nv, Fp.sub(i, Fp.ONE));
          if (!Fp.eql(Fp.sqr(root2), n))
            throw new Error("Cannot find square root");
          return root2;
        };
      }
      if (P % _16n === _9n) {
      }
      return tonelliShanks(P);
    }
    exports2.FpSqrt = FpSqrt;
    var isNegativeLE = (num2, modulo) => (mod2(num2, modulo) & _1n3) === _1n3;
    exports2.isNegativeLE = isNegativeLE;
    var FIELD_FIELDS = [
      "create",
      "isValid",
      "is0",
      "neg",
      "inv",
      "sqrt",
      "sqr",
      "eql",
      "add",
      "sub",
      "mul",
      "pow",
      "div",
      "addN",
      "subN",
      "mulN",
      "sqrN"
    ];
    function validateField(field) {
      const initial = {
        ORDER: "bigint",
        MASK: "bigint",
        BYTES: "isSafeInteger",
        BITS: "isSafeInteger"
      };
      const opts = FIELD_FIELDS.reduce((map, val) => {
        map[val] = "function";
        return map;
      }, initial);
      return (0, utils_js_1.validateObject)(field, opts);
    }
    exports2.validateField = validateField;
    function FpPow(f2, num2, power) {
      if (power < _0n3)
        throw new Error("Expected power > 0");
      if (power === _0n3)
        return f2.ONE;
      if (power === _1n3)
        return num2;
      let p = f2.ONE;
      let d = num2;
      while (power > _0n3) {
        if (power & _1n3)
          p = f2.mul(p, d);
        d = f2.sqr(d);
        power >>= _1n3;
      }
      return p;
    }
    exports2.FpPow = FpPow;
    function FpInvertBatch(f2, nums) {
      const tmp = new Array(nums.length);
      const lastMultiplied = nums.reduce((acc, num2, i) => {
        if (f2.is0(num2))
          return acc;
        tmp[i] = acc;
        return f2.mul(acc, num2);
      }, f2.ONE);
      const inverted = f2.inv(lastMultiplied);
      nums.reduceRight((acc, num2, i) => {
        if (f2.is0(num2))
          return acc;
        tmp[i] = f2.mul(acc, tmp[i]);
        return f2.mul(acc, num2);
      }, inverted);
      return tmp;
    }
    exports2.FpInvertBatch = FpInvertBatch;
    function FpDiv(f2, lhs, rhs) {
      return f2.mul(lhs, typeof rhs === "bigint" ? invert(rhs, f2.ORDER) : f2.inv(rhs));
    }
    exports2.FpDiv = FpDiv;
    function FpIsSquare(f2) {
      const legendreConst = (f2.ORDER - _1n3) / _2n3;
      return (x) => {
        const p = f2.pow(x, legendreConst);
        return f2.eql(p, f2.ZERO) || f2.eql(p, f2.ONE);
      };
    }
    exports2.FpIsSquare = FpIsSquare;
    function nLength(n, nBitLength) {
      const _nBitLength = nBitLength !== void 0 ? nBitLength : n.toString(2).length;
      const nByteLength = Math.ceil(_nBitLength / 8);
      return { nBitLength: _nBitLength, nByteLength };
    }
    exports2.nLength = nLength;
    function Field2(ORDER, bitLen, isLE = false, redef = {}) {
      if (ORDER <= _0n3)
        throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);
      const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);
      if (BYTES > 2048)
        throw new Error("Field lengths over 2048 bytes are not supported");
      const sqrtP = FpSqrt(ORDER);
      const f2 = Object.freeze({
        ORDER,
        BITS,
        BYTES,
        MASK: (0, utils_js_1.bitMask)(BITS),
        ZERO: _0n3,
        ONE: _1n3,
        create: (num2) => mod2(num2, ORDER),
        isValid: (num2) => {
          if (typeof num2 !== "bigint")
            throw new Error(`Invalid field element: expected bigint, got ${typeof num2}`);
          return _0n3 <= num2 && num2 < ORDER;
        },
        is0: (num2) => num2 === _0n3,
        isOdd: (num2) => (num2 & _1n3) === _1n3,
        neg: (num2) => mod2(-num2, ORDER),
        eql: (lhs, rhs) => lhs === rhs,
        sqr: (num2) => mod2(num2 * num2, ORDER),
        add: (lhs, rhs) => mod2(lhs + rhs, ORDER),
        sub: (lhs, rhs) => mod2(lhs - rhs, ORDER),
        mul: (lhs, rhs) => mod2(lhs * rhs, ORDER),
        pow: (num2, power) => FpPow(f2, num2, power),
        div: (lhs, rhs) => mod2(lhs * invert(rhs, ORDER), ORDER),
        // Same as above, but doesn't normalize
        sqrN: (num2) => num2 * num2,
        addN: (lhs, rhs) => lhs + rhs,
        subN: (lhs, rhs) => lhs - rhs,
        mulN: (lhs, rhs) => lhs * rhs,
        inv: (num2) => invert(num2, ORDER),
        sqrt: redef.sqrt || ((n) => sqrtP(f2, n)),
        invertBatch: (lst) => FpInvertBatch(f2, lst),
        // TODO: do we really need constant cmov?
        // We don't have const-time bigints anyway, so probably will be not very useful
        cmov: (a, b, c) => c ? b : a,
        toBytes: (num2) => isLE ? (0, utils_js_1.numberToBytesLE)(num2, BYTES) : (0, utils_js_1.numberToBytesBE)(num2, BYTES),
        fromBytes: (bytes) => {
          if (bytes.length !== BYTES)
            throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);
          return isLE ? (0, utils_js_1.bytesToNumberLE)(bytes) : (0, utils_js_1.bytesToNumberBE)(bytes);
        }
      });
      return Object.freeze(f2);
    }
    exports2.Field = Field2;
    function FpSqrtOdd(Fp, elm) {
      if (!Fp.isOdd)
        throw new Error(`Field doesn't have isOdd`);
      const root2 = Fp.sqrt(elm);
      return Fp.isOdd(root2) ? root2 : Fp.neg(root2);
    }
    exports2.FpSqrtOdd = FpSqrtOdd;
    function FpSqrtEven(Fp, elm) {
      if (!Fp.isOdd)
        throw new Error(`Field doesn't have isOdd`);
      const root2 = Fp.sqrt(elm);
      return Fp.isOdd(root2) ? Fp.neg(root2) : root2;
    }
    exports2.FpSqrtEven = FpSqrtEven;
    function hashToPrivateScalar(hash, groupOrder, isLE = false) {
      hash = (0, utils_js_1.ensureBytes)("privateHash", hash);
      const hashLen = hash.length;
      const minLen = nLength(groupOrder).nByteLength + 8;
      if (minLen < 24 || hashLen < minLen || hashLen > 1024)
        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);
      const num2 = isLE ? (0, utils_js_1.bytesToNumberLE)(hash) : (0, utils_js_1.bytesToNumberBE)(hash);
      return mod2(num2, groupOrder - _1n3) + _1n3;
    }
    exports2.hashToPrivateScalar = hashToPrivateScalar;
    function getFieldBytesLength(fieldOrder) {
      if (typeof fieldOrder !== "bigint")
        throw new Error("field order must be bigint");
      const bitLength = fieldOrder.toString(2).length;
      return Math.ceil(bitLength / 8);
    }
    exports2.getFieldBytesLength = getFieldBytesLength;
    function getMinHashLength(fieldOrder) {
      const length = getFieldBytesLength(fieldOrder);
      return length + Math.ceil(length / 2);
    }
    exports2.getMinHashLength = getMinHashLength;
    function mapHashToField(key, fieldOrder, isLE = false) {
      const len = key.length;
      const fieldLen = getFieldBytesLength(fieldOrder);
      const minLen = getMinHashLength(fieldOrder);
      if (len < 16 || len < minLen || len > 1024)
        throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);
      const num2 = isLE ? (0, utils_js_1.bytesToNumberBE)(key) : (0, utils_js_1.bytesToNumberLE)(key);
      const reduced = mod2(num2, fieldOrder - _1n3) + _1n3;
      return isLE ? (0, utils_js_1.numberToBytesLE)(reduced, fieldLen) : (0, utils_js_1.numberToBytesBE)(reduced, fieldLen);
    }
    exports2.mapHashToField = mapHashToField;
  }
});

// node_modules/ethers/node_modules/@noble/curves/abstract/curve.js
var require_curve2 = __commonJS({
  "node_modules/ethers/node_modules/@noble/curves/abstract/curve.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.validateBasic = exports2.wNAF = void 0;
    var modular_js_1 = require_modular2();
    var utils_js_1 = require_utils13();
    var _0n3 = BigInt(0);
    var _1n3 = BigInt(1);
    function wNAF(c, bits) {
      const constTimeNegate = (condition, item) => {
        const neg = item.negate();
        return condition ? neg : item;
      };
      const opts = (W) => {
        const windows = Math.ceil(bits / W) + 1;
        const windowSize = 2 ** (W - 1);
        return { windows, windowSize };
      };
      return {
        constTimeNegate,
        // non-const time multiplication ladder
        unsafeLadder(elm, n) {
          let p = c.ZERO;
          let d = elm;
          while (n > _0n3) {
            if (n & _1n3)
              p = p.add(d);
            d = d.double();
            n >>= _1n3;
          }
          return p;
        },
        /**
         * Creates a wNAF precomputation window. Used for caching.
         * Default window size is set by `utils.precompute()` and is equal to 8.
         * Number of precomputed points depends on the curve size:
         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
         * - 𝑊 is the window size
         * - 𝑛 is the bitlength of the curve order.
         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
         * @returns precomputed point tables flattened to a single array
         */
        precomputeWindow(elm, W) {
          const { windows, windowSize } = opts(W);
          const points = [];
          let p = elm;
          let base = p;
          for (let window2 = 0; window2 < windows; window2++) {
            base = p;
            points.push(base);
            for (let i = 1; i < windowSize; i++) {
              base = base.add(p);
              points.push(base);
            }
            p = base.double();
          }
          return points;
        },
        /**
         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
         * @param W window size
         * @param precomputes precomputed tables
         * @param n scalar (we don't check here, but should be less than curve order)
         * @returns real and fake (for const-time) points
         */
        wNAF(W, precomputes, n) {
          const { windows, windowSize } = opts(W);
          let p = c.ZERO;
          let f2 = c.BASE;
          const mask2 = BigInt(2 ** W - 1);
          const maxNumber = 2 ** W;
          const shiftBy = BigInt(W);
          for (let window2 = 0; window2 < windows; window2++) {
            const offset2 = window2 * windowSize;
            let wbits = Number(n & mask2);
            n >>= shiftBy;
            if (wbits > windowSize) {
              wbits -= maxNumber;
              n += _1n3;
            }
            const offset1 = offset2;
            const offset22 = offset2 + Math.abs(wbits) - 1;
            const cond1 = window2 % 2 !== 0;
            const cond2 = wbits < 0;
            if (wbits === 0) {
              f2 = f2.add(constTimeNegate(cond1, precomputes[offset1]));
            } else {
              p = p.add(constTimeNegate(cond2, precomputes[offset22]));
            }
          }
          return { p, f: f2 };
        },
        wNAFCached(P, precomputesMap, n, transform) {
          const W = P._WINDOW_SIZE || 1;
          let comp = precomputesMap.get(P);
          if (!comp) {
            comp = this.precomputeWindow(P, W);
            if (W !== 1) {
              precomputesMap.set(P, transform(comp));
            }
          }
          return this.wNAF(W, comp, n);
        }
      };
    }
    exports2.wNAF = wNAF;
    function validateBasic(curve) {
      (0, modular_js_1.validateField)(curve.Fp);
      (0, utils_js_1.validateObject)(curve, {
        n: "bigint",
        h: "bigint",
        Gx: "field",
        Gy: "field"
      }, {
        nBitLength: "isSafeInteger",
        nByteLength: "isSafeInteger"
      });
      return Object.freeze({
        ...(0, modular_js_1.nLength)(curve.n, curve.nBitLength),
        ...curve,
        ...{ p: curve.Fp.ORDER }
      });
    }
    exports2.validateBasic = validateBasic;
  }
});

// node_modules/ethers/node_modules/@noble/curves/abstract/weierstrass.js
var require_weierstrass2 = __commonJS({
  "node_modules/ethers/node_modules/@noble/curves/abstract/weierstrass.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mapToCurveSimpleSWU = exports2.SWUFpSqrtRatio = exports2.weierstrass = exports2.weierstrassPoints = exports2.DER = void 0;
    var mod2 = require_modular2();
    var ut = require_utils13();
    var utils_js_1 = require_utils13();
    var curve_js_1 = require_curve2();
    function validatePointOpts(curve) {
      const opts = (0, curve_js_1.validateBasic)(curve);
      ut.validateObject(opts, {
        a: "field",
        b: "field"
      }, {
        allowedPrivateKeyLengths: "array",
        wrapPrivateKey: "boolean",
        isTorsionFree: "function",
        clearCofactor: "function",
        allowInfinityPoint: "boolean",
        fromBytes: "function",
        toBytes: "function"
      });
      const { endo, Fp, a } = opts;
      if (endo) {
        if (!Fp.eql(a, Fp.ZERO)) {
          throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
        }
        if (typeof endo !== "object" || typeof endo.beta !== "bigint" || typeof endo.splitScalar !== "function") {
          throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
        }
      }
      return Object.freeze({ ...opts });
    }
    var { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;
    exports2.DER = {
      // asn.1 DER encoding utils
      Err: class DERErr extends Error {
        constructor(m = "") {
          super(m);
        }
      },
      _parseInt(data) {
        const { Err: E } = exports2.DER;
        if (data.length < 2 || data[0] !== 2)
          throw new E("Invalid signature integer tag");
        const len = data[1];
        const res = data.subarray(2, len + 2);
        if (!len || res.length !== len)
          throw new E("Invalid signature integer: wrong length");
        if (res[0] & 128)
          throw new E("Invalid signature integer: negative");
        if (res[0] === 0 && !(res[1] & 128))
          throw new E("Invalid signature integer: unnecessary leading zero");
        return { d: b2n(res), l: data.subarray(len + 2) };
      },
      toSig(hex) {
        const { Err: E } = exports2.DER;
        const data = typeof hex === "string" ? h2b(hex) : hex;
        if (!(data instanceof Uint8Array))
          throw new Error("ui8a expected");
        let l = data.length;
        if (l < 2 || data[0] != 48)
          throw new E("Invalid signature tag");
        if (data[1] !== l - 2)
          throw new E("Invalid signature: incorrect length");
        const { d: r, l: sBytes } = exports2.DER._parseInt(data.subarray(2));
        const { d: s, l: rBytesLeft } = exports2.DER._parseInt(sBytes);
        if (rBytesLeft.length)
          throw new E("Invalid signature: left bytes after parsing");
        return { r, s };
      },
      hexFromSig(sig) {
        const slice = (s2) => Number.parseInt(s2[0], 16) & 8 ? "00" + s2 : s2;
        const h = (num2) => {
          const hex = num2.toString(16);
          return hex.length & 1 ? `0${hex}` : hex;
        };
        const s = slice(h(sig.s));
        const r = slice(h(sig.r));
        const shl = s.length / 2;
        const rhl = r.length / 2;
        const sl = h(shl);
        const rl = h(rhl);
        return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;
      }
    };
    var _0n3 = BigInt(0);
    var _1n3 = BigInt(1);
    var _2n3 = BigInt(2);
    var _3n = BigInt(3);
    var _4n = BigInt(4);
    function weierstrassPoints(opts) {
      const CURVE = validatePointOpts(opts);
      const { Fp } = CURVE;
      const toBytes2 = CURVE.toBytes || ((_c, point, _isCompressed) => {
        const a = point.toAffine();
        return ut.concatBytes(Uint8Array.from([4]), Fp.toBytes(a.x), Fp.toBytes(a.y));
      });
      const fromBytes = CURVE.fromBytes || ((bytes) => {
        const tail = bytes.subarray(1);
        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
        return { x, y };
      });
      function weierstrassEquation(x) {
        const { a, b } = CURVE;
        const x2 = Fp.sqr(x);
        const x3 = Fp.mul(x2, x);
        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b);
      }
      if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))
        throw new Error("bad generator point: equation left != right");
      function isWithinCurveOrder(num2) {
        return typeof num2 === "bigint" && _0n3 < num2 && num2 < CURVE.n;
      }
      function assertGE(num2) {
        if (!isWithinCurveOrder(num2))
          throw new Error("Expected valid bigint: 0 < bigint < curve.n");
      }
      function normPrivateKeyToScalar(key) {
        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;
        if (lengths && typeof key !== "bigint") {
          if (key instanceof Uint8Array)
            key = ut.bytesToHex(key);
          if (typeof key !== "string" || !lengths.includes(key.length))
            throw new Error("Invalid key");
          key = key.padStart(nByteLength * 2, "0");
        }
        let num2;
        try {
          num2 = typeof key === "bigint" ? key : ut.bytesToNumberBE((0, utils_js_1.ensureBytes)("private key", key, nByteLength));
        } catch (error) {
          throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);
        }
        if (wrapPrivateKey)
          num2 = mod2.mod(num2, n);
        assertGE(num2);
        return num2;
      }
      const pointPrecomputes = /* @__PURE__ */ new Map();
      function assertPrjPoint(other) {
        if (!(other instanceof Point2))
          throw new Error("ProjectivePoint expected");
      }
      class Point2 {
        constructor(px, py, pz) {
          this.px = px;
          this.py = py;
          this.pz = pz;
          if (px == null || !Fp.isValid(px))
            throw new Error("x required");
          if (py == null || !Fp.isValid(py))
            throw new Error("y required");
          if (pz == null || !Fp.isValid(pz))
            throw new Error("z required");
        }
        // Does not validate if the point is on-curve.
        // Use fromHex instead, or call assertValidity() later.
        static fromAffine(p) {
          const { x, y } = p || {};
          if (!p || !Fp.isValid(x) || !Fp.isValid(y))
            throw new Error("invalid affine point");
          if (p instanceof Point2)
            throw new Error("projective point not allowed");
          const is0 = (i) => Fp.eql(i, Fp.ZERO);
          if (is0(x) && is0(y))
            return Point2.ZERO;
          return new Point2(x, y, Fp.ONE);
        }
        get x() {
          return this.toAffine().x;
        }
        get y() {
          return this.toAffine().y;
        }
        /**
         * Takes a bunch of Projective Points but executes only one
         * inversion on all of them. Inversion is very slow operation,
         * so this improves performance massively.
         * Optimization: converts a list of projective points to a list of identical points with Z=1.
         */
        static normalizeZ(points) {
          const toInv = Fp.invertBatch(points.map((p) => p.pz));
          return points.map((p, i) => p.toAffine(toInv[i])).map(Point2.fromAffine);
        }
        /**
         * Converts hash string or Uint8Array to Point.
         * @param hex short/long ECDSA hex
         */
        static fromHex(hex) {
          const P = Point2.fromAffine(fromBytes((0, utils_js_1.ensureBytes)("pointHex", hex)));
          P.assertValidity();
          return P;
        }
        // Multiplies generator point by privateKey.
        static fromPrivateKey(privateKey) {
          return Point2.BASE.multiply(normPrivateKeyToScalar(privateKey));
        }
        // "Private method", don't use it directly
        _setWindowSize(windowSize) {
          this._WINDOW_SIZE = windowSize;
          pointPrecomputes.delete(this);
        }
        // A point on curve is valid if it conforms to equation.
        assertValidity() {
          if (this.is0()) {
            if (CURVE.allowInfinityPoint && !Fp.is0(this.py))
              return;
            throw new Error("bad point: ZERO");
          }
          const { x, y } = this.toAffine();
          if (!Fp.isValid(x) || !Fp.isValid(y))
            throw new Error("bad point: x or y not FE");
          const left = Fp.sqr(y);
          const right = weierstrassEquation(x);
          if (!Fp.eql(left, right))
            throw new Error("bad point: equation left != right");
          if (!this.isTorsionFree())
            throw new Error("bad point: not in prime-order subgroup");
        }
        hasEvenY() {
          const { y } = this.toAffine();
          if (Fp.isOdd)
            return !Fp.isOdd(y);
          throw new Error("Field doesn't support isOdd");
        }
        /**
         * Compare one point to another.
         */
        equals(other) {
          assertPrjPoint(other);
          const { px: X1, py: Y1, pz: Z1 } = this;
          const { px: X2, py: Y2, pz: Z2 } = other;
          const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));
          const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));
          return U1 && U2;
        }
        /**
         * Flips point to one corresponding to (x, -y) in Affine coordinates.
         */
        negate() {
          return new Point2(this.px, Fp.neg(this.py), this.pz);
        }
        // Renes-Costello-Batina exception-free doubling formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 3
        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
        double() {
          const { a, b } = CURVE;
          const b3 = Fp.mul(b, _3n);
          const { px: X1, py: Y1, pz: Z1 } = this;
          let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO;
          let t0 = Fp.mul(X1, X1);
          let t1 = Fp.mul(Y1, Y1);
          let t2 = Fp.mul(Z1, Z1);
          let t3 = Fp.mul(X1, Y1);
          t3 = Fp.add(t3, t3);
          Z3 = Fp.mul(X1, Z1);
          Z3 = Fp.add(Z3, Z3);
          X3 = Fp.mul(a, Z3);
          Y3 = Fp.mul(b3, t2);
          Y3 = Fp.add(X3, Y3);
          X3 = Fp.sub(t1, Y3);
          Y3 = Fp.add(t1, Y3);
          Y3 = Fp.mul(X3, Y3);
          X3 = Fp.mul(t3, X3);
          Z3 = Fp.mul(b3, Z3);
          t2 = Fp.mul(a, t2);
          t3 = Fp.sub(t0, t2);
          t3 = Fp.mul(a, t3);
          t3 = Fp.add(t3, Z3);
          Z3 = Fp.add(t0, t0);
          t0 = Fp.add(Z3, t0);
          t0 = Fp.add(t0, t2);
          t0 = Fp.mul(t0, t3);
          Y3 = Fp.add(Y3, t0);
          t2 = Fp.mul(Y1, Z1);
          t2 = Fp.add(t2, t2);
          t0 = Fp.mul(t2, t3);
          X3 = Fp.sub(X3, t0);
          Z3 = Fp.mul(t2, t1);
          Z3 = Fp.add(Z3, Z3);
          Z3 = Fp.add(Z3, Z3);
          return new Point2(X3, Y3, Z3);
        }
        // Renes-Costello-Batina exception-free addition formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 1
        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
        add(other) {
          assertPrjPoint(other);
          const { px: X1, py: Y1, pz: Z1 } = this;
          const { px: X2, py: Y2, pz: Z2 } = other;
          let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO;
          const a = CURVE.a;
          const b3 = Fp.mul(CURVE.b, _3n);
          let t0 = Fp.mul(X1, X2);
          let t1 = Fp.mul(Y1, Y2);
          let t2 = Fp.mul(Z1, Z2);
          let t3 = Fp.add(X1, Y1);
          let t4 = Fp.add(X2, Y2);
          t3 = Fp.mul(t3, t4);
          t4 = Fp.add(t0, t1);
          t3 = Fp.sub(t3, t4);
          t4 = Fp.add(X1, Z1);
          let t5 = Fp.add(X2, Z2);
          t4 = Fp.mul(t4, t5);
          t5 = Fp.add(t0, t2);
          t4 = Fp.sub(t4, t5);
          t5 = Fp.add(Y1, Z1);
          X3 = Fp.add(Y2, Z2);
          t5 = Fp.mul(t5, X3);
          X3 = Fp.add(t1, t2);
          t5 = Fp.sub(t5, X3);
          Z3 = Fp.mul(a, t4);
          X3 = Fp.mul(b3, t2);
          Z3 = Fp.add(X3, Z3);
          X3 = Fp.sub(t1, Z3);
          Z3 = Fp.add(t1, Z3);
          Y3 = Fp.mul(X3, Z3);
          t1 = Fp.add(t0, t0);
          t1 = Fp.add(t1, t0);
          t2 = Fp.mul(a, t2);
          t4 = Fp.mul(b3, t4);
          t1 = Fp.add(t1, t2);
          t2 = Fp.sub(t0, t2);
          t2 = Fp.mul(a, t2);
          t4 = Fp.add(t4, t2);
          t0 = Fp.mul(t1, t4);
          Y3 = Fp.add(Y3, t0);
          t0 = Fp.mul(t5, t4);
          X3 = Fp.mul(t3, X3);
          X3 = Fp.sub(X3, t0);
          t0 = Fp.mul(t3, t1);
          Z3 = Fp.mul(t5, Z3);
          Z3 = Fp.add(Z3, t0);
          return new Point2(X3, Y3, Z3);
        }
        subtract(other) {
          return this.add(other.negate());
        }
        is0() {
          return this.equals(Point2.ZERO);
        }
        wNAF(n) {
          return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {
            const toInv = Fp.invertBatch(comp.map((p) => p.pz));
            return comp.map((p, i) => p.toAffine(toInv[i])).map(Point2.fromAffine);
          });
        }
        /**
         * Non-constant-time multiplication. Uses double-and-add algorithm.
         * It's faster, but should only be used when you don't care about
         * an exposed private key e.g. sig verification, which works over *public* keys.
         */
        multiplyUnsafe(n) {
          const I = Point2.ZERO;
          if (n === _0n3)
            return I;
          assertGE(n);
          if (n === _1n3)
            return this;
          const { endo } = CURVE;
          if (!endo)
            return wnaf.unsafeLadder(this, n);
          let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
          let k1p = I;
          let k2p = I;
          let d = this;
          while (k1 > _0n3 || k2 > _0n3) {
            if (k1 & _1n3)
              k1p = k1p.add(d);
            if (k2 & _1n3)
              k2p = k2p.add(d);
            d = d.double();
            k1 >>= _1n3;
            k2 >>= _1n3;
          }
          if (k1neg)
            k1p = k1p.negate();
          if (k2neg)
            k2p = k2p.negate();
          k2p = new Point2(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
          return k1p.add(k2p);
        }
        /**
         * Constant time multiplication.
         * Uses wNAF method. Windowed method may be 10% faster,
         * but takes 2x longer to generate and consumes 2x memory.
         * Uses precomputes when available.
         * Uses endomorphism for Koblitz curves.
         * @param scalar by which the point would be multiplied
         * @returns New point
         */
        multiply(scalar) {
          assertGE(scalar);
          let n = scalar;
          let point, fake;
          const { endo } = CURVE;
          if (endo) {
            const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
            let { p: k1p, f: f1p } = this.wNAF(k1);
            let { p: k2p, f: f2p } = this.wNAF(k2);
            k1p = wnaf.constTimeNegate(k1neg, k1p);
            k2p = wnaf.constTimeNegate(k2neg, k2p);
            k2p = new Point2(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
            point = k1p.add(k2p);
            fake = f1p.add(f2p);
          } else {
            const { p, f: f2 } = this.wNAF(n);
            point = p;
            fake = f2;
          }
          return Point2.normalizeZ([point, fake])[0];
        }
        /**
         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
         * Not using Strauss-Shamir trick: precomputation tables are faster.
         * The trick could be useful if both P and Q are not G (not in our case).
         * @returns non-zero affine point
         */
        multiplyAndAddUnsafe(Q, a, b) {
          const G = Point2.BASE;
          const mul = (P, a2) => a2 === _0n3 || a2 === _1n3 || !P.equals(G) ? P.multiplyUnsafe(a2) : P.multiply(a2);
          const sum = mul(this, a).add(mul(Q, b));
          return sum.is0() ? void 0 : sum;
        }
        // Converts Projective point to affine (x, y) coordinates.
        // Can accept precomputed Z^-1 - for example, from invertBatch.
        // (x, y, z) ∋ (x=x/z, y=y/z)
        toAffine(iz) {
          const { px: x, py: y, pz: z } = this;
          const is0 = this.is0();
          if (iz == null)
            iz = is0 ? Fp.ONE : Fp.inv(z);
          const ax = Fp.mul(x, iz);
          const ay = Fp.mul(y, iz);
          const zz = Fp.mul(z, iz);
          if (is0)
            return { x: Fp.ZERO, y: Fp.ZERO };
          if (!Fp.eql(zz, Fp.ONE))
            throw new Error("invZ was invalid");
          return { x: ax, y: ay };
        }
        isTorsionFree() {
          const { h: cofactor, isTorsionFree } = CURVE;
          if (cofactor === _1n3)
            return true;
          if (isTorsionFree)
            return isTorsionFree(Point2, this);
          throw new Error("isTorsionFree() has not been declared for the elliptic curve");
        }
        clearCofactor() {
          const { h: cofactor, clearCofactor } = CURVE;
          if (cofactor === _1n3)
            return this;
          if (clearCofactor)
            return clearCofactor(Point2, this);
          return this.multiplyUnsafe(CURVE.h);
        }
        toRawBytes(isCompressed = true) {
          this.assertValidity();
          return toBytes2(Point2, this, isCompressed);
        }
        toHex(isCompressed = true) {
          return ut.bytesToHex(this.toRawBytes(isCompressed));
        }
      }
      Point2.BASE = new Point2(CURVE.Gx, CURVE.Gy, Fp.ONE);
      Point2.ZERO = new Point2(Fp.ZERO, Fp.ONE, Fp.ZERO);
      const _bits = CURVE.nBitLength;
      const wnaf = (0, curve_js_1.wNAF)(Point2, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
      return {
        CURVE,
        ProjectivePoint: Point2,
        normPrivateKeyToScalar,
        weierstrassEquation,
        isWithinCurveOrder
      };
    }
    exports2.weierstrassPoints = weierstrassPoints;
    function validateOpts(curve) {
      const opts = (0, curve_js_1.validateBasic)(curve);
      ut.validateObject(opts, {
        hash: "hash",
        hmac: "function",
        randomBytes: "function"
      }, {
        bits2int: "function",
        bits2int_modN: "function",
        lowS: "boolean"
      });
      return Object.freeze({ lowS: true, ...opts });
    }
    function weierstrass(curveDef) {
      const CURVE = validateOpts(curveDef);
      const { Fp, n: CURVE_ORDER } = CURVE;
      const compressedLen = Fp.BYTES + 1;
      const uncompressedLen = 2 * Fp.BYTES + 1;
      function isValidFieldElement(num2) {
        return _0n3 < num2 && num2 < Fp.ORDER;
      }
      function modN2(a) {
        return mod2.mod(a, CURVE_ORDER);
      }
      function invN(a) {
        return mod2.invert(a, CURVE_ORDER);
      }
      const { ProjectivePoint: Point2, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder } = weierstrassPoints({
        ...CURVE,
        toBytes(_c, point, isCompressed) {
          const a = point.toAffine();
          const x = Fp.toBytes(a.x);
          const cat = ut.concatBytes;
          if (isCompressed) {
            return cat(Uint8Array.from([point.hasEvenY() ? 2 : 3]), x);
          } else {
            return cat(Uint8Array.from([4]), x, Fp.toBytes(a.y));
          }
        },
        fromBytes(bytes) {
          const len = bytes.length;
          const head = bytes[0];
          const tail = bytes.subarray(1);
          if (len === compressedLen && (head === 2 || head === 3)) {
            const x = ut.bytesToNumberBE(tail);
            if (!isValidFieldElement(x))
              throw new Error("Point is not on curve");
            const y2 = weierstrassEquation(x);
            let y = Fp.sqrt(y2);
            const isYOdd = (y & _1n3) === _1n3;
            const isHeadOdd = (head & 1) === 1;
            if (isHeadOdd !== isYOdd)
              y = Fp.neg(y);
            return { x, y };
          } else if (len === uncompressedLen && head === 4) {
            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
            return { x, y };
          } else {
            throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);
          }
        }
      });
      const numToNByteStr = (num2) => ut.bytesToHex(ut.numberToBytesBE(num2, CURVE.nByteLength));
      function isBiggerThanHalfOrder(number2) {
        const HALF = CURVE_ORDER >> _1n3;
        return number2 > HALF;
      }
      function normalizeS(s) {
        return isBiggerThanHalfOrder(s) ? modN2(-s) : s;
      }
      const slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));
      class Signature {
        constructor(r, s, recovery) {
          this.r = r;
          this.s = s;
          this.recovery = recovery;
          this.assertValidity();
        }
        // pair (bytes of r, bytes of s)
        static fromCompact(hex) {
          const l = CURVE.nByteLength;
          hex = (0, utils_js_1.ensureBytes)("compactSignature", hex, l * 2);
          return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));
        }
        // DER encoded ECDSA signature
        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
        static fromDER(hex) {
          const { r, s } = exports2.DER.toSig((0, utils_js_1.ensureBytes)("DER", hex));
          return new Signature(r, s);
        }
        assertValidity() {
          if (!isWithinCurveOrder(this.r))
            throw new Error("r must be 0 < r < CURVE.n");
          if (!isWithinCurveOrder(this.s))
            throw new Error("s must be 0 < s < CURVE.n");
        }
        addRecoveryBit(recovery) {
          return new Signature(this.r, this.s, recovery);
        }
        recoverPublicKey(msgHash) {
          const { r, s, recovery: rec } = this;
          const h = bits2int_modN((0, utils_js_1.ensureBytes)("msgHash", msgHash));
          if (rec == null || ![0, 1, 2, 3].includes(rec))
            throw new Error("recovery id invalid");
          const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;
          if (radj >= Fp.ORDER)
            throw new Error("recovery id 2 or 3 invalid");
          const prefix = (rec & 1) === 0 ? "02" : "03";
          const R = Point2.fromHex(prefix + numToNByteStr(radj));
          const ir = invN(radj);
          const u1 = modN2(-h * ir);
          const u2 = modN2(s * ir);
          const Q = Point2.BASE.multiplyAndAddUnsafe(R, u1, u2);
          if (!Q)
            throw new Error("point at infinify");
          Q.assertValidity();
          return Q;
        }
        // Signatures should be low-s, to prevent malleability.
        hasHighS() {
          return isBiggerThanHalfOrder(this.s);
        }
        normalizeS() {
          return this.hasHighS() ? new Signature(this.r, modN2(-this.s), this.recovery) : this;
        }
        // DER-encoded
        toDERRawBytes() {
          return ut.hexToBytes(this.toDERHex());
        }
        toDERHex() {
          return exports2.DER.hexFromSig({ r: this.r, s: this.s });
        }
        // padded bytes of r, then padded bytes of s
        toCompactRawBytes() {
          return ut.hexToBytes(this.toCompactHex());
        }
        toCompactHex() {
          return numToNByteStr(this.r) + numToNByteStr(this.s);
        }
      }
      const utils = {
        isValidPrivateKey(privateKey) {
          try {
            normPrivateKeyToScalar(privateKey);
            return true;
          } catch (error) {
            return false;
          }
        },
        normPrivateKeyToScalar,
        /**
         * Produces cryptographically secure private key from random of size
         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
         */
        randomPrivateKey: () => {
          const length = mod2.getMinHashLength(CURVE.n);
          return mod2.mapHashToField(CURVE.randomBytes(length), CURVE.n);
        },
        /**
         * Creates precompute table for an arbitrary EC point. Makes point "cached".
         * Allows to massively speed-up `point.multiply(scalar)`.
         * @returns cached point
         * @example
         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
         * fast.multiply(privKey); // much faster ECDH now
         */
        precompute(windowSize = 8, point = Point2.BASE) {
          point._setWindowSize(windowSize);
          point.multiply(BigInt(3));
          return point;
        }
      };
      function getPublicKey2(privateKey, isCompressed = true) {
        return Point2.fromPrivateKey(privateKey).toRawBytes(isCompressed);
      }
      function isProbPub(item) {
        const arr = item instanceof Uint8Array;
        const str = typeof item === "string";
        const len = (arr || str) && item.length;
        if (arr)
          return len === compressedLen || len === uncompressedLen;
        if (str)
          return len === 2 * compressedLen || len === 2 * uncompressedLen;
        if (item instanceof Point2)
          return true;
        return false;
      }
      function getSharedSecret(privateA, publicB, isCompressed = true) {
        if (isProbPub(privateA))
          throw new Error("first arg must be private key");
        if (!isProbPub(publicB))
          throw new Error("second arg must be public key");
        const b = Point2.fromHex(publicB);
        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
      }
      const bits2int = CURVE.bits2int || function(bytes) {
        const num2 = ut.bytesToNumberBE(bytes);
        const delta = bytes.length * 8 - CURVE.nBitLength;
        return delta > 0 ? num2 >> BigInt(delta) : num2;
      };
      const bits2int_modN = CURVE.bits2int_modN || function(bytes) {
        return modN2(bits2int(bytes));
      };
      const ORDER_MASK = ut.bitMask(CURVE.nBitLength);
      function int2octets(num2) {
        if (typeof num2 !== "bigint")
          throw new Error("bigint expected");
        if (!(_0n3 <= num2 && num2 < ORDER_MASK))
          throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);
        return ut.numberToBytesBE(num2, CURVE.nByteLength);
      }
      function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
        if (["recovered", "canonical"].some((k) => k in opts))
          throw new Error("sign() legacy options not supported");
        const { hash, randomBytes: randomBytes2 } = CURVE;
        let { lowS, prehash, extraEntropy: ent } = opts;
        if (lowS == null)
          lowS = true;
        msgHash = (0, utils_js_1.ensureBytes)("msgHash", msgHash);
        if (prehash)
          msgHash = (0, utils_js_1.ensureBytes)("prehashed msgHash", hash(msgHash));
        const h1int = bits2int_modN(msgHash);
        const d = normPrivateKeyToScalar(privateKey);
        const seedArgs = [int2octets(d), int2octets(h1int)];
        if (ent != null) {
          const e = ent === true ? randomBytes2(Fp.BYTES) : ent;
          seedArgs.push((0, utils_js_1.ensureBytes)("extraEntropy", e));
        }
        const seed = ut.concatBytes(...seedArgs);
        const m = h1int;
        function k2sig(kBytes) {
          const k = bits2int(kBytes);
          if (!isWithinCurveOrder(k))
            return;
          const ik = invN(k);
          const q = Point2.BASE.multiply(k).toAffine();
          const r = modN2(q.x);
          if (r === _0n3)
            return;
          const s = modN2(ik * modN2(m + r * d));
          if (s === _0n3)
            return;
          let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n3);
          let normS = s;
          if (lowS && isBiggerThanHalfOrder(s)) {
            normS = normalizeS(s);
            recovery ^= 1;
          }
          return new Signature(r, normS, recovery);
        }
        return { seed, k2sig };
      }
      const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };
      const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };
      function sign2(msgHash, privKey, opts = defaultSigOpts) {
        const { seed, k2sig } = prepSig(msgHash, privKey, opts);
        const C = CURVE;
        const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);
        return drbg(seed, k2sig);
      }
      Point2.BASE._setWindowSize(8);
      function verify2(signature2, msgHash, publicKey2, opts = defaultVerOpts) {
        var _a;
        const sg = signature2;
        msgHash = (0, utils_js_1.ensureBytes)("msgHash", msgHash);
        publicKey2 = (0, utils_js_1.ensureBytes)("publicKey", publicKey2);
        if ("strict" in opts)
          throw new Error("options.strict was renamed to lowS");
        const { lowS, prehash } = opts;
        let _sig = void 0;
        let P;
        try {
          if (typeof sg === "string" || sg instanceof Uint8Array) {
            try {
              _sig = Signature.fromDER(sg);
            } catch (derError) {
              if (!(derError instanceof exports2.DER.Err))
                throw derError;
              _sig = Signature.fromCompact(sg);
            }
          } else if (typeof sg === "object" && typeof sg.r === "bigint" && typeof sg.s === "bigint") {
            const { r: r2, s: s2 } = sg;
            _sig = new Signature(r2, s2);
          } else {
            throw new Error("PARSE");
          }
          P = Point2.fromHex(publicKey2);
        } catch (error) {
          if (error.message === "PARSE")
            throw new Error(`signature must be Signature instance, Uint8Array or hex string`);
          return false;
        }
        if (lowS && _sig.hasHighS())
          return false;
        if (prehash)
          msgHash = CURVE.hash(msgHash);
        const { r, s } = _sig;
        const h = bits2int_modN(msgHash);
        const is2 = invN(s);
        const u1 = modN2(h * is2);
        const u2 = modN2(r * is2);
        const R = (_a = Point2.BASE.multiplyAndAddUnsafe(P, u1, u2)) == null ? void 0 : _a.toAffine();
        if (!R)
          return false;
        const v = modN2(R.x);
        return v === r;
      }
      return {
        CURVE,
        getPublicKey: getPublicKey2,
        getSharedSecret,
        sign: sign2,
        verify: verify2,
        ProjectivePoint: Point2,
        Signature,
        utils
      };
    }
    exports2.weierstrass = weierstrass;
    function SWUFpSqrtRatio(Fp, Z) {
      const q = Fp.ORDER;
      let l = _0n3;
      for (let o = q - _1n3; o % _2n3 === _0n3; o /= _2n3)
        l += _1n3;
      const c1 = l;
      const _2n_pow_c1_1 = _2n3 << c1 - _1n3 - _1n3;
      const _2n_pow_c1 = _2n_pow_c1_1 * _2n3;
      const c2 = (q - _1n3) / _2n_pow_c1;
      const c3 = (c2 - _1n3) / _2n3;
      const c4 = _2n_pow_c1 - _1n3;
      const c5 = _2n_pow_c1_1;
      const c6 = Fp.pow(Z, c2);
      const c7 = Fp.pow(Z, (c2 + _1n3) / _2n3);
      let sqrtRatio = (u, v) => {
        let tv1 = c6;
        let tv2 = Fp.pow(v, c4);
        let tv3 = Fp.sqr(tv2);
        tv3 = Fp.mul(tv3, v);
        let tv5 = Fp.mul(u, tv3);
        tv5 = Fp.pow(tv5, c3);
        tv5 = Fp.mul(tv5, tv2);
        tv2 = Fp.mul(tv5, v);
        tv3 = Fp.mul(tv5, u);
        let tv4 = Fp.mul(tv3, tv2);
        tv5 = Fp.pow(tv4, c5);
        let isQR = Fp.eql(tv5, Fp.ONE);
        tv2 = Fp.mul(tv3, c7);
        tv5 = Fp.mul(tv4, tv1);
        tv3 = Fp.cmov(tv2, tv3, isQR);
        tv4 = Fp.cmov(tv5, tv4, isQR);
        for (let i = c1; i > _1n3; i--) {
          let tv52 = i - _2n3;
          tv52 = _2n3 << tv52 - _1n3;
          let tvv5 = Fp.pow(tv4, tv52);
          const e1 = Fp.eql(tvv5, Fp.ONE);
          tv2 = Fp.mul(tv3, tv1);
          tv1 = Fp.mul(tv1, tv1);
          tvv5 = Fp.mul(tv4, tv1);
          tv3 = Fp.cmov(tv2, tv3, e1);
          tv4 = Fp.cmov(tvv5, tv4, e1);
        }
        return { isValid: isQR, value: tv3 };
      };
      if (Fp.ORDER % _4n === _3n) {
        const c12 = (Fp.ORDER - _3n) / _4n;
        const c22 = Fp.sqrt(Fp.neg(Z));
        sqrtRatio = (u, v) => {
          let tv1 = Fp.sqr(v);
          const tv2 = Fp.mul(u, v);
          tv1 = Fp.mul(tv1, tv2);
          let y1 = Fp.pow(tv1, c12);
          y1 = Fp.mul(y1, tv2);
          const y2 = Fp.mul(y1, c22);
          const tv3 = Fp.mul(Fp.sqr(y1), v);
          const isQR = Fp.eql(tv3, u);
          let y = Fp.cmov(y2, y1, isQR);
          return { isValid: isQR, value: y };
        };
      }
      return sqrtRatio;
    }
    exports2.SWUFpSqrtRatio = SWUFpSqrtRatio;
    function mapToCurveSimpleSWU2(Fp, opts) {
      mod2.validateField(Fp);
      if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))
        throw new Error("mapToCurveSimpleSWU: invalid opts");
      const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);
      if (!Fp.isOdd)
        throw new Error("Fp.isOdd is not implemented!");
      return (u) => {
        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;
        tv1 = Fp.sqr(u);
        tv1 = Fp.mul(tv1, opts.Z);
        tv2 = Fp.sqr(tv1);
        tv2 = Fp.add(tv2, tv1);
        tv3 = Fp.add(tv2, Fp.ONE);
        tv3 = Fp.mul(tv3, opts.B);
        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO));
        tv4 = Fp.mul(tv4, opts.A);
        tv2 = Fp.sqr(tv3);
        tv6 = Fp.sqr(tv4);
        tv5 = Fp.mul(tv6, opts.A);
        tv2 = Fp.add(tv2, tv5);
        tv2 = Fp.mul(tv2, tv3);
        tv6 = Fp.mul(tv6, tv4);
        tv5 = Fp.mul(tv6, opts.B);
        tv2 = Fp.add(tv2, tv5);
        x = Fp.mul(tv1, tv3);
        const { isValid, value } = sqrtRatio(tv2, tv6);
        y = Fp.mul(tv1, u);
        y = Fp.mul(y, value);
        x = Fp.cmov(x, tv3, isValid);
        y = Fp.cmov(y, value, isValid);
        const e1 = Fp.isOdd(u) === Fp.isOdd(y);
        y = Fp.cmov(Fp.neg(y), y, e1);
        x = Fp.div(x, tv4);
        return { x, y };
      };
    }
    exports2.mapToCurveSimpleSWU = mapToCurveSimpleSWU2;
  }
});

// node_modules/ethers/node_modules/@noble/curves/abstract/hash-to-curve.js
var require_hash_to_curve2 = __commonJS({
  "node_modules/ethers/node_modules/@noble/curves/abstract/hash-to-curve.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createHasher = exports2.isogenyMap = exports2.hash_to_field = exports2.expand_message_xof = exports2.expand_message_xmd = void 0;
    var modular_js_1 = require_modular2();
    var utils_js_1 = require_utils13();
    function validateDST(dst) {
      if (dst instanceof Uint8Array)
        return dst;
      if (typeof dst === "string")
        return (0, utils_js_1.utf8ToBytes)(dst);
      throw new Error("DST must be Uint8Array or string");
    }
    var os2ip = utils_js_1.bytesToNumberBE;
    function i2osp(value, length) {
      if (value < 0 || value >= 1 << 8 * length) {
        throw new Error(`bad I2OSP call: value=${value} length=${length}`);
      }
      const res = Array.from({ length }).fill(0);
      for (let i = length - 1; i >= 0; i--) {
        res[i] = value & 255;
        value >>>= 8;
      }
      return new Uint8Array(res);
    }
    function strxor(a, b) {
      const arr = new Uint8Array(a.length);
      for (let i = 0; i < a.length; i++) {
        arr[i] = a[i] ^ b[i];
      }
      return arr;
    }
    function isBytes(item) {
      if (!(item instanceof Uint8Array))
        throw new Error("Uint8Array expected");
    }
    function isNum(item) {
      if (!Number.isSafeInteger(item))
        throw new Error("number expected");
    }
    function expand_message_xmd(msg, DST, lenInBytes, H) {
      isBytes(msg);
      isBytes(DST);
      isNum(lenInBytes);
      if (DST.length > 255)
        DST = H((0, utils_js_1.concatBytes)((0, utils_js_1.utf8ToBytes)("H2C-OVERSIZE-DST-"), DST));
      const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;
      const ell = Math.ceil(lenInBytes / b_in_bytes);
      if (ell > 255)
        throw new Error("Invalid xmd length");
      const DST_prime = (0, utils_js_1.concatBytes)(DST, i2osp(DST.length, 1));
      const Z_pad = i2osp(0, r_in_bytes);
      const l_i_b_str = i2osp(lenInBytes, 2);
      const b = new Array(ell);
      const b_0 = H((0, utils_js_1.concatBytes)(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));
      b[0] = H((0, utils_js_1.concatBytes)(b_0, i2osp(1, 1), DST_prime));
      for (let i = 1; i <= ell; i++) {
        const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];
        b[i] = H((0, utils_js_1.concatBytes)(...args));
      }
      const pseudo_random_bytes = (0, utils_js_1.concatBytes)(...b);
      return pseudo_random_bytes.slice(0, lenInBytes);
    }
    exports2.expand_message_xmd = expand_message_xmd;
    function expand_message_xof(msg, DST, lenInBytes, k, H) {
      isBytes(msg);
      isBytes(DST);
      isNum(lenInBytes);
      if (DST.length > 255) {
        const dkLen = Math.ceil(2 * k / 8);
        DST = H.create({ dkLen }).update((0, utils_js_1.utf8ToBytes)("H2C-OVERSIZE-DST-")).update(DST).digest();
      }
      if (lenInBytes > 65535 || DST.length > 255)
        throw new Error("expand_message_xof: invalid lenInBytes");
      return H.create({ dkLen: lenInBytes }).update(msg).update(i2osp(lenInBytes, 2)).update(DST).update(i2osp(DST.length, 1)).digest();
    }
    exports2.expand_message_xof = expand_message_xof;
    function hash_to_field(msg, count, options) {
      (0, utils_js_1.validateObject)(options, {
        DST: "stringOrUint8Array",
        p: "bigint",
        m: "isSafeInteger",
        k: "isSafeInteger",
        hash: "hash"
      });
      const { p, k, m, hash, expand, DST: _DST } = options;
      isBytes(msg);
      isNum(count);
      const DST = validateDST(_DST);
      const log2p = p.toString(2).length;
      const L = Math.ceil((log2p + k) / 8);
      const len_in_bytes = count * m * L;
      let prb;
      if (expand === "xmd") {
        prb = expand_message_xmd(msg, DST, len_in_bytes, hash);
      } else if (expand === "xof") {
        prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);
      } else if (expand === "_internal_pass") {
        prb = msg;
      } else {
        throw new Error('expand must be "xmd" or "xof"');
      }
      const u = new Array(count);
      for (let i = 0; i < count; i++) {
        const e = new Array(m);
        for (let j = 0; j < m; j++) {
          const elm_offset = L * (j + i * m);
          const tv = prb.subarray(elm_offset, elm_offset + L);
          e[j] = (0, modular_js_1.mod)(os2ip(tv), p);
        }
        u[i] = e;
      }
      return u;
    }
    exports2.hash_to_field = hash_to_field;
    function isogenyMap2(field, map) {
      const COEFF = map.map((i) => Array.from(i).reverse());
      return (x, y) => {
        const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));
        x = field.div(xNum, xDen);
        y = field.mul(y, field.div(yNum, yDen));
        return { x, y };
      };
    }
    exports2.isogenyMap = isogenyMap2;
    function createHasher3(Point2, mapToCurve, def) {
      if (typeof mapToCurve !== "function")
        throw new Error("mapToCurve() must be defined");
      return {
        // Encodes byte string to elliptic curve.
        // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
        hashToCurve(msg, options) {
          const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options });
          const u0 = Point2.fromAffine(mapToCurve(u[0]));
          const u1 = Point2.fromAffine(mapToCurve(u[1]));
          const P = u0.add(u1).clearCofactor();
          P.assertValidity();
          return P;
        },
        // Encodes byte string to elliptic curve.
        // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
        encodeToCurve(msg, options) {
          const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options });
          const P = Point2.fromAffine(mapToCurve(u[0])).clearCofactor();
          P.assertValidity();
          return P;
        }
      };
    }
    exports2.createHasher = createHasher3;
  }
});

// node_modules/ethers/node_modules/@noble/curves/_shortw_utils.js
var require_shortw_utils2 = __commonJS({
  "node_modules/ethers/node_modules/@noble/curves/_shortw_utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createCurve = exports2.getHash = void 0;
    var hmac_1 = require_hmac3();
    var utils_1 = require_utils12();
    var weierstrass_js_1 = require_weierstrass2();
    function getHash(hash) {
      return {
        hash,
        hmac: (key, ...msgs) => (0, hmac_1.hmac)(hash, key, (0, utils_1.concatBytes)(...msgs)),
        randomBytes: utils_1.randomBytes
      };
    }
    exports2.getHash = getHash;
    function createCurve2(curveDef, defHash) {
      const create2 = (hash) => (0, weierstrass_js_1.weierstrass)({ ...curveDef, ...getHash(hash) });
      return Object.freeze({ ...create2(defHash), create: create2 });
    }
    exports2.createCurve = createCurve2;
  }
});

// node_modules/ethers/node_modules/@noble/curves/secp256k1.js
var require_secp256k1 = __commonJS({
  "node_modules/ethers/node_modules/@noble/curves/secp256k1.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.encodeToCurve = exports2.hashToCurve = exports2.schnorr = exports2.secp256k1 = void 0;
    var sha256_1 = require_sha2563();
    var utils_1 = require_utils12();
    var modular_js_1 = require_modular2();
    var weierstrass_js_1 = require_weierstrass2();
    var utils_js_1 = require_utils13();
    var hash_to_curve_js_1 = require_hash_to_curve2();
    var _shortw_utils_js_1 = require_shortw_utils2();
    var secp256k1P2 = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f");
    var secp256k1N2 = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
    var _1n3 = BigInt(1);
    var _2n3 = BigInt(2);
    var divNearest2 = (a, b) => (a + b / _2n3) / b;
    function sqrtMod2(y) {
      const P = secp256k1P2;
      const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);
      const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
      const b2 = y * y * y % P;
      const b3 = b2 * b2 * y % P;
      const b6 = (0, modular_js_1.pow2)(b3, _3n, P) * b3 % P;
      const b9 = (0, modular_js_1.pow2)(b6, _3n, P) * b3 % P;
      const b11 = (0, modular_js_1.pow2)(b9, _2n3, P) * b2 % P;
      const b22 = (0, modular_js_1.pow2)(b11, _11n, P) * b11 % P;
      const b44 = (0, modular_js_1.pow2)(b22, _22n, P) * b22 % P;
      const b88 = (0, modular_js_1.pow2)(b44, _44n, P) * b44 % P;
      const b176 = (0, modular_js_1.pow2)(b88, _88n, P) * b88 % P;
      const b220 = (0, modular_js_1.pow2)(b176, _44n, P) * b44 % P;
      const b223 = (0, modular_js_1.pow2)(b220, _3n, P) * b3 % P;
      const t1 = (0, modular_js_1.pow2)(b223, _23n, P) * b22 % P;
      const t2 = (0, modular_js_1.pow2)(t1, _6n, P) * b2 % P;
      const root2 = (0, modular_js_1.pow2)(t2, _2n3, P);
      if (!Fp.eql(Fp.sqr(root2), y))
        throw new Error("Cannot find square root");
      return root2;
    }
    var Fp = (0, modular_js_1.Field)(secp256k1P2, void 0, void 0, { sqrt: sqrtMod2 });
    exports2.secp256k1 = (0, _shortw_utils_js_1.createCurve)({
      a: BigInt(0),
      b: BigInt(7),
      Fp,
      n: secp256k1N2,
      // Base point (x, y) aka generator point
      Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
      Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
      h: BigInt(1),
      lowS: true,
      /**
       * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
       * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
       * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
       * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
       */
      endo: {
        beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
        splitScalar: (k) => {
          const n = secp256k1N2;
          const a1 = BigInt("0x3086d221a7d46bcde86c90e49284eb15");
          const b1 = -_1n3 * BigInt("0xe4437ed6010e88286f547fa90abfe4c3");
          const a2 = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8");
          const b2 = a1;
          const POW_2_128 = BigInt("0x100000000000000000000000000000000");
          const c1 = divNearest2(b2 * k, n);
          const c2 = divNearest2(-b1 * k, n);
          let k1 = (0, modular_js_1.mod)(k - c1 * a1 - c2 * a2, n);
          let k2 = (0, modular_js_1.mod)(-c1 * b1 - c2 * b2, n);
          const k1neg = k1 > POW_2_128;
          const k2neg = k2 > POW_2_128;
          if (k1neg)
            k1 = n - k1;
          if (k2neg)
            k2 = n - k2;
          if (k1 > POW_2_128 || k2 > POW_2_128) {
            throw new Error("splitScalar: Endomorphism failed, k=" + k);
          }
          return { k1neg, k1, k2neg, k2 };
        }
      }
    }, sha256_1.sha256);
    var _0n3 = BigInt(0);
    var fe = (x) => typeof x === "bigint" && _0n3 < x && x < secp256k1P2;
    var ge = (x) => typeof x === "bigint" && _0n3 < x && x < secp256k1N2;
    var TAGGED_HASH_PREFIXES2 = {};
    function taggedHash2(tag, ...messages) {
      let tagP = TAGGED_HASH_PREFIXES2[tag];
      if (tagP === void 0) {
        const tagH = (0, sha256_1.sha256)(Uint8Array.from(tag, (c) => c.charCodeAt(0)));
        tagP = (0, utils_js_1.concatBytes)(tagH, tagH);
        TAGGED_HASH_PREFIXES2[tag] = tagP;
      }
      return (0, sha256_1.sha256)((0, utils_js_1.concatBytes)(tagP, ...messages));
    }
    var pointToBytes2 = (point) => point.toRawBytes(true).slice(1);
    var numTo32b2 = (n) => (0, utils_js_1.numberToBytesBE)(n, 32);
    var modP2 = (x) => (0, modular_js_1.mod)(x, secp256k1P2);
    var modN2 = (x) => (0, modular_js_1.mod)(x, secp256k1N2);
    var Point2 = exports2.secp256k1.ProjectivePoint;
    var GmulAdd2 = (Q, a, b) => Point2.BASE.multiplyAndAddUnsafe(Q, a, b);
    function schnorrGetExtPubKey2(priv) {
      let d_ = exports2.secp256k1.utils.normPrivateKeyToScalar(priv);
      let p = Point2.fromPrivateKey(d_);
      const scalar = p.hasEvenY() ? d_ : modN2(-d_);
      return { scalar, bytes: pointToBytes2(p) };
    }
    function lift_x2(x) {
      if (!fe(x))
        throw new Error("bad x: need 0 < x < p");
      const xx = modP2(x * x);
      const c = modP2(xx * x + BigInt(7));
      let y = sqrtMod2(c);
      if (y % _2n3 !== _0n3)
        y = modP2(-y);
      const p = new Point2(x, y, _1n3);
      p.assertValidity();
      return p;
    }
    function challenge2(...args) {
      return modN2((0, utils_js_1.bytesToNumberBE)(taggedHash2("BIP0340/challenge", ...args)));
    }
    function schnorrGetPublicKey2(privateKey) {
      return schnorrGetExtPubKey2(privateKey).bytes;
    }
    function schnorrSign2(message, privateKey, auxRand = (0, utils_1.randomBytes)(32)) {
      const m = (0, utils_js_1.ensureBytes)("message", message);
      const { bytes: px, scalar: d } = schnorrGetExtPubKey2(privateKey);
      const a = (0, utils_js_1.ensureBytes)("auxRand", auxRand, 32);
      const t = numTo32b2(d ^ (0, utils_js_1.bytesToNumberBE)(taggedHash2("BIP0340/aux", a)));
      const rand = taggedHash2("BIP0340/nonce", t, px, m);
      const k_ = modN2((0, utils_js_1.bytesToNumberBE)(rand));
      if (k_ === _0n3)
        throw new Error("sign failed: k is zero");
      const { bytes: rx, scalar: k } = schnorrGetExtPubKey2(k_);
      const e = challenge2(rx, px, m);
      const sig = new Uint8Array(64);
      sig.set(rx, 0);
      sig.set(numTo32b2(modN2(k + e * d)), 32);
      if (!schnorrVerify2(sig, m, px))
        throw new Error("sign: Invalid signature produced");
      return sig;
    }
    function schnorrVerify2(signature2, message, publicKey2) {
      const sig = (0, utils_js_1.ensureBytes)("signature", signature2, 64);
      const m = (0, utils_js_1.ensureBytes)("message", message);
      const pub = (0, utils_js_1.ensureBytes)("publicKey", publicKey2, 32);
      try {
        const P = lift_x2((0, utils_js_1.bytesToNumberBE)(pub));
        const r = (0, utils_js_1.bytesToNumberBE)(sig.subarray(0, 32));
        if (!fe(r))
          return false;
        const s = (0, utils_js_1.bytesToNumberBE)(sig.subarray(32, 64));
        if (!ge(s))
          return false;
        const e = challenge2(numTo32b2(r), pointToBytes2(P), m);
        const R = GmulAdd2(P, s, modN2(-e));
        if (!R || !R.hasEvenY() || R.toAffine().x !== r)
          return false;
        return true;
      } catch (error) {
        return false;
      }
    }
    exports2.schnorr = (() => ({
      getPublicKey: schnorrGetPublicKey2,
      sign: schnorrSign2,
      verify: schnorrVerify2,
      utils: {
        randomPrivateKey: exports2.secp256k1.utils.randomPrivateKey,
        lift_x: lift_x2,
        pointToBytes: pointToBytes2,
        numberToBytesBE: utils_js_1.numberToBytesBE,
        bytesToNumberBE: utils_js_1.bytesToNumberBE,
        taggedHash: taggedHash2,
        mod: modular_js_1.mod
      }
    }))();
    var isoMap2 = (() => (0, hash_to_curve_js_1.isogenyMap)(Fp, [
      // xNum
      [
        "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7",
        "0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581",
        "0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262",
        "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c"
      ],
      // xDen
      [
        "0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b",
        "0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14",
        "0x0000000000000000000000000000000000000000000000000000000000000001"
        // LAST 1
      ],
      // yNum
      [
        "0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c",
        "0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3",
        "0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931",
        "0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84"
      ],
      // yDen
      [
        "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b",
        "0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573",
        "0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f",
        "0x0000000000000000000000000000000000000000000000000000000000000001"
        // LAST 1
      ]
    ].map((i) => i.map((j) => BigInt(j)))))();
    var mapSWU2 = (() => (0, weierstrass_js_1.mapToCurveSimpleSWU)(Fp, {
      A: BigInt("0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533"),
      B: BigInt("1771"),
      Z: Fp.create(BigInt("-11"))
    }))();
    var htf = (() => (0, hash_to_curve_js_1.createHasher)(exports2.secp256k1.ProjectivePoint, (scalars) => {
      const { x, y } = mapSWU2(Fp.create(scalars[0]));
      return isoMap2(x, y);
    }, {
      DST: "secp256k1_XMD:SHA-256_SSWU_RO_",
      encodeDST: "secp256k1_XMD:SHA-256_SSWU_NU_",
      p: Fp.ORDER,
      m: 1,
      k: 128,
      expand: "xmd",
      hash: sha256_1.sha256
    }))();
    exports2.hashToCurve = (() => htf.hashToCurve)();
    exports2.encodeToCurve = (() => htf.encodeToCurve)();
  }
});

// node_modules/ethers/lib.commonjs/constants/addresses.js
var require_addresses = __commonJS({
  "node_modules/ethers/lib.commonjs/constants/addresses.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ZeroAddress = void 0;
    exports2.ZeroAddress = "0x0000000000000000000000000000000000000000";
  }
});

// node_modules/ethers/lib.commonjs/constants/hashes.js
var require_hashes = __commonJS({
  "node_modules/ethers/lib.commonjs/constants/hashes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ZeroHash = void 0;
    exports2.ZeroHash = "0x0000000000000000000000000000000000000000000000000000000000000000";
  }
});

// node_modules/ethers/lib.commonjs/constants/numbers.js
var require_numbers = __commonJS({
  "node_modules/ethers/lib.commonjs/constants/numbers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MaxInt256 = exports2.MinInt256 = exports2.MaxUint256 = exports2.WeiPerEther = exports2.N = void 0;
    exports2.N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
    exports2.WeiPerEther = BigInt("1000000000000000000");
    exports2.MaxUint256 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    exports2.MinInt256 = BigInt("0x8000000000000000000000000000000000000000000000000000000000000000") * BigInt(-1);
    exports2.MaxInt256 = BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
  }
});

// node_modules/ethers/lib.commonjs/constants/strings.js
var require_strings = __commonJS({
  "node_modules/ethers/lib.commonjs/constants/strings.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MessagePrefix = exports2.EtherSymbol = void 0;
    exports2.EtherSymbol = "Ξ";
    exports2.MessagePrefix = "Ethereum Signed Message:\n";
  }
});

// node_modules/ethers/lib.commonjs/constants/index.js
var require_constants2 = __commonJS({
  "node_modules/ethers/lib.commonjs/constants/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MessagePrefix = exports2.EtherSymbol = exports2.MaxInt256 = exports2.MinInt256 = exports2.MaxUint256 = exports2.WeiPerEther = exports2.N = exports2.ZeroHash = exports2.ZeroAddress = void 0;
    var addresses_js_1 = require_addresses();
    Object.defineProperty(exports2, "ZeroAddress", { enumerable: true, get: function() {
      return addresses_js_1.ZeroAddress;
    } });
    var hashes_js_1 = require_hashes();
    Object.defineProperty(exports2, "ZeroHash", { enumerable: true, get: function() {
      return hashes_js_1.ZeroHash;
    } });
    var numbers_js_1 = require_numbers();
    Object.defineProperty(exports2, "N", { enumerable: true, get: function() {
      return numbers_js_1.N;
    } });
    Object.defineProperty(exports2, "WeiPerEther", { enumerable: true, get: function() {
      return numbers_js_1.WeiPerEther;
    } });
    Object.defineProperty(exports2, "MaxUint256", { enumerable: true, get: function() {
      return numbers_js_1.MaxUint256;
    } });
    Object.defineProperty(exports2, "MinInt256", { enumerable: true, get: function() {
      return numbers_js_1.MinInt256;
    } });
    Object.defineProperty(exports2, "MaxInt256", { enumerable: true, get: function() {
      return numbers_js_1.MaxInt256;
    } });
    var strings_js_1 = require_strings();
    Object.defineProperty(exports2, "EtherSymbol", { enumerable: true, get: function() {
      return strings_js_1.EtherSymbol;
    } });
    Object.defineProperty(exports2, "MessagePrefix", { enumerable: true, get: function() {
      return strings_js_1.MessagePrefix;
    } });
  }
});

// node_modules/ethers/lib.commonjs/crypto/signature.js
var require_signature3 = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/signature.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Signature = void 0;
    var index_js_1 = require_constants2();
    var index_js_2 = require_utils11();
    var BN_0 = BigInt(0);
    var BN_1 = BigInt(1);
    var BN_2 = BigInt(2);
    var BN_27 = BigInt(27);
    var BN_28 = BigInt(28);
    var BN_35 = BigInt(35);
    var _guard = {};
    function toUint256(value) {
      return (0, index_js_2.zeroPadValue)((0, index_js_2.toBeArray)(value), 32);
    }
    var _r, _s, _v, _networkV;
    var _Signature = class _Signature {
      /**
       *  @private
       */
      constructor(guard, r, s, v) {
        __privateAdd(this, _r);
        __privateAdd(this, _s);
        __privateAdd(this, _v);
        __privateAdd(this, _networkV);
        (0, index_js_2.assertPrivate)(guard, _guard, "Signature");
        __privateSet(this, _r, r);
        __privateSet(this, _s, s);
        __privateSet(this, _v, v);
        __privateSet(this, _networkV, null);
      }
      /**
       *  The ``r`` value for a signautre.
       *
       *  This represents the ``x`` coordinate of a "reference" or
       *  challenge point, from which the ``y`` can be computed.
       */
      get r() {
        return __privateGet(this, _r);
      }
      set r(value) {
        (0, index_js_2.assertArgument)((0, index_js_2.dataLength)(value) === 32, "invalid r", "value", value);
        __privateSet(this, _r, (0, index_js_2.hexlify)(value));
      }
      /**
       *  The ``s`` value for a signature.
       */
      get s() {
        return __privateGet(this, _s);
      }
      set s(_value) {
        (0, index_js_2.assertArgument)((0, index_js_2.dataLength)(_value) === 32, "invalid s", "value", _value);
        const value = (0, index_js_2.hexlify)(_value);
        (0, index_js_2.assertArgument)(parseInt(value.substring(0, 3)) < 8, "non-canonical s", "value", value);
        __privateSet(this, _s, value);
      }
      /**
       *  The ``v`` value for a signature.
       *
       *  Since a given ``x`` value for ``r`` has two possible values for
       *  its correspondin ``y``, the ``v`` indicates which of the two ``y``
       *  values to use.
       *
       *  It is normalized to the values ``27`` or ``28`` for legacy
       *  purposes.
       */
      get v() {
        return __privateGet(this, _v);
      }
      set v(value) {
        const v = (0, index_js_2.getNumber)(value, "value");
        (0, index_js_2.assertArgument)(v === 27 || v === 28, "invalid v", "v", value);
        __privateSet(this, _v, v);
      }
      /**
       *  The EIP-155 ``v`` for legacy transactions. For non-legacy
       *  transactions, this value is ``null``.
       */
      get networkV() {
        return __privateGet(this, _networkV);
      }
      /**
       *  The chain ID for EIP-155 legacy transactions. For non-legacy
       *  transactions, this value is ``null``.
       */
      get legacyChainId() {
        const v = this.networkV;
        if (v == null) {
          return null;
        }
        return _Signature.getChainId(v);
      }
      /**
       *  The ``yParity`` for the signature.
       *
       *  See ``v`` for more details on how this value is used.
       */
      get yParity() {
        return this.v === 27 ? 0 : 1;
      }
      /**
       *  The [[link-eip-2098]] compact representation of the ``yParity``
       *  and ``s`` compacted into a single ``bytes32``.
       */
      get yParityAndS() {
        const yParityAndS = (0, index_js_2.getBytes)(this.s);
        if (this.yParity) {
          yParityAndS[0] |= 128;
        }
        return (0, index_js_2.hexlify)(yParityAndS);
      }
      /**
       *  The [[link-eip-2098]] compact representation.
       */
      get compactSerialized() {
        return (0, index_js_2.concat)([this.r, this.yParityAndS]);
      }
      /**
       *  The serialized representation.
       */
      get serialized() {
        return (0, index_js_2.concat)([this.r, this.s, this.yParity ? "0x1c" : "0x1b"]);
      }
      [Symbol.for("nodejs.util.inspect.custom")]() {
        return `Signature { r: "${this.r}", s: "${this.s}", yParity: ${this.yParity}, networkV: ${this.networkV} }`;
      }
      /**
       *  Returns a new identical [[Signature]].
       */
      clone() {
        const clone = new _Signature(_guard, this.r, this.s, this.v);
        if (this.networkV) {
          __privateSet(clone, _networkV, this.networkV);
        }
        return clone;
      }
      /**
       *  Returns a representation that is compatible with ``JSON.stringify``.
       */
      toJSON() {
        const networkV = this.networkV;
        return {
          _type: "signature",
          networkV: networkV != null ? networkV.toString() : null,
          r: this.r,
          s: this.s,
          v: this.v
        };
      }
      /**
       *  Compute the chain ID from the ``v`` in a legacy EIP-155 transactions.
       *
       *  @example:
       *    Signature.getChainId(45)
       *    //_result:
       *
       *    Signature.getChainId(46)
       *    //_result:
       */
      static getChainId(v) {
        const bv = (0, index_js_2.getBigInt)(v, "v");
        if (bv == BN_27 || bv == BN_28) {
          return BN_0;
        }
        (0, index_js_2.assertArgument)(bv >= BN_35, "invalid EIP-155 v", "v", v);
        return (bv - BN_35) / BN_2;
      }
      /**
       *  Compute the ``v`` for a chain ID for a legacy EIP-155 transactions.
       *
       *  Legacy transactions which use [[link-eip-155]] hijack the ``v``
       *  property to include the chain ID.
       *
       *  @example:
       *    Signature.getChainIdV(5, 27)
       *    //_result:
       *
       *    Signature.getChainIdV(5, 28)
       *    //_result:
       *
       */
      static getChainIdV(chainId, v) {
        return (0, index_js_2.getBigInt)(chainId) * BN_2 + BigInt(35 + v - 27);
      }
      /**
       *  Compute the normalized legacy transaction ``v`` from a ``yParirty``,
       *  a legacy transaction ``v`` or a legacy [[link-eip-155]] transaction.
       *
       *  @example:
       *    // The values 0 and 1 imply v is actually yParity
       *    Signature.getNormalizedV(0)
       *    //_result:
       *
       *    // Legacy non-EIP-1559 transaction (i.e. 27 or 28)
       *    Signature.getNormalizedV(27)
       *    //_result:
       *
       *    // Legacy EIP-155 transaction (i.e. >= 35)
       *    Signature.getNormalizedV(46)
       *    //_result:
       *
       *    // Invalid values throw
       *    Signature.getNormalizedV(5)
       *    //_error:
       */
      static getNormalizedV(v) {
        const bv = (0, index_js_2.getBigInt)(v);
        if (bv === BN_0 || bv === BN_27) {
          return 27;
        }
        if (bv === BN_1 || bv === BN_28) {
          return 28;
        }
        (0, index_js_2.assertArgument)(bv >= BN_35, "invalid v", "v", v);
        return bv & BN_1 ? 27 : 28;
      }
      /**
       *  Creates a new [[Signature]].
       *
       *  If no %%sig%% is provided, a new [[Signature]] is created
       *  with default values.
       *
       *  If %%sig%% is a string, it is parsed.
       */
      static from(sig) {
        function assertError(check, message) {
          (0, index_js_2.assertArgument)(check, message, "signature", sig);
        }
        ;
        if (sig == null) {
          return new _Signature(_guard, index_js_1.ZeroHash, index_js_1.ZeroHash, 27);
        }
        if (typeof sig === "string") {
          const bytes = (0, index_js_2.getBytes)(sig, "signature");
          if (bytes.length === 64) {
            const r2 = (0, index_js_2.hexlify)(bytes.slice(0, 32));
            const s2 = bytes.slice(32, 64);
            const v2 = s2[0] & 128 ? 28 : 27;
            s2[0] &= 127;
            return new _Signature(_guard, r2, (0, index_js_2.hexlify)(s2), v2);
          }
          if (bytes.length === 65) {
            const r2 = (0, index_js_2.hexlify)(bytes.slice(0, 32));
            const s2 = bytes.slice(32, 64);
            assertError((s2[0] & 128) === 0, "non-canonical s");
            const v2 = _Signature.getNormalizedV(bytes[64]);
            return new _Signature(_guard, r2, (0, index_js_2.hexlify)(s2), v2);
          }
          assertError(false, "invalid raw signature length");
        }
        if (sig instanceof _Signature) {
          return sig.clone();
        }
        const _r2 = sig.r;
        assertError(_r2 != null, "missing r");
        const r = toUint256(_r2);
        const s = function(s2, yParityAndS) {
          if (s2 != null) {
            return toUint256(s2);
          }
          if (yParityAndS != null) {
            assertError((0, index_js_2.isHexString)(yParityAndS, 32), "invalid yParityAndS");
            const bytes = (0, index_js_2.getBytes)(yParityAndS);
            bytes[0] &= 127;
            return (0, index_js_2.hexlify)(bytes);
          }
          assertError(false, "missing s");
        }(sig.s, sig.yParityAndS);
        assertError(((0, index_js_2.getBytes)(s)[0] & 128) == 0, "non-canonical s");
        const { networkV, v } = function(_v2, yParityAndS, yParity) {
          if (_v2 != null) {
            const v2 = (0, index_js_2.getBigInt)(_v2);
            return {
              networkV: v2 >= BN_35 ? v2 : void 0,
              v: _Signature.getNormalizedV(v2)
            };
          }
          if (yParityAndS != null) {
            assertError((0, index_js_2.isHexString)(yParityAndS, 32), "invalid yParityAndS");
            return { v: (0, index_js_2.getBytes)(yParityAndS)[0] & 128 ? 28 : 27 };
          }
          if (yParity != null) {
            switch ((0, index_js_2.getNumber)(yParity, "sig.yParity")) {
              case 0:
                return { v: 27 };
              case 1:
                return { v: 28 };
            }
            assertError(false, "invalid yParity");
          }
          assertError(false, "missing v");
        }(sig.v, sig.yParityAndS, sig.yParity);
        const result = new _Signature(_guard, r, s, v);
        if (networkV) {
          __privateSet(result, _networkV, networkV);
        }
        assertError(sig.yParity == null || (0, index_js_2.getNumber)(sig.yParity, "sig.yParity") === result.yParity, "yParity mismatch");
        assertError(sig.yParityAndS == null || sig.yParityAndS === result.yParityAndS, "yParityAndS mismatch");
        return result;
      }
    };
    _r = new WeakMap();
    _s = new WeakMap();
    _v = new WeakMap();
    _networkV = new WeakMap();
    var Signature = _Signature;
    exports2.Signature = Signature;
  }
});

// node_modules/ethers/lib.commonjs/crypto/signing-key.js
var require_signing_key = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/signing-key.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SigningKey = void 0;
    var secp256k1_1 = require_secp256k1();
    var index_js_1 = require_utils11();
    var signature_js_1 = require_signature3();
    var _privateKey;
    var _SigningKey = class _SigningKey {
      /**
       *  Creates a new **SigningKey** for %%privateKey%%.
       */
      constructor(privateKey) {
        __privateAdd(this, _privateKey);
        (0, index_js_1.assertArgument)((0, index_js_1.dataLength)(privateKey) === 32, "invalid private key", "privateKey", "[REDACTED]");
        __privateSet(this, _privateKey, (0, index_js_1.hexlify)(privateKey));
      }
      /**
       *  The private key.
       */
      get privateKey() {
        return __privateGet(this, _privateKey);
      }
      /**
       *  The uncompressed public key.
       *
       * This will always begin with the prefix ``0x04`` and be 132
       * characters long (the ``0x`` prefix and 130 hexadecimal nibbles).
       */
      get publicKey() {
        return _SigningKey.computePublicKey(__privateGet(this, _privateKey));
      }
      /**
       *  The compressed public key.
       *
       *  This will always begin with either the prefix ``0x02`` or ``0x03``
       *  and be 68 characters long (the ``0x`` prefix and 33 hexadecimal
       *  nibbles)
       */
      get compressedPublicKey() {
        return _SigningKey.computePublicKey(__privateGet(this, _privateKey), true);
      }
      /**
       *  Return the signature of the signed %%digest%%.
       */
      sign(digest) {
        (0, index_js_1.assertArgument)((0, index_js_1.dataLength)(digest) === 32, "invalid digest length", "digest", digest);
        const sig = secp256k1_1.secp256k1.sign((0, index_js_1.getBytesCopy)(digest), (0, index_js_1.getBytesCopy)(__privateGet(this, _privateKey)), {
          lowS: true
        });
        return signature_js_1.Signature.from({
          r: (0, index_js_1.toBeHex)(sig.r, 32),
          s: (0, index_js_1.toBeHex)(sig.s, 32),
          v: sig.recovery ? 28 : 27
        });
      }
      /**
       *  Returns the [[link-wiki-ecdh]] shared secret between this
       *  private key and the %%other%% key.
       *
       *  The %%other%% key may be any type of key, a raw public key,
       *  a compressed/uncompressed pubic key or aprivate key.
       *
       *  Best practice is usually to use a cryptographic hash on the
       *  returned value before using it as a symetric secret.
       *
       *  @example:
       *    sign1 = new SigningKey(id("some-secret-1"))
       *    sign2 = new SigningKey(id("some-secret-2"))
       *
       *    // Notice that privA.computeSharedSecret(pubB)...
       *    sign1.computeSharedSecret(sign2.publicKey)
       *    //_result:
       *
       *    // ...is equal to privB.computeSharedSecret(pubA).
       *    sign2.computeSharedSecret(sign1.publicKey)
       *    //_result:
       */
      computeSharedSecret(other) {
        const pubKey = _SigningKey.computePublicKey(other);
        return (0, index_js_1.hexlify)(secp256k1_1.secp256k1.getSharedSecret((0, index_js_1.getBytesCopy)(__privateGet(this, _privateKey)), (0, index_js_1.getBytes)(pubKey), false));
      }
      /**
       *  Compute the public key for %%key%%, optionally %%compressed%%.
       *
       *  The %%key%% may be any type of key, a raw public key, a
       *  compressed/uncompressed public key or private key.
       *
       *  @example:
       *    sign = new SigningKey(id("some-secret"));
       *
       *    // Compute the uncompressed public key for a private key
       *    SigningKey.computePublicKey(sign.privateKey)
       *    //_result:
       *
       *    // Compute the compressed public key for a private key
       *    SigningKey.computePublicKey(sign.privateKey, true)
       *    //_result:
       *
       *    // Compute the uncompressed public key
       *    SigningKey.computePublicKey(sign.publicKey, false);
       *    //_result:
       *
       *    // Compute the Compressed a public key
       *    SigningKey.computePublicKey(sign.publicKey, true);
       *    //_result:
       */
      static computePublicKey(key, compressed) {
        let bytes = (0, index_js_1.getBytes)(key, "key");
        if (bytes.length === 32) {
          const pubKey = secp256k1_1.secp256k1.getPublicKey(bytes, !!compressed);
          return (0, index_js_1.hexlify)(pubKey);
        }
        if (bytes.length === 64) {
          const pub = new Uint8Array(65);
          pub[0] = 4;
          pub.set(bytes, 1);
          bytes = pub;
        }
        const point = secp256k1_1.secp256k1.ProjectivePoint.fromHex(bytes);
        return (0, index_js_1.hexlify)(point.toRawBytes(compressed));
      }
      /**
       *  Returns the public key for the private key which produced the
       *  %%signature%% for the given %%digest%%.
       *
       *  @example:
       *    key = new SigningKey(id("some-secret"))
       *    digest = id("hello world")
       *    sig = key.sign(digest)
       *
       *    // Notice the signer public key...
       *    key.publicKey
       *    //_result:
       *
       *    // ...is equal to the recovered public key
       *    SigningKey.recoverPublicKey(digest, sig)
       *    //_result:
       *
       */
      static recoverPublicKey(digest, signature2) {
        (0, index_js_1.assertArgument)((0, index_js_1.dataLength)(digest) === 32, "invalid digest length", "digest", digest);
        const sig = signature_js_1.Signature.from(signature2);
        let secpSig = secp256k1_1.secp256k1.Signature.fromCompact((0, index_js_1.getBytesCopy)((0, index_js_1.concat)([sig.r, sig.s])));
        secpSig = secpSig.addRecoveryBit(sig.yParity);
        const pubKey = secpSig.recoverPublicKey((0, index_js_1.getBytesCopy)(digest));
        (0, index_js_1.assertArgument)(pubKey != null, "invalid signautre for digest", "signature", signature2);
        return "0x" + pubKey.toHex(false);
      }
      /**
       *  Returns the point resulting from adding the ellipic curve points
       *  %%p0%% and %%p1%%.
       *
       *  This is not a common function most developers should require, but
       *  can be useful for certain privacy-specific techniques.
       *
       *  For example, it is used by [[HDNodeWallet]] to compute child
       *  addresses from parent public keys and chain codes.
       */
      static addPoints(p0, p1, compressed) {
        const pub0 = secp256k1_1.secp256k1.ProjectivePoint.fromHex(_SigningKey.computePublicKey(p0).substring(2));
        const pub1 = secp256k1_1.secp256k1.ProjectivePoint.fromHex(_SigningKey.computePublicKey(p1).substring(2));
        return "0x" + pub0.add(pub1).toHex(!!compressed);
      }
    };
    _privateKey = new WeakMap();
    var SigningKey = _SigningKey;
    exports2.SigningKey = SigningKey;
  }
});

// node_modules/ethers/lib.commonjs/crypto/index.js
var require_crypto4 = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.lock = exports2.Signature = exports2.SigningKey = exports2.scryptSync = exports2.scrypt = exports2.pbkdf2 = exports2.sha512 = exports2.sha256 = exports2.ripemd160 = exports2.keccak256 = exports2.randomBytes = exports2.computeHmac = void 0;
    var hmac_js_1 = require_hmac4();
    Object.defineProperty(exports2, "computeHmac", { enumerable: true, get: function() {
      return hmac_js_1.computeHmac;
    } });
    var keccak_js_1 = require_keccak();
    Object.defineProperty(exports2, "keccak256", { enumerable: true, get: function() {
      return keccak_js_1.keccak256;
    } });
    var ripemd160_js_1 = require_ripemd1603();
    Object.defineProperty(exports2, "ripemd160", { enumerable: true, get: function() {
      return ripemd160_js_1.ripemd160;
    } });
    var pbkdf2_js_1 = require_pbkdf24();
    Object.defineProperty(exports2, "pbkdf2", { enumerable: true, get: function() {
      return pbkdf2_js_1.pbkdf2;
    } });
    var random_js_1 = require_random();
    Object.defineProperty(exports2, "randomBytes", { enumerable: true, get: function() {
      return random_js_1.randomBytes;
    } });
    var scrypt_js_1 = require_scrypt2();
    Object.defineProperty(exports2, "scrypt", { enumerable: true, get: function() {
      return scrypt_js_1.scrypt;
    } });
    Object.defineProperty(exports2, "scryptSync", { enumerable: true, get: function() {
      return scrypt_js_1.scryptSync;
    } });
    var sha2_js_1 = require_sha23();
    Object.defineProperty(exports2, "sha256", { enumerable: true, get: function() {
      return sha2_js_1.sha256;
    } });
    Object.defineProperty(exports2, "sha512", { enumerable: true, get: function() {
      return sha2_js_1.sha512;
    } });
    var signing_key_js_1 = require_signing_key();
    Object.defineProperty(exports2, "SigningKey", { enumerable: true, get: function() {
      return signing_key_js_1.SigningKey;
    } });
    var signature_js_1 = require_signature3();
    Object.defineProperty(exports2, "Signature", { enumerable: true, get: function() {
      return signature_js_1.Signature;
    } });
    function lock() {
      hmac_js_1.computeHmac.lock();
      keccak_js_1.keccak256.lock();
      pbkdf2_js_1.pbkdf2.lock();
      random_js_1.randomBytes.lock();
      ripemd160_js_1.ripemd160.lock();
      scrypt_js_1.scrypt.lock();
      scrypt_js_1.scryptSync.lock();
      sha2_js_1.sha256.lock();
      sha2_js_1.sha512.lock();
      random_js_1.randomBytes.lock();
    }
    exports2.lock = lock;
  }
});

// node_modules/ethers/lib.commonjs/address/address.js
var require_address2 = __commonJS({
  "node_modules/ethers/lib.commonjs/address/address.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getIcapAddress = exports2.getAddress = void 0;
    var index_js_1 = require_crypto4();
    var index_js_2 = require_utils11();
    var BN_0 = BigInt(0);
    var BN_36 = BigInt(36);
    function getChecksumAddress(address) {
      address = address.toLowerCase();
      const chars = address.substring(2).split("");
      const expanded = new Uint8Array(40);
      for (let i = 0; i < 40; i++) {
        expanded[i] = chars[i].charCodeAt(0);
      }
      const hashed = (0, index_js_2.getBytes)((0, index_js_1.keccak256)(expanded));
      for (let i = 0; i < 40; i += 2) {
        if (hashed[i >> 1] >> 4 >= 8) {
          chars[i] = chars[i].toUpperCase();
        }
        if ((hashed[i >> 1] & 15) >= 8) {
          chars[i + 1] = chars[i + 1].toUpperCase();
        }
      }
      return "0x" + chars.join("");
    }
    var ibanLookup = {};
    for (let i = 0; i < 10; i++) {
      ibanLookup[String(i)] = String(i);
    }
    for (let i = 0; i < 26; i++) {
      ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
    }
    var safeDigits = 15;
    function ibanChecksum(address) {
      address = address.toUpperCase();
      address = address.substring(4) + address.substring(0, 2) + "00";
      let expanded = address.split("").map((c) => {
        return ibanLookup[c];
      }).join("");
      while (expanded.length >= safeDigits) {
        let block = expanded.substring(0, safeDigits);
        expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
      }
      let checksum = String(98 - parseInt(expanded, 10) % 97);
      while (checksum.length < 2) {
        checksum = "0" + checksum;
      }
      return checksum;
    }
    var Base36 = function() {
      ;
      const result = {};
      for (let i = 0; i < 36; i++) {
        const key = "0123456789abcdefghijklmnopqrstuvwxyz"[i];
        result[key] = BigInt(i);
      }
      return result;
    }();
    function fromBase36(value) {
      value = value.toLowerCase();
      let result = BN_0;
      for (let i = 0; i < value.length; i++) {
        result = result * BN_36 + Base36[value[i]];
      }
      return result;
    }
    function getAddress(address) {
      (0, index_js_2.assertArgument)(typeof address === "string", "invalid address", "address", address);
      if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
        if (!address.startsWith("0x")) {
          address = "0x" + address;
        }
        const result = getChecksumAddress(address);
        (0, index_js_2.assertArgument)(!address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) || result === address, "bad address checksum", "address", address);
        return result;
      }
      if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
        (0, index_js_2.assertArgument)(address.substring(2, 4) === ibanChecksum(address), "bad icap checksum", "address", address);
        let result = fromBase36(address.substring(4)).toString(16);
        while (result.length < 40) {
          result = "0" + result;
        }
        return getChecksumAddress("0x" + result);
      }
      (0, index_js_2.assertArgument)(false, "invalid address", "address", address);
    }
    exports2.getAddress = getAddress;
    function getIcapAddress(address) {
      let base36 = BigInt(getAddress(address)).toString(36).toUpperCase();
      while (base36.length < 30) {
        base36 = "0" + base36;
      }
      return "XE" + ibanChecksum("XE00" + base36) + base36;
    }
    exports2.getIcapAddress = getIcapAddress;
  }
});

// node_modules/ethers/lib.commonjs/address/contract-address.js
var require_contract_address = __commonJS({
  "node_modules/ethers/lib.commonjs/address/contract-address.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getCreate2Address = exports2.getCreateAddress = void 0;
    var index_js_1 = require_crypto4();
    var index_js_2 = require_utils11();
    var address_js_1 = require_address2();
    function getCreateAddress(tx) {
      const from = (0, address_js_1.getAddress)(tx.from);
      const nonce = (0, index_js_2.getBigInt)(tx.nonce, "tx.nonce");
      let nonceHex = nonce.toString(16);
      if (nonceHex === "0") {
        nonceHex = "0x";
      } else if (nonceHex.length % 2) {
        nonceHex = "0x0" + nonceHex;
      } else {
        nonceHex = "0x" + nonceHex;
      }
      return (0, address_js_1.getAddress)((0, index_js_2.dataSlice)((0, index_js_1.keccak256)((0, index_js_2.encodeRlp)([from, nonceHex])), 12));
    }
    exports2.getCreateAddress = getCreateAddress;
    function getCreate2Address(_from, _salt, _initCodeHash) {
      const from = (0, address_js_1.getAddress)(_from);
      const salt = (0, index_js_2.getBytes)(_salt, "salt");
      const initCodeHash = (0, index_js_2.getBytes)(_initCodeHash, "initCodeHash");
      (0, index_js_2.assertArgument)(salt.length === 32, "salt must be 32 bytes", "salt", _salt);
      (0, index_js_2.assertArgument)(initCodeHash.length === 32, "initCodeHash must be 32 bytes", "initCodeHash", _initCodeHash);
      return (0, address_js_1.getAddress)((0, index_js_2.dataSlice)((0, index_js_1.keccak256)((0, index_js_2.concat)(["0xff", from, salt, initCodeHash])), 12));
    }
    exports2.getCreate2Address = getCreate2Address;
  }
});

// node_modules/ethers/lib.commonjs/address/checks.js
var require_checks = __commonJS({
  "node_modules/ethers/lib.commonjs/address/checks.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveAddress = exports2.isAddress = exports2.isAddressable = void 0;
    var index_js_1 = require_utils11();
    var address_js_1 = require_address2();
    function isAddressable(value) {
      return value && typeof value.getAddress === "function";
    }
    exports2.isAddressable = isAddressable;
    function isAddress(value) {
      try {
        (0, address_js_1.getAddress)(value);
        return true;
      } catch (error) {
      }
      return false;
    }
    exports2.isAddress = isAddress;
    async function checkAddress(target, promise) {
      const result = await promise;
      if (result == null || result === "0x0000000000000000000000000000000000000000") {
        (0, index_js_1.assert)(typeof target !== "string", "unconfigured name", "UNCONFIGURED_NAME", { value: target });
        (0, index_js_1.assertArgument)(false, "invalid AddressLike value; did not resolve to a value address", "target", target);
      }
      return (0, address_js_1.getAddress)(result);
    }
    function resolveAddress(target, resolver) {
      if (typeof target === "string") {
        if (target.match(/^0x[0-9a-f]{40}$/i)) {
          return (0, address_js_1.getAddress)(target);
        }
        (0, index_js_1.assert)(resolver != null, "ENS resolution requires a provider", "UNSUPPORTED_OPERATION", { operation: "resolveName" });
        return checkAddress(target, resolver.resolveName(target));
      } else if (isAddressable(target)) {
        return checkAddress(target, target.getAddress());
      } else if (target && typeof target.then === "function") {
        return checkAddress(target, target);
      }
      (0, index_js_1.assertArgument)(false, "unsupported addressable value", "target", target);
    }
    exports2.resolveAddress = resolveAddress;
  }
});

// node_modules/ethers/lib.commonjs/address/index.js
var require_address3 = __commonJS({
  "node_modules/ethers/lib.commonjs/address/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveAddress = exports2.isAddress = exports2.isAddressable = exports2.getCreate2Address = exports2.getCreateAddress = exports2.getIcapAddress = exports2.getAddress = void 0;
    var address_js_1 = require_address2();
    Object.defineProperty(exports2, "getAddress", { enumerable: true, get: function() {
      return address_js_1.getAddress;
    } });
    Object.defineProperty(exports2, "getIcapAddress", { enumerable: true, get: function() {
      return address_js_1.getIcapAddress;
    } });
    var contract_address_js_1 = require_contract_address();
    Object.defineProperty(exports2, "getCreateAddress", { enumerable: true, get: function() {
      return contract_address_js_1.getCreateAddress;
    } });
    Object.defineProperty(exports2, "getCreate2Address", { enumerable: true, get: function() {
      return contract_address_js_1.getCreate2Address;
    } });
    var checks_js_1 = require_checks();
    Object.defineProperty(exports2, "isAddressable", { enumerable: true, get: function() {
      return checks_js_1.isAddressable;
    } });
    Object.defineProperty(exports2, "isAddress", { enumerable: true, get: function() {
      return checks_js_1.isAddress;
    } });
    Object.defineProperty(exports2, "resolveAddress", { enumerable: true, get: function() {
      return checks_js_1.resolveAddress;
    } });
  }
});

// node_modules/ethers/lib.commonjs/abi/typed.js
var require_typed = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/typed.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Typed = void 0;
    var index_js_1 = require_utils11();
    var _gaurd = {};
    function n(value, width) {
      let signed = false;
      if (width < 0) {
        signed = true;
        width *= -1;
      }
      return new Typed(_gaurd, `${signed ? "" : "u"}int${width}`, value, { signed, width });
    }
    function b(value, size) {
      return new Typed(_gaurd, `bytes${size ? size : ""}`, value, { size });
    }
    var _typedSymbol = Symbol.for("_ethers_typed");
    var _options;
    var _Typed = class _Typed {
      /**
       *  @_ignore:
       */
      constructor(gaurd, type2, value, options) {
        /**
         *  The type, as a Solidity-compatible type.
         */
        __publicField(this, "type");
        /**
         *  The actual value.
         */
        __publicField(this, "value");
        __privateAdd(this, _options);
        /**
         *  @_ignore:
         */
        __publicField(this, "_typedSymbol");
        if (options == null) {
          options = null;
        }
        (0, index_js_1.assertPrivate)(_gaurd, gaurd, "Typed");
        (0, index_js_1.defineProperties)(this, { _typedSymbol, type: type2, value });
        __privateSet(this, _options, options);
        this.format();
      }
      /**
       *  Format the type as a Human-Readable type.
       */
      format() {
        if (this.type === "array") {
          throw new Error("");
        } else if (this.type === "dynamicArray") {
          throw new Error("");
        } else if (this.type === "tuple") {
          return `tuple(${this.value.map((v) => v.format()).join(",")})`;
        }
        return this.type;
      }
      /**
       *  The default value returned by this type.
       */
      defaultValue() {
        return 0;
      }
      /**
       *  The minimum value for numeric types.
       */
      minValue() {
        return 0;
      }
      /**
       *  The maximum value for numeric types.
       */
      maxValue() {
        return 0;
      }
      /**
       *  Returns ``true`` and provides a type guard is this is a [[TypedBigInt]].
       */
      isBigInt() {
        return !!this.type.match(/^u?int[0-9]+$/);
      }
      /**
       *  Returns ``true`` and provides a type guard is this is a [[TypedData]].
       */
      isData() {
        return this.type.startsWith("bytes");
      }
      /**
       *  Returns ``true`` and provides a type guard is this is a [[TypedString]].
       */
      isString() {
        return this.type === "string";
      }
      /**
       *  Returns the tuple name, if this is a tuple. Throws otherwise.
       */
      get tupleName() {
        if (this.type !== "tuple") {
          throw TypeError("not a tuple");
        }
        return __privateGet(this, _options);
      }
      // Returns the length of this type as an array
      // - `null` indicates the length is unforced, it could be dynamic
      // - `-1` indicates the length is dynamic
      // - any other value indicates it is a static array and is its length
      /**
       *  Returns the length of the array type or ``-1`` if it is dynamic.
       *
       *  Throws if the type is not an array.
       */
      get arrayLength() {
        if (this.type !== "array") {
          throw TypeError("not an array");
        }
        if (__privateGet(this, _options) === true) {
          return -1;
        }
        if (__privateGet(this, _options) === false) {
          return this.value.length;
        }
        return null;
      }
      /**
       *  Returns a new **Typed** of %%type%% with the %%value%%.
       */
      static from(type2, value) {
        return new _Typed(_gaurd, type2, value);
      }
      /**
       *  Return a new ``uint8`` type for %%v%%.
       */
      static uint8(v) {
        return n(v, 8);
      }
      /**
       *  Return a new ``uint16`` type for %%v%%.
       */
      static uint16(v) {
        return n(v, 16);
      }
      /**
       *  Return a new ``uint24`` type for %%v%%.
       */
      static uint24(v) {
        return n(v, 24);
      }
      /**
       *  Return a new ``uint32`` type for %%v%%.
       */
      static uint32(v) {
        return n(v, 32);
      }
      /**
       *  Return a new ``uint40`` type for %%v%%.
       */
      static uint40(v) {
        return n(v, 40);
      }
      /**
       *  Return a new ``uint48`` type for %%v%%.
       */
      static uint48(v) {
        return n(v, 48);
      }
      /**
       *  Return a new ``uint56`` type for %%v%%.
       */
      static uint56(v) {
        return n(v, 56);
      }
      /**
       *  Return a new ``uint64`` type for %%v%%.
       */
      static uint64(v) {
        return n(v, 64);
      }
      /**
       *  Return a new ``uint72`` type for %%v%%.
       */
      static uint72(v) {
        return n(v, 72);
      }
      /**
       *  Return a new ``uint80`` type for %%v%%.
       */
      static uint80(v) {
        return n(v, 80);
      }
      /**
       *  Return a new ``uint88`` type for %%v%%.
       */
      static uint88(v) {
        return n(v, 88);
      }
      /**
       *  Return a new ``uint96`` type for %%v%%.
       */
      static uint96(v) {
        return n(v, 96);
      }
      /**
       *  Return a new ``uint104`` type for %%v%%.
       */
      static uint104(v) {
        return n(v, 104);
      }
      /**
       *  Return a new ``uint112`` type for %%v%%.
       */
      static uint112(v) {
        return n(v, 112);
      }
      /**
       *  Return a new ``uint120`` type for %%v%%.
       */
      static uint120(v) {
        return n(v, 120);
      }
      /**
       *  Return a new ``uint128`` type for %%v%%.
       */
      static uint128(v) {
        return n(v, 128);
      }
      /**
       *  Return a new ``uint136`` type for %%v%%.
       */
      static uint136(v) {
        return n(v, 136);
      }
      /**
       *  Return a new ``uint144`` type for %%v%%.
       */
      static uint144(v) {
        return n(v, 144);
      }
      /**
       *  Return a new ``uint152`` type for %%v%%.
       */
      static uint152(v) {
        return n(v, 152);
      }
      /**
       *  Return a new ``uint160`` type for %%v%%.
       */
      static uint160(v) {
        return n(v, 160);
      }
      /**
       *  Return a new ``uint168`` type for %%v%%.
       */
      static uint168(v) {
        return n(v, 168);
      }
      /**
       *  Return a new ``uint176`` type for %%v%%.
       */
      static uint176(v) {
        return n(v, 176);
      }
      /**
       *  Return a new ``uint184`` type for %%v%%.
       */
      static uint184(v) {
        return n(v, 184);
      }
      /**
       *  Return a new ``uint192`` type for %%v%%.
       */
      static uint192(v) {
        return n(v, 192);
      }
      /**
       *  Return a new ``uint200`` type for %%v%%.
       */
      static uint200(v) {
        return n(v, 200);
      }
      /**
       *  Return a new ``uint208`` type for %%v%%.
       */
      static uint208(v) {
        return n(v, 208);
      }
      /**
       *  Return a new ``uint216`` type for %%v%%.
       */
      static uint216(v) {
        return n(v, 216);
      }
      /**
       *  Return a new ``uint224`` type for %%v%%.
       */
      static uint224(v) {
        return n(v, 224);
      }
      /**
       *  Return a new ``uint232`` type for %%v%%.
       */
      static uint232(v) {
        return n(v, 232);
      }
      /**
       *  Return a new ``uint240`` type for %%v%%.
       */
      static uint240(v) {
        return n(v, 240);
      }
      /**
       *  Return a new ``uint248`` type for %%v%%.
       */
      static uint248(v) {
        return n(v, 248);
      }
      /**
       *  Return a new ``uint256`` type for %%v%%.
       */
      static uint256(v) {
        return n(v, 256);
      }
      /**
       *  Return a new ``uint256`` type for %%v%%.
       */
      static uint(v) {
        return n(v, 256);
      }
      /**
       *  Return a new ``int8`` type for %%v%%.
       */
      static int8(v) {
        return n(v, -8);
      }
      /**
       *  Return a new ``int16`` type for %%v%%.
       */
      static int16(v) {
        return n(v, -16);
      }
      /**
       *  Return a new ``int24`` type for %%v%%.
       */
      static int24(v) {
        return n(v, -24);
      }
      /**
       *  Return a new ``int32`` type for %%v%%.
       */
      static int32(v) {
        return n(v, -32);
      }
      /**
       *  Return a new ``int40`` type for %%v%%.
       */
      static int40(v) {
        return n(v, -40);
      }
      /**
       *  Return a new ``int48`` type for %%v%%.
       */
      static int48(v) {
        return n(v, -48);
      }
      /**
       *  Return a new ``int56`` type for %%v%%.
       */
      static int56(v) {
        return n(v, -56);
      }
      /**
       *  Return a new ``int64`` type for %%v%%.
       */
      static int64(v) {
        return n(v, -64);
      }
      /**
       *  Return a new ``int72`` type for %%v%%.
       */
      static int72(v) {
        return n(v, -72);
      }
      /**
       *  Return a new ``int80`` type for %%v%%.
       */
      static int80(v) {
        return n(v, -80);
      }
      /**
       *  Return a new ``int88`` type for %%v%%.
       */
      static int88(v) {
        return n(v, -88);
      }
      /**
       *  Return a new ``int96`` type for %%v%%.
       */
      static int96(v) {
        return n(v, -96);
      }
      /**
       *  Return a new ``int104`` type for %%v%%.
       */
      static int104(v) {
        return n(v, -104);
      }
      /**
       *  Return a new ``int112`` type for %%v%%.
       */
      static int112(v) {
        return n(v, -112);
      }
      /**
       *  Return a new ``int120`` type for %%v%%.
       */
      static int120(v) {
        return n(v, -120);
      }
      /**
       *  Return a new ``int128`` type for %%v%%.
       */
      static int128(v) {
        return n(v, -128);
      }
      /**
       *  Return a new ``int136`` type for %%v%%.
       */
      static int136(v) {
        return n(v, -136);
      }
      /**
       *  Return a new ``int144`` type for %%v%%.
       */
      static int144(v) {
        return n(v, -144);
      }
      /**
       *  Return a new ``int52`` type for %%v%%.
       */
      static int152(v) {
        return n(v, -152);
      }
      /**
       *  Return a new ``int160`` type for %%v%%.
       */
      static int160(v) {
        return n(v, -160);
      }
      /**
       *  Return a new ``int168`` type for %%v%%.
       */
      static int168(v) {
        return n(v, -168);
      }
      /**
       *  Return a new ``int176`` type for %%v%%.
       */
      static int176(v) {
        return n(v, -176);
      }
      /**
       *  Return a new ``int184`` type for %%v%%.
       */
      static int184(v) {
        return n(v, -184);
      }
      /**
       *  Return a new ``int92`` type for %%v%%.
       */
      static int192(v) {
        return n(v, -192);
      }
      /**
       *  Return a new ``int200`` type for %%v%%.
       */
      static int200(v) {
        return n(v, -200);
      }
      /**
       *  Return a new ``int208`` type for %%v%%.
       */
      static int208(v) {
        return n(v, -208);
      }
      /**
       *  Return a new ``int216`` type for %%v%%.
       */
      static int216(v) {
        return n(v, -216);
      }
      /**
       *  Return a new ``int224`` type for %%v%%.
       */
      static int224(v) {
        return n(v, -224);
      }
      /**
       *  Return a new ``int232`` type for %%v%%.
       */
      static int232(v) {
        return n(v, -232);
      }
      /**
       *  Return a new ``int240`` type for %%v%%.
       */
      static int240(v) {
        return n(v, -240);
      }
      /**
       *  Return a new ``int248`` type for %%v%%.
       */
      static int248(v) {
        return n(v, -248);
      }
      /**
       *  Return a new ``int256`` type for %%v%%.
       */
      static int256(v) {
        return n(v, -256);
      }
      /**
       *  Return a new ``int256`` type for %%v%%.
       */
      static int(v) {
        return n(v, -256);
      }
      /**
       *  Return a new ``bytes1`` type for %%v%%.
       */
      static bytes1(v) {
        return b(v, 1);
      }
      /**
       *  Return a new ``bytes2`` type for %%v%%.
       */
      static bytes2(v) {
        return b(v, 2);
      }
      /**
       *  Return a new ``bytes3`` type for %%v%%.
       */
      static bytes3(v) {
        return b(v, 3);
      }
      /**
       *  Return a new ``bytes4`` type for %%v%%.
       */
      static bytes4(v) {
        return b(v, 4);
      }
      /**
       *  Return a new ``bytes5`` type for %%v%%.
       */
      static bytes5(v) {
        return b(v, 5);
      }
      /**
       *  Return a new ``bytes6`` type for %%v%%.
       */
      static bytes6(v) {
        return b(v, 6);
      }
      /**
       *  Return a new ``bytes7`` type for %%v%%.
       */
      static bytes7(v) {
        return b(v, 7);
      }
      /**
       *  Return a new ``bytes8`` type for %%v%%.
       */
      static bytes8(v) {
        return b(v, 8);
      }
      /**
       *  Return a new ``bytes9`` type for %%v%%.
       */
      static bytes9(v) {
        return b(v, 9);
      }
      /**
       *  Return a new ``bytes10`` type for %%v%%.
       */
      static bytes10(v) {
        return b(v, 10);
      }
      /**
       *  Return a new ``bytes11`` type for %%v%%.
       */
      static bytes11(v) {
        return b(v, 11);
      }
      /**
       *  Return a new ``bytes12`` type for %%v%%.
       */
      static bytes12(v) {
        return b(v, 12);
      }
      /**
       *  Return a new ``bytes13`` type for %%v%%.
       */
      static bytes13(v) {
        return b(v, 13);
      }
      /**
       *  Return a new ``bytes14`` type for %%v%%.
       */
      static bytes14(v) {
        return b(v, 14);
      }
      /**
       *  Return a new ``bytes15`` type for %%v%%.
       */
      static bytes15(v) {
        return b(v, 15);
      }
      /**
       *  Return a new ``bytes16`` type for %%v%%.
       */
      static bytes16(v) {
        return b(v, 16);
      }
      /**
       *  Return a new ``bytes17`` type for %%v%%.
       */
      static bytes17(v) {
        return b(v, 17);
      }
      /**
       *  Return a new ``bytes18`` type for %%v%%.
       */
      static bytes18(v) {
        return b(v, 18);
      }
      /**
       *  Return a new ``bytes19`` type for %%v%%.
       */
      static bytes19(v) {
        return b(v, 19);
      }
      /**
       *  Return a new ``bytes20`` type for %%v%%.
       */
      static bytes20(v) {
        return b(v, 20);
      }
      /**
       *  Return a new ``bytes21`` type for %%v%%.
       */
      static bytes21(v) {
        return b(v, 21);
      }
      /**
       *  Return a new ``bytes22`` type for %%v%%.
       */
      static bytes22(v) {
        return b(v, 22);
      }
      /**
       *  Return a new ``bytes23`` type for %%v%%.
       */
      static bytes23(v) {
        return b(v, 23);
      }
      /**
       *  Return a new ``bytes24`` type for %%v%%.
       */
      static bytes24(v) {
        return b(v, 24);
      }
      /**
       *  Return a new ``bytes25`` type for %%v%%.
       */
      static bytes25(v) {
        return b(v, 25);
      }
      /**
       *  Return a new ``bytes26`` type for %%v%%.
       */
      static bytes26(v) {
        return b(v, 26);
      }
      /**
       *  Return a new ``bytes27`` type for %%v%%.
       */
      static bytes27(v) {
        return b(v, 27);
      }
      /**
       *  Return a new ``bytes28`` type for %%v%%.
       */
      static bytes28(v) {
        return b(v, 28);
      }
      /**
       *  Return a new ``bytes29`` type for %%v%%.
       */
      static bytes29(v) {
        return b(v, 29);
      }
      /**
       *  Return a new ``bytes30`` type for %%v%%.
       */
      static bytes30(v) {
        return b(v, 30);
      }
      /**
       *  Return a new ``bytes31`` type for %%v%%.
       */
      static bytes31(v) {
        return b(v, 31);
      }
      /**
       *  Return a new ``bytes32`` type for %%v%%.
       */
      static bytes32(v) {
        return b(v, 32);
      }
      /**
       *  Return a new ``address`` type for %%v%%.
       */
      static address(v) {
        return new _Typed(_gaurd, "address", v);
      }
      /**
       *  Return a new ``bool`` type for %%v%%.
       */
      static bool(v) {
        return new _Typed(_gaurd, "bool", !!v);
      }
      /**
       *  Return a new ``bytes`` type for %%v%%.
       */
      static bytes(v) {
        return new _Typed(_gaurd, "bytes", v);
      }
      /**
       *  Return a new ``string`` type for %%v%%.
       */
      static string(v) {
        return new _Typed(_gaurd, "string", v);
      }
      /**
       *  Return a new ``array`` type for %%v%%, allowing %%dynamic%% length.
       */
      static array(v, dynamic) {
        throw new Error("not implemented yet");
        return new _Typed(_gaurd, "array", v, dynamic);
      }
      /**
       *  Return a new ``tuple`` type for %%v%%, with the optional %%name%%.
       */
      static tuple(v, name) {
        throw new Error("not implemented yet");
        return new _Typed(_gaurd, "tuple", v, name);
      }
      /**
       *  Return a new ``uint8`` type for %%v%%.
       */
      static overrides(v) {
        return new _Typed(_gaurd, "overrides", Object.assign({}, v));
      }
      /**
       *  Returns true only if %%value%% is a [[Typed]] instance.
       */
      static isTyped(value) {
        return value && typeof value === "object" && "_typedSymbol" in value && value._typedSymbol === _typedSymbol;
      }
      /**
       *  If the value is a [[Typed]] instance, validates the underlying value
       *  and returns it, otherwise returns value directly.
       *
       *  This is useful for functions that with to accept either a [[Typed]]
       *  object or values.
       */
      static dereference(value, type2) {
        if (_Typed.isTyped(value)) {
          if (value.type !== type2) {
            throw new Error(`invalid type: expecetd ${type2}, got ${value.type}`);
          }
          return value.value;
        }
        return value;
      }
    };
    _options = new WeakMap();
    var Typed = _Typed;
    exports2.Typed = Typed;
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/address.js
var require_address4 = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/address.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AddressCoder = void 0;
    var index_js_1 = require_address3();
    var maths_js_1 = require_maths();
    var typed_js_1 = require_typed();
    var abstract_coder_js_1 = require_abstract_coder();
    var AddressCoder = class extends abstract_coder_js_1.Coder {
      constructor(localName) {
        super("address", "address", localName, false);
      }
      defaultValue() {
        return "0x0000000000000000000000000000000000000000";
      }
      encode(writer, _value) {
        let value = typed_js_1.Typed.dereference(_value, "string");
        try {
          value = (0, index_js_1.getAddress)(value);
        } catch (error) {
          return this._throwError(error.message, _value);
        }
        return writer.writeValue(value);
      }
      decode(reader) {
        return (0, index_js_1.getAddress)((0, maths_js_1.toBeHex)(reader.readValue(), 20));
      }
    };
    exports2.AddressCoder = AddressCoder;
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/anonymous.js
var require_anonymous = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/anonymous.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AnonymousCoder = void 0;
    var abstract_coder_js_1 = require_abstract_coder();
    var AnonymousCoder = class extends abstract_coder_js_1.Coder {
      constructor(coder) {
        super(coder.name, coder.type, "_", coder.dynamic);
        __publicField(this, "coder");
        this.coder = coder;
      }
      defaultValue() {
        return this.coder.defaultValue();
      }
      encode(writer, value) {
        return this.coder.encode(writer, value);
      }
      decode(reader) {
        return this.coder.decode(reader);
      }
    };
    exports2.AnonymousCoder = AnonymousCoder;
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/array.js
var require_array = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/array.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ArrayCoder = exports2.unpack = exports2.pack = void 0;
    var index_js_1 = require_utils11();
    var typed_js_1 = require_typed();
    var abstract_coder_js_1 = require_abstract_coder();
    var anonymous_js_1 = require_anonymous();
    function pack(writer, coders, values) {
      let arrayValues = [];
      if (Array.isArray(values)) {
        arrayValues = values;
      } else if (values && typeof values === "object") {
        let unique = {};
        arrayValues = coders.map((coder) => {
          const name = coder.localName;
          (0, index_js_1.assert)(name, "cannot encode object for signature with missing names", "INVALID_ARGUMENT", { argument: "values", info: { coder }, value: values });
          (0, index_js_1.assert)(!unique[name], "cannot encode object for signature with duplicate names", "INVALID_ARGUMENT", { argument: "values", info: { coder }, value: values });
          unique[name] = true;
          return values[name];
        });
      } else {
        (0, index_js_1.assertArgument)(false, "invalid tuple value", "tuple", values);
      }
      (0, index_js_1.assertArgument)(coders.length === arrayValues.length, "types/value length mismatch", "tuple", values);
      let staticWriter = new abstract_coder_js_1.Writer();
      let dynamicWriter = new abstract_coder_js_1.Writer();
      let updateFuncs = [];
      coders.forEach((coder, index) => {
        let value = arrayValues[index];
        if (coder.dynamic) {
          let dynamicOffset = dynamicWriter.length;
          coder.encode(dynamicWriter, value);
          let updateFunc = staticWriter.writeUpdatableValue();
          updateFuncs.push((baseOffset) => {
            updateFunc(baseOffset + dynamicOffset);
          });
        } else {
          coder.encode(staticWriter, value);
        }
      });
      updateFuncs.forEach((func) => {
        func(staticWriter.length);
      });
      let length = writer.appendWriter(staticWriter);
      length += writer.appendWriter(dynamicWriter);
      return length;
    }
    exports2.pack = pack;
    function unpack(reader, coders) {
      let values = [];
      let keys = [];
      let baseReader = reader.subReader(0);
      coders.forEach((coder) => {
        let value = null;
        if (coder.dynamic) {
          let offset2 = reader.readIndex();
          let offsetReader = baseReader.subReader(offset2);
          try {
            value = coder.decode(offsetReader);
          } catch (error) {
            if ((0, index_js_1.isError)(error, "BUFFER_OVERRUN")) {
              throw error;
            }
            value = error;
            value.baseType = coder.name;
            value.name = coder.localName;
            value.type = coder.type;
          }
        } else {
          try {
            value = coder.decode(reader);
          } catch (error) {
            if ((0, index_js_1.isError)(error, "BUFFER_OVERRUN")) {
              throw error;
            }
            value = error;
            value.baseType = coder.name;
            value.name = coder.localName;
            value.type = coder.type;
          }
        }
        if (value == void 0) {
          throw new Error("investigate");
        }
        values.push(value);
        keys.push(coder.localName || null);
      });
      return abstract_coder_js_1.Result.fromItems(values, keys);
    }
    exports2.unpack = unpack;
    var ArrayCoder = class extends abstract_coder_js_1.Coder {
      constructor(coder, length, localName) {
        const type2 = coder.type + "[" + (length >= 0 ? length : "") + "]";
        const dynamic = length === -1 || coder.dynamic;
        super("array", type2, localName, dynamic);
        __publicField(this, "coder");
        __publicField(this, "length");
        (0, index_js_1.defineProperties)(this, { coder, length });
      }
      defaultValue() {
        const defaultChild = this.coder.defaultValue();
        const result = [];
        for (let i = 0; i < this.length; i++) {
          result.push(defaultChild);
        }
        return result;
      }
      encode(writer, _value) {
        const value = typed_js_1.Typed.dereference(_value, "array");
        if (!Array.isArray(value)) {
          this._throwError("expected array value", value);
        }
        let count = this.length;
        if (count === -1) {
          count = value.length;
          writer.writeValue(value.length);
        }
        (0, index_js_1.assertArgumentCount)(value.length, count, "coder array" + (this.localName ? " " + this.localName : ""));
        let coders = [];
        for (let i = 0; i < value.length; i++) {
          coders.push(this.coder);
        }
        return pack(writer, coders, value);
      }
      decode(reader) {
        let count = this.length;
        if (count === -1) {
          count = reader.readIndex();
          (0, index_js_1.assert)(count * abstract_coder_js_1.WordSize <= reader.dataLength, "insufficient data length", "BUFFER_OVERRUN", { buffer: reader.bytes, offset: count * abstract_coder_js_1.WordSize, length: reader.dataLength });
        }
        let coders = [];
        for (let i = 0; i < count; i++) {
          coders.push(new anonymous_js_1.AnonymousCoder(this.coder));
        }
        return unpack(reader, coders);
      }
    };
    exports2.ArrayCoder = ArrayCoder;
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/boolean.js
var require_boolean = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/boolean.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BooleanCoder = void 0;
    var typed_js_1 = require_typed();
    var abstract_coder_js_1 = require_abstract_coder();
    var BooleanCoder = class extends abstract_coder_js_1.Coder {
      constructor(localName) {
        super("bool", "bool", localName, false);
      }
      defaultValue() {
        return false;
      }
      encode(writer, _value) {
        const value = typed_js_1.Typed.dereference(_value, "bool");
        return writer.writeValue(value ? 1 : 0);
      }
      decode(reader) {
        return !!reader.readValue();
      }
    };
    exports2.BooleanCoder = BooleanCoder;
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/bytes.js
var require_bytes = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/bytes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BytesCoder = exports2.DynamicBytesCoder = void 0;
    var index_js_1 = require_utils11();
    var abstract_coder_js_1 = require_abstract_coder();
    var DynamicBytesCoder = class extends abstract_coder_js_1.Coder {
      constructor(type2, localName) {
        super(type2, type2, localName, true);
      }
      defaultValue() {
        return "0x";
      }
      encode(writer, value) {
        value = (0, index_js_1.getBytesCopy)(value);
        let length = writer.writeValue(value.length);
        length += writer.writeBytes(value);
        return length;
      }
      decode(reader) {
        return reader.readBytes(reader.readIndex(), true);
      }
    };
    exports2.DynamicBytesCoder = DynamicBytesCoder;
    var BytesCoder = class extends DynamicBytesCoder {
      constructor(localName) {
        super("bytes", localName);
      }
      decode(reader) {
        return (0, index_js_1.hexlify)(super.decode(reader));
      }
    };
    exports2.BytesCoder = BytesCoder;
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/fixed-bytes.js
var require_fixed_bytes = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/fixed-bytes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FixedBytesCoder = void 0;
    var index_js_1 = require_utils11();
    var typed_js_1 = require_typed();
    var abstract_coder_js_1 = require_abstract_coder();
    var FixedBytesCoder = class extends abstract_coder_js_1.Coder {
      constructor(size, localName) {
        let name = "bytes" + String(size);
        super(name, name, localName, false);
        __publicField(this, "size");
        (0, index_js_1.defineProperties)(this, { size }, { size: "number" });
      }
      defaultValue() {
        return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + this.size * 2);
      }
      encode(writer, _value) {
        let data = (0, index_js_1.getBytesCopy)(typed_js_1.Typed.dereference(_value, this.type));
        if (data.length !== this.size) {
          this._throwError("incorrect data length", _value);
        }
        return writer.writeBytes(data);
      }
      decode(reader) {
        return (0, index_js_1.hexlify)(reader.readBytes(this.size));
      }
    };
    exports2.FixedBytesCoder = FixedBytesCoder;
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/null.js
var require_null = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/null.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NullCoder = void 0;
    var abstract_coder_js_1 = require_abstract_coder();
    var Empty = new Uint8Array([]);
    var NullCoder = class extends abstract_coder_js_1.Coder {
      constructor(localName) {
        super("null", "", localName, false);
      }
      defaultValue() {
        return null;
      }
      encode(writer, value) {
        if (value != null) {
          this._throwError("not null", value);
        }
        return writer.writeBytes(Empty);
      }
      decode(reader) {
        reader.readBytes(0);
        return null;
      }
    };
    exports2.NullCoder = NullCoder;
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/number.js
var require_number = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/number.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NumberCoder = void 0;
    var index_js_1 = require_utils11();
    var typed_js_1 = require_typed();
    var abstract_coder_js_1 = require_abstract_coder();
    var BN_0 = BigInt(0);
    var BN_1 = BigInt(1);
    var BN_MAX_UINT256 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    var NumberCoder = class extends abstract_coder_js_1.Coder {
      constructor(size, signed, localName) {
        const name = (signed ? "int" : "uint") + size * 8;
        super(name, name, localName, false);
        __publicField(this, "size");
        __publicField(this, "signed");
        (0, index_js_1.defineProperties)(this, { size, signed }, { size: "number", signed: "boolean" });
      }
      defaultValue() {
        return 0;
      }
      encode(writer, _value) {
        let value = (0, index_js_1.getBigInt)(typed_js_1.Typed.dereference(_value, this.type));
        let maxUintValue = (0, index_js_1.mask)(BN_MAX_UINT256, abstract_coder_js_1.WordSize * 8);
        if (this.signed) {
          let bounds = (0, index_js_1.mask)(maxUintValue, this.size * 8 - 1);
          if (value > bounds || value < -(bounds + BN_1)) {
            this._throwError("value out-of-bounds", _value);
          }
          value = (0, index_js_1.toTwos)(value, 8 * abstract_coder_js_1.WordSize);
        } else if (value < BN_0 || value > (0, index_js_1.mask)(maxUintValue, this.size * 8)) {
          this._throwError("value out-of-bounds", _value);
        }
        return writer.writeValue(value);
      }
      decode(reader) {
        let value = (0, index_js_1.mask)(reader.readValue(), this.size * 8);
        if (this.signed) {
          value = (0, index_js_1.fromTwos)(value, this.size * 8);
        }
        return value;
      }
    };
    exports2.NumberCoder = NumberCoder;
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/string.js
var require_string = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/string.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StringCoder = void 0;
    var utf8_js_1 = require_utf8();
    var typed_js_1 = require_typed();
    var bytes_js_1 = require_bytes();
    var StringCoder = class extends bytes_js_1.DynamicBytesCoder {
      constructor(localName) {
        super("string", localName);
      }
      defaultValue() {
        return "";
      }
      encode(writer, _value) {
        return super.encode(writer, (0, utf8_js_1.toUtf8Bytes)(typed_js_1.Typed.dereference(_value, "string")));
      }
      decode(reader) {
        return (0, utf8_js_1.toUtf8String)(super.decode(reader));
      }
    };
    exports2.StringCoder = StringCoder;
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/tuple.js
var require_tuple = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/tuple.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TupleCoder = void 0;
    var properties_js_1 = require_properties();
    var typed_js_1 = require_typed();
    var abstract_coder_js_1 = require_abstract_coder();
    var array_js_1 = require_array();
    var TupleCoder = class extends abstract_coder_js_1.Coder {
      constructor(coders, localName) {
        let dynamic = false;
        const types = [];
        coders.forEach((coder) => {
          if (coder.dynamic) {
            dynamic = true;
          }
          types.push(coder.type);
        });
        const type2 = "tuple(" + types.join(",") + ")";
        super("tuple", type2, localName, dynamic);
        __publicField(this, "coders");
        (0, properties_js_1.defineProperties)(this, { coders: Object.freeze(coders.slice()) });
      }
      defaultValue() {
        const values = [];
        this.coders.forEach((coder) => {
          values.push(coder.defaultValue());
        });
        const uniqueNames = this.coders.reduce((accum, coder) => {
          const name = coder.localName;
          if (name) {
            if (!accum[name]) {
              accum[name] = 0;
            }
            accum[name]++;
          }
          return accum;
        }, {});
        this.coders.forEach((coder, index) => {
          let name = coder.localName;
          if (!name || uniqueNames[name] !== 1) {
            return;
          }
          if (name === "length") {
            name = "_length";
          }
          if (values[name] != null) {
            return;
          }
          values[name] = values[index];
        });
        return Object.freeze(values);
      }
      encode(writer, _value) {
        const value = typed_js_1.Typed.dereference(_value, "tuple");
        return (0, array_js_1.pack)(writer, this.coders, value);
      }
      decode(reader) {
        return (0, array_js_1.unpack)(reader, this.coders);
      }
    };
    exports2.TupleCoder = TupleCoder;
  }
});

// node_modules/ethers/lib.commonjs/hash/id.js
var require_id = __commonJS({
  "node_modules/ethers/lib.commonjs/hash/id.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.id = void 0;
    var index_js_1 = require_crypto4();
    var index_js_2 = require_utils11();
    function id(value) {
      return (0, index_js_1.keccak256)((0, index_js_2.toUtf8Bytes)(value));
    }
    exports2.id = id;
  }
});

// node_modules/@adraffy/ens-normalize/dist/index.cjs
var require_dist2 = __commonJS({
  "node_modules/@adraffy/ens-normalize/dist/index.cjs"(exports2) {
    "use strict";
    var COMPRESSED$1 = "";
    var FENCED = /* @__PURE__ */ new Map([[8217, "apostrophe"], [8260, "fraction slash"], [12539, "middle dot"]]);
    var NSM_MAX = 4;
    function decode_arithmetic(bytes) {
      let pos = 0;
      function u162() {
        return bytes[pos++] << 8 | bytes[pos++];
      }
      let symbol_count = u162();
      let total = 1;
      let acc = [0, 1];
      for (let i = 1; i < symbol_count; i++) {
        acc.push(total += u162());
      }
      let skip = u162();
      let pos_payload = pos;
      pos += skip;
      let read_width = 0;
      let read_buffer = 0;
      function read_bit() {
        if (read_width == 0) {
          read_buffer = read_buffer << 8 | bytes[pos++];
          read_width = 8;
        }
        return read_buffer >> --read_width & 1;
      }
      const N = 31;
      const FULL = 2 ** N;
      const HALF = FULL >>> 1;
      const QRTR = HALF >> 1;
      const MASK = FULL - 1;
      let register = 0;
      for (let i = 0; i < N; i++) register = register << 1 | read_bit();
      let symbols = [];
      let low = 0;
      let range = FULL;
      while (true) {
        let value = Math.floor(((register - low + 1) * total - 1) / range);
        let start = 0;
        let end = symbol_count;
        while (end - start > 1) {
          let mid = start + end >>> 1;
          if (value < acc[mid]) {
            end = mid;
          } else {
            start = mid;
          }
        }
        if (start == 0) break;
        symbols.push(start);
        let a = low + Math.floor(range * acc[start] / total);
        let b = low + Math.floor(range * acc[start + 1] / total) - 1;
        while (((a ^ b) & HALF) == 0) {
          register = register << 1 & MASK | read_bit();
          a = a << 1 & MASK;
          b = b << 1 & MASK | 1;
        }
        while (a & ~b & QRTR) {
          register = register & HALF | register << 1 & MASK >>> 1 | read_bit();
          a = a << 1 ^ HALF;
          b = (b ^ HALF) << 1 | HALF | 1;
        }
        low = a;
        range = 1 + b - a;
      }
      let offset2 = symbol_count - 4;
      return symbols.map((x) => {
        switch (x - offset2) {
          case 3:
            return offset2 + 65792 + (bytes[pos_payload++] << 16 | bytes[pos_payload++] << 8 | bytes[pos_payload++]);
          case 2:
            return offset2 + 256 + (bytes[pos_payload++] << 8 | bytes[pos_payload++]);
          case 1:
            return offset2 + bytes[pos_payload++];
          default:
            return x - 1;
        }
      });
    }
    function read_payload(v) {
      let pos = 0;
      return () => v[pos++];
    }
    function read_compressed_payload(s) {
      return read_payload(decode_arithmetic(unsafe_atob(s)));
    }
    function unsafe_atob(s) {
      let lookup = [];
      [..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"].forEach((c, i) => lookup[c.charCodeAt(0)] = i);
      let n = s.length;
      let ret = new Uint8Array(6 * n >> 3);
      for (let i = 0, pos = 0, width = 0, carry = 0; i < n; i++) {
        carry = carry << 6 | lookup[s.charCodeAt(i)];
        width += 6;
        if (width >= 8) {
          ret[pos++] = carry >> (width -= 8);
        }
      }
      return ret;
    }
    function signed(i) {
      return i & 1 ? ~i >> 1 : i >> 1;
    }
    function read_deltas(n, next) {
      let v = Array(n);
      for (let i = 0, x = 0; i < n; i++) v[i] = x += signed(next());
      return v;
    }
    function read_sorted(next, prev = 0) {
      let ret = [];
      while (true) {
        let x = next();
        let n = next();
        if (!n) break;
        prev += x;
        for (let i = 0; i < n; i++) {
          ret.push(prev + i);
        }
        prev += n + 1;
      }
      return ret;
    }
    function read_sorted_arrays(next) {
      return read_array_while(() => {
        let v = read_sorted(next);
        if (v.length) return v;
      });
    }
    function read_mapped(next) {
      let ret = [];
      while (true) {
        let w = next();
        if (w == 0) break;
        ret.push(read_linear_table(w, next));
      }
      while (true) {
        let w = next() - 1;
        if (w < 0) break;
        ret.push(read_replacement_table(w, next));
      }
      return ret.flat();
    }
    function read_array_while(next) {
      let v = [];
      while (true) {
        let x = next(v.length);
        if (!x) break;
        v.push(x);
      }
      return v;
    }
    function read_transposed(n, w, next) {
      let m = Array(n).fill().map(() => []);
      for (let i = 0; i < w; i++) {
        read_deltas(n, next).forEach((x, j) => m[j].push(x));
      }
      return m;
    }
    function read_linear_table(w, next) {
      let dx = 1 + next();
      let dy = next();
      let vN = read_array_while(next);
      let m = read_transposed(vN.length, 1 + w, next);
      return m.flatMap((v, i) => {
        let [x, ...ys] = v;
        return Array(vN[i]).fill().map((_, j) => {
          let j_dy = j * dy;
          return [x + j * dx, ys.map((y) => y + j_dy)];
        });
      });
    }
    function read_replacement_table(w, next) {
      let n = 1 + next();
      let m = read_transposed(n, 1 + w, next);
      return m.map((v) => [v[0], v.slice(1)]);
    }
    function read_trie(next) {
      let ret = [];
      let sorted = read_sorted(next);
      expand(decode2([]), []);
      return ret;
      function decode2(Q) {
        let S = next();
        let B = read_array_while(() => {
          let cps = read_sorted(next).map((i) => sorted[i]);
          if (cps.length) return decode2(cps);
        });
        return { S, B, Q };
      }
      function expand({ S, B }, cps, saved) {
        if (S & 4 && saved === cps[cps.length - 1]) return;
        if (S & 2) saved = cps[cps.length - 1];
        if (S & 1) ret.push(cps);
        for (let br of B) {
          for (let cp of br.Q) {
            expand(br, [...cps, cp], saved);
          }
        }
      }
    }
    function hex_cp(cp) {
      return cp.toString(16).toUpperCase().padStart(2, "0");
    }
    function quote_cp(cp) {
      return `{${hex_cp(cp)}}`;
    }
    function explode_cp(s) {
      let cps = [];
      for (let pos = 0, len = s.length; pos < len; ) {
        let cp = s.codePointAt(pos);
        pos += cp < 65536 ? 1 : 2;
        cps.push(cp);
      }
      return cps;
    }
    function str_from_cps(cps) {
      const chunk = 4096;
      let len = cps.length;
      if (len < chunk) return String.fromCodePoint(...cps);
      let buf = [];
      for (let i = 0; i < len; ) {
        buf.push(String.fromCodePoint(...cps.slice(i, i += chunk)));
      }
      return buf.join("");
    }
    function compare_arrays(a, b) {
      let n = a.length;
      let c = n - b.length;
      for (let i = 0; c == 0 && i < n; i++) c = a[i] - b[i];
      return c;
    }
    var COMPRESSED = "AEUDTAHBCFQATQDRADAAcgAgADQAFAAsABQAHwAOACQADQARAAoAFwAHABIACAAPAAUACwAFAAwABAAQAAMABwAEAAoABQAIAAIACgABAAQAFAALAAIACwABAAIAAQAHAAMAAwAEAAsADAAMAAwACgANAA0AAwAKAAkABAAdAAYAZwDSAdsDJgC0CkMB8xhZAqfoC190UGcThgBurwf7PT09Pb09AjgJum8OjDllxHYUKXAPxzq6tABAxgK8ysUvWAgMPT09PT09PSs6LT2HcgWXWwFLoSMEEEl5RFVMKvO0XQ8ExDdJMnIgsj26PTQyy8FfEQ8AY8IPAGcEbwRwBHEEcgRzBHQEdQR2BHcEeAR6BHsEfAR+BIAEgfndBQoBYgULAWIFDAFiBNcE2ATZBRAFEQUvBdALFAsVDPcNBw13DYcOMA4xDjMB4BllHI0B2grbAMDpHLkQ7QHVAPRNQQFnGRUEg0yEB2uaJF8AJpIBpob5AERSMAKNoAXqaQLUBMCzEiACnwRZEkkVsS7tANAsBG0RuAQLEPABv9HICTUBXigPZwRBApMDOwAamhtaABqEAY8KvKx3LQ4ArAB8UhwEBAVSagD8AEFZADkBIadVj2UMUgx5Il4ANQC9AxIB1BlbEPMAs30CGxlXAhwZKQIECBc6EbsCoxngzv7UzRQA8M0BawL6ZwkN7wABAD33OQRcsgLJCjMCjqUChtw/km+NAsXPAoP2BT84PwURAK0RAvptb6cApQS/OMMey5HJS84UdxpxTPkCogVFITaTOwERAK5pAvkNBOVyA7q3BKlOJSALAgUIBRcEdASpBXqzABXFSWZOawLCOqw//AolCZdvv3dSBkEQGyelEPcMMwG1ATsN7UvYBPEGOwTJH30ZGQ/NlZwIpS3dDO0m4y6hgFoj9SqDBe1L9DzdC01RaA9ZC2UJ4zpjgU4DIQENIosK3Q05CG0Q8wrJaw3lEUUHOQPVSZoApQcBCxEdNRW1JhBirAsJOXcG+xr2C48mrxMpevwF0xohBk0BKRr/AM8u54WwWjFcHE9fBgMLJSPHFKhQIA0lQLd4SBobBxUlqQKRQ3BKh1E2HpMh9jw9DWYuE1F8B/U8BRlPC4E8nkarRQ4R0j6NPUgiSUwsBDV/LC8niwnPD4UMuXxyAVkJIQmxDHETMREXN8UIOQcZLZckJxUIIUaVYJoE958D8xPRAwsFPwlBBxMDtRwtEy4VKQUNgSTXAvM21S6zAo9WgAEXBcsPJR/fEFBH4A7pCJsCZQODJesALRUhABcimwhDYwBfj9hTBS7LCMdqbCN0A2cU52ERcweRDlcHpxwzFb8c4XDIXguGCCijrwlbAXUJmQFfBOMICTVbjKAgQWdTi1gYmyBhQT9d/AIxDGUVn0S9h3gCiw9rEhsBNQFzBzkNAQJ3Ee0RaxCVCOuGBDW1M/g6JQRPIYMgEQonA09szgsnJvkM+GkBoxJiAww0PXfuZ6tgtiQX/QcZMsVBYCHxC5JPzQycGsEYQlQuGeQHvwPzGvMn6kFXBf8DowMTOk0z7gS9C2kIiwk/AEkOoxcH1xhqCnGM0AExiwG3mQNXkYMCb48GNwcLAGcLhwV55QAdAqcIowAFAM8DVwA5Aq0HnQAZAIVBAT0DJy8BIeUCjwOTCDHLAZUvAfMpBBvDDBUA9zduSgLDsQKAamaiBd1YAo4CSTUBTSUEBU5HUQOvceEA2wBLBhPfRwEVq0rLGuNDAd9vKwDHAPsABTUHBUEBzQHzbQC3AV8LMQmis7UBTekpAIMAFWsB1wKJAN0ANQB/8QFTAE0FWfkF0wJPSQERMRgrV2EBuwMfATMBDQB5BsuNpckHHwRtB9MCEBsV4QLvLge1AQMi3xPNQsUCvd5VoWACZIECYkJbTa9bNyACofcCaJgCZgkCn4Q4GwsCZjsCZiYEbgR/A38TA36SOQY5dxc5gjojIwJsHQIyNjgKAm3HAm2u74ozZ0UrAWcA3gDhAEoFB5gMjQD+C8IADbUCdy8CdqI/AnlLQwJ4uh1c20WuRtcCfD8CesgCfQkCfPAFWQUgSABIfWMkAoFtAoAAAoAFAn+uSVhKWxUXSswC0QEC0MxLJwOITwOH5kTFkTIC8qFdAwMDrkvOTC0lA89NTE2vAos/AorYwRsHHUNnBbcCjjcCjlxAl4ECjtkCjlx4UbRTNQpS1FSFApP7ApMMAOkAHFUeVa9V0AYsGymVhjLheGZFOzkCl58C77JYIagAWSUClo8ClnycAKlZrFoJgU0AOwKWtQKWTlxEXNECmcsCmWRcyl0HGQKcmznCOp0CnBYCn5sCnriKAB0PMSoPAp3xAp6SALU9YTRh7wKe0wKgbgGpAp6fHwKeTqVjyGQnJSsCJ68CJn4CoPsCoEwCot0CocQCpi8Cpc4Cp/8AfQKn8mh8aLEAA0lqHGrRAqzjAqyuAq1nAq0CAlcdAlXcArHh1wMfTmyXArK9DQKy6Bds4G1jbUhfAyXNArZcOz9ukAMpRQK4XgK5RxUCuSp3cDZw4QK9GQK72nCWAzIRAr6IcgIDM3ECvhpzInNPAsPLAsMEc4J0SzVFdOADPKcDPJoDPb8CxXwCxkcCxhCJAshpUQLIRALJTwLJLgJknQLd0nh5YXiueSVL0AMYo2cCAmH0GfOVJHsLXpJeuxECz2sCz2wvS1PS8xOfAMatAs9zASnqA04SfksFAtwnAtuKAtJPA1JcA1NfAQEDVYyAiT8AyxbtYEWCHILTgs6DjQLaxwLZ3oQQhEmnPAOGpQAvA2QOhnFZ+QBVAt9lAt64c3cC4i/tFAHzMCcB9JsB8tKHAuvzAulweQLq+QLq5AD5RwG5Au6JAuuclqqXAwLuPwOF4Jh5cOBxoQLzAwBpA44WmZMC9xMDkW4DkocC95gC+dkC+GaaHJqruzebHgOdgwL++gEbADmfHJ+zAwWNA6ZqA6bZANHFAwZqoYiiBQkDDEkCwAA/AwDhQRdTARHzA2sHl2cFAJMtK7evvdsBiZkUfxEEOQH7KQUhDp0JnwCS/SlXxQL3AZ0AtwW5AG8LbUEuFCaNLgFDAYD8AbUmAHUDDgRtACwCFgyhAAAKAj0CagPdA34EkQEgRQUhfAoABQBEABMANhICdwEABdUDa+8KxQIA9wqfJ7+xt+UBkSFBQgHpFH8RNMCJAAQAGwBaAkUChIsABjpTOpSNbQC4Oo860ACNOME63AClAOgAywE6gTo7Ofw5+Tt2iTpbO56JOm85GAFWATMBbAUvNV01njWtNWY1dTW2NcU1gjWRNdI14TWeNa017jX9NbI1wTYCNhE1xjXVNhY2JzXeNe02LjY9Ni41LSE2OjY9Njw2yTcIBJA8VzY4Nt03IDcPNsogN4k3MAoEsDxnNiQ3GTdsOo03IULUQwdC4EMLHA8PCZsobShRVQYA6X8A6bABFCnXAukBowC9BbcAbwNzBL8MDAMMAQgDAAkKCwsLCQoGBAVVBI/DvwDz9b29kaUCb0QtsRTNLt4eGBcSHAMZFhYZEhYEARAEBUEcQRxBHEEcQRxBHEEaQRxBHEFCSTxBPElISUhBNkM2QTYbNklISVmBVIgBFLWZAu0BhQCjBcEAbykBvwGJAaQcEZ0ePCklMAAhMvAIMAL54gC7Bm8EescjzQMpARQpKgDUABavAj626xQAJP0A3etzuf4NNRA7efy2Z9NQrCnC0OSyANz5BBIbJ5IFDR6miIavYS6tprjjmuKebxm5C74Q225X1pkaYYPb6f1DK4k3xMEBb9S2WMjEibTNWhsRJIA+vwNVEiXTE5iXs/wezV66oFLfp9NZGYW+Gk19J2+bCT6Ye2w6LDYdgzKMUabk595eLBCXANz9HUpWbATq9vqXVx9XDg+Pc9Xp4+bsS005SVM/BJBM4687WUuf+Uj9dEi8aDNaPxtpbDxcG1THTImUMZq4UCaaNYpsVqraNyKLJXDYsFZ/5jl7bLRtO88t7P3xZaAxhb5OdPMXqsSkp1WCieG8jXm1U99+blvLlXzPCS+M93VnJCiK+09LfaSaBAVBomyDgJua8dfUzR7ga34IvR2Nvj+A9heJ6lsl1KG4NkI1032Cnff1m1wof2B9oHJK4bi6JkEdSqeNeiuo6QoZZincoc73/TH9SXF8sCE7XyuYyW8WSgbGFCjPV0ihLKhdPs08Tx82fYAkLLc4I2wdl4apY7GU5lHRFzRWJep7Ww3wbeA3qmd59/86P4xuNaqDpygXt6M85glSBHOCGgJDnt+pN9bK7HApMguX6+06RZNjzVmcZJ+wcUrJ9//bpRNxNuKpNl9uFds+S9tdx7LaM5ZkIrPj6nIU9mnbFtVbs9s/uLgl8MVczAwet+iOEzzBlYW7RCMgE6gyNLeq6+1tIx4dpgZnd0DksJS5f+JNDpwwcPNXaaVspq1fbQajOrJgK0ofKtJ1Ne90L6VO4MOl5S886p7u6xo7OLjG8TGL+HU1JXGJgppg4nNbNJ5nlzSpuPYy21JUEcUA94PoFiZfjZue+QnyQ80ekOuZVkxx4g+cvhJfHgNl4hy1/a6+RKcKlar/J29y//EztlbVPHVUeQ1zX86eQVAjR/M3dA9w4W8LfaXp4EgM85wOWasli837PzVMOnsLzR+k3o75/lRPAJSE1xAKQzEi5v10ke+VBvRt1cwQRMd+U5mLCTGVd6XiZtgBG5cDi0w22GKcVNvHiu5LQbZEDVtz0onn7k5+heuKXVsZtSzilkLRAUmjMXEMB3J9YC50XBxPiz53SC+EhnPl9WsKCv92SM/OFFIMJZYfl0WW8tIO3UxYcwdMAj7FSmgrsZ2aAZO03BOhP1bNNZItyXYQFTpC3SG1VuPDqH9GkiCDmE+JwxyIVSO5siDErAOpEXFgjy6PQtOVDj+s6e1r8heWVvmZnTciuf4EiNZzCAd7SOMhXERIOlsHIMG399i9aLTy3m2hRLZjJVDNLS53iGIK11dPqQt0zBDyg6qc7YqkDm2M5Ve6dCWCaCbTXX2rToaIgz6+zh4lYUi/+6nqcFMAkQJKHYLK0wYk5N9szV6xihDbDDFr45lN1K4aCXBq/FitPSud9gLt5ZVn+ZqGX7cwm2z5EGMgfFpIFyhGGuDPmso6TItTMwny+7uPnLCf4W6goFQFV0oQSsc9VfMmVLcLr6ZetDZbaSFTLqnSO/bIPjA3/zAUoqgGFAEQS4IhuMzEp2I3jJzbzkk/IEmyax+rhZTwd6f+CGtwPixu8IvzACquPWPREu9ZvGkUzpRwvRRuaNN6cr0W1wWits9ICdYJ7ltbgMiSL3sTPeufgNcVqMVWFkCPDH4jG2jA0XcVgQj62Cb29v9f/z/+2KbYvIv/zzjpQAPkliaVDzNrW57TZ/ZOyZD0nlfMmAIBIAGAI0D3k/mdN4xr9v85ZbZbbqfH2jGd5hUqNZWwl5SPfoGmfElmazUIeNL1j/mkF7VNAzTq4jNt8JoQ11NQOcmhprXoxSxfRGJ9LDEOAQ+dmxAQH90iti9e2u/MoeuaGcDTHoC+xsmEeWmxEKefQuIzHbpw5Tc5cEocboAD09oipWQhtTO1wivf/O+DRe2rpl/E9wlrzBorjJsOeG1B/XPW4EaJEFdNlECEZga5ZoGRHXgYouGRuVkm8tDESiEyFNo+3s5M5puSdTyUL2llnINVHEt91XUNW4ewdMgJ4boJfEyt/iY5WXqbA+A2Fkt5Z0lutiWhe9nZIyIUjyXDC3UsaG1t+eNx6z4W/OYoTB7A6x+dNSTOi9AInctbESqm5gvOLww7OWXPrmHwVZasrl4eD113pm+JtT7JVOvnCXqdzzdTRHgJ0PiGTFYW5Gvt9R9LD6Lzfs0v/TZZHSmyVNq7viIHE6DBK7Qp07Iz55EM8SYtQvZf/obBniTWi5C2/ovHfw4VndkE5XYdjOhCMRjDeOEfXeN/CwfGduiUIfsoFeUxXeQXba7c7972XNv8w+dTjjUM0QeNAReW+J014dKAD/McQYXT7c0GQPIkn3Ll6R7gGjuiQoZD0TEeEqQpKoZ15g/0OPQI17QiSv9AUROa/V/TQN3dvLArec3RrsYlvBm1b8LWzltdugsC50lNKYLEp2a+ZZYqPejULRlOJh5zj/LVMyTDvwKhMxxwuDkxJ1QpoNI0OTWLom4Z71SNzI9TV1iXJrIu9Wcnd+MCaAw8o1jSXd94YU/1gnkrC9BUEOtQvEIQ7g0i6h+KL2JKk8Ydl7HruvgWMSAmNe+LshGhV4qnWHhO9/RIPQzY1tHRj2VqOyNsDpK0cww+56AdDC4gsWwY0XxoucIWIqs/GcwnWqlaT0KPr8mbK5U94/301i1WLt4YINTVvCFBrFZbIbY8eycOdeJ2teD5IfPLCRg7jjcFTwlMFNl9zdh/o3E/hHPwj7BWg0MU09pPrBLbrCgm54A6H+I6v27+jL5gkjWg/iYdks9jbfVP5y/n0dlgWEMlKasl7JvFZd56LfybW1eeaVO0gxTfXZwD8G4SI116yx7UKVRgui6Ya1YpixqXeNLc8IxtAwCU5IhwQgn+NqHnRaDv61CxKhOq4pOX7M6pkA+Pmpd4j1vn6ACUALoLLc4vpXci8VidLxzm7qFBe7s+quuJs6ETYmnpgS3LwSZxPIltgBDXz8M1k/W2ySNv2f9/NPhxLGK2D21dkHeSGmenRT3Yqcdl0m/h3OYr8V+lXNYGf8aCCpd4bWjE4QIPj7vUKN4Nrfs7ML6Y2OyS830JCnofg/k7lpFpt4SqZc5HGg1HCOrHvOdC8bP6FGDbE/VV0mX4IakzbdS/op+Kt3G24/8QbBV7y86sGSQ/vZzU8FXs7u6jIvwchsEP2BpIhW3G8uWNwa3HmjfH/ZjhhCWvluAcF+nMf14ClKg5hGgtPLJ98ueNAkc5Hs2WZlk2QHvfreCK1CCGO6nMZVSb99VM/ajr8WHTte9JSmkXq/i/U943HEbdzW6Re/S88dKgg8pGOLlAeNiqrcLkUR3/aClFpMXcOUP3rmETcWSfMXZE3TUOi8i+fqRnTYLflVx/Vb/6GJ7eIRZUA6k3RYR3iFSK9c4iDdNwJuZL2FKz/IK5VimcNWEqdXjSoxSgmF0UPlDoUlNrPcM7ftmA8Y9gKiqKEHuWN+AZRIwtVSxye2Kf8rM3lhJ5XcBXU9n4v0Oy1RU2M+4qM8AQPVwse8ErNSob5oFPWxuqZnVzo1qB/IBxkM3EVUKFUUlO3e51259GgNcJbCmlvrdjtoTW7rChm1wyCKzpCTwozUUEOIcWLneRLgMXh+SjGSFkAllzbGS5HK7LlfCMRNRDSvbQPjcXaenNYxCvu2Qyznz6StuxVj66SgI0T8B6/sfHAJYZaZ78thjOSIFumNWLQbeZixDCCC+v0YBtkxiBB3jefHqZ/dFHU+crbj6OvS1x/JDD7vlm7zOVPwpUC01nhxZuY/63E7g";
    var S0 = 44032;
    var L0 = 4352;
    var V0 = 4449;
    var T0 = 4519;
    var L_COUNT = 19;
    var V_COUNT = 21;
    var T_COUNT = 28;
    var N_COUNT = V_COUNT * T_COUNT;
    var S_COUNT = L_COUNT * N_COUNT;
    var S1 = S0 + S_COUNT;
    var L1 = L0 + L_COUNT;
    var V1 = V0 + V_COUNT;
    var T1 = T0 + T_COUNT;
    function unpack_cc(packed) {
      return packed >> 24 & 255;
    }
    function unpack_cp(packed) {
      return packed & 16777215;
    }
    var SHIFTED_RANK;
    var EXCLUSIONS;
    var DECOMP;
    var RECOMP;
    function init$1() {
      let r = read_compressed_payload(COMPRESSED);
      SHIFTED_RANK = new Map(read_sorted_arrays(r).flatMap((v, i) => v.map((x) => [x, i + 1 << 24])));
      EXCLUSIONS = new Set(read_sorted(r));
      DECOMP = /* @__PURE__ */ new Map();
      RECOMP = /* @__PURE__ */ new Map();
      for (let [cp, cps] of read_mapped(r)) {
        if (!EXCLUSIONS.has(cp) && cps.length == 2) {
          let [a, b] = cps;
          let bucket = RECOMP.get(a);
          if (!bucket) {
            bucket = /* @__PURE__ */ new Map();
            RECOMP.set(a, bucket);
          }
          bucket.set(b, cp);
        }
        DECOMP.set(cp, cps.reverse());
      }
    }
    function is_hangul(cp) {
      return cp >= S0 && cp < S1;
    }
    function compose_pair(a, b) {
      if (a >= L0 && a < L1 && b >= V0 && b < V1) {
        return S0 + (a - L0) * N_COUNT + (b - V0) * T_COUNT;
      } else if (is_hangul(a) && b > T0 && b < T1 && (a - S0) % T_COUNT == 0) {
        return a + (b - T0);
      } else {
        let recomp = RECOMP.get(a);
        if (recomp) {
          recomp = recomp.get(b);
          if (recomp) {
            return recomp;
          }
        }
        return -1;
      }
    }
    function decomposed(cps) {
      if (!SHIFTED_RANK) init$1();
      let ret = [];
      let buf = [];
      let check_order = false;
      function add(cp) {
        let cc = SHIFTED_RANK.get(cp);
        if (cc) {
          check_order = true;
          cp |= cc;
        }
        ret.push(cp);
      }
      for (let cp of cps) {
        while (true) {
          if (cp < 128) {
            ret.push(cp);
          } else if (is_hangul(cp)) {
            let s_index = cp - S0;
            let l_index = s_index / N_COUNT | 0;
            let v_index = s_index % N_COUNT / T_COUNT | 0;
            let t_index = s_index % T_COUNT;
            add(L0 + l_index);
            add(V0 + v_index);
            if (t_index > 0) add(T0 + t_index);
          } else {
            let mapped = DECOMP.get(cp);
            if (mapped) {
              buf.push(...mapped);
            } else {
              add(cp);
            }
          }
          if (!buf.length) break;
          cp = buf.pop();
        }
      }
      if (check_order && ret.length > 1) {
        let prev_cc = unpack_cc(ret[0]);
        for (let i = 1; i < ret.length; i++) {
          let cc = unpack_cc(ret[i]);
          if (cc == 0 || prev_cc <= cc) {
            prev_cc = cc;
            continue;
          }
          let j = i - 1;
          while (true) {
            let tmp = ret[j + 1];
            ret[j + 1] = ret[j];
            ret[j] = tmp;
            if (!j) break;
            prev_cc = unpack_cc(ret[--j]);
            if (prev_cc <= cc) break;
          }
          prev_cc = unpack_cc(ret[i]);
        }
      }
      return ret;
    }
    function composed_from_decomposed(v) {
      let ret = [];
      let stack = [];
      let prev_cp = -1;
      let prev_cc = 0;
      for (let packed of v) {
        let cc = unpack_cc(packed);
        let cp = unpack_cp(packed);
        if (prev_cp == -1) {
          if (cc == 0) {
            prev_cp = cp;
          } else {
            ret.push(cp);
          }
        } else if (prev_cc > 0 && prev_cc >= cc) {
          if (cc == 0) {
            ret.push(prev_cp, ...stack);
            stack.length = 0;
            prev_cp = cp;
          } else {
            stack.push(cp);
          }
          prev_cc = cc;
        } else {
          let composed = compose_pair(prev_cp, cp);
          if (composed >= 0) {
            prev_cp = composed;
          } else if (prev_cc == 0 && cc == 0) {
            ret.push(prev_cp);
            prev_cp = cp;
          } else {
            stack.push(cp);
            prev_cc = cc;
          }
        }
      }
      if (prev_cp >= 0) {
        ret.push(prev_cp, ...stack);
      }
      return ret;
    }
    function nfd(cps) {
      return decomposed(cps).map(unpack_cp);
    }
    function nfc(cps) {
      return composed_from_decomposed(decomposed(cps));
    }
    var HYPHEN = 45;
    var STOP = 46;
    var STOP_CH = ".";
    var FE0F = 65039;
    var UNIQUE_PH = 1;
    var Array_from = (x) => Array.from(x);
    function group_has_cp(g, cp) {
      return g.P.has(cp) || g.Q.has(cp);
    }
    var Emoji = class extends Array {
      get is_emoji() {
        return true;
      }
      // free tagging system
    };
    var MAPPED;
    var IGNORED;
    var CM;
    var NSM;
    var ESCAPE;
    var NFC_CHECK;
    var GROUPS;
    var WHOLE_VALID;
    var WHOLE_MAP;
    var VALID;
    var EMOJI_LIST;
    var EMOJI_ROOT;
    function init() {
      if (MAPPED) return;
      let r = read_compressed_payload(COMPRESSED$1);
      const read_sorted_array = () => read_sorted(r);
      const read_sorted_set = () => new Set(read_sorted_array());
      const set_add_many = (set, v) => v.forEach((x) => set.add(x));
      MAPPED = new Map(read_mapped(r));
      IGNORED = read_sorted_set();
      CM = read_sorted_array();
      NSM = new Set(read_sorted_array().map((i) => CM[i]));
      CM = new Set(CM);
      ESCAPE = read_sorted_set();
      NFC_CHECK = read_sorted_set();
      let chunks = read_sorted_arrays(r);
      let unrestricted = r();
      const read_chunked = () => {
        let set = /* @__PURE__ */ new Set();
        read_sorted_array().forEach((i) => set_add_many(set, chunks[i]));
        set_add_many(set, read_sorted_array());
        return set;
      };
      GROUPS = read_array_while((i) => {
        let N = read_array_while(r).map((x) => x + 96);
        if (N.length) {
          let R = i >= unrestricted;
          N[0] -= 32;
          N = str_from_cps(N);
          if (R) N = `Restricted[${N}]`;
          let P = read_chunked();
          let Q = read_chunked();
          let M = !r();
          return { N, P, Q, M, R };
        }
      });
      WHOLE_VALID = read_sorted_set();
      WHOLE_MAP = /* @__PURE__ */ new Map();
      let wholes = read_sorted_array().concat(Array_from(WHOLE_VALID)).sort((a, b) => a - b);
      wholes.forEach((cp, i) => {
        let d = r();
        let w = wholes[i] = d ? wholes[i - d] : { V: [], M: /* @__PURE__ */ new Map() };
        w.V.push(cp);
        if (!WHOLE_VALID.has(cp)) {
          WHOLE_MAP.set(cp, w);
        }
      });
      for (let { V, M } of new Set(WHOLE_MAP.values())) {
        let recs = [];
        for (let cp of V) {
          let gs = GROUPS.filter((g) => group_has_cp(g, cp));
          let rec = recs.find(({ G }) => gs.some((g) => G.has(g)));
          if (!rec) {
            rec = { G: /* @__PURE__ */ new Set(), V: [] };
            recs.push(rec);
          }
          rec.V.push(cp);
          set_add_many(rec.G, gs);
        }
        let union2 = recs.flatMap((x) => Array_from(x.G));
        for (let { G, V: V2 } of recs) {
          let complement = new Set(union2.filter((g) => !G.has(g)));
          for (let cp of V2) {
            M.set(cp, complement);
          }
        }
      }
      VALID = /* @__PURE__ */ new Set();
      let multi = /* @__PURE__ */ new Set();
      const add_to_union = (cp) => VALID.has(cp) ? multi.add(cp) : VALID.add(cp);
      for (let g of GROUPS) {
        for (let cp of g.P) add_to_union(cp);
        for (let cp of g.Q) add_to_union(cp);
      }
      for (let cp of VALID) {
        if (!WHOLE_MAP.has(cp) && !multi.has(cp)) {
          WHOLE_MAP.set(cp, UNIQUE_PH);
        }
      }
      set_add_many(VALID, nfd(VALID));
      EMOJI_LIST = read_trie(r).map((v) => Emoji.from(v)).sort(compare_arrays);
      EMOJI_ROOT = /* @__PURE__ */ new Map();
      for (let cps of EMOJI_LIST) {
        let prev = [EMOJI_ROOT];
        for (let cp of cps) {
          let next = prev.map((node) => {
            let child = node.get(cp);
            if (!child) {
              child = /* @__PURE__ */ new Map();
              node.set(cp, child);
            }
            return child;
          });
          if (cp === FE0F) {
            prev.push(...next);
          } else {
            prev = next;
          }
        }
        for (let x of prev) {
          x.V = cps;
        }
      }
    }
    function quoted_cp(cp) {
      return (should_escape(cp) ? "" : `${bidi_qq(safe_str_from_cps([cp]))} `) + quote_cp(cp);
    }
    function bidi_qq(s) {
      return `"${s}"‎`;
    }
    function check_label_extension(cps) {
      if (cps.length >= 4 && cps[2] == HYPHEN && cps[3] == HYPHEN) {
        throw new Error(`invalid label extension: "${str_from_cps(cps.slice(0, 4))}"`);
      }
    }
    function check_leading_underscore(cps) {
      const UNDERSCORE = 95;
      for (let i = cps.lastIndexOf(UNDERSCORE); i > 0; ) {
        if (cps[--i] !== UNDERSCORE) {
          throw new Error("underscore allowed only at start");
        }
      }
    }
    function check_fenced(cps) {
      let cp = cps[0];
      let prev = FENCED.get(cp);
      if (prev) throw error_placement(`leading ${prev}`);
      let n = cps.length;
      let last = -1;
      for (let i = 1; i < n; i++) {
        cp = cps[i];
        let match = FENCED.get(cp);
        if (match) {
          if (last == i) throw error_placement(`${prev} + ${match}`);
          last = i + 1;
          prev = match;
        }
      }
      if (last == n) throw error_placement(`trailing ${prev}`);
    }
    function safe_str_from_cps(cps, max = Infinity, quoter = quote_cp) {
      let buf = [];
      if (is_combining_mark(cps[0])) buf.push("◌");
      if (cps.length > max) {
        max >>= 1;
        cps = [...cps.slice(0, max), 8230, ...cps.slice(-max)];
      }
      let prev = 0;
      let n = cps.length;
      for (let i = 0; i < n; i++) {
        let cp = cps[i];
        if (should_escape(cp)) {
          buf.push(str_from_cps(cps.slice(prev, i)));
          buf.push(quoter(cp));
          prev = i + 1;
        }
      }
      buf.push(str_from_cps(cps.slice(prev, n)));
      return buf.join("");
    }
    function is_combining_mark(cp) {
      init();
      return CM.has(cp);
    }
    function should_escape(cp) {
      init();
      return ESCAPE.has(cp);
    }
    function ens_emoji() {
      init();
      return EMOJI_LIST.map((x) => x.slice());
    }
    function ens_normalize_fragment(frag, decompose) {
      init();
      let nf = decompose ? nfd : nfc;
      return frag.split(STOP_CH).map((label) => str_from_cps(tokens_from_str(explode_cp(label), nf, filter_fe0f).flat())).join(STOP_CH);
    }
    function ens_normalize(name) {
      return flatten(split2(name, nfc, filter_fe0f));
    }
    function ens_beautify(name) {
      let labels = split2(name, nfc, (x) => x);
      for (let { type: type2, output, error } of labels) {
        if (error) break;
        if (type2 !== "Greek") array_replace(output, 958, 926);
      }
      return flatten(labels);
    }
    function array_replace(v, a, b) {
      let prev = 0;
      while (true) {
        let next = v.indexOf(a, prev);
        if (next < 0) break;
        v[next] = b;
        prev = next + 1;
      }
    }
    function ens_split(name, preserve_emoji) {
      return split2(name, nfc, preserve_emoji ? (x) => x.slice() : filter_fe0f);
    }
    function split2(name, nf, ef) {
      if (!name) return [];
      init();
      let offset2 = 0;
      return name.split(STOP_CH).map((label) => {
        let input = explode_cp(label);
        let info = {
          input,
          offset: offset2
          // codepoint, not substring!
        };
        offset2 += input.length + 1;
        try {
          let tokens = info.tokens = tokens_from_str(input, nf, ef);
          let token_count = tokens.length;
          let type2;
          if (!token_count) {
            throw new Error(`empty label`);
          }
          let norm = info.output = tokens.flat();
          check_leading_underscore(norm);
          let emoji = info.emoji = token_count > 1 || tokens[0].is_emoji;
          if (!emoji && norm.every((cp) => cp < 128)) {
            check_label_extension(norm);
            type2 = "ASCII";
          } else {
            let chars = tokens.flatMap((x) => x.is_emoji ? [] : x);
            if (!chars.length) {
              type2 = "Emoji";
            } else {
              if (CM.has(norm[0])) throw error_placement("leading combining mark");
              for (let i = 1; i < token_count; i++) {
                let cps = tokens[i];
                if (!cps.is_emoji && CM.has(cps[0])) {
                  throw error_placement(`emoji + combining mark: "${str_from_cps(tokens[i - 1])} + ${safe_str_from_cps([cps[0]])}"`);
                }
              }
              check_fenced(norm);
              let unique = Array_from(new Set(chars));
              let [g] = determine_group(unique);
              check_group(g, chars);
              check_whole(g, unique);
              type2 = g.N;
            }
          }
          info.type = type2;
        } catch (err) {
          info.error = err;
        }
        return info;
      });
    }
    function check_whole(group, unique) {
      let maker;
      let shared = [];
      for (let cp of unique) {
        let whole = WHOLE_MAP.get(cp);
        if (whole === UNIQUE_PH) return;
        if (whole) {
          let set = whole.M.get(cp);
          maker = maker ? maker.filter((g) => set.has(g)) : Array_from(set);
          if (!maker.length) return;
        } else {
          shared.push(cp);
        }
      }
      if (maker) {
        for (let g of maker) {
          if (shared.every((cp) => group_has_cp(g, cp))) {
            throw new Error(`whole-script confusable: ${group.N}/${g.N}`);
          }
        }
      }
    }
    function determine_group(unique) {
      let groups = GROUPS;
      for (let cp of unique) {
        let gs = groups.filter((g) => group_has_cp(g, cp));
        if (!gs.length) {
          if (!GROUPS.some((g) => group_has_cp(g, cp))) {
            throw error_disallowed(cp);
          } else {
            throw error_group_member(groups[0], cp);
          }
        }
        groups = gs;
        if (gs.length == 1) break;
      }
      return groups;
    }
    function flatten(split3) {
      return split3.map(({ input, error, output }) => {
        if (error) {
          let msg = error.message;
          throw new Error(split3.length == 1 ? msg : `Invalid label ${bidi_qq(safe_str_from_cps(input, 63))}: ${msg}`);
        }
        return str_from_cps(output);
      }).join(STOP_CH);
    }
    function error_disallowed(cp) {
      return new Error(`disallowed character: ${quoted_cp(cp)}`);
    }
    function error_group_member(g, cp) {
      let quoted = quoted_cp(cp);
      let gg = GROUPS.find((g2) => g2.P.has(cp));
      if (gg) {
        quoted = `${gg.N} ${quoted}`;
      }
      return new Error(`illegal mixture: ${g.N} + ${quoted}`);
    }
    function error_placement(where) {
      return new Error(`illegal placement: ${where}`);
    }
    function check_group(g, cps) {
      for (let cp of cps) {
        if (!group_has_cp(g, cp)) {
          throw error_group_member(g, cp);
        }
      }
      if (g.M) {
        let decomposed2 = nfd(cps);
        for (let i = 1, e = decomposed2.length; i < e; i++) {
          if (NSM.has(decomposed2[i])) {
            let j = i + 1;
            for (let cp; j < e && NSM.has(cp = decomposed2[j]); j++) {
              for (let k = i; k < j; k++) {
                if (decomposed2[k] == cp) {
                  throw new Error(`duplicate non-spacing marks: ${quoted_cp(cp)}`);
                }
              }
            }
            if (j - i > NSM_MAX) {
              throw new Error(`excessive non-spacing marks: ${bidi_qq(safe_str_from_cps(decomposed2.slice(i - 1, j)))} (${j - i}/${NSM_MAX})`);
            }
            i = j;
          }
        }
      }
    }
    function tokens_from_str(input, nf, ef) {
      let ret = [];
      let chars = [];
      input = input.slice().reverse();
      while (input.length) {
        let emoji = consume_emoji_reversed(input);
        if (emoji) {
          if (chars.length) {
            ret.push(nf(chars));
            chars = [];
          }
          ret.push(ef(emoji));
        } else {
          let cp = input.pop();
          if (VALID.has(cp)) {
            chars.push(cp);
          } else {
            let cps = MAPPED.get(cp);
            if (cps) {
              chars.push(...cps);
            } else if (!IGNORED.has(cp)) {
              throw error_disallowed(cp);
            }
          }
        }
      }
      if (chars.length) {
        ret.push(nf(chars));
      }
      return ret;
    }
    function filter_fe0f(cps) {
      return cps.filter((cp) => cp != FE0F);
    }
    function consume_emoji_reversed(cps, eaten) {
      let node = EMOJI_ROOT;
      let emoji;
      let pos = cps.length;
      while (pos) {
        node = node.get(cps[--pos]);
        if (!node) break;
        let { V } = node;
        if (V) {
          emoji = V;
          if (eaten) eaten.push(...cps.slice(pos).reverse());
          cps.length = pos;
        }
      }
      return emoji;
    }
    var TY_VALID = "valid";
    var TY_MAPPED = "mapped";
    var TY_IGNORED = "ignored";
    var TY_DISALLOWED = "disallowed";
    var TY_EMOJI = "emoji";
    var TY_NFC = "nfc";
    var TY_STOP = "stop";
    function ens_tokenize(name, {
      nf = true
      // collapse unnormalized runs into a single token
    } = {}) {
      init();
      let input = explode_cp(name).reverse();
      let eaten = [];
      let tokens = [];
      while (input.length) {
        let emoji = consume_emoji_reversed(input, eaten);
        if (emoji) {
          tokens.push({
            type: TY_EMOJI,
            emoji: emoji.slice(),
            // copy emoji
            input: eaten,
            cps: filter_fe0f(emoji)
          });
          eaten = [];
        } else {
          let cp = input.pop();
          if (cp == STOP) {
            tokens.push({ type: TY_STOP, cp });
          } else if (VALID.has(cp)) {
            tokens.push({ type: TY_VALID, cps: [cp] });
          } else if (IGNORED.has(cp)) {
            tokens.push({ type: TY_IGNORED, cp });
          } else {
            let cps = MAPPED.get(cp);
            if (cps) {
              tokens.push({ type: TY_MAPPED, cp, cps: cps.slice() });
            } else {
              tokens.push({ type: TY_DISALLOWED, cp });
            }
          }
        }
      }
      if (nf) {
        for (let i = 0, start = -1; i < tokens.length; i++) {
          let token = tokens[i];
          if (is_valid_or_mapped(token.type)) {
            if (requires_check(token.cps)) {
              let end = i + 1;
              for (let pos = end; pos < tokens.length; pos++) {
                let { type: type2, cps: cps2 } = tokens[pos];
                if (is_valid_or_mapped(type2)) {
                  if (!requires_check(cps2)) break;
                  end = pos + 1;
                } else if (type2 !== TY_IGNORED) {
                  break;
                }
              }
              if (start < 0) start = i;
              let slice = tokens.slice(start, end);
              let cps0 = slice.flatMap((x) => is_valid_or_mapped(x.type) ? x.cps : []);
              let cps = nfc(cps0);
              if (compare_arrays(cps, cps0)) {
                tokens.splice(start, end - start, {
                  type: TY_NFC,
                  input: cps0,
                  // there are 3 states: tokens0 ==(process)=> input ==(nfc)=> tokens/cps
                  cps,
                  tokens0: collapse_valid_tokens(slice),
                  tokens: ens_tokenize(str_from_cps(cps), { nf: false })
                });
                i = start;
              } else {
                i = end - 1;
              }
              start = -1;
            } else {
              start = i;
            }
          } else if (token.type !== TY_IGNORED) {
            start = -1;
          }
        }
      }
      return collapse_valid_tokens(tokens);
    }
    function is_valid_or_mapped(type2) {
      return type2 == TY_VALID || type2 == TY_MAPPED;
    }
    function requires_check(cps) {
      return cps.some((cp) => NFC_CHECK.has(cp));
    }
    function collapse_valid_tokens(tokens) {
      for (let i = 0; i < tokens.length; i++) {
        if (tokens[i].type == TY_VALID) {
          let j = i + 1;
          while (j < tokens.length && tokens[j].type == TY_VALID) j++;
          tokens.splice(i, j - i, { type: TY_VALID, cps: tokens.slice(i, j).flatMap((x) => x.cps) });
        }
      }
      return tokens;
    }
    exports2.ens_beautify = ens_beautify;
    exports2.ens_emoji = ens_emoji;
    exports2.ens_normalize = ens_normalize;
    exports2.ens_normalize_fragment = ens_normalize_fragment;
    exports2.ens_split = ens_split;
    exports2.ens_tokenize = ens_tokenize;
    exports2.is_combining_mark = is_combining_mark;
    exports2.nfc = nfc;
    exports2.nfd = nfd;
    exports2.safe_str_from_cps = safe_str_from_cps;
    exports2.should_escape = should_escape;
  }
});

// node_modules/ethers/lib.commonjs/hash/namehash.js
var require_namehash = __commonJS({
  "node_modules/ethers/lib.commonjs/hash/namehash.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.dnsEncode = exports2.namehash = exports2.isValidName = exports2.ensNormalize = void 0;
    var index_js_1 = require_crypto4();
    var index_js_2 = require_utils11();
    var ens_normalize_1 = require_dist2();
    var Zeros = new Uint8Array(32);
    Zeros.fill(0);
    function checkComponent(comp) {
      (0, index_js_2.assertArgument)(comp.length !== 0, "invalid ENS name; empty component", "comp", comp);
      return comp;
    }
    function ensNameSplit(name) {
      const bytes = (0, index_js_2.toUtf8Bytes)(ensNormalize(name));
      const comps = [];
      if (name.length === 0) {
        return comps;
      }
      let last = 0;
      for (let i = 0; i < bytes.length; i++) {
        const d = bytes[i];
        if (d === 46) {
          comps.push(checkComponent(bytes.slice(last, i)));
          last = i + 1;
        }
      }
      (0, index_js_2.assertArgument)(last < bytes.length, "invalid ENS name; empty component", "name", name);
      comps.push(checkComponent(bytes.slice(last)));
      return comps;
    }
    function ensNormalize(name) {
      try {
        if (name.length === 0) {
          throw new Error("empty label");
        }
        return (0, ens_normalize_1.ens_normalize)(name);
      } catch (error) {
        (0, index_js_2.assertArgument)(false, `invalid ENS name (${error.message})`, "name", name);
      }
    }
    exports2.ensNormalize = ensNormalize;
    function isValidName(name) {
      try {
        return ensNameSplit(name).length !== 0;
      } catch (error) {
      }
      return false;
    }
    exports2.isValidName = isValidName;
    function namehash(name) {
      (0, index_js_2.assertArgument)(typeof name === "string", "invalid ENS name; not a string", "name", name);
      (0, index_js_2.assertArgument)(name.length, `invalid ENS name (empty label)`, "name", name);
      let result = Zeros;
      const comps = ensNameSplit(name);
      while (comps.length) {
        result = (0, index_js_1.keccak256)((0, index_js_2.concat)([result, (0, index_js_1.keccak256)(comps.pop())]));
      }
      return (0, index_js_2.hexlify)(result);
    }
    exports2.namehash = namehash;
    function dnsEncode(name, _maxLength) {
      const length = _maxLength != null ? _maxLength : 63;
      (0, index_js_2.assertArgument)(length <= 255, "DNS encoded label cannot exceed 255", "length", length);
      return (0, index_js_2.hexlify)((0, index_js_2.concat)(ensNameSplit(name).map((comp) => {
        (0, index_js_2.assertArgument)(comp.length <= length, `label ${JSON.stringify(name)} exceeds ${length} bytes`, "name", name);
        const bytes = new Uint8Array(comp.length + 1);
        bytes.set(comp, 1);
        bytes[0] = bytes.length - 1;
        return bytes;
      }))) + "00";
    }
    exports2.dnsEncode = dnsEncode;
  }
});

// node_modules/ethers/lib.commonjs/transaction/accesslist.js
var require_accesslist = __commonJS({
  "node_modules/ethers/lib.commonjs/transaction/accesslist.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.accessListify = void 0;
    var index_js_1 = require_address3();
    var index_js_2 = require_utils11();
    function accessSetify(addr, storageKeys) {
      return {
        address: (0, index_js_1.getAddress)(addr),
        storageKeys: storageKeys.map((storageKey, index) => {
          (0, index_js_2.assertArgument)((0, index_js_2.isHexString)(storageKey, 32), "invalid slot", `storageKeys[${index}]`, storageKey);
          return storageKey.toLowerCase();
        })
      };
    }
    function accessListify(value) {
      if (Array.isArray(value)) {
        return value.map((set, index) => {
          if (Array.isArray(set)) {
            (0, index_js_2.assertArgument)(set.length === 2, "invalid slot set", `value[${index}]`, set);
            return accessSetify(set[0], set[1]);
          }
          (0, index_js_2.assertArgument)(set != null && typeof set === "object", "invalid address-slot set", "value", value);
          return accessSetify(set.address, set.storageKeys);
        });
      }
      (0, index_js_2.assertArgument)(value != null && typeof value === "object", "invalid access list", "value", value);
      const result = Object.keys(value).map((addr) => {
        const storageKeys = value[addr].reduce((accum, storageKey) => {
          accum[storageKey] = true;
          return accum;
        }, {});
        return accessSetify(addr, Object.keys(storageKeys).sort());
      });
      result.sort((a, b) => a.address.localeCompare(b.address));
      return result;
    }
    exports2.accessListify = accessListify;
  }
});

// node_modules/ethers/lib.commonjs/transaction/address.js
var require_address5 = __commonJS({
  "node_modules/ethers/lib.commonjs/transaction/address.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.recoverAddress = exports2.computeAddress = void 0;
    var index_js_1 = require_address3();
    var index_js_2 = require_crypto4();
    function computeAddress(key) {
      let pubkey;
      if (typeof key === "string") {
        pubkey = index_js_2.SigningKey.computePublicKey(key, false);
      } else {
        pubkey = key.publicKey;
      }
      return (0, index_js_1.getAddress)((0, index_js_2.keccak256)("0x" + pubkey.substring(4)).substring(26));
    }
    exports2.computeAddress = computeAddress;
    function recoverAddress(digest, signature2) {
      return computeAddress(index_js_2.SigningKey.recoverPublicKey(digest, signature2));
    }
    exports2.recoverAddress = recoverAddress;
  }
});

// node_modules/ethers/lib.commonjs/transaction/transaction.js
var require_transaction = __commonJS({
  "node_modules/ethers/lib.commonjs/transaction/transaction.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Transaction = void 0;
    var index_js_1 = require_address3();
    var addresses_js_1 = require_addresses();
    var index_js_2 = require_crypto4();
    var index_js_3 = require_utils11();
    var accesslist_js_1 = require_accesslist();
    var address_js_1 = require_address5();
    var BN_0 = BigInt(0);
    var BN_2 = BigInt(2);
    var BN_27 = BigInt(27);
    var BN_28 = BigInt(28);
    var BN_35 = BigInt(35);
    var BN_MAX_UINT = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    var BLOB_SIZE = 4096 * 32;
    function getVersionedHash(version2, hash) {
      let versioned = version2.toString(16);
      while (versioned.length < 2) {
        versioned = "0" + versioned;
      }
      versioned += (0, index_js_2.sha256)(hash).substring(4);
      return "0x" + versioned;
    }
    function handleAddress(value) {
      if (value === "0x") {
        return null;
      }
      return (0, index_js_1.getAddress)(value);
    }
    function handleAccessList(value, param) {
      try {
        return (0, accesslist_js_1.accessListify)(value);
      } catch (error) {
        (0, index_js_3.assertArgument)(false, error.message, param, value);
      }
    }
    function handleNumber(_value2, param) {
      if (_value2 === "0x") {
        return 0;
      }
      return (0, index_js_3.getNumber)(_value2, param);
    }
    function handleUint(_value2, param) {
      if (_value2 === "0x") {
        return BN_0;
      }
      const value = (0, index_js_3.getBigInt)(_value2, param);
      (0, index_js_3.assertArgument)(value <= BN_MAX_UINT, "value exceeds uint size", param, value);
      return value;
    }
    function formatNumber(_value2, name) {
      const value = (0, index_js_3.getBigInt)(_value2, "value");
      const result = (0, index_js_3.toBeArray)(value);
      (0, index_js_3.assertArgument)(result.length <= 32, `value too large`, `tx.${name}`, value);
      return result;
    }
    function formatAccessList(value) {
      return (0, accesslist_js_1.accessListify)(value).map((set) => [set.address, set.storageKeys]);
    }
    function formatHashes(value, param) {
      (0, index_js_3.assertArgument)(Array.isArray(value), `invalid ${param}`, "value", value);
      for (let i = 0; i < value.length; i++) {
        (0, index_js_3.assertArgument)((0, index_js_3.isHexString)(value[i], 32), "invalid ${ param } hash", `value[${i}]`, value[i]);
      }
      return value;
    }
    function _parseLegacy(data) {
      const fields = (0, index_js_3.decodeRlp)(data);
      (0, index_js_3.assertArgument)(Array.isArray(fields) && (fields.length === 9 || fields.length === 6), "invalid field count for legacy transaction", "data", data);
      const tx = {
        type: 0,
        nonce: handleNumber(fields[0], "nonce"),
        gasPrice: handleUint(fields[1], "gasPrice"),
        gasLimit: handleUint(fields[2], "gasLimit"),
        to: handleAddress(fields[3]),
        value: handleUint(fields[4], "value"),
        data: (0, index_js_3.hexlify)(fields[5]),
        chainId: BN_0
      };
      if (fields.length === 6) {
        return tx;
      }
      const v = handleUint(fields[6], "v");
      const r = handleUint(fields[7], "r");
      const s = handleUint(fields[8], "s");
      if (r === BN_0 && s === BN_0) {
        tx.chainId = v;
      } else {
        let chainId = (v - BN_35) / BN_2;
        if (chainId < BN_0) {
          chainId = BN_0;
        }
        tx.chainId = chainId;
        (0, index_js_3.assertArgument)(chainId !== BN_0 || (v === BN_27 || v === BN_28), "non-canonical legacy v", "v", fields[6]);
        tx.signature = index_js_2.Signature.from({
          r: (0, index_js_3.zeroPadValue)(fields[7], 32),
          s: (0, index_js_3.zeroPadValue)(fields[8], 32),
          v
        });
      }
      return tx;
    }
    function _serializeLegacy(tx, sig) {
      const fields = [
        formatNumber(tx.nonce, "nonce"),
        formatNumber(tx.gasPrice || 0, "gasPrice"),
        formatNumber(tx.gasLimit, "gasLimit"),
        tx.to || "0x",
        formatNumber(tx.value, "value"),
        tx.data
      ];
      let chainId = BN_0;
      if (tx.chainId != BN_0) {
        chainId = (0, index_js_3.getBigInt)(tx.chainId, "tx.chainId");
        (0, index_js_3.assertArgument)(!sig || sig.networkV == null || sig.legacyChainId === chainId, "tx.chainId/sig.v mismatch", "sig", sig);
      } else if (tx.signature) {
        const legacy = tx.signature.legacyChainId;
        if (legacy != null) {
          chainId = legacy;
        }
      }
      if (!sig) {
        if (chainId !== BN_0) {
          fields.push((0, index_js_3.toBeArray)(chainId));
          fields.push("0x");
          fields.push("0x");
        }
        return (0, index_js_3.encodeRlp)(fields);
      }
      let v = BigInt(27 + sig.yParity);
      if (chainId !== BN_0) {
        v = index_js_2.Signature.getChainIdV(chainId, sig.v);
      } else if (BigInt(sig.v) !== v) {
        (0, index_js_3.assertArgument)(false, "tx.chainId/sig.v mismatch", "sig", sig);
      }
      fields.push((0, index_js_3.toBeArray)(v));
      fields.push((0, index_js_3.toBeArray)(sig.r));
      fields.push((0, index_js_3.toBeArray)(sig.s));
      return (0, index_js_3.encodeRlp)(fields);
    }
    function _parseEipSignature(tx, fields) {
      let yParity;
      try {
        yParity = handleNumber(fields[0], "yParity");
        if (yParity !== 0 && yParity !== 1) {
          throw new Error("bad yParity");
        }
      } catch (error) {
        (0, index_js_3.assertArgument)(false, "invalid yParity", "yParity", fields[0]);
      }
      const r = (0, index_js_3.zeroPadValue)(fields[1], 32);
      const s = (0, index_js_3.zeroPadValue)(fields[2], 32);
      const signature2 = index_js_2.Signature.from({ r, s, yParity });
      tx.signature = signature2;
    }
    function _parseEip1559(data) {
      const fields = (0, index_js_3.decodeRlp)((0, index_js_3.getBytes)(data).slice(1));
      (0, index_js_3.assertArgument)(Array.isArray(fields) && (fields.length === 9 || fields.length === 12), "invalid field count for transaction type: 2", "data", (0, index_js_3.hexlify)(data));
      const tx = {
        type: 2,
        chainId: handleUint(fields[0], "chainId"),
        nonce: handleNumber(fields[1], "nonce"),
        maxPriorityFeePerGas: handleUint(fields[2], "maxPriorityFeePerGas"),
        maxFeePerGas: handleUint(fields[3], "maxFeePerGas"),
        gasPrice: null,
        gasLimit: handleUint(fields[4], "gasLimit"),
        to: handleAddress(fields[5]),
        value: handleUint(fields[6], "value"),
        data: (0, index_js_3.hexlify)(fields[7]),
        accessList: handleAccessList(fields[8], "accessList")
      };
      if (fields.length === 9) {
        return tx;
      }
      _parseEipSignature(tx, fields.slice(9));
      return tx;
    }
    function _serializeEip1559(tx, sig) {
      const fields = [
        formatNumber(tx.chainId, "chainId"),
        formatNumber(tx.nonce, "nonce"),
        formatNumber(tx.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
        formatNumber(tx.maxFeePerGas || 0, "maxFeePerGas"),
        formatNumber(tx.gasLimit, "gasLimit"),
        tx.to || "0x",
        formatNumber(tx.value, "value"),
        tx.data,
        formatAccessList(tx.accessList || [])
      ];
      if (sig) {
        fields.push(formatNumber(sig.yParity, "yParity"));
        fields.push((0, index_js_3.toBeArray)(sig.r));
        fields.push((0, index_js_3.toBeArray)(sig.s));
      }
      return (0, index_js_3.concat)(["0x02", (0, index_js_3.encodeRlp)(fields)]);
    }
    function _parseEip2930(data) {
      const fields = (0, index_js_3.decodeRlp)((0, index_js_3.getBytes)(data).slice(1));
      (0, index_js_3.assertArgument)(Array.isArray(fields) && (fields.length === 8 || fields.length === 11), "invalid field count for transaction type: 1", "data", (0, index_js_3.hexlify)(data));
      const tx = {
        type: 1,
        chainId: handleUint(fields[0], "chainId"),
        nonce: handleNumber(fields[1], "nonce"),
        gasPrice: handleUint(fields[2], "gasPrice"),
        gasLimit: handleUint(fields[3], "gasLimit"),
        to: handleAddress(fields[4]),
        value: handleUint(fields[5], "value"),
        data: (0, index_js_3.hexlify)(fields[6]),
        accessList: handleAccessList(fields[7], "accessList")
      };
      if (fields.length === 8) {
        return tx;
      }
      _parseEipSignature(tx, fields.slice(8));
      return tx;
    }
    function _serializeEip2930(tx, sig) {
      const fields = [
        formatNumber(tx.chainId, "chainId"),
        formatNumber(tx.nonce, "nonce"),
        formatNumber(tx.gasPrice || 0, "gasPrice"),
        formatNumber(tx.gasLimit, "gasLimit"),
        tx.to || "0x",
        formatNumber(tx.value, "value"),
        tx.data,
        formatAccessList(tx.accessList || [])
      ];
      if (sig) {
        fields.push(formatNumber(sig.yParity, "recoveryParam"));
        fields.push((0, index_js_3.toBeArray)(sig.r));
        fields.push((0, index_js_3.toBeArray)(sig.s));
      }
      return (0, index_js_3.concat)(["0x01", (0, index_js_3.encodeRlp)(fields)]);
    }
    function _parseEip4844(data) {
      let fields = (0, index_js_3.decodeRlp)((0, index_js_3.getBytes)(data).slice(1));
      let typeName = "3";
      let blobs = null;
      if (fields.length === 4 && Array.isArray(fields[0])) {
        typeName = "3 (network format)";
        const fBlobs = fields[1], fCommits = fields[2], fProofs = fields[3];
        (0, index_js_3.assertArgument)(Array.isArray(fBlobs), "invalid network format: blobs not an array", "fields[1]", fBlobs);
        (0, index_js_3.assertArgument)(Array.isArray(fCommits), "invalid network format: commitments not an array", "fields[2]", fCommits);
        (0, index_js_3.assertArgument)(Array.isArray(fProofs), "invalid network format: proofs not an array", "fields[3]", fProofs);
        (0, index_js_3.assertArgument)(fBlobs.length === fCommits.length, "invalid network format: blobs/commitments length mismatch", "fields", fields);
        (0, index_js_3.assertArgument)(fBlobs.length === fProofs.length, "invalid network format: blobs/proofs length mismatch", "fields", fields);
        blobs = [];
        for (let i = 0; i < fields[1].length; i++) {
          blobs.push({
            data: fBlobs[i],
            commitment: fCommits[i],
            proof: fProofs[i]
          });
        }
        fields = fields[0];
      }
      (0, index_js_3.assertArgument)(Array.isArray(fields) && (fields.length === 11 || fields.length === 14), `invalid field count for transaction type: ${typeName}`, "data", (0, index_js_3.hexlify)(data));
      const tx = {
        type: 3,
        chainId: handleUint(fields[0], "chainId"),
        nonce: handleNumber(fields[1], "nonce"),
        maxPriorityFeePerGas: handleUint(fields[2], "maxPriorityFeePerGas"),
        maxFeePerGas: handleUint(fields[3], "maxFeePerGas"),
        gasPrice: null,
        gasLimit: handleUint(fields[4], "gasLimit"),
        to: handleAddress(fields[5]),
        value: handleUint(fields[6], "value"),
        data: (0, index_js_3.hexlify)(fields[7]),
        accessList: handleAccessList(fields[8], "accessList"),
        maxFeePerBlobGas: handleUint(fields[9], "maxFeePerBlobGas"),
        blobVersionedHashes: fields[10]
      };
      if (blobs) {
        tx.blobs = blobs;
      }
      (0, index_js_3.assertArgument)(tx.to != null, `invalid address for transaction type: ${typeName}`, "data", data);
      (0, index_js_3.assertArgument)(Array.isArray(tx.blobVersionedHashes), "invalid blobVersionedHashes: must be an array", "data", data);
      for (let i = 0; i < tx.blobVersionedHashes.length; i++) {
        (0, index_js_3.assertArgument)((0, index_js_3.isHexString)(tx.blobVersionedHashes[i], 32), `invalid blobVersionedHash at index ${i}: must be length 32`, "data", data);
      }
      if (fields.length === 11) {
        return tx;
      }
      _parseEipSignature(tx, fields.slice(11));
      return tx;
    }
    function _serializeEip4844(tx, sig, blobs) {
      const fields = [
        formatNumber(tx.chainId, "chainId"),
        formatNumber(tx.nonce, "nonce"),
        formatNumber(tx.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
        formatNumber(tx.maxFeePerGas || 0, "maxFeePerGas"),
        formatNumber(tx.gasLimit, "gasLimit"),
        tx.to || addresses_js_1.ZeroAddress,
        formatNumber(tx.value, "value"),
        tx.data,
        formatAccessList(tx.accessList || []),
        formatNumber(tx.maxFeePerBlobGas || 0, "maxFeePerBlobGas"),
        formatHashes(tx.blobVersionedHashes || [], "blobVersionedHashes")
      ];
      if (sig) {
        fields.push(formatNumber(sig.yParity, "yParity"));
        fields.push((0, index_js_3.toBeArray)(sig.r));
        fields.push((0, index_js_3.toBeArray)(sig.s));
        if (blobs) {
          return (0, index_js_3.concat)([
            "0x03",
            (0, index_js_3.encodeRlp)([
              fields,
              blobs.map((b) => b.data),
              blobs.map((b) => b.commitment),
              blobs.map((b) => b.proof)
            ])
          ]);
        }
      }
      return (0, index_js_3.concat)(["0x03", (0, index_js_3.encodeRlp)(fields)]);
    }
    var _type, _to, _data, _nonce, _gasLimit, _gasPrice, _maxPriorityFeePerGas, _maxFeePerGas, _value, _chainId, _sig, _accessList, _maxFeePerBlobGas, _blobVersionedHashes, _kzg, _blobs, _Transaction_instances, getSerialized_fn;
    var _Transaction = class _Transaction {
      /**
       *  Creates a new Transaction with default values.
       */
      constructor() {
        __privateAdd(this, _Transaction_instances);
        __privateAdd(this, _type);
        __privateAdd(this, _to);
        __privateAdd(this, _data);
        __privateAdd(this, _nonce);
        __privateAdd(this, _gasLimit);
        __privateAdd(this, _gasPrice);
        __privateAdd(this, _maxPriorityFeePerGas);
        __privateAdd(this, _maxFeePerGas);
        __privateAdd(this, _value);
        __privateAdd(this, _chainId);
        __privateAdd(this, _sig);
        __privateAdd(this, _accessList);
        __privateAdd(this, _maxFeePerBlobGas);
        __privateAdd(this, _blobVersionedHashes);
        __privateAdd(this, _kzg);
        __privateAdd(this, _blobs);
        __privateSet(this, _type, null);
        __privateSet(this, _to, null);
        __privateSet(this, _nonce, 0);
        __privateSet(this, _gasLimit, BN_0);
        __privateSet(this, _gasPrice, null);
        __privateSet(this, _maxPriorityFeePerGas, null);
        __privateSet(this, _maxFeePerGas, null);
        __privateSet(this, _data, "0x");
        __privateSet(this, _value, BN_0);
        __privateSet(this, _chainId, BN_0);
        __privateSet(this, _sig, null);
        __privateSet(this, _accessList, null);
        __privateSet(this, _maxFeePerBlobGas, null);
        __privateSet(this, _blobVersionedHashes, null);
        __privateSet(this, _blobs, null);
        __privateSet(this, _kzg, null);
      }
      /**
       *  The transaction type.
       *
       *  If null, the type will be automatically inferred based on
       *  explicit properties.
       */
      get type() {
        return __privateGet(this, _type);
      }
      set type(value) {
        switch (value) {
          case null:
            __privateSet(this, _type, null);
            break;
          case 0:
          case "legacy":
            __privateSet(this, _type, 0);
            break;
          case 1:
          case "berlin":
          case "eip-2930":
            __privateSet(this, _type, 1);
            break;
          case 2:
          case "london":
          case "eip-1559":
            __privateSet(this, _type, 2);
            break;
          case 3:
          case "cancun":
          case "eip-4844":
            __privateSet(this, _type, 3);
            break;
          default:
            (0, index_js_3.assertArgument)(false, "unsupported transaction type", "type", value);
        }
      }
      /**
       *  The name of the transaction type.
       */
      get typeName() {
        switch (this.type) {
          case 0:
            return "legacy";
          case 1:
            return "eip-2930";
          case 2:
            return "eip-1559";
          case 3:
            return "eip-4844";
        }
        return null;
      }
      /**
       *  The ``to`` address for the transaction or ``null`` if the
       *  transaction is an ``init`` transaction.
       */
      get to() {
        const value = __privateGet(this, _to);
        if (value == null && this.type === 3) {
          return addresses_js_1.ZeroAddress;
        }
        return value;
      }
      set to(value) {
        __privateSet(this, _to, value == null ? null : (0, index_js_1.getAddress)(value));
      }
      /**
       *  The transaction nonce.
       */
      get nonce() {
        return __privateGet(this, _nonce);
      }
      set nonce(value) {
        __privateSet(this, _nonce, (0, index_js_3.getNumber)(value, "value"));
      }
      /**
       *  The gas limit.
       */
      get gasLimit() {
        return __privateGet(this, _gasLimit);
      }
      set gasLimit(value) {
        __privateSet(this, _gasLimit, (0, index_js_3.getBigInt)(value));
      }
      /**
       *  The gas price.
       *
       *  On legacy networks this defines the fee that will be paid. On
       *  EIP-1559 networks, this should be ``null``.
       */
      get gasPrice() {
        const value = __privateGet(this, _gasPrice);
        if (value == null && (this.type === 0 || this.type === 1)) {
          return BN_0;
        }
        return value;
      }
      set gasPrice(value) {
        __privateSet(this, _gasPrice, value == null ? null : (0, index_js_3.getBigInt)(value, "gasPrice"));
      }
      /**
       *  The maximum priority fee per unit of gas to pay. On legacy
       *  networks this should be ``null``.
       */
      get maxPriorityFeePerGas() {
        const value = __privateGet(this, _maxPriorityFeePerGas);
        if (value == null) {
          if (this.type === 2 || this.type === 3) {
            return BN_0;
          }
          return null;
        }
        return value;
      }
      set maxPriorityFeePerGas(value) {
        __privateSet(this, _maxPriorityFeePerGas, value == null ? null : (0, index_js_3.getBigInt)(value, "maxPriorityFeePerGas"));
      }
      /**
       *  The maximum total fee per unit of gas to pay. On legacy
       *  networks this should be ``null``.
       */
      get maxFeePerGas() {
        const value = __privateGet(this, _maxFeePerGas);
        if (value == null) {
          if (this.type === 2 || this.type === 3) {
            return BN_0;
          }
          return null;
        }
        return value;
      }
      set maxFeePerGas(value) {
        __privateSet(this, _maxFeePerGas, value == null ? null : (0, index_js_3.getBigInt)(value, "maxFeePerGas"));
      }
      /**
       *  The transaction data. For ``init`` transactions this is the
       *  deployment code.
       */
      get data() {
        return __privateGet(this, _data);
      }
      set data(value) {
        __privateSet(this, _data, (0, index_js_3.hexlify)(value));
      }
      /**
       *  The amount of ether (in wei) to send in this transactions.
       */
      get value() {
        return __privateGet(this, _value);
      }
      set value(value) {
        __privateSet(this, _value, (0, index_js_3.getBigInt)(value, "value"));
      }
      /**
       *  The chain ID this transaction is valid on.
       */
      get chainId() {
        return __privateGet(this, _chainId);
      }
      set chainId(value) {
        __privateSet(this, _chainId, (0, index_js_3.getBigInt)(value));
      }
      /**
       *  If signed, the signature for this transaction.
       */
      get signature() {
        return __privateGet(this, _sig) || null;
      }
      set signature(value) {
        __privateSet(this, _sig, value == null ? null : index_js_2.Signature.from(value));
      }
      /**
       *  The access list.
       *
       *  An access list permits discounted (but pre-paid) access to
       *  bytecode and state variable access within contract execution.
       */
      get accessList() {
        const value = __privateGet(this, _accessList) || null;
        if (value == null) {
          if (this.type === 1 || this.type === 2 || this.type === 3) {
            return [];
          }
          return null;
        }
        return value;
      }
      set accessList(value) {
        __privateSet(this, _accessList, value == null ? null : (0, accesslist_js_1.accessListify)(value));
      }
      /**
       *  The max fee per blob gas for Cancun transactions.
       */
      get maxFeePerBlobGas() {
        const value = __privateGet(this, _maxFeePerBlobGas);
        if (value == null && this.type === 3) {
          return BN_0;
        }
        return value;
      }
      set maxFeePerBlobGas(value) {
        __privateSet(this, _maxFeePerBlobGas, value == null ? null : (0, index_js_3.getBigInt)(value, "maxFeePerBlobGas"));
      }
      /**
       *  The BLOb versioned hashes for Cancun transactions.
       */
      get blobVersionedHashes() {
        let value = __privateGet(this, _blobVersionedHashes);
        if (value == null && this.type === 3) {
          return [];
        }
        return value;
      }
      set blobVersionedHashes(value) {
        if (value != null) {
          (0, index_js_3.assertArgument)(Array.isArray(value), "blobVersionedHashes must be an Array", "value", value);
          value = value.slice();
          for (let i = 0; i < value.length; i++) {
            (0, index_js_3.assertArgument)((0, index_js_3.isHexString)(value[i], 32), "invalid blobVersionedHash", `value[${i}]`, value[i]);
          }
        }
        __privateSet(this, _blobVersionedHashes, value);
      }
      /**
       *  The BLObs for the Transaction, if any.
       *
       *  If ``blobs`` is non-``null``, then the [[seriailized]]
       *  will return the network formatted sidecar, otherwise it
       *  will return the standard [[link-eip-2718]] payload. The
       *  [[unsignedSerialized]] is unaffected regardless.
       *
       *  When setting ``blobs``, either fully valid [[Blob]] objects
       *  may be specified (i.e. correctly padded, with correct
       *  committments and proofs) or a raw [[BytesLike]] may
       *  be provided.
       *
       *  If raw [[BytesLike]] are provided, the [[kzg]] property **must**
       *  be already set. The blob will be correctly padded and the
       *  [[KzgLibrary]] will be used to compute the committment and
       *  proof for the blob.
       *
       *  A BLOb is a sequence of field elements, each of which must
       *  be within the BLS field modulo, so some additional processing
       *  may be required to encode arbitrary data to ensure each 32 byte
       *  field is within the valid range.
       *
       *  Setting this automatically populates [[blobVersionedHashes]],
       *  overwriting any existing values. Setting this to ``null``
       *  does **not** remove the [[blobVersionedHashes]], leaving them
       *  present.
       */
      get blobs() {
        if (__privateGet(this, _blobs) == null) {
          return null;
        }
        return __privateGet(this, _blobs).map((b) => Object.assign({}, b));
      }
      set blobs(_blobs2) {
        if (_blobs2 == null) {
          __privateSet(this, _blobs, null);
          return;
        }
        const blobs = [];
        const versionedHashes = [];
        for (let i = 0; i < _blobs2.length; i++) {
          const blob3 = _blobs2[i];
          if ((0, index_js_3.isBytesLike)(blob3)) {
            (0, index_js_3.assert)(__privateGet(this, _kzg), "adding a raw blob requires a KZG library", "UNSUPPORTED_OPERATION", {
              operation: "set blobs()"
            });
            let data = (0, index_js_3.getBytes)(blob3);
            (0, index_js_3.assertArgument)(data.length <= BLOB_SIZE, "blob is too large", `blobs[${i}]`, blob3);
            if (data.length !== BLOB_SIZE) {
              const padded = new Uint8Array(BLOB_SIZE);
              padded.set(data);
              data = padded;
            }
            const commit = __privateGet(this, _kzg).blobToKzgCommitment(data);
            const proof = (0, index_js_3.hexlify)(__privateGet(this, _kzg).computeBlobKzgProof(data, commit));
            blobs.push({
              data: (0, index_js_3.hexlify)(data),
              commitment: (0, index_js_3.hexlify)(commit),
              proof
            });
            versionedHashes.push(getVersionedHash(1, commit));
          } else {
            const commit = (0, index_js_3.hexlify)(blob3.commitment);
            blobs.push({
              data: (0, index_js_3.hexlify)(blob3.data),
              commitment: commit,
              proof: (0, index_js_3.hexlify)(blob3.proof)
            });
            versionedHashes.push(getVersionedHash(1, commit));
          }
        }
        __privateSet(this, _blobs, blobs);
        __privateSet(this, _blobVersionedHashes, versionedHashes);
      }
      get kzg() {
        return __privateGet(this, _kzg);
      }
      set kzg(kzg) {
        __privateSet(this, _kzg, kzg);
      }
      /**
       *  The transaction hash, if signed. Otherwise, ``null``.
       */
      get hash() {
        if (this.signature == null) {
          return null;
        }
        return (0, index_js_2.keccak256)(__privateMethod(this, _Transaction_instances, getSerialized_fn).call(this, true, false));
      }
      /**
       *  The pre-image hash of this transaction.
       *
       *  This is the digest that a [[Signer]] must sign to authorize
       *  this transaction.
       */
      get unsignedHash() {
        return (0, index_js_2.keccak256)(this.unsignedSerialized);
      }
      /**
       *  The sending address, if signed. Otherwise, ``null``.
       */
      get from() {
        if (this.signature == null) {
          return null;
        }
        return (0, address_js_1.recoverAddress)(this.unsignedHash, this.signature);
      }
      /**
       *  The public key of the sender, if signed. Otherwise, ``null``.
       */
      get fromPublicKey() {
        if (this.signature == null) {
          return null;
        }
        return index_js_2.SigningKey.recoverPublicKey(this.unsignedHash, this.signature);
      }
      /**
       *  Returns true if signed.
       *
       *  This provides a Type Guard that properties requiring a signed
       *  transaction are non-null.
       */
      isSigned() {
        return this.signature != null;
      }
      /**
       *  The serialized transaction.
       *
       *  This throws if the transaction is unsigned. For the pre-image,
       *  use [[unsignedSerialized]].
       */
      get serialized() {
        return __privateMethod(this, _Transaction_instances, getSerialized_fn).call(this, true, true);
      }
      /**
       *  The transaction pre-image.
       *
       *  The hash of this is the digest which needs to be signed to
       *  authorize this transaction.
       */
      get unsignedSerialized() {
        return __privateMethod(this, _Transaction_instances, getSerialized_fn).call(this, false, false);
      }
      /**
       *  Return the most "likely" type; currently the highest
       *  supported transaction type.
       */
      inferType() {
        const types = this.inferTypes();
        if (types.indexOf(2) >= 0) {
          return 2;
        }
        return types.pop();
      }
      /**
       *  Validates the explicit properties and returns a list of compatible
       *  transaction types.
       */
      inferTypes() {
        const hasGasPrice = this.gasPrice != null;
        const hasFee = this.maxFeePerGas != null || this.maxPriorityFeePerGas != null;
        const hasAccessList = this.accessList != null;
        const hasBlob = __privateGet(this, _maxFeePerBlobGas) != null || __privateGet(this, _blobVersionedHashes);
        if (this.maxFeePerGas != null && this.maxPriorityFeePerGas != null) {
          (0, index_js_3.assert)(this.maxFeePerGas >= this.maxPriorityFeePerGas, "priorityFee cannot be more than maxFee", "BAD_DATA", { value: this });
        }
        (0, index_js_3.assert)(!hasFee || this.type !== 0 && this.type !== 1, "transaction type cannot have maxFeePerGas or maxPriorityFeePerGas", "BAD_DATA", { value: this });
        (0, index_js_3.assert)(this.type !== 0 || !hasAccessList, "legacy transaction cannot have accessList", "BAD_DATA", { value: this });
        const types = [];
        if (this.type != null) {
          types.push(this.type);
        } else {
          if (hasFee) {
            types.push(2);
          } else if (hasGasPrice) {
            types.push(1);
            if (!hasAccessList) {
              types.push(0);
            }
          } else if (hasAccessList) {
            types.push(1);
            types.push(2);
          } else if (hasBlob && this.to) {
            types.push(3);
          } else {
            types.push(0);
            types.push(1);
            types.push(2);
            types.push(3);
          }
        }
        types.sort();
        return types;
      }
      /**
       *  Returns true if this transaction is a legacy transaction (i.e.
       *  ``type === 0``).
       *
       *  This provides a Type Guard that the related properties are
       *  non-null.
       */
      isLegacy() {
        return this.type === 0;
      }
      /**
       *  Returns true if this transaction is berlin hardform transaction (i.e.
       *  ``type === 1``).
       *
       *  This provides a Type Guard that the related properties are
       *  non-null.
       */
      isBerlin() {
        return this.type === 1;
      }
      /**
       *  Returns true if this transaction is london hardform transaction (i.e.
       *  ``type === 2``).
       *
       *  This provides a Type Guard that the related properties are
       *  non-null.
       */
      isLondon() {
        return this.type === 2;
      }
      /**
       *  Returns true if this transaction is an [[link-eip-4844]] BLOB
       *  transaction.
       *
       *  This provides a Type Guard that the related properties are
       *  non-null.
       */
      isCancun() {
        return this.type === 3;
      }
      /**
       *  Create a copy of this transaciton.
       */
      clone() {
        return _Transaction.from(this);
      }
      /**
       *  Return a JSON-friendly object.
       */
      toJSON() {
        const s = (v) => {
          if (v == null) {
            return null;
          }
          return v.toString();
        };
        return {
          type: this.type,
          to: this.to,
          //            from: this.from,
          data: this.data,
          nonce: this.nonce,
          gasLimit: s(this.gasLimit),
          gasPrice: s(this.gasPrice),
          maxPriorityFeePerGas: s(this.maxPriorityFeePerGas),
          maxFeePerGas: s(this.maxFeePerGas),
          value: s(this.value),
          chainId: s(this.chainId),
          sig: this.signature ? this.signature.toJSON() : null,
          accessList: this.accessList
        };
      }
      /**
       *  Create a **Transaction** from a serialized transaction or a
       *  Transaction-like object.
       */
      static from(tx) {
        if (tx == null) {
          return new _Transaction();
        }
        if (typeof tx === "string") {
          const payload = (0, index_js_3.getBytes)(tx);
          if (payload[0] >= 127) {
            return _Transaction.from(_parseLegacy(payload));
          }
          switch (payload[0]) {
            case 1:
              return _Transaction.from(_parseEip2930(payload));
            case 2:
              return _Transaction.from(_parseEip1559(payload));
            case 3:
              return _Transaction.from(_parseEip4844(payload));
          }
          (0, index_js_3.assert)(false, "unsupported transaction type", "UNSUPPORTED_OPERATION", { operation: "from" });
        }
        const result = new _Transaction();
        if (tx.type != null) {
          result.type = tx.type;
        }
        if (tx.to != null) {
          result.to = tx.to;
        }
        if (tx.nonce != null) {
          result.nonce = tx.nonce;
        }
        if (tx.gasLimit != null) {
          result.gasLimit = tx.gasLimit;
        }
        if (tx.gasPrice != null) {
          result.gasPrice = tx.gasPrice;
        }
        if (tx.maxPriorityFeePerGas != null) {
          result.maxPriorityFeePerGas = tx.maxPriorityFeePerGas;
        }
        if (tx.maxFeePerGas != null) {
          result.maxFeePerGas = tx.maxFeePerGas;
        }
        if (tx.maxFeePerBlobGas != null) {
          result.maxFeePerBlobGas = tx.maxFeePerBlobGas;
        }
        if (tx.data != null) {
          result.data = tx.data;
        }
        if (tx.value != null) {
          result.value = tx.value;
        }
        if (tx.chainId != null) {
          result.chainId = tx.chainId;
        }
        if (tx.signature != null) {
          result.signature = index_js_2.Signature.from(tx.signature);
        }
        if (tx.accessList != null) {
          result.accessList = tx.accessList;
        }
        if (tx.blobVersionedHashes != null) {
          result.blobVersionedHashes = tx.blobVersionedHashes;
        }
        if (tx.kzg != null) {
          result.kzg = tx.kzg;
        }
        if (tx.blobs != null) {
          result.blobs = tx.blobs;
        }
        if (tx.hash != null) {
          (0, index_js_3.assertArgument)(result.isSigned(), "unsigned transaction cannot define '.hash'", "tx", tx);
          (0, index_js_3.assertArgument)(result.hash === tx.hash, "hash mismatch", "tx", tx);
        }
        if (tx.from != null) {
          (0, index_js_3.assertArgument)(result.isSigned(), "unsigned transaction cannot define '.from'", "tx", tx);
          (0, index_js_3.assertArgument)(result.from.toLowerCase() === (tx.from || "").toLowerCase(), "from mismatch", "tx", tx);
        }
        return result;
      }
    };
    _type = new WeakMap();
    _to = new WeakMap();
    _data = new WeakMap();
    _nonce = new WeakMap();
    _gasLimit = new WeakMap();
    _gasPrice = new WeakMap();
    _maxPriorityFeePerGas = new WeakMap();
    _maxFeePerGas = new WeakMap();
    _value = new WeakMap();
    _chainId = new WeakMap();
    _sig = new WeakMap();
    _accessList = new WeakMap();
    _maxFeePerBlobGas = new WeakMap();
    _blobVersionedHashes = new WeakMap();
    _kzg = new WeakMap();
    _blobs = new WeakMap();
    _Transaction_instances = new WeakSet();
    getSerialized_fn = function(signed, sidecar) {
      (0, index_js_3.assert)(!signed || this.signature != null, "cannot serialize unsigned transaction; maybe you meant .unsignedSerialized", "UNSUPPORTED_OPERATION", { operation: ".serialized" });
      const sig = signed ? this.signature : null;
      switch (this.inferType()) {
        case 0:
          return _serializeLegacy(this, sig);
        case 1:
          return _serializeEip2930(this, sig);
        case 2:
          return _serializeEip1559(this, sig);
        case 3:
          return _serializeEip4844(this, sig, sidecar ? this.blobs : null);
      }
      (0, index_js_3.assert)(false, "unsupported transaction type", "UNSUPPORTED_OPERATION", { operation: ".serialized" });
    };
    var Transaction2 = _Transaction;
    exports2.Transaction = Transaction2;
  }
});

// node_modules/ethers/lib.commonjs/transaction/index.js
var require_transaction2 = __commonJS({
  "node_modules/ethers/lib.commonjs/transaction/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Transaction = exports2.recoverAddress = exports2.computeAddress = exports2.accessListify = void 0;
    var accesslist_js_1 = require_accesslist();
    Object.defineProperty(exports2, "accessListify", { enumerable: true, get: function() {
      return accesslist_js_1.accessListify;
    } });
    var address_js_1 = require_address5();
    Object.defineProperty(exports2, "computeAddress", { enumerable: true, get: function() {
      return address_js_1.computeAddress;
    } });
    Object.defineProperty(exports2, "recoverAddress", { enumerable: true, get: function() {
      return address_js_1.recoverAddress;
    } });
    var transaction_js_1 = require_transaction();
    Object.defineProperty(exports2, "Transaction", { enumerable: true, get: function() {
      return transaction_js_1.Transaction;
    } });
  }
});

// node_modules/ethers/lib.commonjs/hash/message.js
var require_message = __commonJS({
  "node_modules/ethers/lib.commonjs/hash/message.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.verifyMessage = exports2.hashMessage = void 0;
    var index_js_1 = require_crypto4();
    var index_js_2 = require_constants2();
    var index_js_3 = require_transaction2();
    var index_js_4 = require_utils11();
    function hashMessage(message) {
      if (typeof message === "string") {
        message = (0, index_js_4.toUtf8Bytes)(message);
      }
      return (0, index_js_1.keccak256)((0, index_js_4.concat)([
        (0, index_js_4.toUtf8Bytes)(index_js_2.MessagePrefix),
        (0, index_js_4.toUtf8Bytes)(String(message.length)),
        message
      ]));
    }
    exports2.hashMessage = hashMessage;
    function verifyMessage(message, sig) {
      const digest = hashMessage(message);
      return (0, index_js_3.recoverAddress)(digest, sig);
    }
    exports2.verifyMessage = verifyMessage;
  }
});

// node_modules/ethers/lib.commonjs/hash/solidity.js
var require_solidity = __commonJS({
  "node_modules/ethers/lib.commonjs/hash/solidity.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.solidityPackedSha256 = exports2.solidityPackedKeccak256 = exports2.solidityPacked = void 0;
    var index_js_1 = require_address3();
    var index_js_2 = require_crypto4();
    var index_js_3 = require_utils11();
    var regexBytes = new RegExp("^bytes([0-9]+)$");
    var regexNumber = new RegExp("^(u?int)([0-9]*)$");
    var regexArray = new RegExp("^(.*)\\[([0-9]*)\\]$");
    function _pack(type2, value, isArray) {
      switch (type2) {
        case "address":
          if (isArray) {
            return (0, index_js_3.getBytes)((0, index_js_3.zeroPadValue)(value, 32));
          }
          return (0, index_js_3.getBytes)((0, index_js_1.getAddress)(value));
        case "string":
          return (0, index_js_3.toUtf8Bytes)(value);
        case "bytes":
          return (0, index_js_3.getBytes)(value);
        case "bool":
          value = !!value ? "0x01" : "0x00";
          if (isArray) {
            return (0, index_js_3.getBytes)((0, index_js_3.zeroPadValue)(value, 32));
          }
          return (0, index_js_3.getBytes)(value);
      }
      let match = type2.match(regexNumber);
      if (match) {
        let signed = match[1] === "int";
        let size = parseInt(match[2] || "256");
        (0, index_js_3.assertArgument)((!match[2] || match[2] === String(size)) && size % 8 === 0 && size !== 0 && size <= 256, "invalid number type", "type", type2);
        if (isArray) {
          size = 256;
        }
        if (signed) {
          value = (0, index_js_3.toTwos)(value, size);
        }
        return (0, index_js_3.getBytes)((0, index_js_3.zeroPadValue)((0, index_js_3.toBeArray)(value), size / 8));
      }
      match = type2.match(regexBytes);
      if (match) {
        const size = parseInt(match[1]);
        (0, index_js_3.assertArgument)(String(size) === match[1] && size !== 0 && size <= 32, "invalid bytes type", "type", type2);
        (0, index_js_3.assertArgument)((0, index_js_3.dataLength)(value) === size, `invalid value for ${type2}`, "value", value);
        if (isArray) {
          return (0, index_js_3.getBytes)((0, index_js_3.zeroPadBytes)(value, 32));
        }
        return value;
      }
      match = type2.match(regexArray);
      if (match && Array.isArray(value)) {
        const baseType = match[1];
        const count = parseInt(match[2] || String(value.length));
        (0, index_js_3.assertArgument)(count === value.length, `invalid array length for ${type2}`, "value", value);
        const result = [];
        value.forEach(function(value2) {
          result.push(_pack(baseType, value2, true));
        });
        return (0, index_js_3.getBytes)((0, index_js_3.concat)(result));
      }
      (0, index_js_3.assertArgument)(false, "invalid type", "type", type2);
    }
    function solidityPacked(types, values) {
      (0, index_js_3.assertArgument)(types.length === values.length, "wrong number of values; expected ${ types.length }", "values", values);
      const tight = [];
      types.forEach(function(type2, index) {
        tight.push(_pack(type2, values[index]));
      });
      return (0, index_js_3.hexlify)((0, index_js_3.concat)(tight));
    }
    exports2.solidityPacked = solidityPacked;
    function solidityPackedKeccak256(types, values) {
      return (0, index_js_2.keccak256)(solidityPacked(types, values));
    }
    exports2.solidityPackedKeccak256 = solidityPackedKeccak256;
    function solidityPackedSha256(types, values) {
      return (0, index_js_2.sha256)(solidityPacked(types, values));
    }
    exports2.solidityPackedSha256 = solidityPackedSha256;
  }
});

// node_modules/ethers/lib.commonjs/hash/typed-data.js
var require_typed_data = __commonJS({
  "node_modules/ethers/lib.commonjs/hash/typed-data.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.verifyTypedData = exports2.TypedDataEncoder = void 0;
    var index_js_1 = require_address3();
    var index_js_2 = require_crypto4();
    var index_js_3 = require_transaction2();
    var index_js_4 = require_utils11();
    var id_js_1 = require_id();
    var padding = new Uint8Array(32);
    padding.fill(0);
    var BN__1 = BigInt(-1);
    var BN_0 = BigInt(0);
    var BN_1 = BigInt(1);
    var BN_MAX_UINT256 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    function hexPadRight(value) {
      const bytes = (0, index_js_4.getBytes)(value);
      const padOffset = bytes.length % 32;
      if (padOffset) {
        return (0, index_js_4.concat)([bytes, padding.slice(padOffset)]);
      }
      return (0, index_js_4.hexlify)(bytes);
    }
    var hexTrue = (0, index_js_4.toBeHex)(BN_1, 32);
    var hexFalse = (0, index_js_4.toBeHex)(BN_0, 32);
    var domainFieldTypes = {
      name: "string",
      version: "string",
      chainId: "uint256",
      verifyingContract: "address",
      salt: "bytes32"
    };
    var domainFieldNames = [
      "name",
      "version",
      "chainId",
      "verifyingContract",
      "salt"
    ];
    function checkString(key) {
      return function(value) {
        (0, index_js_4.assertArgument)(typeof value === "string", `invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);
        return value;
      };
    }
    var domainChecks = {
      name: checkString("name"),
      version: checkString("version"),
      chainId: function(_value) {
        const value = (0, index_js_4.getBigInt)(_value, "domain.chainId");
        (0, index_js_4.assertArgument)(value >= 0, "invalid chain ID", "domain.chainId", _value);
        if (Number.isSafeInteger(value)) {
          return Number(value);
        }
        return (0, index_js_4.toQuantity)(value);
      },
      verifyingContract: function(value) {
        try {
          return (0, index_js_1.getAddress)(value).toLowerCase();
        } catch (error) {
        }
        (0, index_js_4.assertArgument)(false, `invalid domain value "verifyingContract"`, "domain.verifyingContract", value);
      },
      salt: function(value) {
        const bytes = (0, index_js_4.getBytes)(value, "domain.salt");
        (0, index_js_4.assertArgument)(bytes.length === 32, `invalid domain value "salt"`, "domain.salt", value);
        return (0, index_js_4.hexlify)(bytes);
      }
    };
    function getBaseEncoder(type2) {
      {
        const match = type2.match(/^(u?)int(\d+)$/);
        if (match) {
          const signed = match[1] === "";
          const width = parseInt(match[2]);
          (0, index_js_4.assertArgument)(width % 8 === 0 && width !== 0 && width <= 256 && match[2] === String(width), "invalid numeric width", "type", type2);
          const boundsUpper = (0, index_js_4.mask)(BN_MAX_UINT256, signed ? width - 1 : width);
          const boundsLower = signed ? (boundsUpper + BN_1) * BN__1 : BN_0;
          return function(_value) {
            const value = (0, index_js_4.getBigInt)(_value, "value");
            (0, index_js_4.assertArgument)(value >= boundsLower && value <= boundsUpper, `value out-of-bounds for ${type2}`, "value", value);
            return (0, index_js_4.toBeHex)(signed ? (0, index_js_4.toTwos)(value, 256) : value, 32);
          };
        }
      }
      {
        const match = type2.match(/^bytes(\d+)$/);
        if (match) {
          const width = parseInt(match[1]);
          (0, index_js_4.assertArgument)(width !== 0 && width <= 32 && match[1] === String(width), "invalid bytes width", "type", type2);
          return function(value) {
            const bytes = (0, index_js_4.getBytes)(value);
            (0, index_js_4.assertArgument)(bytes.length === width, `invalid length for ${type2}`, "value", value);
            return hexPadRight(value);
          };
        }
      }
      switch (type2) {
        case "address":
          return function(value) {
            return (0, index_js_4.zeroPadValue)((0, index_js_1.getAddress)(value), 32);
          };
        case "bool":
          return function(value) {
            return !value ? hexFalse : hexTrue;
          };
        case "bytes":
          return function(value) {
            return (0, index_js_2.keccak256)(value);
          };
        case "string":
          return function(value) {
            return (0, id_js_1.id)(value);
          };
      }
      return null;
    }
    function encodeType(name, fields) {
      return `${name}(${fields.map(({ name: name2, type: type2 }) => type2 + " " + name2).join(",")})`;
    }
    function splitArray(type2) {
      const match = type2.match(/^([^\x5b]*)((\x5b\d*\x5d)*)(\x5b(\d*)\x5d)$/);
      if (match) {
        return {
          base: match[1],
          index: match[2] + match[4],
          array: {
            base: match[1],
            prefix: match[1] + match[2],
            count: match[5] ? parseInt(match[5]) : -1
          }
        };
      }
      return { base: type2 };
    }
    var _types, _fullTypes, _encoderCache, _TypedDataEncoder_instances, getEncoder_fn;
    var _TypedDataEncoder = class _TypedDataEncoder {
      /**
       *  Create a new **TypedDataEncoder** for %%types%%.
       *
       *  This performs all necessary checking that types are valid and
       *  do not violate the [[link-eip-712]] structural constraints as
       *  well as computes the [[primaryType]].
       */
      constructor(_types2) {
        __privateAdd(this, _TypedDataEncoder_instances);
        /**
         *  The primary type for the structured [[types]].
         *
         *  This is derived automatically from the [[types]], since no
         *  recursion is possible, once the DAG for the types is consturcted
         *  internally, the primary type must be the only remaining type with
         *  no parent nodes.
         */
        __publicField(this, "primaryType");
        __privateAdd(this, _types);
        __privateAdd(this, _fullTypes);
        __privateAdd(this, _encoderCache);
        __privateSet(this, _fullTypes, /* @__PURE__ */ new Map());
        __privateSet(this, _encoderCache, /* @__PURE__ */ new Map());
        const links = /* @__PURE__ */ new Map();
        const parents = /* @__PURE__ */ new Map();
        const subtypes = /* @__PURE__ */ new Map();
        const types = {};
        Object.keys(_types2).forEach((type2) => {
          types[type2] = _types2[type2].map(({ name, type: type3 }) => {
            let { base, index } = splitArray(type3);
            if (base === "int" && !_types2["int"]) {
              base = "int256";
            }
            if (base === "uint" && !_types2["uint"]) {
              base = "uint256";
            }
            return { name, type: base + (index || "") };
          });
          links.set(type2, /* @__PURE__ */ new Set());
          parents.set(type2, []);
          subtypes.set(type2, /* @__PURE__ */ new Set());
        });
        __privateSet(this, _types, JSON.stringify(types));
        for (const name in types) {
          const uniqueNames = /* @__PURE__ */ new Set();
          for (const field of types[name]) {
            (0, index_js_4.assertArgument)(!uniqueNames.has(field.name), `duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, "types", _types2);
            uniqueNames.add(field.name);
            const baseType = splitArray(field.type).base;
            (0, index_js_4.assertArgument)(baseType !== name, `circular type reference to ${JSON.stringify(baseType)}`, "types", _types2);
            const encoder = getBaseEncoder(baseType);
            if (encoder) {
              continue;
            }
            (0, index_js_4.assertArgument)(parents.has(baseType), `unknown type ${JSON.stringify(baseType)}`, "types", _types2);
            parents.get(baseType).push(name);
            links.get(name).add(baseType);
          }
        }
        const primaryTypes = Array.from(parents.keys()).filter((n) => parents.get(n).length === 0);
        (0, index_js_4.assertArgument)(primaryTypes.length !== 0, "missing primary type", "types", _types2);
        (0, index_js_4.assertArgument)(primaryTypes.length === 1, `ambiguous primary types or unused types: ${primaryTypes.map((t) => JSON.stringify(t)).join(", ")}`, "types", _types2);
        (0, index_js_4.defineProperties)(this, { primaryType: primaryTypes[0] });
        function checkCircular(type2, found) {
          (0, index_js_4.assertArgument)(!found.has(type2), `circular type reference to ${JSON.stringify(type2)}`, "types", _types2);
          found.add(type2);
          for (const child of links.get(type2)) {
            if (!parents.has(child)) {
              continue;
            }
            checkCircular(child, found);
            for (const subtype of found) {
              subtypes.get(subtype).add(child);
            }
          }
          found.delete(type2);
        }
        checkCircular(this.primaryType, /* @__PURE__ */ new Set());
        for (const [name, set] of subtypes) {
          const st = Array.from(set);
          st.sort();
          __privateGet(this, _fullTypes).set(name, encodeType(name, types[name]) + st.map((t) => encodeType(t, types[t])).join(""));
        }
      }
      /**
       *  The types.
       */
      get types() {
        return JSON.parse(__privateGet(this, _types));
      }
      /**
       *  Returnthe encoder for the specific %%type%%.
       */
      getEncoder(type2) {
        let encoder = __privateGet(this, _encoderCache).get(type2);
        if (!encoder) {
          encoder = __privateMethod(this, _TypedDataEncoder_instances, getEncoder_fn).call(this, type2);
          __privateGet(this, _encoderCache).set(type2, encoder);
        }
        return encoder;
      }
      /**
       *  Return the full type for %%name%%.
       */
      encodeType(name) {
        const result = __privateGet(this, _fullTypes).get(name);
        (0, index_js_4.assertArgument)(result, `unknown type: ${JSON.stringify(name)}`, "name", name);
        return result;
      }
      /**
       *  Return the encoded %%value%% for the %%type%%.
       */
      encodeData(type2, value) {
        return this.getEncoder(type2)(value);
      }
      /**
       *  Returns the hash of %%value%% for the type of %%name%%.
       */
      hashStruct(name, value) {
        return (0, index_js_2.keccak256)(this.encodeData(name, value));
      }
      /**
       *  Return the fulled encoded %%value%% for the [[types]].
       */
      encode(value) {
        return this.encodeData(this.primaryType, value);
      }
      /**
       *  Return the hash of the fully encoded %%value%% for the [[types]].
       */
      hash(value) {
        return this.hashStruct(this.primaryType, value);
      }
      /**
       *  @_ignore:
       */
      _visit(type2, value, callback) {
        {
          const encoder = getBaseEncoder(type2);
          if (encoder) {
            return callback(type2, value);
          }
        }
        const array2 = splitArray(type2).array;
        if (array2) {
          (0, index_js_4.assertArgument)(array2.count === -1 || array2.count === value.length, `array length mismatch; expected length ${array2.count}`, "value", value);
          return value.map((v) => this._visit(array2.prefix, v, callback));
        }
        const fields = this.types[type2];
        if (fields) {
          return fields.reduce((accum, { name, type: type3 }) => {
            accum[name] = this._visit(type3, value[name], callback);
            return accum;
          }, {});
        }
        (0, index_js_4.assertArgument)(false, `unknown type: ${type2}`, "type", type2);
      }
      /**
       *  Call %%calback%% for each value in %%value%%, passing the type and
       *  component within %%value%%.
       *
       *  This is useful for replacing addresses or other transformation that
       *  may be desired on each component, based on its type.
       */
      visit(value, callback) {
        return this._visit(this.primaryType, value, callback);
      }
      /**
       *  Create a new **TypedDataEncoder** for %%types%%.
       */
      static from(types) {
        return new _TypedDataEncoder(types);
      }
      /**
       *  Return the primary type for %%types%%.
       */
      static getPrimaryType(types) {
        return _TypedDataEncoder.from(types).primaryType;
      }
      /**
       *  Return the hashed struct for %%value%% using %%types%% and %%name%%.
       */
      static hashStruct(name, types, value) {
        return _TypedDataEncoder.from(types).hashStruct(name, value);
      }
      /**
       *  Return the domain hash for %%domain%%.
       */
      static hashDomain(domain) {
        const domainFields = [];
        for (const name in domain) {
          if (domain[name] == null) {
            continue;
          }
          const type2 = domainFieldTypes[name];
          (0, index_js_4.assertArgument)(type2, `invalid typed-data domain key: ${JSON.stringify(name)}`, "domain", domain);
          domainFields.push({ name, type: type2 });
        }
        domainFields.sort((a, b) => {
          return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);
        });
        return _TypedDataEncoder.hashStruct("EIP712Domain", { EIP712Domain: domainFields }, domain);
      }
      /**
       *  Return the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.
       */
      static encode(domain, types, value) {
        return (0, index_js_4.concat)([
          "0x1901",
          _TypedDataEncoder.hashDomain(domain),
          _TypedDataEncoder.from(types).hash(value)
        ]);
      }
      /**
       *  Return the hash of the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.
       */
      static hash(domain, types, value) {
        return (0, index_js_2.keccak256)(_TypedDataEncoder.encode(domain, types, value));
      }
      // Replaces all address types with ENS names with their looked up address
      /**
       * Resolves to the value from resolving all addresses in %%value%% for
       * %%types%% and the %%domain%%.
       */
      static async resolveNames(domain, types, value, resolveName) {
        domain = Object.assign({}, domain);
        for (const key in domain) {
          if (domain[key] == null) {
            delete domain[key];
          }
        }
        const ensCache = {};
        if (domain.verifyingContract && !(0, index_js_4.isHexString)(domain.verifyingContract, 20)) {
          ensCache[domain.verifyingContract] = "0x";
        }
        const encoder = _TypedDataEncoder.from(types);
        encoder.visit(value, (type2, value2) => {
          if (type2 === "address" && !(0, index_js_4.isHexString)(value2, 20)) {
            ensCache[value2] = "0x";
          }
          return value2;
        });
        for (const name in ensCache) {
          ensCache[name] = await resolveName(name);
        }
        if (domain.verifyingContract && ensCache[domain.verifyingContract]) {
          domain.verifyingContract = ensCache[domain.verifyingContract];
        }
        value = encoder.visit(value, (type2, value2) => {
          if (type2 === "address" && ensCache[value2]) {
            return ensCache[value2];
          }
          return value2;
        });
        return { domain, value };
      }
      /**
       *  Returns the JSON-encoded payload expected by nodes which implement
       *  the JSON-RPC [[link-eip-712]] method.
       */
      static getPayload(domain, types, value) {
        _TypedDataEncoder.hashDomain(domain);
        const domainValues = {};
        const domainTypes = [];
        domainFieldNames.forEach((name) => {
          const value2 = domain[name];
          if (value2 == null) {
            return;
          }
          domainValues[name] = domainChecks[name](value2);
          domainTypes.push({ name, type: domainFieldTypes[name] });
        });
        const encoder = _TypedDataEncoder.from(types);
        types = encoder.types;
        const typesWithDomain = Object.assign({}, types);
        (0, index_js_4.assertArgument)(typesWithDomain.EIP712Domain == null, "types must not contain EIP712Domain type", "types.EIP712Domain", types);
        typesWithDomain.EIP712Domain = domainTypes;
        encoder.encode(value);
        return {
          types: typesWithDomain,
          domain: domainValues,
          primaryType: encoder.primaryType,
          message: encoder.visit(value, (type2, value2) => {
            if (type2.match(/^bytes(\d*)/)) {
              return (0, index_js_4.hexlify)((0, index_js_4.getBytes)(value2));
            }
            if (type2.match(/^u?int/)) {
              return (0, index_js_4.getBigInt)(value2).toString();
            }
            switch (type2) {
              case "address":
                return value2.toLowerCase();
              case "bool":
                return !!value2;
              case "string":
                (0, index_js_4.assertArgument)(typeof value2 === "string", "invalid string", "value", value2);
                return value2;
            }
            (0, index_js_4.assertArgument)(false, "unsupported type", "type", type2);
          })
        };
      }
    };
    _types = new WeakMap();
    _fullTypes = new WeakMap();
    _encoderCache = new WeakMap();
    _TypedDataEncoder_instances = new WeakSet();
    getEncoder_fn = function(type2) {
      {
        const encoder = getBaseEncoder(type2);
        if (encoder) {
          return encoder;
        }
      }
      const array2 = splitArray(type2).array;
      if (array2) {
        const subtype = array2.prefix;
        const subEncoder = this.getEncoder(subtype);
        return (value) => {
          (0, index_js_4.assertArgument)(array2.count === -1 || array2.count === value.length, `array length mismatch; expected length ${array2.count}`, "value", value);
          let result = value.map(subEncoder);
          if (__privateGet(this, _fullTypes).has(subtype)) {
            result = result.map(index_js_2.keccak256);
          }
          return (0, index_js_2.keccak256)((0, index_js_4.concat)(result));
        };
      }
      const fields = this.types[type2];
      if (fields) {
        const encodedType = (0, id_js_1.id)(__privateGet(this, _fullTypes).get(type2));
        return (value) => {
          const values = fields.map(({ name, type: type3 }) => {
            const result = this.getEncoder(type3)(value[name]);
            if (__privateGet(this, _fullTypes).has(type3)) {
              return (0, index_js_2.keccak256)(result);
            }
            return result;
          });
          values.unshift(encodedType);
          return (0, index_js_4.concat)(values);
        };
      }
      (0, index_js_4.assertArgument)(false, `unknown type: ${type2}`, "type", type2);
    };
    var TypedDataEncoder = _TypedDataEncoder;
    exports2.TypedDataEncoder = TypedDataEncoder;
    function verifyTypedData(domain, types, value, signature2) {
      return (0, index_js_3.recoverAddress)(TypedDataEncoder.hash(domain, types, value), signature2);
    }
    exports2.verifyTypedData = verifyTypedData;
  }
});

// node_modules/ethers/lib.commonjs/hash/index.js
var require_hash2 = __commonJS({
  "node_modules/ethers/lib.commonjs/hash/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.verifyTypedData = exports2.TypedDataEncoder = exports2.solidityPackedSha256 = exports2.solidityPackedKeccak256 = exports2.solidityPacked = exports2.verifyMessage = exports2.hashMessage = exports2.dnsEncode = exports2.namehash = exports2.isValidName = exports2.ensNormalize = exports2.id = void 0;
    var id_js_1 = require_id();
    Object.defineProperty(exports2, "id", { enumerable: true, get: function() {
      return id_js_1.id;
    } });
    var namehash_js_1 = require_namehash();
    Object.defineProperty(exports2, "ensNormalize", { enumerable: true, get: function() {
      return namehash_js_1.ensNormalize;
    } });
    Object.defineProperty(exports2, "isValidName", { enumerable: true, get: function() {
      return namehash_js_1.isValidName;
    } });
    Object.defineProperty(exports2, "namehash", { enumerable: true, get: function() {
      return namehash_js_1.namehash;
    } });
    Object.defineProperty(exports2, "dnsEncode", { enumerable: true, get: function() {
      return namehash_js_1.dnsEncode;
    } });
    var message_js_1 = require_message();
    Object.defineProperty(exports2, "hashMessage", { enumerable: true, get: function() {
      return message_js_1.hashMessage;
    } });
    Object.defineProperty(exports2, "verifyMessage", { enumerable: true, get: function() {
      return message_js_1.verifyMessage;
    } });
    var solidity_js_1 = require_solidity();
    Object.defineProperty(exports2, "solidityPacked", { enumerable: true, get: function() {
      return solidity_js_1.solidityPacked;
    } });
    Object.defineProperty(exports2, "solidityPackedKeccak256", { enumerable: true, get: function() {
      return solidity_js_1.solidityPackedKeccak256;
    } });
    Object.defineProperty(exports2, "solidityPackedSha256", { enumerable: true, get: function() {
      return solidity_js_1.solidityPackedSha256;
    } });
    var typed_data_js_1 = require_typed_data();
    Object.defineProperty(exports2, "TypedDataEncoder", { enumerable: true, get: function() {
      return typed_data_js_1.TypedDataEncoder;
    } });
    Object.defineProperty(exports2, "verifyTypedData", { enumerable: true, get: function() {
      return typed_data_js_1.verifyTypedData;
    } });
  }
});

// node_modules/ethers/lib.commonjs/abi/fragments.js
var require_fragments = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/fragments.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StructFragment = exports2.FunctionFragment = exports2.FallbackFragment = exports2.ConstructorFragment = exports2.EventFragment = exports2.ErrorFragment = exports2.NamedFragment = exports2.Fragment = exports2.ParamType = void 0;
    var index_js_1 = require_utils11();
    var index_js_2 = require_hash2();
    function setify(items) {
      const result = /* @__PURE__ */ new Set();
      items.forEach((k) => result.add(k));
      return Object.freeze(result);
    }
    var _kwVisibDeploy = "external public payable override";
    var KwVisibDeploy = setify(_kwVisibDeploy.split(" "));
    var _kwVisib = "constant external internal payable private public pure view override";
    var KwVisib = setify(_kwVisib.split(" "));
    var _kwTypes = "constructor error event fallback function receive struct";
    var KwTypes = setify(_kwTypes.split(" "));
    var _kwModifiers = "calldata memory storage payable indexed";
    var KwModifiers = setify(_kwModifiers.split(" "));
    var _kwOther = "tuple returns";
    var _keywords = [_kwTypes, _kwModifiers, _kwOther, _kwVisib].join(" ");
    var Keywords = setify(_keywords.split(" "));
    var SimpleTokens = {
      "(": "OPEN_PAREN",
      ")": "CLOSE_PAREN",
      "[": "OPEN_BRACKET",
      "]": "CLOSE_BRACKET",
      ",": "COMMA",
      "@": "AT"
    };
    var regexWhitespacePrefix = new RegExp("^(\\s*)");
    var regexNumberPrefix = new RegExp("^([0-9]+)");
    var regexIdPrefix = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)");
    var regexId = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)$");
    var regexType = new RegExp("^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$");
    var _offset, _tokens, _TokenString_instances, subTokenString_fn;
    var _TokenString = class _TokenString {
      constructor(tokens) {
        __privateAdd(this, _TokenString_instances);
        __privateAdd(this, _offset);
        __privateAdd(this, _tokens);
        __privateSet(this, _offset, 0);
        __privateSet(this, _tokens, tokens.slice());
      }
      get offset() {
        return __privateGet(this, _offset);
      }
      get length() {
        return __privateGet(this, _tokens).length - __privateGet(this, _offset);
      }
      clone() {
        return new _TokenString(__privateGet(this, _tokens));
      }
      reset() {
        __privateSet(this, _offset, 0);
      }
      // Pops and returns the value of the next token, if it is a keyword in allowed; throws if out of tokens
      popKeyword(allowed) {
        const top = this.peek();
        if (top.type !== "KEYWORD" || !allowed.has(top.text)) {
          throw new Error(`expected keyword ${top.text}`);
        }
        return this.pop().text;
      }
      // Pops and returns the value of the next token if it is `type`; throws if out of tokens
      popType(type2) {
        if (this.peek().type !== type2) {
          const top = this.peek();
          throw new Error(`expected ${type2}; got ${top.type} ${JSON.stringify(top.text)}`);
        }
        return this.pop().text;
      }
      // Pops and returns a "(" TOKENS ")"
      popParen() {
        const top = this.peek();
        if (top.type !== "OPEN_PAREN") {
          throw new Error("bad start");
        }
        const result = __privateMethod(this, _TokenString_instances, subTokenString_fn).call(this, __privateGet(this, _offset) + 1, top.match + 1);
        __privateSet(this, _offset, top.match + 1);
        return result;
      }
      // Pops and returns the items within "(" ITEM1 "," ITEM2 "," ... ")"
      popParams() {
        const top = this.peek();
        if (top.type !== "OPEN_PAREN") {
          throw new Error("bad start");
        }
        const result = [];
        while (__privateGet(this, _offset) < top.match - 1) {
          const link = this.peek().linkNext;
          result.push(__privateMethod(this, _TokenString_instances, subTokenString_fn).call(this, __privateGet(this, _offset) + 1, link));
          __privateSet(this, _offset, link);
        }
        __privateSet(this, _offset, top.match + 1);
        return result;
      }
      // Returns the top Token, throwing if out of tokens
      peek() {
        if (__privateGet(this, _offset) >= __privateGet(this, _tokens).length) {
          throw new Error("out-of-bounds");
        }
        return __privateGet(this, _tokens)[__privateGet(this, _offset)];
      }
      // Returns the next value, if it is a keyword in `allowed`
      peekKeyword(allowed) {
        const top = this.peekType("KEYWORD");
        return top != null && allowed.has(top) ? top : null;
      }
      // Returns the value of the next token if it is `type`
      peekType(type2) {
        if (this.length === 0) {
          return null;
        }
        const top = this.peek();
        return top.type === type2 ? top.text : null;
      }
      // Returns the next token; throws if out of tokens
      pop() {
        const result = this.peek();
        __privateWrapper(this, _offset)._++;
        return result;
      }
      toString() {
        const tokens = [];
        for (let i = __privateGet(this, _offset); i < __privateGet(this, _tokens).length; i++) {
          const token = __privateGet(this, _tokens)[i];
          tokens.push(`${token.type}:${token.text}`);
        }
        return `<TokenString ${tokens.join(" ")}>`;
      }
    };
    _offset = new WeakMap();
    _tokens = new WeakMap();
    _TokenString_instances = new WeakSet();
    subTokenString_fn = function(from = 0, to = 0) {
      return new _TokenString(__privateGet(this, _tokens).slice(from, to).map((t) => {
        return Object.freeze(Object.assign({}, t, {
          match: t.match - from,
          linkBack: t.linkBack - from,
          linkNext: t.linkNext - from
        }));
      }));
    };
    var TokenString = _TokenString;
    function lex(text) {
      const tokens = [];
      const throwError = (message) => {
        const token = offset2 < text.length ? JSON.stringify(text[offset2]) : "$EOI";
        throw new Error(`invalid token ${token} at ${offset2}: ${message}`);
      };
      let brackets = [];
      let commas = [];
      let offset2 = 0;
      while (offset2 < text.length) {
        let cur = text.substring(offset2);
        let match = cur.match(regexWhitespacePrefix);
        if (match) {
          offset2 += match[1].length;
          cur = text.substring(offset2);
        }
        const token = { depth: brackets.length, linkBack: -1, linkNext: -1, match: -1, type: "", text: "", offset: offset2, value: -1 };
        tokens.push(token);
        let type2 = SimpleTokens[cur[0]] || "";
        if (type2) {
          token.type = type2;
          token.text = cur[0];
          offset2++;
          if (type2 === "OPEN_PAREN") {
            brackets.push(tokens.length - 1);
            commas.push(tokens.length - 1);
          } else if (type2 == "CLOSE_PAREN") {
            if (brackets.length === 0) {
              throwError("no matching open bracket");
            }
            token.match = brackets.pop();
            tokens[token.match].match = tokens.length - 1;
            token.depth--;
            token.linkBack = commas.pop();
            tokens[token.linkBack].linkNext = tokens.length - 1;
          } else if (type2 === "COMMA") {
            token.linkBack = commas.pop();
            tokens[token.linkBack].linkNext = tokens.length - 1;
            commas.push(tokens.length - 1);
          } else if (type2 === "OPEN_BRACKET") {
            token.type = "BRACKET";
          } else if (type2 === "CLOSE_BRACKET") {
            let suffix = tokens.pop().text;
            if (tokens.length > 0 && tokens[tokens.length - 1].type === "NUMBER") {
              const value = tokens.pop().text;
              suffix = value + suffix;
              tokens[tokens.length - 1].value = (0, index_js_1.getNumber)(value);
            }
            if (tokens.length === 0 || tokens[tokens.length - 1].type !== "BRACKET") {
              throw new Error("missing opening bracket");
            }
            tokens[tokens.length - 1].text += suffix;
          }
          continue;
        }
        match = cur.match(regexIdPrefix);
        if (match) {
          token.text = match[1];
          offset2 += token.text.length;
          if (Keywords.has(token.text)) {
            token.type = "KEYWORD";
            continue;
          }
          if (token.text.match(regexType)) {
            token.type = "TYPE";
            continue;
          }
          token.type = "ID";
          continue;
        }
        match = cur.match(regexNumberPrefix);
        if (match) {
          token.text = match[1];
          token.type = "NUMBER";
          offset2 += token.text.length;
          continue;
        }
        throw new Error(`unexpected token ${JSON.stringify(cur[0])} at position ${offset2}`);
      }
      return new TokenString(tokens.map((t) => Object.freeze(t)));
    }
    function allowSingle(set, allowed) {
      let included = [];
      for (const key in allowed.keys()) {
        if (set.has(key)) {
          included.push(key);
        }
      }
      if (included.length > 1) {
        throw new Error(`conflicting types: ${included.join(", ")}`);
      }
    }
    function consumeName(type2, tokens) {
      if (tokens.peekKeyword(KwTypes)) {
        const keyword = tokens.pop().text;
        if (keyword !== type2) {
          throw new Error(`expected ${type2}, got ${keyword}`);
        }
      }
      return tokens.popType("ID");
    }
    function consumeKeywords(tokens, allowed) {
      const keywords = /* @__PURE__ */ new Set();
      while (true) {
        const keyword = tokens.peekType("KEYWORD");
        if (keyword == null || allowed && !allowed.has(keyword)) {
          break;
        }
        tokens.pop();
        if (keywords.has(keyword)) {
          throw new Error(`duplicate keywords: ${JSON.stringify(keyword)}`);
        }
        keywords.add(keyword);
      }
      return Object.freeze(keywords);
    }
    function consumeMutability(tokens) {
      let modifiers = consumeKeywords(tokens, KwVisib);
      allowSingle(modifiers, setify("constant payable nonpayable".split(" ")));
      allowSingle(modifiers, setify("pure view payable nonpayable".split(" ")));
      if (modifiers.has("view")) {
        return "view";
      }
      if (modifiers.has("pure")) {
        return "pure";
      }
      if (modifiers.has("payable")) {
        return "payable";
      }
      if (modifiers.has("nonpayable")) {
        return "nonpayable";
      }
      if (modifiers.has("constant")) {
        return "view";
      }
      return "nonpayable";
    }
    function consumeParams(tokens, allowIndexed) {
      return tokens.popParams().map((t) => ParamType.from(t, allowIndexed));
    }
    function consumeGas(tokens) {
      if (tokens.peekType("AT")) {
        tokens.pop();
        if (tokens.peekType("NUMBER")) {
          return (0, index_js_1.getBigInt)(tokens.pop().text);
        }
        throw new Error("invalid gas");
      }
      return null;
    }
    function consumeEoi(tokens) {
      if (tokens.length) {
        throw new Error(`unexpected tokens at offset ${tokens.offset}: ${tokens.toString()}`);
      }
    }
    var regexArrayType = new RegExp(/^(.*)\[([0-9]*)\]$/);
    function verifyBasicType(type2) {
      const match = type2.match(regexType);
      (0, index_js_1.assertArgument)(match, "invalid type", "type", type2);
      if (type2 === "uint") {
        return "uint256";
      }
      if (type2 === "int") {
        return "int256";
      }
      if (match[2]) {
        const length = parseInt(match[2]);
        (0, index_js_1.assertArgument)(length !== 0 && length <= 32, "invalid bytes length", "type", type2);
      } else if (match[3]) {
        const size = parseInt(match[3]);
        (0, index_js_1.assertArgument)(size !== 0 && size <= 256 && size % 8 === 0, "invalid numeric width", "type", type2);
      }
      return type2;
    }
    var _guard = {};
    var internal = Symbol.for("_ethers_internal");
    var ParamTypeInternal = "_ParamTypeInternal";
    var ErrorFragmentInternal = "_ErrorInternal";
    var EventFragmentInternal = "_EventInternal";
    var ConstructorFragmentInternal = "_ConstructorInternal";
    var FallbackFragmentInternal = "_FallbackInternal";
    var FunctionFragmentInternal = "_FunctionInternal";
    var StructFragmentInternal = "_StructInternal";
    var _ParamType_instances, walkAsync_fn;
    var _ParamType = class _ParamType {
      /**
       *  @private
       */
      constructor(guard, name, type2, baseType, indexed, components, arrayLength, arrayChildren) {
        __privateAdd(this, _ParamType_instances);
        /**
         *  The local name of the parameter (or ``""`` if unbound)
         */
        __publicField(this, "name");
        /**
         *  The fully qualified type (e.g. ``"address"``, ``"tuple(address)"``,
         *  ``"uint256[3][]"``)
         */
        __publicField(this, "type");
        /**
         *  The base type (e.g. ``"address"``, ``"tuple"``, ``"array"``)
         */
        __publicField(this, "baseType");
        /**
         *  True if the parameters is indexed.
         *
         *  For non-indexable types this is ``null``.
         */
        __publicField(this, "indexed");
        /**
         *  The components for the tuple.
         *
         *  For non-tuple types this is ``null``.
         */
        __publicField(this, "components");
        /**
         *  The array length, or ``-1`` for dynamic-lengthed arrays.
         *
         *  For non-array types this is ``null``.
         */
        __publicField(this, "arrayLength");
        /**
         *  The type of each child in the array.
         *
         *  For non-array types this is ``null``.
         */
        __publicField(this, "arrayChildren");
        (0, index_js_1.assertPrivate)(guard, _guard, "ParamType");
        Object.defineProperty(this, internal, { value: ParamTypeInternal });
        if (components) {
          components = Object.freeze(components.slice());
        }
        if (baseType === "array") {
          if (arrayLength == null || arrayChildren == null) {
            throw new Error("");
          }
        } else if (arrayLength != null || arrayChildren != null) {
          throw new Error("");
        }
        if (baseType === "tuple") {
          if (components == null) {
            throw new Error("");
          }
        } else if (components != null) {
          throw new Error("");
        }
        (0, index_js_1.defineProperties)(this, {
          name,
          type: type2,
          baseType,
          indexed,
          components,
          arrayLength,
          arrayChildren
        });
      }
      /**
       *  Return a string representation of this type.
       *
       *  For example,
       *
       *  ``sighash" => "(uint256,address)"``
       *
       *  ``"minimal" => "tuple(uint256,address) indexed"``
       *
       *  ``"full" => "tuple(uint256 foo, address bar) indexed baz"``
       */
      format(format) {
        if (format == null) {
          format = "sighash";
        }
        if (format === "json") {
          const name = this.name || "";
          if (this.isArray()) {
            const result3 = JSON.parse(this.arrayChildren.format("json"));
            result3.name = name;
            result3.type += `[${this.arrayLength < 0 ? "" : String(this.arrayLength)}]`;
            return JSON.stringify(result3);
          }
          const result2 = {
            type: this.baseType === "tuple" ? "tuple" : this.type,
            name
          };
          if (typeof this.indexed === "boolean") {
            result2.indexed = this.indexed;
          }
          if (this.isTuple()) {
            result2.components = this.components.map((c) => JSON.parse(c.format(format)));
          }
          return JSON.stringify(result2);
        }
        let result = "";
        if (this.isArray()) {
          result += this.arrayChildren.format(format);
          result += `[${this.arrayLength < 0 ? "" : String(this.arrayLength)}]`;
        } else {
          if (this.isTuple()) {
            result += "(" + this.components.map((comp) => comp.format(format)).join(format === "full" ? ", " : ",") + ")";
          } else {
            result += this.type;
          }
        }
        if (format !== "sighash") {
          if (this.indexed === true) {
            result += " indexed";
          }
          if (format === "full" && this.name) {
            result += " " + this.name;
          }
        }
        return result;
      }
      /**
       *  Returns true if %%this%% is an Array type.
       *
       *  This provides a type gaurd ensuring that [[arrayChildren]]
       *  and [[arrayLength]] are non-null.
       */
      isArray() {
        return this.baseType === "array";
      }
      /**
       *  Returns true if %%this%% is a Tuple type.
       *
       *  This provides a type gaurd ensuring that [[components]]
       *  is non-null.
       */
      isTuple() {
        return this.baseType === "tuple";
      }
      /**
       *  Returns true if %%this%% is an Indexable type.
       *
       *  This provides a type gaurd ensuring that [[indexed]]
       *  is non-null.
       */
      isIndexable() {
        return this.indexed != null;
      }
      /**
       *  Walks the **ParamType** with %%value%%, calling %%process%%
       *  on each type, destructing the %%value%% recursively.
       */
      walk(value, process2) {
        if (this.isArray()) {
          if (!Array.isArray(value)) {
            throw new Error("invalid array value");
          }
          if (this.arrayLength !== -1 && value.length !== this.arrayLength) {
            throw new Error("array is wrong length");
          }
          const _this = this;
          return value.map((v) => _this.arrayChildren.walk(v, process2));
        }
        if (this.isTuple()) {
          if (!Array.isArray(value)) {
            throw new Error("invalid tuple value");
          }
          if (value.length !== this.components.length) {
            throw new Error("array is wrong length");
          }
          const _this = this;
          return value.map((v, i) => _this.components[i].walk(v, process2));
        }
        return process2(this.type, value);
      }
      /**
       *  Walks the **ParamType** with %%value%%, asynchronously calling
       *  %%process%% on each type, destructing the %%value%% recursively.
       *
       *  This can be used to resolve ENS names by walking and resolving each
       *  ``"address"`` type.
       */
      async walkAsync(value, process2) {
        const promises = [];
        const result = [value];
        __privateMethod(this, _ParamType_instances, walkAsync_fn).call(this, promises, value, process2, (value2) => {
          result[0] = value2;
        });
        if (promises.length) {
          await Promise.all(promises);
        }
        return result[0];
      }
      /**
       *  Creates a new **ParamType** for %%obj%%.
       *
       *  If %%allowIndexed%% then the ``indexed`` keyword is permitted,
       *  otherwise the ``indexed`` keyword will throw an error.
       */
      static from(obj, allowIndexed) {
        if (_ParamType.isParamType(obj)) {
          return obj;
        }
        if (typeof obj === "string") {
          try {
            return _ParamType.from(lex(obj), allowIndexed);
          } catch (error) {
            (0, index_js_1.assertArgument)(false, "invalid param type", "obj", obj);
          }
        } else if (obj instanceof TokenString) {
          let type3 = "", baseType = "";
          let comps = null;
          if (consumeKeywords(obj, setify(["tuple"])).has("tuple") || obj.peekType("OPEN_PAREN")) {
            baseType = "tuple";
            comps = obj.popParams().map((t) => _ParamType.from(t));
            type3 = `tuple(${comps.map((c) => c.format()).join(",")})`;
          } else {
            type3 = verifyBasicType(obj.popType("TYPE"));
            baseType = type3;
          }
          let arrayChildren = null;
          let arrayLength = null;
          while (obj.length && obj.peekType("BRACKET")) {
            const bracket = obj.pop();
            arrayChildren = new _ParamType(_guard, "", type3, baseType, null, comps, arrayLength, arrayChildren);
            arrayLength = bracket.value;
            type3 += bracket.text;
            baseType = "array";
            comps = null;
          }
          let indexed2 = null;
          const keywords = consumeKeywords(obj, KwModifiers);
          if (keywords.has("indexed")) {
            if (!allowIndexed) {
              throw new Error("");
            }
            indexed2 = true;
          }
          const name2 = obj.peekType("ID") ? obj.pop().text : "";
          if (obj.length) {
            throw new Error("leftover tokens");
          }
          return new _ParamType(_guard, name2, type3, baseType, indexed2, comps, arrayLength, arrayChildren);
        }
        const name = obj.name;
        (0, index_js_1.assertArgument)(!name || typeof name === "string" && name.match(regexId), "invalid name", "obj.name", name);
        let indexed = obj.indexed;
        if (indexed != null) {
          (0, index_js_1.assertArgument)(allowIndexed, "parameter cannot be indexed", "obj.indexed", obj.indexed);
          indexed = !!indexed;
        }
        let type2 = obj.type;
        let arrayMatch = type2.match(regexArrayType);
        if (arrayMatch) {
          const arrayLength = parseInt(arrayMatch[2] || "-1");
          const arrayChildren = _ParamType.from({
            type: arrayMatch[1],
            components: obj.components
          });
          return new _ParamType(_guard, name || "", type2, "array", indexed, null, arrayLength, arrayChildren);
        }
        if (type2 === "tuple" || type2.startsWith(
          "tuple("
          /* fix: ) */
        ) || type2.startsWith(
          "("
          /* fix: ) */
        )) {
          const comps = obj.components != null ? obj.components.map((c) => _ParamType.from(c)) : null;
          const tuple2 = new _ParamType(_guard, name || "", type2, "tuple", indexed, comps, null, null);
          return tuple2;
        }
        type2 = verifyBasicType(obj.type);
        return new _ParamType(_guard, name || "", type2, type2, indexed, null, null, null);
      }
      /**
       *  Returns true if %%value%% is a **ParamType**.
       */
      static isParamType(value) {
        return value && value[internal] === ParamTypeInternal;
      }
    };
    _ParamType_instances = new WeakSet();
    walkAsync_fn = function(promises, value, process2, setValue) {
      if (this.isArray()) {
        if (!Array.isArray(value)) {
          throw new Error("invalid array value");
        }
        if (this.arrayLength !== -1 && value.length !== this.arrayLength) {
          throw new Error("array is wrong length");
        }
        const childType = this.arrayChildren;
        const result2 = value.slice();
        result2.forEach((value2, index) => {
          var _a;
          __privateMethod(_a = childType, _ParamType_instances, walkAsync_fn).call(_a, promises, value2, process2, (value3) => {
            result2[index] = value3;
          });
        });
        setValue(result2);
        return;
      }
      if (this.isTuple()) {
        const components = this.components;
        let result2;
        if (Array.isArray(value)) {
          result2 = value.slice();
        } else {
          if (value == null || typeof value !== "object") {
            throw new Error("invalid tuple value");
          }
          result2 = components.map((param) => {
            if (!param.name) {
              throw new Error("cannot use object value with unnamed components");
            }
            if (!(param.name in value)) {
              throw new Error(`missing value for component ${param.name}`);
            }
            return value[param.name];
          });
        }
        if (result2.length !== this.components.length) {
          throw new Error("array is wrong length");
        }
        result2.forEach((value2, index) => {
          var _a;
          __privateMethod(_a = components[index], _ParamType_instances, walkAsync_fn).call(_a, promises, value2, process2, (value3) => {
            result2[index] = value3;
          });
        });
        setValue(result2);
        return;
      }
      const result = process2(this.type, value);
      if (result.then) {
        promises.push(async function() {
          setValue(await result);
        }());
      } else {
        setValue(result);
      }
    };
    var ParamType = _ParamType;
    exports2.ParamType = ParamType;
    var Fragment = class _Fragment {
      /**
       *  @private
       */
      constructor(guard, type2, inputs) {
        /**
         *  The type of the fragment.
         */
        __publicField(this, "type");
        /**
         *  The inputs for the fragment.
         */
        __publicField(this, "inputs");
        (0, index_js_1.assertPrivate)(guard, _guard, "Fragment");
        inputs = Object.freeze(inputs.slice());
        (0, index_js_1.defineProperties)(this, { type: type2, inputs });
      }
      /**
       *  Creates a new **Fragment** for %%obj%%, wich can be any supported
       *  ABI frgament type.
       */
      static from(obj) {
        if (typeof obj === "string") {
          try {
            _Fragment.from(JSON.parse(obj));
          } catch (e) {
          }
          return _Fragment.from(lex(obj));
        }
        if (obj instanceof TokenString) {
          const type2 = obj.peekKeyword(KwTypes);
          switch (type2) {
            case "constructor":
              return ConstructorFragment.from(obj);
            case "error":
              return ErrorFragment.from(obj);
            case "event":
              return EventFragment.from(obj);
            case "fallback":
            case "receive":
              return FallbackFragment.from(obj);
            case "function":
              return FunctionFragment.from(obj);
            case "struct":
              return StructFragment.from(obj);
          }
        } else if (typeof obj === "object") {
          switch (obj.type) {
            case "constructor":
              return ConstructorFragment.from(obj);
            case "error":
              return ErrorFragment.from(obj);
            case "event":
              return EventFragment.from(obj);
            case "fallback":
            case "receive":
              return FallbackFragment.from(obj);
            case "function":
              return FunctionFragment.from(obj);
            case "struct":
              return StructFragment.from(obj);
          }
          (0, index_js_1.assert)(false, `unsupported type: ${obj.type}`, "UNSUPPORTED_OPERATION", {
            operation: "Fragment.from"
          });
        }
        (0, index_js_1.assertArgument)(false, "unsupported frgament object", "obj", obj);
      }
      /**
       *  Returns true if %%value%% is a [[ConstructorFragment]].
       */
      static isConstructor(value) {
        return ConstructorFragment.isFragment(value);
      }
      /**
       *  Returns true if %%value%% is an [[ErrorFragment]].
       */
      static isError(value) {
        return ErrorFragment.isFragment(value);
      }
      /**
       *  Returns true if %%value%% is an [[EventFragment]].
       */
      static isEvent(value) {
        return EventFragment.isFragment(value);
      }
      /**
       *  Returns true if %%value%% is a [[FunctionFragment]].
       */
      static isFunction(value) {
        return FunctionFragment.isFragment(value);
      }
      /**
       *  Returns true if %%value%% is a [[StructFragment]].
       */
      static isStruct(value) {
        return StructFragment.isFragment(value);
      }
    };
    exports2.Fragment = Fragment;
    var NamedFragment = class extends Fragment {
      /**
       *  @private
       */
      constructor(guard, type2, name, inputs) {
        super(guard, type2, inputs);
        /**
         *  The name of the fragment.
         */
        __publicField(this, "name");
        (0, index_js_1.assertArgument)(typeof name === "string" && name.match(regexId), "invalid identifier", "name", name);
        inputs = Object.freeze(inputs.slice());
        (0, index_js_1.defineProperties)(this, { name });
      }
    };
    exports2.NamedFragment = NamedFragment;
    function joinParams(format, params) {
      return "(" + params.map((p) => p.format(format)).join(format === "full" ? ", " : ",") + ")";
    }
    var ErrorFragment = class _ErrorFragment extends NamedFragment {
      /**
       *  @private
       */
      constructor(guard, name, inputs) {
        super(guard, "error", name, inputs);
        Object.defineProperty(this, internal, { value: ErrorFragmentInternal });
      }
      /**
       *  The Custom Error selector.
       */
      get selector() {
        return (0, index_js_2.id)(this.format("sighash")).substring(0, 10);
      }
      /**
       *  Returns a string representation of this fragment as %%format%%.
       */
      format(format) {
        if (format == null) {
          format = "sighash";
        }
        if (format === "json") {
          return JSON.stringify({
            type: "error",
            name: this.name,
            inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
          });
        }
        const result = [];
        if (format !== "sighash") {
          result.push("error");
        }
        result.push(this.name + joinParams(format, this.inputs));
        return result.join(" ");
      }
      /**
       *  Returns a new **ErrorFragment** for %%obj%%.
       */
      static from(obj) {
        if (_ErrorFragment.isFragment(obj)) {
          return obj;
        }
        if (typeof obj === "string") {
          return _ErrorFragment.from(lex(obj));
        } else if (obj instanceof TokenString) {
          const name = consumeName("error", obj);
          const inputs = consumeParams(obj);
          consumeEoi(obj);
          return new _ErrorFragment(_guard, name, inputs);
        }
        return new _ErrorFragment(_guard, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);
      }
      /**
       *  Returns ``true`` and provides a type guard if %%value%% is an
       *  **ErrorFragment**.
       */
      static isFragment(value) {
        return value && value[internal] === ErrorFragmentInternal;
      }
    };
    exports2.ErrorFragment = ErrorFragment;
    var EventFragment = class _EventFragment extends NamedFragment {
      /**
       *  @private
       */
      constructor(guard, name, inputs, anonymous) {
        super(guard, "event", name, inputs);
        /**
         *  Whether this event is anonymous.
         */
        __publicField(this, "anonymous");
        Object.defineProperty(this, internal, { value: EventFragmentInternal });
        (0, index_js_1.defineProperties)(this, { anonymous });
      }
      /**
       *  The Event topic hash.
       */
      get topicHash() {
        return (0, index_js_2.id)(this.format("sighash"));
      }
      /**
       *  Returns a string representation of this event as %%format%%.
       */
      format(format) {
        if (format == null) {
          format = "sighash";
        }
        if (format === "json") {
          return JSON.stringify({
            type: "event",
            anonymous: this.anonymous,
            name: this.name,
            inputs: this.inputs.map((i) => JSON.parse(i.format(format)))
          });
        }
        const result = [];
        if (format !== "sighash") {
          result.push("event");
        }
        result.push(this.name + joinParams(format, this.inputs));
        if (format !== "sighash" && this.anonymous) {
          result.push("anonymous");
        }
        return result.join(" ");
      }
      /**
       *  Return the topic hash for an event with %%name%% and %%params%%.
       */
      static getTopicHash(name, params) {
        params = (params || []).map((p) => ParamType.from(p));
        const fragment = new _EventFragment(_guard, name, params, false);
        return fragment.topicHash;
      }
      /**
       *  Returns a new **EventFragment** for %%obj%%.
       */
      static from(obj) {
        if (_EventFragment.isFragment(obj)) {
          return obj;
        }
        if (typeof obj === "string") {
          try {
            return _EventFragment.from(lex(obj));
          } catch (error) {
            (0, index_js_1.assertArgument)(false, "invalid event fragment", "obj", obj);
          }
        } else if (obj instanceof TokenString) {
          const name = consumeName("event", obj);
          const inputs = consumeParams(obj, true);
          const anonymous = !!consumeKeywords(obj, setify(["anonymous"])).has("anonymous");
          consumeEoi(obj);
          return new _EventFragment(_guard, name, inputs, anonymous);
        }
        return new _EventFragment(_guard, obj.name, obj.inputs ? obj.inputs.map((p) => ParamType.from(p, true)) : [], !!obj.anonymous);
      }
      /**
       *  Returns ``true`` and provides a type guard if %%value%% is an
       *  **EventFragment**.
       */
      static isFragment(value) {
        return value && value[internal] === EventFragmentInternal;
      }
    };
    exports2.EventFragment = EventFragment;
    var ConstructorFragment = class _ConstructorFragment extends Fragment {
      /**
       *  @private
       */
      constructor(guard, type2, inputs, payable, gas) {
        super(guard, type2, inputs);
        /**
         *  Whether the constructor can receive an endowment.
         */
        __publicField(this, "payable");
        /**
         *  The recommended gas limit for deployment or ``null``.
         */
        __publicField(this, "gas");
        Object.defineProperty(this, internal, { value: ConstructorFragmentInternal });
        (0, index_js_1.defineProperties)(this, { payable, gas });
      }
      /**
       *  Returns a string representation of this constructor as %%format%%.
       */
      format(format) {
        (0, index_js_1.assert)(format != null && format !== "sighash", "cannot format a constructor for sighash", "UNSUPPORTED_OPERATION", { operation: "format(sighash)" });
        if (format === "json") {
          return JSON.stringify({
            type: "constructor",
            stateMutability: this.payable ? "payable" : "undefined",
            payable: this.payable,
            gas: this.gas != null ? this.gas : void 0,
            inputs: this.inputs.map((i) => JSON.parse(i.format(format)))
          });
        }
        const result = [`constructor${joinParams(format, this.inputs)}`];
        if (this.payable) {
          result.push("payable");
        }
        if (this.gas != null) {
          result.push(`@${this.gas.toString()}`);
        }
        return result.join(" ");
      }
      /**
       *  Returns a new **ConstructorFragment** for %%obj%%.
       */
      static from(obj) {
        if (_ConstructorFragment.isFragment(obj)) {
          return obj;
        }
        if (typeof obj === "string") {
          try {
            return _ConstructorFragment.from(lex(obj));
          } catch (error) {
            (0, index_js_1.assertArgument)(false, "invalid constuctor fragment", "obj", obj);
          }
        } else if (obj instanceof TokenString) {
          consumeKeywords(obj, setify(["constructor"]));
          const inputs = consumeParams(obj);
          const payable = !!consumeKeywords(obj, KwVisibDeploy).has("payable");
          const gas = consumeGas(obj);
          consumeEoi(obj);
          return new _ConstructorFragment(_guard, "constructor", inputs, payable, gas);
        }
        return new _ConstructorFragment(_guard, "constructor", obj.inputs ? obj.inputs.map(ParamType.from) : [], !!obj.payable, obj.gas != null ? obj.gas : null);
      }
      /**
       *  Returns ``true`` and provides a type guard if %%value%% is a
       *  **ConstructorFragment**.
       */
      static isFragment(value) {
        return value && value[internal] === ConstructorFragmentInternal;
      }
    };
    exports2.ConstructorFragment = ConstructorFragment;
    var FallbackFragment = class _FallbackFragment extends Fragment {
      constructor(guard, inputs, payable) {
        super(guard, "fallback", inputs);
        /**
         *  If the function can be sent value during invocation.
         */
        __publicField(this, "payable");
        Object.defineProperty(this, internal, { value: FallbackFragmentInternal });
        (0, index_js_1.defineProperties)(this, { payable });
      }
      /**
       *  Returns a string representation of this fallback as %%format%%.
       */
      format(format) {
        const type2 = this.inputs.length === 0 ? "receive" : "fallback";
        if (format === "json") {
          const stateMutability = this.payable ? "payable" : "nonpayable";
          return JSON.stringify({ type: type2, stateMutability });
        }
        return `${type2}()${this.payable ? " payable" : ""}`;
      }
      /**
       *  Returns a new **FallbackFragment** for %%obj%%.
       */
      static from(obj) {
        if (_FallbackFragment.isFragment(obj)) {
          return obj;
        }
        if (typeof obj === "string") {
          try {
            return _FallbackFragment.from(lex(obj));
          } catch (error) {
            (0, index_js_1.assertArgument)(false, "invalid fallback fragment", "obj", obj);
          }
        } else if (obj instanceof TokenString) {
          const errorObj = obj.toString();
          const topIsValid = obj.peekKeyword(setify(["fallback", "receive"]));
          (0, index_js_1.assertArgument)(topIsValid, "type must be fallback or receive", "obj", errorObj);
          const type2 = obj.popKeyword(setify(["fallback", "receive"]));
          if (type2 === "receive") {
            const inputs2 = consumeParams(obj);
            (0, index_js_1.assertArgument)(inputs2.length === 0, `receive cannot have arguments`, "obj.inputs", inputs2);
            consumeKeywords(obj, setify(["payable"]));
            consumeEoi(obj);
            return new _FallbackFragment(_guard, [], true);
          }
          let inputs = consumeParams(obj);
          if (inputs.length) {
            (0, index_js_1.assertArgument)(inputs.length === 1 && inputs[0].type === "bytes", "invalid fallback inputs", "obj.inputs", inputs.map((i) => i.format("minimal")).join(", "));
          } else {
            inputs = [ParamType.from("bytes")];
          }
          const mutability = consumeMutability(obj);
          (0, index_js_1.assertArgument)(mutability === "nonpayable" || mutability === "payable", "fallback cannot be constants", "obj.stateMutability", mutability);
          if (consumeKeywords(obj, setify(["returns"])).has("returns")) {
            const outputs = consumeParams(obj);
            (0, index_js_1.assertArgument)(outputs.length === 1 && outputs[0].type === "bytes", "invalid fallback outputs", "obj.outputs", outputs.map((i) => i.format("minimal")).join(", "));
          }
          consumeEoi(obj);
          return new _FallbackFragment(_guard, inputs, mutability === "payable");
        }
        if (obj.type === "receive") {
          return new _FallbackFragment(_guard, [], true);
        }
        if (obj.type === "fallback") {
          const inputs = [ParamType.from("bytes")];
          const payable = obj.stateMutability === "payable";
          return new _FallbackFragment(_guard, inputs, payable);
        }
        (0, index_js_1.assertArgument)(false, "invalid fallback description", "obj", obj);
      }
      /**
       *  Returns ``true`` and provides a type guard if %%value%% is a
       *  **FallbackFragment**.
       */
      static isFragment(value) {
        return value && value[internal] === FallbackFragmentInternal;
      }
    };
    exports2.FallbackFragment = FallbackFragment;
    var FunctionFragment = class _FunctionFragment extends NamedFragment {
      /**
       *  @private
       */
      constructor(guard, name, stateMutability, inputs, outputs, gas) {
        super(guard, "function", name, inputs);
        /**
         *  If the function is constant (e.g. ``pure`` or ``view`` functions).
         */
        __publicField(this, "constant");
        /**
         *  The returned types for the result of calling this function.
         */
        __publicField(this, "outputs");
        /**
         *  The state mutability (e.g. ``payable``, ``nonpayable``, ``view``
         *  or ``pure``)
         */
        __publicField(this, "stateMutability");
        /**
         *  If the function can be sent value during invocation.
         */
        __publicField(this, "payable");
        /**
         *  The recommended gas limit to send when calling this function.
         */
        __publicField(this, "gas");
        Object.defineProperty(this, internal, { value: FunctionFragmentInternal });
        outputs = Object.freeze(outputs.slice());
        const constant = stateMutability === "view" || stateMutability === "pure";
        const payable = stateMutability === "payable";
        (0, index_js_1.defineProperties)(this, { constant, gas, outputs, payable, stateMutability });
      }
      /**
       *  The Function selector.
       */
      get selector() {
        return (0, index_js_2.id)(this.format("sighash")).substring(0, 10);
      }
      /**
       *  Returns a string representation of this function as %%format%%.
       */
      format(format) {
        if (format == null) {
          format = "sighash";
        }
        if (format === "json") {
          return JSON.stringify({
            type: "function",
            name: this.name,
            constant: this.constant,
            stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
            payable: this.payable,
            gas: this.gas != null ? this.gas : void 0,
            inputs: this.inputs.map((i) => JSON.parse(i.format(format))),
            outputs: this.outputs.map((o) => JSON.parse(o.format(format)))
          });
        }
        const result = [];
        if (format !== "sighash") {
          result.push("function");
        }
        result.push(this.name + joinParams(format, this.inputs));
        if (format !== "sighash") {
          if (this.stateMutability !== "nonpayable") {
            result.push(this.stateMutability);
          }
          if (this.outputs && this.outputs.length) {
            result.push("returns");
            result.push(joinParams(format, this.outputs));
          }
          if (this.gas != null) {
            result.push(`@${this.gas.toString()}`);
          }
        }
        return result.join(" ");
      }
      /**
       *  Return the selector for a function with %%name%% and %%params%%.
       */
      static getSelector(name, params) {
        params = (params || []).map((p) => ParamType.from(p));
        const fragment = new _FunctionFragment(_guard, name, "view", params, [], null);
        return fragment.selector;
      }
      /**
       *  Returns a new **FunctionFragment** for %%obj%%.
       */
      static from(obj) {
        if (_FunctionFragment.isFragment(obj)) {
          return obj;
        }
        if (typeof obj === "string") {
          try {
            return _FunctionFragment.from(lex(obj));
          } catch (error) {
            (0, index_js_1.assertArgument)(false, "invalid function fragment", "obj", obj);
          }
        } else if (obj instanceof TokenString) {
          const name = consumeName("function", obj);
          const inputs = consumeParams(obj);
          const mutability = consumeMutability(obj);
          let outputs = [];
          if (consumeKeywords(obj, setify(["returns"])).has("returns")) {
            outputs = consumeParams(obj);
          }
          const gas = consumeGas(obj);
          consumeEoi(obj);
          return new _FunctionFragment(_guard, name, mutability, inputs, outputs, gas);
        }
        let stateMutability = obj.stateMutability;
        if (stateMutability == null) {
          stateMutability = "payable";
          if (typeof obj.constant === "boolean") {
            stateMutability = "view";
            if (!obj.constant) {
              stateMutability = "payable";
              if (typeof obj.payable === "boolean" && !obj.payable) {
                stateMutability = "nonpayable";
              }
            }
          } else if (typeof obj.payable === "boolean" && !obj.payable) {
            stateMutability = "nonpayable";
          }
        }
        return new _FunctionFragment(_guard, obj.name, stateMutability, obj.inputs ? obj.inputs.map(ParamType.from) : [], obj.outputs ? obj.outputs.map(ParamType.from) : [], obj.gas != null ? obj.gas : null);
      }
      /**
       *  Returns ``true`` and provides a type guard if %%value%% is a
       *  **FunctionFragment**.
       */
      static isFragment(value) {
        return value && value[internal] === FunctionFragmentInternal;
      }
    };
    exports2.FunctionFragment = FunctionFragment;
    var StructFragment = class _StructFragment extends NamedFragment {
      /**
       *  @private
       */
      constructor(guard, name, inputs) {
        super(guard, "struct", name, inputs);
        Object.defineProperty(this, internal, { value: StructFragmentInternal });
      }
      /**
       *  Returns a string representation of this struct as %%format%%.
       */
      format() {
        throw new Error("@TODO");
      }
      /**
       *  Returns a new **StructFragment** for %%obj%%.
       */
      static from(obj) {
        if (typeof obj === "string") {
          try {
            return _StructFragment.from(lex(obj));
          } catch (error) {
            (0, index_js_1.assertArgument)(false, "invalid struct fragment", "obj", obj);
          }
        } else if (obj instanceof TokenString) {
          const name = consumeName("struct", obj);
          const inputs = consumeParams(obj);
          consumeEoi(obj);
          return new _StructFragment(_guard, name, inputs);
        }
        return new _StructFragment(_guard, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);
      }
      // @TODO: fix this return type
      /**
       *  Returns ``true`` and provides a type guard if %%value%% is a
       *  **StructFragment**.
       */
      static isFragment(value) {
        return value && value[internal] === StructFragmentInternal;
      }
    };
    exports2.StructFragment = StructFragment;
  }
});

// node_modules/ethers/lib.commonjs/abi/abi-coder.js
var require_abi_coder = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/abi-coder.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AbiCoder = void 0;
    var index_js_1 = require_utils11();
    var abstract_coder_js_1 = require_abstract_coder();
    var address_js_1 = require_address4();
    var array_js_1 = require_array();
    var boolean_js_1 = require_boolean();
    var bytes_js_1 = require_bytes();
    var fixed_bytes_js_1 = require_fixed_bytes();
    var null_js_1 = require_null();
    var number_js_1 = require_number();
    var string_js_1 = require_string();
    var tuple_js_1 = require_tuple();
    var fragments_js_1 = require_fragments();
    var index_js_2 = require_address3();
    var index_js_3 = require_utils11();
    var PanicReasons = /* @__PURE__ */ new Map();
    PanicReasons.set(0, "GENERIC_PANIC");
    PanicReasons.set(1, "ASSERT_FALSE");
    PanicReasons.set(17, "OVERFLOW");
    PanicReasons.set(18, "DIVIDE_BY_ZERO");
    PanicReasons.set(33, "ENUM_RANGE_ERROR");
    PanicReasons.set(34, "BAD_STORAGE_DATA");
    PanicReasons.set(49, "STACK_UNDERFLOW");
    PanicReasons.set(50, "ARRAY_RANGE_ERROR");
    PanicReasons.set(65, "OUT_OF_MEMORY");
    PanicReasons.set(81, "UNINITIALIZED_FUNCTION_CALL");
    var paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
    var paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
    var defaultCoder = null;
    var defaultMaxInflation = 1024;
    function getBuiltinCallException(action, tx, data, abiCoder) {
      let message = "missing revert data";
      let reason = null;
      const invocation = null;
      let revert = null;
      if (data) {
        message = "execution reverted";
        const bytes = (0, index_js_3.getBytes)(data);
        data = (0, index_js_3.hexlify)(data);
        if (bytes.length === 0) {
          message += " (no data present; likely require(false) occurred";
          reason = "require(false)";
        } else if (bytes.length % 32 !== 4) {
          message += " (could not decode reason; invalid data length)";
        } else if ((0, index_js_3.hexlify)(bytes.slice(0, 4)) === "0x08c379a0") {
          try {
            reason = abiCoder.decode(["string"], bytes.slice(4))[0];
            revert = {
              signature: "Error(string)",
              name: "Error",
              args: [reason]
            };
            message += `: ${JSON.stringify(reason)}`;
          } catch (error) {
            message += " (could not decode reason; invalid string data)";
          }
        } else if ((0, index_js_3.hexlify)(bytes.slice(0, 4)) === "0x4e487b71") {
          try {
            const code = Number(abiCoder.decode(["uint256"], bytes.slice(4))[0]);
            revert = {
              signature: "Panic(uint256)",
              name: "Panic",
              args: [code]
            };
            reason = `Panic due to ${PanicReasons.get(code) || "UNKNOWN"}(${code})`;
            message += `: ${reason}`;
          } catch (error) {
            message += " (could not decode panic code)";
          }
        } else {
          message += " (unknown custom error)";
        }
      }
      const transaction = {
        to: tx.to ? (0, index_js_2.getAddress)(tx.to) : null,
        data: tx.data || "0x"
      };
      if (tx.from) {
        transaction.from = (0, index_js_2.getAddress)(tx.from);
      }
      return (0, index_js_3.makeError)(message, "CALL_EXCEPTION", {
        action,
        data,
        reason,
        transaction,
        invocation,
        revert
      });
    }
    var _AbiCoder_instances, getCoder_fn;
    var _AbiCoder = class _AbiCoder {
      constructor() {
        __privateAdd(this, _AbiCoder_instances);
      }
      /**
       *  Get the default values for the given %%types%%.
       *
       *  For example, a ``uint`` is by default ``0`` and ``bool``
       *  is by default ``false``.
       */
      getDefaultValue(types) {
        const coders = types.map((type2) => __privateMethod(this, _AbiCoder_instances, getCoder_fn).call(this, fragments_js_1.ParamType.from(type2)));
        const coder = new tuple_js_1.TupleCoder(coders, "_");
        return coder.defaultValue();
      }
      /**
       *  Encode the %%values%% as the %%types%% into ABI data.
       *
       *  @returns DataHexstring
       */
      encode(types, values) {
        (0, index_js_1.assertArgumentCount)(values.length, types.length, "types/values length mismatch");
        const coders = types.map((type2) => __privateMethod(this, _AbiCoder_instances, getCoder_fn).call(this, fragments_js_1.ParamType.from(type2)));
        const coder = new tuple_js_1.TupleCoder(coders, "_");
        const writer = new abstract_coder_js_1.Writer();
        coder.encode(writer, values);
        return writer.data;
      }
      /**
       *  Decode the ABI %%data%% as the %%types%% into values.
       *
       *  If %%loose%% decoding is enabled, then strict padding is
       *  not enforced. Some older versions of Solidity incorrectly
       *  padded event data emitted from ``external`` functions.
       */
      decode(types, data, loose) {
        const coders = types.map((type2) => __privateMethod(this, _AbiCoder_instances, getCoder_fn).call(this, fragments_js_1.ParamType.from(type2)));
        const coder = new tuple_js_1.TupleCoder(coders, "_");
        return coder.decode(new abstract_coder_js_1.Reader(data, loose, defaultMaxInflation));
      }
      static _setDefaultMaxInflation(value) {
        (0, index_js_1.assertArgument)(typeof value === "number" && Number.isInteger(value), "invalid defaultMaxInflation factor", "value", value);
        defaultMaxInflation = value;
      }
      /**
       *  Returns the shared singleton instance of a default [[AbiCoder]].
       *
       *  On the first call, the instance is created internally.
       */
      static defaultAbiCoder() {
        if (defaultCoder == null) {
          defaultCoder = new _AbiCoder();
        }
        return defaultCoder;
      }
      /**
       *  Returns an ethers-compatible [[CallExceptionError]] Error for the given
       *  result %%data%% for the [[CallExceptionAction]] %%action%% against
       *  the Transaction %%tx%%.
       */
      static getBuiltinCallException(action, tx, data) {
        return getBuiltinCallException(action, tx, data, _AbiCoder.defaultAbiCoder());
      }
    };
    _AbiCoder_instances = new WeakSet();
    getCoder_fn = function(param) {
      if (param.isArray()) {
        return new array_js_1.ArrayCoder(__privateMethod(this, _AbiCoder_instances, getCoder_fn).call(this, param.arrayChildren), param.arrayLength, param.name);
      }
      if (param.isTuple()) {
        return new tuple_js_1.TupleCoder(param.components.map((c) => __privateMethod(this, _AbiCoder_instances, getCoder_fn).call(this, c)), param.name);
      }
      switch (param.baseType) {
        case "address":
          return new address_js_1.AddressCoder(param.name);
        case "bool":
          return new boolean_js_1.BooleanCoder(param.name);
        case "string":
          return new string_js_1.StringCoder(param.name);
        case "bytes":
          return new bytes_js_1.BytesCoder(param.name);
        case "":
          return new null_js_1.NullCoder(param.name);
      }
      let match = param.type.match(paramTypeNumber);
      if (match) {
        let size = parseInt(match[2] || "256");
        (0, index_js_1.assertArgument)(size !== 0 && size <= 256 && size % 8 === 0, "invalid " + match[1] + " bit length", "param", param);
        return new number_js_1.NumberCoder(size / 8, match[1] === "int", param.name);
      }
      match = param.type.match(paramTypeBytes);
      if (match) {
        let size = parseInt(match[1]);
        (0, index_js_1.assertArgument)(size !== 0 && size <= 32, "invalid bytes length", "param", param);
        return new fixed_bytes_js_1.FixedBytesCoder(size, param.name);
      }
      (0, index_js_1.assertArgument)(false, "invalid type", "type", param.type);
    };
    var AbiCoder = _AbiCoder;
    exports2.AbiCoder = AbiCoder;
  }
});

// node_modules/ethers/lib.commonjs/abi/bytes32.js
var require_bytes32 = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/bytes32.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decodeBytes32String = exports2.encodeBytes32String = void 0;
    var index_js_1 = require_utils11();
    function encodeBytes32String(text) {
      const bytes = (0, index_js_1.toUtf8Bytes)(text);
      if (bytes.length > 31) {
        throw new Error("bytes32 string must be less than 32 bytes");
      }
      return (0, index_js_1.zeroPadBytes)(bytes, 32);
    }
    exports2.encodeBytes32String = encodeBytes32String;
    function decodeBytes32String(_bytes) {
      const data = (0, index_js_1.getBytes)(_bytes, "bytes");
      if (data.length !== 32) {
        throw new Error("invalid bytes32 - not 32 bytes long");
      }
      if (data[31] !== 0) {
        throw new Error("invalid bytes32 string - no null terminator");
      }
      let length = 31;
      while (data[length - 1] === 0) {
        length--;
      }
      return (0, index_js_1.toUtf8String)(data.slice(0, length));
    }
    exports2.decodeBytes32String = decodeBytes32String;
  }
});

// node_modules/ethers/lib.commonjs/abi/interface.js
var require_interface = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/interface.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Interface = exports2.Indexed = exports2.ErrorDescription = exports2.TransactionDescription = exports2.LogDescription = exports2.Result = exports2.checkResultErrors = void 0;
    var index_js_1 = require_crypto4();
    var index_js_2 = require_hash2();
    var index_js_3 = require_utils11();
    var abi_coder_js_1 = require_abi_coder();
    var abstract_coder_js_1 = require_abstract_coder();
    Object.defineProperty(exports2, "checkResultErrors", { enumerable: true, get: function() {
      return abstract_coder_js_1.checkResultErrors;
    } });
    Object.defineProperty(exports2, "Result", { enumerable: true, get: function() {
      return abstract_coder_js_1.Result;
    } });
    var fragments_js_1 = require_fragments();
    var typed_js_1 = require_typed();
    var LogDescription = class {
      /**
       *  @_ignore:
       */
      constructor(fragment, topic, args) {
        /**
         *  The matching fragment for the ``topic0``.
         */
        __publicField(this, "fragment");
        /**
         *  The name of the Event.
         */
        __publicField(this, "name");
        /**
         *  The full Event signature.
         */
        __publicField(this, "signature");
        /**
         *  The topic hash for the Event.
         */
        __publicField(this, "topic");
        /**
         *  The arguments passed into the Event with ``emit``.
         */
        __publicField(this, "args");
        const name = fragment.name, signature2 = fragment.format();
        (0, index_js_3.defineProperties)(this, {
          fragment,
          name,
          signature: signature2,
          topic,
          args
        });
      }
    };
    exports2.LogDescription = LogDescription;
    var TransactionDescription = class {
      /**
       *  @_ignore:
       */
      constructor(fragment, selector, args, value) {
        /**
         *  The matching fragment from the transaction ``data``.
         */
        __publicField(this, "fragment");
        /**
         *  The name of the Function from the transaction ``data``.
         */
        __publicField(this, "name");
        /**
         *  The arguments passed to the Function from the transaction ``data``.
         */
        __publicField(this, "args");
        /**
         *  The full Function signature from the transaction ``data``.
         */
        __publicField(this, "signature");
        /**
         *  The selector for the Function from the transaction ``data``.
         */
        __publicField(this, "selector");
        /**
         *  The ``value`` (in wei) from the transaction.
         */
        __publicField(this, "value");
        const name = fragment.name, signature2 = fragment.format();
        (0, index_js_3.defineProperties)(this, {
          fragment,
          name,
          args,
          signature: signature2,
          selector,
          value
        });
      }
    };
    exports2.TransactionDescription = TransactionDescription;
    var ErrorDescription = class {
      /**
       *  @_ignore:
       */
      constructor(fragment, selector, args) {
        /**
         *  The matching fragment.
         */
        __publicField(this, "fragment");
        /**
         *  The name of the Error.
         */
        __publicField(this, "name");
        /**
         *  The arguments passed to the Error with ``revert``.
         */
        __publicField(this, "args");
        /**
         *  The full Error signature.
         */
        __publicField(this, "signature");
        /**
         *  The selector for the Error.
         */
        __publicField(this, "selector");
        const name = fragment.name, signature2 = fragment.format();
        (0, index_js_3.defineProperties)(this, {
          fragment,
          name,
          args,
          signature: signature2,
          selector
        });
      }
    };
    exports2.ErrorDescription = ErrorDescription;
    var Indexed = class {
      /**
       *  @_ignore:
       */
      constructor(hash) {
        /**
         *  The ``keccak256`` of the value logged.
         */
        __publicField(this, "hash");
        /**
         *  @_ignore:
         */
        __publicField(this, "_isIndexed");
        (0, index_js_3.defineProperties)(this, { hash, _isIndexed: true });
      }
      /**
       *  Returns ``true`` if %%value%% is an **Indexed**.
       *
       *  This provides a Type Guard for property access.
       */
      static isIndexed(value) {
        return !!(value && value._isIndexed);
      }
    };
    exports2.Indexed = Indexed;
    var PanicReasons = {
      "0": "generic panic",
      "1": "assert(false)",
      "17": "arithmetic overflow",
      "18": "division or modulo by zero",
      "33": "enum overflow",
      "34": "invalid encoded storage byte array accessed",
      "49": "out-of-bounds array access; popping on an empty array",
      "50": "out-of-bounds access of an array or bytesN",
      "65": "out of memory",
      "81": "uninitialized function"
    };
    var BuiltinErrors = {
      "0x08c379a0": {
        signature: "Error(string)",
        name: "Error",
        inputs: ["string"],
        reason: (message) => {
          return `reverted with reason string ${JSON.stringify(message)}`;
        }
      },
      "0x4e487b71": {
        signature: "Panic(uint256)",
        name: "Panic",
        inputs: ["uint256"],
        reason: (code) => {
          let reason = "unknown panic code";
          if (code >= 0 && code <= 255 && PanicReasons[code.toString()]) {
            reason = PanicReasons[code.toString()];
          }
          return `reverted with panic code 0x${code.toString(16)} (${reason})`;
        }
      }
    };
    var _errors, _events, _functions, _abiCoder, _Interface_instances, getFunction_fn, getEvent_fn;
    var _Interface = class _Interface {
      /**
       *  Create a new Interface for the %%fragments%%.
       */
      constructor(fragments) {
        __privateAdd(this, _Interface_instances);
        /**
         *  All the Contract ABI members (i.e. methods, events, errors, etc).
         */
        __publicField(this, "fragments");
        /**
         *  The Contract constructor.
         */
        __publicField(this, "deploy");
        /**
         *  The Fallback method, if any.
         */
        __publicField(this, "fallback");
        /**
         *  If receiving ether is supported.
         */
        __publicField(this, "receive");
        __privateAdd(this, _errors);
        __privateAdd(this, _events);
        __privateAdd(this, _functions);
        //    #structs: Map<string, StructFragment>;
        __privateAdd(this, _abiCoder);
        let abi = [];
        if (typeof fragments === "string") {
          abi = JSON.parse(fragments);
        } else {
          abi = fragments;
        }
        __privateSet(this, _functions, /* @__PURE__ */ new Map());
        __privateSet(this, _errors, /* @__PURE__ */ new Map());
        __privateSet(this, _events, /* @__PURE__ */ new Map());
        const frags = [];
        for (const a of abi) {
          try {
            frags.push(fragments_js_1.Fragment.from(a));
          } catch (error) {
            console.log(`[Warning] Invalid Fragment ${JSON.stringify(a)}:`, error.message);
          }
        }
        (0, index_js_3.defineProperties)(this, {
          fragments: Object.freeze(frags)
        });
        let fallback = null;
        let receive = false;
        __privateSet(this, _abiCoder, this.getAbiCoder());
        this.fragments.forEach((fragment, index) => {
          let bucket;
          switch (fragment.type) {
            case "constructor":
              if (this.deploy) {
                console.log("duplicate definition - constructor");
                return;
              }
              (0, index_js_3.defineProperties)(this, { deploy: fragment });
              return;
            case "fallback":
              if (fragment.inputs.length === 0) {
                receive = true;
              } else {
                (0, index_js_3.assertArgument)(!fallback || fragment.payable !== fallback.payable, "conflicting fallback fragments", `fragments[${index}]`, fragment);
                fallback = fragment;
                receive = fallback.payable;
              }
              return;
            case "function":
              bucket = __privateGet(this, _functions);
              break;
            case "event":
              bucket = __privateGet(this, _events);
              break;
            case "error":
              bucket = __privateGet(this, _errors);
              break;
            default:
              return;
          }
          const signature2 = fragment.format();
          if (bucket.has(signature2)) {
            return;
          }
          bucket.set(signature2, fragment);
        });
        if (!this.deploy) {
          (0, index_js_3.defineProperties)(this, {
            deploy: fragments_js_1.ConstructorFragment.from("constructor()")
          });
        }
        (0, index_js_3.defineProperties)(this, { fallback, receive });
      }
      /**
       *  Returns the entire Human-Readable ABI, as an array of
       *  signatures, optionally as %%minimal%% strings, which
       *  removes parameter names and unneceesary spaces.
       */
      format(minimal) {
        const format = minimal ? "minimal" : "full";
        const abi = this.fragments.map((f2) => f2.format(format));
        return abi;
      }
      /**
       *  Return the JSON-encoded ABI. This is the format Solidiy
       *  returns.
       */
      formatJson() {
        const abi = this.fragments.map((f2) => f2.format("json"));
        return JSON.stringify(abi.map((j) => JSON.parse(j)));
      }
      /**
       *  The ABI coder that will be used to encode and decode binary
       *  data.
       */
      getAbiCoder() {
        return abi_coder_js_1.AbiCoder.defaultAbiCoder();
      }
      /**
       *  Get the function name for %%key%%, which may be a function selector,
       *  function name or function signature that belongs to the ABI.
       */
      getFunctionName(key) {
        const fragment = __privateMethod(this, _Interface_instances, getFunction_fn).call(this, key, null, false);
        (0, index_js_3.assertArgument)(fragment, "no matching function", "key", key);
        return fragment.name;
      }
      /**
       *  Returns true if %%key%% (a function selector, function name or
       *  function signature) is present in the ABI.
       *
       *  In the case of a function name, the name may be ambiguous, so
       *  accessing the [[FunctionFragment]] may require refinement.
       */
      hasFunction(key) {
        return !!__privateMethod(this, _Interface_instances, getFunction_fn).call(this, key, null, false);
      }
      /**
       *  Get the [[FunctionFragment]] for %%key%%, which may be a function
       *  selector, function name or function signature that belongs to the ABI.
       *
       *  If %%values%% is provided, it will use the Typed API to handle
       *  ambiguous cases where multiple functions match by name.
       *
       *  If the %%key%% and %%values%% do not refine to a single function in
       *  the ABI, this will throw.
       */
      getFunction(key, values) {
        return __privateMethod(this, _Interface_instances, getFunction_fn).call(this, key, values || null, true);
      }
      /**
       *  Iterate over all functions, calling %%callback%%, sorted by their name.
       */
      forEachFunction(callback) {
        const names = Array.from(__privateGet(this, _functions).keys());
        names.sort((a, b) => a.localeCompare(b));
        for (let i = 0; i < names.length; i++) {
          const name = names[i];
          callback(__privateGet(this, _functions).get(name), i);
        }
      }
      /**
       *  Get the event name for %%key%%, which may be a topic hash,
       *  event name or event signature that belongs to the ABI.
       */
      getEventName(key) {
        const fragment = __privateMethod(this, _Interface_instances, getEvent_fn).call(this, key, null, false);
        (0, index_js_3.assertArgument)(fragment, "no matching event", "key", key);
        return fragment.name;
      }
      /**
       *  Returns true if %%key%% (an event topic hash, event name or
       *  event signature) is present in the ABI.
       *
       *  In the case of an event name, the name may be ambiguous, so
       *  accessing the [[EventFragment]] may require refinement.
       */
      hasEvent(key) {
        return !!__privateMethod(this, _Interface_instances, getEvent_fn).call(this, key, null, false);
      }
      /**
       *  Get the [[EventFragment]] for %%key%%, which may be a topic hash,
       *  event name or event signature that belongs to the ABI.
       *
       *  If %%values%% is provided, it will use the Typed API to handle
       *  ambiguous cases where multiple events match by name.
       *
       *  If the %%key%% and %%values%% do not refine to a single event in
       *  the ABI, this will throw.
       */
      getEvent(key, values) {
        return __privateMethod(this, _Interface_instances, getEvent_fn).call(this, key, values || null, true);
      }
      /**
       *  Iterate over all events, calling %%callback%%, sorted by their name.
       */
      forEachEvent(callback) {
        const names = Array.from(__privateGet(this, _events).keys());
        names.sort((a, b) => a.localeCompare(b));
        for (let i = 0; i < names.length; i++) {
          const name = names[i];
          callback(__privateGet(this, _events).get(name), i);
        }
      }
      /**
       *  Get the [[ErrorFragment]] for %%key%%, which may be an error
       *  selector, error name or error signature that belongs to the ABI.
       *
       *  If %%values%% is provided, it will use the Typed API to handle
       *  ambiguous cases where multiple errors match by name.
       *
       *  If the %%key%% and %%values%% do not refine to a single error in
       *  the ABI, this will throw.
       */
      getError(key, values) {
        if ((0, index_js_3.isHexString)(key)) {
          const selector = key.toLowerCase();
          if (BuiltinErrors[selector]) {
            return fragments_js_1.ErrorFragment.from(BuiltinErrors[selector].signature);
          }
          for (const fragment of __privateGet(this, _errors).values()) {
            if (selector === fragment.selector) {
              return fragment;
            }
          }
          return null;
        }
        if (key.indexOf("(") === -1) {
          const matching = [];
          for (const [name, fragment] of __privateGet(this, _errors)) {
            if (name.split(
              "("
              /* fix:) */
            )[0] === key) {
              matching.push(fragment);
            }
          }
          if (matching.length === 0) {
            if (key === "Error") {
              return fragments_js_1.ErrorFragment.from("error Error(string)");
            }
            if (key === "Panic") {
              return fragments_js_1.ErrorFragment.from("error Panic(uint256)");
            }
            return null;
          } else if (matching.length > 1) {
            const matchStr = matching.map((m) => JSON.stringify(m.format())).join(", ");
            (0, index_js_3.assertArgument)(false, `ambiguous error description (i.e. ${matchStr})`, "name", key);
          }
          return matching[0];
        }
        key = fragments_js_1.ErrorFragment.from(key).format();
        if (key === "Error(string)") {
          return fragments_js_1.ErrorFragment.from("error Error(string)");
        }
        if (key === "Panic(uint256)") {
          return fragments_js_1.ErrorFragment.from("error Panic(uint256)");
        }
        const result = __privateGet(this, _errors).get(key);
        if (result) {
          return result;
        }
        return null;
      }
      /**
       *  Iterate over all errors, calling %%callback%%, sorted by their name.
       */
      forEachError(callback) {
        const names = Array.from(__privateGet(this, _errors).keys());
        names.sort((a, b) => a.localeCompare(b));
        for (let i = 0; i < names.length; i++) {
          const name = names[i];
          callback(__privateGet(this, _errors).get(name), i);
        }
      }
      // Get the 4-byte selector used by Solidity to identify a function
      /*
      getSelector(fragment: ErrorFragment | FunctionFragment): string {
          if (typeof(fragment) === "string") {
              const matches: Array<Fragment> = [ ];
      
              try { matches.push(this.getFunction(fragment)); } catch (error) { }
              try { matches.push(this.getError(<string>fragment)); } catch (_) { }
      
              if (matches.length === 0) {
                  logger.throwArgumentError("unknown fragment", "key", fragment);
              } else if (matches.length > 1) {
                  logger.throwArgumentError("ambiguous fragment matches function and error", "key", fragment);
              }
      
              fragment = matches[0];
          }
      
          return dataSlice(id(fragment.format()), 0, 4);
      }
          */
      // Get the 32-byte topic hash used by Solidity to identify an event
      /*
      getEventTopic(fragment: EventFragment): string {
          //if (typeof(fragment) === "string") { fragment = this.getEvent(eventFragment); }
          return id(fragment.format());
      }
      */
      _decodeParams(params, data) {
        return __privateGet(this, _abiCoder).decode(params, data);
      }
      _encodeParams(params, values) {
        return __privateGet(this, _abiCoder).encode(params, values);
      }
      /**
       *  Encodes a ``tx.data`` object for deploying the Contract with
       *  the %%values%% as the constructor arguments.
       */
      encodeDeploy(values) {
        return this._encodeParams(this.deploy.inputs, values || []);
      }
      /**
       *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the
       *  specified error (see [[getError]] for valid values for
       *  %%key%%).
       *
       *  Most developers should prefer the [[parseCallResult]] method instead,
       *  which will automatically detect a ``CALL_EXCEPTION`` and throw the
       *  corresponding error.
       */
      decodeErrorResult(fragment, data) {
        if (typeof fragment === "string") {
          const f2 = this.getError(fragment);
          (0, index_js_3.assertArgument)(f2, "unknown error", "fragment", fragment);
          fragment = f2;
        }
        (0, index_js_3.assertArgument)((0, index_js_3.dataSlice)(data, 0, 4) === fragment.selector, `data signature does not match error ${fragment.name}.`, "data", data);
        return this._decodeParams(fragment.inputs, (0, index_js_3.dataSlice)(data, 4));
      }
      /**
       *  Encodes the transaction revert data for a call result that
       *  reverted from the the Contract with the sepcified %%error%%
       *  (see [[getError]] for valid values for %%fragment%%) with the %%values%%.
       *
       *  This is generally not used by most developers, unless trying to mock
       *  a result from a Contract.
       */
      encodeErrorResult(fragment, values) {
        if (typeof fragment === "string") {
          const f2 = this.getError(fragment);
          (0, index_js_3.assertArgument)(f2, "unknown error", "fragment", fragment);
          fragment = f2;
        }
        return (0, index_js_3.concat)([
          fragment.selector,
          this._encodeParams(fragment.inputs, values || [])
        ]);
      }
      /**
       *  Decodes the %%data%% from a transaction ``tx.data`` for
       *  the function specified (see [[getFunction]] for valid values
       *  for %%fragment%%).
       *
       *  Most developers should prefer the [[parseTransaction]] method
       *  instead, which will automatically detect the fragment.
       */
      decodeFunctionData(fragment, data) {
        if (typeof fragment === "string") {
          const f2 = this.getFunction(fragment);
          (0, index_js_3.assertArgument)(f2, "unknown function", "fragment", fragment);
          fragment = f2;
        }
        (0, index_js_3.assertArgument)((0, index_js_3.dataSlice)(data, 0, 4) === fragment.selector, `data signature does not match function ${fragment.name}.`, "data", data);
        return this._decodeParams(fragment.inputs, (0, index_js_3.dataSlice)(data, 4));
      }
      /**
       *  Encodes the ``tx.data`` for a transaction that calls the function
       *  specified (see [[getFunction]] for valid values for %%fragment%%) with
       *  the %%values%%.
       */
      encodeFunctionData(fragment, values) {
        if (typeof fragment === "string") {
          const f2 = this.getFunction(fragment);
          (0, index_js_3.assertArgument)(f2, "unknown function", "fragment", fragment);
          fragment = f2;
        }
        return (0, index_js_3.concat)([
          fragment.selector,
          this._encodeParams(fragment.inputs, values || [])
        ]);
      }
      /**
       *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the
       *  specified function (see [[getFunction]] for valid values for
       *  %%key%%).
       *
       *  Most developers should prefer the [[parseCallResult]] method instead,
       *  which will automatically detect a ``CALL_EXCEPTION`` and throw the
       *  corresponding error.
       */
      decodeFunctionResult(fragment, data) {
        if (typeof fragment === "string") {
          const f2 = this.getFunction(fragment);
          (0, index_js_3.assertArgument)(f2, "unknown function", "fragment", fragment);
          fragment = f2;
        }
        let message = "invalid length for result data";
        const bytes = (0, index_js_3.getBytesCopy)(data);
        if (bytes.length % 32 === 0) {
          try {
            return __privateGet(this, _abiCoder).decode(fragment.outputs, bytes);
          } catch (error) {
            message = "could not decode result data";
          }
        }
        (0, index_js_3.assert)(false, message, "BAD_DATA", {
          value: (0, index_js_3.hexlify)(bytes),
          info: { method: fragment.name, signature: fragment.format() }
        });
      }
      makeError(_data, tx) {
        const data = (0, index_js_3.getBytes)(_data, "data");
        const error = abi_coder_js_1.AbiCoder.getBuiltinCallException("call", tx, data);
        const customPrefix = "execution reverted (unknown custom error)";
        if (error.message.startsWith(customPrefix)) {
          const selector = (0, index_js_3.hexlify)(data.slice(0, 4));
          const ef = this.getError(selector);
          if (ef) {
            try {
              const args = __privateGet(this, _abiCoder).decode(ef.inputs, data.slice(4));
              error.revert = {
                name: ef.name,
                signature: ef.format(),
                args
              };
              error.reason = error.revert.signature;
              error.message = `execution reverted: ${error.reason}`;
            } catch (e) {
              error.message = `execution reverted (coult not decode custom error)`;
            }
          }
        }
        const parsed = this.parseTransaction(tx);
        if (parsed) {
          error.invocation = {
            method: parsed.name,
            signature: parsed.signature,
            args: parsed.args
          };
        }
        return error;
      }
      /**
       *  Encodes the result data (e.g. from an ``eth_call``) for the
       *  specified function (see [[getFunction]] for valid values
       *  for %%fragment%%) with %%values%%.
       *
       *  This is generally not used by most developers, unless trying to mock
       *  a result from a Contract.
       */
      encodeFunctionResult(fragment, values) {
        if (typeof fragment === "string") {
          const f2 = this.getFunction(fragment);
          (0, index_js_3.assertArgument)(f2, "unknown function", "fragment", fragment);
          fragment = f2;
        }
        return (0, index_js_3.hexlify)(__privateGet(this, _abiCoder).encode(fragment.outputs, values || []));
      }
      /*
          spelunk(inputs: Array<ParamType>, values: ReadonlyArray<any>, processfunc: (type: string, value: any) => Promise<any>): Promise<Array<any>> {
              const promises: Array<Promise<>> = [ ];
              const process = function(type: ParamType, value: any): any {
                  if (type.baseType === "array") {
                      return descend(type.child
                  }
                  if (type. === "address") {
                  }
              };
      
              const descend = function (inputs: Array<ParamType>, values: ReadonlyArray<any>) {
                  if (inputs.length !== values.length) { throw new Error("length mismatch"); }
                  
              };
      
              const result: Array<any> = [ ];
              values.forEach((value, index) => {
                  if (value == null) {
                      topics.push(null);
                  } else if (param.baseType === "array" || param.baseType === "tuple") {
                      logger.throwArgumentError("filtering with tuples or arrays not supported", ("contract." + param.name), value);
                  } else if (Array.isArray(value)) {
                      topics.push(value.map((value) => encodeTopic(param, value)));
                  } else {
                      topics.push(encodeTopic(param, value));
                  }
              });
          }
      */
      // Create the filter for the event with search criteria (e.g. for eth_filterLog)
      encodeFilterTopics(fragment, values) {
        if (typeof fragment === "string") {
          const f2 = this.getEvent(fragment);
          (0, index_js_3.assertArgument)(f2, "unknown event", "eventFragment", fragment);
          fragment = f2;
        }
        (0, index_js_3.assert)(values.length <= fragment.inputs.length, `too many arguments for ${fragment.format()}`, "UNEXPECTED_ARGUMENT", { count: values.length, expectedCount: fragment.inputs.length });
        const topics = [];
        if (!fragment.anonymous) {
          topics.push(fragment.topicHash);
        }
        const encodeTopic = (param, value) => {
          if (param.type === "string") {
            return (0, index_js_2.id)(value);
          } else if (param.type === "bytes") {
            return (0, index_js_1.keccak256)((0, index_js_3.hexlify)(value));
          }
          if (param.type === "bool" && typeof value === "boolean") {
            value = value ? "0x01" : "0x00";
          } else if (param.type.match(/^u?int/)) {
            value = (0, index_js_3.toBeHex)(value);
          } else if (param.type.match(/^bytes/)) {
            value = (0, index_js_3.zeroPadBytes)(value, 32);
          } else if (param.type === "address") {
            __privateGet(this, _abiCoder).encode(["address"], [value]);
          }
          return (0, index_js_3.zeroPadValue)((0, index_js_3.hexlify)(value), 32);
        };
        values.forEach((value, index) => {
          const param = fragment.inputs[index];
          if (!param.indexed) {
            (0, index_js_3.assertArgument)(value == null, "cannot filter non-indexed parameters; must be null", "contract." + param.name, value);
            return;
          }
          if (value == null) {
            topics.push(null);
          } else if (param.baseType === "array" || param.baseType === "tuple") {
            (0, index_js_3.assertArgument)(false, "filtering with tuples or arrays not supported", "contract." + param.name, value);
          } else if (Array.isArray(value)) {
            topics.push(value.map((value2) => encodeTopic(param, value2)));
          } else {
            topics.push(encodeTopic(param, value));
          }
        });
        while (topics.length && topics[topics.length - 1] === null) {
          topics.pop();
        }
        return topics;
      }
      encodeEventLog(fragment, values) {
        if (typeof fragment === "string") {
          const f2 = this.getEvent(fragment);
          (0, index_js_3.assertArgument)(f2, "unknown event", "eventFragment", fragment);
          fragment = f2;
        }
        const topics = [];
        const dataTypes = [];
        const dataValues = [];
        if (!fragment.anonymous) {
          topics.push(fragment.topicHash);
        }
        (0, index_js_3.assertArgument)(values.length === fragment.inputs.length, "event arguments/values mismatch", "values", values);
        fragment.inputs.forEach((param, index) => {
          const value = values[index];
          if (param.indexed) {
            if (param.type === "string") {
              topics.push((0, index_js_2.id)(value));
            } else if (param.type === "bytes") {
              topics.push((0, index_js_1.keccak256)(value));
            } else if (param.baseType === "tuple" || param.baseType === "array") {
              throw new Error("not implemented");
            } else {
              topics.push(__privateGet(this, _abiCoder).encode([param.type], [value]));
            }
          } else {
            dataTypes.push(param);
            dataValues.push(value);
          }
        });
        return {
          data: __privateGet(this, _abiCoder).encode(dataTypes, dataValues),
          topics
        };
      }
      // Decode a filter for the event and the search criteria
      decodeEventLog(fragment, data, topics) {
        if (typeof fragment === "string") {
          const f2 = this.getEvent(fragment);
          (0, index_js_3.assertArgument)(f2, "unknown event", "eventFragment", fragment);
          fragment = f2;
        }
        if (topics != null && !fragment.anonymous) {
          const eventTopic = fragment.topicHash;
          (0, index_js_3.assertArgument)((0, index_js_3.isHexString)(topics[0], 32) && topics[0].toLowerCase() === eventTopic, "fragment/topic mismatch", "topics[0]", topics[0]);
          topics = topics.slice(1);
        }
        const indexed = [];
        const nonIndexed = [];
        const dynamic = [];
        fragment.inputs.forEach((param, index) => {
          if (param.indexed) {
            if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
              indexed.push(fragments_js_1.ParamType.from({ type: "bytes32", name: param.name }));
              dynamic.push(true);
            } else {
              indexed.push(param);
              dynamic.push(false);
            }
          } else {
            nonIndexed.push(param);
            dynamic.push(false);
          }
        });
        const resultIndexed = topics != null ? __privateGet(this, _abiCoder).decode(indexed, (0, index_js_3.concat)(topics)) : null;
        const resultNonIndexed = __privateGet(this, _abiCoder).decode(nonIndexed, data, true);
        const values = [];
        const keys = [];
        let nonIndexedIndex = 0, indexedIndex = 0;
        fragment.inputs.forEach((param, index) => {
          let value = null;
          if (param.indexed) {
            if (resultIndexed == null) {
              value = new Indexed(null);
            } else if (dynamic[index]) {
              value = new Indexed(resultIndexed[indexedIndex++]);
            } else {
              try {
                value = resultIndexed[indexedIndex++];
              } catch (error) {
                value = error;
              }
            }
          } else {
            try {
              value = resultNonIndexed[nonIndexedIndex++];
            } catch (error) {
              value = error;
            }
          }
          values.push(value);
          keys.push(param.name || null);
        });
        return abstract_coder_js_1.Result.fromItems(values, keys);
      }
      /**
       *  Parses a transaction, finding the matching function and extracts
       *  the parameter values along with other useful function details.
       *
       *  If the matching function cannot be found, return null.
       */
      parseTransaction(tx) {
        const data = (0, index_js_3.getBytes)(tx.data, "tx.data");
        const value = (0, index_js_3.getBigInt)(tx.value != null ? tx.value : 0, "tx.value");
        const fragment = this.getFunction((0, index_js_3.hexlify)(data.slice(0, 4)));
        if (!fragment) {
          return null;
        }
        const args = __privateGet(this, _abiCoder).decode(fragment.inputs, data.slice(4));
        return new TransactionDescription(fragment, fragment.selector, args, value);
      }
      parseCallResult(data) {
        throw new Error("@TODO");
      }
      /**
       *  Parses a receipt log, finding the matching event and extracts
       *  the parameter values along with other useful event details.
       *
       *  If the matching event cannot be found, returns null.
       */
      parseLog(log) {
        const fragment = this.getEvent(log.topics[0]);
        if (!fragment || fragment.anonymous) {
          return null;
        }
        return new LogDescription(fragment, fragment.topicHash, this.decodeEventLog(fragment, log.data, log.topics));
      }
      /**
       *  Parses a revert data, finding the matching error and extracts
       *  the parameter values along with other useful error details.
       *
       *  If the matching error cannot be found, returns null.
       */
      parseError(data) {
        const hexData = (0, index_js_3.hexlify)(data);
        const fragment = this.getError((0, index_js_3.dataSlice)(hexData, 0, 4));
        if (!fragment) {
          return null;
        }
        const args = __privateGet(this, _abiCoder).decode(fragment.inputs, (0, index_js_3.dataSlice)(hexData, 4));
        return new ErrorDescription(fragment, fragment.selector, args);
      }
      /**
       *  Creates a new [[Interface]] from the ABI %%value%%.
       *
       *  The %%value%% may be provided as an existing [[Interface]] object,
       *  a JSON-encoded ABI or any Human-Readable ABI format.
       */
      static from(value) {
        if (value instanceof _Interface) {
          return value;
        }
        if (typeof value === "string") {
          return new _Interface(JSON.parse(value));
        }
        if (typeof value.formatJson === "function") {
          return new _Interface(value.formatJson());
        }
        if (typeof value.format === "function") {
          return new _Interface(value.format("json"));
        }
        return new _Interface(value);
      }
    };
    _errors = new WeakMap();
    _events = new WeakMap();
    _functions = new WeakMap();
    _abiCoder = new WeakMap();
    _Interface_instances = new WeakSet();
    // Find a function definition by any means necessary (unless it is ambiguous)
    getFunction_fn = function(key, values, forceUnique) {
      if ((0, index_js_3.isHexString)(key)) {
        const selector = key.toLowerCase();
        for (const fragment of __privateGet(this, _functions).values()) {
          if (selector === fragment.selector) {
            return fragment;
          }
        }
        return null;
      }
      if (key.indexOf("(") === -1) {
        const matching = [];
        for (const [name, fragment] of __privateGet(this, _functions)) {
          if (name.split(
            "("
            /* fix:) */
          )[0] === key) {
            matching.push(fragment);
          }
        }
        if (values) {
          const lastValue = values.length > 0 ? values[values.length - 1] : null;
          let valueLength = values.length;
          let allowOptions = true;
          if (typed_js_1.Typed.isTyped(lastValue) && lastValue.type === "overrides") {
            allowOptions = false;
            valueLength--;
          }
          for (let i = matching.length - 1; i >= 0; i--) {
            const inputs = matching[i].inputs.length;
            if (inputs !== valueLength && (!allowOptions || inputs !== valueLength - 1)) {
              matching.splice(i, 1);
            }
          }
          for (let i = matching.length - 1; i >= 0; i--) {
            const inputs = matching[i].inputs;
            for (let j = 0; j < values.length; j++) {
              if (!typed_js_1.Typed.isTyped(values[j])) {
                continue;
              }
              if (j >= inputs.length) {
                if (values[j].type === "overrides") {
                  continue;
                }
                matching.splice(i, 1);
                break;
              }
              if (values[j].type !== inputs[j].baseType) {
                matching.splice(i, 1);
                break;
              }
            }
          }
        }
        if (matching.length === 1 && values && values.length !== matching[0].inputs.length) {
          const lastArg = values[values.length - 1];
          if (lastArg == null || Array.isArray(lastArg) || typeof lastArg !== "object") {
            matching.splice(0, 1);
          }
        }
        if (matching.length === 0) {
          return null;
        }
        if (matching.length > 1 && forceUnique) {
          const matchStr = matching.map((m) => JSON.stringify(m.format())).join(", ");
          (0, index_js_3.assertArgument)(false, `ambiguous function description (i.e. matches ${matchStr})`, "key", key);
        }
        return matching[0];
      }
      const result = __privateGet(this, _functions).get(fragments_js_1.FunctionFragment.from(key).format());
      if (result) {
        return result;
      }
      return null;
    };
    // Find an event definition by any means necessary (unless it is ambiguous)
    getEvent_fn = function(key, values, forceUnique) {
      if ((0, index_js_3.isHexString)(key)) {
        const eventTopic = key.toLowerCase();
        for (const fragment of __privateGet(this, _events).values()) {
          if (eventTopic === fragment.topicHash) {
            return fragment;
          }
        }
        return null;
      }
      if (key.indexOf("(") === -1) {
        const matching = [];
        for (const [name, fragment] of __privateGet(this, _events)) {
          if (name.split(
            "("
            /* fix:) */
          )[0] === key) {
            matching.push(fragment);
          }
        }
        if (values) {
          for (let i = matching.length - 1; i >= 0; i--) {
            if (matching[i].inputs.length < values.length) {
              matching.splice(i, 1);
            }
          }
          for (let i = matching.length - 1; i >= 0; i--) {
            const inputs = matching[i].inputs;
            for (let j = 0; j < values.length; j++) {
              if (!typed_js_1.Typed.isTyped(values[j])) {
                continue;
              }
              if (values[j].type !== inputs[j].baseType) {
                matching.splice(i, 1);
                break;
              }
            }
          }
        }
        if (matching.length === 0) {
          return null;
        }
        if (matching.length > 1 && forceUnique) {
          const matchStr = matching.map((m) => JSON.stringify(m.format())).join(", ");
          (0, index_js_3.assertArgument)(false, `ambiguous event description (i.e. matches ${matchStr})`, "key", key);
        }
        return matching[0];
      }
      const result = __privateGet(this, _events).get(fragments_js_1.EventFragment.from(key).format());
      if (result) {
        return result;
      }
      return null;
    };
    var Interface = _Interface;
    exports2.Interface = Interface;
  }
});

// node_modules/ethers/lib.commonjs/abi/index.js
var require_abi = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Typed = exports2.Result = exports2.TransactionDescription = exports2.LogDescription = exports2.ErrorDescription = exports2.Interface = exports2.Indexed = exports2.checkResultErrors = exports2.StructFragment = exports2.ParamType = exports2.NamedFragment = exports2.FunctionFragment = exports2.Fragment = exports2.FallbackFragment = exports2.EventFragment = exports2.ErrorFragment = exports2.ConstructorFragment = exports2.encodeBytes32String = exports2.decodeBytes32String = exports2.AbiCoder = void 0;
    var abi_coder_js_1 = require_abi_coder();
    Object.defineProperty(exports2, "AbiCoder", { enumerable: true, get: function() {
      return abi_coder_js_1.AbiCoder;
    } });
    var bytes32_js_1 = require_bytes32();
    Object.defineProperty(exports2, "decodeBytes32String", { enumerable: true, get: function() {
      return bytes32_js_1.decodeBytes32String;
    } });
    Object.defineProperty(exports2, "encodeBytes32String", { enumerable: true, get: function() {
      return bytes32_js_1.encodeBytes32String;
    } });
    var fragments_js_1 = require_fragments();
    Object.defineProperty(exports2, "ConstructorFragment", { enumerable: true, get: function() {
      return fragments_js_1.ConstructorFragment;
    } });
    Object.defineProperty(exports2, "ErrorFragment", { enumerable: true, get: function() {
      return fragments_js_1.ErrorFragment;
    } });
    Object.defineProperty(exports2, "EventFragment", { enumerable: true, get: function() {
      return fragments_js_1.EventFragment;
    } });
    Object.defineProperty(exports2, "FallbackFragment", { enumerable: true, get: function() {
      return fragments_js_1.FallbackFragment;
    } });
    Object.defineProperty(exports2, "Fragment", { enumerable: true, get: function() {
      return fragments_js_1.Fragment;
    } });
    Object.defineProperty(exports2, "FunctionFragment", { enumerable: true, get: function() {
      return fragments_js_1.FunctionFragment;
    } });
    Object.defineProperty(exports2, "NamedFragment", { enumerable: true, get: function() {
      return fragments_js_1.NamedFragment;
    } });
    Object.defineProperty(exports2, "ParamType", { enumerable: true, get: function() {
      return fragments_js_1.ParamType;
    } });
    Object.defineProperty(exports2, "StructFragment", { enumerable: true, get: function() {
      return fragments_js_1.StructFragment;
    } });
    var interface_js_1 = require_interface();
    Object.defineProperty(exports2, "checkResultErrors", { enumerable: true, get: function() {
      return interface_js_1.checkResultErrors;
    } });
    Object.defineProperty(exports2, "Indexed", { enumerable: true, get: function() {
      return interface_js_1.Indexed;
    } });
    Object.defineProperty(exports2, "Interface", { enumerable: true, get: function() {
      return interface_js_1.Interface;
    } });
    Object.defineProperty(exports2, "ErrorDescription", { enumerable: true, get: function() {
      return interface_js_1.ErrorDescription;
    } });
    Object.defineProperty(exports2, "LogDescription", { enumerable: true, get: function() {
      return interface_js_1.LogDescription;
    } });
    Object.defineProperty(exports2, "TransactionDescription", { enumerable: true, get: function() {
      return interface_js_1.TransactionDescription;
    } });
    Object.defineProperty(exports2, "Result", { enumerable: true, get: function() {
      return interface_js_1.Result;
    } });
    var typed_js_1 = require_typed();
    Object.defineProperty(exports2, "Typed", { enumerable: true, get: function() {
      return typed_js_1.Typed;
    } });
  }
});

// node_modules/ethers/lib.commonjs/providers/provider.js
var require_provider = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TransactionResponse = exports2.TransactionReceipt = exports2.Log = exports2.Block = exports2.copyRequest = exports2.FeeData = void 0;
    var index_js_1 = require_utils11();
    var index_js_2 = require_transaction2();
    var BN_0 = BigInt(0);
    function getValue(value) {
      if (value == null) {
        return null;
      }
      return value;
    }
    function toJson(value) {
      if (value == null) {
        return null;
      }
      return value.toString();
    }
    var FeeData = class {
      /**
       *  Creates a new FeeData for %%gasPrice%%, %%maxFeePerGas%% and
       *  %%maxPriorityFeePerGas%%.
       */
      constructor(gasPrice, maxFeePerGas, maxPriorityFeePerGas) {
        /**
         *  The gas price for legacy networks.
         */
        __publicField(this, "gasPrice");
        /**
         *  The maximum fee to pay per gas.
         *
         *  The base fee per gas is defined by the network and based on
         *  congestion, increasing the cost during times of heavy load
         *  and lowering when less busy.
         *
         *  The actual fee per gas will be the base fee for the block
         *  and the priority fee, up to the max fee per gas.
         *
         *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))
         */
        __publicField(this, "maxFeePerGas");
        /**
         *  The additional amout to pay per gas to encourage a validator
         *  to include the transaction.
         *
         *  The purpose of this is to compensate the validator for the
         *  adjusted risk for including a given transaction.
         *
         *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))
         */
        __publicField(this, "maxPriorityFeePerGas");
        (0, index_js_1.defineProperties)(this, {
          gasPrice: getValue(gasPrice),
          maxFeePerGas: getValue(maxFeePerGas),
          maxPriorityFeePerGas: getValue(maxPriorityFeePerGas)
        });
      }
      /**
       *  Returns a JSON-friendly value.
       */
      toJSON() {
        const { gasPrice, maxFeePerGas, maxPriorityFeePerGas } = this;
        return {
          _type: "FeeData",
          gasPrice: toJson(gasPrice),
          maxFeePerGas: toJson(maxFeePerGas),
          maxPriorityFeePerGas: toJson(maxPriorityFeePerGas)
        };
      }
    };
    exports2.FeeData = FeeData;
    function copyRequest(req) {
      const result = {};
      if (req.to) {
        result.to = req.to;
      }
      if (req.from) {
        result.from = req.from;
      }
      if (req.data) {
        result.data = (0, index_js_1.hexlify)(req.data);
      }
      const bigIntKeys = "chainId,gasLimit,gasPrice,maxFeePerBlobGas,maxFeePerGas,maxPriorityFeePerGas,value".split(/,/);
      for (const key of bigIntKeys) {
        if (!(key in req) || req[key] == null) {
          continue;
        }
        result[key] = (0, index_js_1.getBigInt)(req[key], `request.${key}`);
      }
      const numberKeys = "type,nonce".split(/,/);
      for (const key of numberKeys) {
        if (!(key in req) || req[key] == null) {
          continue;
        }
        result[key] = (0, index_js_1.getNumber)(req[key], `request.${key}`);
      }
      if (req.accessList) {
        result.accessList = (0, index_js_2.accessListify)(req.accessList);
      }
      if ("blockTag" in req) {
        result.blockTag = req.blockTag;
      }
      if ("enableCcipRead" in req) {
        result.enableCcipRead = !!req.enableCcipRead;
      }
      if ("customData" in req) {
        result.customData = req.customData;
      }
      if ("blobVersionedHashes" in req && req.blobVersionedHashes) {
        result.blobVersionedHashes = req.blobVersionedHashes.slice();
      }
      if ("kzg" in req) {
        result.kzg = req.kzg;
      }
      if ("blobs" in req && req.blobs) {
        result.blobs = req.blobs.map((b) => {
          if ((0, index_js_1.isBytesLike)(b)) {
            return (0, index_js_1.hexlify)(b);
          }
          return Object.assign({}, b);
        });
      }
      return result;
    }
    exports2.copyRequest = copyRequest;
    var _transactions;
    var Block = class {
      /**
       *  Create a new **Block** object.
       *
       *  This should generally not be necessary as the unless implementing a
       *  low-level library.
       */
      constructor(block, provider) {
        /**
         *  The provider connected to the block used to fetch additional details
         *  if necessary.
         */
        __publicField(this, "provider");
        /**
         *  The block number, sometimes called the block height. This is a
         *  sequential number that is one higher than the parent block.
         */
        __publicField(this, "number");
        /**
         *  The block hash.
         *
         *  This hash includes all properties, so can be safely used to identify
         *  an exact set of block properties.
         */
        __publicField(this, "hash");
        /**
         *  The timestamp for this block, which is the number of seconds since
         *  epoch that this block was included.
         */
        __publicField(this, "timestamp");
        /**
         *  The block hash of the parent block.
         */
        __publicField(this, "parentHash");
        /**
         *  The hash tree root of the parent beacon block for the given
         *  execution block. See [[link-eip-4788]].
         */
        __publicField(this, "parentBeaconBlockRoot");
        /**
         *  The nonce.
         *
         *  On legacy networks, this is the random number inserted which
         *  permitted the difficulty target to be reached.
         */
        __publicField(this, "nonce");
        /**
         *  The difficulty target.
         *
         *  On legacy networks, this is the proof-of-work target required
         *  for a block to meet the protocol rules to be included.
         *
         *  On modern networks, this is a random number arrived at using
         *  randao.  @TODO: Find links?
         */
        __publicField(this, "difficulty");
        /**
         *  The total gas limit for this block.
         */
        __publicField(this, "gasLimit");
        /**
         *  The total gas used in this block.
         */
        __publicField(this, "gasUsed");
        /**
         *  The root hash for the global state after applying changes
         *  in this block.
         */
        __publicField(this, "stateRoot");
        /**
         *  The hash of the transaction receipts trie.
         */
        __publicField(this, "receiptsRoot");
        /**
         *  The total amount of blob gas consumed by the transactions
         *  within the block. See [[link-eip-4844]].
         */
        __publicField(this, "blobGasUsed");
        /**
         *  The running total of blob gas consumed in excess of the
         *  target, prior to the block. See [[link-eip-4844]].
         */
        __publicField(this, "excessBlobGas");
        /**
         *  The miner coinbase address, wihch receives any subsidies for
         *  including this block.
         */
        __publicField(this, "miner");
        /**
         *  The latest RANDAO mix of the post beacon state of
         *  the previous block.
         */
        __publicField(this, "prevRandao");
        /**
         *  Any extra data the validator wished to include.
         */
        __publicField(this, "extraData");
        /**
         *  The base fee per gas that all transactions in this block were
         *  charged.
         *
         *  This adjusts after each block, depending on how congested the network
         *  is.
         */
        __publicField(this, "baseFeePerGas");
        __privateAdd(this, _transactions);
        __privateSet(this, _transactions, block.transactions.map((tx) => {
          if (typeof tx !== "string") {
            return new TransactionResponse(tx, provider);
          }
          return tx;
        }));
        (0, index_js_1.defineProperties)(this, {
          provider,
          hash: getValue(block.hash),
          number: block.number,
          timestamp: block.timestamp,
          parentHash: block.parentHash,
          parentBeaconBlockRoot: block.parentBeaconBlockRoot,
          nonce: block.nonce,
          difficulty: block.difficulty,
          gasLimit: block.gasLimit,
          gasUsed: block.gasUsed,
          blobGasUsed: block.blobGasUsed,
          excessBlobGas: block.excessBlobGas,
          miner: block.miner,
          prevRandao: getValue(block.prevRandao),
          extraData: block.extraData,
          baseFeePerGas: getValue(block.baseFeePerGas),
          stateRoot: block.stateRoot,
          receiptsRoot: block.receiptsRoot
        });
      }
      /**
       *  Returns the list of transaction hashes, in the order
       *  they were executed within the block.
       */
      get transactions() {
        return __privateGet(this, _transactions).map((tx) => {
          if (typeof tx === "string") {
            return tx;
          }
          return tx.hash;
        });
      }
      /**
       *  Returns the complete transactions, in the order they
       *  were executed within the block.
       *
       *  This is only available for blocks which prefetched
       *  transactions, by passing ``true`` to %%prefetchTxs%%
       *  into [[Provider-getBlock]].
       */
      get prefetchedTransactions() {
        const txs = __privateGet(this, _transactions).slice();
        if (txs.length === 0) {
          return [];
        }
        (0, index_js_1.assert)(typeof txs[0] === "object", "transactions were not prefetched with block request", "UNSUPPORTED_OPERATION", {
          operation: "transactionResponses()"
        });
        return txs;
      }
      /**
       *  Returns a JSON-friendly value.
       */
      toJSON() {
        const { baseFeePerGas, difficulty, extraData, gasLimit, gasUsed, hash, miner, prevRandao, nonce, number: number2, parentHash, parentBeaconBlockRoot, stateRoot, receiptsRoot, timestamp, transactions } = this;
        return {
          _type: "Block",
          baseFeePerGas: toJson(baseFeePerGas),
          difficulty: toJson(difficulty),
          extraData,
          gasLimit: toJson(gasLimit),
          gasUsed: toJson(gasUsed),
          blobGasUsed: toJson(this.blobGasUsed),
          excessBlobGas: toJson(this.excessBlobGas),
          hash,
          miner,
          prevRandao,
          nonce,
          number: number2,
          parentHash,
          timestamp,
          parentBeaconBlockRoot,
          stateRoot,
          receiptsRoot,
          transactions
        };
      }
      [Symbol.iterator]() {
        let index = 0;
        const txs = this.transactions;
        return {
          next: () => {
            if (index < this.length) {
              return {
                value: txs[index++],
                done: false
              };
            }
            return { value: void 0, done: true };
          }
        };
      }
      /**
       *  The number of transactions in this block.
       */
      get length() {
        return __privateGet(this, _transactions).length;
      }
      /**
       *  The [[link-js-date]] this block was included at.
       */
      get date() {
        if (this.timestamp == null) {
          return null;
        }
        return new Date(this.timestamp * 1e3);
      }
      /**
       *  Get the transaction at %%indexe%% within this block.
       */
      async getTransaction(indexOrHash) {
        let tx = void 0;
        if (typeof indexOrHash === "number") {
          tx = __privateGet(this, _transactions)[indexOrHash];
        } else {
          const hash = indexOrHash.toLowerCase();
          for (const v of __privateGet(this, _transactions)) {
            if (typeof v === "string") {
              if (v !== hash) {
                continue;
              }
              tx = v;
              break;
            } else {
              if (v.hash !== hash) {
                continue;
              }
              tx = v;
              break;
            }
          }
        }
        if (tx == null) {
          throw new Error("no such tx");
        }
        if (typeof tx === "string") {
          return await this.provider.getTransaction(tx);
        } else {
          return tx;
        }
      }
      /**
       *  If a **Block** was fetched with a request to include the transactions
       *  this will allow synchronous access to those transactions.
       *
       *  If the transactions were not prefetched, this will throw.
       */
      getPrefetchedTransaction(indexOrHash) {
        const txs = this.prefetchedTransactions;
        if (typeof indexOrHash === "number") {
          return txs[indexOrHash];
        }
        indexOrHash = indexOrHash.toLowerCase();
        for (const tx of txs) {
          if (tx.hash === indexOrHash) {
            return tx;
          }
        }
        (0, index_js_1.assertArgument)(false, "no matching transaction", "indexOrHash", indexOrHash);
      }
      /**
       *  Returns true if this block been mined. This provides a type guard
       *  for all properties on a [[MinedBlock]].
       */
      isMined() {
        return !!this.hash;
      }
      /**
       *  Returns true if this block is an [[link-eip-2930]] block.
       */
      isLondon() {
        return !!this.baseFeePerGas;
      }
      /**
       *  @_ignore:
       */
      orphanedEvent() {
        if (!this.isMined()) {
          throw new Error("");
        }
        return createOrphanedBlockFilter(this);
      }
    };
    _transactions = new WeakMap();
    exports2.Block = Block;
    var Log = class {
      /**
       *  @_ignore:
       */
      constructor(log, provider) {
        /**
         *  The provider connected to the log used to fetch additional details
         *  if necessary.
         */
        __publicField(this, "provider");
        /**
         *  The transaction hash of the transaction this log occurred in. Use the
         *  [[Log-getTransaction]] to get the [[TransactionResponse]].
         */
        __publicField(this, "transactionHash");
        /**
         *  The block hash of the block this log occurred in. Use the
         *  [[Log-getBlock]] to get the [[Block]].
         */
        __publicField(this, "blockHash");
        /**
         *  The block number of the block this log occurred in. It is preferred
         *  to use the [[Block-hash]] when fetching the related [[Block]],
         *  since in the case of an orphaned block, the block at that height may
         *  have changed.
         */
        __publicField(this, "blockNumber");
        /**
         *  If the **Log** represents a block that was removed due to an orphaned
         *  block, this will be true.
         *
         *  This can only happen within an orphan event listener.
         */
        __publicField(this, "removed");
        /**
         *  The address of the contract that emitted this log.
         */
        __publicField(this, "address");
        /**
         *  The data included in this log when it was emitted.
         */
        __publicField(this, "data");
        /**
         *  The indexed topics included in this log when it was emitted.
         *
         *  All topics are included in the bloom filters, so they can be
         *  efficiently filtered using the [[Provider-getLogs]] method.
         */
        __publicField(this, "topics");
        /**
         *  The index within the block this log occurred at. This is generally
         *  not useful to developers, but can be used with the various roots
         *  to proof inclusion within a block.
         */
        __publicField(this, "index");
        /**
         *  The index within the transaction of this log.
         */
        __publicField(this, "transactionIndex");
        this.provider = provider;
        const topics = Object.freeze(log.topics.slice());
        (0, index_js_1.defineProperties)(this, {
          transactionHash: log.transactionHash,
          blockHash: log.blockHash,
          blockNumber: log.blockNumber,
          removed: log.removed,
          address: log.address,
          data: log.data,
          topics,
          index: log.index,
          transactionIndex: log.transactionIndex
        });
      }
      /**
       *  Returns a JSON-compatible object.
       */
      toJSON() {
        const { address, blockHash, blockNumber, data, index, removed, topics, transactionHash, transactionIndex } = this;
        return {
          _type: "log",
          address,
          blockHash,
          blockNumber,
          data,
          index,
          removed,
          topics,
          transactionHash,
          transactionIndex
        };
      }
      /**
       *  Returns the block that this log occurred in.
       */
      async getBlock() {
        const block = await this.provider.getBlock(this.blockHash);
        (0, index_js_1.assert)(!!block, "failed to find transaction", "UNKNOWN_ERROR", {});
        return block;
      }
      /**
       *  Returns the transaction that this log occurred in.
       */
      async getTransaction() {
        const tx = await this.provider.getTransaction(this.transactionHash);
        (0, index_js_1.assert)(!!tx, "failed to find transaction", "UNKNOWN_ERROR", {});
        return tx;
      }
      /**
       *  Returns the transaction receipt fot the transaction that this
       *  log occurred in.
       */
      async getTransactionReceipt() {
        const receipt = await this.provider.getTransactionReceipt(this.transactionHash);
        (0, index_js_1.assert)(!!receipt, "failed to find transaction receipt", "UNKNOWN_ERROR", {});
        return receipt;
      }
      /**
       *  @_ignore:
       */
      removedEvent() {
        return createRemovedLogFilter(this);
      }
    };
    exports2.Log = Log;
    var _logs;
    var TransactionReceipt = class {
      /**
       *  @_ignore:
       */
      constructor(tx, provider) {
        /**
         *  The provider connected to the log used to fetch additional details
         *  if necessary.
         */
        __publicField(this, "provider");
        /**
         *  The address the transaction was sent to.
         */
        __publicField(this, "to");
        /**
         *  The sender of the transaction.
         */
        __publicField(this, "from");
        /**
         *  The address of the contract if the transaction was directly
         *  responsible for deploying one.
         *
         *  This is non-null **only** if the ``to`` is empty and the ``data``
         *  was successfully executed as initcode.
         */
        __publicField(this, "contractAddress");
        /**
         *  The transaction hash.
         */
        __publicField(this, "hash");
        /**
         *  The index of this transaction within the block transactions.
         */
        __publicField(this, "index");
        /**
         *  The block hash of the [[Block]] this transaction was included in.
         */
        __publicField(this, "blockHash");
        /**
         *  The block number of the [[Block]] this transaction was included in.
         */
        __publicField(this, "blockNumber");
        /**
         *  The bloom filter bytes that represent all logs that occurred within
         *  this transaction. This is generally not useful for most developers,
         *  but can be used to validate the included logs.
         */
        __publicField(this, "logsBloom");
        /**
         *  The actual amount of gas used by this transaction.
         *
         *  When creating a transaction, the amount of gas that will be used can
         *  only be approximated, but the sender must pay the gas fee for the
         *  entire gas limit. After the transaction, the difference is refunded.
         */
        __publicField(this, "gasUsed");
        /**
         *  The gas used for BLObs. See [[link-eip-4844]].
         */
        __publicField(this, "blobGasUsed");
        /**
         *  The amount of gas used by all transactions within the block for this
         *  and all transactions with a lower ``index``.
         *
         *  This is generally not useful for developers but can be used to
         *  validate certain aspects of execution.
         */
        __publicField(this, "cumulativeGasUsed");
        /**
         *  The actual gas price used during execution.
         *
         *  Due to the complexity of [[link-eip-1559]] this value can only
         *  be caluclated after the transaction has been mined, snce the base
         *  fee is protocol-enforced.
         */
        __publicField(this, "gasPrice");
        /**
         *  The price paid per BLOB in gas. See [[link-eip-4844]].
         */
        __publicField(this, "blobGasPrice");
        /**
         *  The [[link-eip-2718]] transaction type.
         */
        __publicField(this, "type");
        //readonly byzantium!: boolean;
        /**
         *  The status of this transaction, indicating success (i.e. ``1``) or
         *  a revert (i.e. ``0``).
         *
         *  This is available in post-byzantium blocks, but some backends may
         *  backfill this value.
         */
        __publicField(this, "status");
        /**
         *  The root hash of this transaction.
         *
         *  This is no present and was only included in pre-byzantium blocks, but
         *  could be used to validate certain parts of the receipt.
         */
        __publicField(this, "root");
        __privateAdd(this, _logs);
        __privateSet(this, _logs, Object.freeze(tx.logs.map((log) => {
          return new Log(log, provider);
        })));
        let gasPrice = BN_0;
        if (tx.effectiveGasPrice != null) {
          gasPrice = tx.effectiveGasPrice;
        } else if (tx.gasPrice != null) {
          gasPrice = tx.gasPrice;
        }
        (0, index_js_1.defineProperties)(this, {
          provider,
          to: tx.to,
          from: tx.from,
          contractAddress: tx.contractAddress,
          hash: tx.hash,
          index: tx.index,
          blockHash: tx.blockHash,
          blockNumber: tx.blockNumber,
          logsBloom: tx.logsBloom,
          gasUsed: tx.gasUsed,
          cumulativeGasUsed: tx.cumulativeGasUsed,
          blobGasUsed: tx.blobGasUsed,
          gasPrice,
          blobGasPrice: tx.blobGasPrice,
          type: tx.type,
          //byzantium: tx.byzantium,
          status: tx.status,
          root: tx.root
        });
      }
      /**
       *  The logs for this transaction.
       */
      get logs() {
        return __privateGet(this, _logs);
      }
      /**
       *  Returns a JSON-compatible representation.
       */
      toJSON() {
        const {
          to,
          from,
          contractAddress,
          hash,
          index,
          blockHash,
          blockNumber,
          logsBloom,
          logs,
          //byzantium, 
          status,
          root: root2
        } = this;
        return {
          _type: "TransactionReceipt",
          blockHash,
          blockNumber,
          //byzantium, 
          contractAddress,
          cumulativeGasUsed: toJson(this.cumulativeGasUsed),
          from,
          gasPrice: toJson(this.gasPrice),
          blobGasUsed: toJson(this.blobGasUsed),
          blobGasPrice: toJson(this.blobGasPrice),
          gasUsed: toJson(this.gasUsed),
          hash,
          index,
          logs,
          logsBloom,
          root: root2,
          status,
          to
        };
      }
      /**
       *  @_ignore:
       */
      get length() {
        return this.logs.length;
      }
      [Symbol.iterator]() {
        let index = 0;
        return {
          next: () => {
            if (index < this.length) {
              return { value: this.logs[index++], done: false };
            }
            return { value: void 0, done: true };
          }
        };
      }
      /**
       *  The total fee for this transaction, in wei.
       */
      get fee() {
        return this.gasUsed * this.gasPrice;
      }
      /**
       *  Resolves to the block this transaction occurred in.
       */
      async getBlock() {
        const block = await this.provider.getBlock(this.blockHash);
        if (block == null) {
          throw new Error("TODO");
        }
        return block;
      }
      /**
       *  Resolves to the transaction this transaction occurred in.
       */
      async getTransaction() {
        const tx = await this.provider.getTransaction(this.hash);
        if (tx == null) {
          throw new Error("TODO");
        }
        return tx;
      }
      /**
       *  Resolves to the return value of the execution of this transaction.
       *
       *  Support for this feature is limited, as it requires an archive node
       *  with the ``debug_`` or ``trace_`` API enabled.
       */
      async getResult() {
        return await this.provider.getTransactionResult(this.hash);
      }
      /**
       *  Resolves to the number of confirmations this transaction has.
       */
      async confirmations() {
        return await this.provider.getBlockNumber() - this.blockNumber + 1;
      }
      /**
       *  @_ignore:
       */
      removedEvent() {
        return createRemovedTransactionFilter(this);
      }
      /**
       *  @_ignore:
       */
      reorderedEvent(other) {
        (0, index_js_1.assert)(!other || other.isMined(), "unmined 'other' transction cannot be orphaned", "UNSUPPORTED_OPERATION", { operation: "reorderedEvent(other)" });
        return createReorderedTransactionFilter(this, other);
      }
    };
    _logs = new WeakMap();
    exports2.TransactionReceipt = TransactionReceipt;
    var _startBlock;
    var _TransactionResponse = class _TransactionResponse {
      /**
       *  @_ignore:
       */
      constructor(tx, provider) {
        /**
         *  The provider this is connected to, which will influence how its
         *  methods will resolve its async inspection methods.
         */
        __publicField(this, "provider");
        /**
         *  The block number of the block that this transaction was included in.
         *
         *  This is ``null`` for pending transactions.
         */
        __publicField(this, "blockNumber");
        /**
         *  The blockHash of the block that this transaction was included in.
         *
         *  This is ``null`` for pending transactions.
         */
        __publicField(this, "blockHash");
        /**
         *  The index within the block that this transaction resides at.
         */
        __publicField(this, "index");
        /**
         *  The transaction hash.
         */
        __publicField(this, "hash");
        /**
         *  The [[link-eip-2718]] transaction envelope type. This is
         *  ``0`` for legacy transactions types.
         */
        __publicField(this, "type");
        /**
         *  The receiver of this transaction.
         *
         *  If ``null``, then the transaction is an initcode transaction.
         *  This means the result of executing the [[data]] will be deployed
         *  as a new contract on chain (assuming it does not revert) and the
         *  address may be computed using [[getCreateAddress]].
         */
        __publicField(this, "to");
        /**
         *  The sender of this transaction. It is implicitly computed
         *  from the transaction pre-image hash (as the digest) and the
         *  [[signature]] using ecrecover.
         */
        __publicField(this, "from");
        /**
         *  The nonce, which is used to prevent replay attacks and offer
         *  a method to ensure transactions from a given sender are explicitly
         *  ordered.
         *
         *  When sending a transaction, this must be equal to the number of
         *  transactions ever sent by [[from]].
         */
        __publicField(this, "nonce");
        /**
         *  The maximum units of gas this transaction can consume. If execution
         *  exceeds this, the entries transaction is reverted and the sender
         *  is charged for the full amount, despite not state changes being made.
         */
        __publicField(this, "gasLimit");
        /**
         *  The gas price can have various values, depending on the network.
         *
         *  In modern networks, for transactions that are included this is
         *  the //effective gas price// (the fee per gas that was actually
         *  charged), while for transactions that have not been included yet
         *  is the [[maxFeePerGas]].
         *
         *  For legacy transactions, or transactions on legacy networks, this
         *  is the fee that will be charged per unit of gas the transaction
         *  consumes.
         */
        __publicField(this, "gasPrice");
        /**
         *  The maximum priority fee (per unit of gas) to allow a
         *  validator to charge the sender. This is inclusive of the
         *  [[maxFeeFeePerGas]].
         */
        __publicField(this, "maxPriorityFeePerGas");
        /**
         *  The maximum fee (per unit of gas) to allow this transaction
         *  to charge the sender.
         */
        __publicField(this, "maxFeePerGas");
        /**
         *  The [[link-eip-4844]] max fee per BLOb gas.
         */
        __publicField(this, "maxFeePerBlobGas");
        /**
         *  The data.
         */
        __publicField(this, "data");
        /**
         *  The value, in wei. Use [[formatEther]] to format this value
         *  as ether.
         */
        __publicField(this, "value");
        /**
         *  The chain ID.
         */
        __publicField(this, "chainId");
        /**
         *  The signature.
         */
        __publicField(this, "signature");
        /**
         *  The [[link-eip-2930]] access list for transaction types that
         *  support it, otherwise ``null``.
         */
        __publicField(this, "accessList");
        /**
         *  The [[link-eip-4844]] BLOb versioned hashes.
         */
        __publicField(this, "blobVersionedHashes");
        __privateAdd(this, _startBlock);
        this.provider = provider;
        this.blockNumber = tx.blockNumber != null ? tx.blockNumber : null;
        this.blockHash = tx.blockHash != null ? tx.blockHash : null;
        this.hash = tx.hash;
        this.index = tx.index;
        this.type = tx.type;
        this.from = tx.from;
        this.to = tx.to || null;
        this.gasLimit = tx.gasLimit;
        this.nonce = tx.nonce;
        this.data = tx.data;
        this.value = tx.value;
        this.gasPrice = tx.gasPrice;
        this.maxPriorityFeePerGas = tx.maxPriorityFeePerGas != null ? tx.maxPriorityFeePerGas : null;
        this.maxFeePerGas = tx.maxFeePerGas != null ? tx.maxFeePerGas : null;
        this.maxFeePerBlobGas = tx.maxFeePerBlobGas != null ? tx.maxFeePerBlobGas : null;
        this.chainId = tx.chainId;
        this.signature = tx.signature;
        this.accessList = tx.accessList != null ? tx.accessList : null;
        this.blobVersionedHashes = tx.blobVersionedHashes != null ? tx.blobVersionedHashes : null;
        __privateSet(this, _startBlock, -1);
      }
      /**
       *  Returns a JSON-compatible representation of this transaction.
       */
      toJSON() {
        const { blockNumber, blockHash, index, hash, type: type2, to, from, nonce, data, signature: signature2, accessList, blobVersionedHashes } = this;
        return {
          _type: "TransactionResponse",
          accessList,
          blockNumber,
          blockHash,
          blobVersionedHashes,
          chainId: toJson(this.chainId),
          data,
          from,
          gasLimit: toJson(this.gasLimit),
          gasPrice: toJson(this.gasPrice),
          hash,
          maxFeePerGas: toJson(this.maxFeePerGas),
          maxPriorityFeePerGas: toJson(this.maxPriorityFeePerGas),
          maxFeePerBlobGas: toJson(this.maxFeePerBlobGas),
          nonce,
          signature: signature2,
          to,
          index,
          type: type2,
          value: toJson(this.value)
        };
      }
      /**
       *  Resolves to the Block that this transaction was included in.
       *
       *  This will return null if the transaction has not been included yet.
       */
      async getBlock() {
        let blockNumber = this.blockNumber;
        if (blockNumber == null) {
          const tx = await this.getTransaction();
          if (tx) {
            blockNumber = tx.blockNumber;
          }
        }
        if (blockNumber == null) {
          return null;
        }
        const block = this.provider.getBlock(blockNumber);
        if (block == null) {
          throw new Error("TODO");
        }
        return block;
      }
      /**
       *  Resolves to this transaction being re-requested from the
       *  provider. This can be used if you have an unmined transaction
       *  and wish to get an up-to-date populated instance.
       */
      async getTransaction() {
        return this.provider.getTransaction(this.hash);
      }
      /**
       *  Resolve to the number of confirmations this transaction has.
       */
      async confirmations() {
        if (this.blockNumber == null) {
          const { tx, blockNumber: blockNumber2 } = await (0, index_js_1.resolveProperties)({
            tx: this.getTransaction(),
            blockNumber: this.provider.getBlockNumber()
          });
          if (tx == null || tx.blockNumber == null) {
            return 0;
          }
          return blockNumber2 - tx.blockNumber + 1;
        }
        const blockNumber = await this.provider.getBlockNumber();
        return blockNumber - this.blockNumber + 1;
      }
      /**
       *  Resolves once this transaction has been mined and has
       *  %%confirms%% blocks including it (default: ``1``) with an
       *  optional %%timeout%%.
       *
       *  This can resolve to ``null`` only if %%confirms%% is ``0``
       *  and the transaction has not been mined, otherwise this will
       *  wait until enough confirmations have completed.
       */
      async wait(_confirms, _timeout) {
        const confirms = _confirms == null ? 1 : _confirms;
        const timeout = _timeout == null ? 0 : _timeout;
        let startBlock = __privateGet(this, _startBlock);
        let nextScan = -1;
        let stopScanning = startBlock === -1 ? true : false;
        const checkReplacement = async () => {
          if (stopScanning) {
            return null;
          }
          const { blockNumber, nonce } = await (0, index_js_1.resolveProperties)({
            blockNumber: this.provider.getBlockNumber(),
            nonce: this.provider.getTransactionCount(this.from)
          });
          if (nonce < this.nonce) {
            startBlock = blockNumber;
            return;
          }
          if (stopScanning) {
            return null;
          }
          const mined = await this.getTransaction();
          if (mined && mined.blockNumber != null) {
            return;
          }
          if (nextScan === -1) {
            nextScan = startBlock - 3;
            if (nextScan < __privateGet(this, _startBlock)) {
              nextScan = __privateGet(this, _startBlock);
            }
          }
          while (nextScan <= blockNumber) {
            if (stopScanning) {
              return null;
            }
            const block = await this.provider.getBlock(nextScan, true);
            if (block == null) {
              return;
            }
            for (const hash of block) {
              if (hash === this.hash) {
                return;
              }
            }
            for (let i = 0; i < block.length; i++) {
              const tx = await block.getTransaction(i);
              if (tx.from === this.from && tx.nonce === this.nonce) {
                if (stopScanning) {
                  return null;
                }
                const receipt2 = await this.provider.getTransactionReceipt(tx.hash);
                if (receipt2 == null) {
                  return;
                }
                if (blockNumber - receipt2.blockNumber + 1 < confirms) {
                  return;
                }
                let reason = "replaced";
                if (tx.data === this.data && tx.to === this.to && tx.value === this.value) {
                  reason = "repriced";
                } else if (tx.data === "0x" && tx.from === tx.to && tx.value === BN_0) {
                  reason = "cancelled";
                }
                (0, index_js_1.assert)(false, "transaction was replaced", "TRANSACTION_REPLACED", {
                  cancelled: reason === "replaced" || reason === "cancelled",
                  reason,
                  replacement: tx.replaceableTransaction(startBlock),
                  hash: tx.hash,
                  receipt: receipt2
                });
              }
            }
            nextScan++;
          }
          return;
        };
        const checkReceipt = (receipt2) => {
          if (receipt2 == null || receipt2.status !== 0) {
            return receipt2;
          }
          (0, index_js_1.assert)(false, "transaction execution reverted", "CALL_EXCEPTION", {
            action: "sendTransaction",
            data: null,
            reason: null,
            invocation: null,
            revert: null,
            transaction: {
              to: receipt2.to,
              from: receipt2.from,
              data: ""
              // @TODO: in v7, split out sendTransaction properties
            },
            receipt: receipt2
          });
        };
        const receipt = await this.provider.getTransactionReceipt(this.hash);
        if (confirms === 0) {
          return checkReceipt(receipt);
        }
        if (receipt) {
          if (await receipt.confirmations() >= confirms) {
            return checkReceipt(receipt);
          }
        } else {
          await checkReplacement();
          if (confirms === 0) {
            return null;
          }
        }
        const waiter = new Promise((resolve, reject) => {
          const cancellers = [];
          const cancel = () => {
            cancellers.forEach((c) => c());
          };
          cancellers.push(() => {
            stopScanning = true;
          });
          if (timeout > 0) {
            const timer = setTimeout(() => {
              cancel();
              reject((0, index_js_1.makeError)("wait for transaction timeout", "TIMEOUT"));
            }, timeout);
            cancellers.push(() => {
              clearTimeout(timer);
            });
          }
          const txListener = async (receipt2) => {
            if (await receipt2.confirmations() >= confirms) {
              cancel();
              try {
                resolve(checkReceipt(receipt2));
              } catch (error) {
                reject(error);
              }
            }
          };
          cancellers.push(() => {
            this.provider.off(this.hash, txListener);
          });
          this.provider.on(this.hash, txListener);
          if (startBlock >= 0) {
            const replaceListener = async () => {
              try {
                await checkReplacement();
              } catch (error) {
                if ((0, index_js_1.isError)(error, "TRANSACTION_REPLACED")) {
                  cancel();
                  reject(error);
                  return;
                }
              }
              if (!stopScanning) {
                this.provider.once("block", replaceListener);
              }
            };
            cancellers.push(() => {
              this.provider.off("block", replaceListener);
            });
            this.provider.once("block", replaceListener);
          }
        });
        return await waiter;
      }
      /**
       *  Returns ``true`` if this transaction has been included.
       *
       *  This is effective only as of the time the TransactionResponse
       *  was instantiated. To get up-to-date information, use
       *  [[getTransaction]].
       *
       *  This provides a Type Guard that this transaction will have
       *  non-null property values for properties that are null for
       *  unmined transactions.
       */
      isMined() {
        return this.blockHash != null;
      }
      /**
       *  Returns true if the transaction is a legacy (i.e. ``type == 0``)
       *  transaction.
       *
       *  This provides a Type Guard that this transaction will have
       *  the ``null``-ness for hardfork-specific properties set correctly.
       */
      isLegacy() {
        return this.type === 0;
      }
      /**
       *  Returns true if the transaction is a Berlin (i.e. ``type == 1``)
       *  transaction. See [[link-eip-2070]].
       *
       *  This provides a Type Guard that this transaction will have
       *  the ``null``-ness for hardfork-specific properties set correctly.
       */
      isBerlin() {
        return this.type === 1;
      }
      /**
       *  Returns true if the transaction is a London (i.e. ``type == 2``)
       *  transaction. See [[link-eip-1559]].
       *
       *  This provides a Type Guard that this transaction will have
       *  the ``null``-ness for hardfork-specific properties set correctly.
       */
      isLondon() {
        return this.type === 2;
      }
      /**
       *  Returns true if hte transaction is a Cancun (i.e. ``type == 3``)
       *  transaction. See [[link-eip-4844]].
       */
      isCancun() {
        return this.type === 3;
      }
      /**
       *  Returns a filter which can be used to listen for orphan events
       *  that evict this transaction.
       */
      removedEvent() {
        (0, index_js_1.assert)(this.isMined(), "unmined transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" });
        return createRemovedTransactionFilter(this);
      }
      /**
       *  Returns a filter which can be used to listen for orphan events
       *  that re-order this event against %%other%%.
       */
      reorderedEvent(other) {
        (0, index_js_1.assert)(this.isMined(), "unmined transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" });
        (0, index_js_1.assert)(!other || other.isMined(), "unmined 'other' transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" });
        return createReorderedTransactionFilter(this, other);
      }
      /**
       *  Returns a new TransactionResponse instance which has the ability to
       *  detect (and throw an error) if the transaction is replaced, which
       *  will begin scanning at %%startBlock%%.
       *
       *  This should generally not be used by developers and is intended
       *  primarily for internal use. Setting an incorrect %%startBlock%% can
       *  have devastating performance consequences if used incorrectly.
       */
      replaceableTransaction(startBlock) {
        (0, index_js_1.assertArgument)(Number.isInteger(startBlock) && startBlock >= 0, "invalid startBlock", "startBlock", startBlock);
        const tx = new _TransactionResponse(this, this.provider);
        __privateSet(tx, _startBlock, startBlock);
        return tx;
      }
    };
    _startBlock = new WeakMap();
    var TransactionResponse = _TransactionResponse;
    exports2.TransactionResponse = TransactionResponse;
    function createOrphanedBlockFilter(block) {
      return { orphan: "drop-block", hash: block.hash, number: block.number };
    }
    function createReorderedTransactionFilter(tx, other) {
      return { orphan: "reorder-transaction", tx, other };
    }
    function createRemovedTransactionFilter(tx) {
      return { orphan: "drop-transaction", tx };
    }
    function createRemovedLogFilter(log) {
      return { orphan: "drop-log", log: {
        transactionHash: log.transactionHash,
        blockHash: log.blockHash,
        blockNumber: log.blockNumber,
        address: log.address,
        data: log.data,
        topics: Object.freeze(log.topics.slice()),
        index: log.index
      } };
    }
  }
});

// node_modules/ethers/lib.commonjs/contract/wrappers.js
var require_wrappers = __commonJS({
  "node_modules/ethers/lib.commonjs/contract/wrappers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ContractEventPayload = exports2.ContractUnknownEventPayload = exports2.ContractTransactionResponse = exports2.ContractTransactionReceipt = exports2.UndecodedEventLog = exports2.EventLog = void 0;
    var provider_js_1 = require_provider();
    var index_js_1 = require_utils11();
    var EventLog = class extends provider_js_1.Log {
      /**
       * @_ignore:
       */
      constructor(log, iface, fragment) {
        super(log, log.provider);
        /**
         *  The Contract Interface.
         */
        __publicField(this, "interface");
        /**
         *  The matching event.
         */
        __publicField(this, "fragment");
        /**
         *  The parsed arguments passed to the event by ``emit``.
         */
        __publicField(this, "args");
        const args = iface.decodeEventLog(fragment, log.data, log.topics);
        (0, index_js_1.defineProperties)(this, { args, fragment, interface: iface });
      }
      /**
       *  The name of the event.
       */
      get eventName() {
        return this.fragment.name;
      }
      /**
       *  The signature of the event.
       */
      get eventSignature() {
        return this.fragment.format();
      }
    };
    exports2.EventLog = EventLog;
    var UndecodedEventLog = class extends provider_js_1.Log {
      /**
       * @_ignore:
       */
      constructor(log, error) {
        super(log, log.provider);
        /**
         *  The error encounted when trying to decode the log.
         */
        __publicField(this, "error");
        (0, index_js_1.defineProperties)(this, { error });
      }
    };
    exports2.UndecodedEventLog = UndecodedEventLog;
    var _iface;
    var ContractTransactionReceipt = class extends provider_js_1.TransactionReceipt {
      /**
       *  @_ignore:
       */
      constructor(iface, provider, tx) {
        super(tx, provider);
        __privateAdd(this, _iface);
        __privateSet(this, _iface, iface);
      }
      /**
       *  The parsed logs for any [[Log]] which has a matching event in the
       *  Contract ABI.
       */
      get logs() {
        return super.logs.map((log) => {
          const fragment = log.topics.length ? __privateGet(this, _iface).getEvent(log.topics[0]) : null;
          if (fragment) {
            try {
              return new EventLog(log, __privateGet(this, _iface), fragment);
            } catch (error) {
              return new UndecodedEventLog(log, error);
            }
          }
          return log;
        });
      }
    };
    _iface = new WeakMap();
    exports2.ContractTransactionReceipt = ContractTransactionReceipt;
    var _iface2;
    var ContractTransactionResponse = class extends provider_js_1.TransactionResponse {
      /**
       *  @_ignore:
       */
      constructor(iface, provider, tx) {
        super(tx, provider);
        __privateAdd(this, _iface2);
        __privateSet(this, _iface2, iface);
      }
      /**
       *  Resolves once this transaction has been mined and has
       *  %%confirms%% blocks including it (default: ``1``) with an
       *  optional %%timeout%%.
       *
       *  This can resolve to ``null`` only if %%confirms%% is ``0``
       *  and the transaction has not been mined, otherwise this will
       *  wait until enough confirmations have completed.
       */
      async wait(confirms, timeout) {
        const receipt = await super.wait(confirms, timeout);
        if (receipt == null) {
          return null;
        }
        return new ContractTransactionReceipt(__privateGet(this, _iface2), this.provider, receipt);
      }
    };
    _iface2 = new WeakMap();
    exports2.ContractTransactionResponse = ContractTransactionResponse;
    var ContractUnknownEventPayload = class extends index_js_1.EventPayload {
      /**
       *  @_event:
       */
      constructor(contract, listener, filter, log) {
        super(contract, listener, filter);
        /**
         *  The log with no matching events.
         */
        __publicField(this, "log");
        (0, index_js_1.defineProperties)(this, { log });
      }
      /**
       *  Resolves to the block the event occured in.
       */
      async getBlock() {
        return await this.log.getBlock();
      }
      /**
       *  Resolves to the transaction the event occured in.
       */
      async getTransaction() {
        return await this.log.getTransaction();
      }
      /**
       *  Resolves to the transaction receipt the event occured in.
       */
      async getTransactionReceipt() {
        return await this.log.getTransactionReceipt();
      }
    };
    exports2.ContractUnknownEventPayload = ContractUnknownEventPayload;
    var ContractEventPayload = class extends ContractUnknownEventPayload {
      /**
       *  @_ignore:
       */
      constructor(contract, listener, filter, fragment, _log) {
        super(contract, listener, filter, new EventLog(_log, contract.interface, fragment));
        const args = contract.interface.decodeEventLog(fragment, this.log.data, this.log.topics);
        (0, index_js_1.defineProperties)(this, { args, fragment });
      }
      /**
       *  The event name.
       */
      get eventName() {
        return this.fragment.name;
      }
      /**
       *  The event signature.
       */
      get eventSignature() {
        return this.fragment.format();
      }
    };
    exports2.ContractEventPayload = ContractEventPayload;
  }
});

// node_modules/ethers/lib.commonjs/contract/contract.js
var require_contract = __commonJS({
  "node_modules/ethers/lib.commonjs/contract/contract.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Contract = exports2.BaseContract = exports2.resolveArgs = exports2.copyOverrides = void 0;
    var index_js_1 = require_abi();
    var index_js_2 = require_address3();
    var provider_js_1 = require_provider();
    var index_js_3 = require_utils11();
    var wrappers_js_1 = require_wrappers();
    var BN_0 = BigInt(0);
    function canCall(value) {
      return value && typeof value.call === "function";
    }
    function canEstimate(value) {
      return value && typeof value.estimateGas === "function";
    }
    function canResolve(value) {
      return value && typeof value.resolveName === "function";
    }
    function canSend(value) {
      return value && typeof value.sendTransaction === "function";
    }
    function getResolver(value) {
      if (value != null) {
        if (canResolve(value)) {
          return value;
        }
        if (value.provider) {
          return value.provider;
        }
      }
      return void 0;
    }
    var _filter;
    var PreparedTopicFilter = class {
      constructor(contract, fragment, args) {
        __privateAdd(this, _filter);
        __publicField(this, "fragment");
        (0, index_js_3.defineProperties)(this, { fragment });
        if (fragment.inputs.length < args.length) {
          throw new Error("too many arguments");
        }
        const runner = getRunner(contract.runner, "resolveName");
        const resolver = canResolve(runner) ? runner : null;
        __privateSet(this, _filter, async function() {
          const resolvedArgs = await Promise.all(fragment.inputs.map((param, index) => {
            const arg = args[index];
            if (arg == null) {
              return null;
            }
            return param.walkAsync(args[index], (type2, value) => {
              if (type2 === "address") {
                if (Array.isArray(value)) {
                  return Promise.all(value.map((v) => (0, index_js_2.resolveAddress)(v, resolver)));
                }
                return (0, index_js_2.resolveAddress)(value, resolver);
              }
              return value;
            });
          }));
          return contract.interface.encodeFilterTopics(fragment, resolvedArgs);
        }());
      }
      getTopicFilter() {
        return __privateGet(this, _filter);
      }
    };
    _filter = new WeakMap();
    function getRunner(value, feature) {
      if (value == null) {
        return null;
      }
      if (typeof value[feature] === "function") {
        return value;
      }
      if (value.provider && typeof value.provider[feature] === "function") {
        return value.provider;
      }
      return null;
    }
    function getProvider(value) {
      if (value == null) {
        return null;
      }
      return value.provider || null;
    }
    async function copyOverrides(arg, allowed) {
      const _overrides = index_js_1.Typed.dereference(arg, "overrides");
      (0, index_js_3.assertArgument)(typeof _overrides === "object", "invalid overrides parameter", "overrides", arg);
      const overrides = (0, provider_js_1.copyRequest)(_overrides);
      (0, index_js_3.assertArgument)(overrides.to == null || (allowed || []).indexOf("to") >= 0, "cannot override to", "overrides.to", overrides.to);
      (0, index_js_3.assertArgument)(overrides.data == null || (allowed || []).indexOf("data") >= 0, "cannot override data", "overrides.data", overrides.data);
      if (overrides.from) {
        overrides.from = overrides.from;
      }
      return overrides;
    }
    exports2.copyOverrides = copyOverrides;
    async function resolveArgs(_runner, inputs, args) {
      const runner = getRunner(_runner, "resolveName");
      const resolver = canResolve(runner) ? runner : null;
      return await Promise.all(inputs.map((param, index) => {
        return param.walkAsync(args[index], (type2, value) => {
          value = index_js_1.Typed.dereference(value, type2);
          if (type2 === "address") {
            return (0, index_js_2.resolveAddress)(value, resolver);
          }
          return value;
        });
      }));
    }
    exports2.resolveArgs = resolveArgs;
    function buildWrappedFallback(contract) {
      const populateTransaction = async function(overrides) {
        const tx = await copyOverrides(overrides, ["data"]);
        tx.to = await contract.getAddress();
        if (tx.from) {
          tx.from = await (0, index_js_2.resolveAddress)(tx.from, getResolver(contract.runner));
        }
        const iface = contract.interface;
        const noValue = (0, index_js_3.getBigInt)(tx.value || BN_0, "overrides.value") === BN_0;
        const noData = (tx.data || "0x") === "0x";
        if (iface.fallback && !iface.fallback.payable && iface.receive && !noData && !noValue) {
          (0, index_js_3.assertArgument)(false, "cannot send data to receive or send value to non-payable fallback", "overrides", overrides);
        }
        (0, index_js_3.assertArgument)(iface.fallback || noData, "cannot send data to receive-only contract", "overrides.data", tx.data);
        const payable = iface.receive || iface.fallback && iface.fallback.payable;
        (0, index_js_3.assertArgument)(payable || noValue, "cannot send value to non-payable fallback", "overrides.value", tx.value);
        (0, index_js_3.assertArgument)(iface.fallback || noData, "cannot send data to receive-only contract", "overrides.data", tx.data);
        return tx;
      };
      const staticCall = async function(overrides) {
        const runner = getRunner(contract.runner, "call");
        (0, index_js_3.assert)(canCall(runner), "contract runner does not support calling", "UNSUPPORTED_OPERATION", { operation: "call" });
        const tx = await populateTransaction(overrides);
        try {
          return await runner.call(tx);
        } catch (error) {
          if ((0, index_js_3.isCallException)(error) && error.data) {
            throw contract.interface.makeError(error.data, tx);
          }
          throw error;
        }
      };
      const send = async function(overrides) {
        const runner = contract.runner;
        (0, index_js_3.assert)(canSend(runner), "contract runner does not support sending transactions", "UNSUPPORTED_OPERATION", { operation: "sendTransaction" });
        const tx = await runner.sendTransaction(await populateTransaction(overrides));
        const provider = getProvider(contract.runner);
        return new wrappers_js_1.ContractTransactionResponse(contract.interface, provider, tx);
      };
      const estimateGas = async function(overrides) {
        const runner = getRunner(contract.runner, "estimateGas");
        (0, index_js_3.assert)(canEstimate(runner), "contract runner does not support gas estimation", "UNSUPPORTED_OPERATION", { operation: "estimateGas" });
        return await runner.estimateGas(await populateTransaction(overrides));
      };
      const method2 = async (overrides) => {
        return await send(overrides);
      };
      (0, index_js_3.defineProperties)(method2, {
        _contract: contract,
        estimateGas,
        populateTransaction,
        send,
        staticCall
      });
      return method2;
    }
    function buildWrappedMethod(contract, key) {
      const getFragment = function(...args) {
        const fragment = contract.interface.getFunction(key, args);
        (0, index_js_3.assert)(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
          operation: "fragment",
          info: { key, args }
        });
        return fragment;
      };
      const populateTransaction = async function(...args) {
        const fragment = getFragment(...args);
        let overrides = {};
        if (fragment.inputs.length + 1 === args.length) {
          overrides = await copyOverrides(args.pop());
          if (overrides.from) {
            overrides.from = await (0, index_js_2.resolveAddress)(overrides.from, getResolver(contract.runner));
          }
        }
        if (fragment.inputs.length !== args.length) {
          throw new Error("internal error: fragment inputs doesn't match arguments; should not happen");
        }
        const resolvedArgs = await resolveArgs(contract.runner, fragment.inputs, args);
        return Object.assign({}, overrides, await (0, index_js_3.resolveProperties)({
          to: contract.getAddress(),
          data: contract.interface.encodeFunctionData(fragment, resolvedArgs)
        }));
      };
      const staticCall = async function(...args) {
        const result = await staticCallResult(...args);
        if (result.length === 1) {
          return result[0];
        }
        return result;
      };
      const send = async function(...args) {
        const runner = contract.runner;
        (0, index_js_3.assert)(canSend(runner), "contract runner does not support sending transactions", "UNSUPPORTED_OPERATION", { operation: "sendTransaction" });
        const tx = await runner.sendTransaction(await populateTransaction(...args));
        const provider = getProvider(contract.runner);
        return new wrappers_js_1.ContractTransactionResponse(contract.interface, provider, tx);
      };
      const estimateGas = async function(...args) {
        const runner = getRunner(contract.runner, "estimateGas");
        (0, index_js_3.assert)(canEstimate(runner), "contract runner does not support gas estimation", "UNSUPPORTED_OPERATION", { operation: "estimateGas" });
        return await runner.estimateGas(await populateTransaction(...args));
      };
      const staticCallResult = async function(...args) {
        const runner = getRunner(contract.runner, "call");
        (0, index_js_3.assert)(canCall(runner), "contract runner does not support calling", "UNSUPPORTED_OPERATION", { operation: "call" });
        const tx = await populateTransaction(...args);
        let result = "0x";
        try {
          result = await runner.call(tx);
        } catch (error) {
          if ((0, index_js_3.isCallException)(error) && error.data) {
            throw contract.interface.makeError(error.data, tx);
          }
          throw error;
        }
        const fragment = getFragment(...args);
        return contract.interface.decodeFunctionResult(fragment, result);
      };
      const method2 = async (...args) => {
        const fragment = getFragment(...args);
        if (fragment.constant) {
          return await staticCall(...args);
        }
        return await send(...args);
      };
      (0, index_js_3.defineProperties)(method2, {
        name: contract.interface.getFunctionName(key),
        _contract: contract,
        _key: key,
        getFragment,
        estimateGas,
        populateTransaction,
        send,
        staticCall,
        staticCallResult
      });
      Object.defineProperty(method2, "fragment", {
        configurable: false,
        enumerable: true,
        get: () => {
          const fragment = contract.interface.getFunction(key);
          (0, index_js_3.assert)(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
            operation: "fragment",
            info: { key }
          });
          return fragment;
        }
      });
      return method2;
    }
    function buildWrappedEvent(contract, key) {
      const getFragment = function(...args) {
        const fragment = contract.interface.getEvent(key, args);
        (0, index_js_3.assert)(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
          operation: "fragment",
          info: { key, args }
        });
        return fragment;
      };
      const method2 = function(...args) {
        return new PreparedTopicFilter(contract, getFragment(...args), args);
      };
      (0, index_js_3.defineProperties)(method2, {
        name: contract.interface.getEventName(key),
        _contract: contract,
        _key: key,
        getFragment
      });
      Object.defineProperty(method2, "fragment", {
        configurable: false,
        enumerable: true,
        get: () => {
          const fragment = contract.interface.getEvent(key);
          (0, index_js_3.assert)(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
            operation: "fragment",
            info: { key }
          });
          return fragment;
        }
      });
      return method2;
    }
    var internal = Symbol.for("_ethersInternal_contract");
    var internalValues = /* @__PURE__ */ new WeakMap();
    function setInternal(contract, values) {
      internalValues.set(contract[internal], values);
    }
    function getInternal(contract) {
      return internalValues.get(contract[internal]);
    }
    function isDeferred(value) {
      return value && typeof value === "object" && "getTopicFilter" in value && typeof value.getTopicFilter === "function" && value.fragment;
    }
    async function getSubInfo(contract, event) {
      let topics;
      let fragment = null;
      if (Array.isArray(event)) {
        const topicHashify = function(name) {
          if ((0, index_js_3.isHexString)(name, 32)) {
            return name;
          }
          const fragment2 = contract.interface.getEvent(name);
          (0, index_js_3.assertArgument)(fragment2, "unknown fragment", "name", name);
          return fragment2.topicHash;
        };
        topics = event.map((e) => {
          if (e == null) {
            return null;
          }
          if (Array.isArray(e)) {
            return e.map(topicHashify);
          }
          return topicHashify(e);
        });
      } else if (event === "*") {
        topics = [null];
      } else if (typeof event === "string") {
        if ((0, index_js_3.isHexString)(event, 32)) {
          topics = [event];
        } else {
          fragment = contract.interface.getEvent(event);
          (0, index_js_3.assertArgument)(fragment, "unknown fragment", "event", event);
          topics = [fragment.topicHash];
        }
      } else if (isDeferred(event)) {
        topics = await event.getTopicFilter();
      } else if ("fragment" in event) {
        fragment = event.fragment;
        topics = [fragment.topicHash];
      } else {
        (0, index_js_3.assertArgument)(false, "unknown event name", "event", event);
      }
      topics = topics.map((t) => {
        if (t == null) {
          return null;
        }
        if (Array.isArray(t)) {
          const items = Array.from(new Set(t.map((t2) => t2.toLowerCase())).values());
          if (items.length === 1) {
            return items[0];
          }
          items.sort();
          return items;
        }
        return t.toLowerCase();
      });
      const tag = topics.map((t) => {
        if (t == null) {
          return "null";
        }
        if (Array.isArray(t)) {
          return t.join("|");
        }
        return t;
      }).join("&");
      return { fragment, tag, topics };
    }
    async function hasSub(contract, event) {
      const { subs } = getInternal(contract);
      return subs.get((await getSubInfo(contract, event)).tag) || null;
    }
    async function getSub(contract, operation, event) {
      const provider = getProvider(contract.runner);
      (0, index_js_3.assert)(provider, "contract runner does not support subscribing", "UNSUPPORTED_OPERATION", { operation });
      const { fragment, tag, topics } = await getSubInfo(contract, event);
      const { addr, subs } = getInternal(contract);
      let sub = subs.get(tag);
      if (!sub) {
        const address = addr ? addr : contract;
        const filter = { address, topics };
        const listener = (log) => {
          let foundFragment = fragment;
          if (foundFragment == null) {
            try {
              foundFragment = contract.interface.getEvent(log.topics[0]);
            } catch (error) {
            }
          }
          if (foundFragment) {
            const _foundFragment = foundFragment;
            const args = fragment ? contract.interface.decodeEventLog(fragment, log.data, log.topics) : [];
            emit(contract, event, args, (listener2) => {
              return new wrappers_js_1.ContractEventPayload(contract, listener2, event, _foundFragment, log);
            });
          } else {
            emit(contract, event, [], (listener2) => {
              return new wrappers_js_1.ContractUnknownEventPayload(contract, listener2, event, log);
            });
          }
        };
        let starting = [];
        const start = () => {
          if (starting.length) {
            return;
          }
          starting.push(provider.on(filter, listener));
        };
        const stop = async () => {
          if (starting.length == 0) {
            return;
          }
          let started = starting;
          starting = [];
          await Promise.all(started);
          provider.off(filter, listener);
        };
        sub = { tag, listeners: [], start, stop };
        subs.set(tag, sub);
      }
      return sub;
    }
    var lastEmit = Promise.resolve();
    async function _emit(contract, event, args, payloadFunc) {
      await lastEmit;
      const sub = await hasSub(contract, event);
      if (!sub) {
        return false;
      }
      const count = sub.listeners.length;
      sub.listeners = sub.listeners.filter(({ listener, once }) => {
        const passArgs = Array.from(args);
        if (payloadFunc) {
          passArgs.push(payloadFunc(once ? null : listener));
        }
        try {
          listener.call(contract, ...passArgs);
        } catch (error) {
        }
        return !once;
      });
      if (sub.listeners.length === 0) {
        sub.stop();
        getInternal(contract).subs.delete(sub.tag);
      }
      return count > 0;
    }
    async function emit(contract, event, args, payloadFunc) {
      try {
        await lastEmit;
      } catch (error) {
      }
      const resultPromise = _emit(contract, event, args, payloadFunc);
      lastEmit = resultPromise;
      return await resultPromise;
    }
    var passProperties = ["then"];
    var _a;
    _a = internal;
    var _BaseContract = class _BaseContract {
      /**
       *  Creates a new contract connected to %%target%% with the %%abi%% and
       *  optionally connected to a %%runner%% to perform operations on behalf
       *  of.
       */
      constructor(target, abi, runner, _deployTx) {
        /**
         *  The target to connect to.
         *
         *  This can be an address, ENS name or any [[Addressable]], such as
         *  another contract. To get the resovled address, use the ``getAddress``
         *  method.
         */
        __publicField(this, "target");
        /**
         *  The contract Interface.
         */
        __publicField(this, "interface");
        /**
         *  The connected runner. This is generally a [[Provider]] or a
         *  [[Signer]], which dictates what operations are supported.
         *
         *  For example, a **Contract** connected to a [[Provider]] may
         *  only execute read-only operations.
         */
        __publicField(this, "runner");
        /**
         *  All the Events available on this contract.
         */
        __publicField(this, "filters");
        /**
         *  @_ignore:
         */
        __publicField(this, _a);
        /**
         *  The fallback or receive function if any.
         */
        __publicField(this, "fallback");
        (0, index_js_3.assertArgument)(typeof target === "string" || (0, index_js_2.isAddressable)(target), "invalid value for Contract target", "target", target);
        if (runner == null) {
          runner = null;
        }
        const iface = index_js_1.Interface.from(abi);
        (0, index_js_3.defineProperties)(this, { target, runner, interface: iface });
        Object.defineProperty(this, internal, { value: {} });
        let addrPromise;
        let addr = null;
        let deployTx = null;
        if (_deployTx) {
          const provider = getProvider(runner);
          deployTx = new wrappers_js_1.ContractTransactionResponse(this.interface, provider, _deployTx);
        }
        let subs = /* @__PURE__ */ new Map();
        if (typeof target === "string") {
          if ((0, index_js_3.isHexString)(target)) {
            addr = target;
            addrPromise = Promise.resolve(target);
          } else {
            const resolver = getRunner(runner, "resolveName");
            if (!canResolve(resolver)) {
              throw (0, index_js_3.makeError)("contract runner does not support name resolution", "UNSUPPORTED_OPERATION", {
                operation: "resolveName"
              });
            }
            addrPromise = resolver.resolveName(target).then((addr2) => {
              if (addr2 == null) {
                throw (0, index_js_3.makeError)("an ENS name used for a contract target must be correctly configured", "UNCONFIGURED_NAME", {
                  value: target
                });
              }
              getInternal(this).addr = addr2;
              return addr2;
            });
          }
        } else {
          addrPromise = target.getAddress().then((addr2) => {
            if (addr2 == null) {
              throw new Error("TODO");
            }
            getInternal(this).addr = addr2;
            return addr2;
          });
        }
        setInternal(this, { addrPromise, addr, deployTx, subs });
        const filters = new Proxy({}, {
          get: (target2, prop, receiver) => {
            if (typeof prop === "symbol" || passProperties.indexOf(prop) >= 0) {
              return Reflect.get(target2, prop, receiver);
            }
            try {
              return this.getEvent(prop);
            } catch (error) {
              if (!(0, index_js_3.isError)(error, "INVALID_ARGUMENT") || error.argument !== "key") {
                throw error;
              }
            }
            return void 0;
          },
          has: (target2, prop) => {
            if (passProperties.indexOf(prop) >= 0) {
              return Reflect.has(target2, prop);
            }
            return Reflect.has(target2, prop) || this.interface.hasEvent(String(prop));
          }
        });
        (0, index_js_3.defineProperties)(this, { filters });
        (0, index_js_3.defineProperties)(this, {
          fallback: iface.receive || iface.fallback ? buildWrappedFallback(this) : null
        });
        return new Proxy(this, {
          get: (target2, prop, receiver) => {
            if (typeof prop === "symbol" || prop in target2 || passProperties.indexOf(prop) >= 0) {
              return Reflect.get(target2, prop, receiver);
            }
            try {
              return target2.getFunction(prop);
            } catch (error) {
              if (!(0, index_js_3.isError)(error, "INVALID_ARGUMENT") || error.argument !== "key") {
                throw error;
              }
            }
            return void 0;
          },
          has: (target2, prop) => {
            if (typeof prop === "symbol" || prop in target2 || passProperties.indexOf(prop) >= 0) {
              return Reflect.has(target2, prop);
            }
            return target2.interface.hasFunction(prop);
          }
        });
      }
      /**
       *  Return a new Contract instance with the same target and ABI, but
       *  a different %%runner%%.
       */
      connect(runner) {
        return new _BaseContract(this.target, this.interface, runner);
      }
      /**
       *  Return a new Contract instance with the same ABI and runner, but
       *  a different %%target%%.
       */
      attach(target) {
        return new _BaseContract(target, this.interface, this.runner);
      }
      /**
       *  Return the resolved address of this Contract.
       */
      async getAddress() {
        return await getInternal(this).addrPromise;
      }
      /**
       *  Return the deployed bytecode or null if no bytecode is found.
       */
      async getDeployedCode() {
        const provider = getProvider(this.runner);
        (0, index_js_3.assert)(provider, "runner does not support .provider", "UNSUPPORTED_OPERATION", { operation: "getDeployedCode" });
        const code = await provider.getCode(await this.getAddress());
        if (code === "0x") {
          return null;
        }
        return code;
      }
      /**
       *  Resolve to this Contract once the bytecode has been deployed, or
       *  resolve immediately if already deployed.
       */
      async waitForDeployment() {
        const deployTx = this.deploymentTransaction();
        if (deployTx) {
          await deployTx.wait();
          return this;
        }
        const code = await this.getDeployedCode();
        if (code != null) {
          return this;
        }
        const provider = getProvider(this.runner);
        (0, index_js_3.assert)(provider != null, "contract runner does not support .provider", "UNSUPPORTED_OPERATION", { operation: "waitForDeployment" });
        return new Promise((resolve, reject) => {
          const checkCode = async () => {
            try {
              const code2 = await this.getDeployedCode();
              if (code2 != null) {
                return resolve(this);
              }
              provider.once("block", checkCode);
            } catch (error) {
              reject(error);
            }
          };
          checkCode();
        });
      }
      /**
       *  Return the transaction used to deploy this contract.
       *
       *  This is only available if this instance was returned from a
       *  [[ContractFactory]].
       */
      deploymentTransaction() {
        return getInternal(this).deployTx;
      }
      /**
       *  Return the function for a given name. This is useful when a contract
       *  method name conflicts with a JavaScript name such as ``prototype`` or
       *  when using a Contract programatically.
       */
      getFunction(key) {
        if (typeof key !== "string") {
          key = key.format();
        }
        const func = buildWrappedMethod(this, key);
        return func;
      }
      /**
       *  Return the event for a given name. This is useful when a contract
       *  event name conflicts with a JavaScript name such as ``prototype`` or
       *  when using a Contract programatically.
       */
      getEvent(key) {
        if (typeof key !== "string") {
          key = key.format();
        }
        return buildWrappedEvent(this, key);
      }
      /**
       *  @_ignore:
       */
      async queryTransaction(hash) {
        throw new Error("@TODO");
      }
      /*
          // @TODO: this is a non-backwards compatible change, but will be added
          //        in v7 and in a potential SmartContract class in an upcoming
          //        v6 release
          async getTransactionReceipt(hash: string): Promise<null | ContractTransactionReceipt> {
              const provider = getProvider(this.runner);
              assert(provider, "contract runner does not have a provider",
                  "UNSUPPORTED_OPERATION", { operation: "queryTransaction" });
      
              const receipt = await provider.getTransactionReceipt(hash);
              if (receipt == null) { return null; }
      
              return new ContractTransactionReceipt(this.interface, provider, receipt);
          }
          */
      /**
       *  Provide historic access to event data for %%event%% in the range
       *  %%fromBlock%% (default: ``0``) to %%toBlock%% (default: ``"latest"``)
       *  inclusive.
       */
      async queryFilter(event, fromBlock, toBlock) {
        if (fromBlock == null) {
          fromBlock = 0;
        }
        if (toBlock == null) {
          toBlock = "latest";
        }
        const { addr, addrPromise } = getInternal(this);
        const address = addr ? addr : await addrPromise;
        const { fragment, topics } = await getSubInfo(this, event);
        const filter = { address, topics, fromBlock, toBlock };
        const provider = getProvider(this.runner);
        (0, index_js_3.assert)(provider, "contract runner does not have a provider", "UNSUPPORTED_OPERATION", { operation: "queryFilter" });
        return (await provider.getLogs(filter)).map((log) => {
          let foundFragment = fragment;
          if (foundFragment == null) {
            try {
              foundFragment = this.interface.getEvent(log.topics[0]);
            } catch (error) {
            }
          }
          if (foundFragment) {
            try {
              return new wrappers_js_1.EventLog(log, this.interface, foundFragment);
            } catch (error) {
              return new wrappers_js_1.UndecodedEventLog(log, error);
            }
          }
          return new provider_js_1.Log(log, provider);
        });
      }
      /**
       *  Add an event %%listener%% for the %%event%%.
       */
      async on(event, listener) {
        const sub = await getSub(this, "on", event);
        sub.listeners.push({ listener, once: false });
        sub.start();
        return this;
      }
      /**
       *  Add an event %%listener%% for the %%event%%, but remove the listener
       *  after it is fired once.
       */
      async once(event, listener) {
        const sub = await getSub(this, "once", event);
        sub.listeners.push({ listener, once: true });
        sub.start();
        return this;
      }
      /**
       *  Emit an %%event%% calling all listeners with %%args%%.
       *
       *  Resolves to ``true`` if any listeners were called.
       */
      async emit(event, ...args) {
        return await emit(this, event, args, null);
      }
      /**
       *  Resolves to the number of listeners of %%event%% or the total number
       *  of listeners if unspecified.
       */
      async listenerCount(event) {
        if (event) {
          const sub = await hasSub(this, event);
          if (!sub) {
            return 0;
          }
          return sub.listeners.length;
        }
        const { subs } = getInternal(this);
        let total = 0;
        for (const { listeners } of subs.values()) {
          total += listeners.length;
        }
        return total;
      }
      /**
       *  Resolves to the listeners subscribed to %%event%% or all listeners
       *  if unspecified.
       */
      async listeners(event) {
        if (event) {
          const sub = await hasSub(this, event);
          if (!sub) {
            return [];
          }
          return sub.listeners.map(({ listener }) => listener);
        }
        const { subs } = getInternal(this);
        let result = [];
        for (const { listeners } of subs.values()) {
          result = result.concat(listeners.map(({ listener }) => listener));
        }
        return result;
      }
      /**
       *  Remove the %%listener%% from the listeners for %%event%% or remove
       *  all listeners if unspecified.
       */
      async off(event, listener) {
        const sub = await hasSub(this, event);
        if (!sub) {
          return this;
        }
        if (listener) {
          const index = sub.listeners.map(({ listener: listener2 }) => listener2).indexOf(listener);
          if (index >= 0) {
            sub.listeners.splice(index, 1);
          }
        }
        if (listener == null || sub.listeners.length === 0) {
          sub.stop();
          getInternal(this).subs.delete(sub.tag);
        }
        return this;
      }
      /**
       *  Remove all the listeners for %%event%% or remove all listeners if
       *  unspecified.
       */
      async removeAllListeners(event) {
        if (event) {
          const sub = await hasSub(this, event);
          if (!sub) {
            return this;
          }
          sub.stop();
          getInternal(this).subs.delete(sub.tag);
        } else {
          const { subs } = getInternal(this);
          for (const { tag, stop } of subs.values()) {
            stop();
            subs.delete(tag);
          }
        }
        return this;
      }
      /**
       *  Alias for [on].
       */
      async addListener(event, listener) {
        return await this.on(event, listener);
      }
      /**
       *  Alias for [off].
       */
      async removeListener(event, listener) {
        return await this.off(event, listener);
      }
      /**
       *  Create a new Class for the %%abi%%.
       */
      static buildClass(abi) {
        class CustomContract extends _BaseContract {
          constructor(address, runner = null) {
            super(address, abi, runner);
          }
        }
        return CustomContract;
      }
      /**
       *  Create a new BaseContract with a specified Interface.
       */
      static from(target, abi, runner) {
        if (runner == null) {
          runner = null;
        }
        const contract = new this(target, abi, runner);
        return contract;
      }
    };
    var BaseContract = _BaseContract;
    exports2.BaseContract = BaseContract;
    function _ContractBase() {
      return BaseContract;
    }
    var Contract = class extends _ContractBase() {
    };
    exports2.Contract = Contract;
  }
});

// node_modules/ethers/lib.commonjs/contract/factory.js
var require_factory = __commonJS({
  "node_modules/ethers/lib.commonjs/contract/factory.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ContractFactory = void 0;
    var index_js_1 = require_abi();
    var index_js_2 = require_address3();
    var index_js_3 = require_utils11();
    var contract_js_1 = require_contract();
    var ContractFactory = class _ContractFactory {
      /**
       *  Create a new **ContractFactory** with %%abi%% and %%bytecode%%,
       *  optionally connected to %%runner%%.
       *
       *  The %%bytecode%% may be the ``bytecode`` property within the
       *  standard Solidity JSON output.
       */
      constructor(abi, bytecode, runner) {
        /**
         *  The Contract Interface.
         */
        __publicField(this, "interface");
        /**
         *  The Contract deployment bytecode. Often called the initcode.
         */
        __publicField(this, "bytecode");
        /**
         *  The ContractRunner to deploy the Contract as.
         */
        __publicField(this, "runner");
        const iface = index_js_1.Interface.from(abi);
        if (bytecode instanceof Uint8Array) {
          bytecode = (0, index_js_3.hexlify)((0, index_js_3.getBytes)(bytecode));
        } else {
          if (typeof bytecode === "object") {
            bytecode = bytecode.object;
          }
          if (!bytecode.startsWith("0x")) {
            bytecode = "0x" + bytecode;
          }
          bytecode = (0, index_js_3.hexlify)((0, index_js_3.getBytes)(bytecode));
        }
        (0, index_js_3.defineProperties)(this, {
          bytecode,
          interface: iface,
          runner: runner || null
        });
      }
      attach(target) {
        return new contract_js_1.BaseContract(target, this.interface, this.runner);
      }
      /**
       *  Resolves to the transaction to deploy the contract, passing %%args%%
       *  into the constructor.
       */
      async getDeployTransaction(...args) {
        let overrides = {};
        const fragment = this.interface.deploy;
        if (fragment.inputs.length + 1 === args.length) {
          overrides = await (0, contract_js_1.copyOverrides)(args.pop());
        }
        if (fragment.inputs.length !== args.length) {
          throw new Error("incorrect number of arguments to constructor");
        }
        const resolvedArgs = await (0, contract_js_1.resolveArgs)(this.runner, fragment.inputs, args);
        const data = (0, index_js_3.concat)([this.bytecode, this.interface.encodeDeploy(resolvedArgs)]);
        return Object.assign({}, overrides, { data });
      }
      /**
       *  Resolves to the Contract deployed by passing %%args%% into the
       *  constructor.
       *
       *  This will resolve to the Contract before it has been deployed to the
       *  network, so the [[BaseContract-waitForDeployment]] should be used before
       *  sending any transactions to it.
       */
      async deploy(...args) {
        const tx = await this.getDeployTransaction(...args);
        (0, index_js_3.assert)(this.runner && typeof this.runner.sendTransaction === "function", "factory runner does not support sending transactions", "UNSUPPORTED_OPERATION", {
          operation: "sendTransaction"
        });
        const sentTx = await this.runner.sendTransaction(tx);
        const address = (0, index_js_2.getCreateAddress)(sentTx);
        return new contract_js_1.BaseContract(address, this.interface, this.runner, sentTx);
      }
      /**
       *  Return a new **ContractFactory** with the same ABI and bytecode,
       *  but connected to %%runner%%.
       */
      connect(runner) {
        return new _ContractFactory(this.interface, this.bytecode, runner);
      }
      /**
       *  Create a new **ContractFactory** from the standard Solidity JSON output.
       */
      static fromSolidity(output, runner) {
        (0, index_js_3.assertArgument)(output != null, "bad compiler output", "output", output);
        if (typeof output === "string") {
          output = JSON.parse(output);
        }
        const abi = output.abi;
        let bytecode = "";
        if (output.bytecode) {
          bytecode = output.bytecode;
        } else if (output.evm && output.evm.bytecode) {
          bytecode = output.evm.bytecode;
        }
        return new this(abi, bytecode, runner);
      }
    };
    exports2.ContractFactory = ContractFactory;
  }
});

// node_modules/ethers/lib.commonjs/contract/index.js
var require_contract2 = __commonJS({
  "node_modules/ethers/lib.commonjs/contract/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UndecodedEventLog = exports2.EventLog = exports2.ContractTransactionResponse = exports2.ContractTransactionReceipt = exports2.ContractUnknownEventPayload = exports2.ContractEventPayload = exports2.ContractFactory = exports2.Contract = exports2.BaseContract = void 0;
    var contract_js_1 = require_contract();
    Object.defineProperty(exports2, "BaseContract", { enumerable: true, get: function() {
      return contract_js_1.BaseContract;
    } });
    Object.defineProperty(exports2, "Contract", { enumerable: true, get: function() {
      return contract_js_1.Contract;
    } });
    var factory_js_1 = require_factory();
    Object.defineProperty(exports2, "ContractFactory", { enumerable: true, get: function() {
      return factory_js_1.ContractFactory;
    } });
    var wrappers_js_1 = require_wrappers();
    Object.defineProperty(exports2, "ContractEventPayload", { enumerable: true, get: function() {
      return wrappers_js_1.ContractEventPayload;
    } });
    Object.defineProperty(exports2, "ContractUnknownEventPayload", { enumerable: true, get: function() {
      return wrappers_js_1.ContractUnknownEventPayload;
    } });
    Object.defineProperty(exports2, "ContractTransactionReceipt", { enumerable: true, get: function() {
      return wrappers_js_1.ContractTransactionReceipt;
    } });
    Object.defineProperty(exports2, "ContractTransactionResponse", { enumerable: true, get: function() {
      return wrappers_js_1.ContractTransactionResponse;
    } });
    Object.defineProperty(exports2, "EventLog", { enumerable: true, get: function() {
      return wrappers_js_1.EventLog;
    } });
    Object.defineProperty(exports2, "UndecodedEventLog", { enumerable: true, get: function() {
      return wrappers_js_1.UndecodedEventLog;
    } });
  }
});

// node_modules/ethers/lib.commonjs/providers/ens-resolver.js
var require_ens_resolver = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/ens-resolver.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EnsResolver = exports2.BasicMulticoinProviderPlugin = exports2.MulticoinProviderPlugin = void 0;
    var index_js_1 = require_address3();
    var index_js_2 = require_constants2();
    var index_js_3 = require_contract2();
    var index_js_4 = require_hash2();
    var index_js_5 = require_utils11();
    function getIpfsLink(link) {
      if (link.match(/^ipfs:\/\/ipfs\//i)) {
        link = link.substring(12);
      } else if (link.match(/^ipfs:\/\//i)) {
        link = link.substring(7);
      } else {
        (0, index_js_5.assertArgument)(false, "unsupported IPFS format", "link", link);
      }
      return `https://gateway.ipfs.io/ipfs/${link}`;
    }
    var MulticoinProviderPlugin = class {
      /**
       *  Creates a new **MulticoinProviderPluing** for %%name%%.
       */
      constructor(name) {
        /**
         *  The name.
         */
        __publicField(this, "name");
        (0, index_js_5.defineProperties)(this, { name });
      }
      connect(proivder) {
        return this;
      }
      /**
       *  Returns ``true`` if %%coinType%% is supported by this plugin.
       */
      supportsCoinType(coinType) {
        return false;
      }
      /**
       *  Resolves to the encoded %%address%% for %%coinType%%.
       */
      async encodeAddress(coinType, address) {
        throw new Error("unsupported coin");
      }
      /**
       *  Resolves to the decoded %%data%% for %%coinType%%.
       */
      async decodeAddress(coinType, data) {
        throw new Error("unsupported coin");
      }
    };
    exports2.MulticoinProviderPlugin = MulticoinProviderPlugin;
    var BasicMulticoinPluginId = "org.ethers.plugins.provider.BasicMulticoin";
    var BasicMulticoinProviderPlugin = class extends MulticoinProviderPlugin {
      /**
       *  Creates a new **BasicMulticoinProviderPlugin**.
       */
      constructor() {
        super(BasicMulticoinPluginId);
      }
    };
    exports2.BasicMulticoinProviderPlugin = BasicMulticoinProviderPlugin;
    var matcherIpfs = new RegExp("^(ipfs)://(.*)$", "i");
    var matchers = [
      new RegExp("^(https)://(.*)$", "i"),
      new RegExp("^(data):(.*)$", "i"),
      matcherIpfs,
      new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i")
    ];
    var _supports2544, _resolver, _EnsResolver_instances, fetch_fn, _EnsResolver_static, getResolver_fn;
    var _EnsResolver = class _EnsResolver {
      constructor(provider, address, name) {
        __privateAdd(this, _EnsResolver_instances);
        /**
         *  The connected provider.
         */
        __publicField(this, "provider");
        /**
         *  The address of the resolver.
         */
        __publicField(this, "address");
        /**
         *  The name this resolver was resolved against.
         */
        __publicField(this, "name");
        // For EIP-2544 names, the ancestor that provided the resolver
        __privateAdd(this, _supports2544);
        __privateAdd(this, _resolver);
        (0, index_js_5.defineProperties)(this, { provider, address, name });
        __privateSet(this, _supports2544, null);
        __privateSet(this, _resolver, new index_js_3.Contract(address, [
          "function supportsInterface(bytes4) view returns (bool)",
          "function resolve(bytes, bytes) view returns (bytes)",
          "function addr(bytes32) view returns (address)",
          "function addr(bytes32, uint) view returns (bytes)",
          "function text(bytes32, string) view returns (string)",
          "function contenthash(bytes32) view returns (bytes)"
        ], provider));
      }
      /**
       *  Resolves to true if the resolver supports wildcard resolution.
       */
      async supportsWildcard() {
        if (__privateGet(this, _supports2544) == null) {
          __privateSet(this, _supports2544, (async () => {
            try {
              return await __privateGet(this, _resolver).supportsInterface("0x9061b923");
            } catch (error) {
              if ((0, index_js_5.isError)(error, "CALL_EXCEPTION")) {
                return false;
              }
              __privateSet(this, _supports2544, null);
              throw error;
            }
          })());
        }
        return await __privateGet(this, _supports2544);
      }
      /**
       *  Resolves to the address for %%coinType%% or null if the
       *  provided %%coinType%% has not been configured.
       */
      async getAddress(coinType) {
        if (coinType == null) {
          coinType = 60;
        }
        if (coinType === 60) {
          try {
            const result = await __privateMethod(this, _EnsResolver_instances, fetch_fn).call(this, "addr(bytes32)");
            if (result == null || result === index_js_2.ZeroAddress) {
              return null;
            }
            return result;
          } catch (error) {
            if ((0, index_js_5.isError)(error, "CALL_EXCEPTION")) {
              return null;
            }
            throw error;
          }
        }
        if (coinType >= 0 && coinType < 2147483648) {
          let ethCoinType = coinType + 2147483648;
          const data2 = await __privateMethod(this, _EnsResolver_instances, fetch_fn).call(this, "addr(bytes32,uint)", [ethCoinType]);
          if ((0, index_js_5.isHexString)(data2, 20)) {
            return (0, index_js_1.getAddress)(data2);
          }
        }
        let coinPlugin = null;
        for (const plugin of this.provider.plugins) {
          if (!(plugin instanceof MulticoinProviderPlugin)) {
            continue;
          }
          if (plugin.supportsCoinType(coinType)) {
            coinPlugin = plugin;
            break;
          }
        }
        if (coinPlugin == null) {
          return null;
        }
        const data = await __privateMethod(this, _EnsResolver_instances, fetch_fn).call(this, "addr(bytes32,uint)", [coinType]);
        if (data == null || data === "0x") {
          return null;
        }
        const address = await coinPlugin.decodeAddress(coinType, data);
        if (address != null) {
          return address;
        }
        (0, index_js_5.assert)(false, `invalid coin data`, "UNSUPPORTED_OPERATION", {
          operation: `getAddress(${coinType})`,
          info: { coinType, data }
        });
      }
      /**
       *  Resolves to the EIP-634 text record for %%key%%, or ``null``
       *  if unconfigured.
       */
      async getText(key) {
        const data = await __privateMethod(this, _EnsResolver_instances, fetch_fn).call(this, "text(bytes32,string)", [key]);
        if (data == null || data === "0x") {
          return null;
        }
        return data;
      }
      /**
       *  Rsolves to the content-hash or ``null`` if unconfigured.
       */
      async getContentHash() {
        const data = await __privateMethod(this, _EnsResolver_instances, fetch_fn).call(this, "contenthash(bytes32)");
        if (data == null || data === "0x") {
          return null;
        }
        const ipfs = data.match(/^0x(e3010170|e5010172)(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
        if (ipfs) {
          const scheme = ipfs[1] === "e3010170" ? "ipfs" : "ipns";
          const length = parseInt(ipfs[4], 16);
          if (ipfs[5].length === length * 2) {
            return `${scheme}://${(0, index_js_5.encodeBase58)("0x" + ipfs[2])}`;
          }
        }
        const swarm = data.match(/^0xe40101fa011b20([0-9a-f]*)$/);
        if (swarm && swarm[1].length === 64) {
          return `bzz://${swarm[1]}`;
        }
        (0, index_js_5.assert)(false, `invalid or unsupported content hash data`, "UNSUPPORTED_OPERATION", {
          operation: "getContentHash()",
          info: { data }
        });
      }
      /**
       *  Resolves to the avatar url or ``null`` if the avatar is either
       *  unconfigured or incorrectly configured (e.g. references an NFT
       *  not owned by the address).
       *
       *  If diagnosing issues with configurations, the [[_getAvatar]]
       *  method may be useful.
       */
      async getAvatar() {
        const avatar = await this._getAvatar();
        return avatar.url;
      }
      /**
       *  When resolving an avatar, there are many steps involved, such
       *  fetching metadata and possibly validating ownership of an
       *  NFT.
       *
       *  This method can be used to examine each step and the value it
       *  was working from.
       */
      async _getAvatar() {
        const linkage = [{ type: "name", value: this.name }];
        try {
          const avatar = await this.getText("avatar");
          if (avatar == null) {
            linkage.push({ type: "!avatar", value: "" });
            return { url: null, linkage };
          }
          linkage.push({ type: "avatar", value: avatar });
          for (let i = 0; i < matchers.length; i++) {
            const match = avatar.match(matchers[i]);
            if (match == null) {
              continue;
            }
            const scheme = match[1].toLowerCase();
            switch (scheme) {
              case "https":
              case "data":
                linkage.push({ type: "url", value: avatar });
                return { linkage, url: avatar };
              case "ipfs": {
                const url = getIpfsLink(avatar);
                linkage.push({ type: "ipfs", value: avatar });
                linkage.push({ type: "url", value: url });
                return { linkage, url };
              }
              case "erc721":
              case "erc1155": {
                const selector = scheme === "erc721" ? "tokenURI(uint256)" : "uri(uint256)";
                linkage.push({ type: scheme, value: avatar });
                const owner = await this.getAddress();
                if (owner == null) {
                  linkage.push({ type: "!owner", value: "" });
                  return { url: null, linkage };
                }
                const comps = (match[2] || "").split("/");
                if (comps.length !== 2) {
                  linkage.push({ type: `!${scheme}caip`, value: match[2] || "" });
                  return { url: null, linkage };
                }
                const tokenId = comps[1];
                const contract = new index_js_3.Contract(comps[0], [
                  // ERC-721
                  "function tokenURI(uint) view returns (string)",
                  "function ownerOf(uint) view returns (address)",
                  // ERC-1155
                  "function uri(uint) view returns (string)",
                  "function balanceOf(address, uint256) view returns (uint)"
                ], this.provider);
                if (scheme === "erc721") {
                  const tokenOwner = await contract.ownerOf(tokenId);
                  if (owner !== tokenOwner) {
                    linkage.push({ type: "!owner", value: tokenOwner });
                    return { url: null, linkage };
                  }
                  linkage.push({ type: "owner", value: tokenOwner });
                } else if (scheme === "erc1155") {
                  const balance = await contract.balanceOf(owner, tokenId);
                  if (!balance) {
                    linkage.push({ type: "!balance", value: "0" });
                    return { url: null, linkage };
                  }
                  linkage.push({ type: "balance", value: balance.toString() });
                }
                let metadataUrl = await contract[selector](tokenId);
                if (metadataUrl == null || metadataUrl === "0x") {
                  linkage.push({ type: "!metadata-url", value: "" });
                  return { url: null, linkage };
                }
                linkage.push({ type: "metadata-url-base", value: metadataUrl });
                if (scheme === "erc1155") {
                  metadataUrl = metadataUrl.replace("{id}", (0, index_js_5.toBeHex)(tokenId, 32).substring(2));
                  linkage.push({ type: "metadata-url-expanded", value: metadataUrl });
                }
                if (metadataUrl.match(/^ipfs:/i)) {
                  metadataUrl = getIpfsLink(metadataUrl);
                }
                linkage.push({ type: "metadata-url", value: metadataUrl });
                let metadata = {};
                const response = await new index_js_5.FetchRequest(metadataUrl).send();
                response.assertOk();
                try {
                  metadata = response.bodyJson;
                } catch (error) {
                  try {
                    linkage.push({ type: "!metadata", value: response.bodyText });
                  } catch (error2) {
                    const bytes = response.body;
                    if (bytes) {
                      linkage.push({ type: "!metadata", value: (0, index_js_5.hexlify)(bytes) });
                    }
                    return { url: null, linkage };
                  }
                  return { url: null, linkage };
                }
                if (!metadata) {
                  linkage.push({ type: "!metadata", value: "" });
                  return { url: null, linkage };
                }
                linkage.push({ type: "metadata", value: JSON.stringify(metadata) });
                let imageUrl = metadata.image;
                if (typeof imageUrl !== "string") {
                  linkage.push({ type: "!imageUrl", value: "" });
                  return { url: null, linkage };
                }
                if (imageUrl.match(/^(https:\/\/|data:)/i)) {
                } else {
                  const ipfs = imageUrl.match(matcherIpfs);
                  if (ipfs == null) {
                    linkage.push({ type: "!imageUrl-ipfs", value: imageUrl });
                    return { url: null, linkage };
                  }
                  linkage.push({ type: "imageUrl-ipfs", value: imageUrl });
                  imageUrl = getIpfsLink(imageUrl);
                }
                linkage.push({ type: "url", value: imageUrl });
                return { linkage, url: imageUrl };
              }
            }
          }
        } catch (error) {
        }
        return { linkage, url: null };
      }
      static async getEnsAddress(provider) {
        const network = await provider.getNetwork();
        const ensPlugin = network.getPlugin("org.ethers.plugins.network.Ens");
        (0, index_js_5.assert)(ensPlugin, "network does not support ENS", "UNSUPPORTED_OPERATION", {
          operation: "getEnsAddress",
          info: { network }
        });
        return ensPlugin.address;
      }
      /**
       *  Resolve to the ENS resolver for %%name%% using %%provider%% or
       *  ``null`` if unconfigured.
       */
      static async fromName(provider, name) {
        var _a;
        let currentName = name;
        while (true) {
          if (currentName === "" || currentName === ".") {
            return null;
          }
          if (name !== "eth" && currentName === "eth") {
            return null;
          }
          const addr = await __privateMethod(_a = _EnsResolver, _EnsResolver_static, getResolver_fn).call(_a, provider, currentName);
          if (addr != null) {
            const resolver = new _EnsResolver(provider, addr, name);
            if (currentName !== name && !await resolver.supportsWildcard()) {
              return null;
            }
            return resolver;
          }
          currentName = currentName.split(".").slice(1).join(".");
        }
      }
    };
    _supports2544 = new WeakMap();
    _resolver = new WeakMap();
    _EnsResolver_instances = new WeakSet();
    fetch_fn = async function(funcName, params) {
      params = (params || []).slice();
      const iface = __privateGet(this, _resolver).interface;
      params.unshift((0, index_js_4.namehash)(this.name));
      let fragment = null;
      if (await this.supportsWildcard()) {
        fragment = iface.getFunction(funcName);
        (0, index_js_5.assert)(fragment, "missing fragment", "UNKNOWN_ERROR", {
          info: { funcName }
        });
        params = [
          (0, index_js_4.dnsEncode)(this.name, 255),
          iface.encodeFunctionData(fragment, params)
        ];
        funcName = "resolve(bytes,bytes)";
      }
      params.push({
        enableCcipRead: true
      });
      try {
        const result = await __privateGet(this, _resolver)[funcName](...params);
        if (fragment) {
          return iface.decodeFunctionResult(fragment, result)[0];
        }
        return result;
      } catch (error) {
        if (!(0, index_js_5.isError)(error, "CALL_EXCEPTION")) {
          throw error;
        }
      }
      return null;
    };
    _EnsResolver_static = new WeakSet();
    getResolver_fn = async function(provider, name) {
      const ensAddr = await _EnsResolver.getEnsAddress(provider);
      try {
        const contract = new index_js_3.Contract(ensAddr, [
          "function resolver(bytes32) view returns (address)"
        ], provider);
        const addr = await contract.resolver((0, index_js_4.namehash)(name), {
          enableCcipRead: true
        });
        if (addr === index_js_2.ZeroAddress) {
          return null;
        }
        return addr;
      } catch (error) {
        throw error;
      }
      return null;
    };
    __privateAdd(_EnsResolver, _EnsResolver_static);
    var EnsResolver = _EnsResolver;
    exports2.EnsResolver = EnsResolver;
  }
});

// node_modules/ethers/lib.commonjs/providers/format.js
var require_format2 = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/format.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.formatTransactionResponse = exports2.formatTransactionReceipt = exports2.formatReceiptLog = exports2.formatBlock = exports2.formatLog = exports2.formatUint256 = exports2.formatHash = exports2.formatData = exports2.formatBoolean = exports2.object = exports2.arrayOf = exports2.allowNull = void 0;
    var index_js_1 = require_address3();
    var index_js_2 = require_crypto4();
    var index_js_3 = require_transaction2();
    var index_js_4 = require_utils11();
    var BN_0 = BigInt(0);
    function allowNull(format, nullValue) {
      return function(value) {
        if (value == null) {
          return nullValue;
        }
        return format(value);
      };
    }
    exports2.allowNull = allowNull;
    function arrayOf(format, allowNull2) {
      return (array2) => {
        if (allowNull2 && array2 == null) {
          return null;
        }
        if (!Array.isArray(array2)) {
          throw new Error("not an array");
        }
        return array2.map((i) => format(i));
      };
    }
    exports2.arrayOf = arrayOf;
    function object(format, altNames) {
      return (value) => {
        const result = {};
        for (const key in format) {
          let srcKey = key;
          if (altNames && key in altNames && !(srcKey in value)) {
            for (const altKey of altNames[key]) {
              if (altKey in value) {
                srcKey = altKey;
                break;
              }
            }
          }
          try {
            const nv = format[key](value[srcKey]);
            if (nv !== void 0) {
              result[key] = nv;
            }
          } catch (error) {
            const message = error instanceof Error ? error.message : "not-an-error";
            (0, index_js_4.assert)(false, `invalid value for value.${key} (${message})`, "BAD_DATA", { value });
          }
        }
        return result;
      };
    }
    exports2.object = object;
    function formatBoolean(value) {
      switch (value) {
        case true:
        case "true":
          return true;
        case false:
        case "false":
          return false;
      }
      (0, index_js_4.assertArgument)(false, `invalid boolean; ${JSON.stringify(value)}`, "value", value);
    }
    exports2.formatBoolean = formatBoolean;
    function formatData(value) {
      (0, index_js_4.assertArgument)((0, index_js_4.isHexString)(value, true), "invalid data", "value", value);
      return value;
    }
    exports2.formatData = formatData;
    function formatHash(value) {
      (0, index_js_4.assertArgument)((0, index_js_4.isHexString)(value, 32), "invalid hash", "value", value);
      return value;
    }
    exports2.formatHash = formatHash;
    function formatUint256(value) {
      if (!(0, index_js_4.isHexString)(value)) {
        throw new Error("invalid uint256");
      }
      return (0, index_js_4.zeroPadValue)(value, 32);
    }
    exports2.formatUint256 = formatUint256;
    var _formatLog = object({
      address: index_js_1.getAddress,
      blockHash: formatHash,
      blockNumber: index_js_4.getNumber,
      data: formatData,
      index: index_js_4.getNumber,
      removed: allowNull(formatBoolean, false),
      topics: arrayOf(formatHash),
      transactionHash: formatHash,
      transactionIndex: index_js_4.getNumber
    }, {
      index: ["logIndex"]
    });
    function formatLog(value) {
      return _formatLog(value);
    }
    exports2.formatLog = formatLog;
    var _formatBlock = object({
      hash: allowNull(formatHash),
      parentHash: formatHash,
      parentBeaconBlockRoot: allowNull(formatHash, null),
      number: index_js_4.getNumber,
      timestamp: index_js_4.getNumber,
      nonce: allowNull(formatData),
      difficulty: index_js_4.getBigInt,
      gasLimit: index_js_4.getBigInt,
      gasUsed: index_js_4.getBigInt,
      stateRoot: allowNull(formatHash, null),
      receiptsRoot: allowNull(formatHash, null),
      blobGasUsed: allowNull(index_js_4.getBigInt, null),
      excessBlobGas: allowNull(index_js_4.getBigInt, null),
      miner: allowNull(index_js_1.getAddress),
      prevRandao: allowNull(formatHash, null),
      extraData: formatData,
      baseFeePerGas: allowNull(index_js_4.getBigInt)
    }, {
      prevRandao: ["mixHash"]
    });
    function formatBlock(value) {
      const result = _formatBlock(value);
      result.transactions = value.transactions.map((tx) => {
        if (typeof tx === "string") {
          return tx;
        }
        return formatTransactionResponse(tx);
      });
      return result;
    }
    exports2.formatBlock = formatBlock;
    var _formatReceiptLog = object({
      transactionIndex: index_js_4.getNumber,
      blockNumber: index_js_4.getNumber,
      transactionHash: formatHash,
      address: index_js_1.getAddress,
      topics: arrayOf(formatHash),
      data: formatData,
      index: index_js_4.getNumber,
      blockHash: formatHash
    }, {
      index: ["logIndex"]
    });
    function formatReceiptLog(value) {
      return _formatReceiptLog(value);
    }
    exports2.formatReceiptLog = formatReceiptLog;
    var _formatTransactionReceipt = object({
      to: allowNull(index_js_1.getAddress, null),
      from: allowNull(index_js_1.getAddress, null),
      contractAddress: allowNull(index_js_1.getAddress, null),
      // should be allowNull(hash), but broken-EIP-658 support is handled in receipt
      index: index_js_4.getNumber,
      root: allowNull(index_js_4.hexlify),
      gasUsed: index_js_4.getBigInt,
      blobGasUsed: allowNull(index_js_4.getBigInt, null),
      logsBloom: allowNull(formatData),
      blockHash: formatHash,
      hash: formatHash,
      logs: arrayOf(formatReceiptLog),
      blockNumber: index_js_4.getNumber,
      //confirmations: allowNull(getNumber, null),
      cumulativeGasUsed: index_js_4.getBigInt,
      effectiveGasPrice: allowNull(index_js_4.getBigInt),
      blobGasPrice: allowNull(index_js_4.getBigInt, null),
      status: allowNull(index_js_4.getNumber),
      type: allowNull(index_js_4.getNumber, 0)
    }, {
      effectiveGasPrice: ["gasPrice"],
      hash: ["transactionHash"],
      index: ["transactionIndex"]
    });
    function formatTransactionReceipt(value) {
      return _formatTransactionReceipt(value);
    }
    exports2.formatTransactionReceipt = formatTransactionReceipt;
    function formatTransactionResponse(value) {
      if (value.to && (0, index_js_4.getBigInt)(value.to) === BN_0) {
        value.to = "0x0000000000000000000000000000000000000000";
      }
      const result = object({
        hash: formatHash,
        // Some nodes do not return this, usually test nodes (like Ganache)
        index: allowNull(index_js_4.getNumber, void 0),
        type: (value2) => {
          if (value2 === "0x" || value2 == null) {
            return 0;
          }
          return (0, index_js_4.getNumber)(value2);
        },
        accessList: allowNull(index_js_3.accessListify, null),
        blobVersionedHashes: allowNull(arrayOf(formatHash, true), null),
        blockHash: allowNull(formatHash, null),
        blockNumber: allowNull(index_js_4.getNumber, null),
        transactionIndex: allowNull(index_js_4.getNumber, null),
        from: index_js_1.getAddress,
        // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas) must be set
        gasPrice: allowNull(index_js_4.getBigInt),
        maxPriorityFeePerGas: allowNull(index_js_4.getBigInt),
        maxFeePerGas: allowNull(index_js_4.getBigInt),
        maxFeePerBlobGas: allowNull(index_js_4.getBigInt, null),
        gasLimit: index_js_4.getBigInt,
        to: allowNull(index_js_1.getAddress, null),
        value: index_js_4.getBigInt,
        nonce: index_js_4.getNumber,
        data: formatData,
        creates: allowNull(index_js_1.getAddress, null),
        chainId: allowNull(index_js_4.getBigInt, null)
      }, {
        data: ["input"],
        gasLimit: ["gas"],
        index: ["transactionIndex"]
      })(value);
      if (result.to == null && result.creates == null) {
        result.creates = (0, index_js_1.getCreateAddress)(result);
      }
      if ((value.type === 1 || value.type === 2) && value.accessList == null) {
        result.accessList = [];
      }
      if (value.signature) {
        result.signature = index_js_2.Signature.from(value.signature);
      } else {
        result.signature = index_js_2.Signature.from(value);
      }
      if (result.chainId == null) {
        const chainId = result.signature.legacyChainId;
        if (chainId != null) {
          result.chainId = chainId;
        }
      }
      if (result.blockHash && (0, index_js_4.getBigInt)(result.blockHash) === BN_0) {
        result.blockHash = null;
      }
      return result;
    }
    exports2.formatTransactionResponse = formatTransactionResponse;
  }
});

// node_modules/ethers/lib.commonjs/providers/plugins-network.js
var require_plugins_network = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/plugins-network.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FetchUrlFeeDataNetworkPlugin = exports2.FeeDataNetworkPlugin = exports2.EnsPlugin = exports2.GasCostPlugin = exports2.NetworkPlugin = void 0;
    var properties_js_1 = require_properties();
    var index_js_1 = require_utils11();
    var EnsAddress = "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
    var NetworkPlugin = class _NetworkPlugin {
      /**
       *  Creates a new **NetworkPlugin**.
       */
      constructor(name) {
        /**
         *  The name of the plugin.
         *
         *  It is recommended to use reverse-domain-notation, which permits
         *  unique names with a known authority as well as hierarchal entries.
         */
        __publicField(this, "name");
        (0, properties_js_1.defineProperties)(this, { name });
      }
      /**
       *  Creates a copy of this plugin.
       */
      clone() {
        return new _NetworkPlugin(this.name);
      }
    };
    exports2.NetworkPlugin = NetworkPlugin;
    var GasCostPlugin = class _GasCostPlugin extends NetworkPlugin {
      /**
       *  Creates a new GasCostPlugin from %%effectiveBlock%% until the
       *  latest block or another GasCostPlugin supercedes that block number,
       *  with the associated %%costs%%.
       */
      constructor(effectiveBlock, costs) {
        if (effectiveBlock == null) {
          effectiveBlock = 0;
        }
        super(`org.ethers.network.plugins.GasCost#${effectiveBlock || 0}`);
        /**
         *  The block number to treat these values as valid from.
         *
         *  This allows a hardfork to have updated values included as well as
         *  mulutiple hardforks to be supported.
         */
        __publicField(this, "effectiveBlock");
        /**
         *  The transactions base fee.
         */
        __publicField(this, "txBase");
        /**
         *  The fee for creating a new account.
         */
        __publicField(this, "txCreate");
        /**
         *  The fee per zero-byte in the data.
         */
        __publicField(this, "txDataZero");
        /**
         *  The fee per non-zero-byte in the data.
         */
        __publicField(this, "txDataNonzero");
        /**
         *  The fee per storage key in the [[link-eip-2930]] access list.
         */
        __publicField(this, "txAccessListStorageKey");
        /**
         *  The fee per address in the [[link-eip-2930]] access list.
         */
        __publicField(this, "txAccessListAddress");
        const props = { effectiveBlock };
        function set(name, nullish) {
          let value = (costs || {})[name];
          if (value == null) {
            value = nullish;
          }
          (0, index_js_1.assertArgument)(typeof value === "number", `invalud value for ${name}`, "costs", costs);
          props[name] = value;
        }
        set("txBase", 21e3);
        set("txCreate", 32e3);
        set("txDataZero", 4);
        set("txDataNonzero", 16);
        set("txAccessListStorageKey", 1900);
        set("txAccessListAddress", 2400);
        (0, properties_js_1.defineProperties)(this, props);
      }
      clone() {
        return new _GasCostPlugin(this.effectiveBlock, this);
      }
    };
    exports2.GasCostPlugin = GasCostPlugin;
    var EnsPlugin = class _EnsPlugin extends NetworkPlugin {
      /**
       *  Creates a new **EnsPlugin** connected to %%address%% on the
       *  %%targetNetwork%%. The default ENS address and mainnet is used
       *  if unspecified.
       */
      constructor(address, targetNetwork) {
        super("org.ethers.plugins.network.Ens");
        /**
         *  The ENS Registrty Contract address.
         */
        __publicField(this, "address");
        /**
         *  The chain ID that the ENS contract lives on.
         */
        __publicField(this, "targetNetwork");
        (0, properties_js_1.defineProperties)(this, {
          address: address || EnsAddress,
          targetNetwork: targetNetwork == null ? 1 : targetNetwork
        });
      }
      clone() {
        return new _EnsPlugin(this.address, this.targetNetwork);
      }
    };
    exports2.EnsPlugin = EnsPlugin;
    var _feeDataFunc;
    var _FeeDataNetworkPlugin = class _FeeDataNetworkPlugin extends NetworkPlugin {
      /**
       *  Creates a new **FeeDataNetworkPlugin**.
       */
      constructor(feeDataFunc) {
        super("org.ethers.plugins.network.FeeData");
        __privateAdd(this, _feeDataFunc);
        __privateSet(this, _feeDataFunc, feeDataFunc);
      }
      /**
       *  The fee data function provided to the constructor.
       */
      get feeDataFunc() {
        return __privateGet(this, _feeDataFunc);
      }
      /**
       *  Resolves to the fee data.
       */
      async getFeeData(provider) {
        return await __privateGet(this, _feeDataFunc).call(this, provider);
      }
      clone() {
        return new _FeeDataNetworkPlugin(__privateGet(this, _feeDataFunc));
      }
    };
    _feeDataFunc = new WeakMap();
    var FeeDataNetworkPlugin = _FeeDataNetworkPlugin;
    exports2.FeeDataNetworkPlugin = FeeDataNetworkPlugin;
    var _url, _processFunc;
    var FetchUrlFeeDataNetworkPlugin = class extends NetworkPlugin {
      /**
       *  Creates a new **FetchUrlFeeDataNetworkPlugin** which will
       *  be used when computing the fee data for the network.
       */
      constructor(url, processFunc) {
        super("org.ethers.plugins.network.FetchUrlFeeDataPlugin");
        __privateAdd(this, _url);
        __privateAdd(this, _processFunc);
        __privateSet(this, _url, url);
        __privateSet(this, _processFunc, processFunc);
      }
      /**
       *  The URL to initialize the FetchRequest with in %%processFunc%%.
       */
      get url() {
        return __privateGet(this, _url);
      }
      /**
       *  The callback to use when computing the FeeData.
       */
      get processFunc() {
        return __privateGet(this, _processFunc);
      }
      // We are immutable, so we can serve as our own clone
      clone() {
        return this;
      }
    };
    _url = new WeakMap();
    _processFunc = new WeakMap();
    exports2.FetchUrlFeeDataNetworkPlugin = FetchUrlFeeDataNetworkPlugin;
  }
});

// node_modules/ethers/lib.commonjs/providers/network.js
var require_network2 = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/network.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Network = void 0;
    var index_js_1 = require_transaction2();
    var index_js_2 = require_utils11();
    var plugins_network_js_1 = require_plugins_network();
    var Networks = /* @__PURE__ */ new Map();
    var _name, _chainId, _plugins;
    var _Network = class _Network {
      /**
       *  Creates a new **Network** for %%name%% and %%chainId%%.
       */
      constructor(name, chainId) {
        __privateAdd(this, _name);
        __privateAdd(this, _chainId);
        __privateAdd(this, _plugins);
        __privateSet(this, _name, name);
        __privateSet(this, _chainId, (0, index_js_2.getBigInt)(chainId));
        __privateSet(this, _plugins, /* @__PURE__ */ new Map());
      }
      /**
       *  Returns a JSON-compatible representation of a Network.
       */
      toJSON() {
        return { name: this.name, chainId: String(this.chainId) };
      }
      /**
       *  The network common name.
       *
       *  This is the canonical name, as networks migh have multiple
       *  names.
       */
      get name() {
        return __privateGet(this, _name);
      }
      set name(value) {
        __privateSet(this, _name, value);
      }
      /**
       *  The network chain ID.
       */
      get chainId() {
        return __privateGet(this, _chainId);
      }
      set chainId(value) {
        __privateSet(this, _chainId, (0, index_js_2.getBigInt)(value, "chainId"));
      }
      /**
       *  Returns true if %%other%% matches this network. Any chain ID
       *  must match, and if no chain ID is present, the name must match.
       *
       *  This method does not currently check for additional properties,
       *  such as ENS address or plug-in compatibility.
       */
      matches(other) {
        if (other == null) {
          return false;
        }
        if (typeof other === "string") {
          try {
            return this.chainId === (0, index_js_2.getBigInt)(other);
          } catch (error) {
          }
          return this.name === other;
        }
        if (typeof other === "number" || typeof other === "bigint") {
          try {
            return this.chainId === (0, index_js_2.getBigInt)(other);
          } catch (error) {
          }
          return false;
        }
        if (typeof other === "object") {
          if (other.chainId != null) {
            try {
              return this.chainId === (0, index_js_2.getBigInt)(other.chainId);
            } catch (error) {
            }
            return false;
          }
          if (other.name != null) {
            return this.name === other.name;
          }
          return false;
        }
        return false;
      }
      /**
       *  Returns the list of plugins currently attached to this Network.
       */
      get plugins() {
        return Array.from(__privateGet(this, _plugins).values());
      }
      /**
       *  Attach a new %%plugin%% to this Network. The network name
       *  must be unique, excluding any fragment.
       */
      attachPlugin(plugin) {
        if (__privateGet(this, _plugins).get(plugin.name)) {
          throw new Error(`cannot replace existing plugin: ${plugin.name} `);
        }
        __privateGet(this, _plugins).set(plugin.name, plugin.clone());
        return this;
      }
      /**
       *  Return the plugin, if any, matching %%name%% exactly. Plugins
       *  with fragments will not be returned unless %%name%% includes
       *  a fragment.
       */
      getPlugin(name) {
        return __privateGet(this, _plugins).get(name) || null;
      }
      /**
       *  Gets a list of all plugins that match %%name%%, with otr without
       *  a fragment.
       */
      getPlugins(basename) {
        return this.plugins.filter((p) => p.name.split("#")[0] === basename);
      }
      /**
       *  Create a copy of this Network.
       */
      clone() {
        const clone = new _Network(this.name, this.chainId);
        this.plugins.forEach((plugin) => {
          clone.attachPlugin(plugin.clone());
        });
        return clone;
      }
      /**
       *  Compute the intrinsic gas required for a transaction.
       *
       *  A GasCostPlugin can be attached to override the default
       *  values.
       */
      computeIntrinsicGas(tx) {
        const costs = this.getPlugin("org.ethers.plugins.network.GasCost") || new plugins_network_js_1.GasCostPlugin();
        let gas = costs.txBase;
        if (tx.to == null) {
          gas += costs.txCreate;
        }
        if (tx.data) {
          for (let i = 2; i < tx.data.length; i += 2) {
            if (tx.data.substring(i, i + 2) === "00") {
              gas += costs.txDataZero;
            } else {
              gas += costs.txDataNonzero;
            }
          }
        }
        if (tx.accessList) {
          const accessList = (0, index_js_1.accessListify)(tx.accessList);
          for (const addr in accessList) {
            gas += costs.txAccessListAddress + costs.txAccessListStorageKey * accessList[addr].storageKeys.length;
          }
        }
        return gas;
      }
      /**
       *  Returns a new Network for the %%network%% name or chainId.
       */
      static from(network) {
        injectCommonNetworks();
        if (network == null) {
          return _Network.from("mainnet");
        }
        if (typeof network === "number") {
          network = BigInt(network);
        }
        if (typeof network === "string" || typeof network === "bigint") {
          const networkFunc = Networks.get(network);
          if (networkFunc) {
            return networkFunc();
          }
          if (typeof network === "bigint") {
            return new _Network("unknown", network);
          }
          (0, index_js_2.assertArgument)(false, "unknown network", "network", network);
        }
        if (typeof network.clone === "function") {
          const clone = network.clone();
          return clone;
        }
        if (typeof network === "object") {
          (0, index_js_2.assertArgument)(typeof network.name === "string" && typeof network.chainId === "number", "invalid network object name or chainId", "network", network);
          const custom = new _Network(network.name, network.chainId);
          if (network.ensAddress || network.ensNetwork != null) {
            custom.attachPlugin(new plugins_network_js_1.EnsPlugin(network.ensAddress, network.ensNetwork));
          }
          return custom;
        }
        (0, index_js_2.assertArgument)(false, "invalid network", "network", network);
      }
      /**
       *  Register %%nameOrChainId%% with a function which returns
       *  an instance of a Network representing that chain.
       */
      static register(nameOrChainId, networkFunc) {
        if (typeof nameOrChainId === "number") {
          nameOrChainId = BigInt(nameOrChainId);
        }
        const existing = Networks.get(nameOrChainId);
        if (existing) {
          (0, index_js_2.assertArgument)(false, `conflicting network for ${JSON.stringify(existing.name)}`, "nameOrChainId", nameOrChainId);
        }
        Networks.set(nameOrChainId, networkFunc);
      }
    };
    _name = new WeakMap();
    _chainId = new WeakMap();
    _plugins = new WeakMap();
    var Network = _Network;
    exports2.Network = Network;
    function parseUnits(_value, decimals) {
      const value = String(_value);
      if (!value.match(/^[0-9.]+$/)) {
        throw new Error(`invalid gwei value: ${_value}`);
      }
      const comps = value.split(".");
      if (comps.length === 1) {
        comps.push("");
      }
      if (comps.length !== 2) {
        throw new Error(`invalid gwei value: ${_value}`);
      }
      while (comps[1].length < decimals) {
        comps[1] += "0";
      }
      if (comps[1].length > 9) {
        let frac = BigInt(comps[1].substring(0, 9));
        if (!comps[1].substring(9).match(/^0+$/)) {
          frac++;
        }
        comps[1] = frac.toString();
      }
      return BigInt(comps[0] + comps[1]);
    }
    function getGasStationPlugin(url) {
      return new plugins_network_js_1.FetchUrlFeeDataNetworkPlugin(url, async (fetchFeeData, provider, request) => {
        request.setHeader("User-Agent", "ethers");
        let response;
        try {
          const [_response, _feeData] = await Promise.all([
            request.send(),
            fetchFeeData()
          ]);
          response = _response;
          const payload = response.bodyJson.standard;
          const feeData = {
            gasPrice: _feeData.gasPrice,
            maxFeePerGas: parseUnits(payload.maxFee, 9),
            maxPriorityFeePerGas: parseUnits(payload.maxPriorityFee, 9)
          };
          return feeData;
        } catch (error) {
          (0, index_js_2.assert)(false, `error encountered with polygon gas station (${JSON.stringify(request.url)})`, "SERVER_ERROR", { request, response, error });
        }
      });
    }
    var injected = false;
    function injectCommonNetworks() {
      if (injected) {
        return;
      }
      injected = true;
      function registerEth(name, chainId, options) {
        const func = function() {
          const network = new Network(name, chainId);
          if (options.ensNetwork != null) {
            network.attachPlugin(new plugins_network_js_1.EnsPlugin(null, options.ensNetwork));
          }
          network.attachPlugin(new plugins_network_js_1.GasCostPlugin());
          (options.plugins || []).forEach((plugin) => {
            network.attachPlugin(plugin);
          });
          return network;
        };
        Network.register(name, func);
        Network.register(chainId, func);
        if (options.altNames) {
          options.altNames.forEach((name2) => {
            Network.register(name2, func);
          });
        }
      }
      registerEth("mainnet", 1, { ensNetwork: 1, altNames: ["homestead"] });
      registerEth("ropsten", 3, { ensNetwork: 3 });
      registerEth("rinkeby", 4, { ensNetwork: 4 });
      registerEth("goerli", 5, { ensNetwork: 5 });
      registerEth("kovan", 42, { ensNetwork: 42 });
      registerEth("sepolia", 11155111, { ensNetwork: 11155111 });
      registerEth("holesky", 17e3, { ensNetwork: 17e3 });
      registerEth("classic", 61, {});
      registerEth("classicKotti", 6, {});
      registerEth("arbitrum", 42161, {
        ensNetwork: 1
      });
      registerEth("arbitrum-goerli", 421613, {});
      registerEth("arbitrum-sepolia", 421614, {});
      registerEth("base", 8453, { ensNetwork: 1 });
      registerEth("base-goerli", 84531, {});
      registerEth("base-sepolia", 84532, {});
      registerEth("bnb", 56, { ensNetwork: 1 });
      registerEth("bnbt", 97, {});
      registerEth("linea", 59144, { ensNetwork: 1 });
      registerEth("linea-goerli", 59140, {});
      registerEth("linea-sepolia", 59141, {});
      registerEth("matic", 137, {
        ensNetwork: 1,
        plugins: [
          getGasStationPlugin("https://gasstation.polygon.technology/v2")
        ]
      });
      registerEth("matic-amoy", 80002, {});
      registerEth("matic-mumbai", 80001, {
        altNames: ["maticMumbai", "maticmum"],
        plugins: [
          getGasStationPlugin("https://gasstation-testnet.polygon.technology/v2")
        ]
      });
      registerEth("optimism", 10, {
        ensNetwork: 1,
        plugins: []
      });
      registerEth("optimism-goerli", 420, {});
      registerEth("optimism-sepolia", 11155420, {});
      registerEth("xdai", 100, { ensNetwork: 1 });
    }
  }
});

// node_modules/ethers/lib.commonjs/providers/subscriber-polling.js
var require_subscriber_polling = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/subscriber-polling.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PollingEventSubscriber = exports2.PollingTransactionSubscriber = exports2.PollingOrphanSubscriber = exports2.PollingBlockTagSubscriber = exports2.OnBlockSubscriber = exports2.PollingBlockSubscriber = exports2.getPollingSubscriber = void 0;
    var index_js_1 = require_utils11();
    function copy(obj) {
      return JSON.parse(JSON.stringify(obj));
    }
    function getPollingSubscriber(provider, event) {
      if (event === "block") {
        return new PollingBlockSubscriber(provider);
      }
      if ((0, index_js_1.isHexString)(event, 32)) {
        return new PollingTransactionSubscriber(provider, event);
      }
      (0, index_js_1.assert)(false, "unsupported polling event", "UNSUPPORTED_OPERATION", {
        operation: "getPollingSubscriber",
        info: { event }
      });
    }
    exports2.getPollingSubscriber = getPollingSubscriber;
    var _provider, _poller, _interval, _blockNumber, _PollingBlockSubscriber_instances, poll_fn;
    var PollingBlockSubscriber = class {
      /**
       *  Create a new **PollingBlockSubscriber** attached to %%provider%%.
       */
      constructor(provider) {
        __privateAdd(this, _PollingBlockSubscriber_instances);
        __privateAdd(this, _provider);
        __privateAdd(this, _poller);
        __privateAdd(this, _interval);
        // The most recent block we have scanned for events. The value -2
        // indicates we still need to fetch an initial block number
        __privateAdd(this, _blockNumber);
        __privateSet(this, _provider, provider);
        __privateSet(this, _poller, null);
        __privateSet(this, _interval, 4e3);
        __privateSet(this, _blockNumber, -2);
      }
      /**
       *  The polling interval.
       */
      get pollingInterval() {
        return __privateGet(this, _interval);
      }
      set pollingInterval(value) {
        __privateSet(this, _interval, value);
      }
      start() {
        if (__privateGet(this, _poller)) {
          return;
        }
        __privateSet(this, _poller, __privateGet(this, _provider)._setTimeout(__privateMethod(this, _PollingBlockSubscriber_instances, poll_fn).bind(this), __privateGet(this, _interval)));
        __privateMethod(this, _PollingBlockSubscriber_instances, poll_fn).call(this);
      }
      stop() {
        if (!__privateGet(this, _poller)) {
          return;
        }
        __privateGet(this, _provider)._clearTimeout(__privateGet(this, _poller));
        __privateSet(this, _poller, null);
      }
      pause(dropWhilePaused) {
        this.stop();
        if (dropWhilePaused) {
          __privateSet(this, _blockNumber, -2);
        }
      }
      resume() {
        this.start();
      }
    };
    _provider = new WeakMap();
    _poller = new WeakMap();
    _interval = new WeakMap();
    _blockNumber = new WeakMap();
    _PollingBlockSubscriber_instances = new WeakSet();
    poll_fn = async function() {
      try {
        const blockNumber = await __privateGet(this, _provider).getBlockNumber();
        if (__privateGet(this, _blockNumber) === -2) {
          __privateSet(this, _blockNumber, blockNumber);
          return;
        }
        if (blockNumber !== __privateGet(this, _blockNumber)) {
          for (let b = __privateGet(this, _blockNumber) + 1; b <= blockNumber; b++) {
            if (__privateGet(this, _poller) == null) {
              return;
            }
            await __privateGet(this, _provider).emit("block", b);
          }
          __privateSet(this, _blockNumber, blockNumber);
        }
      } catch (error) {
      }
      if (__privateGet(this, _poller) == null) {
        return;
      }
      __privateSet(this, _poller, __privateGet(this, _provider)._setTimeout(__privateMethod(this, _PollingBlockSubscriber_instances, poll_fn).bind(this), __privateGet(this, _interval)));
    };
    exports2.PollingBlockSubscriber = PollingBlockSubscriber;
    var _provider2, _poll, _running;
    var OnBlockSubscriber = class {
      /**
       *  Create a new **OnBlockSubscriber** attached to %%provider%%.
       */
      constructor(provider) {
        __privateAdd(this, _provider2);
        __privateAdd(this, _poll);
        __privateAdd(this, _running);
        __privateSet(this, _provider2, provider);
        __privateSet(this, _running, false);
        __privateSet(this, _poll, (blockNumber) => {
          this._poll(blockNumber, __privateGet(this, _provider2));
        });
      }
      /**
       *  Called on every new block.
       */
      async _poll(blockNumber, provider) {
        throw new Error("sub-classes must override this");
      }
      start() {
        if (__privateGet(this, _running)) {
          return;
        }
        __privateSet(this, _running, true);
        __privateGet(this, _poll).call(this, -2);
        __privateGet(this, _provider2).on("block", __privateGet(this, _poll));
      }
      stop() {
        if (!__privateGet(this, _running)) {
          return;
        }
        __privateSet(this, _running, false);
        __privateGet(this, _provider2).off("block", __privateGet(this, _poll));
      }
      pause(dropWhilePaused) {
        this.stop();
      }
      resume() {
        this.start();
      }
    };
    _provider2 = new WeakMap();
    _poll = new WeakMap();
    _running = new WeakMap();
    exports2.OnBlockSubscriber = OnBlockSubscriber;
    var _tag, _lastBlock;
    var PollingBlockTagSubscriber = class extends OnBlockSubscriber {
      constructor(provider, tag) {
        super(provider);
        __privateAdd(this, _tag);
        __privateAdd(this, _lastBlock);
        __privateSet(this, _tag, tag);
        __privateSet(this, _lastBlock, -2);
      }
      pause(dropWhilePaused) {
        if (dropWhilePaused) {
          __privateSet(this, _lastBlock, -2);
        }
        super.pause(dropWhilePaused);
      }
      async _poll(blockNumber, provider) {
        const block = await provider.getBlock(__privateGet(this, _tag));
        if (block == null) {
          return;
        }
        if (__privateGet(this, _lastBlock) === -2) {
          __privateSet(this, _lastBlock, block.number);
        } else if (block.number > __privateGet(this, _lastBlock)) {
          provider.emit(__privateGet(this, _tag), block.number);
          __privateSet(this, _lastBlock, block.number);
        }
      }
    };
    _tag = new WeakMap();
    _lastBlock = new WeakMap();
    exports2.PollingBlockTagSubscriber = PollingBlockTagSubscriber;
    var _filter;
    var PollingOrphanSubscriber = class extends OnBlockSubscriber {
      constructor(provider, filter) {
        super(provider);
        __privateAdd(this, _filter);
        __privateSet(this, _filter, copy(filter));
      }
      async _poll(blockNumber, provider) {
        throw new Error("@TODO");
        console.log(__privateGet(this, _filter));
      }
    };
    _filter = new WeakMap();
    exports2.PollingOrphanSubscriber = PollingOrphanSubscriber;
    var _hash;
    var PollingTransactionSubscriber = class extends OnBlockSubscriber {
      /**
       *  Create a new **PollingTransactionSubscriber** attached to
       *  %%provider%%, listening for %%hash%%.
       */
      constructor(provider, hash) {
        super(provider);
        __privateAdd(this, _hash);
        __privateSet(this, _hash, hash);
      }
      async _poll(blockNumber, provider) {
        const tx = await provider.getTransactionReceipt(__privateGet(this, _hash));
        if (tx) {
          provider.emit(__privateGet(this, _hash), tx);
        }
      }
    };
    _hash = new WeakMap();
    exports2.PollingTransactionSubscriber = PollingTransactionSubscriber;
    var _provider3, _filter2, _poller2, _running2, _blockNumber2, _PollingEventSubscriber_instances, poll_fn2;
    var PollingEventSubscriber = class {
      /**
       *  Create a new **PollingTransactionSubscriber** attached to
       *  %%provider%%, listening for %%filter%%.
       */
      constructor(provider, filter) {
        __privateAdd(this, _PollingEventSubscriber_instances);
        __privateAdd(this, _provider3);
        __privateAdd(this, _filter2);
        __privateAdd(this, _poller2);
        __privateAdd(this, _running2);
        // The most recent block we have scanned for events. The value -2
        // indicates we still need to fetch an initial block number
        __privateAdd(this, _blockNumber2);
        __privateSet(this, _provider3, provider);
        __privateSet(this, _filter2, copy(filter));
        __privateSet(this, _poller2, __privateMethod(this, _PollingEventSubscriber_instances, poll_fn2).bind(this));
        __privateSet(this, _running2, false);
        __privateSet(this, _blockNumber2, -2);
      }
      start() {
        if (__privateGet(this, _running2)) {
          return;
        }
        __privateSet(this, _running2, true);
        if (__privateGet(this, _blockNumber2) === -2) {
          __privateGet(this, _provider3).getBlockNumber().then((blockNumber) => {
            __privateSet(this, _blockNumber2, blockNumber);
          });
        }
        __privateGet(this, _provider3).on("block", __privateGet(this, _poller2));
      }
      stop() {
        if (!__privateGet(this, _running2)) {
          return;
        }
        __privateSet(this, _running2, false);
        __privateGet(this, _provider3).off("block", __privateGet(this, _poller2));
      }
      pause(dropWhilePaused) {
        this.stop();
        if (dropWhilePaused) {
          __privateSet(this, _blockNumber2, -2);
        }
      }
      resume() {
        this.start();
      }
    };
    _provider3 = new WeakMap();
    _filter2 = new WeakMap();
    _poller2 = new WeakMap();
    _running2 = new WeakMap();
    _blockNumber2 = new WeakMap();
    _PollingEventSubscriber_instances = new WeakSet();
    poll_fn2 = async function(blockNumber) {
      if (__privateGet(this, _blockNumber2) === -2) {
        return;
      }
      const filter = copy(__privateGet(this, _filter2));
      filter.fromBlock = __privateGet(this, _blockNumber2) + 1;
      filter.toBlock = blockNumber;
      const logs = await __privateGet(this, _provider3).getLogs(filter);
      if (logs.length === 0) {
        if (__privateGet(this, _blockNumber2) < blockNumber - 60) {
          __privateSet(this, _blockNumber2, blockNumber - 60);
        }
        return;
      }
      for (const log of logs) {
        __privateGet(this, _provider3).emit(__privateGet(this, _filter2), log);
        __privateSet(this, _blockNumber2, log.blockNumber);
      }
    };
    exports2.PollingEventSubscriber = PollingEventSubscriber;
  }
});

// node_modules/ethers/lib.commonjs/providers/abstract-provider.js
var require_abstract_provider = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/abstract-provider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AbstractProvider = exports2.UnmanagedSubscriber = void 0;
    var index_js_1 = require_address3();
    var index_js_2 = require_constants2();
    var index_js_3 = require_contract2();
    var index_js_4 = require_hash2();
    var index_js_5 = require_transaction2();
    var index_js_6 = require_utils11();
    var ens_resolver_js_1 = require_ens_resolver();
    var format_js_1 = require_format2();
    var network_js_1 = require_network2();
    var provider_js_1 = require_provider();
    var subscriber_polling_js_1 = require_subscriber_polling();
    var BN_2 = BigInt(2);
    var MAX_CCIP_REDIRECTS = 10;
    function isPromise(value) {
      return value && typeof value.then === "function";
    }
    function getTag(prefix, value) {
      return prefix + ":" + JSON.stringify(value, (k, v) => {
        if (v == null) {
          return "null";
        }
        if (typeof v === "bigint") {
          return `bigint:${v.toString()}`;
        }
        if (typeof v === "string") {
          return v.toLowerCase();
        }
        if (typeof v === "object" && !Array.isArray(v)) {
          const keys = Object.keys(v);
          keys.sort();
          return keys.reduce((accum, key) => {
            accum[key] = v[key];
            return accum;
          }, {});
        }
        return v;
      });
    }
    var UnmanagedSubscriber = class {
      /**
       *  Create a new UnmanagedSubscriber with %%name%%.
       */
      constructor(name) {
        /**
         *  The name fof the event.
         */
        __publicField(this, "name");
        (0, index_js_6.defineProperties)(this, { name });
      }
      start() {
      }
      stop() {
      }
      pause(dropWhilePaused) {
      }
      resume() {
      }
    };
    exports2.UnmanagedSubscriber = UnmanagedSubscriber;
    function copy(value) {
      return JSON.parse(JSON.stringify(value));
    }
    function concisify(items) {
      items = Array.from(new Set(items).values());
      items.sort();
      return items;
    }
    async function getSubscription(_event, provider) {
      if (_event == null) {
        throw new Error("invalid event");
      }
      if (Array.isArray(_event)) {
        _event = { topics: _event };
      }
      if (typeof _event === "string") {
        switch (_event) {
          case "block":
          case "debug":
          case "error":
          case "finalized":
          case "network":
          case "pending":
          case "safe": {
            return { type: _event, tag: _event };
          }
        }
      }
      if ((0, index_js_6.isHexString)(_event, 32)) {
        const hash = _event.toLowerCase();
        return { type: "transaction", tag: getTag("tx", { hash }), hash };
      }
      if (_event.orphan) {
        const event = _event;
        return { type: "orphan", tag: getTag("orphan", event), filter: copy(event) };
      }
      if (_event.address || _event.topics) {
        const event = _event;
        const filter = {
          topics: (event.topics || []).map((t) => {
            if (t == null) {
              return null;
            }
            if (Array.isArray(t)) {
              return concisify(t.map((t2) => t2.toLowerCase()));
            }
            return t.toLowerCase();
          })
        };
        if (event.address) {
          const addresses2 = [];
          const promises = [];
          const addAddress = (addr) => {
            if ((0, index_js_6.isHexString)(addr)) {
              addresses2.push(addr);
            } else {
              promises.push((async () => {
                addresses2.push(await (0, index_js_1.resolveAddress)(addr, provider));
              })());
            }
          };
          if (Array.isArray(event.address)) {
            event.address.forEach(addAddress);
          } else {
            addAddress(event.address);
          }
          if (promises.length) {
            await Promise.all(promises);
          }
          filter.address = concisify(addresses2.map((a) => a.toLowerCase()));
        }
        return { filter, tag: getTag("event", filter), type: "event" };
      }
      (0, index_js_6.assertArgument)(false, "unknown ProviderEvent", "event", _event);
    }
    function getTime() {
      return (/* @__PURE__ */ new Date()).getTime();
    }
    var defaultOptions = {
      cacheTimeout: 250,
      pollingInterval: 4e3
    };
    var _subs, _plugins, _pausedState, _destroyed, _networkPromise, _anyNetwork, _performCache, _lastBlockNumber, _nextTimer, _timers, _disableCcipRead, _options, _AbstractProvider_instances, perform_fn, call_fn, checkNetwork_fn, getAccountValue_fn, getBlock_fn, hasSub_fn, getSub_fn;
    var AbstractProvider = class {
      /**
       *  Create a new **AbstractProvider** connected to %%network%%, or
       *  use the various network detection capabilities to discover the
       *  [[Network]] if necessary.
       */
      constructor(_network, options) {
        __privateAdd(this, _AbstractProvider_instances);
        __privateAdd(this, _subs);
        __privateAdd(this, _plugins);
        // null=unpaused, true=paused+dropWhilePaused, false=paused
        __privateAdd(this, _pausedState);
        __privateAdd(this, _destroyed);
        __privateAdd(this, _networkPromise);
        __privateAdd(this, _anyNetwork);
        __privateAdd(this, _performCache);
        // The most recent block number if running an event or -1 if no "block" event
        __privateAdd(this, _lastBlockNumber);
        __privateAdd(this, _nextTimer);
        __privateAdd(this, _timers);
        __privateAdd(this, _disableCcipRead);
        __privateAdd(this, _options);
        __privateSet(this, _options, Object.assign({}, defaultOptions, options || {}));
        if (_network === "any") {
          __privateSet(this, _anyNetwork, true);
          __privateSet(this, _networkPromise, null);
        } else if (_network) {
          const network = network_js_1.Network.from(_network);
          __privateSet(this, _anyNetwork, false);
          __privateSet(this, _networkPromise, Promise.resolve(network));
          setTimeout(() => {
            this.emit("network", network, null);
          }, 0);
        } else {
          __privateSet(this, _anyNetwork, false);
          __privateSet(this, _networkPromise, null);
        }
        __privateSet(this, _lastBlockNumber, -1);
        __privateSet(this, _performCache, /* @__PURE__ */ new Map());
        __privateSet(this, _subs, /* @__PURE__ */ new Map());
        __privateSet(this, _plugins, /* @__PURE__ */ new Map());
        __privateSet(this, _pausedState, null);
        __privateSet(this, _destroyed, false);
        __privateSet(this, _nextTimer, 1);
        __privateSet(this, _timers, /* @__PURE__ */ new Map());
        __privateSet(this, _disableCcipRead, false);
      }
      get pollingInterval() {
        return __privateGet(this, _options).pollingInterval;
      }
      /**
       *  Returns ``this``, to allow an **AbstractProvider** to implement
       *  the [[ContractRunner]] interface.
       */
      get provider() {
        return this;
      }
      /**
       *  Returns all the registered plug-ins.
       */
      get plugins() {
        return Array.from(__privateGet(this, _plugins).values());
      }
      /**
       *  Attach a new plug-in.
       */
      attachPlugin(plugin) {
        if (__privateGet(this, _plugins).get(plugin.name)) {
          throw new Error(`cannot replace existing plugin: ${plugin.name} `);
        }
        __privateGet(this, _plugins).set(plugin.name, plugin.connect(this));
        return this;
      }
      /**
       *  Get a plugin by name.
       */
      getPlugin(name) {
        return __privateGet(this, _plugins).get(name) || null;
      }
      /**
       *  Prevent any CCIP-read operation, regardless of whether requested
       *  in a [[call]] using ``enableCcipRead``.
       */
      get disableCcipRead() {
        return __privateGet(this, _disableCcipRead);
      }
      set disableCcipRead(value) {
        __privateSet(this, _disableCcipRead, !!value);
      }
      /**
       *  Resolves to the data for executing the CCIP-read operations.
       */
      async ccipReadFetch(tx, calldata, urls) {
        if (this.disableCcipRead || urls.length === 0 || tx.to == null) {
          return null;
        }
        const sender = tx.to.toLowerCase();
        const data = calldata.toLowerCase();
        const errorMessages = [];
        for (let i = 0; i < urls.length; i++) {
          const url = urls[i];
          const href = url.replace("{sender}", sender).replace("{data}", data);
          const request = new index_js_6.FetchRequest(href);
          if (url.indexOf("{data}") === -1) {
            request.body = { data, sender };
          }
          this.emit("debug", { action: "sendCcipReadFetchRequest", request, index: i, urls });
          let errorMessage = "unknown error";
          let resp;
          try {
            resp = await request.send();
          } catch (error) {
            errorMessages.push(error.message);
            this.emit("debug", { action: "receiveCcipReadFetchError", request, result: { error } });
            continue;
          }
          try {
            const result = resp.bodyJson;
            if (result.data) {
              this.emit("debug", { action: "receiveCcipReadFetchResult", request, result });
              return result.data;
            }
            if (result.message) {
              errorMessage = result.message;
            }
            this.emit("debug", { action: "receiveCcipReadFetchError", request, result });
          } catch (error) {
          }
          (0, index_js_6.assert)(resp.statusCode < 400 || resp.statusCode >= 500, `response not found during CCIP fetch: ${errorMessage}`, "OFFCHAIN_FAULT", { reason: "404_MISSING_RESOURCE", transaction: tx, info: { url, errorMessage } });
          errorMessages.push(errorMessage);
        }
        (0, index_js_6.assert)(false, `error encountered during CCIP fetch: ${errorMessages.map((m) => JSON.stringify(m)).join(", ")}`, "OFFCHAIN_FAULT", {
          reason: "500_SERVER_ERROR",
          transaction: tx,
          info: { urls, errorMessages }
        });
      }
      /**
       *  Provides the opportunity for a sub-class to wrap a block before
       *  returning it, to add additional properties or an alternate
       *  sub-class of [[Block]].
       */
      _wrapBlock(value, network) {
        return new provider_js_1.Block((0, format_js_1.formatBlock)(value), this);
      }
      /**
       *  Provides the opportunity for a sub-class to wrap a log before
       *  returning it, to add additional properties or an alternate
       *  sub-class of [[Log]].
       */
      _wrapLog(value, network) {
        return new provider_js_1.Log((0, format_js_1.formatLog)(value), this);
      }
      /**
       *  Provides the opportunity for a sub-class to wrap a transaction
       *  receipt before returning it, to add additional properties or an
       *  alternate sub-class of [[TransactionReceipt]].
       */
      _wrapTransactionReceipt(value, network) {
        return new provider_js_1.TransactionReceipt((0, format_js_1.formatTransactionReceipt)(value), this);
      }
      /**
       *  Provides the opportunity for a sub-class to wrap a transaction
       *  response before returning it, to add additional properties or an
       *  alternate sub-class of [[TransactionResponse]].
       */
      _wrapTransactionResponse(tx, network) {
        return new provider_js_1.TransactionResponse((0, format_js_1.formatTransactionResponse)(tx), this);
      }
      /**
       *  Resolves to the Network, forcing a network detection using whatever
       *  technique the sub-class requires.
       *
       *  Sub-classes **must** override this.
       */
      _detectNetwork() {
        (0, index_js_6.assert)(false, "sub-classes must implement this", "UNSUPPORTED_OPERATION", {
          operation: "_detectNetwork"
        });
      }
      /**
       *  Sub-classes should use this to perform all built-in operations. All
       *  methods sanitizes and normalizes the values passed into this.
       *
       *  Sub-classes **must** override this.
       */
      async _perform(req) {
        (0, index_js_6.assert)(false, `unsupported method: ${req.method}`, "UNSUPPORTED_OPERATION", {
          operation: req.method,
          info: req
        });
      }
      // State
      async getBlockNumber() {
        const blockNumber = (0, index_js_6.getNumber)(await __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, { method: "getBlockNumber" }), "%response");
        if (__privateGet(this, _lastBlockNumber) >= 0) {
          __privateSet(this, _lastBlockNumber, blockNumber);
        }
        return blockNumber;
      }
      /**
       *  Returns or resolves to the address for %%address%%, resolving ENS
       *  names and [[Addressable]] objects and returning if already an
       *  address.
       */
      _getAddress(address) {
        return (0, index_js_1.resolveAddress)(address, this);
      }
      /**
       *  Returns or resolves to a valid block tag for %%blockTag%%, resolving
       *  negative values and returning if already a valid block tag.
       */
      _getBlockTag(blockTag) {
        if (blockTag == null) {
          return "latest";
        }
        switch (blockTag) {
          case "earliest":
            return "0x0";
          case "finalized":
          case "latest":
          case "pending":
          case "safe":
            return blockTag;
        }
        if ((0, index_js_6.isHexString)(blockTag)) {
          if ((0, index_js_6.isHexString)(blockTag, 32)) {
            return blockTag;
          }
          return (0, index_js_6.toQuantity)(blockTag);
        }
        if (typeof blockTag === "bigint") {
          blockTag = (0, index_js_6.getNumber)(blockTag, "blockTag");
        }
        if (typeof blockTag === "number") {
          if (blockTag >= 0) {
            return (0, index_js_6.toQuantity)(blockTag);
          }
          if (__privateGet(this, _lastBlockNumber) >= 0) {
            return (0, index_js_6.toQuantity)(__privateGet(this, _lastBlockNumber) + blockTag);
          }
          return this.getBlockNumber().then((b) => (0, index_js_6.toQuantity)(b + blockTag));
        }
        (0, index_js_6.assertArgument)(false, "invalid blockTag", "blockTag", blockTag);
      }
      /**
       *  Returns or resolves to a filter for %%filter%%, resolving any ENS
       *  names or [[Addressable]] object and returning if already a valid
       *  filter.
       */
      _getFilter(filter) {
        const topics = (filter.topics || []).map((t) => {
          if (t == null) {
            return null;
          }
          if (Array.isArray(t)) {
            return concisify(t.map((t2) => t2.toLowerCase()));
          }
          return t.toLowerCase();
        });
        const blockHash = "blockHash" in filter ? filter.blockHash : void 0;
        const resolve = (_address, fromBlock2, toBlock2) => {
          let address2 = void 0;
          switch (_address.length) {
            case 0:
              break;
            case 1:
              address2 = _address[0];
              break;
            default:
              _address.sort();
              address2 = _address;
          }
          if (blockHash) {
            if (fromBlock2 != null || toBlock2 != null) {
              throw new Error("invalid filter");
            }
          }
          const filter2 = {};
          if (address2) {
            filter2.address = address2;
          }
          if (topics.length) {
            filter2.topics = topics;
          }
          if (fromBlock2) {
            filter2.fromBlock = fromBlock2;
          }
          if (toBlock2) {
            filter2.toBlock = toBlock2;
          }
          if (blockHash) {
            filter2.blockHash = blockHash;
          }
          return filter2;
        };
        let address = [];
        if (filter.address) {
          if (Array.isArray(filter.address)) {
            for (const addr of filter.address) {
              address.push(this._getAddress(addr));
            }
          } else {
            address.push(this._getAddress(filter.address));
          }
        }
        let fromBlock = void 0;
        if ("fromBlock" in filter) {
          fromBlock = this._getBlockTag(filter.fromBlock);
        }
        let toBlock = void 0;
        if ("toBlock" in filter) {
          toBlock = this._getBlockTag(filter.toBlock);
        }
        if (address.filter((a) => typeof a !== "string").length || fromBlock != null && typeof fromBlock !== "string" || toBlock != null && typeof toBlock !== "string") {
          return Promise.all([Promise.all(address), fromBlock, toBlock]).then((result) => {
            return resolve(result[0], result[1], result[2]);
          });
        }
        return resolve(address, fromBlock, toBlock);
      }
      /**
       *  Returns or resolves to a transaction for %%request%%, resolving
       *  any ENS names or [[Addressable]] and returning if already a valid
       *  transaction.
       */
      _getTransactionRequest(_request) {
        const request = (0, provider_js_1.copyRequest)(_request);
        const promises = [];
        ["to", "from"].forEach((key) => {
          if (request[key] == null) {
            return;
          }
          const addr = (0, index_js_1.resolveAddress)(request[key], this);
          if (isPromise(addr)) {
            promises.push(async function() {
              request[key] = await addr;
            }());
          } else {
            request[key] = addr;
          }
        });
        if (request.blockTag != null) {
          const blockTag = this._getBlockTag(request.blockTag);
          if (isPromise(blockTag)) {
            promises.push(async function() {
              request.blockTag = await blockTag;
            }());
          } else {
            request.blockTag = blockTag;
          }
        }
        if (promises.length) {
          return async function() {
            await Promise.all(promises);
            return request;
          }();
        }
        return request;
      }
      async getNetwork() {
        if (__privateGet(this, _networkPromise) == null) {
          const detectNetwork = (async () => {
            try {
              const network = await this._detectNetwork();
              this.emit("network", network, null);
              return network;
            } catch (error) {
              if (__privateGet(this, _networkPromise) === detectNetwork) {
                __privateSet(this, _networkPromise, null);
              }
              throw error;
            }
          })();
          __privateSet(this, _networkPromise, detectNetwork);
          return (await detectNetwork).clone();
        }
        const networkPromise = __privateGet(this, _networkPromise);
        const [expected, actual] = await Promise.all([
          networkPromise,
          this._detectNetwork()
          // The actual connected network
        ]);
        if (expected.chainId !== actual.chainId) {
          if (__privateGet(this, _anyNetwork)) {
            this.emit("network", actual, expected);
            if (__privateGet(this, _networkPromise) === networkPromise) {
              __privateSet(this, _networkPromise, Promise.resolve(actual));
            }
          } else {
            (0, index_js_6.assert)(false, `network changed: ${expected.chainId} => ${actual.chainId} `, "NETWORK_ERROR", {
              event: "changed"
            });
          }
        }
        return expected.clone();
      }
      async getFeeData() {
        const network = await this.getNetwork();
        const getFeeDataFunc = async () => {
          const { _block, gasPrice, priorityFee } = await (0, index_js_6.resolveProperties)({
            _block: __privateMethod(this, _AbstractProvider_instances, getBlock_fn).call(this, "latest", false),
            gasPrice: (async () => {
              try {
                const value = await __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, { method: "getGasPrice" });
                return (0, index_js_6.getBigInt)(value, "%response");
              } catch (error) {
              }
              return null;
            })(),
            priorityFee: (async () => {
              try {
                const value = await __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, { method: "getPriorityFee" });
                return (0, index_js_6.getBigInt)(value, "%response");
              } catch (error) {
              }
              return null;
            })()
          });
          let maxFeePerGas = null;
          let maxPriorityFeePerGas = null;
          const block = this._wrapBlock(_block, network);
          if (block && block.baseFeePerGas) {
            maxPriorityFeePerGas = priorityFee != null ? priorityFee : BigInt("1000000000");
            maxFeePerGas = block.baseFeePerGas * BN_2 + maxPriorityFeePerGas;
          }
          return new provider_js_1.FeeData(gasPrice, maxFeePerGas, maxPriorityFeePerGas);
        };
        const plugin = network.getPlugin("org.ethers.plugins.network.FetchUrlFeeDataPlugin");
        if (plugin) {
          const req = new index_js_6.FetchRequest(plugin.url);
          const feeData = await plugin.processFunc(getFeeDataFunc, this, req);
          return new provider_js_1.FeeData(feeData.gasPrice, feeData.maxFeePerGas, feeData.maxPriorityFeePerGas);
        }
        return await getFeeDataFunc();
      }
      async estimateGas(_tx) {
        let tx = this._getTransactionRequest(_tx);
        if (isPromise(tx)) {
          tx = await tx;
        }
        return (0, index_js_6.getBigInt)(await __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, {
          method: "estimateGas",
          transaction: tx
        }), "%response");
      }
      async call(_tx) {
        const { tx, blockTag } = await (0, index_js_6.resolveProperties)({
          tx: this._getTransactionRequest(_tx),
          blockTag: this._getBlockTag(_tx.blockTag)
        });
        return await __privateMethod(this, _AbstractProvider_instances, checkNetwork_fn).call(this, __privateMethod(this, _AbstractProvider_instances, call_fn).call(this, tx, blockTag, _tx.enableCcipRead ? 0 : -1));
      }
      async getBalance(address, blockTag) {
        return (0, index_js_6.getBigInt)(await __privateMethod(this, _AbstractProvider_instances, getAccountValue_fn).call(this, { method: "getBalance" }, address, blockTag), "%response");
      }
      async getTransactionCount(address, blockTag) {
        return (0, index_js_6.getNumber)(await __privateMethod(this, _AbstractProvider_instances, getAccountValue_fn).call(this, { method: "getTransactionCount" }, address, blockTag), "%response");
      }
      async getCode(address, blockTag) {
        return (0, index_js_6.hexlify)(await __privateMethod(this, _AbstractProvider_instances, getAccountValue_fn).call(this, { method: "getCode" }, address, blockTag));
      }
      async getStorage(address, _position, blockTag) {
        const position = (0, index_js_6.getBigInt)(_position, "position");
        return (0, index_js_6.hexlify)(await __privateMethod(this, _AbstractProvider_instances, getAccountValue_fn).call(this, { method: "getStorage", position }, address, blockTag));
      }
      // Write
      async broadcastTransaction(signedTx) {
        const { blockNumber, hash, network } = await (0, index_js_6.resolveProperties)({
          blockNumber: this.getBlockNumber(),
          hash: this._perform({
            method: "broadcastTransaction",
            signedTransaction: signedTx
          }),
          network: this.getNetwork()
        });
        const tx = index_js_5.Transaction.from(signedTx);
        if (tx.hash !== hash) {
          throw new Error("@TODO: the returned hash did not match");
        }
        return this._wrapTransactionResponse(tx, network).replaceableTransaction(blockNumber);
      }
      // Queries
      async getBlock(block, prefetchTxs) {
        const { network, params } = await (0, index_js_6.resolveProperties)({
          network: this.getNetwork(),
          params: __privateMethod(this, _AbstractProvider_instances, getBlock_fn).call(this, block, !!prefetchTxs)
        });
        if (params == null) {
          return null;
        }
        return this._wrapBlock(params, network);
      }
      async getTransaction(hash) {
        const { network, params } = await (0, index_js_6.resolveProperties)({
          network: this.getNetwork(),
          params: __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, { method: "getTransaction", hash })
        });
        if (params == null) {
          return null;
        }
        return this._wrapTransactionResponse(params, network);
      }
      async getTransactionReceipt(hash) {
        const { network, params } = await (0, index_js_6.resolveProperties)({
          network: this.getNetwork(),
          params: __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, { method: "getTransactionReceipt", hash })
        });
        if (params == null) {
          return null;
        }
        if (params.gasPrice == null && params.effectiveGasPrice == null) {
          const tx = await __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, { method: "getTransaction", hash });
          if (tx == null) {
            throw new Error("report this; could not find tx or effectiveGasPrice");
          }
          params.effectiveGasPrice = tx.gasPrice;
        }
        return this._wrapTransactionReceipt(params, network);
      }
      async getTransactionResult(hash) {
        const { result } = await (0, index_js_6.resolveProperties)({
          network: this.getNetwork(),
          result: __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, { method: "getTransactionResult", hash })
        });
        if (result == null) {
          return null;
        }
        return (0, index_js_6.hexlify)(result);
      }
      // Bloom-filter Queries
      async getLogs(_filter) {
        let filter = this._getFilter(_filter);
        if (isPromise(filter)) {
          filter = await filter;
        }
        const { network, params } = await (0, index_js_6.resolveProperties)({
          network: this.getNetwork(),
          params: __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, { method: "getLogs", filter })
        });
        return params.map((p) => this._wrapLog(p, network));
      }
      // ENS
      _getProvider(chainId) {
        (0, index_js_6.assert)(false, "provider cannot connect to target network", "UNSUPPORTED_OPERATION", {
          operation: "_getProvider()"
        });
      }
      async getResolver(name) {
        return await ens_resolver_js_1.EnsResolver.fromName(this, name);
      }
      async getAvatar(name) {
        const resolver = await this.getResolver(name);
        if (resolver) {
          return await resolver.getAvatar();
        }
        return null;
      }
      async resolveName(name) {
        const resolver = await this.getResolver(name);
        if (resolver) {
          return await resolver.getAddress();
        }
        return null;
      }
      async lookupAddress(address) {
        address = (0, index_js_1.getAddress)(address);
        const node = (0, index_js_4.namehash)(address.substring(2).toLowerCase() + ".addr.reverse");
        try {
          const ensAddr = await ens_resolver_js_1.EnsResolver.getEnsAddress(this);
          const ensContract = new index_js_3.Contract(ensAddr, [
            "function resolver(bytes32) view returns (address)"
          ], this);
          const resolver = await ensContract.resolver(node);
          if (resolver == null || resolver === index_js_2.ZeroAddress) {
            return null;
          }
          const resolverContract = new index_js_3.Contract(resolver, [
            "function name(bytes32) view returns (string)"
          ], this);
          const name = await resolverContract.name(node);
          const check = await this.resolveName(name);
          if (check !== address) {
            return null;
          }
          return name;
        } catch (error) {
          if ((0, index_js_6.isError)(error, "BAD_DATA") && error.value === "0x") {
            return null;
          }
          if ((0, index_js_6.isError)(error, "CALL_EXCEPTION")) {
            return null;
          }
          throw error;
        }
        return null;
      }
      async waitForTransaction(hash, _confirms, timeout) {
        const confirms = _confirms != null ? _confirms : 1;
        if (confirms === 0) {
          return this.getTransactionReceipt(hash);
        }
        return new Promise(async (resolve, reject) => {
          let timer = null;
          const listener = async (blockNumber) => {
            try {
              const receipt = await this.getTransactionReceipt(hash);
              if (receipt != null) {
                if (blockNumber - receipt.blockNumber + 1 >= confirms) {
                  resolve(receipt);
                  if (timer) {
                    clearTimeout(timer);
                    timer = null;
                  }
                  return;
                }
              }
            } catch (error) {
              console.log("EEE", error);
            }
            this.once("block", listener);
          };
          if (timeout != null) {
            timer = setTimeout(() => {
              if (timer == null) {
                return;
              }
              timer = null;
              this.off("block", listener);
              reject((0, index_js_6.makeError)("timeout", "TIMEOUT", { reason: "timeout" }));
            }, timeout);
          }
          listener(await this.getBlockNumber());
        });
      }
      async waitForBlock(blockTag) {
        (0, index_js_6.assert)(false, "not implemented yet", "NOT_IMPLEMENTED", {
          operation: "waitForBlock"
        });
      }
      /**
       *  Clear a timer created using the [[_setTimeout]] method.
       */
      _clearTimeout(timerId) {
        const timer = __privateGet(this, _timers).get(timerId);
        if (!timer) {
          return;
        }
        if (timer.timer) {
          clearTimeout(timer.timer);
        }
        __privateGet(this, _timers).delete(timerId);
      }
      /**
       *  Create a timer that will execute %%func%% after at least %%timeout%%
       *  (in ms). If %%timeout%% is unspecified, then %%func%% will execute
       *  in the next event loop.
       *
       *  [Pausing](AbstractProvider-paused) the provider will pause any
       *  associated timers.
       */
      _setTimeout(_func, timeout) {
        if (timeout == null) {
          timeout = 0;
        }
        const timerId = __privateWrapper(this, _nextTimer)._++;
        const func = () => {
          __privateGet(this, _timers).delete(timerId);
          _func();
        };
        if (this.paused) {
          __privateGet(this, _timers).set(timerId, { timer: null, func, time: timeout });
        } else {
          const timer = setTimeout(func, timeout);
          __privateGet(this, _timers).set(timerId, { timer, func, time: getTime() });
        }
        return timerId;
      }
      /**
       *  Perform %%func%% on each subscriber.
       */
      _forEachSubscriber(func) {
        for (const sub of __privateGet(this, _subs).values()) {
          func(sub.subscriber);
        }
      }
      /**
       *  Sub-classes may override this to customize subscription
       *  implementations.
       */
      _getSubscriber(sub) {
        switch (sub.type) {
          case "debug":
          case "error":
          case "network":
            return new UnmanagedSubscriber(sub.type);
          case "block": {
            const subscriber = new subscriber_polling_js_1.PollingBlockSubscriber(this);
            subscriber.pollingInterval = this.pollingInterval;
            return subscriber;
          }
          case "safe":
          case "finalized":
            return new subscriber_polling_js_1.PollingBlockTagSubscriber(this, sub.type);
          case "event":
            return new subscriber_polling_js_1.PollingEventSubscriber(this, sub.filter);
          case "transaction":
            return new subscriber_polling_js_1.PollingTransactionSubscriber(this, sub.hash);
          case "orphan":
            return new subscriber_polling_js_1.PollingOrphanSubscriber(this, sub.filter);
        }
        throw new Error(`unsupported event: ${sub.type}`);
      }
      /**
       *  If a [[Subscriber]] fails and needs to replace itself, this
       *  method may be used.
       *
       *  For example, this is used for providers when using the
       *  ``eth_getFilterChanges`` method, which can return null if state
       *  filters are not supported by the backend, allowing the Subscriber
       *  to swap in a [[PollingEventSubscriber]].
       */
      _recoverSubscriber(oldSub, newSub) {
        for (const sub of __privateGet(this, _subs).values()) {
          if (sub.subscriber === oldSub) {
            if (sub.started) {
              sub.subscriber.stop();
            }
            sub.subscriber = newSub;
            if (sub.started) {
              newSub.start();
            }
            if (__privateGet(this, _pausedState) != null) {
              newSub.pause(__privateGet(this, _pausedState));
            }
            break;
          }
        }
      }
      async on(event, listener) {
        const sub = await __privateMethod(this, _AbstractProvider_instances, getSub_fn).call(this, event);
        sub.listeners.push({ listener, once: false });
        if (!sub.started) {
          sub.subscriber.start();
          sub.started = true;
          if (__privateGet(this, _pausedState) != null) {
            sub.subscriber.pause(__privateGet(this, _pausedState));
          }
        }
        return this;
      }
      async once(event, listener) {
        const sub = await __privateMethod(this, _AbstractProvider_instances, getSub_fn).call(this, event);
        sub.listeners.push({ listener, once: true });
        if (!sub.started) {
          sub.subscriber.start();
          sub.started = true;
          if (__privateGet(this, _pausedState) != null) {
            sub.subscriber.pause(__privateGet(this, _pausedState));
          }
        }
        return this;
      }
      async emit(event, ...args) {
        const sub = await __privateMethod(this, _AbstractProvider_instances, hasSub_fn).call(this, event, args);
        if (!sub || sub.listeners.length === 0) {
          return false;
        }
        ;
        const count = sub.listeners.length;
        sub.listeners = sub.listeners.filter(({ listener, once }) => {
          const payload = new index_js_6.EventPayload(this, once ? null : listener, event);
          try {
            listener.call(this, ...args, payload);
          } catch (error) {
          }
          return !once;
        });
        if (sub.listeners.length === 0) {
          if (sub.started) {
            sub.subscriber.stop();
          }
          __privateGet(this, _subs).delete(sub.tag);
        }
        return count > 0;
      }
      async listenerCount(event) {
        if (event) {
          const sub = await __privateMethod(this, _AbstractProvider_instances, hasSub_fn).call(this, event);
          if (!sub) {
            return 0;
          }
          return sub.listeners.length;
        }
        let total = 0;
        for (const { listeners } of __privateGet(this, _subs).values()) {
          total += listeners.length;
        }
        return total;
      }
      async listeners(event) {
        if (event) {
          const sub = await __privateMethod(this, _AbstractProvider_instances, hasSub_fn).call(this, event);
          if (!sub) {
            return [];
          }
          return sub.listeners.map(({ listener }) => listener);
        }
        let result = [];
        for (const { listeners } of __privateGet(this, _subs).values()) {
          result = result.concat(listeners.map(({ listener }) => listener));
        }
        return result;
      }
      async off(event, listener) {
        const sub = await __privateMethod(this, _AbstractProvider_instances, hasSub_fn).call(this, event);
        if (!sub) {
          return this;
        }
        if (listener) {
          const index = sub.listeners.map(({ listener: listener2 }) => listener2).indexOf(listener);
          if (index >= 0) {
            sub.listeners.splice(index, 1);
          }
        }
        if (!listener || sub.listeners.length === 0) {
          if (sub.started) {
            sub.subscriber.stop();
          }
          __privateGet(this, _subs).delete(sub.tag);
        }
        return this;
      }
      async removeAllListeners(event) {
        if (event) {
          const { tag, started, subscriber } = await __privateMethod(this, _AbstractProvider_instances, getSub_fn).call(this, event);
          if (started) {
            subscriber.stop();
          }
          __privateGet(this, _subs).delete(tag);
        } else {
          for (const [tag, { started, subscriber }] of __privateGet(this, _subs)) {
            if (started) {
              subscriber.stop();
            }
            __privateGet(this, _subs).delete(tag);
          }
        }
        return this;
      }
      // Alias for "on"
      async addListener(event, listener) {
        return await this.on(event, listener);
      }
      // Alias for "off"
      async removeListener(event, listener) {
        return this.off(event, listener);
      }
      /**
       *  If this provider has been destroyed using the [[destroy]] method.
       *
       *  Once destroyed, all resources are reclaimed, internal event loops
       *  and timers are cleaned up and no further requests may be sent to
       *  the provider.
       */
      get destroyed() {
        return __privateGet(this, _destroyed);
      }
      /**
       *  Sub-classes may use this to shutdown any sockets or release their
       *  resources and reject any pending requests.
       *
       *  Sub-classes **must** call ``super.destroy()``.
       */
      destroy() {
        this.removeAllListeners();
        for (const timerId of __privateGet(this, _timers).keys()) {
          this._clearTimeout(timerId);
        }
        __privateSet(this, _destroyed, true);
      }
      /**
       *  Whether the provider is currently paused.
       *
       *  A paused provider will not emit any events, and generally should
       *  not make any requests to the network, but that is up to sub-classes
       *  to manage.
       *
       *  Setting ``paused = true`` is identical to calling ``.pause(false)``,
       *  which will buffer any events that occur while paused until the
       *  provider is unpaused.
       */
      get paused() {
        return __privateGet(this, _pausedState) != null;
      }
      set paused(pause) {
        if (!!pause === this.paused) {
          return;
        }
        if (this.paused) {
          this.resume();
        } else {
          this.pause(false);
        }
      }
      /**
       *  Pause the provider. If %%dropWhilePaused%%, any events that occur
       *  while paused are dropped, otherwise all events will be emitted once
       *  the provider is unpaused.
       */
      pause(dropWhilePaused) {
        __privateSet(this, _lastBlockNumber, -1);
        if (__privateGet(this, _pausedState) != null) {
          if (__privateGet(this, _pausedState) == !!dropWhilePaused) {
            return;
          }
          (0, index_js_6.assert)(false, "cannot change pause type; resume first", "UNSUPPORTED_OPERATION", {
            operation: "pause"
          });
        }
        this._forEachSubscriber((s) => s.pause(dropWhilePaused));
        __privateSet(this, _pausedState, !!dropWhilePaused);
        for (const timer of __privateGet(this, _timers).values()) {
          if (timer.timer) {
            clearTimeout(timer.timer);
          }
          timer.time = getTime() - timer.time;
        }
      }
      /**
       *  Resume the provider.
       */
      resume() {
        if (__privateGet(this, _pausedState) == null) {
          return;
        }
        this._forEachSubscriber((s) => s.resume());
        __privateSet(this, _pausedState, null);
        for (const timer of __privateGet(this, _timers).values()) {
          let timeout = timer.time;
          if (timeout < 0) {
            timeout = 0;
          }
          timer.time = getTime();
          setTimeout(timer.func, timeout);
        }
      }
    };
    _subs = new WeakMap();
    _plugins = new WeakMap();
    _pausedState = new WeakMap();
    _destroyed = new WeakMap();
    _networkPromise = new WeakMap();
    _anyNetwork = new WeakMap();
    _performCache = new WeakMap();
    _lastBlockNumber = new WeakMap();
    _nextTimer = new WeakMap();
    _timers = new WeakMap();
    _disableCcipRead = new WeakMap();
    _options = new WeakMap();
    _AbstractProvider_instances = new WeakSet();
    perform_fn = async function(req) {
      const timeout = __privateGet(this, _options).cacheTimeout;
      if (timeout < 0) {
        return await this._perform(req);
      }
      const tag = getTag(req.method, req);
      let perform = __privateGet(this, _performCache).get(tag);
      if (!perform) {
        perform = this._perform(req);
        __privateGet(this, _performCache).set(tag, perform);
        setTimeout(() => {
          if (__privateGet(this, _performCache).get(tag) === perform) {
            __privateGet(this, _performCache).delete(tag);
          }
        }, timeout);
      }
      return await perform;
    };
    call_fn = async function(tx, blockTag, attempt) {
      (0, index_js_6.assert)(attempt < MAX_CCIP_REDIRECTS, "CCIP read exceeded maximum redirections", "OFFCHAIN_FAULT", {
        reason: "TOO_MANY_REDIRECTS",
        transaction: Object.assign({}, tx, { blockTag, enableCcipRead: true })
      });
      const transaction = (0, provider_js_1.copyRequest)(tx);
      try {
        return (0, index_js_6.hexlify)(await this._perform({ method: "call", transaction, blockTag }));
      } catch (error) {
        if (!this.disableCcipRead && (0, index_js_6.isCallException)(error) && error.data && attempt >= 0 && blockTag === "latest" && transaction.to != null && (0, index_js_6.dataSlice)(error.data, 0, 4) === "0x556f1830") {
          const data = error.data;
          const txSender = await (0, index_js_1.resolveAddress)(transaction.to, this);
          let ccipArgs;
          try {
            ccipArgs = parseOffchainLookup((0, index_js_6.dataSlice)(error.data, 4));
          } catch (error2) {
            (0, index_js_6.assert)(false, error2.message, "OFFCHAIN_FAULT", {
              reason: "BAD_DATA",
              transaction,
              info: { data }
            });
          }
          (0, index_js_6.assert)(ccipArgs.sender.toLowerCase() === txSender.toLowerCase(), "CCIP Read sender mismatch", "CALL_EXCEPTION", {
            action: "call",
            data,
            reason: "OffchainLookup",
            transaction,
            invocation: null,
            revert: {
              signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
              name: "OffchainLookup",
              args: ccipArgs.errorArgs
            }
          });
          const ccipResult = await this.ccipReadFetch(transaction, ccipArgs.calldata, ccipArgs.urls);
          (0, index_js_6.assert)(ccipResult != null, "CCIP Read failed to fetch data", "OFFCHAIN_FAULT", {
            reason: "FETCH_FAILED",
            transaction,
            info: { data: error.data, errorArgs: ccipArgs.errorArgs }
          });
          const tx2 = {
            to: txSender,
            data: (0, index_js_6.concat)([ccipArgs.selector, encodeBytes([ccipResult, ccipArgs.extraData])])
          };
          this.emit("debug", { action: "sendCcipReadCall", transaction: tx2 });
          try {
            const result = await __privateMethod(this, _AbstractProvider_instances, call_fn).call(this, tx2, blockTag, attempt + 1);
            this.emit("debug", { action: "receiveCcipReadCallResult", transaction: Object.assign({}, tx2), result });
            return result;
          } catch (error2) {
            this.emit("debug", { action: "receiveCcipReadCallError", transaction: Object.assign({}, tx2), error: error2 });
            throw error2;
          }
        }
        throw error;
      }
    };
    checkNetwork_fn = async function(promise) {
      const { value } = await (0, index_js_6.resolveProperties)({
        network: this.getNetwork(),
        value: promise
      });
      return value;
    };
    getAccountValue_fn = async function(request, _address, _blockTag) {
      let address = this._getAddress(_address);
      let blockTag = this._getBlockTag(_blockTag);
      if (typeof address !== "string" || typeof blockTag !== "string") {
        [address, blockTag] = await Promise.all([address, blockTag]);
      }
      return await __privateMethod(this, _AbstractProvider_instances, checkNetwork_fn).call(this, __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, Object.assign(request, { address, blockTag })));
    };
    getBlock_fn = async function(block, includeTransactions) {
      if ((0, index_js_6.isHexString)(block, 32)) {
        return await __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, {
          method: "getBlock",
          blockHash: block,
          includeTransactions
        });
      }
      let blockTag = this._getBlockTag(block);
      if (typeof blockTag !== "string") {
        blockTag = await blockTag;
      }
      return await __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, {
        method: "getBlock",
        blockTag,
        includeTransactions
      });
    };
    hasSub_fn = async function(event, emitArgs) {
      let sub = await getSubscription(event, this);
      if (sub.type === "event" && emitArgs && emitArgs.length > 0 && emitArgs[0].removed === true) {
        sub = await getSubscription({ orphan: "drop-log", log: emitArgs[0] }, this);
      }
      return __privateGet(this, _subs).get(sub.tag) || null;
    };
    getSub_fn = async function(event) {
      const subscription = await getSubscription(event, this);
      const tag = subscription.tag;
      let sub = __privateGet(this, _subs).get(tag);
      if (!sub) {
        const subscriber = this._getSubscriber(subscription);
        const addressableMap = /* @__PURE__ */ new WeakMap();
        const nameMap = /* @__PURE__ */ new Map();
        sub = { subscriber, tag, addressableMap, nameMap, started: false, listeners: [] };
        __privateGet(this, _subs).set(tag, sub);
      }
      return sub;
    };
    exports2.AbstractProvider = AbstractProvider;
    function _parseString(result, start) {
      try {
        const bytes = _parseBytes(result, start);
        if (bytes) {
          return (0, index_js_6.toUtf8String)(bytes);
        }
      } catch (error) {
      }
      return null;
    }
    function _parseBytes(result, start) {
      if (result === "0x") {
        return null;
      }
      try {
        const offset2 = (0, index_js_6.getNumber)((0, index_js_6.dataSlice)(result, start, start + 32));
        const length = (0, index_js_6.getNumber)((0, index_js_6.dataSlice)(result, offset2, offset2 + 32));
        return (0, index_js_6.dataSlice)(result, offset2 + 32, offset2 + 32 + length);
      } catch (error) {
      }
      return null;
    }
    function numPad(value) {
      const result = (0, index_js_6.toBeArray)(value);
      if (result.length > 32) {
        throw new Error("internal; should not happen");
      }
      const padded = new Uint8Array(32);
      padded.set(result, 32 - result.length);
      return padded;
    }
    function bytesPad(value) {
      if (value.length % 32 === 0) {
        return value;
      }
      const result = new Uint8Array(Math.ceil(value.length / 32) * 32);
      result.set(value);
      return result;
    }
    var empty = new Uint8Array([]);
    function encodeBytes(datas) {
      const result = [];
      let byteCount = 0;
      for (let i = 0; i < datas.length; i++) {
        result.push(empty);
        byteCount += 32;
      }
      for (let i = 0; i < datas.length; i++) {
        const data = (0, index_js_6.getBytes)(datas[i]);
        result[i] = numPad(byteCount);
        result.push(numPad(data.length));
        result.push(bytesPad(data));
        byteCount += 32 + Math.ceil(data.length / 32) * 32;
      }
      return (0, index_js_6.concat)(result);
    }
    var zeros = "0x0000000000000000000000000000000000000000000000000000000000000000";
    function parseOffchainLookup(data) {
      const result = {
        sender: "",
        urls: [],
        calldata: "",
        selector: "",
        extraData: "",
        errorArgs: []
      };
      (0, index_js_6.assert)((0, index_js_6.dataLength)(data) >= 5 * 32, "insufficient OffchainLookup data", "OFFCHAIN_FAULT", {
        reason: "insufficient OffchainLookup data"
      });
      const sender = (0, index_js_6.dataSlice)(data, 0, 32);
      (0, index_js_6.assert)((0, index_js_6.dataSlice)(sender, 0, 12) === (0, index_js_6.dataSlice)(zeros, 0, 12), "corrupt OffchainLookup sender", "OFFCHAIN_FAULT", {
        reason: "corrupt OffchainLookup sender"
      });
      result.sender = (0, index_js_6.dataSlice)(sender, 12);
      try {
        const urls = [];
        const urlsOffset = (0, index_js_6.getNumber)((0, index_js_6.dataSlice)(data, 32, 64));
        const urlsLength = (0, index_js_6.getNumber)((0, index_js_6.dataSlice)(data, urlsOffset, urlsOffset + 32));
        const urlsData = (0, index_js_6.dataSlice)(data, urlsOffset + 32);
        for (let u = 0; u < urlsLength; u++) {
          const url = _parseString(urlsData, u * 32);
          if (url == null) {
            throw new Error("abort");
          }
          urls.push(url);
        }
        result.urls = urls;
      } catch (error) {
        (0, index_js_6.assert)(false, "corrupt OffchainLookup urls", "OFFCHAIN_FAULT", {
          reason: "corrupt OffchainLookup urls"
        });
      }
      try {
        const calldata = _parseBytes(data, 64);
        if (calldata == null) {
          throw new Error("abort");
        }
        result.calldata = calldata;
      } catch (error) {
        (0, index_js_6.assert)(false, "corrupt OffchainLookup calldata", "OFFCHAIN_FAULT", {
          reason: "corrupt OffchainLookup calldata"
        });
      }
      (0, index_js_6.assert)((0, index_js_6.dataSlice)(data, 100, 128) === (0, index_js_6.dataSlice)(zeros, 0, 28), "corrupt OffchainLookup callbaackSelector", "OFFCHAIN_FAULT", {
        reason: "corrupt OffchainLookup callbaackSelector"
      });
      result.selector = (0, index_js_6.dataSlice)(data, 96, 100);
      try {
        const extraData = _parseBytes(data, 128);
        if (extraData == null) {
          throw new Error("abort");
        }
        result.extraData = extraData;
      } catch (error) {
        (0, index_js_6.assert)(false, "corrupt OffchainLookup extraData", "OFFCHAIN_FAULT", {
          reason: "corrupt OffchainLookup extraData"
        });
      }
      result.errorArgs = "sender,urls,calldata,selector,extraData".split(/,/).map((k) => result[k]);
      return result;
    }
  }
});

// node_modules/ethers/lib.commonjs/providers/abstract-signer.js
var require_abstract_signer = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/abstract-signer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.VoidSigner = exports2.AbstractSigner = void 0;
    var index_js_1 = require_address3();
    var index_js_2 = require_transaction2();
    var index_js_3 = require_utils11();
    var provider_js_1 = require_provider();
    function checkProvider(signer, operation) {
      if (signer.provider) {
        return signer.provider;
      }
      (0, index_js_3.assert)(false, "missing provider", "UNSUPPORTED_OPERATION", { operation });
    }
    async function populate(signer, tx) {
      let pop = (0, provider_js_1.copyRequest)(tx);
      if (pop.to != null) {
        pop.to = (0, index_js_1.resolveAddress)(pop.to, signer);
      }
      if (pop.from != null) {
        const from = pop.from;
        pop.from = Promise.all([
          signer.getAddress(),
          (0, index_js_1.resolveAddress)(from, signer)
        ]).then(([address, from2]) => {
          (0, index_js_3.assertArgument)(address.toLowerCase() === from2.toLowerCase(), "transaction from mismatch", "tx.from", from2);
          return address;
        });
      } else {
        pop.from = signer.getAddress();
      }
      return await (0, index_js_3.resolveProperties)(pop);
    }
    var AbstractSigner = class {
      /**
       *  Creates a new Signer connected to %%provider%%.
       */
      constructor(provider) {
        /**
         *  The provider this signer is connected to.
         */
        __publicField(this, "provider");
        (0, index_js_3.defineProperties)(this, { provider: provider || null });
      }
      async getNonce(blockTag) {
        return checkProvider(this, "getTransactionCount").getTransactionCount(await this.getAddress(), blockTag);
      }
      async populateCall(tx) {
        const pop = await populate(this, tx);
        return pop;
      }
      async populateTransaction(tx) {
        const provider = checkProvider(this, "populateTransaction");
        const pop = await populate(this, tx);
        if (pop.nonce == null) {
          pop.nonce = await this.getNonce("pending");
        }
        if (pop.gasLimit == null) {
          pop.gasLimit = await this.estimateGas(pop);
        }
        const network = await this.provider.getNetwork();
        if (pop.chainId != null) {
          const chainId = (0, index_js_3.getBigInt)(pop.chainId);
          (0, index_js_3.assertArgument)(chainId === network.chainId, "transaction chainId mismatch", "tx.chainId", tx.chainId);
        } else {
          pop.chainId = network.chainId;
        }
        const hasEip1559 = pop.maxFeePerGas != null || pop.maxPriorityFeePerGas != null;
        if (pop.gasPrice != null && (pop.type === 2 || hasEip1559)) {
          (0, index_js_3.assertArgument)(false, "eip-1559 transaction do not support gasPrice", "tx", tx);
        } else if ((pop.type === 0 || pop.type === 1) && hasEip1559) {
          (0, index_js_3.assertArgument)(false, "pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "tx", tx);
        }
        if ((pop.type === 2 || pop.type == null) && (pop.maxFeePerGas != null && pop.maxPriorityFeePerGas != null)) {
          pop.type = 2;
        } else if (pop.type === 0 || pop.type === 1) {
          const feeData = await provider.getFeeData();
          (0, index_js_3.assert)(feeData.gasPrice != null, "network does not support gasPrice", "UNSUPPORTED_OPERATION", {
            operation: "getGasPrice"
          });
          if (pop.gasPrice == null) {
            pop.gasPrice = feeData.gasPrice;
          }
        } else {
          const feeData = await provider.getFeeData();
          if (pop.type == null) {
            if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {
              pop.type = 2;
              if (pop.gasPrice != null) {
                const gasPrice = pop.gasPrice;
                delete pop.gasPrice;
                pop.maxFeePerGas = gasPrice;
                pop.maxPriorityFeePerGas = gasPrice;
              } else {
                if (pop.maxFeePerGas == null) {
                  pop.maxFeePerGas = feeData.maxFeePerGas;
                }
                if (pop.maxPriorityFeePerGas == null) {
                  pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
                }
              }
            } else if (feeData.gasPrice != null) {
              (0, index_js_3.assert)(!hasEip1559, "network does not support EIP-1559", "UNSUPPORTED_OPERATION", {
                operation: "populateTransaction"
              });
              if (pop.gasPrice == null) {
                pop.gasPrice = feeData.gasPrice;
              }
              pop.type = 0;
            } else {
              (0, index_js_3.assert)(false, "failed to get consistent fee data", "UNSUPPORTED_OPERATION", {
                operation: "signer.getFeeData"
              });
            }
          } else if (pop.type === 2 || pop.type === 3) {
            if (pop.maxFeePerGas == null) {
              pop.maxFeePerGas = feeData.maxFeePerGas;
            }
            if (pop.maxPriorityFeePerGas == null) {
              pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
            }
          }
        }
        return await (0, index_js_3.resolveProperties)(pop);
      }
      async estimateGas(tx) {
        return checkProvider(this, "estimateGas").estimateGas(await this.populateCall(tx));
      }
      async call(tx) {
        return checkProvider(this, "call").call(await this.populateCall(tx));
      }
      async resolveName(name) {
        const provider = checkProvider(this, "resolveName");
        return await provider.resolveName(name);
      }
      async sendTransaction(tx) {
        const provider = checkProvider(this, "sendTransaction");
        const pop = await this.populateTransaction(tx);
        delete pop.from;
        const txObj = index_js_2.Transaction.from(pop);
        return await provider.broadcastTransaction(await this.signTransaction(txObj));
      }
    };
    exports2.AbstractSigner = AbstractSigner;
    var _VoidSigner_instances, throwUnsupported_fn;
    var _VoidSigner = class _VoidSigner extends AbstractSigner {
      /**
       *  Creates a new **VoidSigner** with %%address%% attached to
       *  %%provider%%.
       */
      constructor(address, provider) {
        super(provider);
        __privateAdd(this, _VoidSigner_instances);
        /**
         *  The signer address.
         */
        __publicField(this, "address");
        (0, index_js_3.defineProperties)(this, { address });
      }
      async getAddress() {
        return this.address;
      }
      connect(provider) {
        return new _VoidSigner(this.address, provider);
      }
      async signTransaction(tx) {
        __privateMethod(this, _VoidSigner_instances, throwUnsupported_fn).call(this, "transactions", "signTransaction");
      }
      async signMessage(message) {
        __privateMethod(this, _VoidSigner_instances, throwUnsupported_fn).call(this, "messages", "signMessage");
      }
      async signTypedData(domain, types, value) {
        __privateMethod(this, _VoidSigner_instances, throwUnsupported_fn).call(this, "typed-data", "signTypedData");
      }
    };
    _VoidSigner_instances = new WeakSet();
    throwUnsupported_fn = function(suffix, operation) {
      (0, index_js_3.assert)(false, `VoidSigner cannot sign ${suffix}`, "UNSUPPORTED_OPERATION", { operation });
    };
    var VoidSigner = _VoidSigner;
    exports2.VoidSigner = VoidSigner;
  }
});

// node_modules/ethers/lib.commonjs/providers/community.js
var require_community = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/community.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.showThrottleMessage = void 0;
    var shown = /* @__PURE__ */ new Set();
    function showThrottleMessage(service) {
      if (shown.has(service)) {
        return;
      }
      shown.add(service);
      console.log("========= NOTICE =========");
      console.log(`Request-Rate Exceeded for ${service} (this message will not be repeated)`);
      console.log("");
      console.log("The default API keys for each service are provided as a highly-throttled,");
      console.log("community resource for low-traffic projects and early prototyping.");
      console.log("");
      console.log("While your application will continue to function, we highly recommended");
      console.log("signing up for your own API keys to improve performance, increase your");
      console.log("request rate/limit and enable other perks, such as metrics and advanced APIs.");
      console.log("");
      console.log("For more details: https://docs.ethers.org/api-keys/");
      console.log("==========================");
    }
    exports2.showThrottleMessage = showThrottleMessage;
  }
});

// node_modules/ethers/lib.commonjs/providers/subscriber-filterid.js
var require_subscriber_filterid = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/subscriber-filterid.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FilterIdPendingSubscriber = exports2.FilterIdEventSubscriber = exports2.FilterIdSubscriber = void 0;
    var index_js_1 = require_utils11();
    var subscriber_polling_js_1 = require_subscriber_polling();
    function copy(obj) {
      return JSON.parse(JSON.stringify(obj));
    }
    var _provider, _filterIdPromise, _poller, _running, _network, _hault, _FilterIdSubscriber_instances, poll_fn, teardown_fn;
    var FilterIdSubscriber = class {
      /**
       *  Creates a new **FilterIdSubscriber** which will used [[_subscribe]]
       *  and [[_emitResults]] to setup the subscription and provide the event
       *  to the %%provider%%.
       */
      constructor(provider) {
        __privateAdd(this, _FilterIdSubscriber_instances);
        __privateAdd(this, _provider);
        __privateAdd(this, _filterIdPromise);
        __privateAdd(this, _poller);
        __privateAdd(this, _running);
        __privateAdd(this, _network);
        __privateAdd(this, _hault);
        __privateSet(this, _provider, provider);
        __privateSet(this, _filterIdPromise, null);
        __privateSet(this, _poller, __privateMethod(this, _FilterIdSubscriber_instances, poll_fn).bind(this));
        __privateSet(this, _running, false);
        __privateSet(this, _network, null);
        __privateSet(this, _hault, false);
      }
      /**
       *  Sub-classes **must** override this to begin the subscription.
       */
      _subscribe(provider) {
        throw new Error("subclasses must override this");
      }
      /**
       *  Sub-classes **must** override this handle the events.
       */
      _emitResults(provider, result) {
        throw new Error("subclasses must override this");
      }
      /**
       *  Sub-classes **must** override this handle recovery on errors.
       */
      _recover(provider) {
        throw new Error("subclasses must override this");
      }
      start() {
        if (__privateGet(this, _running)) {
          return;
        }
        __privateSet(this, _running, true);
        __privateMethod(this, _FilterIdSubscriber_instances, poll_fn).call(this, -2);
      }
      stop() {
        if (!__privateGet(this, _running)) {
          return;
        }
        __privateSet(this, _running, false);
        __privateSet(this, _hault, true);
        __privateMethod(this, _FilterIdSubscriber_instances, teardown_fn).call(this);
        __privateGet(this, _provider).off("block", __privateGet(this, _poller));
      }
      pause(dropWhilePaused) {
        if (dropWhilePaused) {
          __privateMethod(this, _FilterIdSubscriber_instances, teardown_fn).call(this);
        }
        __privateGet(this, _provider).off("block", __privateGet(this, _poller));
      }
      resume() {
        this.start();
      }
    };
    _provider = new WeakMap();
    _filterIdPromise = new WeakMap();
    _poller = new WeakMap();
    _running = new WeakMap();
    _network = new WeakMap();
    _hault = new WeakMap();
    _FilterIdSubscriber_instances = new WeakSet();
    poll_fn = async function(blockNumber) {
      try {
        if (__privateGet(this, _filterIdPromise) == null) {
          __privateSet(this, _filterIdPromise, this._subscribe(__privateGet(this, _provider)));
        }
        let filterId = null;
        try {
          filterId = await __privateGet(this, _filterIdPromise);
        } catch (error) {
          if (!(0, index_js_1.isError)(error, "UNSUPPORTED_OPERATION") || error.operation !== "eth_newFilter") {
            throw error;
          }
        }
        if (filterId == null) {
          __privateSet(this, _filterIdPromise, null);
          __privateGet(this, _provider)._recoverSubscriber(this, this._recover(__privateGet(this, _provider)));
          return;
        }
        const network = await __privateGet(this, _provider).getNetwork();
        if (!__privateGet(this, _network)) {
          __privateSet(this, _network, network);
        }
        if (__privateGet(this, _network).chainId !== network.chainId) {
          throw new Error("chaid changed");
        }
        if (__privateGet(this, _hault)) {
          return;
        }
        const result = await __privateGet(this, _provider).send("eth_getFilterChanges", [filterId]);
        await this._emitResults(__privateGet(this, _provider), result);
      } catch (error) {
        console.log("@TODO", error);
      }
      __privateGet(this, _provider).once("block", __privateGet(this, _poller));
    };
    teardown_fn = function() {
      const filterIdPromise = __privateGet(this, _filterIdPromise);
      if (filterIdPromise) {
        __privateSet(this, _filterIdPromise, null);
        filterIdPromise.then((filterId) => {
          if (__privateGet(this, _provider).destroyed) {
            return;
          }
          __privateGet(this, _provider).send("eth_uninstallFilter", [filterId]);
        });
      }
    };
    exports2.FilterIdSubscriber = FilterIdSubscriber;
    var _event;
    var FilterIdEventSubscriber = class extends FilterIdSubscriber {
      /**
       *  Creates a new **FilterIdEventSubscriber** attached to %%provider%%
       *  listening for %%filter%%.
       */
      constructor(provider, filter) {
        super(provider);
        __privateAdd(this, _event);
        __privateSet(this, _event, copy(filter));
      }
      _recover(provider) {
        return new subscriber_polling_js_1.PollingEventSubscriber(provider, __privateGet(this, _event));
      }
      async _subscribe(provider) {
        const filterId = await provider.send("eth_newFilter", [__privateGet(this, _event)]);
        return filterId;
      }
      async _emitResults(provider, results) {
        for (const result of results) {
          provider.emit(__privateGet(this, _event), provider._wrapLog(result, provider._network));
        }
      }
    };
    _event = new WeakMap();
    exports2.FilterIdEventSubscriber = FilterIdEventSubscriber;
    var FilterIdPendingSubscriber = class extends FilterIdSubscriber {
      async _subscribe(provider) {
        return await provider.send("eth_newPendingTransactionFilter", []);
      }
      async _emitResults(provider, results) {
        for (const result of results) {
          provider.emit("pending", result);
        }
      }
    };
    exports2.FilterIdPendingSubscriber = FilterIdPendingSubscriber;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-jsonrpc.js
var require_provider_jsonrpc = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-jsonrpc.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.JsonRpcProvider = exports2.JsonRpcApiPollingProvider = exports2.JsonRpcApiProvider = exports2.JsonRpcSigner = void 0;
    var index_js_1 = require_abi();
    var index_js_2 = require_address3();
    var index_js_3 = require_hash2();
    var index_js_4 = require_transaction2();
    var index_js_5 = require_utils11();
    var abstract_provider_js_1 = require_abstract_provider();
    var abstract_signer_js_1 = require_abstract_signer();
    var network_js_1 = require_network2();
    var subscriber_filterid_js_1 = require_subscriber_filterid();
    var subscriber_polling_js_1 = require_subscriber_polling();
    var Primitive = "bigint,boolean,function,number,string,symbol".split(/,/g);
    function deepCopy(value) {
      if (value == null || Primitive.indexOf(typeof value) >= 0) {
        return value;
      }
      if (typeof value.getAddress === "function") {
        return value;
      }
      if (Array.isArray(value)) {
        return value.map(deepCopy);
      }
      if (typeof value === "object") {
        return Object.keys(value).reduce((accum, key) => {
          accum[key] = value[key];
          return accum;
        }, {});
      }
      throw new Error(`should not happen: ${value} (${typeof value})`);
    }
    function stall(duration) {
      return new Promise((resolve) => {
        setTimeout(resolve, duration);
      });
    }
    function getLowerCase(value) {
      if (value) {
        return value.toLowerCase();
      }
      return value;
    }
    function isPollable(value) {
      return value && typeof value.pollingInterval === "number";
    }
    var defaultOptions = {
      polling: false,
      staticNetwork: null,
      batchStallTime: 10,
      batchMaxSize: 1 << 20,
      batchMaxCount: 100,
      cacheTimeout: 250,
      pollingInterval: 4e3
    };
    var JsonRpcSigner = class extends abstract_signer_js_1.AbstractSigner {
      constructor(provider, address) {
        super(provider);
        __publicField(this, "address");
        address = (0, index_js_2.getAddress)(address);
        (0, index_js_5.defineProperties)(this, { address });
      }
      connect(provider) {
        (0, index_js_5.assert)(false, "cannot reconnect JsonRpcSigner", "UNSUPPORTED_OPERATION", {
          operation: "signer.connect"
        });
      }
      async getAddress() {
        return this.address;
      }
      // JSON-RPC will automatially fill in nonce, etc. so we just check from
      async populateTransaction(tx) {
        return await this.populateCall(tx);
      }
      // Returns just the hash of the transaction after sent, which is what
      // the bare JSON-RPC API does;
      async sendUncheckedTransaction(_tx) {
        const tx = deepCopy(_tx);
        const promises = [];
        if (tx.from) {
          const _from = tx.from;
          promises.push((async () => {
            const from = await (0, index_js_2.resolveAddress)(_from, this.provider);
            (0, index_js_5.assertArgument)(from != null && from.toLowerCase() === this.address.toLowerCase(), "from address mismatch", "transaction", _tx);
            tx.from = from;
          })());
        } else {
          tx.from = this.address;
        }
        if (tx.gasLimit == null) {
          promises.push((async () => {
            tx.gasLimit = await this.provider.estimateGas({ ...tx, from: this.address });
          })());
        }
        if (tx.to != null) {
          const _to = tx.to;
          promises.push((async () => {
            tx.to = await (0, index_js_2.resolveAddress)(_to, this.provider);
          })());
        }
        if (promises.length) {
          await Promise.all(promises);
        }
        const hexTx = this.provider.getRpcTransaction(tx);
        return this.provider.send("eth_sendTransaction", [hexTx]);
      }
      async sendTransaction(tx) {
        const blockNumber = await this.provider.getBlockNumber();
        const hash = await this.sendUncheckedTransaction(tx);
        return await new Promise((resolve, reject) => {
          const timeouts = [1e3, 100];
          let invalids = 0;
          const checkTx = async () => {
            try {
              const tx2 = await this.provider.getTransaction(hash);
              if (tx2 != null) {
                resolve(tx2.replaceableTransaction(blockNumber));
                return;
              }
            } catch (error) {
              if ((0, index_js_5.isError)(error, "CANCELLED") || (0, index_js_5.isError)(error, "BAD_DATA") || (0, index_js_5.isError)(error, "NETWORK_ERROR") || (0, index_js_5.isError)(error, "UNSUPPORTED_OPERATION")) {
                if (error.info == null) {
                  error.info = {};
                }
                error.info.sendTransactionHash = hash;
                reject(error);
                return;
              }
              if ((0, index_js_5.isError)(error, "INVALID_ARGUMENT")) {
                invalids++;
                if (error.info == null) {
                  error.info = {};
                }
                error.info.sendTransactionHash = hash;
                if (invalids > 10) {
                  reject(error);
                  return;
                }
              }
              this.provider.emit("error", (0, index_js_5.makeError)("failed to fetch transation after sending (will try again)", "UNKNOWN_ERROR", { error }));
            }
            this.provider._setTimeout(() => {
              checkTx();
            }, timeouts.pop() || 4e3);
          };
          checkTx();
        });
      }
      async signTransaction(_tx) {
        const tx = deepCopy(_tx);
        if (tx.from) {
          const from = await (0, index_js_2.resolveAddress)(tx.from, this.provider);
          (0, index_js_5.assertArgument)(from != null && from.toLowerCase() === this.address.toLowerCase(), "from address mismatch", "transaction", _tx);
          tx.from = from;
        } else {
          tx.from = this.address;
        }
        const hexTx = this.provider.getRpcTransaction(tx);
        return await this.provider.send("eth_signTransaction", [hexTx]);
      }
      async signMessage(_message) {
        const message = typeof _message === "string" ? (0, index_js_5.toUtf8Bytes)(_message) : _message;
        return await this.provider.send("personal_sign", [
          (0, index_js_5.hexlify)(message),
          this.address.toLowerCase()
        ]);
      }
      async signTypedData(domain, types, _value) {
        const value = deepCopy(_value);
        const populated = await index_js_3.TypedDataEncoder.resolveNames(domain, types, value, async (value2) => {
          const address = await (0, index_js_2.resolveAddress)(value2);
          (0, index_js_5.assertArgument)(address != null, "TypedData does not support null address", "value", value2);
          return address;
        });
        return await this.provider.send("eth_signTypedData_v4", [
          this.address.toLowerCase(),
          JSON.stringify(index_js_3.TypedDataEncoder.getPayload(populated.domain, types, populated.value))
        ]);
      }
      async unlock(password) {
        return this.provider.send("personal_unlockAccount", [
          this.address.toLowerCase(),
          password,
          null
        ]);
      }
      // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign
      async _legacySignMessage(_message) {
        const message = typeof _message === "string" ? (0, index_js_5.toUtf8Bytes)(_message) : _message;
        return await this.provider.send("eth_sign", [
          this.address.toLowerCase(),
          (0, index_js_5.hexlify)(message)
        ]);
      }
    };
    exports2.JsonRpcSigner = JsonRpcSigner;
    var _options, _nextId, _payloads, _drainTimer, _notReady, _network, _pendingDetectNetwork, _JsonRpcApiProvider_instances, scheduleDrain_fn;
    var JsonRpcApiProvider = class extends abstract_provider_js_1.AbstractProvider {
      constructor(network, options) {
        super(network, options);
        __privateAdd(this, _JsonRpcApiProvider_instances);
        __privateAdd(this, _options);
        // The next ID to use for the JSON-RPC ID field
        __privateAdd(this, _nextId);
        // Payloads are queued and triggered in batches using the drainTimer
        __privateAdd(this, _payloads);
        __privateAdd(this, _drainTimer);
        __privateAdd(this, _notReady);
        __privateAdd(this, _network);
        __privateAdd(this, _pendingDetectNetwork);
        __privateSet(this, _nextId, 1);
        __privateSet(this, _options, Object.assign({}, defaultOptions, options || {}));
        __privateSet(this, _payloads, []);
        __privateSet(this, _drainTimer, null);
        __privateSet(this, _network, null);
        __privateSet(this, _pendingDetectNetwork, null);
        {
          let resolve = null;
          const promise = new Promise((_resolve) => {
            resolve = _resolve;
          });
          __privateSet(this, _notReady, { promise, resolve });
        }
        const staticNetwork = this._getOption("staticNetwork");
        if (typeof staticNetwork === "boolean") {
          (0, index_js_5.assertArgument)(!staticNetwork || network !== "any", "staticNetwork cannot be used on special network 'any'", "options", options);
          if (staticNetwork && network != null) {
            __privateSet(this, _network, network_js_1.Network.from(network));
          }
        } else if (staticNetwork) {
          (0, index_js_5.assertArgument)(network == null || staticNetwork.matches(network), "staticNetwork MUST match network object", "options", options);
          __privateSet(this, _network, staticNetwork);
        }
      }
      /**
       *  Returns the value associated with the option %%key%%.
       *
       *  Sub-classes can use this to inquire about configuration options.
       */
      _getOption(key) {
        return __privateGet(this, _options)[key];
      }
      /**
       *  Gets the [[Network]] this provider has committed to. On each call, the network
       *  is detected, and if it has changed, the call will reject.
       */
      get _network() {
        (0, index_js_5.assert)(__privateGet(this, _network), "network is not available yet", "NETWORK_ERROR");
        return __privateGet(this, _network);
      }
      /**
       *  Resolves to the non-normalized value by performing %%req%%.
       *
       *  Sub-classes may override this to modify behavior of actions,
       *  and should generally call ``super._perform`` as a fallback.
       */
      async _perform(req) {
        if (req.method === "call" || req.method === "estimateGas") {
          let tx = req.transaction;
          if (tx && tx.type != null && (0, index_js_5.getBigInt)(tx.type)) {
            if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {
              const feeData = await this.getFeeData();
              if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {
                req = Object.assign({}, req, {
                  transaction: Object.assign({}, tx, { type: void 0 })
                });
              }
            }
          }
        }
        const request = this.getRpcRequest(req);
        if (request != null) {
          return await this.send(request.method, request.args);
        }
        return super._perform(req);
      }
      /**
       *  Sub-classes may override this; it detects the *actual* network that
       *  we are **currently** connected to.
       *
       *  Keep in mind that [[send]] may only be used once [[ready]], otherwise the
       *  _send primitive must be used instead.
       */
      async _detectNetwork() {
        const network = this._getOption("staticNetwork");
        if (network) {
          if (network === true) {
            if (__privateGet(this, _network)) {
              return __privateGet(this, _network);
            }
          } else {
            return network;
          }
        }
        if (__privateGet(this, _pendingDetectNetwork)) {
          return await __privateGet(this, _pendingDetectNetwork);
        }
        if (this.ready) {
          __privateSet(this, _pendingDetectNetwork, (async () => {
            try {
              const result = network_js_1.Network.from((0, index_js_5.getBigInt)(await this.send("eth_chainId", [])));
              __privateSet(this, _pendingDetectNetwork, null);
              return result;
            } catch (error) {
              __privateSet(this, _pendingDetectNetwork, null);
              throw error;
            }
          })());
          return await __privateGet(this, _pendingDetectNetwork);
        }
        __privateSet(this, _pendingDetectNetwork, (async () => {
          const payload = {
            id: __privateWrapper(this, _nextId)._++,
            method: "eth_chainId",
            params: [],
            jsonrpc: "2.0"
          };
          this.emit("debug", { action: "sendRpcPayload", payload });
          let result;
          try {
            result = (await this._send(payload))[0];
            __privateSet(this, _pendingDetectNetwork, null);
          } catch (error) {
            __privateSet(this, _pendingDetectNetwork, null);
            this.emit("debug", { action: "receiveRpcError", error });
            throw error;
          }
          this.emit("debug", { action: "receiveRpcResult", result });
          if ("result" in result) {
            return network_js_1.Network.from((0, index_js_5.getBigInt)(result.result));
          }
          throw this.getRpcError(payload, result);
        })());
        return await __privateGet(this, _pendingDetectNetwork);
      }
      /**
       *  Sub-classes **MUST** call this. Until [[_start]] has been called, no calls
       *  will be passed to [[_send]] from [[send]]. If it is overridden, then
       *  ``super._start()`` **MUST** be called.
       *
       *  Calling it multiple times is safe and has no effect.
       */
      _start() {
        if (__privateGet(this, _notReady) == null || __privateGet(this, _notReady).resolve == null) {
          return;
        }
        __privateGet(this, _notReady).resolve();
        __privateSet(this, _notReady, null);
        (async () => {
          while (__privateGet(this, _network) == null && !this.destroyed) {
            try {
              __privateSet(this, _network, await this._detectNetwork());
            } catch (error) {
              if (this.destroyed) {
                break;
              }
              console.log("JsonRpcProvider failed to detect network and cannot start up; retry in 1s (perhaps the URL is wrong or the node is not started)");
              this.emit("error", (0, index_js_5.makeError)("failed to bootstrap network detection", "NETWORK_ERROR", { event: "initial-network-discovery", info: { error } }));
              await stall(1e3);
            }
          }
          __privateMethod(this, _JsonRpcApiProvider_instances, scheduleDrain_fn).call(this);
        })();
      }
      /**
       *  Resolves once the [[_start]] has been called. This can be used in
       *  sub-classes to defer sending data until the connection has been
       *  established.
       */
      async _waitUntilReady() {
        if (__privateGet(this, _notReady) == null) {
          return;
        }
        return await __privateGet(this, _notReady).promise;
      }
      /**
       *  Return a Subscriber that will manage the %%sub%%.
       *
       *  Sub-classes may override this to modify the behavior of
       *  subscription management.
       */
      _getSubscriber(sub) {
        if (sub.type === "pending") {
          return new subscriber_filterid_js_1.FilterIdPendingSubscriber(this);
        }
        if (sub.type === "event") {
          if (this._getOption("polling")) {
            return new subscriber_polling_js_1.PollingEventSubscriber(this, sub.filter);
          }
          return new subscriber_filterid_js_1.FilterIdEventSubscriber(this, sub.filter);
        }
        if (sub.type === "orphan" && sub.filter.orphan === "drop-log") {
          return new abstract_provider_js_1.UnmanagedSubscriber("orphan");
        }
        return super._getSubscriber(sub);
      }
      /**
       *  Returns true only if the [[_start]] has been called.
       */
      get ready() {
        return __privateGet(this, _notReady) == null;
      }
      /**
       *  Returns %%tx%% as a normalized JSON-RPC transaction request,
       *  which has all values hexlified and any numeric values converted
       *  to Quantity values.
       */
      getRpcTransaction(tx) {
        const result = {};
        ["chainId", "gasLimit", "gasPrice", "type", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "value"].forEach((key) => {
          if (tx[key] == null) {
            return;
          }
          let dstKey = key;
          if (key === "gasLimit") {
            dstKey = "gas";
          }
          result[dstKey] = (0, index_js_5.toQuantity)((0, index_js_5.getBigInt)(tx[key], `tx.${key}`));
        });
        ["from", "to", "data"].forEach((key) => {
          if (tx[key] == null) {
            return;
          }
          result[key] = (0, index_js_5.hexlify)(tx[key]);
        });
        if (tx.accessList) {
          result["accessList"] = (0, index_js_4.accessListify)(tx.accessList);
        }
        if (tx.blobVersionedHashes) {
          result["blobVersionedHashes"] = tx.blobVersionedHashes.map((h) => h.toLowerCase());
        }
        return result;
      }
      /**
       *  Returns the request method and arguments required to perform
       *  %%req%%.
       */
      getRpcRequest(req) {
        switch (req.method) {
          case "chainId":
            return { method: "eth_chainId", args: [] };
          case "getBlockNumber":
            return { method: "eth_blockNumber", args: [] };
          case "getGasPrice":
            return { method: "eth_gasPrice", args: [] };
          case "getPriorityFee":
            return { method: "eth_maxPriorityFeePerGas", args: [] };
          case "getBalance":
            return {
              method: "eth_getBalance",
              args: [getLowerCase(req.address), req.blockTag]
            };
          case "getTransactionCount":
            return {
              method: "eth_getTransactionCount",
              args: [getLowerCase(req.address), req.blockTag]
            };
          case "getCode":
            return {
              method: "eth_getCode",
              args: [getLowerCase(req.address), req.blockTag]
            };
          case "getStorage":
            return {
              method: "eth_getStorageAt",
              args: [
                getLowerCase(req.address),
                "0x" + req.position.toString(16),
                req.blockTag
              ]
            };
          case "broadcastTransaction":
            return {
              method: "eth_sendRawTransaction",
              args: [req.signedTransaction]
            };
          case "getBlock":
            if ("blockTag" in req) {
              return {
                method: "eth_getBlockByNumber",
                args: [req.blockTag, !!req.includeTransactions]
              };
            } else if ("blockHash" in req) {
              return {
                method: "eth_getBlockByHash",
                args: [req.blockHash, !!req.includeTransactions]
              };
            }
            break;
          case "getTransaction":
            return {
              method: "eth_getTransactionByHash",
              args: [req.hash]
            };
          case "getTransactionReceipt":
            return {
              method: "eth_getTransactionReceipt",
              args: [req.hash]
            };
          case "call":
            return {
              method: "eth_call",
              args: [this.getRpcTransaction(req.transaction), req.blockTag]
            };
          case "estimateGas": {
            return {
              method: "eth_estimateGas",
              args: [this.getRpcTransaction(req.transaction)]
            };
          }
          case "getLogs":
            if (req.filter && req.filter.address != null) {
              if (Array.isArray(req.filter.address)) {
                req.filter.address = req.filter.address.map(getLowerCase);
              } else {
                req.filter.address = getLowerCase(req.filter.address);
              }
            }
            return { method: "eth_getLogs", args: [req.filter] };
        }
        return null;
      }
      /**
       *  Returns an ethers-style Error for the given JSON-RPC error
       *  %%payload%%, coalescing the various strings and error shapes
       *  that different nodes return, coercing them into a machine-readable
       *  standardized error.
       */
      getRpcError(payload, _error) {
        const { method: method2 } = payload;
        const { error } = _error;
        if (method2 === "eth_estimateGas" && error.message) {
          const msg = error.message;
          if (!msg.match(/revert/i) && msg.match(/insufficient funds/i)) {
            return (0, index_js_5.makeError)("insufficient funds", "INSUFFICIENT_FUNDS", {
              transaction: payload.params[0],
              info: { payload, error }
            });
          }
        }
        if (method2 === "eth_call" || method2 === "eth_estimateGas") {
          const result = spelunkData(error);
          const e = index_js_1.AbiCoder.getBuiltinCallException(method2 === "eth_call" ? "call" : "estimateGas", payload.params[0], result ? result.data : null);
          e.info = { error, payload };
          return e;
        }
        const message = JSON.stringify(spelunkMessage(error));
        if (typeof error.message === "string" && error.message.match(/user denied|ethers-user-denied/i)) {
          const actionMap = {
            eth_sign: "signMessage",
            personal_sign: "signMessage",
            eth_signTypedData_v4: "signTypedData",
            eth_signTransaction: "signTransaction",
            eth_sendTransaction: "sendTransaction",
            eth_requestAccounts: "requestAccess",
            wallet_requestAccounts: "requestAccess"
          };
          return (0, index_js_5.makeError)(`user rejected action`, "ACTION_REJECTED", {
            action: actionMap[method2] || "unknown",
            reason: "rejected",
            info: { payload, error }
          });
        }
        if (method2 === "eth_sendRawTransaction" || method2 === "eth_sendTransaction") {
          const transaction = payload.params[0];
          if (message.match(/insufficient funds|base fee exceeds gas limit/i)) {
            return (0, index_js_5.makeError)("insufficient funds for intrinsic transaction cost", "INSUFFICIENT_FUNDS", {
              transaction,
              info: { error }
            });
          }
          if (message.match(/nonce/i) && message.match(/too low/i)) {
            return (0, index_js_5.makeError)("nonce has already been used", "NONCE_EXPIRED", { transaction, info: { error } });
          }
          if (message.match(/replacement transaction/i) && message.match(/underpriced/i)) {
            return (0, index_js_5.makeError)("replacement fee too low", "REPLACEMENT_UNDERPRICED", { transaction, info: { error } });
          }
          if (message.match(/only replay-protected/i)) {
            return (0, index_js_5.makeError)("legacy pre-eip-155 transactions not supported", "UNSUPPORTED_OPERATION", {
              operation: method2,
              info: { transaction, info: { error } }
            });
          }
        }
        let unsupported = !!message.match(/the method .* does not exist/i);
        if (!unsupported) {
          if (error && error.details && error.details.startsWith("Unauthorized method:")) {
            unsupported = true;
          }
        }
        if (unsupported) {
          return (0, index_js_5.makeError)("unsupported operation", "UNSUPPORTED_OPERATION", {
            operation: payload.method,
            info: { error, payload }
          });
        }
        return (0, index_js_5.makeError)("could not coalesce error", "UNKNOWN_ERROR", { error, payload });
      }
      /**
       *  Requests the %%method%% with %%params%% via the JSON-RPC protocol
       *  over the underlying channel. This can be used to call methods
       *  on the backend that do not have a high-level API within the Provider
       *  API.
       *
       *  This method queues requests according to the batch constraints
       *  in the options, assigns the request a unique ID.
       *
       *  **Do NOT override** this method in sub-classes; instead
       *  override [[_send]] or force the options values in the
       *  call to the constructor to modify this method's behavior.
       */
      send(method2, params) {
        if (this.destroyed) {
          return Promise.reject((0, index_js_5.makeError)("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: method2 }));
        }
        const id = __privateWrapper(this, _nextId)._++;
        const promise = new Promise((resolve, reject) => {
          __privateGet(this, _payloads).push({
            resolve,
            reject,
            payload: { method: method2, params, id, jsonrpc: "2.0" }
          });
        });
        __privateMethod(this, _JsonRpcApiProvider_instances, scheduleDrain_fn).call(this);
        return promise;
      }
      /**
       *  Resolves to the [[Signer]] account for  %%address%% managed by
       *  the client.
       *
       *  If the %%address%% is a number, it is used as an index in the
       *  the accounts from [[listAccounts]].
       *
       *  This can only be used on clients which manage accounts (such as
       *  Geth with imported account or MetaMask).
       *
       *  Throws if the account doesn't exist.
       */
      async getSigner(address) {
        if (address == null) {
          address = 0;
        }
        const accountsPromise = this.send("eth_accounts", []);
        if (typeof address === "number") {
          const accounts2 = await accountsPromise;
          if (address >= accounts2.length) {
            throw new Error("no such account");
          }
          return new JsonRpcSigner(this, accounts2[address]);
        }
        const { accounts } = await (0, index_js_5.resolveProperties)({
          network: this.getNetwork(),
          accounts: accountsPromise
        });
        address = (0, index_js_2.getAddress)(address);
        for (const account of accounts) {
          if ((0, index_js_2.getAddress)(account) === address) {
            return new JsonRpcSigner(this, address);
          }
        }
        throw new Error("invalid account");
      }
      async listAccounts() {
        const accounts = await this.send("eth_accounts", []);
        return accounts.map((a) => new JsonRpcSigner(this, a));
      }
      destroy() {
        if (__privateGet(this, _drainTimer)) {
          clearTimeout(__privateGet(this, _drainTimer));
          __privateSet(this, _drainTimer, null);
        }
        for (const { payload, reject } of __privateGet(this, _payloads)) {
          reject((0, index_js_5.makeError)("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: payload.method }));
        }
        __privateSet(this, _payloads, []);
        super.destroy();
      }
    };
    _options = new WeakMap();
    _nextId = new WeakMap();
    _payloads = new WeakMap();
    _drainTimer = new WeakMap();
    _notReady = new WeakMap();
    _network = new WeakMap();
    _pendingDetectNetwork = new WeakMap();
    _JsonRpcApiProvider_instances = new WeakSet();
    scheduleDrain_fn = function() {
      if (__privateGet(this, _drainTimer)) {
        return;
      }
      const stallTime = this._getOption("batchMaxCount") === 1 ? 0 : this._getOption("batchStallTime");
      __privateSet(this, _drainTimer, setTimeout(() => {
        __privateSet(this, _drainTimer, null);
        const payloads = __privateGet(this, _payloads);
        __privateSet(this, _payloads, []);
        while (payloads.length) {
          const batch = [payloads.shift()];
          while (payloads.length) {
            if (batch.length === __privateGet(this, _options).batchMaxCount) {
              break;
            }
            batch.push(payloads.shift());
            const bytes = JSON.stringify(batch.map((p) => p.payload));
            if (bytes.length > __privateGet(this, _options).batchMaxSize) {
              payloads.unshift(batch.pop());
              break;
            }
          }
          (async () => {
            const payload = batch.length === 1 ? batch[0].payload : batch.map((p) => p.payload);
            this.emit("debug", { action: "sendRpcPayload", payload });
            try {
              const result = await this._send(payload);
              this.emit("debug", { action: "receiveRpcResult", result });
              for (const { resolve, reject, payload: payload2 } of batch) {
                if (this.destroyed) {
                  reject((0, index_js_5.makeError)("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: payload2.method }));
                  continue;
                }
                const resp = result.filter((r) => r.id === payload2.id)[0];
                if (resp == null) {
                  const error = (0, index_js_5.makeError)("missing response for request", "BAD_DATA", {
                    value: result,
                    info: { payload: payload2 }
                  });
                  this.emit("error", error);
                  reject(error);
                  continue;
                }
                if ("error" in resp) {
                  reject(this.getRpcError(payload2, resp));
                  continue;
                }
                resolve(resp.result);
              }
            } catch (error) {
              this.emit("debug", { action: "receiveRpcError", error });
              for (const { reject } of batch) {
                reject(error);
              }
            }
          })();
        }
      }, stallTime));
    };
    exports2.JsonRpcApiProvider = JsonRpcApiProvider;
    var _pollingInterval;
    var JsonRpcApiPollingProvider = class extends JsonRpcApiProvider {
      constructor(network, options) {
        super(network, options);
        __privateAdd(this, _pollingInterval);
        let pollingInterval = this._getOption("pollingInterval");
        if (pollingInterval == null) {
          pollingInterval = defaultOptions.pollingInterval;
        }
        __privateSet(this, _pollingInterval, pollingInterval);
      }
      _getSubscriber(sub) {
        const subscriber = super._getSubscriber(sub);
        if (isPollable(subscriber)) {
          subscriber.pollingInterval = __privateGet(this, _pollingInterval);
        }
        return subscriber;
      }
      /**
       *  The polling interval (default: 4000 ms)
       */
      get pollingInterval() {
        return __privateGet(this, _pollingInterval);
      }
      set pollingInterval(value) {
        if (!Number.isInteger(value) || value < 0) {
          throw new Error("invalid interval");
        }
        __privateSet(this, _pollingInterval, value);
        this._forEachSubscriber((sub) => {
          if (isPollable(sub)) {
            sub.pollingInterval = __privateGet(this, _pollingInterval);
          }
        });
      }
    };
    _pollingInterval = new WeakMap();
    exports2.JsonRpcApiPollingProvider = JsonRpcApiPollingProvider;
    var _connect;
    var JsonRpcProvider = class extends JsonRpcApiPollingProvider {
      constructor(url, network, options) {
        if (url == null) {
          url = "http://localhost:8545";
        }
        super(network, options);
        __privateAdd(this, _connect);
        if (typeof url === "string") {
          __privateSet(this, _connect, new index_js_5.FetchRequest(url));
        } else {
          __privateSet(this, _connect, url.clone());
        }
      }
      _getConnection() {
        return __privateGet(this, _connect).clone();
      }
      async send(method2, params) {
        await this._start();
        return await super.send(method2, params);
      }
      async _send(payload) {
        const request = this._getConnection();
        request.body = JSON.stringify(payload);
        request.setHeader("content-type", "application/json");
        const response = await request.send();
        response.assertOk();
        let resp = response.bodyJson;
        if (!Array.isArray(resp)) {
          resp = [resp];
        }
        return resp;
      }
    };
    _connect = new WeakMap();
    exports2.JsonRpcProvider = JsonRpcProvider;
    function spelunkData(value) {
      if (value == null) {
        return null;
      }
      if (typeof value.message === "string" && value.message.match(/revert/i) && (0, index_js_5.isHexString)(value.data)) {
        return { message: value.message, data: value.data };
      }
      if (typeof value === "object") {
        for (const key in value) {
          const result = spelunkData(value[key]);
          if (result) {
            return result;
          }
        }
        return null;
      }
      if (typeof value === "string") {
        try {
          return spelunkData(JSON.parse(value));
        } catch (error) {
        }
      }
      return null;
    }
    function _spelunkMessage(value, result) {
      if (value == null) {
        return;
      }
      if (typeof value.message === "string") {
        result.push(value.message);
      }
      if (typeof value === "object") {
        for (const key in value) {
          _spelunkMessage(value[key], result);
        }
      }
      if (typeof value === "string") {
        try {
          return _spelunkMessage(JSON.parse(value), result);
        } catch (error) {
        }
      }
    }
    function spelunkMessage(value) {
      const result = [];
      _spelunkMessage(value, result);
      return result;
    }
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-ankr.js
var require_provider_ankr = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-ankr.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AnkrProvider = void 0;
    var index_js_1 = require_utils11();
    var community_js_1 = require_community();
    var network_js_1 = require_network2();
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    var defaultApiKey = "9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972";
    function getHost(name) {
      switch (name) {
        case "mainnet":
          return "rpc.ankr.com/eth";
        case "goerli":
          return "rpc.ankr.com/eth_goerli";
        case "sepolia":
          return "rpc.ankr.com/eth_sepolia";
        case "arbitrum":
          return "rpc.ankr.com/arbitrum";
        case "base":
          return "rpc.ankr.com/base";
        case "base-goerli":
          return "rpc.ankr.com/base_goerli";
        case "base-sepolia":
          return "rpc.ankr.com/base_sepolia";
        case "bnb":
          return "rpc.ankr.com/bsc";
        case "bnbt":
          return "rpc.ankr.com/bsc_testnet_chapel";
        case "matic":
          return "rpc.ankr.com/polygon";
        case "matic-mumbai":
          return "rpc.ankr.com/polygon_mumbai";
        case "optimism":
          return "rpc.ankr.com/optimism";
        case "optimism-goerli":
          return "rpc.ankr.com/optimism_testnet";
        case "optimism-sepolia":
          return "rpc.ankr.com/optimism_sepolia";
      }
      (0, index_js_1.assertArgument)(false, "unsupported network", "network", name);
    }
    var AnkrProvider = class _AnkrProvider extends provider_jsonrpc_js_1.JsonRpcProvider {
      /**
       *  Create a new **AnkrProvider**.
       *
       *  By default connecting to ``mainnet`` with a highly throttled
       *  API key.
       */
      constructor(_network, apiKey) {
        if (_network == null) {
          _network = "mainnet";
        }
        const network = network_js_1.Network.from(_network);
        if (apiKey == null) {
          apiKey = defaultApiKey;
        }
        const options = { polling: true, staticNetwork: network };
        const request = _AnkrProvider.getRequest(network, apiKey);
        super(request, network, options);
        /**
         *  The API key for the Ankr connection.
         */
        __publicField(this, "apiKey");
        (0, index_js_1.defineProperties)(this, { apiKey });
      }
      _getProvider(chainId) {
        try {
          return new _AnkrProvider(chainId, this.apiKey);
        } catch (error) {
        }
        return super._getProvider(chainId);
      }
      /**
       *  Returns a prepared request for connecting to %%network%% with
       *  %%apiKey%%.
       */
      static getRequest(network, apiKey) {
        if (apiKey == null) {
          apiKey = defaultApiKey;
        }
        const request = new index_js_1.FetchRequest(`https://${getHost(network.name)}/${apiKey}`);
        request.allowGzip = true;
        if (apiKey === defaultApiKey) {
          request.retryFunc = async (request2, response, attempt) => {
            (0, community_js_1.showThrottleMessage)("AnkrProvider");
            return true;
          };
        }
        return request;
      }
      getRpcError(payload, error) {
        if (payload.method === "eth_sendRawTransaction") {
          if (error && error.error && error.error.message === "INTERNAL_ERROR: could not replace existing tx") {
            error.error.message = "replacement transaction underpriced";
          }
        }
        return super.getRpcError(payload, error);
      }
      isCommunityResource() {
        return this.apiKey === defaultApiKey;
      }
    };
    exports2.AnkrProvider = AnkrProvider;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-alchemy.js
var require_provider_alchemy = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-alchemy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AlchemyProvider = void 0;
    var index_js_1 = require_utils11();
    var community_js_1 = require_community();
    var network_js_1 = require_network2();
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    var defaultApiKey = "_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";
    function getHost(name) {
      switch (name) {
        case "mainnet":
          return "eth-mainnet.alchemyapi.io";
        case "goerli":
          return "eth-goerli.g.alchemy.com";
        case "sepolia":
          return "eth-sepolia.g.alchemy.com";
        case "arbitrum":
          return "arb-mainnet.g.alchemy.com";
        case "arbitrum-goerli":
          return "arb-goerli.g.alchemy.com";
        case "arbitrum-sepolia":
          return "arb-sepolia.g.alchemy.com";
        case "base":
          return "base-mainnet.g.alchemy.com";
        case "base-goerli":
          return "base-goerli.g.alchemy.com";
        case "base-sepolia":
          return "base-sepolia.g.alchemy.com";
        case "matic":
          return "polygon-mainnet.g.alchemy.com";
        case "matic-amoy":
          return "polygon-amoy.g.alchemy.com";
        case "matic-mumbai":
          return "polygon-mumbai.g.alchemy.com";
        case "optimism":
          return "opt-mainnet.g.alchemy.com";
        case "optimism-goerli":
          return "opt-goerli.g.alchemy.com";
        case "optimism-sepolia":
          return "opt-sepolia.g.alchemy.com";
      }
      (0, index_js_1.assertArgument)(false, "unsupported network", "network", name);
    }
    var AlchemyProvider = class _AlchemyProvider extends provider_jsonrpc_js_1.JsonRpcProvider {
      constructor(_network, apiKey) {
        if (_network == null) {
          _network = "mainnet";
        }
        const network = network_js_1.Network.from(_network);
        if (apiKey == null) {
          apiKey = defaultApiKey;
        }
        const request = _AlchemyProvider.getRequest(network, apiKey);
        super(request, network, { staticNetwork: network });
        __publicField(this, "apiKey");
        (0, index_js_1.defineProperties)(this, { apiKey });
      }
      _getProvider(chainId) {
        try {
          return new _AlchemyProvider(chainId, this.apiKey);
        } catch (error) {
        }
        return super._getProvider(chainId);
      }
      async _perform(req) {
        if (req.method === "getTransactionResult") {
          const { trace, tx } = await (0, index_js_1.resolveProperties)({
            trace: this.send("trace_transaction", [req.hash]),
            tx: this.getTransaction(req.hash)
          });
          if (trace == null || tx == null) {
            return null;
          }
          let data;
          let error = false;
          try {
            data = trace[0].result.output;
            error = trace[0].error === "Reverted";
          } catch (error2) {
          }
          if (data) {
            (0, index_js_1.assert)(!error, "an error occurred during transaction executions", "CALL_EXCEPTION", {
              action: "getTransactionResult",
              data,
              reason: null,
              transaction: tx,
              invocation: null,
              revert: null
              // @TODO
            });
            return data;
          }
          (0, index_js_1.assert)(false, "could not parse trace result", "BAD_DATA", { value: trace });
        }
        return await super._perform(req);
      }
      isCommunityResource() {
        return this.apiKey === defaultApiKey;
      }
      static getRequest(network, apiKey) {
        if (apiKey == null) {
          apiKey = defaultApiKey;
        }
        const request = new index_js_1.FetchRequest(`https://${getHost(network.name)}/v2/${apiKey}`);
        request.allowGzip = true;
        if (apiKey === defaultApiKey) {
          request.retryFunc = async (request2, response, attempt) => {
            (0, community_js_1.showThrottleMessage)("alchemy");
            return true;
          };
        }
        return request;
      }
    };
    exports2.AlchemyProvider = AlchemyProvider;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-chainstack.js
var require_provider_chainstack = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-chainstack.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChainstackProvider = void 0;
    var index_js_1 = require_utils11();
    var community_js_1 = require_community();
    var network_js_1 = require_network2();
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    function getApiKey(name) {
      switch (name) {
        case "mainnet":
          return "39f1d67cedf8b7831010a665328c9197";
        case "arbitrum":
          return "0550c209db33c3abf4cc927e1e18cea1";
        case "bnb":
          return "98b5a77e531614387366f6fc5da097f8";
        case "matic":
          return "cd9d4d70377471aa7c142ec4a4205249";
      }
      (0, index_js_1.assertArgument)(false, "unsupported network", "network", name);
    }
    function getHost(name) {
      switch (name) {
        case "mainnet":
          return "ethereum-mainnet.core.chainstack.com";
        case "arbitrum":
          return "arbitrum-mainnet.core.chainstack.com";
        case "bnb":
          return "bsc-mainnet.core.chainstack.com";
        case "matic":
          return "polygon-mainnet.core.chainstack.com";
      }
      (0, index_js_1.assertArgument)(false, "unsupported network", "network", name);
    }
    var ChainstackProvider = class _ChainstackProvider extends provider_jsonrpc_js_1.JsonRpcProvider {
      /**
       *  Creates a new **ChainstackProvider**.
       */
      constructor(_network, apiKey) {
        if (_network == null) {
          _network = "mainnet";
        }
        const network = network_js_1.Network.from(_network);
        if (apiKey == null) {
          apiKey = getApiKey(network.name);
        }
        const request = _ChainstackProvider.getRequest(network, apiKey);
        super(request, network, { staticNetwork: network });
        /**
         *  The API key for the Chainstack connection.
         */
        __publicField(this, "apiKey");
        (0, index_js_1.defineProperties)(this, { apiKey });
      }
      _getProvider(chainId) {
        try {
          return new _ChainstackProvider(chainId, this.apiKey);
        } catch (error) {
        }
        return super._getProvider(chainId);
      }
      isCommunityResource() {
        return this.apiKey === getApiKey(this._network.name);
      }
      /**
       *  Returns a prepared request for connecting to %%network%%
       *  with %%apiKey%% and %%projectSecret%%.
       */
      static getRequest(network, apiKey) {
        if (apiKey == null) {
          apiKey = getApiKey(network.name);
        }
        const request = new index_js_1.FetchRequest(`https://${getHost(network.name)}/${apiKey}`);
        request.allowGzip = true;
        if (apiKey === getApiKey(network.name)) {
          request.retryFunc = async (request2, response, attempt) => {
            (0, community_js_1.showThrottleMessage)("ChainstackProvider");
            return true;
          };
        }
        return request;
      }
    };
    exports2.ChainstackProvider = ChainstackProvider;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-cloudflare.js
var require_provider_cloudflare = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-cloudflare.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CloudflareProvider = void 0;
    var index_js_1 = require_utils11();
    var network_js_1 = require_network2();
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    var CloudflareProvider = class extends provider_jsonrpc_js_1.JsonRpcProvider {
      constructor(_network) {
        if (_network == null) {
          _network = "mainnet";
        }
        const network = network_js_1.Network.from(_network);
        (0, index_js_1.assertArgument)(network.name === "mainnet", "unsupported network", "network", _network);
        super("https://cloudflare-eth.com/", network, { staticNetwork: network });
      }
    };
    exports2.CloudflareProvider = CloudflareProvider;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-etherscan.js
var require_provider_etherscan = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-etherscan.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EtherscanProvider = exports2.EtherscanPlugin = void 0;
    var index_js_1 = require_abi();
    var index_js_2 = require_contract2();
    var index_js_3 = require_transaction2();
    var index_js_4 = require_utils11();
    var abstract_provider_js_1 = require_abstract_provider();
    var network_js_1 = require_network2();
    var plugins_network_js_1 = require_plugins_network();
    var community_js_1 = require_community();
    var THROTTLE = 2e3;
    function isPromise(value) {
      return value && typeof value.then === "function";
    }
    var EtherscanPluginId = "org.ethers.plugins.provider.Etherscan";
    var EtherscanPlugin = class _EtherscanPlugin extends plugins_network_js_1.NetworkPlugin {
      /**
       *  Creates a new **EtherscanProvider** which will use
       *  %%baseUrl%%.
       */
      constructor(baseUrl) {
        super(EtherscanPluginId);
        /**
         *  The Etherscan API base URL.
         */
        __publicField(this, "baseUrl");
        (0, index_js_4.defineProperties)(this, { baseUrl });
      }
      clone() {
        return new _EtherscanPlugin(this.baseUrl);
      }
    };
    exports2.EtherscanPlugin = EtherscanPlugin;
    var skipKeys = ["enableCcipRead"];
    var nextId = 1;
    var _plugin;
    var EtherscanProvider = class extends abstract_provider_js_1.AbstractProvider {
      /**
       *  Creates a new **EtherscanBaseProvider**.
       */
      constructor(_network, _apiKey) {
        const apiKey = _apiKey != null ? _apiKey : null;
        super();
        /**
         *  The connected network.
         */
        __publicField(this, "network");
        /**
         *  The API key or null if using the community provided bandwidth.
         */
        __publicField(this, "apiKey");
        __privateAdd(this, _plugin);
        const network = network_js_1.Network.from(_network);
        __privateSet(this, _plugin, network.getPlugin(EtherscanPluginId));
        (0, index_js_4.defineProperties)(this, { apiKey, network });
        this.getBaseUrl();
      }
      /**
       *  Returns the base URL.
       *
       *  If an [[EtherscanPlugin]] is configured on the
       *  [[EtherscanBaseProvider_network]], returns the plugin's
       *  baseUrl.
       */
      getBaseUrl() {
        if (__privateGet(this, _plugin)) {
          return __privateGet(this, _plugin).baseUrl;
        }
        switch (this.network.name) {
          case "mainnet":
            return "https://api.etherscan.io";
          case "goerli":
            return "https://api-goerli.etherscan.io";
          case "sepolia":
            return "https://api-sepolia.etherscan.io";
          case "holesky":
            return "https://api-holesky.etherscan.io";
          case "arbitrum":
            return "https://api.arbiscan.io";
          case "arbitrum-goerli":
            return "https://api-goerli.arbiscan.io";
          case "base":
            return "https://api.basescan.org";
          case "base-sepolia":
            return "https://api-sepolia.basescan.org";
          case "bnb":
            return "https://api.bscscan.com";
          case "bnbt":
            return "https://api-testnet.bscscan.com";
          case "matic":
            return "https://api.polygonscan.com";
          case "matic-amoy":
            return "https://api-amoy.polygonscan.com";
          case "matic-mumbai":
            return "https://api-testnet.polygonscan.com";
          case "optimism":
            return "https://api-optimistic.etherscan.io";
          case "optimism-goerli":
            return "https://api-goerli-optimistic.etherscan.io";
          default:
        }
        (0, index_js_4.assertArgument)(false, "unsupported network", "network", this.network);
      }
      /**
       *  Returns the URL for the %%module%% and %%params%%.
       */
      getUrl(module3, params) {
        const query = Object.keys(params).reduce((accum, key) => {
          const value = params[key];
          if (value != null) {
            accum += `&${key}=${value}`;
          }
          return accum;
        }, "");
        const apiKey = this.apiKey ? `&apikey=${this.apiKey}` : "";
        return `${this.getBaseUrl()}/api?module=${module3}${query}${apiKey}`;
      }
      /**
       *  Returns the URL for using POST requests.
       */
      getPostUrl() {
        return `${this.getBaseUrl()}/api`;
      }
      /**
       *  Returns the parameters for using POST requests.
       */
      getPostData(module3, params) {
        params.module = module3;
        params.apikey = this.apiKey;
        return params;
      }
      async detectNetwork() {
        return this.network;
      }
      /**
       *  Resolves to the result of calling %%module%% with %%params%%.
       *
       *  If %%post%%, the request is made as a POST request.
       */
      async fetch(module3, params, post) {
        const id = nextId++;
        const url = post ? this.getPostUrl() : this.getUrl(module3, params);
        const payload = post ? this.getPostData(module3, params) : null;
        this.emit("debug", { action: "sendRequest", id, url, payload });
        const request = new index_js_4.FetchRequest(url);
        request.setThrottleParams({ slotInterval: 1e3 });
        request.retryFunc = (req, resp, attempt) => {
          if (this.isCommunityResource()) {
            (0, community_js_1.showThrottleMessage)("Etherscan");
          }
          return Promise.resolve(true);
        };
        request.processFunc = async (request2, response2) => {
          const result2 = response2.hasBody() ? JSON.parse((0, index_js_4.toUtf8String)(response2.body)) : {};
          const throttle = (typeof result2.result === "string" ? result2.result : "").toLowerCase().indexOf("rate limit") >= 0;
          if (module3 === "proxy") {
            if (result2 && result2.status == 0 && result2.message == "NOTOK" && throttle) {
              this.emit("debug", { action: "receiveError", id, reason: "proxy-NOTOK", error: result2 });
              response2.throwThrottleError(result2.result, THROTTLE);
            }
          } else {
            if (throttle) {
              this.emit("debug", { action: "receiveError", id, reason: "null result", error: result2.result });
              response2.throwThrottleError(result2.result, THROTTLE);
            }
          }
          return response2;
        };
        if (payload) {
          request.setHeader("content-type", "application/x-www-form-urlencoded; charset=UTF-8");
          request.body = Object.keys(payload).map((k) => `${k}=${payload[k]}`).join("&");
        }
        const response = await request.send();
        try {
          response.assertOk();
        } catch (error) {
          this.emit("debug", { action: "receiveError", id, error, reason: "assertOk" });
          (0, index_js_4.assert)(false, "response error", "SERVER_ERROR", { request, response });
        }
        if (!response.hasBody()) {
          this.emit("debug", { action: "receiveError", id, error: "missing body", reason: "null body" });
          (0, index_js_4.assert)(false, "missing response", "SERVER_ERROR", { request, response });
        }
        const result = JSON.parse((0, index_js_4.toUtf8String)(response.body));
        if (module3 === "proxy") {
          if (result.jsonrpc != "2.0") {
            this.emit("debug", { action: "receiveError", id, result, reason: "invalid JSON-RPC" });
            (0, index_js_4.assert)(false, "invalid JSON-RPC response (missing jsonrpc='2.0')", "SERVER_ERROR", { request, response, info: { result } });
          }
          if (result.error) {
            this.emit("debug", { action: "receiveError", id, result, reason: "JSON-RPC error" });
            (0, index_js_4.assert)(false, "error response", "SERVER_ERROR", { request, response, info: { result } });
          }
          this.emit("debug", { action: "receiveRequest", id, result });
          return result.result;
        } else {
          if (result.status == 0 && (result.message === "No records found" || result.message === "No transactions found")) {
            this.emit("debug", { action: "receiveRequest", id, result });
            return result.result;
          }
          if (result.status != 1 || typeof result.message === "string" && !result.message.match(/^OK/)) {
            this.emit("debug", { action: "receiveError", id, result });
            (0, index_js_4.assert)(false, "error response", "SERVER_ERROR", { request, response, info: { result } });
          }
          this.emit("debug", { action: "receiveRequest", id, result });
          return result.result;
        }
      }
      /**
       *  Returns %%transaction%% normalized for the Etherscan API.
       */
      _getTransactionPostData(transaction) {
        const result = {};
        for (let key in transaction) {
          if (skipKeys.indexOf(key) >= 0) {
            continue;
          }
          if (transaction[key] == null) {
            continue;
          }
          let value = transaction[key];
          if (key === "type" && value === 0) {
            continue;
          }
          if (key === "blockTag" && value === "latest") {
            continue;
          }
          if ({ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true }[key]) {
            value = (0, index_js_4.toQuantity)(value);
          } else if (key === "accessList") {
            value = "[" + (0, index_js_3.accessListify)(value).map((set) => {
              return `{address:"${set.address}",storageKeys:["${set.storageKeys.join('","')}"]}`;
            }).join(",") + "]";
          } else if (key === "blobVersionedHashes") {
            if (value.length === 0) {
              continue;
            }
            (0, index_js_4.assert)(false, "Etherscan API does not support blobVersionedHashes", "UNSUPPORTED_OPERATION", {
              operation: "_getTransactionPostData",
              info: { transaction }
            });
          } else {
            value = (0, index_js_4.hexlify)(value);
          }
          result[key] = value;
        }
        return result;
      }
      /**
       *  Throws the normalized Etherscan error.
       */
      _checkError(req, error, transaction) {
        let message = "";
        if ((0, index_js_4.isError)(error, "SERVER_ERROR")) {
          try {
            message = error.info.result.error.message;
          } catch (e) {
          }
          if (!message) {
            try {
              message = error.info.message;
            } catch (e) {
            }
          }
        }
        if (req.method === "estimateGas") {
          if (!message.match(/revert/i) && message.match(/insufficient funds/i)) {
            (0, index_js_4.assert)(false, "insufficient funds", "INSUFFICIENT_FUNDS", {
              transaction: req.transaction
            });
          }
        }
        if (req.method === "call" || req.method === "estimateGas") {
          if (message.match(/execution reverted/i)) {
            let data = "";
            try {
              data = error.info.result.error.data;
            } catch (error2) {
            }
            const e = index_js_1.AbiCoder.getBuiltinCallException(req.method, req.transaction, data);
            e.info = { request: req, error };
            throw e;
          }
        }
        if (message) {
          if (req.method === "broadcastTransaction") {
            const transaction2 = index_js_3.Transaction.from(req.signedTransaction);
            if (message.match(/replacement/i) && message.match(/underpriced/i)) {
              (0, index_js_4.assert)(false, "replacement fee too low", "REPLACEMENT_UNDERPRICED", {
                transaction: transaction2
              });
            }
            if (message.match(/insufficient funds/)) {
              (0, index_js_4.assert)(false, "insufficient funds for intrinsic transaction cost", "INSUFFICIENT_FUNDS", {
                transaction: transaction2
              });
            }
            if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {
              (0, index_js_4.assert)(false, "nonce has already been used", "NONCE_EXPIRED", {
                transaction: transaction2
              });
            }
          }
        }
        throw error;
      }
      async _detectNetwork() {
        return this.network;
      }
      async _perform(req) {
        switch (req.method) {
          case "chainId":
            return this.network.chainId;
          case "getBlockNumber":
            return this.fetch("proxy", { action: "eth_blockNumber" });
          case "getGasPrice":
            return this.fetch("proxy", { action: "eth_gasPrice" });
          case "getPriorityFee":
            if (this.network.name === "mainnet") {
              return "1000000000";
            } else if (this.network.name === "optimism") {
              return "1000000";
            } else {
              throw new Error("fallback onto the AbstractProvider default");
            }
          /* Working with Etherscan to get this added:
          try {
              const test = await this.fetch("proxy", {
                  action: "eth_maxPriorityFeePerGas"
              });
              console.log(test);
              return test;
          } catch (e) {
              console.log("DEBUG", e);
              throw e;
          }
          */
          /* This might be safe; but due to rounding neither myself
             or Etherscan are necessarily comfortable with this. :)
          try {
              const result = await this.fetch("gastracker", { action: "gasoracle" });
              console.log(result);
              const gasPrice = parseUnits(result.SafeGasPrice, "gwei");
              const baseFee = parseUnits(result.suggestBaseFee, "gwei");
              const priorityFee = gasPrice - baseFee;
              if (priorityFee < 0) { throw new Error("negative priority fee; defer to abstract provider default"); }
              return priorityFee;
          } catch (error) {
              console.log("DEBUG", error);
              throw error;
          }
          */
          case "getBalance":
            return this.fetch("account", {
              action: "balance",
              address: req.address,
              tag: req.blockTag
            });
          case "getTransactionCount":
            return this.fetch("proxy", {
              action: "eth_getTransactionCount",
              address: req.address,
              tag: req.blockTag
            });
          case "getCode":
            return this.fetch("proxy", {
              action: "eth_getCode",
              address: req.address,
              tag: req.blockTag
            });
          case "getStorage":
            return this.fetch("proxy", {
              action: "eth_getStorageAt",
              address: req.address,
              position: req.position,
              tag: req.blockTag
            });
          case "broadcastTransaction":
            return this.fetch("proxy", {
              action: "eth_sendRawTransaction",
              hex: req.signedTransaction
            }, true).catch((error) => {
              return this._checkError(req, error, req.signedTransaction);
            });
          case "getBlock":
            if ("blockTag" in req) {
              return this.fetch("proxy", {
                action: "eth_getBlockByNumber",
                tag: req.blockTag,
                boolean: req.includeTransactions ? "true" : "false"
              });
            }
            (0, index_js_4.assert)(false, "getBlock by blockHash not supported by Etherscan", "UNSUPPORTED_OPERATION", {
              operation: "getBlock(blockHash)"
            });
          case "getTransaction":
            return this.fetch("proxy", {
              action: "eth_getTransactionByHash",
              txhash: req.hash
            });
          case "getTransactionReceipt":
            return this.fetch("proxy", {
              action: "eth_getTransactionReceipt",
              txhash: req.hash
            });
          case "call": {
            if (req.blockTag !== "latest") {
              throw new Error("EtherscanProvider does not support blockTag for call");
            }
            const postData = this._getTransactionPostData(req.transaction);
            postData.module = "proxy";
            postData.action = "eth_call";
            try {
              return await this.fetch("proxy", postData, true);
            } catch (error) {
              return this._checkError(req, error, req.transaction);
            }
          }
          case "estimateGas": {
            const postData = this._getTransactionPostData(req.transaction);
            postData.module = "proxy";
            postData.action = "eth_estimateGas";
            try {
              return await this.fetch("proxy", postData, true);
            } catch (error) {
              return this._checkError(req, error, req.transaction);
            }
          }
          /*
                      case "getLogs": {
                          // Needs to complain if more than one address is passed in
                          const args: Record<string, any> = { action: "getLogs" }
          
                          if (params.filter.fromBlock) {
                              args.fromBlock = checkLogTag(params.filter.fromBlock);
                          }
          
                          if (params.filter.toBlock) {
                              args.toBlock = checkLogTag(params.filter.toBlock);
                          }
          
                          if (params.filter.address) {
                              args.address = params.filter.address;
                          }
          
                          // @TODO: We can handle slightly more complicated logs using the logs API
                          if (params.filter.topics && params.filter.topics.length > 0) {
                              if (params.filter.topics.length > 1) {
                                  logger.throwError("unsupported topic count", Logger.Errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });
                              }
                              if (params.filter.topics.length === 1) {
                                  const topic0 = params.filter.topics[0];
                                  if (typeof(topic0) !== "string" || topic0.length !== 66) {
                                      logger.throwError("unsupported topic format", Logger.Errors.UNSUPPORTED_OPERATION, { topic0: topic0 });
                                  }
                                  args.topic0 = topic0;
                              }
                          }
          
                          const logs: Array<any> = await this.fetch("logs", args);
          
                          // Cache txHash => blockHash
                          let blocks: { [tag: string]: string } = {};
          
                          // Add any missing blockHash to the logs
                          for (let i = 0; i < logs.length; i++) {
                              const log = logs[i];
                              if (log.blockHash != null) { continue; }
                              if (blocks[log.blockNumber] == null) {
                                  const block = await this.getBlock(log.blockNumber);
                                  if (block) {
                                      blocks[log.blockNumber] = block.hash;
                                  }
                              }
          
                              log.blockHash = blocks[log.blockNumber];
                          }
          
                          return logs;
                      }
          */
          default:
            break;
        }
        return super._perform(req);
      }
      async getNetwork() {
        return this.network;
      }
      /**
       *  Resolves to the current price of ether.
       *
       *  This returns ``0`` on any network other than ``mainnet``.
       */
      async getEtherPrice() {
        if (this.network.name !== "mainnet") {
          return 0;
        }
        return parseFloat((await this.fetch("stats", { action: "ethprice" })).ethusd);
      }
      /**
       *  Resolves to a [Contract]] for %%address%%, using the
       *  Etherscan API to retreive the Contract ABI.
       */
      async getContract(_address) {
        let address = this._getAddress(_address);
        if (isPromise(address)) {
          address = await address;
        }
        try {
          const resp = await this.fetch("contract", {
            action: "getabi",
            address
          });
          const abi = JSON.parse(resp);
          return new index_js_2.Contract(address, abi, this);
        } catch (error) {
          return null;
        }
      }
      isCommunityResource() {
        return this.apiKey == null;
      }
    };
    _plugin = new WeakMap();
    exports2.EtherscanProvider = EtherscanProvider;
  }
});

// node_modules/ethers/lib.commonjs/providers/ws-browser.js
var require_ws_browser = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/ws-browser.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WebSocket = void 0;
    function getGlobal() {
      if (typeof self !== "undefined") {
        return self;
      }
      if (typeof window !== "undefined") {
        return window;
      }
      if (typeof global !== "undefined") {
        return global;
      }
      throw new Error("unable to locate global object");
    }
    var _WebSocket = getGlobal().WebSocket;
    exports2.WebSocket = _WebSocket;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-socket.js
var require_provider_socket = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-socket.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SocketProvider = exports2.SocketEventSubscriber = exports2.SocketPendingSubscriber = exports2.SocketBlockSubscriber = exports2.SocketSubscriber = void 0;
    var abstract_provider_js_1 = require_abstract_provider();
    var index_js_1 = require_utils11();
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    var _provider, _filter, _filterId, _paused, _emitPromise;
    var SocketSubscriber = class {
      /**
       *  Creates a new **SocketSubscriber** attached to %%provider%% listening
       *  to %%filter%%.
       */
      constructor(provider, filter) {
        __privateAdd(this, _provider);
        __privateAdd(this, _filter);
        __privateAdd(this, _filterId);
        __privateAdd(this, _paused);
        __privateAdd(this, _emitPromise);
        __privateSet(this, _provider, provider);
        __privateSet(this, _filter, JSON.stringify(filter));
        __privateSet(this, _filterId, null);
        __privateSet(this, _paused, null);
        __privateSet(this, _emitPromise, null);
      }
      /**
       *  The filter.
       */
      get filter() {
        return JSON.parse(__privateGet(this, _filter));
      }
      start() {
        __privateSet(this, _filterId, __privateGet(this, _provider).send("eth_subscribe", this.filter).then((filterId) => {
          ;
          __privateGet(this, _provider)._register(filterId, this);
          return filterId;
        }));
      }
      stop() {
        __privateGet(this, _filterId).then((filterId) => {
          if (__privateGet(this, _provider).destroyed) {
            return;
          }
          __privateGet(this, _provider).send("eth_unsubscribe", [filterId]);
        });
        __privateSet(this, _filterId, null);
      }
      // @TODO: pause should trap the current blockNumber, unsub, and on resume use getLogs
      //        and resume
      pause(dropWhilePaused) {
        (0, index_js_1.assert)(dropWhilePaused, "preserve logs while paused not supported by SocketSubscriber yet", "UNSUPPORTED_OPERATION", { operation: "pause(false)" });
        __privateSet(this, _paused, !!dropWhilePaused);
      }
      resume() {
        __privateSet(this, _paused, null);
      }
      /**
       *  @_ignore:
       */
      _handleMessage(message) {
        if (__privateGet(this, _filterId) == null) {
          return;
        }
        if (__privateGet(this, _paused) === null) {
          let emitPromise = __privateGet(this, _emitPromise);
          if (emitPromise == null) {
            emitPromise = this._emit(__privateGet(this, _provider), message);
          } else {
            emitPromise = emitPromise.then(async () => {
              await this._emit(__privateGet(this, _provider), message);
            });
          }
          __privateSet(this, _emitPromise, emitPromise.then(() => {
            if (__privateGet(this, _emitPromise) === emitPromise) {
              __privateSet(this, _emitPromise, null);
            }
          }));
        }
      }
      /**
       *  Sub-classes **must** override this to emit the events on the
       *  provider.
       */
      async _emit(provider, message) {
        throw new Error("sub-classes must implemente this; _emit");
      }
    };
    _provider = new WeakMap();
    _filter = new WeakMap();
    _filterId = new WeakMap();
    _paused = new WeakMap();
    _emitPromise = new WeakMap();
    exports2.SocketSubscriber = SocketSubscriber;
    var SocketBlockSubscriber = class extends SocketSubscriber {
      /**
       *  @_ignore:
       */
      constructor(provider) {
        super(provider, ["newHeads"]);
      }
      async _emit(provider, message) {
        provider.emit("block", parseInt(message.number));
      }
    };
    exports2.SocketBlockSubscriber = SocketBlockSubscriber;
    var SocketPendingSubscriber = class extends SocketSubscriber {
      /**
       *  @_ignore:
       */
      constructor(provider) {
        super(provider, ["newPendingTransactions"]);
      }
      async _emit(provider, message) {
        provider.emit("pending", message);
      }
    };
    exports2.SocketPendingSubscriber = SocketPendingSubscriber;
    var _logFilter;
    var SocketEventSubscriber = class extends SocketSubscriber {
      /**
       *  @_ignore:
       */
      constructor(provider, filter) {
        super(provider, ["logs", filter]);
        __privateAdd(this, _logFilter);
        __privateSet(this, _logFilter, JSON.stringify(filter));
      }
      /**
       *  The filter.
       */
      get logFilter() {
        return JSON.parse(__privateGet(this, _logFilter));
      }
      async _emit(provider, message) {
        provider.emit(this.logFilter, provider._wrapLog(message, provider._network));
      }
    };
    _logFilter = new WeakMap();
    exports2.SocketEventSubscriber = SocketEventSubscriber;
    var _callbacks, _subs, _pending;
    var SocketProvider = class extends provider_jsonrpc_js_1.JsonRpcApiProvider {
      /**
       *  Creates a new **SocketProvider** connected to %%network%%.
       *
       *  If unspecified, the network will be discovered.
       */
      constructor(network, _options) {
        const options = Object.assign({}, _options != null ? _options : {});
        (0, index_js_1.assertArgument)(options.batchMaxCount == null || options.batchMaxCount === 1, "sockets-based providers do not support batches", "options.batchMaxCount", _options);
        options.batchMaxCount = 1;
        if (options.staticNetwork == null) {
          options.staticNetwork = true;
        }
        super(network, options);
        __privateAdd(this, _callbacks);
        // Maps each filterId to its subscriber
        __privateAdd(this, _subs);
        // If any events come in before a subscriber has finished
        // registering, queue them
        __privateAdd(this, _pending);
        __privateSet(this, _callbacks, /* @__PURE__ */ new Map());
        __privateSet(this, _subs, /* @__PURE__ */ new Map());
        __privateSet(this, _pending, /* @__PURE__ */ new Map());
      }
      // This value is only valid after _start has been called
      /*
      get _network(): Network {
          if (this.#network == null) {
              throw new Error("this shouldn't happen");
          }
          return this.#network.clone();
      }
      */
      _getSubscriber(sub) {
        switch (sub.type) {
          case "close":
            return new abstract_provider_js_1.UnmanagedSubscriber("close");
          case "block":
            return new SocketBlockSubscriber(this);
          case "pending":
            return new SocketPendingSubscriber(this);
          case "event":
            return new SocketEventSubscriber(this, sub.filter);
          case "orphan":
            if (sub.filter.orphan === "drop-log") {
              return new abstract_provider_js_1.UnmanagedSubscriber("drop-log");
            }
        }
        return super._getSubscriber(sub);
      }
      /**
       *  Register a new subscriber. This is used internalled by Subscribers
       *  and generally is unecessary unless extending capabilities.
       */
      _register(filterId, subscriber) {
        __privateGet(this, _subs).set(filterId, subscriber);
        const pending = __privateGet(this, _pending).get(filterId);
        if (pending) {
          for (const message of pending) {
            subscriber._handleMessage(message);
          }
          __privateGet(this, _pending).delete(filterId);
        }
      }
      async _send(payload) {
        (0, index_js_1.assertArgument)(!Array.isArray(payload), "WebSocket does not support batch send", "payload", payload);
        const promise = new Promise((resolve, reject) => {
          __privateGet(this, _callbacks).set(payload.id, { payload, resolve, reject });
        });
        await this._waitUntilReady();
        await this._write(JSON.stringify(payload));
        return [await promise];
      }
      // Sub-classes must call this once they are connected
      /*
          async _start(): Promise<void> {
              if (this.#ready) { return; }
      
              for (const { payload } of this.#callbacks.values()) {
                  await this._write(JSON.stringify(payload));
              }
      
              this.#ready = (async function() {
                  await super._start();
              })();
          }
          */
      /**
       *  Sub-classes **must** call this with messages received over their
       *  transport to be processed and dispatched.
       */
      async _processMessage(message) {
        const result = JSON.parse(message);
        if (result && typeof result === "object" && "id" in result) {
          const callback = __privateGet(this, _callbacks).get(result.id);
          if (callback == null) {
            this.emit("error", (0, index_js_1.makeError)("received result for unknown id", "UNKNOWN_ERROR", {
              reasonCode: "UNKNOWN_ID",
              result
            }));
            return;
          }
          __privateGet(this, _callbacks).delete(result.id);
          callback.resolve(result);
        } else if (result && result.method === "eth_subscription") {
          const filterId = result.params.subscription;
          const subscriber = __privateGet(this, _subs).get(filterId);
          if (subscriber) {
            subscriber._handleMessage(result.params.result);
          } else {
            let pending = __privateGet(this, _pending).get(filterId);
            if (pending == null) {
              pending = [];
              __privateGet(this, _pending).set(filterId, pending);
            }
            pending.push(result.params.result);
          }
        } else {
          this.emit("error", (0, index_js_1.makeError)("received unexpected message", "UNKNOWN_ERROR", {
            reasonCode: "UNEXPECTED_MESSAGE",
            result
          }));
          return;
        }
      }
      /**
       *  Sub-classes **must** override this to send %%message%% over their
       *  transport.
       */
      async _write(message) {
        throw new Error("sub-classes must override this");
      }
    };
    _callbacks = new WeakMap();
    _subs = new WeakMap();
    _pending = new WeakMap();
    exports2.SocketProvider = SocketProvider;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-websocket.js
var require_provider_websocket = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-websocket.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WebSocketProvider = void 0;
    var ws_js_1 = require_ws_browser();
    var provider_socket_js_1 = require_provider_socket();
    var _connect, _websocket;
    var WebSocketProvider = class extends provider_socket_js_1.SocketProvider {
      constructor(url, network, options) {
        super(network, options);
        __privateAdd(this, _connect);
        __privateAdd(this, _websocket);
        if (typeof url === "string") {
          __privateSet(this, _connect, () => {
            return new ws_js_1.WebSocket(url);
          });
          __privateSet(this, _websocket, __privateGet(this, _connect).call(this));
        } else if (typeof url === "function") {
          __privateSet(this, _connect, url);
          __privateSet(this, _websocket, url());
        } else {
          __privateSet(this, _connect, null);
          __privateSet(this, _websocket, url);
        }
        this.websocket.onopen = async () => {
          try {
            await this._start();
            this.resume();
          } catch (error) {
            console.log("failed to start WebsocketProvider", error);
          }
        };
        this.websocket.onmessage = (message) => {
          this._processMessage(message.data);
        };
      }
      get websocket() {
        if (__privateGet(this, _websocket) == null) {
          throw new Error("websocket closed");
        }
        return __privateGet(this, _websocket);
      }
      async _write(message) {
        this.websocket.send(message);
      }
      async destroy() {
        if (__privateGet(this, _websocket) != null) {
          __privateGet(this, _websocket).close();
          __privateSet(this, _websocket, null);
        }
        super.destroy();
      }
    };
    _connect = new WeakMap();
    _websocket = new WeakMap();
    exports2.WebSocketProvider = WebSocketProvider;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-infura.js
var require_provider_infura = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-infura.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InfuraProvider = exports2.InfuraWebSocketProvider = void 0;
    var index_js_1 = require_utils11();
    var community_js_1 = require_community();
    var network_js_1 = require_network2();
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    var provider_websocket_js_1 = require_provider_websocket();
    var defaultProjectId = "84842078b09946638c03157f83405213";
    function getHost(name) {
      switch (name) {
        case "mainnet":
          return "mainnet.infura.io";
        case "goerli":
          return "goerli.infura.io";
        case "sepolia":
          return "sepolia.infura.io";
        case "arbitrum":
          return "arbitrum-mainnet.infura.io";
        case "arbitrum-goerli":
          return "arbitrum-goerli.infura.io";
        case "arbitrum-sepolia":
          return "arbitrum-sepolia.infura.io";
        case "base":
          return "base-mainnet.infura.io";
        case "base-goerlia":
          return "base-goerli.infura.io";
        case "base-sepolia":
          return "base-sepolia.infura.io";
        case "bnb":
          return "bnbsmartchain-mainnet.infura.io";
        case "bnbt":
          return "bnbsmartchain-testnet.infura.io";
        case "linea":
          return "linea-mainnet.infura.io";
        case "linea-goerli":
          return "linea-goerli.infura.io";
        case "linea-sepolia":
          return "linea-sepolia.infura.io";
        case "matic":
          return "polygon-mainnet.infura.io";
        case "matic-amoy":
          return "polygon-amoy.infura.io";
        case "matic-mumbai":
          return "polygon-mumbai.infura.io";
        case "optimism":
          return "optimism-mainnet.infura.io";
        case "optimism-goerli":
          return "optimism-goerli.infura.io";
        case "optimism-sepolia":
          return "optimism-sepolia.infura.io";
      }
      (0, index_js_1.assertArgument)(false, "unsupported network", "network", name);
    }
    var InfuraWebSocketProvider = class extends provider_websocket_js_1.WebSocketProvider {
      /**
       *  Creates a new **InfuraWebSocketProvider**.
       */
      constructor(network, projectId) {
        const provider = new InfuraProvider(network, projectId);
        const req = provider._getConnection();
        (0, index_js_1.assert)(!req.credentials, "INFURA WebSocket project secrets unsupported", "UNSUPPORTED_OPERATION", { operation: "InfuraProvider.getWebSocketProvider()" });
        const url = req.url.replace(/^http/i, "ws").replace("/v3/", "/ws/v3/");
        super(url, provider._network);
        /**
         *  The Project ID for the INFURA connection.
         */
        __publicField(this, "projectId");
        /**
         *  The Project Secret.
         *
         *  If null, no authenticated requests are made. This should not
         *  be used outside of private contexts.
         */
        __publicField(this, "projectSecret");
        (0, index_js_1.defineProperties)(this, {
          projectId: provider.projectId,
          projectSecret: provider.projectSecret
        });
      }
      isCommunityResource() {
        return this.projectId === defaultProjectId;
      }
    };
    exports2.InfuraWebSocketProvider = InfuraWebSocketProvider;
    var InfuraProvider = class _InfuraProvider extends provider_jsonrpc_js_1.JsonRpcProvider {
      /**
       *  Creates a new **InfuraProvider**.
       */
      constructor(_network, projectId, projectSecret) {
        if (_network == null) {
          _network = "mainnet";
        }
        const network = network_js_1.Network.from(_network);
        if (projectId == null) {
          projectId = defaultProjectId;
        }
        if (projectSecret == null) {
          projectSecret = null;
        }
        const request = _InfuraProvider.getRequest(network, projectId, projectSecret);
        super(request, network, { staticNetwork: network });
        /**
         *  The Project ID for the INFURA connection.
         */
        __publicField(this, "projectId");
        /**
         *  The Project Secret.
         *
         *  If null, no authenticated requests are made. This should not
         *  be used outside of private contexts.
         */
        __publicField(this, "projectSecret");
        (0, index_js_1.defineProperties)(this, { projectId, projectSecret });
      }
      _getProvider(chainId) {
        try {
          return new _InfuraProvider(chainId, this.projectId, this.projectSecret);
        } catch (error) {
        }
        return super._getProvider(chainId);
      }
      isCommunityResource() {
        return this.projectId === defaultProjectId;
      }
      /**
       *  Creates a new **InfuraWebSocketProvider**.
       */
      static getWebSocketProvider(network, projectId) {
        return new InfuraWebSocketProvider(network, projectId);
      }
      /**
       *  Returns a prepared request for connecting to %%network%%
       *  with %%projectId%% and %%projectSecret%%.
       */
      static getRequest(network, projectId, projectSecret) {
        if (projectId == null) {
          projectId = defaultProjectId;
        }
        if (projectSecret == null) {
          projectSecret = null;
        }
        const request = new index_js_1.FetchRequest(`https://${getHost(network.name)}/v3/${projectId}`);
        request.allowGzip = true;
        if (projectSecret) {
          request.setCredentials("", projectSecret);
        }
        if (projectId === defaultProjectId) {
          request.retryFunc = async (request2, response, attempt) => {
            (0, community_js_1.showThrottleMessage)("InfuraProvider");
            return true;
          };
        }
        return request;
      }
    };
    exports2.InfuraProvider = InfuraProvider;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-quicknode.js
var require_provider_quicknode = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-quicknode.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.QuickNodeProvider = void 0;
    var index_js_1 = require_utils11();
    var community_js_1 = require_community();
    var network_js_1 = require_network2();
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    var defaultToken = "919b412a057b5e9c9b6dce193c5a60242d6efadb";
    function getHost(name) {
      switch (name) {
        case "mainnet":
          return "ethers.quiknode.pro";
        case "goerli":
          return "ethers.ethereum-goerli.quiknode.pro";
        case "sepolia":
          return "ethers.ethereum-sepolia.quiknode.pro";
        case "holesky":
          return "ethers.ethereum-holesky.quiknode.pro";
        case "arbitrum":
          return "ethers.arbitrum-mainnet.quiknode.pro";
        case "arbitrum-goerli":
          return "ethers.arbitrum-goerli.quiknode.pro";
        case "arbitrum-sepolia":
          return "ethers.arbitrum-sepolia.quiknode.pro";
        case "base":
          return "ethers.base-mainnet.quiknode.pro";
        case "base-goerli":
          return "ethers.base-goerli.quiknode.pro";
        case "base-spolia":
          return "ethers.base-sepolia.quiknode.pro";
        case "bnb":
          return "ethers.bsc.quiknode.pro";
        case "bnbt":
          return "ethers.bsc-testnet.quiknode.pro";
        case "matic":
          return "ethers.matic.quiknode.pro";
        case "matic-mumbai":
          return "ethers.matic-testnet.quiknode.pro";
        case "optimism":
          return "ethers.optimism.quiknode.pro";
        case "optimism-goerli":
          return "ethers.optimism-goerli.quiknode.pro";
        case "optimism-sepolia":
          return "ethers.optimism-sepolia.quiknode.pro";
        case "xdai":
          return "ethers.xdai.quiknode.pro";
      }
      (0, index_js_1.assertArgument)(false, "unsupported network", "network", name);
    }
    var QuickNodeProvider = class _QuickNodeProvider extends provider_jsonrpc_js_1.JsonRpcProvider {
      /**
       *  Creates a new **QuickNodeProvider**.
       */
      constructor(_network, token) {
        if (_network == null) {
          _network = "mainnet";
        }
        const network = network_js_1.Network.from(_network);
        if (token == null) {
          token = defaultToken;
        }
        const request = _QuickNodeProvider.getRequest(network, token);
        super(request, network, { staticNetwork: network });
        /**
         *  The API token.
         */
        __publicField(this, "token");
        (0, index_js_1.defineProperties)(this, { token });
      }
      _getProvider(chainId) {
        try {
          return new _QuickNodeProvider(chainId, this.token);
        } catch (error) {
        }
        return super._getProvider(chainId);
      }
      isCommunityResource() {
        return this.token === defaultToken;
      }
      /**
       *  Returns a new request prepared for %%network%% and the
       *  %%token%%.
       */
      static getRequest(network, token) {
        if (token == null) {
          token = defaultToken;
        }
        const request = new index_js_1.FetchRequest(`https://${getHost(network.name)}/${token}`);
        request.allowGzip = true;
        if (token === defaultToken) {
          request.retryFunc = async (request2, response, attempt) => {
            (0, community_js_1.showThrottleMessage)("QuickNodeProvider");
            return true;
          };
        }
        return request;
      }
    };
    exports2.QuickNodeProvider = QuickNodeProvider;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-fallback.js
var require_provider_fallback = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-fallback.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FallbackProvider = void 0;
    var index_js_1 = require_utils11();
    var abstract_provider_js_1 = require_abstract_provider();
    var network_js_1 = require_network2();
    var BN_1 = BigInt("1");
    var BN_2 = BigInt("2");
    function shuffle(array2) {
      for (let i = array2.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        const tmp = array2[i];
        array2[i] = array2[j];
        array2[j] = tmp;
      }
    }
    function stall(duration) {
      return new Promise((resolve) => {
        setTimeout(resolve, duration);
      });
    }
    function getTime() {
      return (/* @__PURE__ */ new Date()).getTime();
    }
    function stringify2(value) {
      return JSON.stringify(value, (key, value2) => {
        if (typeof value2 === "bigint") {
          return { type: "bigint", value: value2.toString() };
        }
        return value2;
      });
    }
    var defaultConfig = { stallTimeout: 400, priority: 1, weight: 1 };
    var defaultState = {
      blockNumber: -2,
      requests: 0,
      lateResponses: 0,
      errorResponses: 0,
      outOfSync: -1,
      unsupportedEvents: 0,
      rollingDuration: 0,
      score: 0,
      _network: null,
      _updateNumber: null,
      _totalTime: 0,
      _lastFatalError: null,
      _lastFatalErrorTimestamp: 0
    };
    async function waitForSync(config, blockNumber) {
      while (config.blockNumber < 0 || config.blockNumber < blockNumber) {
        if (!config._updateNumber) {
          config._updateNumber = (async () => {
            try {
              const blockNumber2 = await config.provider.getBlockNumber();
              if (blockNumber2 > config.blockNumber) {
                config.blockNumber = blockNumber2;
              }
            } catch (error) {
              config.blockNumber = -2;
              config._lastFatalError = error;
              config._lastFatalErrorTimestamp = getTime();
            }
            config._updateNumber = null;
          })();
        }
        await config._updateNumber;
        config.outOfSync++;
        if (config._lastFatalError) {
          break;
        }
      }
    }
    function _normalize(value) {
      if (value == null) {
        return "null";
      }
      if (Array.isArray(value)) {
        return "[" + value.map(_normalize).join(",") + "]";
      }
      if (typeof value === "object" && typeof value.toJSON === "function") {
        return _normalize(value.toJSON());
      }
      switch (typeof value) {
        case "boolean":
        case "symbol":
          return value.toString();
        case "bigint":
        case "number":
          return BigInt(value).toString();
        case "string":
          return JSON.stringify(value);
        case "object": {
          const keys = Object.keys(value);
          keys.sort();
          return "{" + keys.map((k) => `${JSON.stringify(k)}:${_normalize(value[k])}`).join(",") + "}";
        }
      }
      console.log("Could not serialize", value);
      throw new Error("Hmm...");
    }
    function normalizeResult(value) {
      if ("error" in value) {
        const error = value.error;
        return { tag: _normalize(error), value: error };
      }
      const result = value.result;
      return { tag: _normalize(result), value: result };
    }
    function checkQuorum(quorum, results) {
      const tally = /* @__PURE__ */ new Map();
      for (const { value, tag, weight } of results) {
        const t = tally.get(tag) || { value, weight: 0 };
        t.weight += weight;
        tally.set(tag, t);
      }
      let best = null;
      for (const r of tally.values()) {
        if (r.weight >= quorum && (!best || r.weight > best.weight)) {
          best = r;
        }
      }
      if (best) {
        return best.value;
      }
      return void 0;
    }
    function getMedian(quorum, results) {
      let resultWeight = 0;
      const errorMap = /* @__PURE__ */ new Map();
      let bestError = null;
      const values = [];
      for (const { value, tag, weight } of results) {
        if (value instanceof Error) {
          const e = errorMap.get(tag) || { value, weight: 0 };
          e.weight += weight;
          errorMap.set(tag, e);
          if (bestError == null || e.weight > bestError.weight) {
            bestError = e;
          }
        } else {
          values.push(BigInt(value));
          resultWeight += weight;
        }
      }
      if (resultWeight < quorum) {
        if (bestError && bestError.weight >= quorum) {
          return bestError.value;
        }
        return void 0;
      }
      values.sort((a, b) => a < b ? -1 : b > a ? 1 : 0);
      const mid = Math.floor(values.length / 2);
      if (values.length % 2) {
        return values[mid];
      }
      return (values[mid - 1] + values[mid] + BN_1) / BN_2;
    }
    function getAnyResult(quorum, results) {
      const result = checkQuorum(quorum, results);
      if (result !== void 0) {
        return result;
      }
      for (const r of results) {
        if (r.value) {
          return r.value;
        }
      }
      return void 0;
    }
    function getFuzzyMode(quorum, results) {
      if (quorum === 1) {
        return (0, index_js_1.getNumber)(getMedian(quorum, results), "%internal");
      }
      const tally = /* @__PURE__ */ new Map();
      const add = (result, weight) => {
        const t = tally.get(result) || { result, weight: 0 };
        t.weight += weight;
        tally.set(result, t);
      };
      for (const { weight, value } of results) {
        const r = (0, index_js_1.getNumber)(value);
        add(r - 1, weight);
        add(r, weight);
        add(r + 1, weight);
      }
      let bestWeight = 0;
      let bestResult = void 0;
      for (const { weight, result } of tally.values()) {
        if (weight >= quorum && (weight > bestWeight || bestResult != null && weight === bestWeight && result > bestResult)) {
          bestWeight = weight;
          bestResult = result;
        }
      }
      return bestResult;
    }
    var _configs, _height, _initialSyncPromise, _FallbackProvider_instances, getNextConfig_fn, addRunner_fn, initialSync_fn, checkQuorum_fn, waitForQuorum_fn;
    var FallbackProvider = class extends abstract_provider_js_1.AbstractProvider {
      /**
       *  Creates a new **FallbackProvider** with %%providers%% connected to
       *  %%network%%.
       *
       *  If a [[Provider]] is included in %%providers%%, defaults are used
       *  for the configuration.
       */
      constructor(providers, network, options) {
        super(network, options);
        __privateAdd(this, _FallbackProvider_instances);
        /**
         *  The number of backends that must agree on a value before it is
         *  accpeted.
         */
        __publicField(this, "quorum");
        /**
         *  @_ignore:
         */
        __publicField(this, "eventQuorum");
        /**
         *  @_ignore:
         */
        __publicField(this, "eventWorkers");
        __privateAdd(this, _configs);
        __privateAdd(this, _height);
        __privateAdd(this, _initialSyncPromise);
        __privateSet(this, _configs, providers.map((p) => {
          if (p instanceof abstract_provider_js_1.AbstractProvider) {
            return Object.assign({ provider: p }, defaultConfig, defaultState);
          } else {
            return Object.assign({}, defaultConfig, p, defaultState);
          }
        }));
        __privateSet(this, _height, -2);
        __privateSet(this, _initialSyncPromise, null);
        if (options && options.quorum != null) {
          this.quorum = options.quorum;
        } else {
          this.quorum = Math.ceil(__privateGet(this, _configs).reduce((accum, config) => {
            accum += config.weight;
            return accum;
          }, 0) / 2);
        }
        this.eventQuorum = 1;
        this.eventWorkers = 1;
        (0, index_js_1.assertArgument)(this.quorum <= __privateGet(this, _configs).reduce((a, c) => a + c.weight, 0), "quorum exceed provider weight", "quorum", this.quorum);
      }
      get providerConfigs() {
        return __privateGet(this, _configs).map((c) => {
          const result = Object.assign({}, c);
          for (const key in result) {
            if (key[0] === "_") {
              delete result[key];
            }
          }
          return result;
        });
      }
      async _detectNetwork() {
        return network_js_1.Network.from((0, index_js_1.getBigInt)(await this._perform({ method: "chainId" })));
      }
      // @TODO: Add support to select providers to be the event subscriber
      //_getSubscriber(sub: Subscription): Subscriber {
      //    throw new Error("@TODO");
      //}
      /**
       *  Transforms a %%req%% into the correct method call on %%provider%%.
       */
      async _translatePerform(provider, req) {
        switch (req.method) {
          case "broadcastTransaction":
            return await provider.broadcastTransaction(req.signedTransaction);
          case "call":
            return await provider.call(Object.assign({}, req.transaction, { blockTag: req.blockTag }));
          case "chainId":
            return (await provider.getNetwork()).chainId;
          case "estimateGas":
            return await provider.estimateGas(req.transaction);
          case "getBalance":
            return await provider.getBalance(req.address, req.blockTag);
          case "getBlock": {
            const block = "blockHash" in req ? req.blockHash : req.blockTag;
            return await provider.getBlock(block, req.includeTransactions);
          }
          case "getBlockNumber":
            return await provider.getBlockNumber();
          case "getCode":
            return await provider.getCode(req.address, req.blockTag);
          case "getGasPrice":
            return (await provider.getFeeData()).gasPrice;
          case "getPriorityFee":
            return (await provider.getFeeData()).maxPriorityFeePerGas;
          case "getLogs":
            return await provider.getLogs(req.filter);
          case "getStorage":
            return await provider.getStorage(req.address, req.position, req.blockTag);
          case "getTransaction":
            return await provider.getTransaction(req.hash);
          case "getTransactionCount":
            return await provider.getTransactionCount(req.address, req.blockTag);
          case "getTransactionReceipt":
            return await provider.getTransactionReceipt(req.hash);
          case "getTransactionResult":
            return await provider.getTransactionResult(req.hash);
        }
      }
      async _perform(req) {
        if (req.method === "broadcastTransaction") {
          const results = __privateGet(this, _configs).map((c) => null);
          const broadcasts = __privateGet(this, _configs).map(async ({ provider, weight }, index) => {
            try {
              const result3 = await provider._perform(req);
              results[index] = Object.assign(normalizeResult({ result: result3 }), { weight });
            } catch (error) {
              results[index] = Object.assign(normalizeResult({ error }), { weight });
            }
          });
          while (true) {
            const done = results.filter((r) => r != null);
            for (const { value } of done) {
              if (!(value instanceof Error)) {
                return value;
              }
            }
            const result3 = checkQuorum(this.quorum, results.filter((r) => r != null));
            if ((0, index_js_1.isError)(result3, "INSUFFICIENT_FUNDS")) {
              throw result3;
            }
            const waiting = broadcasts.filter((b, i) => results[i] == null);
            if (waiting.length === 0) {
              break;
            }
            await Promise.race(waiting);
          }
          const result2 = getAnyResult(this.quorum, results);
          (0, index_js_1.assert)(result2 !== void 0, "problem multi-broadcasting", "SERVER_ERROR", {
            request: "%sub-requests",
            info: { request: req, results: results.map(stringify2) }
          });
          if (result2 instanceof Error) {
            throw result2;
          }
          return result2;
        }
        await __privateMethod(this, _FallbackProvider_instances, initialSync_fn).call(this);
        const running = /* @__PURE__ */ new Set();
        let inflightQuorum = 0;
        while (true) {
          const runner = __privateMethod(this, _FallbackProvider_instances, addRunner_fn).call(this, running, req);
          if (runner == null) {
            break;
          }
          inflightQuorum += runner.config.weight;
          if (inflightQuorum >= this.quorum) {
            break;
          }
        }
        const result = await __privateMethod(this, _FallbackProvider_instances, waitForQuorum_fn).call(this, running, req);
        for (const runner of running) {
          if (runner.perform && runner.result == null) {
            runner.config.lateResponses++;
          }
        }
        return result;
      }
      async destroy() {
        for (const { provider } of __privateGet(this, _configs)) {
          provider.destroy();
        }
        super.destroy();
      }
    };
    _configs = new WeakMap();
    _height = new WeakMap();
    _initialSyncPromise = new WeakMap();
    _FallbackProvider_instances = new WeakSet();
    // Grab the next (random) config that is not already part of
    // the running set
    getNextConfig_fn = function(running) {
      const configs = Array.from(running).map((r) => r.config);
      const allConfigs = __privateGet(this, _configs).slice();
      shuffle(allConfigs);
      allConfigs.sort((a, b) => a.priority - b.priority);
      for (const config of allConfigs) {
        if (config._lastFatalError) {
          continue;
        }
        if (configs.indexOf(config) === -1) {
          return config;
        }
      }
      return null;
    };
    // Adds a new runner (if available) to running.
    addRunner_fn = function(running, req) {
      const config = __privateMethod(this, _FallbackProvider_instances, getNextConfig_fn).call(this, running);
      if (config == null) {
        return null;
      }
      const runner = {
        config,
        result: null,
        didBump: false,
        perform: null,
        staller: null
      };
      const now = getTime();
      runner.perform = (async () => {
        try {
          config.requests++;
          const result = await this._translatePerform(config.provider, req);
          runner.result = { result };
        } catch (error) {
          config.errorResponses++;
          runner.result = { error };
        }
        const dt = getTime() - now;
        config._totalTime += dt;
        config.rollingDuration = 0.95 * config.rollingDuration + 0.05 * dt;
        runner.perform = null;
      })();
      runner.staller = (async () => {
        await stall(config.stallTimeout);
        runner.staller = null;
      })();
      running.add(runner);
      return runner;
    };
    initialSync_fn = async function() {
      let initialSync = __privateGet(this, _initialSyncPromise);
      if (!initialSync) {
        const promises = [];
        __privateGet(this, _configs).forEach((config) => {
          promises.push((async () => {
            await waitForSync(config, 0);
            if (!config._lastFatalError) {
              config._network = await config.provider.getNetwork();
            }
          })());
        });
        __privateSet(this, _initialSyncPromise, initialSync = (async () => {
          await Promise.all(promises);
          let chainId = null;
          for (const config of __privateGet(this, _configs)) {
            if (config._lastFatalError) {
              continue;
            }
            const network = config._network;
            if (chainId == null) {
              chainId = network.chainId;
            } else if (network.chainId !== chainId) {
              (0, index_js_1.assert)(false, "cannot mix providers on different networks", "UNSUPPORTED_OPERATION", {
                operation: "new FallbackProvider"
              });
            }
          }
        })());
      }
      await initialSync;
    };
    checkQuorum_fn = async function(running, req) {
      const results = [];
      for (const runner of running) {
        if (runner.result != null) {
          const { tag, value } = normalizeResult(runner.result);
          results.push({ tag, value, weight: runner.config.weight });
        }
      }
      if (results.reduce((a, r) => a + r.weight, 0) < this.quorum) {
        return void 0;
      }
      switch (req.method) {
        case "getBlockNumber": {
          if (__privateGet(this, _height) === -2) {
            __privateSet(this, _height, Math.ceil((0, index_js_1.getNumber)(getMedian(this.quorum, __privateGet(this, _configs).filter((c) => !c._lastFatalError).map((c) => ({
              value: c.blockNumber,
              tag: (0, index_js_1.getNumber)(c.blockNumber).toString(),
              weight: c.weight
            }))))));
          }
          const mode = getFuzzyMode(this.quorum, results);
          if (mode === void 0) {
            return void 0;
          }
          if (mode > __privateGet(this, _height)) {
            __privateSet(this, _height, mode);
          }
          return __privateGet(this, _height);
        }
        case "getGasPrice":
        case "getPriorityFee":
        case "estimateGas":
          return getMedian(this.quorum, results);
        case "getBlock":
          if ("blockTag" in req && req.blockTag === "pending") {
            return getAnyResult(this.quorum, results);
          }
          return checkQuorum(this.quorum, results);
        case "call":
        case "chainId":
        case "getBalance":
        case "getTransactionCount":
        case "getCode":
        case "getStorage":
        case "getTransaction":
        case "getTransactionReceipt":
        case "getLogs":
          return checkQuorum(this.quorum, results);
        case "broadcastTransaction":
          return getAnyResult(this.quorum, results);
      }
      (0, index_js_1.assert)(false, "unsupported method", "UNSUPPORTED_OPERATION", {
        operation: `_perform(${stringify2(req.method)})`
      });
    };
    waitForQuorum_fn = async function(running, req) {
      if (running.size === 0) {
        throw new Error("no runners?!");
      }
      const interesting = [];
      let newRunners = 0;
      for (const runner of running) {
        if (runner.perform) {
          interesting.push(runner.perform);
        }
        if (runner.staller) {
          interesting.push(runner.staller);
          continue;
        }
        if (runner.didBump) {
          continue;
        }
        runner.didBump = true;
        newRunners++;
      }
      const value = await __privateMethod(this, _FallbackProvider_instances, checkQuorum_fn).call(this, running, req);
      if (value !== void 0) {
        if (value instanceof Error) {
          throw value;
        }
        return value;
      }
      for (let i = 0; i < newRunners; i++) {
        __privateMethod(this, _FallbackProvider_instances, addRunner_fn).call(this, running, req);
      }
      (0, index_js_1.assert)(interesting.length > 0, "quorum not met", "SERVER_ERROR", {
        request: "%sub-requests",
        info: { request: req, results: Array.from(running).map((r) => stringify2(r.result)) }
      });
      await Promise.race(interesting);
      return await __privateMethod(this, _FallbackProvider_instances, waitForQuorum_fn).call(this, running, req);
    };
    exports2.FallbackProvider = FallbackProvider;
  }
});

// node_modules/ethers/lib.commonjs/providers/default-provider.js
var require_default_provider = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/default-provider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getDefaultProvider = void 0;
    var index_js_1 = require_utils11();
    var provider_ankr_js_1 = require_provider_ankr();
    var provider_alchemy_js_1 = require_provider_alchemy();
    var provider_chainstack_js_1 = require_provider_chainstack();
    var provider_cloudflare_js_1 = require_provider_cloudflare();
    var provider_etherscan_js_1 = require_provider_etherscan();
    var provider_infura_js_1 = require_provider_infura();
    var provider_quicknode_js_1 = require_provider_quicknode();
    var provider_fallback_js_1 = require_provider_fallback();
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    var network_js_1 = require_network2();
    var provider_websocket_js_1 = require_provider_websocket();
    function isWebSocketLike(value) {
      return value && typeof value.send === "function" && typeof value.close === "function";
    }
    var Testnets = "goerli kovan sepolia classicKotti optimism-goerli arbitrum-goerli matic-mumbai bnbt".split(" ");
    function getDefaultProvider(network, options) {
      if (options == null) {
        options = {};
      }
      const allowService = (name) => {
        if (options[name] === "-") {
          return false;
        }
        if (typeof options.exclusive === "string") {
          return name === options.exclusive;
        }
        if (Array.isArray(options.exclusive)) {
          return options.exclusive.indexOf(name) !== -1;
        }
        return true;
      };
      if (typeof network === "string" && network.match(/^https?:/)) {
        return new provider_jsonrpc_js_1.JsonRpcProvider(network);
      }
      if (typeof network === "string" && network.match(/^wss?:/) || isWebSocketLike(network)) {
        return new provider_websocket_js_1.WebSocketProvider(network);
      }
      let staticNetwork = null;
      try {
        staticNetwork = network_js_1.Network.from(network);
      } catch (error) {
      }
      const providers = [];
      if (allowService("publicPolygon") && staticNetwork) {
        if (staticNetwork.name === "matic") {
          providers.push(new provider_jsonrpc_js_1.JsonRpcProvider("https://polygon-rpc.com/", staticNetwork, { staticNetwork }));
        } else if (staticNetwork.name === "matic-amoy") {
          providers.push(new provider_jsonrpc_js_1.JsonRpcProvider("https://rpc-amoy.polygon.technology/", staticNetwork, { staticNetwork }));
        }
      }
      if (allowService("alchemy")) {
        try {
          providers.push(new provider_alchemy_js_1.AlchemyProvider(network, options.alchemy));
        } catch (error) {
        }
      }
      if (allowService("ankr") && options.ankr != null) {
        try {
          providers.push(new provider_ankr_js_1.AnkrProvider(network, options.ankr));
        } catch (error) {
        }
      }
      if (allowService("chainstack")) {
        try {
          providers.push(new provider_chainstack_js_1.ChainstackProvider(network, options.chainstack));
        } catch (error) {
        }
      }
      if (allowService("cloudflare")) {
        try {
          providers.push(new provider_cloudflare_js_1.CloudflareProvider(network));
        } catch (error) {
        }
      }
      if (allowService("etherscan")) {
        try {
          providers.push(new provider_etherscan_js_1.EtherscanProvider(network, options.etherscan));
        } catch (error) {
        }
      }
      if (allowService("infura")) {
        try {
          let projectId = options.infura;
          let projectSecret = void 0;
          if (typeof projectId === "object") {
            projectSecret = projectId.projectSecret;
            projectId = projectId.projectId;
          }
          providers.push(new provider_infura_js_1.InfuraProvider(network, projectId, projectSecret));
        } catch (error) {
        }
      }
      if (allowService("quicknode")) {
        try {
          let token = options.quicknode;
          providers.push(new provider_quicknode_js_1.QuickNodeProvider(network, token));
        } catch (error) {
        }
      }
      (0, index_js_1.assert)(providers.length, "unsupported default network", "UNSUPPORTED_OPERATION", {
        operation: "getDefaultProvider"
      });
      if (providers.length === 1) {
        return providers[0];
      }
      let quorum = Math.floor(providers.length / 2);
      if (quorum > 2) {
        quorum = 2;
      }
      if (staticNetwork && Testnets.indexOf(staticNetwork.name) !== -1) {
        quorum = 1;
      }
      if (options && options.quorum) {
        quorum = options.quorum;
      }
      return new provider_fallback_js_1.FallbackProvider(providers, void 0, { quorum });
    }
    exports2.getDefaultProvider = getDefaultProvider;
  }
});

// node_modules/ethers/lib.commonjs/providers/signer-noncemanager.js
var require_signer_noncemanager = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/signer-noncemanager.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NonceManager = void 0;
    var index_js_1 = require_utils11();
    var abstract_signer_js_1 = require_abstract_signer();
    var _noncePromise, _delta;
    var _NonceManager = class _NonceManager extends abstract_signer_js_1.AbstractSigner {
      /**
       *  Creates a new **NonceManager** to manage %%signer%%.
       */
      constructor(signer) {
        super(signer.provider);
        /**
         *  The Signer being managed.
         */
        __publicField(this, "signer");
        __privateAdd(this, _noncePromise);
        __privateAdd(this, _delta);
        (0, index_js_1.defineProperties)(this, { signer });
        __privateSet(this, _noncePromise, null);
        __privateSet(this, _delta, 0);
      }
      async getAddress() {
        return this.signer.getAddress();
      }
      connect(provider) {
        return new _NonceManager(this.signer.connect(provider));
      }
      async getNonce(blockTag) {
        if (blockTag === "pending") {
          if (__privateGet(this, _noncePromise) == null) {
            __privateSet(this, _noncePromise, super.getNonce("pending"));
          }
          const delta = __privateGet(this, _delta);
          return await __privateGet(this, _noncePromise) + delta;
        }
        return super.getNonce(blockTag);
      }
      /**
       *  Manually increment the nonce. This may be useful when managng
       *  offline transactions.
       */
      increment() {
        __privateWrapper(this, _delta)._++;
      }
      /**
       *  Resets the nonce, causing the **NonceManager** to reload the current
       *  nonce from the blockchain on the next transaction.
       */
      reset() {
        __privateSet(this, _delta, 0);
        __privateSet(this, _noncePromise, null);
      }
      async sendTransaction(tx) {
        const noncePromise = this.getNonce("pending");
        this.increment();
        tx = await this.signer.populateTransaction(tx);
        tx.nonce = await noncePromise;
        return await this.signer.sendTransaction(tx);
      }
      signTransaction(tx) {
        return this.signer.signTransaction(tx);
      }
      signMessage(message) {
        return this.signer.signMessage(message);
      }
      signTypedData(domain, types, value) {
        return this.signer.signTypedData(domain, types, value);
      }
    };
    _noncePromise = new WeakMap();
    _delta = new WeakMap();
    var NonceManager = _NonceManager;
    exports2.NonceManager = NonceManager;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-browser.js
var require_provider_browser = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-browser.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BrowserProvider = void 0;
    var index_js_1 = require_utils11();
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    var _request;
    var BrowserProvider = class extends provider_jsonrpc_js_1.JsonRpcApiPollingProvider {
      /**
       *  Connect to the %%ethereum%% provider, optionally forcing the
       *  %%network%%.
       */
      constructor(ethereum, network, _options) {
        const options = Object.assign({}, _options != null ? _options : {}, { batchMaxCount: 1 });
        (0, index_js_1.assertArgument)(ethereum && ethereum.request, "invalid EIP-1193 provider", "ethereum", ethereum);
        super(network, options);
        __privateAdd(this, _request);
        __privateSet(this, _request, async (method2, params) => {
          const payload = { method: method2, params };
          this.emit("debug", { action: "sendEip1193Request", payload });
          try {
            const result = await ethereum.request(payload);
            this.emit("debug", { action: "receiveEip1193Result", result });
            return result;
          } catch (e) {
            const error = new Error(e.message);
            error.code = e.code;
            error.data = e.data;
            error.payload = payload;
            this.emit("debug", { action: "receiveEip1193Error", error });
            throw error;
          }
        });
      }
      async send(method2, params) {
        await this._start();
        return await super.send(method2, params);
      }
      async _send(payload) {
        (0, index_js_1.assertArgument)(!Array.isArray(payload), "EIP-1193 does not support batch request", "payload", payload);
        try {
          const result = await __privateGet(this, _request).call(this, payload.method, payload.params || []);
          return [{ id: payload.id, result }];
        } catch (e) {
          return [{
            id: payload.id,
            error: { code: e.code, data: e.data, message: e.message }
          }];
        }
      }
      getRpcError(payload, error) {
        error = JSON.parse(JSON.stringify(error));
        switch (error.error.code || -1) {
          case 4001:
            error.error.message = `ethers-user-denied: ${error.error.message}`;
            break;
          case 4200:
            error.error.message = `ethers-unsupported: ${error.error.message}`;
            break;
        }
        return super.getRpcError(payload, error);
      }
      /**
       *  Resolves to ``true`` if the provider manages the %%address%%.
       */
      async hasSigner(address) {
        if (address == null) {
          address = 0;
        }
        const accounts = await this.send("eth_accounts", []);
        if (typeof address === "number") {
          return accounts.length > address;
        }
        address = address.toLowerCase();
        return accounts.filter((a) => a.toLowerCase() === address).length !== 0;
      }
      async getSigner(address) {
        if (address == null) {
          address = 0;
        }
        if (!await this.hasSigner(address)) {
          try {
            await __privateGet(this, _request).call(this, "eth_requestAccounts", []);
          } catch (error) {
            const payload = error.payload;
            throw this.getRpcError(payload, { id: payload.id, error });
          }
        }
        return await super.getSigner(address);
      }
    };
    _request = new WeakMap();
    exports2.BrowserProvider = BrowserProvider;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-pocket.js
var require_provider_pocket = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-pocket.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PocketProvider = void 0;
    var index_js_1 = require_utils11();
    var community_js_1 = require_community();
    var network_js_1 = require_network2();
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    var defaultApplicationId = "62e1ad51b37b8e00394bda3b";
    function getHost(name) {
      switch (name) {
        case "mainnet":
          return "eth-mainnet.gateway.pokt.network";
        case "goerli":
          return "eth-goerli.gateway.pokt.network";
        case "matic":
          return "poly-mainnet.gateway.pokt.network";
        case "matic-mumbai":
          return "polygon-mumbai-rpc.gateway.pokt.network";
      }
      (0, index_js_1.assertArgument)(false, "unsupported network", "network", name);
    }
    var PocketProvider = class _PocketProvider extends provider_jsonrpc_js_1.JsonRpcProvider {
      /**
       *  Create a new **PocketProvider**.
       *
       *  By default connecting to ``mainnet`` with a highly throttled
       *  API key.
       */
      constructor(_network, applicationId, applicationSecret) {
        if (_network == null) {
          _network = "mainnet";
        }
        const network = network_js_1.Network.from(_network);
        if (applicationId == null) {
          applicationId = defaultApplicationId;
        }
        if (applicationSecret == null) {
          applicationSecret = null;
        }
        const options = { staticNetwork: network };
        const request = _PocketProvider.getRequest(network, applicationId, applicationSecret);
        super(request, network, options);
        /**
         *  The Application ID for the Pocket connection.
         */
        __publicField(this, "applicationId");
        /**
         *  The Application Secret for making authenticated requests
         *  to the Pocket connection.
         */
        __publicField(this, "applicationSecret");
        (0, index_js_1.defineProperties)(this, { applicationId, applicationSecret });
      }
      _getProvider(chainId) {
        try {
          return new _PocketProvider(chainId, this.applicationId, this.applicationSecret);
        } catch (error) {
        }
        return super._getProvider(chainId);
      }
      /**
       *  Returns a prepared request for connecting to %%network%% with
       *  %%applicationId%%.
       */
      static getRequest(network, applicationId, applicationSecret) {
        if (applicationId == null) {
          applicationId = defaultApplicationId;
        }
        const request = new index_js_1.FetchRequest(`https://${getHost(network.name)}/v1/lb/${applicationId}`);
        request.allowGzip = true;
        if (applicationSecret) {
          request.setCredentials("", applicationSecret);
        }
        if (applicationId === defaultApplicationId) {
          request.retryFunc = async (request2, response, attempt) => {
            (0, community_js_1.showThrottleMessage)("PocketProvider");
            return true;
          };
        }
        return request;
      }
      isCommunityResource() {
        return this.applicationId === defaultApplicationId;
      }
    };
    exports2.PocketProvider = PocketProvider;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-ipcsocket-browser.js
var require_provider_ipcsocket_browser = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-ipcsocket-browser.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IpcSocketProvider = void 0;
    var IpcSocketProvider = void 0;
    exports2.IpcSocketProvider = IpcSocketProvider;
  }
});

// node_modules/ethers/lib.commonjs/providers/index.js
var require_providers = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SocketEventSubscriber = exports2.SocketPendingSubscriber = exports2.SocketBlockSubscriber = exports2.SocketSubscriber = exports2.WebSocketProvider = exports2.SocketProvider = exports2.IpcSocketProvider = exports2.QuickNodeProvider = exports2.PocketProvider = exports2.InfuraWebSocketProvider = exports2.InfuraProvider = exports2.EtherscanPlugin = exports2.EtherscanProvider = exports2.ChainstackProvider = exports2.CloudflareProvider = exports2.AnkrProvider = exports2.AlchemyProvider = exports2.BrowserProvider = exports2.JsonRpcSigner = exports2.JsonRpcProvider = exports2.JsonRpcApiProvider = exports2.FallbackProvider = exports2.copyRequest = exports2.TransactionResponse = exports2.TransactionReceipt = exports2.Log = exports2.FeeData = exports2.Block = exports2.FetchUrlFeeDataNetworkPlugin = exports2.FeeDataNetworkPlugin = exports2.EnsPlugin = exports2.GasCostPlugin = exports2.NetworkPlugin = exports2.NonceManager = exports2.Network = exports2.MulticoinProviderPlugin = exports2.EnsResolver = exports2.getDefaultProvider = exports2.showThrottleMessage = exports2.VoidSigner = exports2.AbstractSigner = exports2.UnmanagedSubscriber = exports2.AbstractProvider = void 0;
    var abstract_provider_js_1 = require_abstract_provider();
    Object.defineProperty(exports2, "AbstractProvider", { enumerable: true, get: function() {
      return abstract_provider_js_1.AbstractProvider;
    } });
    Object.defineProperty(exports2, "UnmanagedSubscriber", { enumerable: true, get: function() {
      return abstract_provider_js_1.UnmanagedSubscriber;
    } });
    var abstract_signer_js_1 = require_abstract_signer();
    Object.defineProperty(exports2, "AbstractSigner", { enumerable: true, get: function() {
      return abstract_signer_js_1.AbstractSigner;
    } });
    Object.defineProperty(exports2, "VoidSigner", { enumerable: true, get: function() {
      return abstract_signer_js_1.VoidSigner;
    } });
    var community_js_1 = require_community();
    Object.defineProperty(exports2, "showThrottleMessage", { enumerable: true, get: function() {
      return community_js_1.showThrottleMessage;
    } });
    var default_provider_js_1 = require_default_provider();
    Object.defineProperty(exports2, "getDefaultProvider", { enumerable: true, get: function() {
      return default_provider_js_1.getDefaultProvider;
    } });
    var ens_resolver_js_1 = require_ens_resolver();
    Object.defineProperty(exports2, "EnsResolver", { enumerable: true, get: function() {
      return ens_resolver_js_1.EnsResolver;
    } });
    Object.defineProperty(exports2, "MulticoinProviderPlugin", { enumerable: true, get: function() {
      return ens_resolver_js_1.MulticoinProviderPlugin;
    } });
    var network_js_1 = require_network2();
    Object.defineProperty(exports2, "Network", { enumerable: true, get: function() {
      return network_js_1.Network;
    } });
    var signer_noncemanager_js_1 = require_signer_noncemanager();
    Object.defineProperty(exports2, "NonceManager", { enumerable: true, get: function() {
      return signer_noncemanager_js_1.NonceManager;
    } });
    var plugins_network_js_1 = require_plugins_network();
    Object.defineProperty(exports2, "NetworkPlugin", { enumerable: true, get: function() {
      return plugins_network_js_1.NetworkPlugin;
    } });
    Object.defineProperty(exports2, "GasCostPlugin", { enumerable: true, get: function() {
      return plugins_network_js_1.GasCostPlugin;
    } });
    Object.defineProperty(exports2, "EnsPlugin", { enumerable: true, get: function() {
      return plugins_network_js_1.EnsPlugin;
    } });
    Object.defineProperty(exports2, "FeeDataNetworkPlugin", { enumerable: true, get: function() {
      return plugins_network_js_1.FeeDataNetworkPlugin;
    } });
    Object.defineProperty(exports2, "FetchUrlFeeDataNetworkPlugin", { enumerable: true, get: function() {
      return plugins_network_js_1.FetchUrlFeeDataNetworkPlugin;
    } });
    var provider_js_1 = require_provider();
    Object.defineProperty(exports2, "Block", { enumerable: true, get: function() {
      return provider_js_1.Block;
    } });
    Object.defineProperty(exports2, "FeeData", { enumerable: true, get: function() {
      return provider_js_1.FeeData;
    } });
    Object.defineProperty(exports2, "Log", { enumerable: true, get: function() {
      return provider_js_1.Log;
    } });
    Object.defineProperty(exports2, "TransactionReceipt", { enumerable: true, get: function() {
      return provider_js_1.TransactionReceipt;
    } });
    Object.defineProperty(exports2, "TransactionResponse", { enumerable: true, get: function() {
      return provider_js_1.TransactionResponse;
    } });
    Object.defineProperty(exports2, "copyRequest", { enumerable: true, get: function() {
      return provider_js_1.copyRequest;
    } });
    var provider_fallback_js_1 = require_provider_fallback();
    Object.defineProperty(exports2, "FallbackProvider", { enumerable: true, get: function() {
      return provider_fallback_js_1.FallbackProvider;
    } });
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    Object.defineProperty(exports2, "JsonRpcApiProvider", { enumerable: true, get: function() {
      return provider_jsonrpc_js_1.JsonRpcApiProvider;
    } });
    Object.defineProperty(exports2, "JsonRpcProvider", { enumerable: true, get: function() {
      return provider_jsonrpc_js_1.JsonRpcProvider;
    } });
    Object.defineProperty(exports2, "JsonRpcSigner", { enumerable: true, get: function() {
      return provider_jsonrpc_js_1.JsonRpcSigner;
    } });
    var provider_browser_js_1 = require_provider_browser();
    Object.defineProperty(exports2, "BrowserProvider", { enumerable: true, get: function() {
      return provider_browser_js_1.BrowserProvider;
    } });
    var provider_alchemy_js_1 = require_provider_alchemy();
    Object.defineProperty(exports2, "AlchemyProvider", { enumerable: true, get: function() {
      return provider_alchemy_js_1.AlchemyProvider;
    } });
    var provider_ankr_js_1 = require_provider_ankr();
    Object.defineProperty(exports2, "AnkrProvider", { enumerable: true, get: function() {
      return provider_ankr_js_1.AnkrProvider;
    } });
    var provider_cloudflare_js_1 = require_provider_cloudflare();
    Object.defineProperty(exports2, "CloudflareProvider", { enumerable: true, get: function() {
      return provider_cloudflare_js_1.CloudflareProvider;
    } });
    var provider_chainstack_js_1 = require_provider_chainstack();
    Object.defineProperty(exports2, "ChainstackProvider", { enumerable: true, get: function() {
      return provider_chainstack_js_1.ChainstackProvider;
    } });
    var provider_etherscan_js_1 = require_provider_etherscan();
    Object.defineProperty(exports2, "EtherscanProvider", { enumerable: true, get: function() {
      return provider_etherscan_js_1.EtherscanProvider;
    } });
    Object.defineProperty(exports2, "EtherscanPlugin", { enumerable: true, get: function() {
      return provider_etherscan_js_1.EtherscanPlugin;
    } });
    var provider_infura_js_1 = require_provider_infura();
    Object.defineProperty(exports2, "InfuraProvider", { enumerable: true, get: function() {
      return provider_infura_js_1.InfuraProvider;
    } });
    Object.defineProperty(exports2, "InfuraWebSocketProvider", { enumerable: true, get: function() {
      return provider_infura_js_1.InfuraWebSocketProvider;
    } });
    var provider_pocket_js_1 = require_provider_pocket();
    Object.defineProperty(exports2, "PocketProvider", { enumerable: true, get: function() {
      return provider_pocket_js_1.PocketProvider;
    } });
    var provider_quicknode_js_1 = require_provider_quicknode();
    Object.defineProperty(exports2, "QuickNodeProvider", { enumerable: true, get: function() {
      return provider_quicknode_js_1.QuickNodeProvider;
    } });
    var provider_ipcsocket_js_1 = require_provider_ipcsocket_browser();
    Object.defineProperty(exports2, "IpcSocketProvider", { enumerable: true, get: function() {
      return provider_ipcsocket_js_1.IpcSocketProvider;
    } });
    var provider_socket_js_1 = require_provider_socket();
    Object.defineProperty(exports2, "SocketProvider", { enumerable: true, get: function() {
      return provider_socket_js_1.SocketProvider;
    } });
    var provider_websocket_js_1 = require_provider_websocket();
    Object.defineProperty(exports2, "WebSocketProvider", { enumerable: true, get: function() {
      return provider_websocket_js_1.WebSocketProvider;
    } });
    var provider_socket_js_2 = require_provider_socket();
    Object.defineProperty(exports2, "SocketSubscriber", { enumerable: true, get: function() {
      return provider_socket_js_2.SocketSubscriber;
    } });
    Object.defineProperty(exports2, "SocketBlockSubscriber", { enumerable: true, get: function() {
      return provider_socket_js_2.SocketBlockSubscriber;
    } });
    Object.defineProperty(exports2, "SocketPendingSubscriber", { enumerable: true, get: function() {
      return provider_socket_js_2.SocketPendingSubscriber;
    } });
    Object.defineProperty(exports2, "SocketEventSubscriber", { enumerable: true, get: function() {
      return provider_socket_js_2.SocketEventSubscriber;
    } });
  }
});

// node_modules/ethers/lib.commonjs/wallet/base-wallet.js
var require_base_wallet = __commonJS({
  "node_modules/ethers/lib.commonjs/wallet/base-wallet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BaseWallet = void 0;
    var index_js_1 = require_address3();
    var index_js_2 = require_hash2();
    var index_js_3 = require_providers();
    var index_js_4 = require_transaction2();
    var index_js_5 = require_utils11();
    var _signingKey;
    var _BaseWallet = class _BaseWallet extends index_js_3.AbstractSigner {
      /**
       *  Creates a new BaseWallet for %%privateKey%%, optionally
       *  connected to %%provider%%.
       *
       *  If %%provider%% is not specified, only offline methods can
       *  be used.
       */
      constructor(privateKey, provider) {
        super(provider);
        /**
         *  The wallet address.
         */
        __publicField(this, "address");
        __privateAdd(this, _signingKey);
        (0, index_js_5.assertArgument)(privateKey && typeof privateKey.sign === "function", "invalid private key", "privateKey", "[ REDACTED ]");
        __privateSet(this, _signingKey, privateKey);
        const address = (0, index_js_4.computeAddress)(this.signingKey.publicKey);
        (0, index_js_5.defineProperties)(this, { address });
      }
      // Store private values behind getters to reduce visibility
      // in console.log
      /**
       *  The [[SigningKey]] used for signing payloads.
       */
      get signingKey() {
        return __privateGet(this, _signingKey);
      }
      /**
       *  The private key for this wallet.
       */
      get privateKey() {
        return this.signingKey.privateKey;
      }
      async getAddress() {
        return this.address;
      }
      connect(provider) {
        return new _BaseWallet(__privateGet(this, _signingKey), provider);
      }
      async signTransaction(tx) {
        tx = (0, index_js_3.copyRequest)(tx);
        const { to, from } = await (0, index_js_5.resolveProperties)({
          to: tx.to ? (0, index_js_1.resolveAddress)(tx.to, this.provider) : void 0,
          from: tx.from ? (0, index_js_1.resolveAddress)(tx.from, this.provider) : void 0
        });
        if (to != null) {
          tx.to = to;
        }
        if (from != null) {
          tx.from = from;
        }
        if (tx.from != null) {
          (0, index_js_5.assertArgument)((0, index_js_1.getAddress)(tx.from) === this.address, "transaction from address mismatch", "tx.from", tx.from);
          delete tx.from;
        }
        const btx = index_js_4.Transaction.from(tx);
        btx.signature = this.signingKey.sign(btx.unsignedHash);
        return btx.serialized;
      }
      async signMessage(message) {
        return this.signMessageSync(message);
      }
      // @TODO: Add a secialized signTx and signTyped sync that enforces
      // all parameters are known?
      /**
       *  Returns the signature for %%message%% signed with this wallet.
       */
      signMessageSync(message) {
        return this.signingKey.sign((0, index_js_2.hashMessage)(message)).serialized;
      }
      async signTypedData(domain, types, value) {
        const populated = await index_js_2.TypedDataEncoder.resolveNames(domain, types, value, async (name) => {
          (0, index_js_5.assert)(this.provider != null, "cannot resolve ENS names without a provider", "UNSUPPORTED_OPERATION", {
            operation: "resolveName",
            info: { name }
          });
          const address = await this.provider.resolveName(name);
          (0, index_js_5.assert)(address != null, "unconfigured ENS name", "UNCONFIGURED_NAME", {
            value: name
          });
          return address;
        });
        return this.signingKey.sign(index_js_2.TypedDataEncoder.hash(populated.domain, types, populated.value)).serialized;
      }
    };
    _signingKey = new WeakMap();
    var BaseWallet = _BaseWallet;
    exports2.BaseWallet = BaseWallet;
  }
});

// node_modules/ethers/lib.commonjs/wordlists/decode-owl.js
var require_decode_owl = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/decode-owl.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decodeOwl = exports2.decode = void 0;
    var index_js_1 = require_utils11();
    var subsChrs = " !#$%&'()*+,-./<=>?@[]^_`{|}~";
    var Word = /^[a-z]*$/i;
    function unfold(words, sep) {
      let initial = 97;
      return words.reduce((accum, word) => {
        if (word === sep) {
          initial++;
        } else if (word.match(Word)) {
          accum.push(String.fromCharCode(initial) + word);
        } else {
          initial = 97;
          accum.push(word);
        }
        return accum;
      }, []);
    }
    function decode2(data, subs) {
      for (let i = subsChrs.length - 1; i >= 0; i--) {
        data = data.split(subsChrs[i]).join(subs.substring(2 * i, 2 * i + 2));
      }
      const clumps = [];
      const leftover = data.replace(/(:|([0-9])|([A-Z][a-z]*))/g, (all, item, semi, word) => {
        if (semi) {
          for (let i = parseInt(semi); i >= 0; i--) {
            clumps.push(";");
          }
        } else {
          clumps.push(item.toLowerCase());
        }
        return "";
      });
      if (leftover) {
        throw new Error(`leftovers: ${JSON.stringify(leftover)}`);
      }
      return unfold(unfold(clumps, ";"), ":");
    }
    exports2.decode = decode2;
    function decodeOwl(data) {
      (0, index_js_1.assertArgument)(data[0] === "0", "unsupported auwl data", "data", data);
      return decode2(data.substring(1 + 2 * subsChrs.length), data.substring(1, 1 + 2 * subsChrs.length));
    }
    exports2.decodeOwl = decodeOwl;
  }
});

// node_modules/ethers/lib.commonjs/wordlists/wordlist.js
var require_wordlist = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/wordlist.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Wordlist = void 0;
    var index_js_1 = require_utils11();
    var Wordlist = class {
      /**
       *  Creates a new Wordlist instance.
       *
       *  Sub-classes MUST call this if they provide their own constructor,
       *  passing in the locale string of the language.
       *
       *  Generally there is no need to create instances of a Wordlist,
       *  since each language-specific Wordlist creates an instance and
       *  there is no state kept internally, so they are safe to share.
       */
      constructor(locale) {
        __publicField(this, "locale");
        (0, index_js_1.defineProperties)(this, { locale });
      }
      /**
       *  Sub-classes may override this to provide a language-specific
       *  method for spliting %%phrase%% into individual words.
       *
       *  By default, %%phrase%% is split using any sequences of
       *  white-space as defined by regular expressions (i.e. ``/\s+/``).
       */
      split(phrase) {
        return phrase.toLowerCase().split(/\s+/g);
      }
      /**
       *  Sub-classes may override this to provider a language-specific
       *  method for joining %%words%% into a phrase.
       *
       *  By default, %%words%% are joined by a single space.
       */
      join(words) {
        return words.join(" ");
      }
    };
    exports2.Wordlist = Wordlist;
  }
});

// node_modules/ethers/lib.commonjs/wordlists/wordlist-owl.js
var require_wordlist_owl = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/wordlist-owl.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WordlistOwl = void 0;
    var index_js_1 = require_hash2();
    var index_js_2 = require_utils11();
    var decode_owl_js_1 = require_decode_owl();
    var wordlist_js_1 = require_wordlist();
    var _data, _checksum, _words, _WordlistOwl_instances, loadWords_fn;
    var WordlistOwl = class extends wordlist_js_1.Wordlist {
      /**
       *  Creates a new Wordlist for %%locale%% using the OWL %%data%%
       *  and validated against the %%checksum%%.
       */
      constructor(locale, data, checksum) {
        super(locale);
        __privateAdd(this, _WordlistOwl_instances);
        __privateAdd(this, _data);
        __privateAdd(this, _checksum);
        __privateAdd(this, _words);
        __privateSet(this, _data, data);
        __privateSet(this, _checksum, checksum);
        __privateSet(this, _words, null);
      }
      /**
       *  The OWL-encoded data.
       */
      get _data() {
        return __privateGet(this, _data);
      }
      /**
       *  Decode all the words for the wordlist.
       */
      _decodeWords() {
        return (0, decode_owl_js_1.decodeOwl)(__privateGet(this, _data));
      }
      getWord(index) {
        const words = __privateMethod(this, _WordlistOwl_instances, loadWords_fn).call(this);
        (0, index_js_2.assertArgument)(index >= 0 && index < words.length, `invalid word index: ${index}`, "index", index);
        return words[index];
      }
      getWordIndex(word) {
        return __privateMethod(this, _WordlistOwl_instances, loadWords_fn).call(this).indexOf(word);
      }
    };
    _data = new WeakMap();
    _checksum = new WeakMap();
    _words = new WeakMap();
    _WordlistOwl_instances = new WeakSet();
    loadWords_fn = function() {
      if (__privateGet(this, _words) == null) {
        const words = this._decodeWords();
        const checksum = (0, index_js_1.id)(words.join("\n") + "\n");
        if (checksum !== __privateGet(this, _checksum)) {
          throw new Error(`BIP39 Wordlist for ${this.locale} FAILED`);
        }
        __privateSet(this, _words, words);
      }
      return __privateGet(this, _words);
    };
    exports2.WordlistOwl = WordlistOwl;
  }
});

// node_modules/ethers/lib.commonjs/wordlists/lang-en.js
var require_lang_en = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/lang-en.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LangEn = void 0;
    var wordlist_owl_js_1 = require_wordlist_owl();
    var words = "0erleonalorenseinceregesticitStanvetearctssi#ch2Athck&tneLl0And#Il.yLeOutO=S|S%b/ra@SurdU'0Ce[Cid|CountCu'Hie=IdOu,-Qui*Ro[TT]T%T*[Tu$0AptDD-tD*[Ju,M.UltV<)Vi)0Rob-0FairF%dRaid0A(EEntRee0Ead0MRRp%tS!_rmBumCoholErtI&LLeyLowMo,O}PhaReadySoT Ways0A>urAz(gOngOuntU'd0Aly,Ch%Ci|G G!GryIm$K!Noun)Nu$O` Sw T&naTiqueXietyY1ArtOlogyPe?P!Pro=Ril1ChCt-EaEnaGueMMedM%MyOundR<+Re,Ri=RowTTefa@Ti,Tw%k0KPe@SaultSetSi,SumeThma0H!>OmTa{T&dT.udeTra@0Ct]D.Gu,NtTh%ToTumn0Era+OcadoOid0AkeA*AyEsomeFulKw?d0Is:ByChel%C#D+GL<)Lc#y~MbooN<aNn RRelyRga(R*lSeS-SketTt!3A^AnAutyCau'ComeEfF%eG(Ha=H(dLie=LowLtN^Nef./TrayTt Twe&Y#d3Cyc!DKeNdOlogyRdR`Tt _{AdeAmeAnketA,EakE[IndOodO[omOu'UeUrUsh_rdAtDyIlMbNeNusOkO,Rd R(gRrowSsTtomUn)XY_{etA(AndA[A=EadEezeI{Id+IefIghtIngIskOccoliOk&OnzeOomO` OwnUsh2Bb!DdyD+tFf$oIldLbLkL!tNd!Nk Rd&Rg R,SS(e[SyTt Y Zz:Bba+B(B!CtusGeKe~LmM aMpNN$N)lNdyNn#NoeNvasNy#Pab!P.$Pta(RRb#RdRgoRpetRryRtSeShS(o/!Su$TT$ogT^Teg%yTt!UghtU'Ut]Ve3Il(gL yM|NsusNturyRe$Rta(_irAlkAmp]An+AosApt Ar+A'AtEapE{Ee'EfErryE,I{&IefIldIm}yOi)Oo'R#-U{!UnkUrn0G?Nnam#Rc!Tiz&TyVil_imApArifyAwAyE<ErkEv I{I|IffImbIn-IpO{OgO'O`OudOwnUbUmpU, Ut^_^A,C#utDeFfeeIlInL!@L%LumnMb(eMeMf%tM-Mm#Mp<yNc tNdu@NfirmNg*[N}@Nsid NtrolNv()OkOlPp PyR$ReRnR*@/Tt#U^UntryUp!Ur'Us(V Yo>_{Ad!AftAmA}AshAt AwlAzyEamEd.EekEwI{etImeIspIt-OpO[Ou^OwdUci$UelUi'Umb!Un^UshYY,$2BeLtu*PPbo?dRiousRr|Rta(R=Sh]/omTe3C!:DMa+MpN)Ng R(gShUght WnY3AlBa>BrisCadeCemb CideCl(eC%a>C*a'ErF&'F(eFyG*eLayLiv M<dMi'Ni$Nti,NyP?tP&dPos.P`PutyRi=ScribeS tSignSkSpair/royTailTe@VelopVi)Vo>3AgramAlAm#dAryCeE'lEtFf G.$Gn.yLemmaNn NosaurRe@RtSag*eScov Sea'ShSmi[S%d Splay/<)V tVideV%)Zzy5Ct%Cum|G~Lph(Ma(Na>NkeyN%OrSeUb!Ve_ftAg#AmaA,-AwEamE[IftIllInkIpI=OpUmY2CkMbNeR(g/T^Ty1Arf1Nam-:G G!RlyRnR`Sily/Sy1HoOlogyOnomy0GeItUca>1F%t0G1GhtTh 2BowD E@r-Eg<tEm|Eph<tEvat%I>Se0B?kBodyBra)Er+Ot]PloyPow Pty0Ab!A@DD![D%'EmyErgyF%)Ga+G(eH<)JoyLi,OughR-hRollSu*T Ti*TryVelope1Isode0U$Uip0AA'OdeOs]R%Upt0CapeSayS&)Ta>0Ern$H-s1Id&)IlOkeOl=1A@Amp!Ce[Ch<+C.eCludeCu'Ecu>Erci'Hau,Hib.I!I,ItOt-P<dPe@Pi*Pla(Po'P*[T&dTra0EEbrow:Br-CeCultyDeIntI`~L'MeMilyMousNNcyNtasyRmSh]TT$Th TigueUltV%.e3Atu*Bru?yD $EEdElMa!N)/iv$T^V W3B Ct]EldGu*LeLmLt N$NdNeNg NishReRmR,Sc$ShTT}[X_gAmeAshAtAv%EeIghtIpOatO{O%Ow UidUshY_mCusGIlLd~owOdOtR)Re,R+tRkRtu}RumRw?dSsil/ UndX_gi!AmeEqu|EshI&dIn+OgOntO,OwnOz&U.2ElNNnyRna)RyTu*:D+tInLaxy~ yMePRa+Rba+Rd&Rl-Rm|SSpTeTh U+Ze3N $NiusN*Nt!Nu(e/u*2O,0AntFtGg!Ng RaffeRlVe_dAn)A*A[IdeImp'ObeOomOryO=OwUe_tDde[LdOdO'RillaSpelSsipV nWn_bA)A(AntApeA[Av.yEatE&IdIefItOc yOupOwUnt_rdE[IdeIltIt?N3M:B.IrLfMm M, NdPpyRb%RdRshR=,TVeWkZ?d3AdAl`ArtAvyD+hogIght~oLmetLpNRo3Dd&Gh~NtPRe/%y5BbyCkeyLdLeLiday~owMeNeyOdPeRnRr%R'Sp.$/TelUrV 5BGeM<Mb!M%Nd*dNgryNtRd!RryRtSb<d3Brid:1EOn0EaEntifyLe2N%e4LLeg$L}[0A+Ita>M&'Mu}Pa@Po'Pro=Pul'0ChCludeComeC*a'DexD-a>Do%Du,ryF<tFl-tF%mHa!H .Iti$Je@JuryMa>N Noc|PutQuiryS<eSe@SideSpi*/$lTa@T e,ToVe,V.eVol=3On0L<dOla>Sue0Em1Ory:CketGu?RZz3AlousAns~yWel9BInKeUr}yY5D+I)MpNg!Ni%Nk/:Ng?oo3EnEpT^upY3CkDD}yNdNgdomSsTT^&TeTt&Wi4EeIfeO{Ow:BBelB%Dd DyKeMpNgua+PtopR+T T(UghUndryVaWWnWsu.Y Zy3Ad AfArnA=Ctu*FtGG$G&dIsu*M#NdNg`NsOp?dSs#Tt Vel3ArB tyBr?yC&'FeFtGhtKeMbM.NkOnQuid/Tt!VeZ?d5AdAnB, C$CkG-NelyNgOpTt yUdUn+VeY$5CkyGga+Mb N?N^Xury3R-s:Ch(eDG-G}tIdIlInJ%KeMm$NNa+Nda>NgoNs]Nu$P!Rb!R^Rg(R(eRketRria+SkSs/ T^T i$ThTrixTt XimumZe3AdowAnAsu*AtCh<-D$DiaLodyLtMb M%yNt]NuRcyR+R.RryShSsa+T$Thod3Dd!DnightLk~]M-NdNimumN%Nu>Rac!Rr%S ySs/akeXXedXtu*5Bi!DelDifyMM|N.%NkeyN, N`OnR$ReRn(gSqu.oTh T]T%Unta(U'VeVie5ChFf(LeLtiplySc!SeumShroomS-/Tu$3Self/ yTh:I=MePk(Rrow/yT]Tu*3ArCkEdGati=G!@I` PhewR=/TTw%kUtr$V WsXt3CeGht5B!I'M(eeOd!Rm$R`SeTab!TeTh(gTi)VelW5C!?Mb R'T:K0EyJe@Li+Scu*S =Ta(Vious0CurE<Tob 0Or1FF Fi)T&2L1Ay0DI=Ymp-0It0CeEI#L(eLy1EnEraIn]Po'T]1An+B.Ch?dD D(?yG<I|Ig($Ph<0Tr-h0H 0Tdo%T TputTside0AlEnEr0NN 0Yg&0/ 0O}:CtDd!GeIrLa)LmNdaNelN-N` P RadeR|RkRrotRtySsT^ThTi|TrolTt nU'VeYm|3A)AnutArAs<tL-<NN$tyNcilOp!Pp Rfe@Rm.Rs#T2O}OtoRa'Ys-$0AnoCn-Ctu*E)GGe#~LotNkO} Pe/olT^Zza_)A}tA,-A>AyEa'Ed+U{UgUn+2EmEtIntL?LeLi)NdNyOlPul?Rt]S.]Ssib!/TatoTt yV tyWd W _@i)Ai'Ed-tEf Epa*Es|EttyEv|I)IdeIm?yIntI%.yIs#Iva>IzeOb!mO)[Odu)Of.OgramOje@Omo>OofOp tyOsp O>@OudOvide2Bl-Dd(g~LpL'Mpk(N^PilPpyR^a'R.yRpo'R'ShTZz!3Ramid:99Al.yAntumArt E,]I{ItIzO>:Bb.Cco#CeCkD?DioIlInI'~yMpN^NdomN+PidReTeTh V&WZ%3AdyAlAs#BelBuildC$lCei=CipeC%dCyc!Du)F!@F%mFu'G]G*tGul?Je@LaxLea'LiefLyMa(Memb M(dMo=Nd NewNtOp&PairPeatPla)P%tQui*ScueSemb!Si,Sour)Sp#'SultTi*T*atTurnUn]Ve$ViewW?d2Y`m0BBb#CeChDeD+F!GhtGidNgOtPp!SkTu$V$V 5AdA,BotBu,CketM<)OfOkieOmSeTa>UghUndU>Y$5Bb DeGLeNNwayR$:DDd!D}[FeIlLadLm#L#LtLu>MeMp!NdTisfyToshiU)Usa+VeY1A!AnA*Att E}HemeHoolI&)I[%sOrp]OutRapRe&RiptRub1AAr^As#AtC#dC*tCt]Cur.yEdEkGm|Le@~M(?Ni%N'Nt&)RiesRvi)Ss]Tt!TupV&_dowAftAllowA*EdEllEriffIeldIftI}IpIv O{OeOotOpOrtOuld O=RimpRugUff!Y0Bl(gCkDeE+GhtGnL|Lk~yLv Mil?Mp!N)NgR&/ Tua>XZe1A>Et^IIllInIrtUll0AbAmEepEnd I)IdeIghtImOg<OtOwUsh0AllArtI!OkeOo`0A{AkeApIffOw0ApCc Ci$CkDaFtL?Ldi LidLut]L=Me#eNgOnRryRtUlUndUpUr)U`0A)A*Ati$AwnEakEci$EedEllEndH eI)Id IkeInIr.L.OilOns%O#OrtOtRayReadR(gY0Ua*UeezeUir*l_b!AdiumAffA+AirsAmpAndArtA>AyEakEelEmEpE*oI{IllIngO{Oma^O}OolOryO=Ra>gyReetRikeR#gRugg!Ud|UffUmb!Y!0Bje@Bm.BwayC)[ChDd&Ff G?G+,ItMm NNnyN'tP PplyP*meReRfa)R+Rpri'RroundR=ySpe@/a(1AllowAmpApArmE?EetIftImIngIt^Ord1MbolMptomRup/em:B!Ck!GIlL|LkNkPeR+tSk/eTtooXi3A^Am~NN<tNnisNtRm/Xt_nkAtEmeEnE%yE*EyIngIsOughtReeRi=RowUmbUnd 0CketDeG LtMb MeNyPRedSsueT!5A,BaccoDayDdl EGe` I!tK&MatoM%rowNeNgueNightOlO`PP-Pp!R^RnadoRtoi'SsT$Uri,W?dW WnY_{AdeAff-Ag-A(Ansf ApAshA=lAyEatEeEndI$IbeI{Igg ImIpOphyOub!U{UeUlyUmpetU,U`Y2BeIt]Mb!NaN}lRkeyRnRt!1El=EntyI)InI,O1PeP-$:5Ly5B*lla0Ab!Awa*C!Cov D DoFairFoldHappyIf%mIqueItIv 'KnownLo{TilUsu$Veil1Da>GradeHoldOnP Set1B<Ge0A+EEdEfulE![U$0Il.y:C<tCuumGueLidL!yL=NNishP%Rious/Ult3H-!L=tNd%Ntu*NueRbRifyRs]RyS'lT <3Ab!Br<tCiousCt%yDeoEw~a+Nta+Ol(Rtu$RusSaS.Su$T$Vid5C$I)IdLc<oLumeTeYa+:GeG#ItLk~LnutNtRfa*RmRri%ShSp/eT VeY3Al`Ap#ArA'lA` BDd(gEk&dIrdLcome/T_!AtEatEelEnE*IpIsp 0DeD`FeLd~NNdowNeNgNkNn Nt ReSdomSeShT}[5LfM<Nd OdOlRdRkRldRryR`_pE{E,!I,I>Ong::Rd3Ar~ow9UUngU`:3BraRo9NeO";
    var checksum = "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60";
    var wordlist = null;
    var LangEn = class _LangEn extends wordlist_owl_js_1.WordlistOwl {
      /**
       *  Creates a new instance of the English language Wordlist.
       *
       *  This should be unnecessary most of the time as the exported
       *  [[langEn]] should suffice.
       *
       *  @_ignore:
       */
      constructor() {
        super("en", words, checksum);
      }
      /**
       *  Returns a singleton instance of a ``LangEn``, creating it
       *  if this is the first time being called.
       */
      static wordlist() {
        if (wordlist == null) {
          wordlist = new _LangEn();
        }
        return wordlist;
      }
    };
    exports2.LangEn = LangEn;
  }
});

// node_modules/ethers/lib.commonjs/wallet/mnemonic.js
var require_mnemonic = __commonJS({
  "node_modules/ethers/lib.commonjs/wallet/mnemonic.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Mnemonic = void 0;
    var index_js_1 = require_crypto4();
    var index_js_2 = require_utils11();
    var lang_en_js_1 = require_lang_en();
    function getUpperMask(bits) {
      return (1 << bits) - 1 << 8 - bits & 255;
    }
    function getLowerMask(bits) {
      return (1 << bits) - 1 & 255;
    }
    function mnemonicToEntropy(mnemonic, wordlist) {
      (0, index_js_2.assertNormalize)("NFKD");
      if (wordlist == null) {
        wordlist = lang_en_js_1.LangEn.wordlist();
      }
      const words = wordlist.split(mnemonic);
      (0, index_js_2.assertArgument)(words.length % 3 === 0 && words.length >= 12 && words.length <= 24, "invalid mnemonic length", "mnemonic", "[ REDACTED ]");
      const entropy = new Uint8Array(Math.ceil(11 * words.length / 8));
      let offset2 = 0;
      for (let i = 0; i < words.length; i++) {
        let index = wordlist.getWordIndex(words[i].normalize("NFKD"));
        (0, index_js_2.assertArgument)(index >= 0, `invalid mnemonic word at index ${i}`, "mnemonic", "[ REDACTED ]");
        for (let bit = 0; bit < 11; bit++) {
          if (index & 1 << 10 - bit) {
            entropy[offset2 >> 3] |= 1 << 7 - offset2 % 8;
          }
          offset2++;
        }
      }
      const entropyBits = 32 * words.length / 3;
      const checksumBits = words.length / 3;
      const checksumMask = getUpperMask(checksumBits);
      const checksum = (0, index_js_2.getBytes)((0, index_js_1.sha256)(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;
      (0, index_js_2.assertArgument)(checksum === (entropy[entropy.length - 1] & checksumMask), "invalid mnemonic checksum", "mnemonic", "[ REDACTED ]");
      return (0, index_js_2.hexlify)(entropy.slice(0, entropyBits / 8));
    }
    function entropyToMnemonic(entropy, wordlist) {
      (0, index_js_2.assertArgument)(entropy.length % 4 === 0 && entropy.length >= 16 && entropy.length <= 32, "invalid entropy size", "entropy", "[ REDACTED ]");
      if (wordlist == null) {
        wordlist = lang_en_js_1.LangEn.wordlist();
      }
      const indices = [0];
      let remainingBits = 11;
      for (let i = 0; i < entropy.length; i++) {
        if (remainingBits > 8) {
          indices[indices.length - 1] <<= 8;
          indices[indices.length - 1] |= entropy[i];
          remainingBits -= 8;
        } else {
          indices[indices.length - 1] <<= remainingBits;
          indices[indices.length - 1] |= entropy[i] >> 8 - remainingBits;
          indices.push(entropy[i] & getLowerMask(8 - remainingBits));
          remainingBits += 3;
        }
      }
      const checksumBits = entropy.length / 4;
      const checksum = parseInt((0, index_js_1.sha256)(entropy).substring(2, 4), 16) & getUpperMask(checksumBits);
      indices[indices.length - 1] <<= checksumBits;
      indices[indices.length - 1] |= checksum >> 8 - checksumBits;
      return wordlist.join(indices.map((index) => wordlist.getWord(index)));
    }
    var _guard = {};
    var Mnemonic = class _Mnemonic {
      /**
       *  @private
       */
      constructor(guard, entropy, phrase, password, wordlist) {
        /**
         *  The mnemonic phrase of 12, 15, 18, 21 or 24 words.
         *
         *  Use the [[wordlist]] ``split`` method to get the individual words.
         */
        __publicField(this, "phrase");
        /**
         *  The password used for this mnemonic. If no password is used this
         *  is the empty string (i.e. ``""``) as per the specification.
         */
        __publicField(this, "password");
        /**
         *  The wordlist for this mnemonic.
         */
        __publicField(this, "wordlist");
        /**
         *  The underlying entropy which the mnemonic encodes.
         */
        __publicField(this, "entropy");
        if (password == null) {
          password = "";
        }
        if (wordlist == null) {
          wordlist = lang_en_js_1.LangEn.wordlist();
        }
        (0, index_js_2.assertPrivate)(guard, _guard, "Mnemonic");
        (0, index_js_2.defineProperties)(this, { phrase, password, wordlist, entropy });
      }
      /**
       *  Returns the seed for the mnemonic.
       */
      computeSeed() {
        const salt = (0, index_js_2.toUtf8Bytes)("mnemonic" + this.password, "NFKD");
        return (0, index_js_1.pbkdf2)((0, index_js_2.toUtf8Bytes)(this.phrase, "NFKD"), salt, 2048, 64, "sha512");
      }
      /**
       *  Creates a new Mnemonic for the %%phrase%%.
       *
       *  The default %%password%% is the empty string and the default
       *  wordlist is the [English wordlists](LangEn).
       */
      static fromPhrase(phrase, password, wordlist) {
        const entropy = mnemonicToEntropy(phrase, wordlist);
        phrase = entropyToMnemonic((0, index_js_2.getBytes)(entropy), wordlist);
        return new _Mnemonic(_guard, entropy, phrase, password, wordlist);
      }
      /**
       *  Create a new **Mnemonic** from the %%entropy%%.
       *
       *  The default %%password%% is the empty string and the default
       *  wordlist is the [English wordlists](LangEn).
       */
      static fromEntropy(_entropy, password, wordlist) {
        const entropy = (0, index_js_2.getBytes)(_entropy, "entropy");
        const phrase = entropyToMnemonic(entropy, wordlist);
        return new _Mnemonic(_guard, (0, index_js_2.hexlify)(entropy), phrase, password, wordlist);
      }
      /**
       *  Returns the phrase for %%mnemonic%%.
       */
      static entropyToPhrase(_entropy, wordlist) {
        const entropy = (0, index_js_2.getBytes)(_entropy, "entropy");
        return entropyToMnemonic(entropy, wordlist);
      }
      /**
       *  Returns the entropy for %%phrase%%.
       */
      static phraseToEntropy(phrase, wordlist) {
        return mnemonicToEntropy(phrase, wordlist);
      }
      /**
       *  Returns true if %%phrase%% is a valid [[link-bip-39]] phrase.
       *
       *  This checks all the provided words belong to the %%wordlist%%,
       *  that the length is valid and the checksum is correct.
       */
      static isValidMnemonic(phrase, wordlist) {
        try {
          mnemonicToEntropy(phrase, wordlist);
          return true;
        } catch (error) {
        }
        return false;
      }
    };
    exports2.Mnemonic = Mnemonic;
  }
});

// node_modules/aes-js/lib.commonjs/aes.js
var require_aes2 = __commonJS({
  "node_modules/aes-js/lib.commonjs/aes.js"(exports2) {
    "use strict";
    var __classPrivateFieldGet2 = exports2 && exports2.__classPrivateFieldGet || function(receiver, state, kind, f2) {
      if (kind === "a" && !f2) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
    };
    var __classPrivateFieldSet2 = exports2 && exports2.__classPrivateFieldSet || function(receiver, state, value, kind, f2) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f2) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state.set(receiver, value), value;
    };
    var _AES_key;
    var _AES_Kd;
    var _AES_Ke;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AES = void 0;
    var numberOfRounds = { 16: 10, 24: 12, 32: 14 };
    var rcon = [1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145];
    var S = [99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22];
    var Si = [82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125];
    var T1 = [3328402341, 4168907908, 4000806809, 4135287693, 4294111757, 3597364157, 3731845041, 2445657428, 1613770832, 33620227, 3462883241, 1445669757, 3892248089, 3050821474, 1303096294, 3967186586, 2412431941, 528646813, 2311702848, 4202528135, 4026202645, 2992200171, 2387036105, 4226871307, 1101901292, 3017069671, 1604494077, 1169141738, 597466303, 1403299063, 3832705686, 2613100635, 1974974402, 3791519004, 1033081774, 1277568618, 1815492186, 2118074177, 4126668546, 2211236943, 1748251740, 1369810420, 3521504564, 4193382664, 3799085459, 2883115123, 1647391059, 706024767, 134480908, 2512897874, 1176707941, 2646852446, 806885416, 932615841, 168101135, 798661301, 235341577, 605164086, 461406363, 3756188221, 3454790438, 1311188841, 2142417613, 3933566367, 302582043, 495158174, 1479289972, 874125870, 907746093, 3698224818, 3025820398, 1537253627, 2756858614, 1983593293, 3084310113, 2108928974, 1378429307, 3722699582, 1580150641, 327451799, 2790478837, 3117535592, 0, 3253595436, 1075847264, 3825007647, 2041688520, 3059440621, 3563743934, 2378943302, 1740553945, 1916352843, 2487896798, 2555137236, 2958579944, 2244988746, 3151024235, 3320835882, 1336584933, 3992714006, 2252555205, 2588757463, 1714631509, 293963156, 2319795663, 3925473552, 67240454, 4269768577, 2689618160, 2017213508, 631218106, 1269344483, 2723238387, 1571005438, 2151694528, 93294474, 1066570413, 563977660, 1882732616, 4059428100, 1673313503, 2008463041, 2950355573, 1109467491, 537923632, 3858759450, 4260623118, 3218264685, 2177748300, 403442708, 638784309, 3287084079, 3193921505, 899127202, 2286175436, 773265209, 2479146071, 1437050866, 4236148354, 2050833735, 3362022572, 3126681063, 840505643, 3866325909, 3227541664, 427917720, 2655997905, 2749160575, 1143087718, 1412049534, 999329963, 193497219, 2353415882, 3354324521, 1807268051, 672404540, 2816401017, 3160301282, 369822493, 2916866934, 3688947771, 1681011286, 1949973070, 336202270, 2454276571, 201721354, 1210328172, 3093060836, 2680341085, 3184776046, 1135389935, 3294782118, 965841320, 831886756, 3554993207, 4068047243, 3588745010, 2345191491, 1849112409, 3664604599, 26054028, 2983581028, 2622377682, 1235855840, 3630984372, 2891339514, 4092916743, 3488279077, 3395642799, 4101667470, 1202630377, 268961816, 1874508501, 4034427016, 1243948399, 1546530418, 941366308, 1470539505, 1941222599, 2546386513, 3421038627, 2715671932, 3899946140, 1042226977, 2521517021, 1639824860, 227249030, 260737669, 3765465232, 2084453954, 1907733956, 3429263018, 2420656344, 100860677, 4160157185, 470683154, 3261161891, 1781871967, 2924959737, 1773779408, 394692241, 2579611992, 974986535, 664706745, 3655459128, 3958962195, 731420851, 571543859, 3530123707, 2849626480, 126783113, 865375399, 765172662, 1008606754, 361203602, 3387549984, 2278477385, 2857719295, 1344809080, 2782912378, 59542671, 1503764984, 160008576, 437062935, 1707065306, 3622233649, 2218934982, 3496503480, 2185314755, 697932208, 1512910199, 504303377, 2075177163, 2824099068, 1841019862, 739644986];
    var T2 = [2781242211, 2230877308, 2582542199, 2381740923, 234877682, 3184946027, 2984144751, 1418839493, 1348481072, 50462977, 2848876391, 2102799147, 434634494, 1656084439, 3863849899, 2599188086, 1167051466, 2636087938, 1082771913, 2281340285, 368048890, 3954334041, 3381544775, 201060592, 3963727277, 1739838676, 4250903202, 3930435503, 3206782108, 4149453988, 2531553906, 1536934080, 3262494647, 484572669, 2923271059, 1783375398, 1517041206, 1098792767, 49674231, 1334037708, 1550332980, 4098991525, 886171109, 150598129, 2481090929, 1940642008, 1398944049, 1059722517, 201851908, 1385547719, 1699095331, 1587397571, 674240536, 2704774806, 252314885, 3039795866, 151914247, 908333586, 2602270848, 1038082786, 651029483, 1766729511, 3447698098, 2682942837, 454166793, 2652734339, 1951935532, 775166490, 758520603, 3000790638, 4004797018, 4217086112, 4137964114, 1299594043, 1639438038, 3464344499, 2068982057, 1054729187, 1901997871, 2534638724, 4121318227, 1757008337, 0, 750906861, 1614815264, 535035132, 3363418545, 3988151131, 3201591914, 1183697867, 3647454910, 1265776953, 3734260298, 3566750796, 3903871064, 1250283471, 1807470800, 717615087, 3847203498, 384695291, 3313910595, 3617213773, 1432761139, 2484176261, 3481945413, 283769337, 100925954, 2180939647, 4037038160, 1148730428, 3123027871, 3813386408, 4087501137, 4267549603, 3229630528, 2315620239, 2906624658, 3156319645, 1215313976, 82966005, 3747855548, 3245848246, 1974459098, 1665278241, 807407632, 451280895, 251524083, 1841287890, 1283575245, 337120268, 891687699, 801369324, 3787349855, 2721421207, 3431482436, 959321879, 1469301956, 4065699751, 2197585534, 1199193405, 2898814052, 3887750493, 724703513, 2514908019, 2696962144, 2551808385, 3516813135, 2141445340, 1715741218, 2119445034, 2872807568, 2198571144, 3398190662, 700968686, 3547052216, 1009259540, 2041044702, 3803995742, 487983883, 1991105499, 1004265696, 1449407026, 1316239930, 504629770, 3683797321, 168560134, 1816667172, 3837287516, 1570751170, 1857934291, 4014189740, 2797888098, 2822345105, 2754712981, 936633572, 2347923833, 852879335, 1133234376, 1500395319, 3084545389, 2348912013, 1689376213, 3533459022, 3762923945, 3034082412, 4205598294, 133428468, 634383082, 2949277029, 2398386810, 3913789102, 403703816, 3580869306, 2297460856, 1867130149, 1918643758, 607656988, 4049053350, 3346248884, 1368901318, 600565992, 2090982877, 2632479860, 557719327, 3717614411, 3697393085, 2249034635, 2232388234, 2430627952, 1115438654, 3295786421, 2865522278, 3633334344, 84280067, 33027830, 303828494, 2747425121, 1600795957, 4188952407, 3496589753, 2434238086, 1486471617, 658119965, 3106381470, 953803233, 334231800, 3005978776, 857870609, 3151128937, 1890179545, 2298973838, 2805175444, 3056442267, 574365214, 2450884487, 550103529, 1233637070, 4289353045, 2018519080, 2057691103, 2399374476, 4166623649, 2148108681, 387583245, 3664101311, 836232934, 3330556482, 3100665960, 3280093505, 2955516313, 2002398509, 287182607, 3413881008, 4238890068, 3597515707, 975967766];
    var T3 = [1671808611, 2089089148, 2006576759, 2072901243, 4061003762, 1807603307, 1873927791, 3310653893, 810573872, 16974337, 1739181671, 729634347, 4263110654, 3613570519, 2883997099, 1989864566, 3393556426, 2191335298, 3376449993, 2106063485, 4195741690, 1508618841, 1204391495, 4027317232, 2917941677, 3563566036, 2734514082, 2951366063, 2629772188, 2767672228, 1922491506, 3227229120, 3082974647, 4246528509, 2477669779, 644500518, 911895606, 1061256767, 4144166391, 3427763148, 878471220, 2784252325, 3845444069, 4043897329, 1905517169, 3631459288, 827548209, 356461077, 67897348, 3344078279, 593839651, 3277757891, 405286936, 2527147926, 84871685, 2595565466, 118033927, 305538066, 2157648768, 3795705826, 3945188843, 661212711, 2999812018, 1973414517, 152769033, 2208177539, 745822252, 439235610, 455947803, 1857215598, 1525593178, 2700827552, 1391895634, 994932283, 3596728278, 3016654259, 695947817, 3812548067, 795958831, 2224493444, 1408607827, 3513301457, 0, 3979133421, 543178784, 4229948412, 2982705585, 1542305371, 1790891114, 3410398667, 3201918910, 961245753, 1256100938, 1289001036, 1491644504, 3477767631, 3496721360, 4012557807, 2867154858, 4212583931, 1137018435, 1305975373, 861234739, 2241073541, 1171229253, 4178635257, 33948674, 2139225727, 1357946960, 1011120188, 2679776671, 2833468328, 1374921297, 2751356323, 1086357568, 2408187279, 2460827538, 2646352285, 944271416, 4110742005, 3168756668, 3066132406, 3665145818, 560153121, 271589392, 4279952895, 4077846003, 3530407890, 3444343245, 202643468, 322250259, 3962553324, 1608629855, 2543990167, 1154254916, 389623319, 3294073796, 2817676711, 2122513534, 1028094525, 1689045092, 1575467613, 422261273, 1939203699, 1621147744, 2174228865, 1339137615, 3699352540, 577127458, 712922154, 2427141008, 2290289544, 1187679302, 3995715566, 3100863416, 339486740, 3732514782, 1591917662, 186455563, 3681988059, 3762019296, 844522546, 978220090, 169743370, 1239126601, 101321734, 611076132, 1558493276, 3260915650, 3547250131, 2901361580, 1655096418, 2443721105, 2510565781, 3828863972, 2039214713, 3878868455, 3359869896, 928607799, 1840765549, 2374762893, 3580146133, 1322425422, 2850048425, 1823791212, 1459268694, 4094161908, 3928346602, 1706019429, 2056189050, 2934523822, 135794696, 3134549946, 2022240376, 628050469, 779246638, 472135708, 2800834470, 3032970164, 3327236038, 3894660072, 3715932637, 1956440180, 522272287, 1272813131, 3185336765, 2340818315, 2323976074, 1888542832, 1044544574, 3049550261, 1722469478, 1222152264, 50660867, 4127324150, 236067854, 1638122081, 895445557, 1475980887, 3117443513, 2257655686, 3243809217, 489110045, 2662934430, 3778599393, 4162055160, 2561878936, 288563729, 1773916777, 3648039385, 2391345038, 2493985684, 2612407707, 505560094, 2274497927, 3911240169, 3460925390, 1442818645, 678973480, 3749357023, 2358182796, 2717407649, 2306869641, 219617805, 3218761151, 3862026214, 1120306242, 1756942440, 1103331905, 2578459033, 762796589, 252780047, 2966125488, 1425844308, 3151392187, 372911126];
    var T4 = [1667474886, 2088535288, 2004326894, 2071694838, 4075949567, 1802223062, 1869591006, 3318043793, 808472672, 16843522, 1734846926, 724270422, 4278065639, 3621216949, 2880169549, 1987484396, 3402253711, 2189597983, 3385409673, 2105378810, 4210693615, 1499065266, 1195886990, 4042263547, 2913856577, 3570689971, 2728590687, 2947541573, 2627518243, 2762274643, 1920112356, 3233831835, 3082273397, 4261223649, 2475929149, 640051788, 909531756, 1061110142, 4160160501, 3435941763, 875846760, 2779116625, 3857003729, 4059105529, 1903268834, 3638064043, 825316194, 353713962, 67374088, 3351728789, 589522246, 3284360861, 404236336, 2526454071, 84217610, 2593830191, 117901582, 303183396, 2155911963, 3806477791, 3958056653, 656894286, 2998062463, 1970642922, 151591698, 2206440989, 741110872, 437923380, 454765878, 1852748508, 1515908788, 2694904667, 1381168804, 993742198, 3604373943, 3014905469, 690584402, 3823320797, 791638366, 2223281939, 1398011302, 3520161977, 0, 3991743681, 538992704, 4244381667, 2981218425, 1532751286, 1785380564, 3419096717, 3200178535, 960056178, 1246420628, 1280103576, 1482221744, 3486468741, 3503319995, 4025428677, 2863326543, 4227536621, 1128514950, 1296947098, 859002214, 2240123921, 1162203018, 4193849577, 33687044, 2139062782, 1347481760, 1010582648, 2678045221, 2829640523, 1364325282, 2745433693, 1077985408, 2408548869, 2459086143, 2644360225, 943212656, 4126475505, 3166494563, 3065430391, 3671750063, 555836226, 269496352, 4294908645, 4092792573, 3537006015, 3452783745, 202118168, 320025894, 3974901699, 1600119230, 2543297077, 1145359496, 387397934, 3301201811, 2812801621, 2122220284, 1027426170, 1684319432, 1566435258, 421079858, 1936954854, 1616945344, 2172753945, 1330631070, 3705438115, 572679748, 707427924, 2425400123, 2290647819, 1179044492, 4008585671, 3099120491, 336870440, 3739122087, 1583276732, 185277718, 3688593069, 3772791771, 842159716, 976899700, 168435220, 1229577106, 101059084, 606366792, 1549591736, 3267517855, 3553849021, 2897014595, 1650632388, 2442242105, 2509612081, 3840161747, 2038008818, 3890688725, 3368567691, 926374254, 1835907034, 2374863873, 3587531953, 1313788572, 2846482505, 1819063512, 1448540844, 4109633523, 3941213647, 1701162954, 2054852340, 2930698567, 134748176, 3132806511, 2021165296, 623210314, 774795868, 471606328, 2795958615, 3031746419, 3334885783, 3907527627, 3722280097, 1953799400, 522133822, 1263263126, 3183336545, 2341176845, 2324333839, 1886425312, 1044267644, 3048588401, 1718004428, 1212733584, 50529542, 4143317495, 235803164, 1633788866, 892690282, 1465383342, 3115962473, 2256965911, 3250673817, 488449850, 2661202215, 3789633753, 4177007595, 2560144171, 286339874, 1768537042, 3654906025, 2391705863, 2492770099, 2610673197, 505291324, 2273808917, 3924369609, 3469625735, 1431699370, 673740880, 3755965093, 2358021891, 2711746649, 2307489801, 218961690, 3217021541, 3873845719, 1111672452, 1751693520, 1094828930, 2576986153, 757954394, 252645662, 2964376443, 1414855848, 3149649517, 370555436];
    var T5 = [1374988112, 2118214995, 437757123, 975658646, 1001089995, 530400753, 2902087851, 1273168787, 540080725, 2910219766, 2295101073, 4110568485, 1340463100, 3307916247, 641025152, 3043140495, 3736164937, 632953703, 1172967064, 1576976609, 3274667266, 2169303058, 2370213795, 1809054150, 59727847, 361929877, 3211623147, 2505202138, 3569255213, 1484005843, 1239443753, 2395588676, 1975683434, 4102977912, 2572697195, 666464733, 3202437046, 4035489047, 3374361702, 2110667444, 1675577880, 3843699074, 2538681184, 1649639237, 2976151520, 3144396420, 4269907996, 4178062228, 1883793496, 2403728665, 2497604743, 1383856311, 2876494627, 1917518562, 3810496343, 1716890410, 3001755655, 800440835, 2261089178, 3543599269, 807962610, 599762354, 33778362, 3977675356, 2328828971, 2809771154, 4077384432, 1315562145, 1708848333, 101039829, 3509871135, 3299278474, 875451293, 2733856160, 92987698, 2767645557, 193195065, 1080094634, 1584504582, 3178106961, 1042385657, 2531067453, 3711829422, 1306967366, 2438237621, 1908694277, 67556463, 1615861247, 429456164, 3602770327, 2302690252, 1742315127, 2968011453, 126454664, 3877198648, 2043211483, 2709260871, 2084704233, 4169408201, 0, 159417987, 841739592, 504459436, 1817866830, 4245618683, 260388950, 1034867998, 908933415, 168810852, 1750902305, 2606453969, 607530554, 202008497, 2472011535, 3035535058, 463180190, 2160117071, 1641816226, 1517767529, 470948374, 3801332234, 3231722213, 1008918595, 303765277, 235474187, 4069246893, 766945465, 337553864, 1475418501, 2943682380, 4003061179, 2743034109, 4144047775, 1551037884, 1147550661, 1543208500, 2336434550, 3408119516, 3069049960, 3102011747, 3610369226, 1113818384, 328671808, 2227573024, 2236228733, 3535486456, 2935566865, 3341394285, 496906059, 3702665459, 226906860, 2009195472, 733156972, 2842737049, 294930682, 1206477858, 2835123396, 2700099354, 1451044056, 573804783, 2269728455, 3644379585, 2362090238, 2564033334, 2801107407, 2776292904, 3669462566, 1068351396, 742039012, 1350078989, 1784663195, 1417561698, 4136440770, 2430122216, 775550814, 2193862645, 2673705150, 1775276924, 1876241833, 3475313331, 3366754619, 270040487, 3902563182, 3678124923, 3441850377, 1851332852, 3969562369, 2203032232, 3868552805, 2868897406, 566021896, 4011190502, 3135740889, 1248802510, 3936291284, 699432150, 832877231, 708780849, 3332740144, 899835584, 1951317047, 4236429990, 3767586992, 866637845, 4043610186, 1106041591, 2144161806, 395441711, 1984812685, 1139781709, 3433712980, 3835036895, 2664543715, 1282050075, 3240894392, 1181045119, 2640243204, 25965917, 4203181171, 4211818798, 3009879386, 2463879762, 3910161971, 1842759443, 2597806476, 933301370, 1509430414, 3943906441, 3467192302, 3076639029, 3776767469, 2051518780, 2631065433, 1441952575, 404016761, 1942435775, 1408749034, 1610459739, 3745345300, 2017778566, 3400528769, 3110650942, 941896748, 3265478751, 371049330, 3168937228, 675039627, 4279080257, 967311729, 135050206, 3635733660, 1683407248, 2076935265, 3576870512, 1215061108, 3501741890];
    var T6 = [1347548327, 1400783205, 3273267108, 2520393566, 3409685355, 4045380933, 2880240216, 2471224067, 1428173050, 4138563181, 2441661558, 636813900, 4233094615, 3620022987, 2149987652, 2411029155, 1239331162, 1730525723, 2554718734, 3781033664, 46346101, 310463728, 2743944855, 3328955385, 3875770207, 2501218972, 3955191162, 3667219033, 768917123, 3545789473, 692707433, 1150208456, 1786102409, 2029293177, 1805211710, 3710368113, 3065962831, 401639597, 1724457132, 3028143674, 409198410, 2196052529, 1620529459, 1164071807, 3769721975, 2226875310, 486441376, 2499348523, 1483753576, 428819965, 2274680428, 3075636216, 598438867, 3799141122, 1474502543, 711349675, 129166120, 53458370, 2592523643, 2782082824, 4063242375, 2988687269, 3120694122, 1559041666, 730517276, 2460449204, 4042459122, 2706270690, 3446004468, 3573941694, 533804130, 2328143614, 2637442643, 2695033685, 839224033, 1973745387, 957055980, 2856345839, 106852767, 1371368976, 4181598602, 1033297158, 2933734917, 1179510461, 3046200461, 91341917, 1862534868, 4284502037, 605657339, 2547432937, 3431546947, 2003294622, 3182487618, 2282195339, 954669403, 3682191598, 1201765386, 3917234703, 3388507166, 0, 2198438022, 1211247597, 2887651696, 1315723890, 4227665663, 1443857720, 507358933, 657861945, 1678381017, 560487590, 3516619604, 975451694, 2970356327, 261314535, 3535072918, 2652609425, 1333838021, 2724322336, 1767536459, 370938394, 182621114, 3854606378, 1128014560, 487725847, 185469197, 2918353863, 3106780840, 3356761769, 2237133081, 1286567175, 3152976349, 4255350624, 2683765030, 3160175349, 3309594171, 878443390, 1988838185, 3704300486, 1756818940, 1673061617, 3403100636, 272786309, 1075025698, 545572369, 2105887268, 4174560061, 296679730, 1841768865, 1260232239, 4091327024, 3960309330, 3497509347, 1814803222, 2578018489, 4195456072, 575138148, 3299409036, 446754879, 3629546796, 4011996048, 3347532110, 3252238545, 4270639778, 915985419, 3483825537, 681933534, 651868046, 2755636671, 3828103837, 223377554, 2607439820, 1649704518, 3270937875, 3901806776, 1580087799, 4118987695, 3198115200, 2087309459, 2842678573, 3016697106, 1003007129, 2802849917, 1860738147, 2077965243, 164439672, 4100872472, 32283319, 2827177882, 1709610350, 2125135846, 136428751, 3874428392, 3652904859, 3460984630, 3572145929, 3593056380, 2939266226, 824852259, 818324884, 3224740454, 930369212, 2801566410, 2967507152, 355706840, 1257309336, 4148292826, 243256656, 790073846, 2373340630, 1296297904, 1422699085, 3756299780, 3818836405, 457992840, 3099667487, 2135319889, 77422314, 1560382517, 1945798516, 788204353, 1521706781, 1385356242, 870912086, 325965383, 2358957921, 2050466060, 2388260884, 2313884476, 4006521127, 901210569, 3990953189, 1014646705, 1503449823, 1062597235, 2031621326, 3212035895, 3931371469, 1533017514, 350174575, 2256028891, 2177544179, 1052338372, 741876788, 1606591296, 1914052035, 213705253, 2334669897, 1107234197, 1899603969, 3725069491, 2631447780, 2422494913, 1635502980, 1893020342, 1950903388, 1120974935];
    var T7 = [2807058932, 1699970625, 2764249623, 1586903591, 1808481195, 1173430173, 1487645946, 59984867, 4199882800, 1844882806, 1989249228, 1277555970, 3623636965, 3419915562, 1149249077, 2744104290, 1514790577, 459744698, 244860394, 3235995134, 1963115311, 4027744588, 2544078150, 4190530515, 1608975247, 2627016082, 2062270317, 1507497298, 2200818878, 567498868, 1764313568, 3359936201, 2305455554, 2037970062, 1047239e3, 1910319033, 1337376481, 2904027272, 2892417312, 984907214, 1243112415, 830661914, 861968209, 2135253587, 2011214180, 2927934315, 2686254721, 731183368, 1750626376, 4246310725, 1820824798, 4172763771, 3542330227, 48394827, 2404901663, 2871682645, 671593195, 3254988725, 2073724613, 145085239, 2280796200, 2779915199, 1790575107, 2187128086, 472615631, 3029510009, 4075877127, 3802222185, 4107101658, 3201631749, 1646252340, 4270507174, 1402811438, 1436590835, 3778151818, 3950355702, 3963161475, 4020912224, 2667994737, 273792366, 2331590177, 104699613, 95345982, 3175501286, 2377486676, 1560637892, 3564045318, 369057872, 4213447064, 3919042237, 1137477952, 2658625497, 1119727848, 2340947849, 1530455833, 4007360968, 172466556, 266959938, 516552836, 0, 2256734592, 3980931627, 1890328081, 1917742170, 4294704398, 945164165, 3575528878, 958871085, 3647212047, 2787207260, 1423022939, 775562294, 1739656202, 3876557655, 2530391278, 2443058075, 3310321856, 547512796, 1265195639, 437656594, 3121275539, 719700128, 3762502690, 387781147, 218828297, 3350065803, 2830708150, 2848461854, 428169201, 122466165, 3720081049, 1627235199, 648017665, 4122762354, 1002783846, 2117360635, 695634755, 3336358691, 4234721005, 4049844452, 3704280881, 2232435299, 574624663, 287343814, 612205898, 1039717051, 840019705, 2708326185, 793451934, 821288114, 1391201670, 3822090177, 376187827, 3113855344, 1224348052, 1679968233, 2361698556, 1058709744, 752375421, 2431590963, 1321699145, 3519142200, 2734591178, 188127444, 2177869557, 3727205754, 2384911031, 3215212461, 2648976442, 2450346104, 3432737375, 1180849278, 331544205, 3102249176, 4150144569, 2952102595, 2159976285, 2474404304, 766078933, 313773861, 2570832044, 2108100632, 1668212892, 3145456443, 2013908262, 418672217, 3070356634, 2594734927, 1852171925, 3867060991, 3473416636, 3907448597, 2614737639, 919489135, 164948639, 2094410160, 2997825956, 590424639, 2486224549, 1723872674, 3157750862, 3399941250, 3501252752, 3625268135, 2555048196, 3673637356, 1343127501, 4130281361, 3599595085, 2957853679, 1297403050, 81781910, 3051593425, 2283490410, 532201772, 1367295589, 3926170974, 895287692, 1953757831, 1093597963, 492483431, 3528626907, 1446242576, 1192455638, 1636604631, 209336225, 344873464, 1015671571, 669961897, 3375740769, 3857572124, 2973530695, 3747192018, 1933530610, 3464042516, 935293895, 3454686199, 2858115069, 1863638845, 3683022916, 4085369519, 3292445032, 875313188, 1080017571, 3279033885, 621591778, 1233856572, 2504130317, 24197544, 3017672716, 3835484340, 3247465558, 2220981195, 3060847922, 1551124588, 1463996600];
    var T8 = [4104605777, 1097159550, 396673818, 660510266, 2875968315, 2638606623, 4200115116, 3808662347, 821712160, 1986918061, 3430322568, 38544885, 3856137295, 718002117, 893681702, 1654886325, 2975484382, 3122358053, 3926825029, 4274053469, 796197571, 1290801793, 1184342925, 3556361835, 2405426947, 2459735317, 1836772287, 1381620373, 3196267988, 1948373848, 3764988233, 3385345166, 3263785589, 2390325492, 1480485785, 3111247143, 3780097726, 2293045232, 548169417, 3459953789, 3746175075, 439452389, 1362321559, 1400849762, 1685577905, 1806599355, 2174754046, 137073913, 1214797936, 1174215055, 3731654548, 2079897426, 1943217067, 1258480242, 529487843, 1437280870, 3945269170, 3049390895, 3313212038, 923313619, 679998e3, 3215307299, 57326082, 377642221, 3474729866, 2041877159, 133361907, 1776460110, 3673476453, 96392454, 878845905, 2801699524, 777231668, 4082475170, 2330014213, 4142626212, 2213296395, 1626319424, 1906247262, 1846563261, 562755902, 3708173718, 1040559837, 3871163981, 1418573201, 3294430577, 114585348, 1343618912, 2566595609, 3186202582, 1078185097, 3651041127, 3896688048, 2307622919, 425408743, 3371096953, 2081048481, 1108339068, 2216610296, 0, 2156299017, 736970802, 292596766, 1517440620, 251657213, 2235061775, 2933202493, 758720310, 265905162, 1554391400, 1532285339, 908999204, 174567692, 1474760595, 4002861748, 2610011675, 3234156416, 3693126241, 2001430874, 303699484, 2478443234, 2687165888, 585122620, 454499602, 151849742, 2345119218, 3064510765, 514443284, 4044981591, 1963412655, 2581445614, 2137062819, 19308535, 1928707164, 1715193156, 4219352155, 1126790795, 600235211, 3992742070, 3841024952, 836553431, 1669664834, 2535604243, 3323011204, 1243905413, 3141400786, 4180808110, 698445255, 2653899549, 2989552604, 2253581325, 3252932727, 3004591147, 1891211689, 2487810577, 3915653703, 4237083816, 4030667424, 2100090966, 865136418, 1229899655, 953270745, 3399679628, 3557504664, 4118925222, 2061379749, 3079546586, 2915017791, 983426092, 2022837584, 1607244650, 2118541908, 2366882550, 3635996816, 972512814, 3283088770, 1568718495, 3499326569, 3576539503, 621982671, 2895723464, 410887952, 2623762152, 1002142683, 645401037, 1494807662, 2595684844, 1335535747, 2507040230, 4293295786, 3167684641, 367585007, 3885750714, 1865862730, 2668221674, 2960971305, 2763173681, 1059270954, 2777952454, 2724642869, 1320957812, 2194319100, 2429595872, 2815956275, 77089521, 3973773121, 3444575871, 2448830231, 1305906550, 4021308739, 2857194700, 2516901860, 3518358430, 1787304780, 740276417, 1699839814, 1592394909, 2352307457, 2272556026, 188821243, 1729977011, 3687994002, 274084841, 3594982253, 3613494426, 2701949495, 4162096729, 322734571, 2837966542, 1640576439, 484830689, 1202797690, 3537852828, 4067639125, 349075736, 3342319475, 4157467219, 4255800159, 1030690015, 1155237496, 2951971274, 1757691577, 607398968, 2738905026, 499347990, 3794078908, 1011452712, 227885567, 2818666809, 213114376, 3034881240, 1455525988, 3414450555, 850817237, 1817998408, 3092726480];
    var U1 = [0, 235474187, 470948374, 303765277, 941896748, 908933415, 607530554, 708780849, 1883793496, 2118214995, 1817866830, 1649639237, 1215061108, 1181045119, 1417561698, 1517767529, 3767586992, 4003061179, 4236429990, 4069246893, 3635733660, 3602770327, 3299278474, 3400528769, 2430122216, 2664543715, 2362090238, 2193862645, 2835123396, 2801107407, 3035535058, 3135740889, 3678124923, 3576870512, 3341394285, 3374361702, 3810496343, 3977675356, 4279080257, 4043610186, 2876494627, 2776292904, 3076639029, 3110650942, 2472011535, 2640243204, 2403728665, 2169303058, 1001089995, 899835584, 666464733, 699432150, 59727847, 226906860, 530400753, 294930682, 1273168787, 1172967064, 1475418501, 1509430414, 1942435775, 2110667444, 1876241833, 1641816226, 2910219766, 2743034109, 2976151520, 3211623147, 2505202138, 2606453969, 2302690252, 2269728455, 3711829422, 3543599269, 3240894392, 3475313331, 3843699074, 3943906441, 4178062228, 4144047775, 1306967366, 1139781709, 1374988112, 1610459739, 1975683434, 2076935265, 1775276924, 1742315127, 1034867998, 866637845, 566021896, 800440835, 92987698, 193195065, 429456164, 395441711, 1984812685, 2017778566, 1784663195, 1683407248, 1315562145, 1080094634, 1383856311, 1551037884, 101039829, 135050206, 437757123, 337553864, 1042385657, 807962610, 573804783, 742039012, 2531067453, 2564033334, 2328828971, 2227573024, 2935566865, 2700099354, 3001755655, 3168937228, 3868552805, 3902563182, 4203181171, 4102977912, 3736164937, 3501741890, 3265478751, 3433712980, 1106041591, 1340463100, 1576976609, 1408749034, 2043211483, 2009195472, 1708848333, 1809054150, 832877231, 1068351396, 766945465, 599762354, 159417987, 126454664, 361929877, 463180190, 2709260871, 2943682380, 3178106961, 3009879386, 2572697195, 2538681184, 2236228733, 2336434550, 3509871135, 3745345300, 3441850377, 3274667266, 3910161971, 3877198648, 4110568485, 4211818798, 2597806476, 2497604743, 2261089178, 2295101073, 2733856160, 2902087851, 3202437046, 2968011453, 3936291284, 3835036895, 4136440770, 4169408201, 3535486456, 3702665459, 3467192302, 3231722213, 2051518780, 1951317047, 1716890410, 1750902305, 1113818384, 1282050075, 1584504582, 1350078989, 168810852, 67556463, 371049330, 404016761, 841739592, 1008918595, 775550814, 540080725, 3969562369, 3801332234, 4035489047, 4269907996, 3569255213, 3669462566, 3366754619, 3332740144, 2631065433, 2463879762, 2160117071, 2395588676, 2767645557, 2868897406, 3102011747, 3069049960, 202008497, 33778362, 270040487, 504459436, 875451293, 975658646, 675039627, 641025152, 2084704233, 1917518562, 1615861247, 1851332852, 1147550661, 1248802510, 1484005843, 1451044056, 933301370, 967311729, 733156972, 632953703, 260388950, 25965917, 328671808, 496906059, 1206477858, 1239443753, 1543208500, 1441952575, 2144161806, 1908694277, 1675577880, 1842759443, 3610369226, 3644379585, 3408119516, 3307916247, 4011190502, 3776767469, 4077384432, 4245618683, 2809771154, 2842737049, 3144396420, 3043140495, 2673705150, 2438237621, 2203032232, 2370213795];
    var U2 = [0, 185469197, 370938394, 487725847, 741876788, 657861945, 975451694, 824852259, 1483753576, 1400783205, 1315723890, 1164071807, 1950903388, 2135319889, 1649704518, 1767536459, 2967507152, 3152976349, 2801566410, 2918353863, 2631447780, 2547432937, 2328143614, 2177544179, 3901806776, 3818836405, 4270639778, 4118987695, 3299409036, 3483825537, 3535072918, 3652904859, 2077965243, 1893020342, 1841768865, 1724457132, 1474502543, 1559041666, 1107234197, 1257309336, 598438867, 681933534, 901210569, 1052338372, 261314535, 77422314, 428819965, 310463728, 3409685355, 3224740454, 3710368113, 3593056380, 3875770207, 3960309330, 4045380933, 4195456072, 2471224067, 2554718734, 2237133081, 2388260884, 3212035895, 3028143674, 2842678573, 2724322336, 4138563181, 4255350624, 3769721975, 3955191162, 3667219033, 3516619604, 3431546947, 3347532110, 2933734917, 2782082824, 3099667487, 3016697106, 2196052529, 2313884476, 2499348523, 2683765030, 1179510461, 1296297904, 1347548327, 1533017514, 1786102409, 1635502980, 2087309459, 2003294622, 507358933, 355706840, 136428751, 53458370, 839224033, 957055980, 605657339, 790073846, 2373340630, 2256028891, 2607439820, 2422494913, 2706270690, 2856345839, 3075636216, 3160175349, 3573941694, 3725069491, 3273267108, 3356761769, 4181598602, 4063242375, 4011996048, 3828103837, 1033297158, 915985419, 730517276, 545572369, 296679730, 446754879, 129166120, 213705253, 1709610350, 1860738147, 1945798516, 2029293177, 1239331162, 1120974935, 1606591296, 1422699085, 4148292826, 4233094615, 3781033664, 3931371469, 3682191598, 3497509347, 3446004468, 3328955385, 2939266226, 2755636671, 3106780840, 2988687269, 2198438022, 2282195339, 2501218972, 2652609425, 1201765386, 1286567175, 1371368976, 1521706781, 1805211710, 1620529459, 2105887268, 1988838185, 533804130, 350174575, 164439672, 46346101, 870912086, 954669403, 636813900, 788204353, 2358957921, 2274680428, 2592523643, 2441661558, 2695033685, 2880240216, 3065962831, 3182487618, 3572145929, 3756299780, 3270937875, 3388507166, 4174560061, 4091327024, 4006521127, 3854606378, 1014646705, 930369212, 711349675, 560487590, 272786309, 457992840, 106852767, 223377554, 1678381017, 1862534868, 1914052035, 2031621326, 1211247597, 1128014560, 1580087799, 1428173050, 32283319, 182621114, 401639597, 486441376, 768917123, 651868046, 1003007129, 818324884, 1503449823, 1385356242, 1333838021, 1150208456, 1973745387, 2125135846, 1673061617, 1756818940, 2970356327, 3120694122, 2802849917, 2887651696, 2637442643, 2520393566, 2334669897, 2149987652, 3917234703, 3799141122, 4284502037, 4100872472, 3309594171, 3460984630, 3545789473, 3629546796, 2050466060, 1899603969, 1814803222, 1730525723, 1443857720, 1560382517, 1075025698, 1260232239, 575138148, 692707433, 878443390, 1062597235, 243256656, 91341917, 409198410, 325965383, 3403100636, 3252238545, 3704300486, 3620022987, 3874428392, 3990953189, 4042459122, 4227665663, 2460449204, 2578018489, 2226875310, 2411029155, 3198115200, 3046200461, 2827177882, 2743944855];
    var U3 = [0, 218828297, 437656594, 387781147, 875313188, 958871085, 775562294, 590424639, 1750626376, 1699970625, 1917742170, 2135253587, 1551124588, 1367295589, 1180849278, 1265195639, 3501252752, 3720081049, 3399941250, 3350065803, 3835484340, 3919042237, 4270507174, 4085369519, 3102249176, 3051593425, 2734591178, 2952102595, 2361698556, 2177869557, 2530391278, 2614737639, 3145456443, 3060847922, 2708326185, 2892417312, 2404901663, 2187128086, 2504130317, 2555048196, 3542330227, 3727205754, 3375740769, 3292445032, 3876557655, 3926170974, 4246310725, 4027744588, 1808481195, 1723872674, 1910319033, 2094410160, 1608975247, 1391201670, 1173430173, 1224348052, 59984867, 244860394, 428169201, 344873464, 935293895, 984907214, 766078933, 547512796, 1844882806, 1627235199, 2011214180, 2062270317, 1507497298, 1423022939, 1137477952, 1321699145, 95345982, 145085239, 532201772, 313773861, 830661914, 1015671571, 731183368, 648017665, 3175501286, 2957853679, 2807058932, 2858115069, 2305455554, 2220981195, 2474404304, 2658625497, 3575528878, 3625268135, 3473416636, 3254988725, 3778151818, 3963161475, 4213447064, 4130281361, 3599595085, 3683022916, 3432737375, 3247465558, 3802222185, 4020912224, 4172763771, 4122762354, 3201631749, 3017672716, 2764249623, 2848461854, 2331590177, 2280796200, 2431590963, 2648976442, 104699613, 188127444, 472615631, 287343814, 840019705, 1058709744, 671593195, 621591778, 1852171925, 1668212892, 1953757831, 2037970062, 1514790577, 1463996600, 1080017571, 1297403050, 3673637356, 3623636965, 3235995134, 3454686199, 4007360968, 3822090177, 4107101658, 4190530515, 2997825956, 3215212461, 2830708150, 2779915199, 2256734592, 2340947849, 2627016082, 2443058075, 172466556, 122466165, 273792366, 492483431, 1047239e3, 861968209, 612205898, 695634755, 1646252340, 1863638845, 2013908262, 1963115311, 1446242576, 1530455833, 1277555970, 1093597963, 1636604631, 1820824798, 2073724613, 1989249228, 1436590835, 1487645946, 1337376481, 1119727848, 164948639, 81781910, 331544205, 516552836, 1039717051, 821288114, 669961897, 719700128, 2973530695, 3157750862, 2871682645, 2787207260, 2232435299, 2283490410, 2667994737, 2450346104, 3647212047, 3564045318, 3279033885, 3464042516, 3980931627, 3762502690, 4150144569, 4199882800, 3070356634, 3121275539, 2904027272, 2686254721, 2200818878, 2384911031, 2570832044, 2486224549, 3747192018, 3528626907, 3310321856, 3359936201, 3950355702, 3867060991, 4049844452, 4234721005, 1739656202, 1790575107, 2108100632, 1890328081, 1402811438, 1586903591, 1233856572, 1149249077, 266959938, 48394827, 369057872, 418672217, 1002783846, 919489135, 567498868, 752375421, 209336225, 24197544, 376187827, 459744698, 945164165, 895287692, 574624663, 793451934, 1679968233, 1764313568, 2117360635, 1933530610, 1343127501, 1560637892, 1243112415, 1192455638, 3704280881, 3519142200, 3336358691, 3419915562, 3907448597, 3857572124, 4075877127, 4294704398, 3029510009, 3113855344, 2927934315, 2744104290, 2159976285, 2377486676, 2594734927, 2544078150];
    var U4 = [0, 151849742, 303699484, 454499602, 607398968, 758720310, 908999204, 1059270954, 1214797936, 1097159550, 1517440620, 1400849762, 1817998408, 1699839814, 2118541908, 2001430874, 2429595872, 2581445614, 2194319100, 2345119218, 3034881240, 3186202582, 2801699524, 2951971274, 3635996816, 3518358430, 3399679628, 3283088770, 4237083816, 4118925222, 4002861748, 3885750714, 1002142683, 850817237, 698445255, 548169417, 529487843, 377642221, 227885567, 77089521, 1943217067, 2061379749, 1640576439, 1757691577, 1474760595, 1592394909, 1174215055, 1290801793, 2875968315, 2724642869, 3111247143, 2960971305, 2405426947, 2253581325, 2638606623, 2487810577, 3808662347, 3926825029, 4044981591, 4162096729, 3342319475, 3459953789, 3576539503, 3693126241, 1986918061, 2137062819, 1685577905, 1836772287, 1381620373, 1532285339, 1078185097, 1229899655, 1040559837, 923313619, 740276417, 621982671, 439452389, 322734571, 137073913, 19308535, 3871163981, 4021308739, 4104605777, 4255800159, 3263785589, 3414450555, 3499326569, 3651041127, 2933202493, 2815956275, 3167684641, 3049390895, 2330014213, 2213296395, 2566595609, 2448830231, 1305906550, 1155237496, 1607244650, 1455525988, 1776460110, 1626319424, 2079897426, 1928707164, 96392454, 213114376, 396673818, 514443284, 562755902, 679998e3, 865136418, 983426092, 3708173718, 3557504664, 3474729866, 3323011204, 4180808110, 4030667424, 3945269170, 3794078908, 2507040230, 2623762152, 2272556026, 2390325492, 2975484382, 3092726480, 2738905026, 2857194700, 3973773121, 3856137295, 4274053469, 4157467219, 3371096953, 3252932727, 3673476453, 3556361835, 2763173681, 2915017791, 3064510765, 3215307299, 2156299017, 2307622919, 2459735317, 2610011675, 2081048481, 1963412655, 1846563261, 1729977011, 1480485785, 1362321559, 1243905413, 1126790795, 878845905, 1030690015, 645401037, 796197571, 274084841, 425408743, 38544885, 188821243, 3613494426, 3731654548, 3313212038, 3430322568, 4082475170, 4200115116, 3780097726, 3896688048, 2668221674, 2516901860, 2366882550, 2216610296, 3141400786, 2989552604, 2837966542, 2687165888, 1202797690, 1320957812, 1437280870, 1554391400, 1669664834, 1787304780, 1906247262, 2022837584, 265905162, 114585348, 499347990, 349075736, 736970802, 585122620, 972512814, 821712160, 2595684844, 2478443234, 2293045232, 2174754046, 3196267988, 3079546586, 2895723464, 2777952454, 3537852828, 3687994002, 3234156416, 3385345166, 4142626212, 4293295786, 3841024952, 3992742070, 174567692, 57326082, 410887952, 292596766, 777231668, 660510266, 1011452712, 893681702, 1108339068, 1258480242, 1343618912, 1494807662, 1715193156, 1865862730, 1948373848, 2100090966, 2701949495, 2818666809, 3004591147, 3122358053, 2235061775, 2352307457, 2535604243, 2653899549, 3915653703, 3764988233, 4219352155, 4067639125, 3444575871, 3294430577, 3746175075, 3594982253, 836553431, 953270745, 600235211, 718002117, 367585007, 484830689, 133361907, 251657213, 2041877159, 1891211689, 1806599355, 1654886325, 1568718495, 1418573201, 1335535747, 1184342925];
    function convertToInt32(bytes) {
      const result = [];
      for (let i = 0; i < bytes.length; i += 4) {
        result.push(bytes[i] << 24 | bytes[i + 1] << 16 | bytes[i + 2] << 8 | bytes[i + 3]);
      }
      return result;
    }
    var AES = class _AES {
      get key() {
        return __classPrivateFieldGet2(this, _AES_key, "f").slice();
      }
      constructor(key) {
        _AES_key.set(this, void 0);
        _AES_Kd.set(this, void 0);
        _AES_Ke.set(this, void 0);
        if (!(this instanceof _AES)) {
          throw Error("AES must be instanitated with `new`");
        }
        __classPrivateFieldSet2(this, _AES_key, new Uint8Array(key), "f");
        const rounds = numberOfRounds[this.key.length];
        if (rounds == null) {
          throw new TypeError("invalid key size (must be 16, 24 or 32 bytes)");
        }
        __classPrivateFieldSet2(this, _AES_Ke, [], "f");
        __classPrivateFieldSet2(this, _AES_Kd, [], "f");
        for (let i = 0; i <= rounds; i++) {
          __classPrivateFieldGet2(this, _AES_Ke, "f").push([0, 0, 0, 0]);
          __classPrivateFieldGet2(this, _AES_Kd, "f").push([0, 0, 0, 0]);
        }
        const roundKeyCount = (rounds + 1) * 4;
        const KC = this.key.length / 4;
        const tk = convertToInt32(this.key);
        let index;
        for (let i = 0; i < KC; i++) {
          index = i >> 2;
          __classPrivateFieldGet2(this, _AES_Ke, "f")[index][i % 4] = tk[i];
          __classPrivateFieldGet2(this, _AES_Kd, "f")[rounds - index][i % 4] = tk[i];
        }
        let rconpointer = 0;
        let t = KC, tt;
        while (t < roundKeyCount) {
          tt = tk[KC - 1];
          tk[0] ^= S[tt >> 16 & 255] << 24 ^ S[tt >> 8 & 255] << 16 ^ S[tt & 255] << 8 ^ S[tt >> 24 & 255] ^ rcon[rconpointer] << 24;
          rconpointer += 1;
          if (KC != 8) {
            for (let i2 = 1; i2 < KC; i2++) {
              tk[i2] ^= tk[i2 - 1];
            }
          } else {
            for (let i2 = 1; i2 < KC / 2; i2++) {
              tk[i2] ^= tk[i2 - 1];
            }
            tt = tk[KC / 2 - 1];
            tk[KC / 2] ^= S[tt & 255] ^ S[tt >> 8 & 255] << 8 ^ S[tt >> 16 & 255] << 16 ^ S[tt >> 24 & 255] << 24;
            for (let i2 = KC / 2 + 1; i2 < KC; i2++) {
              tk[i2] ^= tk[i2 - 1];
            }
          }
          let i = 0, r, c;
          while (i < KC && t < roundKeyCount) {
            r = t >> 2;
            c = t % 4;
            __classPrivateFieldGet2(this, _AES_Ke, "f")[r][c] = tk[i];
            __classPrivateFieldGet2(this, _AES_Kd, "f")[rounds - r][c] = tk[i++];
            t++;
          }
        }
        for (let r = 1; r < rounds; r++) {
          for (let c = 0; c < 4; c++) {
            tt = __classPrivateFieldGet2(this, _AES_Kd, "f")[r][c];
            __classPrivateFieldGet2(this, _AES_Kd, "f")[r][c] = U1[tt >> 24 & 255] ^ U2[tt >> 16 & 255] ^ U3[tt >> 8 & 255] ^ U4[tt & 255];
          }
        }
      }
      encrypt(plaintext) {
        if (plaintext.length != 16) {
          throw new TypeError("invalid plaintext size (must be 16 bytes)");
        }
        const rounds = __classPrivateFieldGet2(this, _AES_Ke, "f").length - 1;
        const a = [0, 0, 0, 0];
        let t = convertToInt32(plaintext);
        for (let i = 0; i < 4; i++) {
          t[i] ^= __classPrivateFieldGet2(this, _AES_Ke, "f")[0][i];
        }
        for (let r = 1; r < rounds; r++) {
          for (let i = 0; i < 4; i++) {
            a[i] = T1[t[i] >> 24 & 255] ^ T2[t[(i + 1) % 4] >> 16 & 255] ^ T3[t[(i + 2) % 4] >> 8 & 255] ^ T4[t[(i + 3) % 4] & 255] ^ __classPrivateFieldGet2(this, _AES_Ke, "f")[r][i];
          }
          t = a.slice();
        }
        const result = new Uint8Array(16);
        let tt = 0;
        for (let i = 0; i < 4; i++) {
          tt = __classPrivateFieldGet2(this, _AES_Ke, "f")[rounds][i];
          result[4 * i] = (S[t[i] >> 24 & 255] ^ tt >> 24) & 255;
          result[4 * i + 1] = (S[t[(i + 1) % 4] >> 16 & 255] ^ tt >> 16) & 255;
          result[4 * i + 2] = (S[t[(i + 2) % 4] >> 8 & 255] ^ tt >> 8) & 255;
          result[4 * i + 3] = (S[t[(i + 3) % 4] & 255] ^ tt) & 255;
        }
        return result;
      }
      decrypt(ciphertext) {
        if (ciphertext.length != 16) {
          throw new TypeError("invalid ciphertext size (must be 16 bytes)");
        }
        const rounds = __classPrivateFieldGet2(this, _AES_Kd, "f").length - 1;
        const a = [0, 0, 0, 0];
        let t = convertToInt32(ciphertext);
        for (let i = 0; i < 4; i++) {
          t[i] ^= __classPrivateFieldGet2(this, _AES_Kd, "f")[0][i];
        }
        for (let r = 1; r < rounds; r++) {
          for (let i = 0; i < 4; i++) {
            a[i] = T5[t[i] >> 24 & 255] ^ T6[t[(i + 3) % 4] >> 16 & 255] ^ T7[t[(i + 2) % 4] >> 8 & 255] ^ T8[t[(i + 1) % 4] & 255] ^ __classPrivateFieldGet2(this, _AES_Kd, "f")[r][i];
          }
          t = a.slice();
        }
        const result = new Uint8Array(16);
        let tt = 0;
        for (let i = 0; i < 4; i++) {
          tt = __classPrivateFieldGet2(this, _AES_Kd, "f")[rounds][i];
          result[4 * i] = (Si[t[i] >> 24 & 255] ^ tt >> 24) & 255;
          result[4 * i + 1] = (Si[t[(i + 3) % 4] >> 16 & 255] ^ tt >> 16) & 255;
          result[4 * i + 2] = (Si[t[(i + 2) % 4] >> 8 & 255] ^ tt >> 8) & 255;
          result[4 * i + 3] = (Si[t[(i + 1) % 4] & 255] ^ tt) & 255;
        }
        return result;
      }
    };
    exports2.AES = AES;
    _AES_key = /* @__PURE__ */ new WeakMap(), _AES_Kd = /* @__PURE__ */ new WeakMap(), _AES_Ke = /* @__PURE__ */ new WeakMap();
  }
});

// node_modules/aes-js/lib.commonjs/mode.js
var require_mode = __commonJS({
  "node_modules/aes-js/lib.commonjs/mode.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ModeOfOperation = void 0;
    var aes_js_1 = require_aes2();
    var ModeOfOperation = class {
      constructor(name, key, cls) {
        if (cls && !(this instanceof cls)) {
          throw new Error(`${name} must be instantiated with "new"`);
        }
        Object.defineProperties(this, {
          aes: { enumerable: true, value: new aes_js_1.AES(key) },
          name: { enumerable: true, value: name }
        });
      }
    };
    exports2.ModeOfOperation = ModeOfOperation;
  }
});

// node_modules/aes-js/lib.commonjs/mode-cbc.js
var require_mode_cbc = __commonJS({
  "node_modules/aes-js/lib.commonjs/mode-cbc.js"(exports2) {
    "use strict";
    var __classPrivateFieldSet2 = exports2 && exports2.__classPrivateFieldSet || function(receiver, state, value, kind, f2) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f2) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet2 = exports2 && exports2.__classPrivateFieldGet || function(receiver, state, kind, f2) {
      if (kind === "a" && !f2) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
    };
    var _CBC_iv;
    var _CBC_lastBlock;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CBC = void 0;
    var mode_js_1 = require_mode();
    var CBC = class _CBC extends mode_js_1.ModeOfOperation {
      constructor(key, iv) {
        super("ECC", key, _CBC);
        _CBC_iv.set(this, void 0);
        _CBC_lastBlock.set(this, void 0);
        if (iv) {
          if (iv.length % 16) {
            throw new TypeError("invalid iv size (must be 16 bytes)");
          }
          __classPrivateFieldSet2(this, _CBC_iv, new Uint8Array(iv), "f");
        } else {
          __classPrivateFieldSet2(this, _CBC_iv, new Uint8Array(16), "f");
        }
        __classPrivateFieldSet2(this, _CBC_lastBlock, this.iv, "f");
      }
      get iv() {
        return new Uint8Array(__classPrivateFieldGet2(this, _CBC_iv, "f"));
      }
      encrypt(plaintext) {
        if (plaintext.length % 16) {
          throw new TypeError("invalid plaintext size (must be multiple of 16 bytes)");
        }
        const ciphertext = new Uint8Array(plaintext.length);
        for (let i = 0; i < plaintext.length; i += 16) {
          for (let j = 0; j < 16; j++) {
            __classPrivateFieldGet2(this, _CBC_lastBlock, "f")[j] ^= plaintext[i + j];
          }
          __classPrivateFieldSet2(this, _CBC_lastBlock, this.aes.encrypt(__classPrivateFieldGet2(this, _CBC_lastBlock, "f")), "f");
          ciphertext.set(__classPrivateFieldGet2(this, _CBC_lastBlock, "f"), i);
        }
        return ciphertext;
      }
      decrypt(ciphertext) {
        if (ciphertext.length % 16) {
          throw new TypeError("invalid ciphertext size (must be multiple of 16 bytes)");
        }
        const plaintext = new Uint8Array(ciphertext.length);
        for (let i = 0; i < ciphertext.length; i += 16) {
          const block = this.aes.decrypt(ciphertext.subarray(i, i + 16));
          for (let j = 0; j < 16; j++) {
            plaintext[i + j] = block[j] ^ __classPrivateFieldGet2(this, _CBC_lastBlock, "f")[j];
            __classPrivateFieldGet2(this, _CBC_lastBlock, "f")[j] = ciphertext[i + j];
          }
        }
        return plaintext;
      }
    };
    exports2.CBC = CBC;
    _CBC_iv = /* @__PURE__ */ new WeakMap(), _CBC_lastBlock = /* @__PURE__ */ new WeakMap();
  }
});

// node_modules/aes-js/lib.commonjs/mode-cfb.js
var require_mode_cfb2 = __commonJS({
  "node_modules/aes-js/lib.commonjs/mode-cfb.js"(exports2) {
    "use strict";
    var __classPrivateFieldSet2 = exports2 && exports2.__classPrivateFieldSet || function(receiver, state, value, kind, f2) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f2) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet2 = exports2 && exports2.__classPrivateFieldGet || function(receiver, state, kind, f2) {
      if (kind === "a" && !f2) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
    };
    var _CFB_instances;
    var _CFB_iv;
    var _CFB_shiftRegister;
    var _CFB_shift;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CFB = void 0;
    var mode_js_1 = require_mode();
    var CFB = class _CFB extends mode_js_1.ModeOfOperation {
      constructor(key, iv, segmentSize = 8) {
        super("CFB", key, _CFB);
        _CFB_instances.add(this);
        _CFB_iv.set(this, void 0);
        _CFB_shiftRegister.set(this, void 0);
        if (!Number.isInteger(segmentSize) || segmentSize % 8) {
          throw new TypeError("invalid segmentSize");
        }
        Object.defineProperties(this, {
          segmentSize: { enumerable: true, value: segmentSize }
        });
        if (iv) {
          if (iv.length % 16) {
            throw new TypeError("invalid iv size (must be 16 bytes)");
          }
          __classPrivateFieldSet2(this, _CFB_iv, new Uint8Array(iv), "f");
        } else {
          __classPrivateFieldSet2(this, _CFB_iv, new Uint8Array(16), "f");
        }
        __classPrivateFieldSet2(this, _CFB_shiftRegister, this.iv, "f");
      }
      get iv() {
        return new Uint8Array(__classPrivateFieldGet2(this, _CFB_iv, "f"));
      }
      encrypt(plaintext) {
        if (8 * plaintext.length % this.segmentSize) {
          throw new TypeError("invalid plaintext size (must be multiple of segmentSize bytes)");
        }
        const segmentSize = this.segmentSize / 8;
        const ciphertext = new Uint8Array(plaintext);
        for (let i = 0; i < ciphertext.length; i += segmentSize) {
          const xorSegment = this.aes.encrypt(__classPrivateFieldGet2(this, _CFB_shiftRegister, "f"));
          for (let j = 0; j < segmentSize; j++) {
            ciphertext[i + j] ^= xorSegment[j];
          }
          __classPrivateFieldGet2(this, _CFB_instances, "m", _CFB_shift).call(this, ciphertext.subarray(i));
        }
        return ciphertext;
      }
      decrypt(ciphertext) {
        if (8 * ciphertext.length % this.segmentSize) {
          throw new TypeError("invalid ciphertext size (must be multiple of segmentSize bytes)");
        }
        const segmentSize = this.segmentSize / 8;
        const plaintext = new Uint8Array(ciphertext);
        for (let i = 0; i < plaintext.length; i += segmentSize) {
          const xorSegment = this.aes.encrypt(__classPrivateFieldGet2(this, _CFB_shiftRegister, "f"));
          for (let j = 0; j < segmentSize; j++) {
            plaintext[i + j] ^= xorSegment[j];
          }
          __classPrivateFieldGet2(this, _CFB_instances, "m", _CFB_shift).call(this, ciphertext.subarray(i));
        }
        return plaintext;
      }
    };
    exports2.CFB = CFB;
    _CFB_iv = /* @__PURE__ */ new WeakMap(), _CFB_shiftRegister = /* @__PURE__ */ new WeakMap(), _CFB_instances = /* @__PURE__ */ new WeakSet(), _CFB_shift = function _CFB_shift2(data) {
      const segmentSize = this.segmentSize / 8;
      __classPrivateFieldGet2(this, _CFB_shiftRegister, "f").set(__classPrivateFieldGet2(this, _CFB_shiftRegister, "f").subarray(segmentSize));
      __classPrivateFieldGet2(this, _CFB_shiftRegister, "f").set(data.subarray(0, segmentSize), 16 - segmentSize);
    };
  }
});

// node_modules/aes-js/lib.commonjs/mode-ctr.js
var require_mode_ctr2 = __commonJS({
  "node_modules/aes-js/lib.commonjs/mode-ctr.js"(exports2) {
    "use strict";
    var __classPrivateFieldSet2 = exports2 && exports2.__classPrivateFieldSet || function(receiver, state, value, kind, f2) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f2) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet2 = exports2 && exports2.__classPrivateFieldGet || function(receiver, state, kind, f2) {
      if (kind === "a" && !f2) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
    };
    var _CTR_remaining;
    var _CTR_remainingIndex;
    var _CTR_counter;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CTR = void 0;
    var mode_js_1 = require_mode();
    var CTR = class _CTR extends mode_js_1.ModeOfOperation {
      constructor(key, initialValue) {
        super("CTR", key, _CTR);
        _CTR_remaining.set(this, void 0);
        _CTR_remainingIndex.set(this, void 0);
        _CTR_counter.set(this, void 0);
        __classPrivateFieldSet2(this, _CTR_counter, new Uint8Array(16), "f");
        __classPrivateFieldGet2(this, _CTR_counter, "f").fill(0);
        __classPrivateFieldSet2(this, _CTR_remaining, __classPrivateFieldGet2(this, _CTR_counter, "f"), "f");
        __classPrivateFieldSet2(this, _CTR_remainingIndex, 16, "f");
        if (initialValue == null) {
          initialValue = 1;
        }
        if (typeof initialValue === "number") {
          this.setCounterValue(initialValue);
        } else {
          this.setCounterBytes(initialValue);
        }
      }
      get counter() {
        return new Uint8Array(__classPrivateFieldGet2(this, _CTR_counter, "f"));
      }
      setCounterValue(value) {
        if (!Number.isInteger(value) || value < 0 || value > Number.MAX_SAFE_INTEGER) {
          throw new TypeError("invalid counter initial integer value");
        }
        for (let index = 15; index >= 0; --index) {
          __classPrivateFieldGet2(this, _CTR_counter, "f")[index] = value % 256;
          value = Math.floor(value / 256);
        }
      }
      setCounterBytes(value) {
        if (value.length !== 16) {
          throw new TypeError("invalid counter initial Uint8Array value length");
        }
        __classPrivateFieldGet2(this, _CTR_counter, "f").set(value);
      }
      increment() {
        for (let i = 15; i >= 0; i--) {
          if (__classPrivateFieldGet2(this, _CTR_counter, "f")[i] === 255) {
            __classPrivateFieldGet2(this, _CTR_counter, "f")[i] = 0;
          } else {
            __classPrivateFieldGet2(this, _CTR_counter, "f")[i]++;
            break;
          }
        }
      }
      encrypt(plaintext) {
        var _a, _b;
        const crypttext = new Uint8Array(plaintext);
        for (let i = 0; i < crypttext.length; i++) {
          if (__classPrivateFieldGet2(this, _CTR_remainingIndex, "f") === 16) {
            __classPrivateFieldSet2(this, _CTR_remaining, this.aes.encrypt(__classPrivateFieldGet2(this, _CTR_counter, "f")), "f");
            __classPrivateFieldSet2(this, _CTR_remainingIndex, 0, "f");
            this.increment();
          }
          crypttext[i] ^= __classPrivateFieldGet2(this, _CTR_remaining, "f")[__classPrivateFieldSet2(this, _CTR_remainingIndex, (_b = __classPrivateFieldGet2(this, _CTR_remainingIndex, "f"), _a = _b++, _b), "f"), _a];
        }
        return crypttext;
      }
      decrypt(ciphertext) {
        return this.encrypt(ciphertext);
      }
    };
    exports2.CTR = CTR;
    _CTR_remaining = /* @__PURE__ */ new WeakMap(), _CTR_remainingIndex = /* @__PURE__ */ new WeakMap(), _CTR_counter = /* @__PURE__ */ new WeakMap();
  }
});

// node_modules/aes-js/lib.commonjs/mode-ecb.js
var require_mode_ecb2 = __commonJS({
  "node_modules/aes-js/lib.commonjs/mode-ecb.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ECB = void 0;
    var mode_js_1 = require_mode();
    var ECB = class _ECB extends mode_js_1.ModeOfOperation {
      constructor(key) {
        super("ECB", key, _ECB);
      }
      encrypt(plaintext) {
        if (plaintext.length % 16) {
          throw new TypeError("invalid plaintext size (must be multiple of 16 bytes)");
        }
        const crypttext = new Uint8Array(plaintext.length);
        for (let i = 0; i < plaintext.length; i += 16) {
          crypttext.set(this.aes.encrypt(plaintext.subarray(i, i + 16)), i);
        }
        return crypttext;
      }
      decrypt(crypttext) {
        if (crypttext.length % 16) {
          throw new TypeError("invalid ciphertext size (must be multiple of 16 bytes)");
        }
        const plaintext = new Uint8Array(crypttext.length);
        for (let i = 0; i < crypttext.length; i += 16) {
          plaintext.set(this.aes.decrypt(crypttext.subarray(i, i + 16)), i);
        }
        return plaintext;
      }
    };
    exports2.ECB = ECB;
  }
});

// node_modules/aes-js/lib.commonjs/mode-ofb.js
var require_mode_ofb2 = __commonJS({
  "node_modules/aes-js/lib.commonjs/mode-ofb.js"(exports2) {
    "use strict";
    var __classPrivateFieldSet2 = exports2 && exports2.__classPrivateFieldSet || function(receiver, state, value, kind, f2) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f2) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet2 = exports2 && exports2.__classPrivateFieldGet || function(receiver, state, kind, f2) {
      if (kind === "a" && !f2) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
    };
    var _OFB_iv;
    var _OFB_lastPrecipher;
    var _OFB_lastPrecipherIndex;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.OFB = void 0;
    var mode_js_1 = require_mode();
    var OFB = class _OFB extends mode_js_1.ModeOfOperation {
      constructor(key, iv) {
        super("OFB", key, _OFB);
        _OFB_iv.set(this, void 0);
        _OFB_lastPrecipher.set(this, void 0);
        _OFB_lastPrecipherIndex.set(this, void 0);
        if (iv) {
          if (iv.length % 16) {
            throw new TypeError("invalid iv size (must be 16 bytes)");
          }
          __classPrivateFieldSet2(this, _OFB_iv, new Uint8Array(iv), "f");
        } else {
          __classPrivateFieldSet2(this, _OFB_iv, new Uint8Array(16), "f");
        }
        __classPrivateFieldSet2(this, _OFB_lastPrecipher, this.iv, "f");
        __classPrivateFieldSet2(this, _OFB_lastPrecipherIndex, 16, "f");
      }
      get iv() {
        return new Uint8Array(__classPrivateFieldGet2(this, _OFB_iv, "f"));
      }
      encrypt(plaintext) {
        var _a, _b;
        if (plaintext.length % 16) {
          throw new TypeError("invalid plaintext size (must be multiple of 16 bytes)");
        }
        const ciphertext = new Uint8Array(plaintext);
        for (let i = 0; i < ciphertext.length; i++) {
          if (__classPrivateFieldGet2(this, _OFB_lastPrecipherIndex, "f") === 16) {
            __classPrivateFieldSet2(this, _OFB_lastPrecipher, this.aes.encrypt(__classPrivateFieldGet2(this, _OFB_lastPrecipher, "f")), "f");
            __classPrivateFieldSet2(this, _OFB_lastPrecipherIndex, 0, "f");
          }
          ciphertext[i] ^= __classPrivateFieldGet2(this, _OFB_lastPrecipher, "f")[__classPrivateFieldSet2(this, _OFB_lastPrecipherIndex, (_b = __classPrivateFieldGet2(this, _OFB_lastPrecipherIndex, "f"), _a = _b++, _b), "f"), _a];
        }
        return ciphertext;
      }
      decrypt(ciphertext) {
        if (ciphertext.length % 16) {
          throw new TypeError("invalid ciphertext size (must be multiple of 16 bytes)");
        }
        return this.encrypt(ciphertext);
      }
    };
    exports2.OFB = OFB;
    _OFB_iv = /* @__PURE__ */ new WeakMap(), _OFB_lastPrecipher = /* @__PURE__ */ new WeakMap(), _OFB_lastPrecipherIndex = /* @__PURE__ */ new WeakMap();
  }
});

// node_modules/aes-js/lib.commonjs/padding.js
var require_padding = __commonJS({
  "node_modules/aes-js/lib.commonjs/padding.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.pkcs7Strip = exports2.pkcs7Pad = void 0;
    function pkcs7Pad(data) {
      const padder = 16 - data.length % 16;
      const result = new Uint8Array(data.length + padder);
      result.set(data);
      for (let i = data.length; i < result.length; i++) {
        result[i] = padder;
      }
      return result;
    }
    exports2.pkcs7Pad = pkcs7Pad;
    function pkcs7Strip(data) {
      if (data.length < 16) {
        throw new TypeError("PKCS#7 invalid length");
      }
      const padder = data[data.length - 1];
      if (padder > 16) {
        throw new TypeError("PKCS#7 padding byte out of range");
      }
      const length = data.length - padder;
      for (let i = 0; i < padder; i++) {
        if (data[length + i] !== padder) {
          throw new TypeError("PKCS#7 invalid padding byte");
        }
      }
      return new Uint8Array(data.subarray(0, length));
    }
    exports2.pkcs7Strip = pkcs7Strip;
  }
});

// node_modules/aes-js/lib.commonjs/index.js
var require_lib5 = __commonJS({
  "node_modules/aes-js/lib.commonjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.pkcs7Strip = exports2.pkcs7Pad = exports2.OFB = exports2.ECB = exports2.CTR = exports2.CFB = exports2.CBC = exports2.ModeOfOperation = exports2.AES = void 0;
    var aes_js_1 = require_aes2();
    Object.defineProperty(exports2, "AES", { enumerable: true, get: function() {
      return aes_js_1.AES;
    } });
    var mode_js_1 = require_mode();
    Object.defineProperty(exports2, "ModeOfOperation", { enumerable: true, get: function() {
      return mode_js_1.ModeOfOperation;
    } });
    var mode_cbc_js_1 = require_mode_cbc();
    Object.defineProperty(exports2, "CBC", { enumerable: true, get: function() {
      return mode_cbc_js_1.CBC;
    } });
    var mode_cfb_js_1 = require_mode_cfb2();
    Object.defineProperty(exports2, "CFB", { enumerable: true, get: function() {
      return mode_cfb_js_1.CFB;
    } });
    var mode_ctr_js_1 = require_mode_ctr2();
    Object.defineProperty(exports2, "CTR", { enumerable: true, get: function() {
      return mode_ctr_js_1.CTR;
    } });
    var mode_ecb_js_1 = require_mode_ecb2();
    Object.defineProperty(exports2, "ECB", { enumerable: true, get: function() {
      return mode_ecb_js_1.ECB;
    } });
    var mode_ofb_js_1 = require_mode_ofb2();
    Object.defineProperty(exports2, "OFB", { enumerable: true, get: function() {
      return mode_ofb_js_1.OFB;
    } });
    var padding_js_1 = require_padding();
    Object.defineProperty(exports2, "pkcs7Pad", { enumerable: true, get: function() {
      return padding_js_1.pkcs7Pad;
    } });
    Object.defineProperty(exports2, "pkcs7Strip", { enumerable: true, get: function() {
      return padding_js_1.pkcs7Strip;
    } });
  }
});

// node_modules/ethers/lib.commonjs/wallet/utils.js
var require_utils14 = __commonJS({
  "node_modules/ethers/lib.commonjs/wallet/utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.spelunk = exports2.getPassword = exports2.zpad = exports2.looseArrayify = void 0;
    var index_js_1 = require_utils11();
    function looseArrayify(hexString) {
      if (typeof hexString === "string" && !hexString.startsWith("0x")) {
        hexString = "0x" + hexString;
      }
      return (0, index_js_1.getBytesCopy)(hexString);
    }
    exports2.looseArrayify = looseArrayify;
    function zpad(value, length) {
      value = String(value);
      while (value.length < length) {
        value = "0" + value;
      }
      return value;
    }
    exports2.zpad = zpad;
    function getPassword(password) {
      if (typeof password === "string") {
        return (0, index_js_1.toUtf8Bytes)(password, "NFKC");
      }
      return (0, index_js_1.getBytesCopy)(password);
    }
    exports2.getPassword = getPassword;
    function spelunk(object, _path) {
      const match = _path.match(/^([a-z0-9$_.-]*)(:([a-z]+))?(!)?$/i);
      (0, index_js_1.assertArgument)(match != null, "invalid path", "path", _path);
      const path = match[1];
      const type2 = match[3];
      const reqd = match[4] === "!";
      let cur = object;
      for (const comp of path.toLowerCase().split(".")) {
        if (Array.isArray(cur)) {
          if (!comp.match(/^[0-9]+$/)) {
            break;
          }
          cur = cur[parseInt(comp)];
        } else if (typeof cur === "object") {
          let found = null;
          for (const key in cur) {
            if (key.toLowerCase() === comp) {
              found = cur[key];
              break;
            }
          }
          cur = found;
        } else {
          cur = null;
        }
        if (cur == null) {
          break;
        }
      }
      (0, index_js_1.assertArgument)(!reqd || cur != null, "missing required value", "path", path);
      if (type2 && cur != null) {
        if (type2 === "int") {
          if (typeof cur === "string" && cur.match(/^-?[0-9]+$/)) {
            return parseInt(cur);
          } else if (Number.isSafeInteger(cur)) {
            return cur;
          }
        }
        if (type2 === "number") {
          if (typeof cur === "string" && cur.match(/^-?[0-9.]*$/)) {
            return parseFloat(cur);
          }
        }
        if (type2 === "data") {
          if (typeof cur === "string") {
            return looseArrayify(cur);
          }
        }
        if (type2 === "array" && Array.isArray(cur)) {
          return cur;
        }
        if (type2 === typeof cur) {
          return cur;
        }
        (0, index_js_1.assertArgument)(false, `wrong type found for ${type2} `, "path", path);
      }
      return cur;
    }
    exports2.spelunk = spelunk;
  }
});

// node_modules/ethers/lib.commonjs/wallet/json-keystore.js
var require_json_keystore = __commonJS({
  "node_modules/ethers/lib.commonjs/wallet/json-keystore.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.encryptKeystoreJson = exports2.encryptKeystoreJsonSync = exports2.decryptKeystoreJson = exports2.decryptKeystoreJsonSync = exports2.isKeystoreJson = void 0;
    var aes_js_1 = require_lib5();
    var index_js_1 = require_address3();
    var index_js_2 = require_crypto4();
    var index_js_3 = require_transaction2();
    var index_js_4 = require_utils11();
    var utils_js_1 = require_utils14();
    var _version_js_1 = require_version2();
    var defaultPath = "m/44'/60'/0'/0/0";
    function isKeystoreJson(json) {
      try {
        const data = JSON.parse(json);
        const version2 = data.version != null ? parseInt(data.version) : 0;
        if (version2 === 3) {
          return true;
        }
      } catch (error) {
      }
      return false;
    }
    exports2.isKeystoreJson = isKeystoreJson;
    function decrypt(data, key, ciphertext) {
      const cipher = (0, utils_js_1.spelunk)(data, "crypto.cipher:string");
      if (cipher === "aes-128-ctr") {
        const iv = (0, utils_js_1.spelunk)(data, "crypto.cipherparams.iv:data!");
        const aesCtr = new aes_js_1.CTR(key, iv);
        return (0, index_js_4.hexlify)(aesCtr.decrypt(ciphertext));
      }
      (0, index_js_4.assert)(false, "unsupported cipher", "UNSUPPORTED_OPERATION", {
        operation: "decrypt"
      });
    }
    function getAccount(data, _key) {
      const key = (0, index_js_4.getBytes)(_key);
      const ciphertext = (0, utils_js_1.spelunk)(data, "crypto.ciphertext:data!");
      const computedMAC = (0, index_js_4.hexlify)((0, index_js_2.keccak256)((0, index_js_4.concat)([key.slice(16, 32), ciphertext]))).substring(2);
      (0, index_js_4.assertArgument)(computedMAC === (0, utils_js_1.spelunk)(data, "crypto.mac:string!").toLowerCase(), "incorrect password", "password", "[ REDACTED ]");
      const privateKey = decrypt(data, key.slice(0, 16), ciphertext);
      const address = (0, index_js_3.computeAddress)(privateKey);
      if (data.address) {
        let check = data.address.toLowerCase();
        if (!check.startsWith("0x")) {
          check = "0x" + check;
        }
        (0, index_js_4.assertArgument)((0, index_js_1.getAddress)(check) === address, "keystore address/privateKey mismatch", "address", data.address);
      }
      const account = { address, privateKey };
      const version2 = (0, utils_js_1.spelunk)(data, "x-ethers.version:string");
      if (version2 === "0.1") {
        const mnemonicKey = key.slice(32, 64);
        const mnemonicCiphertext = (0, utils_js_1.spelunk)(data, "x-ethers.mnemonicCiphertext:data!");
        const mnemonicIv = (0, utils_js_1.spelunk)(data, "x-ethers.mnemonicCounter:data!");
        const mnemonicAesCtr = new aes_js_1.CTR(mnemonicKey, mnemonicIv);
        account.mnemonic = {
          path: (0, utils_js_1.spelunk)(data, "x-ethers.path:string") || defaultPath,
          locale: (0, utils_js_1.spelunk)(data, "x-ethers.locale:string") || "en",
          entropy: (0, index_js_4.hexlify)((0, index_js_4.getBytes)(mnemonicAesCtr.decrypt(mnemonicCiphertext)))
        };
      }
      return account;
    }
    function getDecryptKdfParams(data) {
      const kdf = (0, utils_js_1.spelunk)(data, "crypto.kdf:string");
      if (kdf && typeof kdf === "string") {
        if (kdf.toLowerCase() === "scrypt") {
          const salt = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.salt:data!");
          const N = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.n:int!");
          const r = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.r:int!");
          const p = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.p:int!");
          (0, index_js_4.assertArgument)(N > 0 && (N & N - 1) === 0, "invalid kdf.N", "kdf.N", N);
          (0, index_js_4.assertArgument)(r > 0 && p > 0, "invalid kdf", "kdf", kdf);
          const dkLen = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.dklen:int!");
          (0, index_js_4.assertArgument)(dkLen === 32, "invalid kdf.dklen", "kdf.dflen", dkLen);
          return { name: "scrypt", salt, N, r, p, dkLen: 64 };
        } else if (kdf.toLowerCase() === "pbkdf2") {
          const salt = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.salt:data!");
          const prf = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.prf:string!");
          const algorithm2 = prf.split("-").pop();
          (0, index_js_4.assertArgument)(algorithm2 === "sha256" || algorithm2 === "sha512", "invalid kdf.pdf", "kdf.pdf", prf);
          const count = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.c:int!");
          const dkLen = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.dklen:int!");
          (0, index_js_4.assertArgument)(dkLen === 32, "invalid kdf.dklen", "kdf.dklen", dkLen);
          return { name: "pbkdf2", salt, count, dkLen, algorithm: algorithm2 };
        }
      }
      (0, index_js_4.assertArgument)(false, "unsupported key-derivation function", "kdf", kdf);
    }
    function decryptKeystoreJsonSync(json, _password) {
      const data = JSON.parse(json);
      const password = (0, utils_js_1.getPassword)(_password);
      const params = getDecryptKdfParams(data);
      if (params.name === "pbkdf2") {
        const { salt: salt2, count, dkLen: dkLen2, algorithm: algorithm2 } = params;
        const key2 = (0, index_js_2.pbkdf2)(password, salt2, count, dkLen2, algorithm2);
        return getAccount(data, key2);
      }
      (0, index_js_4.assert)(params.name === "scrypt", "cannot be reached", "UNKNOWN_ERROR", { params });
      const { salt, N, r, p, dkLen } = params;
      const key = (0, index_js_2.scryptSync)(password, salt, N, r, p, dkLen);
      return getAccount(data, key);
    }
    exports2.decryptKeystoreJsonSync = decryptKeystoreJsonSync;
    function stall(duration) {
      return new Promise((resolve) => {
        setTimeout(() => {
          resolve();
        }, duration);
      });
    }
    async function decryptKeystoreJson(json, _password, progress) {
      const data = JSON.parse(json);
      const password = (0, utils_js_1.getPassword)(_password);
      const params = getDecryptKdfParams(data);
      if (params.name === "pbkdf2") {
        if (progress) {
          progress(0);
          await stall(0);
        }
        const { salt: salt2, count, dkLen: dkLen2, algorithm: algorithm2 } = params;
        const key2 = (0, index_js_2.pbkdf2)(password, salt2, count, dkLen2, algorithm2);
        if (progress) {
          progress(1);
          await stall(0);
        }
        return getAccount(data, key2);
      }
      (0, index_js_4.assert)(params.name === "scrypt", "cannot be reached", "UNKNOWN_ERROR", { params });
      const { salt, N, r, p, dkLen } = params;
      const key = await (0, index_js_2.scrypt)(password, salt, N, r, p, dkLen, progress);
      return getAccount(data, key);
    }
    exports2.decryptKeystoreJson = decryptKeystoreJson;
    function getEncryptKdfParams(options) {
      const salt = options.salt != null ? (0, index_js_4.getBytes)(options.salt, "options.salt") : (0, index_js_2.randomBytes)(32);
      let N = 1 << 17, r = 8, p = 1;
      if (options.scrypt) {
        if (options.scrypt.N) {
          N = options.scrypt.N;
        }
        if (options.scrypt.r) {
          r = options.scrypt.r;
        }
        if (options.scrypt.p) {
          p = options.scrypt.p;
        }
      }
      (0, index_js_4.assertArgument)(typeof N === "number" && N > 0 && Number.isSafeInteger(N) && (BigInt(N) & BigInt(N - 1)) === BigInt(0), "invalid scrypt N parameter", "options.N", N);
      (0, index_js_4.assertArgument)(typeof r === "number" && r > 0 && Number.isSafeInteger(r), "invalid scrypt r parameter", "options.r", r);
      (0, index_js_4.assertArgument)(typeof p === "number" && p > 0 && Number.isSafeInteger(p), "invalid scrypt p parameter", "options.p", p);
      return { name: "scrypt", dkLen: 32, salt, N, r, p };
    }
    function _encryptKeystore(key, kdf, account, options) {
      const privateKey = (0, index_js_4.getBytes)(account.privateKey, "privateKey");
      const iv = options.iv != null ? (0, index_js_4.getBytes)(options.iv, "options.iv") : (0, index_js_2.randomBytes)(16);
      (0, index_js_4.assertArgument)(iv.length === 16, "invalid options.iv length", "options.iv", options.iv);
      const uuidRandom = options.uuid != null ? (0, index_js_4.getBytes)(options.uuid, "options.uuid") : (0, index_js_2.randomBytes)(16);
      (0, index_js_4.assertArgument)(uuidRandom.length === 16, "invalid options.uuid length", "options.uuid", options.iv);
      const derivedKey = key.slice(0, 16);
      const macPrefix = key.slice(16, 32);
      const aesCtr = new aes_js_1.CTR(derivedKey, iv);
      const ciphertext = (0, index_js_4.getBytes)(aesCtr.encrypt(privateKey));
      const mac = (0, index_js_2.keccak256)((0, index_js_4.concat)([macPrefix, ciphertext]));
      const data = {
        address: account.address.substring(2).toLowerCase(),
        id: (0, index_js_4.uuidV4)(uuidRandom),
        version: 3,
        Crypto: {
          cipher: "aes-128-ctr",
          cipherparams: {
            iv: (0, index_js_4.hexlify)(iv).substring(2)
          },
          ciphertext: (0, index_js_4.hexlify)(ciphertext).substring(2),
          kdf: "scrypt",
          kdfparams: {
            salt: (0, index_js_4.hexlify)(kdf.salt).substring(2),
            n: kdf.N,
            dklen: 32,
            p: kdf.p,
            r: kdf.r
          },
          mac: mac.substring(2)
        }
      };
      if (account.mnemonic) {
        const client = options.client != null ? options.client : `ethers/${_version_js_1.version}`;
        const path = account.mnemonic.path || defaultPath;
        const locale = account.mnemonic.locale || "en";
        const mnemonicKey = key.slice(32, 64);
        const entropy = (0, index_js_4.getBytes)(account.mnemonic.entropy, "account.mnemonic.entropy");
        const mnemonicIv = (0, index_js_2.randomBytes)(16);
        const mnemonicAesCtr = new aes_js_1.CTR(mnemonicKey, mnemonicIv);
        const mnemonicCiphertext = (0, index_js_4.getBytes)(mnemonicAesCtr.encrypt(entropy));
        const now = /* @__PURE__ */ new Date();
        const timestamp = now.getUTCFullYear() + "-" + (0, utils_js_1.zpad)(now.getUTCMonth() + 1, 2) + "-" + (0, utils_js_1.zpad)(now.getUTCDate(), 2) + "T" + (0, utils_js_1.zpad)(now.getUTCHours(), 2) + "-" + (0, utils_js_1.zpad)(now.getUTCMinutes(), 2) + "-" + (0, utils_js_1.zpad)(now.getUTCSeconds(), 2) + ".0Z";
        const gethFilename = "UTC--" + timestamp + "--" + data.address;
        data["x-ethers"] = {
          client,
          gethFilename,
          path,
          locale,
          mnemonicCounter: (0, index_js_4.hexlify)(mnemonicIv).substring(2),
          mnemonicCiphertext: (0, index_js_4.hexlify)(mnemonicCiphertext).substring(2),
          version: "0.1"
        };
      }
      return JSON.stringify(data);
    }
    function encryptKeystoreJsonSync(account, password, options) {
      if (options == null) {
        options = {};
      }
      const passwordBytes = (0, utils_js_1.getPassword)(password);
      const kdf = getEncryptKdfParams(options);
      const key = (0, index_js_2.scryptSync)(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64);
      return _encryptKeystore((0, index_js_4.getBytes)(key), kdf, account, options);
    }
    exports2.encryptKeystoreJsonSync = encryptKeystoreJsonSync;
    async function encryptKeystoreJson(account, password, options) {
      if (options == null) {
        options = {};
      }
      const passwordBytes = (0, utils_js_1.getPassword)(password);
      const kdf = getEncryptKdfParams(options);
      const key = await (0, index_js_2.scrypt)(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64, options.progressCallback);
      return _encryptKeystore((0, index_js_4.getBytes)(key), kdf, account, options);
    }
    exports2.encryptKeystoreJson = encryptKeystoreJson;
  }
});

// node_modules/ethers/lib.commonjs/wallet/hdwallet.js
var require_hdwallet = __commonJS({
  "node_modules/ethers/lib.commonjs/wallet/hdwallet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getIndexedAccountPath = exports2.getAccountPath = exports2.HDNodeVoidWallet = exports2.HDNodeWallet = exports2.defaultPath = void 0;
    var index_js_1 = require_crypto4();
    var index_js_2 = require_providers();
    var index_js_3 = require_transaction2();
    var index_js_4 = require_utils11();
    var lang_en_js_1 = require_lang_en();
    var base_wallet_js_1 = require_base_wallet();
    var mnemonic_js_1 = require_mnemonic();
    var json_keystore_js_1 = require_json_keystore();
    exports2.defaultPath = "m/44'/60'/0'/0/0";
    var MasterSecret = new Uint8Array([66, 105, 116, 99, 111, 105, 110, 32, 115, 101, 101, 100]);
    var HardenedBit = 2147483648;
    var N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
    var Nibbles = "0123456789abcdef";
    function zpad(value, length) {
      let result = "";
      while (value) {
        result = Nibbles[value % 16] + result;
        value = Math.trunc(value / 16);
      }
      while (result.length < length * 2) {
        result = "0" + result;
      }
      return "0x" + result;
    }
    function encodeBase58Check(_value) {
      const value = (0, index_js_4.getBytes)(_value);
      const check = (0, index_js_4.dataSlice)((0, index_js_1.sha256)((0, index_js_1.sha256)(value)), 0, 4);
      const bytes = (0, index_js_4.concat)([value, check]);
      return (0, index_js_4.encodeBase58)(bytes);
    }
    var _guard = {};
    function ser_I(index, chainCode, publicKey2, privateKey) {
      const data = new Uint8Array(37);
      if (index & HardenedBit) {
        (0, index_js_4.assert)(privateKey != null, "cannot derive child of neutered node", "UNSUPPORTED_OPERATION", {
          operation: "deriveChild"
        });
        data.set((0, index_js_4.getBytes)(privateKey), 1);
      } else {
        data.set((0, index_js_4.getBytes)(publicKey2));
      }
      for (let i = 24; i >= 0; i -= 8) {
        data[33 + (i >> 3)] = index >> 24 - i & 255;
      }
      const I = (0, index_js_4.getBytes)((0, index_js_1.computeHmac)("sha512", chainCode, data));
      return { IL: I.slice(0, 32), IR: I.slice(32) };
    }
    function derivePath(node, path) {
      const components = path.split("/");
      (0, index_js_4.assertArgument)(components.length > 0, "invalid path", "path", path);
      if (components[0] === "m") {
        (0, index_js_4.assertArgument)(node.depth === 0, `cannot derive root path (i.e. path starting with "m/") for a node at non-zero depth ${node.depth}`, "path", path);
        components.shift();
      }
      let result = node;
      for (let i = 0; i < components.length; i++) {
        const component = components[i];
        if (component.match(/^[0-9]+'$/)) {
          const index = parseInt(component.substring(0, component.length - 1));
          (0, index_js_4.assertArgument)(index < HardenedBit, "invalid path index", `path[${i}]`, component);
          result = result.deriveChild(HardenedBit + index);
        } else if (component.match(/^[0-9]+$/)) {
          const index = parseInt(component);
          (0, index_js_4.assertArgument)(index < HardenedBit, "invalid path index", `path[${i}]`, component);
          result = result.deriveChild(index);
        } else {
          (0, index_js_4.assertArgument)(false, "invalid path component", `path[${i}]`, component);
        }
      }
      return result;
    }
    var _HDNodeWallet_instances, account_fn, _HDNodeWallet_static, fromSeed_fn;
    var _HDNodeWallet = class _HDNodeWallet extends base_wallet_js_1.BaseWallet {
      /**
       *  @private
       */
      constructor(guard, signingKey, parentFingerprint, chainCode, path, index, depth, mnemonic, provider) {
        super(signingKey, provider);
        __privateAdd(this, _HDNodeWallet_instances);
        /**
         *  The compressed public key.
         */
        __publicField(this, "publicKey");
        /**
         *  The fingerprint.
         *
         *  A fingerprint allows quick qay to detect parent and child nodes,
         *  but developers should be prepared to deal with collisions as it
         *  is only 4 bytes.
         */
        __publicField(this, "fingerprint");
        /**
         *  The parent fingerprint.
         */
        __publicField(this, "parentFingerprint");
        /**
         *  The mnemonic used to create this HD Node, if available.
         *
         *  Sources such as extended keys do not encode the mnemonic, in
         *  which case this will be ``null``.
         */
        __publicField(this, "mnemonic");
        /**
         *  The chaincode, which is effectively a public key used
         *  to derive children.
         */
        __publicField(this, "chainCode");
        /**
         *  The derivation path of this wallet.
         *
         *  Since extended keys do not provide full path details, this
         *  may be ``null``, if instantiated from a source that does not
         *  encode it.
         */
        __publicField(this, "path");
        /**
         *  The child index of this wallet. Values over ``2 *\* 31`` indicate
         *  the node is hardened.
         */
        __publicField(this, "index");
        /**
         *  The depth of this wallet, which is the number of components
         *  in its path.
         */
        __publicField(this, "depth");
        (0, index_js_4.assertPrivate)(guard, _guard, "HDNodeWallet");
        (0, index_js_4.defineProperties)(this, { publicKey: signingKey.compressedPublicKey });
        const fingerprint = (0, index_js_4.dataSlice)((0, index_js_1.ripemd160)((0, index_js_1.sha256)(this.publicKey)), 0, 4);
        (0, index_js_4.defineProperties)(this, {
          parentFingerprint,
          fingerprint,
          chainCode,
          path,
          index,
          depth
        });
        (0, index_js_4.defineProperties)(this, { mnemonic });
      }
      connect(provider) {
        return new _HDNodeWallet(_guard, this.signingKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.mnemonic, provider);
      }
      /**
       *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with
       *  %%password%%.
       *
       *  If %%progressCallback%% is specified, it will receive periodic
       *  updates as the encryption process progreses.
       */
      async encrypt(password, progressCallback) {
        return await (0, json_keystore_js_1.encryptKeystoreJson)(__privateMethod(this, _HDNodeWallet_instances, account_fn).call(this), password, { progressCallback });
      }
      /**
       *  Returns a [JSON Keystore Wallet](json-wallets) encryped with
       *  %%password%%.
       *
       *  It is preferred to use the [async version](encrypt) instead,
       *  which allows a [[ProgressCallback]] to keep the user informed.
       *
       *  This method will block the event loop (freezing all UI) until
       *  it is complete, which may be a non-trivial duration.
       */
      encryptSync(password) {
        return (0, json_keystore_js_1.encryptKeystoreJsonSync)(__privateMethod(this, _HDNodeWallet_instances, account_fn).call(this), password);
      }
      /**
       *  The extended key.
       *
       *  This key will begin with the prefix ``xpriv`` and can be used to
       *  reconstruct this HD Node to derive its children.
       */
      get extendedKey() {
        (0, index_js_4.assert)(this.depth < 256, "Depth too deep", "UNSUPPORTED_OPERATION", { operation: "extendedKey" });
        return encodeBase58Check((0, index_js_4.concat)([
          "0x0488ADE4",
          zpad(this.depth, 1),
          this.parentFingerprint,
          zpad(this.index, 4),
          this.chainCode,
          (0, index_js_4.concat)(["0x00", this.privateKey])
        ]));
      }
      /**
       *  Returns true if this wallet has a path, providing a Type Guard
       *  that the path is non-null.
       */
      hasPath() {
        return this.path != null;
      }
      /**
       *  Returns a neutered HD Node, which removes the private details
       *  of an HD Node.
       *
       *  A neutered node has no private key, but can be used to derive
       *  child addresses and other public data about the HD Node.
       */
      neuter() {
        return new HDNodeVoidWallet(_guard, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.provider);
      }
      /**
       *  Return the child for %%index%%.
       */
      deriveChild(_index) {
        const index = (0, index_js_4.getNumber)(_index, "index");
        (0, index_js_4.assertArgument)(index <= 4294967295, "invalid index", "index", index);
        let path = this.path;
        if (path) {
          path += "/" + (index & ~HardenedBit);
          if (index & HardenedBit) {
            path += "'";
          }
        }
        const { IR, IL } = ser_I(index, this.chainCode, this.publicKey, this.privateKey);
        const ki = new index_js_1.SigningKey((0, index_js_4.toBeHex)(((0, index_js_4.toBigInt)(IL) + BigInt(this.privateKey)) % N, 32));
        return new _HDNodeWallet(_guard, ki, this.fingerprint, (0, index_js_4.hexlify)(IR), path, index, this.depth + 1, this.mnemonic, this.provider);
      }
      /**
       *  Return the HDNode for %%path%% from this node.
       */
      derivePath(path) {
        return derivePath(this, path);
      }
      /**
       *  Creates a new HD Node from %%extendedKey%%.
       *
       *  If the %%extendedKey%% will either have a prefix or ``xpub`` or
       *  ``xpriv``, returning a neutered HD Node ([[HDNodeVoidWallet]])
       *  or full HD Node ([[HDNodeWallet) respectively.
       */
      static fromExtendedKey(extendedKey) {
        const bytes = (0, index_js_4.toBeArray)((0, index_js_4.decodeBase58)(extendedKey));
        (0, index_js_4.assertArgument)(bytes.length === 82 || encodeBase58Check(bytes.slice(0, 78)) === extendedKey, "invalid extended key", "extendedKey", "[ REDACTED ]");
        const depth = bytes[4];
        const parentFingerprint = (0, index_js_4.hexlify)(bytes.slice(5, 9));
        const index = parseInt((0, index_js_4.hexlify)(bytes.slice(9, 13)).substring(2), 16);
        const chainCode = (0, index_js_4.hexlify)(bytes.slice(13, 45));
        const key = bytes.slice(45, 78);
        switch ((0, index_js_4.hexlify)(bytes.slice(0, 4))) {
          // Public Key
          case "0x0488b21e":
          case "0x043587cf": {
            const publicKey2 = (0, index_js_4.hexlify)(key);
            return new HDNodeVoidWallet(_guard, (0, index_js_3.computeAddress)(publicKey2), publicKey2, parentFingerprint, chainCode, null, index, depth, null);
          }
          // Private Key
          case "0x0488ade4":
          case "0x04358394 ":
            if (key[0] !== 0) {
              break;
            }
            return new _HDNodeWallet(_guard, new index_js_1.SigningKey(key.slice(1)), parentFingerprint, chainCode, null, index, depth, null, null);
        }
        (0, index_js_4.assertArgument)(false, "invalid extended key prefix", "extendedKey", "[ REDACTED ]");
      }
      /**
       *  Creates a new random HDNode.
       */
      static createRandom(password, path, wordlist) {
        var _a;
        if (password == null) {
          password = "";
        }
        if (path == null) {
          path = exports2.defaultPath;
        }
        if (wordlist == null) {
          wordlist = lang_en_js_1.LangEn.wordlist();
        }
        const mnemonic = mnemonic_js_1.Mnemonic.fromEntropy((0, index_js_1.randomBytes)(16), password, wordlist);
        return __privateMethod(_a = _HDNodeWallet, _HDNodeWallet_static, fromSeed_fn).call(_a, mnemonic.computeSeed(), mnemonic).derivePath(path);
      }
      /**
       *  Create an HD Node from %%mnemonic%%.
       */
      static fromMnemonic(mnemonic, path) {
        var _a;
        if (!path) {
          path = exports2.defaultPath;
        }
        return __privateMethod(_a = _HDNodeWallet, _HDNodeWallet_static, fromSeed_fn).call(_a, mnemonic.computeSeed(), mnemonic).derivePath(path);
      }
      /**
       *  Creates an HD Node from a mnemonic %%phrase%%.
       */
      static fromPhrase(phrase, password, path, wordlist) {
        var _a;
        if (password == null) {
          password = "";
        }
        if (path == null) {
          path = exports2.defaultPath;
        }
        if (wordlist == null) {
          wordlist = lang_en_js_1.LangEn.wordlist();
        }
        const mnemonic = mnemonic_js_1.Mnemonic.fromPhrase(phrase, password, wordlist);
        return __privateMethod(_a = _HDNodeWallet, _HDNodeWallet_static, fromSeed_fn).call(_a, mnemonic.computeSeed(), mnemonic).derivePath(path);
      }
      /**
       *  Creates an HD Node from a %%seed%%.
       */
      static fromSeed(seed) {
        var _a;
        return __privateMethod(_a = _HDNodeWallet, _HDNodeWallet_static, fromSeed_fn).call(_a, seed, null);
      }
    };
    _HDNodeWallet_instances = new WeakSet();
    account_fn = function() {
      const account = { address: this.address, privateKey: this.privateKey };
      const m = this.mnemonic;
      if (this.path && m && m.wordlist.locale === "en" && m.password === "") {
        account.mnemonic = {
          path: this.path,
          locale: "en",
          entropy: m.entropy
        };
      }
      return account;
    };
    _HDNodeWallet_static = new WeakSet();
    fromSeed_fn = function(_seed, mnemonic) {
      (0, index_js_4.assertArgument)((0, index_js_4.isBytesLike)(_seed), "invalid seed", "seed", "[REDACTED]");
      const seed = (0, index_js_4.getBytes)(_seed, "seed");
      (0, index_js_4.assertArgument)(seed.length >= 16 && seed.length <= 64, "invalid seed", "seed", "[REDACTED]");
      const I = (0, index_js_4.getBytes)((0, index_js_1.computeHmac)("sha512", MasterSecret, seed));
      const signingKey = new index_js_1.SigningKey((0, index_js_4.hexlify)(I.slice(0, 32)));
      return new _HDNodeWallet(_guard, signingKey, "0x00000000", (0, index_js_4.hexlify)(I.slice(32)), "m", 0, 0, mnemonic, null);
    };
    __privateAdd(_HDNodeWallet, _HDNodeWallet_static);
    var HDNodeWallet = _HDNodeWallet;
    exports2.HDNodeWallet = HDNodeWallet;
    var HDNodeVoidWallet = class _HDNodeVoidWallet extends index_js_2.VoidSigner {
      /**
       *  @private
       */
      constructor(guard, address, publicKey2, parentFingerprint, chainCode, path, index, depth, provider) {
        super(address, provider);
        /**
         *  The compressed public key.
         */
        __publicField(this, "publicKey");
        /**
         *  The fingerprint.
         *
         *  A fingerprint allows quick qay to detect parent and child nodes,
         *  but developers should be prepared to deal with collisions as it
         *  is only 4 bytes.
         */
        __publicField(this, "fingerprint");
        /**
         *  The parent node fingerprint.
         */
        __publicField(this, "parentFingerprint");
        /**
         *  The chaincode, which is effectively a public key used
         *  to derive children.
         */
        __publicField(this, "chainCode");
        /**
         *  The derivation path of this wallet.
         *
         *  Since extended keys do not provider full path details, this
         *  may be ``null``, if instantiated from a source that does not
         *  enocde it.
         */
        __publicField(this, "path");
        /**
         *  The child index of this wallet. Values over ``2 *\* 31`` indicate
         *  the node is hardened.
         */
        __publicField(this, "index");
        /**
         *  The depth of this wallet, which is the number of components
         *  in its path.
         */
        __publicField(this, "depth");
        (0, index_js_4.assertPrivate)(guard, _guard, "HDNodeVoidWallet");
        (0, index_js_4.defineProperties)(this, { publicKey: publicKey2 });
        const fingerprint = (0, index_js_4.dataSlice)((0, index_js_1.ripemd160)((0, index_js_1.sha256)(publicKey2)), 0, 4);
        (0, index_js_4.defineProperties)(this, {
          publicKey: publicKey2,
          fingerprint,
          parentFingerprint,
          chainCode,
          path,
          index,
          depth
        });
      }
      connect(provider) {
        return new _HDNodeVoidWallet(_guard, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, provider);
      }
      /**
       *  The extended key.
       *
       *  This key will begin with the prefix ``xpub`` and can be used to
       *  reconstruct this neutered key to derive its children addresses.
       */
      get extendedKey() {
        (0, index_js_4.assert)(this.depth < 256, "Depth too deep", "UNSUPPORTED_OPERATION", { operation: "extendedKey" });
        return encodeBase58Check((0, index_js_4.concat)([
          "0x0488B21E",
          zpad(this.depth, 1),
          this.parentFingerprint,
          zpad(this.index, 4),
          this.chainCode,
          this.publicKey
        ]));
      }
      /**
       *  Returns true if this wallet has a path, providing a Type Guard
       *  that the path is non-null.
       */
      hasPath() {
        return this.path != null;
      }
      /**
       *  Return the child for %%index%%.
       */
      deriveChild(_index) {
        const index = (0, index_js_4.getNumber)(_index, "index");
        (0, index_js_4.assertArgument)(index <= 4294967295, "invalid index", "index", index);
        let path = this.path;
        if (path) {
          path += "/" + (index & ~HardenedBit);
          if (index & HardenedBit) {
            path += "'";
          }
        }
        const { IR, IL } = ser_I(index, this.chainCode, this.publicKey, null);
        const Ki = index_js_1.SigningKey.addPoints(IL, this.publicKey, true);
        const address = (0, index_js_3.computeAddress)(Ki);
        return new _HDNodeVoidWallet(_guard, address, Ki, this.fingerprint, (0, index_js_4.hexlify)(IR), path, index, this.depth + 1, this.provider);
      }
      /**
       *  Return the signer for %%path%% from this node.
       */
      derivePath(path) {
        return derivePath(this, path);
      }
    };
    exports2.HDNodeVoidWallet = HDNodeVoidWallet;
    function getAccountPath(_index) {
      const index = (0, index_js_4.getNumber)(_index, "index");
      (0, index_js_4.assertArgument)(index >= 0 && index < HardenedBit, "invalid account index", "index", index);
      return `m/44'/60'/${index}'/0/0`;
    }
    exports2.getAccountPath = getAccountPath;
    function getIndexedAccountPath(_index) {
      const index = (0, index_js_4.getNumber)(_index, "index");
      (0, index_js_4.assertArgument)(index >= 0 && index < HardenedBit, "invalid account index", "index", index);
      return `m/44'/60'/0'/0/${index}`;
    }
    exports2.getIndexedAccountPath = getIndexedAccountPath;
  }
});

// node_modules/ethers/lib.commonjs/wallet/json-crowdsale.js
var require_json_crowdsale = __commonJS({
  "node_modules/ethers/lib.commonjs/wallet/json-crowdsale.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decryptCrowdsaleJson = exports2.isCrowdsaleJson = void 0;
    var aes_js_1 = require_lib5();
    var index_js_1 = require_address3();
    var index_js_2 = require_crypto4();
    var index_js_3 = require_hash2();
    var index_js_4 = require_utils11();
    var utils_js_1 = require_utils14();
    function isCrowdsaleJson(json) {
      try {
        const data = JSON.parse(json);
        if (data.encseed) {
          return true;
        }
      } catch (error) {
      }
      return false;
    }
    exports2.isCrowdsaleJson = isCrowdsaleJson;
    function decryptCrowdsaleJson(json, _password) {
      const data = JSON.parse(json);
      const password = (0, utils_js_1.getPassword)(_password);
      const address = (0, index_js_1.getAddress)((0, utils_js_1.spelunk)(data, "ethaddr:string!"));
      const encseed = (0, utils_js_1.looseArrayify)((0, utils_js_1.spelunk)(data, "encseed:string!"));
      (0, index_js_4.assertArgument)(encseed && encseed.length % 16 === 0, "invalid encseed", "json", json);
      const key = (0, index_js_4.getBytes)((0, index_js_2.pbkdf2)(password, password, 2e3, 32, "sha256")).slice(0, 16);
      const iv = encseed.slice(0, 16);
      const encryptedSeed = encseed.slice(16);
      const aesCbc = new aes_js_1.CBC(key, iv);
      const seed = (0, aes_js_1.pkcs7Strip)((0, index_js_4.getBytes)(aesCbc.decrypt(encryptedSeed)));
      let seedHex = "";
      for (let i = 0; i < seed.length; i++) {
        seedHex += String.fromCharCode(seed[i]);
      }
      return { address, privateKey: (0, index_js_3.id)(seedHex) };
    }
    exports2.decryptCrowdsaleJson = decryptCrowdsaleJson;
  }
});

// node_modules/ethers/lib.commonjs/wallet/wallet.js
var require_wallet = __commonJS({
  "node_modules/ethers/lib.commonjs/wallet/wallet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Wallet = void 0;
    var index_js_1 = require_crypto4();
    var index_js_2 = require_utils11();
    var base_wallet_js_1 = require_base_wallet();
    var hdwallet_js_1 = require_hdwallet();
    var json_crowdsale_js_1 = require_json_crowdsale();
    var json_keystore_js_1 = require_json_keystore();
    var mnemonic_js_1 = require_mnemonic();
    function stall(duration) {
      return new Promise((resolve) => {
        setTimeout(() => {
          resolve();
        }, duration);
      });
    }
    var _Wallet_static, fromAccount_fn;
    var _Wallet = class _Wallet extends base_wallet_js_1.BaseWallet {
      /**
       *  Create a new wallet for the private %%key%%, optionally connected
       *  to %%provider%%.
       */
      constructor(key, provider) {
        if (typeof key === "string" && !key.startsWith("0x")) {
          key = "0x" + key;
        }
        let signingKey = typeof key === "string" ? new index_js_1.SigningKey(key) : key;
        super(signingKey, provider);
      }
      connect(provider) {
        return new _Wallet(this.signingKey, provider);
      }
      /**
       *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with
       *  %%password%%.
       *
       *  If %%progressCallback%% is specified, it will receive periodic
       *  updates as the encryption process progreses.
       */
      async encrypt(password, progressCallback) {
        const account = { address: this.address, privateKey: this.privateKey };
        return await (0, json_keystore_js_1.encryptKeystoreJson)(account, password, { progressCallback });
      }
      /**
       *  Returns a [JSON Keystore Wallet](json-wallets) encryped with
       *  %%password%%.
       *
       *  It is preferred to use the [async version](encrypt) instead,
       *  which allows a [[ProgressCallback]] to keep the user informed.
       *
       *  This method will block the event loop (freezing all UI) until
       *  it is complete, which may be a non-trivial duration.
       */
      encryptSync(password) {
        const account = { address: this.address, privateKey: this.privateKey };
        return (0, json_keystore_js_1.encryptKeystoreJsonSync)(account, password);
      }
      /**
       *  Creates (asynchronously) a **Wallet** by decrypting the %%json%%
       *  with %%password%%.
       *
       *  If %%progress%% is provided, it is called periodically during
       *  decryption so that any UI can be updated.
       */
      static async fromEncryptedJson(json, password, progress) {
        var _a;
        let account = null;
        if ((0, json_keystore_js_1.isKeystoreJson)(json)) {
          account = await (0, json_keystore_js_1.decryptKeystoreJson)(json, password, progress);
        } else if ((0, json_crowdsale_js_1.isCrowdsaleJson)(json)) {
          if (progress) {
            progress(0);
            await stall(0);
          }
          account = (0, json_crowdsale_js_1.decryptCrowdsaleJson)(json, password);
          if (progress) {
            progress(1);
            await stall(0);
          }
        }
        return __privateMethod(_a = _Wallet, _Wallet_static, fromAccount_fn).call(_a, account);
      }
      /**
       *  Creates a **Wallet** by decrypting the %%json%% with %%password%%.
       *
       *  The [[fromEncryptedJson]] method is preferred, as this method
       *  will lock up and freeze the UI during decryption, which may take
       *  some time.
       */
      static fromEncryptedJsonSync(json, password) {
        var _a;
        let account = null;
        if ((0, json_keystore_js_1.isKeystoreJson)(json)) {
          account = (0, json_keystore_js_1.decryptKeystoreJsonSync)(json, password);
        } else if ((0, json_crowdsale_js_1.isCrowdsaleJson)(json)) {
          account = (0, json_crowdsale_js_1.decryptCrowdsaleJson)(json, password);
        } else {
          (0, index_js_2.assertArgument)(false, "invalid JSON wallet", "json", "[ REDACTED ]");
        }
        return __privateMethod(_a = _Wallet, _Wallet_static, fromAccount_fn).call(_a, account);
      }
      /**
       *  Creates a new random [[HDNodeWallet]] using the available
       *  [cryptographic random source](randomBytes).
       *
       *  If there is no crytographic random source, this will throw.
       */
      static createRandom(provider) {
        const wallet = hdwallet_js_1.HDNodeWallet.createRandom();
        if (provider) {
          return wallet.connect(provider);
        }
        return wallet;
      }
      /**
       *  Creates a [[HDNodeWallet]] for %%phrase%%.
       */
      static fromPhrase(phrase, provider) {
        const wallet = hdwallet_js_1.HDNodeWallet.fromPhrase(phrase);
        if (provider) {
          return wallet.connect(provider);
        }
        return wallet;
      }
    };
    _Wallet_static = new WeakSet();
    fromAccount_fn = function(account) {
      (0, index_js_2.assertArgument)(account, "invalid JSON wallet", "json", "[ REDACTED ]");
      if ("mnemonic" in account && account.mnemonic && account.mnemonic.locale === "en") {
        const mnemonic = mnemonic_js_1.Mnemonic.fromEntropy(account.mnemonic.entropy);
        const wallet2 = hdwallet_js_1.HDNodeWallet.fromMnemonic(mnemonic, account.mnemonic.path);
        if (wallet2.address === account.address && wallet2.privateKey === account.privateKey) {
          return wallet2;
        }
        console.log("WARNING: JSON mismatch address/privateKey != mnemonic; fallback onto private key");
      }
      const wallet = new _Wallet(account.privateKey);
      (0, index_js_2.assertArgument)(wallet.address === account.address, "address/privateKey mismatch", "json", "[ REDACTED ]");
      return wallet;
    };
    __privateAdd(_Wallet, _Wallet_static);
    var Wallet = _Wallet;
    exports2.Wallet = Wallet;
  }
});

// node_modules/ethers/lib.commonjs/wallet/index.js
var require_wallet2 = __commonJS({
  "node_modules/ethers/lib.commonjs/wallet/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Wallet = exports2.Mnemonic = exports2.encryptKeystoreJsonSync = exports2.encryptKeystoreJson = exports2.decryptKeystoreJson = exports2.decryptKeystoreJsonSync = exports2.isKeystoreJson = exports2.decryptCrowdsaleJson = exports2.isCrowdsaleJson = exports2.HDNodeVoidWallet = exports2.HDNodeWallet = exports2.getIndexedAccountPath = exports2.getAccountPath = exports2.defaultPath = exports2.BaseWallet = void 0;
    var base_wallet_js_1 = require_base_wallet();
    Object.defineProperty(exports2, "BaseWallet", { enumerable: true, get: function() {
      return base_wallet_js_1.BaseWallet;
    } });
    var hdwallet_js_1 = require_hdwallet();
    Object.defineProperty(exports2, "defaultPath", { enumerable: true, get: function() {
      return hdwallet_js_1.defaultPath;
    } });
    Object.defineProperty(exports2, "getAccountPath", { enumerable: true, get: function() {
      return hdwallet_js_1.getAccountPath;
    } });
    Object.defineProperty(exports2, "getIndexedAccountPath", { enumerable: true, get: function() {
      return hdwallet_js_1.getIndexedAccountPath;
    } });
    Object.defineProperty(exports2, "HDNodeWallet", { enumerable: true, get: function() {
      return hdwallet_js_1.HDNodeWallet;
    } });
    Object.defineProperty(exports2, "HDNodeVoidWallet", { enumerable: true, get: function() {
      return hdwallet_js_1.HDNodeVoidWallet;
    } });
    var json_crowdsale_js_1 = require_json_crowdsale();
    Object.defineProperty(exports2, "isCrowdsaleJson", { enumerable: true, get: function() {
      return json_crowdsale_js_1.isCrowdsaleJson;
    } });
    Object.defineProperty(exports2, "decryptCrowdsaleJson", { enumerable: true, get: function() {
      return json_crowdsale_js_1.decryptCrowdsaleJson;
    } });
    var json_keystore_js_1 = require_json_keystore();
    Object.defineProperty(exports2, "isKeystoreJson", { enumerable: true, get: function() {
      return json_keystore_js_1.isKeystoreJson;
    } });
    Object.defineProperty(exports2, "decryptKeystoreJsonSync", { enumerable: true, get: function() {
      return json_keystore_js_1.decryptKeystoreJsonSync;
    } });
    Object.defineProperty(exports2, "decryptKeystoreJson", { enumerable: true, get: function() {
      return json_keystore_js_1.decryptKeystoreJson;
    } });
    Object.defineProperty(exports2, "encryptKeystoreJson", { enumerable: true, get: function() {
      return json_keystore_js_1.encryptKeystoreJson;
    } });
    Object.defineProperty(exports2, "encryptKeystoreJsonSync", { enumerable: true, get: function() {
      return json_keystore_js_1.encryptKeystoreJsonSync;
    } });
    var mnemonic_js_1 = require_mnemonic();
    Object.defineProperty(exports2, "Mnemonic", { enumerable: true, get: function() {
      return mnemonic_js_1.Mnemonic;
    } });
    var wallet_js_1 = require_wallet();
    Object.defineProperty(exports2, "Wallet", { enumerable: true, get: function() {
      return wallet_js_1.Wallet;
    } });
  }
});

// node_modules/ethers/lib.commonjs/wordlists/bit-reader.js
var require_bit_reader = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/bit-reader.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decodeBits = void 0;
    var Base64 = ")!@#$%^&*(ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_";
    function decodeBits(width, data) {
      const maxValue = (1 << width) - 1;
      const result = [];
      let accum = 0, bits = 0, flood = 0;
      for (let i = 0; i < data.length; i++) {
        accum = accum << 6 | Base64.indexOf(data[i]);
        bits += 6;
        while (bits >= width) {
          const value = accum >> bits - width;
          accum &= (1 << bits - width) - 1;
          bits -= width;
          if (value === 0) {
            flood += maxValue;
          } else {
            result.push(value + flood);
            flood = 0;
          }
        }
      }
      return result;
    }
    exports2.decodeBits = decodeBits;
  }
});

// node_modules/ethers/lib.commonjs/wordlists/decode-owla.js
var require_decode_owla = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/decode-owla.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decodeOwlA = void 0;
    var index_js_1 = require_utils11();
    var bit_reader_js_1 = require_bit_reader();
    var decode_owl_js_1 = require_decode_owl();
    function decodeOwlA(data, accents) {
      let words = (0, decode_owl_js_1.decodeOwl)(data).join(",");
      accents.split(/,/g).forEach((accent) => {
        const match = accent.match(/^([a-z]*)([0-9]+)([0-9])(.*)$/);
        (0, index_js_1.assertArgument)(match !== null, "internal error parsing accents", "accents", accents);
        let posOffset = 0;
        const positions = (0, bit_reader_js_1.decodeBits)(parseInt(match[3]), match[4]);
        const charCode = parseInt(match[2]);
        const regex = new RegExp(`([${match[1]}])`, "g");
        words = words.replace(regex, (all, letter) => {
          const rem = --positions[posOffset];
          if (rem === 0) {
            letter = String.fromCharCode(letter.charCodeAt(0), charCode);
            posOffset++;
          }
          return letter;
        });
      });
      return words.split(",");
    }
    exports2.decodeOwlA = decodeOwlA;
  }
});

// node_modules/ethers/lib.commonjs/wordlists/wordlist-owla.js
var require_wordlist_owla = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/wordlist-owla.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WordlistOwlA = void 0;
    var wordlist_owl_js_1 = require_wordlist_owl();
    var decode_owla_js_1 = require_decode_owla();
    var _accent;
    var WordlistOwlA = class extends wordlist_owl_js_1.WordlistOwl {
      /**
       *  Creates a new Wordlist for %%locale%% using the OWLA %%data%%
       *  and %%accent%% data and validated against the %%checksum%%.
       */
      constructor(locale, data, accent, checksum) {
        super(locale, data, checksum);
        __privateAdd(this, _accent);
        __privateSet(this, _accent, accent);
      }
      /**
       *  The OWLA-encoded accent data.
       */
      get _accent() {
        return __privateGet(this, _accent);
      }
      /**
       *  Decode all the words for the wordlist.
       */
      _decodeWords() {
        return (0, decode_owla_js_1.decodeOwlA)(this._data, this._accent);
      }
    };
    _accent = new WeakMap();
    exports2.WordlistOwlA = WordlistOwlA;
  }
});

// node_modules/ethers/lib.commonjs/wordlists/wordlists-browser.js
var require_wordlists_browser = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/wordlists-browser.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.wordlists = void 0;
    var lang_en_js_1 = require_lang_en();
    exports2.wordlists = {
      en: lang_en_js_1.LangEn.wordlist()
    };
  }
});

// node_modules/ethers/lib.commonjs/wordlists/index.js
var require_wordlists = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.wordlists = exports2.WordlistOwlA = exports2.WordlistOwl = exports2.LangEn = exports2.Wordlist = void 0;
    var wordlist_js_1 = require_wordlist();
    Object.defineProperty(exports2, "Wordlist", { enumerable: true, get: function() {
      return wordlist_js_1.Wordlist;
    } });
    var lang_en_js_1 = require_lang_en();
    Object.defineProperty(exports2, "LangEn", { enumerable: true, get: function() {
      return lang_en_js_1.LangEn;
    } });
    var wordlist_owl_js_1 = require_wordlist_owl();
    Object.defineProperty(exports2, "WordlistOwl", { enumerable: true, get: function() {
      return wordlist_owl_js_1.WordlistOwl;
    } });
    var wordlist_owla_js_1 = require_wordlist_owla();
    Object.defineProperty(exports2, "WordlistOwlA", { enumerable: true, get: function() {
      return wordlist_owla_js_1.WordlistOwlA;
    } });
    var wordlists_js_1 = require_wordlists_browser();
    Object.defineProperty(exports2, "wordlists", { enumerable: true, get: function() {
      return wordlists_js_1.wordlists;
    } });
  }
});

// node_modules/ethers/lib.commonjs/ethers.js
var require_ethers = __commonJS({
  "node_modules/ethers/lib.commonjs/ethers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ripemd160 = exports2.keccak256 = exports2.randomBytes = exports2.computeHmac = exports2.UndecodedEventLog = exports2.EventLog = exports2.ContractUnknownEventPayload = exports2.ContractTransactionResponse = exports2.ContractTransactionReceipt = exports2.ContractEventPayload = exports2.ContractFactory = exports2.Contract = exports2.BaseContract = exports2.MessagePrefix = exports2.EtherSymbol = exports2.ZeroHash = exports2.N = exports2.MaxInt256 = exports2.MinInt256 = exports2.MaxUint256 = exports2.WeiPerEther = exports2.ZeroAddress = exports2.resolveAddress = exports2.isAddress = exports2.isAddressable = exports2.getCreate2Address = exports2.getCreateAddress = exports2.getIcapAddress = exports2.getAddress = exports2.Typed = exports2.TransactionDescription = exports2.Result = exports2.LogDescription = exports2.Interface = exports2.Indexed = exports2.ErrorDescription = exports2.checkResultErrors = exports2.StructFragment = exports2.ParamType = exports2.NamedFragment = exports2.FunctionFragment = exports2.FallbackFragment = exports2.Fragment = exports2.EventFragment = exports2.ErrorFragment = exports2.ConstructorFragment = exports2.AbiCoder = exports2.encodeBytes32String = exports2.decodeBytes32String = exports2.version = void 0;
    exports2.EnsPlugin = exports2.Network = exports2.EnsResolver = exports2.WebSocketProvider = exports2.SocketProvider = exports2.IpcSocketProvider = exports2.QuickNodeProvider = exports2.PocketProvider = exports2.InfuraWebSocketProvider = exports2.InfuraProvider = exports2.EtherscanProvider = exports2.CloudflareProvider = exports2.ChainstackProvider = exports2.AnkrProvider = exports2.AlchemyProvider = exports2.BrowserProvider = exports2.JsonRpcSigner = exports2.JsonRpcProvider = exports2.JsonRpcApiProvider = exports2.FallbackProvider = exports2.AbstractProvider = exports2.VoidSigner = exports2.NonceManager = exports2.AbstractSigner = exports2.TransactionResponse = exports2.TransactionReceipt = exports2.Log = exports2.FeeData = exports2.Block = exports2.getDefaultProvider = exports2.verifyTypedData = exports2.TypedDataEncoder = exports2.solidityPackedSha256 = exports2.solidityPackedKeccak256 = exports2.solidityPacked = exports2.verifyMessage = exports2.hashMessage = exports2.dnsEncode = exports2.namehash = exports2.isValidName = exports2.ensNormalize = exports2.id = exports2.SigningKey = exports2.Signature = exports2.lock = exports2.scryptSync = exports2.scrypt = exports2.pbkdf2 = exports2.sha512 = exports2.sha256 = void 0;
    exports2.getUint = exports2.getNumber = exports2.getBigInt = exports2.FixedNumber = exports2.FetchCancelSignal = exports2.FetchResponse = exports2.FetchRequest = exports2.EventPayload = exports2.isError = exports2.isCallException = exports2.makeError = exports2.assertPrivate = exports2.assertNormalize = exports2.assertArgumentCount = exports2.assertArgument = exports2.assert = exports2.resolveProperties = exports2.defineProperties = exports2.zeroPadValue = exports2.zeroPadBytes = exports2.stripZerosLeft = exports2.isBytesLike = exports2.isHexString = exports2.hexlify = exports2.getBytesCopy = exports2.getBytes = exports2.dataSlice = exports2.dataLength = exports2.concat = exports2.encodeBase64 = exports2.decodeBase64 = exports2.encodeBase58 = exports2.decodeBase58 = exports2.Transaction = exports2.recoverAddress = exports2.computeAddress = exports2.accessListify = exports2.showThrottleMessage = exports2.copyRequest = exports2.UnmanagedSubscriber = exports2.SocketSubscriber = exports2.SocketPendingSubscriber = exports2.SocketEventSubscriber = exports2.SocketBlockSubscriber = exports2.MulticoinProviderPlugin = exports2.NetworkPlugin = exports2.GasCostPlugin = exports2.FetchUrlFeeDataNetworkPlugin = exports2.FeeDataNetworkPlugin = exports2.EtherscanPlugin = void 0;
    exports2.wordlists = exports2.WordlistOwlA = exports2.WordlistOwl = exports2.LangEn = exports2.Wordlist = exports2.encryptKeystoreJsonSync = exports2.encryptKeystoreJson = exports2.decryptKeystoreJson = exports2.decryptKeystoreJsonSync = exports2.decryptCrowdsaleJson = exports2.isKeystoreJson = exports2.isCrowdsaleJson = exports2.getIndexedAccountPath = exports2.getAccountPath = exports2.defaultPath = exports2.Wallet = exports2.HDNodeVoidWallet = exports2.HDNodeWallet = exports2.BaseWallet = exports2.Mnemonic = exports2.uuidV4 = exports2.encodeRlp = exports2.decodeRlp = exports2.Utf8ErrorFuncs = exports2.toUtf8String = exports2.toUtf8CodePoints = exports2.toUtf8Bytes = exports2.parseUnits = exports2.formatUnits = exports2.parseEther = exports2.formatEther = exports2.mask = exports2.toTwos = exports2.fromTwos = exports2.toQuantity = exports2.toNumber = exports2.toBeHex = exports2.toBigInt = exports2.toBeArray = void 0;
    var _version_js_1 = require_version2();
    Object.defineProperty(exports2, "version", { enumerable: true, get: function() {
      return _version_js_1.version;
    } });
    var index_js_1 = require_abi();
    Object.defineProperty(exports2, "decodeBytes32String", { enumerable: true, get: function() {
      return index_js_1.decodeBytes32String;
    } });
    Object.defineProperty(exports2, "encodeBytes32String", { enumerable: true, get: function() {
      return index_js_1.encodeBytes32String;
    } });
    Object.defineProperty(exports2, "AbiCoder", { enumerable: true, get: function() {
      return index_js_1.AbiCoder;
    } });
    Object.defineProperty(exports2, "ConstructorFragment", { enumerable: true, get: function() {
      return index_js_1.ConstructorFragment;
    } });
    Object.defineProperty(exports2, "ErrorFragment", { enumerable: true, get: function() {
      return index_js_1.ErrorFragment;
    } });
    Object.defineProperty(exports2, "EventFragment", { enumerable: true, get: function() {
      return index_js_1.EventFragment;
    } });
    Object.defineProperty(exports2, "Fragment", { enumerable: true, get: function() {
      return index_js_1.Fragment;
    } });
    Object.defineProperty(exports2, "FallbackFragment", { enumerable: true, get: function() {
      return index_js_1.FallbackFragment;
    } });
    Object.defineProperty(exports2, "FunctionFragment", { enumerable: true, get: function() {
      return index_js_1.FunctionFragment;
    } });
    Object.defineProperty(exports2, "NamedFragment", { enumerable: true, get: function() {
      return index_js_1.NamedFragment;
    } });
    Object.defineProperty(exports2, "ParamType", { enumerable: true, get: function() {
      return index_js_1.ParamType;
    } });
    Object.defineProperty(exports2, "StructFragment", { enumerable: true, get: function() {
      return index_js_1.StructFragment;
    } });
    Object.defineProperty(exports2, "checkResultErrors", { enumerable: true, get: function() {
      return index_js_1.checkResultErrors;
    } });
    Object.defineProperty(exports2, "ErrorDescription", { enumerable: true, get: function() {
      return index_js_1.ErrorDescription;
    } });
    Object.defineProperty(exports2, "Indexed", { enumerable: true, get: function() {
      return index_js_1.Indexed;
    } });
    Object.defineProperty(exports2, "Interface", { enumerable: true, get: function() {
      return index_js_1.Interface;
    } });
    Object.defineProperty(exports2, "LogDescription", { enumerable: true, get: function() {
      return index_js_1.LogDescription;
    } });
    Object.defineProperty(exports2, "Result", { enumerable: true, get: function() {
      return index_js_1.Result;
    } });
    Object.defineProperty(exports2, "TransactionDescription", { enumerable: true, get: function() {
      return index_js_1.TransactionDescription;
    } });
    Object.defineProperty(exports2, "Typed", { enumerable: true, get: function() {
      return index_js_1.Typed;
    } });
    var index_js_2 = require_address3();
    Object.defineProperty(exports2, "getAddress", { enumerable: true, get: function() {
      return index_js_2.getAddress;
    } });
    Object.defineProperty(exports2, "getIcapAddress", { enumerable: true, get: function() {
      return index_js_2.getIcapAddress;
    } });
    Object.defineProperty(exports2, "getCreateAddress", { enumerable: true, get: function() {
      return index_js_2.getCreateAddress;
    } });
    Object.defineProperty(exports2, "getCreate2Address", { enumerable: true, get: function() {
      return index_js_2.getCreate2Address;
    } });
    Object.defineProperty(exports2, "isAddressable", { enumerable: true, get: function() {
      return index_js_2.isAddressable;
    } });
    Object.defineProperty(exports2, "isAddress", { enumerable: true, get: function() {
      return index_js_2.isAddress;
    } });
    Object.defineProperty(exports2, "resolveAddress", { enumerable: true, get: function() {
      return index_js_2.resolveAddress;
    } });
    var index_js_3 = require_constants2();
    Object.defineProperty(exports2, "ZeroAddress", { enumerable: true, get: function() {
      return index_js_3.ZeroAddress;
    } });
    Object.defineProperty(exports2, "WeiPerEther", { enumerable: true, get: function() {
      return index_js_3.WeiPerEther;
    } });
    Object.defineProperty(exports2, "MaxUint256", { enumerable: true, get: function() {
      return index_js_3.MaxUint256;
    } });
    Object.defineProperty(exports2, "MinInt256", { enumerable: true, get: function() {
      return index_js_3.MinInt256;
    } });
    Object.defineProperty(exports2, "MaxInt256", { enumerable: true, get: function() {
      return index_js_3.MaxInt256;
    } });
    Object.defineProperty(exports2, "N", { enumerable: true, get: function() {
      return index_js_3.N;
    } });
    Object.defineProperty(exports2, "ZeroHash", { enumerable: true, get: function() {
      return index_js_3.ZeroHash;
    } });
    Object.defineProperty(exports2, "EtherSymbol", { enumerable: true, get: function() {
      return index_js_3.EtherSymbol;
    } });
    Object.defineProperty(exports2, "MessagePrefix", { enumerable: true, get: function() {
      return index_js_3.MessagePrefix;
    } });
    var index_js_4 = require_contract2();
    Object.defineProperty(exports2, "BaseContract", { enumerable: true, get: function() {
      return index_js_4.BaseContract;
    } });
    Object.defineProperty(exports2, "Contract", { enumerable: true, get: function() {
      return index_js_4.Contract;
    } });
    Object.defineProperty(exports2, "ContractFactory", { enumerable: true, get: function() {
      return index_js_4.ContractFactory;
    } });
    Object.defineProperty(exports2, "ContractEventPayload", { enumerable: true, get: function() {
      return index_js_4.ContractEventPayload;
    } });
    Object.defineProperty(exports2, "ContractTransactionReceipt", { enumerable: true, get: function() {
      return index_js_4.ContractTransactionReceipt;
    } });
    Object.defineProperty(exports2, "ContractTransactionResponse", { enumerable: true, get: function() {
      return index_js_4.ContractTransactionResponse;
    } });
    Object.defineProperty(exports2, "ContractUnknownEventPayload", { enumerable: true, get: function() {
      return index_js_4.ContractUnknownEventPayload;
    } });
    Object.defineProperty(exports2, "EventLog", { enumerable: true, get: function() {
      return index_js_4.EventLog;
    } });
    Object.defineProperty(exports2, "UndecodedEventLog", { enumerable: true, get: function() {
      return index_js_4.UndecodedEventLog;
    } });
    var index_js_5 = require_crypto4();
    Object.defineProperty(exports2, "computeHmac", { enumerable: true, get: function() {
      return index_js_5.computeHmac;
    } });
    Object.defineProperty(exports2, "randomBytes", { enumerable: true, get: function() {
      return index_js_5.randomBytes;
    } });
    Object.defineProperty(exports2, "keccak256", { enumerable: true, get: function() {
      return index_js_5.keccak256;
    } });
    Object.defineProperty(exports2, "ripemd160", { enumerable: true, get: function() {
      return index_js_5.ripemd160;
    } });
    Object.defineProperty(exports2, "sha256", { enumerable: true, get: function() {
      return index_js_5.sha256;
    } });
    Object.defineProperty(exports2, "sha512", { enumerable: true, get: function() {
      return index_js_5.sha512;
    } });
    Object.defineProperty(exports2, "pbkdf2", { enumerable: true, get: function() {
      return index_js_5.pbkdf2;
    } });
    Object.defineProperty(exports2, "scrypt", { enumerable: true, get: function() {
      return index_js_5.scrypt;
    } });
    Object.defineProperty(exports2, "scryptSync", { enumerable: true, get: function() {
      return index_js_5.scryptSync;
    } });
    Object.defineProperty(exports2, "lock", { enumerable: true, get: function() {
      return index_js_5.lock;
    } });
    Object.defineProperty(exports2, "Signature", { enumerable: true, get: function() {
      return index_js_5.Signature;
    } });
    Object.defineProperty(exports2, "SigningKey", { enumerable: true, get: function() {
      return index_js_5.SigningKey;
    } });
    var index_js_6 = require_hash2();
    Object.defineProperty(exports2, "id", { enumerable: true, get: function() {
      return index_js_6.id;
    } });
    Object.defineProperty(exports2, "ensNormalize", { enumerable: true, get: function() {
      return index_js_6.ensNormalize;
    } });
    Object.defineProperty(exports2, "isValidName", { enumerable: true, get: function() {
      return index_js_6.isValidName;
    } });
    Object.defineProperty(exports2, "namehash", { enumerable: true, get: function() {
      return index_js_6.namehash;
    } });
    Object.defineProperty(exports2, "dnsEncode", { enumerable: true, get: function() {
      return index_js_6.dnsEncode;
    } });
    Object.defineProperty(exports2, "hashMessage", { enumerable: true, get: function() {
      return index_js_6.hashMessage;
    } });
    Object.defineProperty(exports2, "verifyMessage", { enumerable: true, get: function() {
      return index_js_6.verifyMessage;
    } });
    Object.defineProperty(exports2, "solidityPacked", { enumerable: true, get: function() {
      return index_js_6.solidityPacked;
    } });
    Object.defineProperty(exports2, "solidityPackedKeccak256", { enumerable: true, get: function() {
      return index_js_6.solidityPackedKeccak256;
    } });
    Object.defineProperty(exports2, "solidityPackedSha256", { enumerable: true, get: function() {
      return index_js_6.solidityPackedSha256;
    } });
    Object.defineProperty(exports2, "TypedDataEncoder", { enumerable: true, get: function() {
      return index_js_6.TypedDataEncoder;
    } });
    Object.defineProperty(exports2, "verifyTypedData", { enumerable: true, get: function() {
      return index_js_6.verifyTypedData;
    } });
    var index_js_7 = require_providers();
    Object.defineProperty(exports2, "getDefaultProvider", { enumerable: true, get: function() {
      return index_js_7.getDefaultProvider;
    } });
    Object.defineProperty(exports2, "Block", { enumerable: true, get: function() {
      return index_js_7.Block;
    } });
    Object.defineProperty(exports2, "FeeData", { enumerable: true, get: function() {
      return index_js_7.FeeData;
    } });
    Object.defineProperty(exports2, "Log", { enumerable: true, get: function() {
      return index_js_7.Log;
    } });
    Object.defineProperty(exports2, "TransactionReceipt", { enumerable: true, get: function() {
      return index_js_7.TransactionReceipt;
    } });
    Object.defineProperty(exports2, "TransactionResponse", { enumerable: true, get: function() {
      return index_js_7.TransactionResponse;
    } });
    Object.defineProperty(exports2, "AbstractSigner", { enumerable: true, get: function() {
      return index_js_7.AbstractSigner;
    } });
    Object.defineProperty(exports2, "NonceManager", { enumerable: true, get: function() {
      return index_js_7.NonceManager;
    } });
    Object.defineProperty(exports2, "VoidSigner", { enumerable: true, get: function() {
      return index_js_7.VoidSigner;
    } });
    Object.defineProperty(exports2, "AbstractProvider", { enumerable: true, get: function() {
      return index_js_7.AbstractProvider;
    } });
    Object.defineProperty(exports2, "FallbackProvider", { enumerable: true, get: function() {
      return index_js_7.FallbackProvider;
    } });
    Object.defineProperty(exports2, "JsonRpcApiProvider", { enumerable: true, get: function() {
      return index_js_7.JsonRpcApiProvider;
    } });
    Object.defineProperty(exports2, "JsonRpcProvider", { enumerable: true, get: function() {
      return index_js_7.JsonRpcProvider;
    } });
    Object.defineProperty(exports2, "JsonRpcSigner", { enumerable: true, get: function() {
      return index_js_7.JsonRpcSigner;
    } });
    Object.defineProperty(exports2, "BrowserProvider", { enumerable: true, get: function() {
      return index_js_7.BrowserProvider;
    } });
    Object.defineProperty(exports2, "AlchemyProvider", { enumerable: true, get: function() {
      return index_js_7.AlchemyProvider;
    } });
    Object.defineProperty(exports2, "AnkrProvider", { enumerable: true, get: function() {
      return index_js_7.AnkrProvider;
    } });
    Object.defineProperty(exports2, "ChainstackProvider", { enumerable: true, get: function() {
      return index_js_7.ChainstackProvider;
    } });
    Object.defineProperty(exports2, "CloudflareProvider", { enumerable: true, get: function() {
      return index_js_7.CloudflareProvider;
    } });
    Object.defineProperty(exports2, "EtherscanProvider", { enumerable: true, get: function() {
      return index_js_7.EtherscanProvider;
    } });
    Object.defineProperty(exports2, "InfuraProvider", { enumerable: true, get: function() {
      return index_js_7.InfuraProvider;
    } });
    Object.defineProperty(exports2, "InfuraWebSocketProvider", { enumerable: true, get: function() {
      return index_js_7.InfuraWebSocketProvider;
    } });
    Object.defineProperty(exports2, "PocketProvider", { enumerable: true, get: function() {
      return index_js_7.PocketProvider;
    } });
    Object.defineProperty(exports2, "QuickNodeProvider", { enumerable: true, get: function() {
      return index_js_7.QuickNodeProvider;
    } });
    Object.defineProperty(exports2, "IpcSocketProvider", { enumerable: true, get: function() {
      return index_js_7.IpcSocketProvider;
    } });
    Object.defineProperty(exports2, "SocketProvider", { enumerable: true, get: function() {
      return index_js_7.SocketProvider;
    } });
    Object.defineProperty(exports2, "WebSocketProvider", { enumerable: true, get: function() {
      return index_js_7.WebSocketProvider;
    } });
    Object.defineProperty(exports2, "EnsResolver", { enumerable: true, get: function() {
      return index_js_7.EnsResolver;
    } });
    Object.defineProperty(exports2, "Network", { enumerable: true, get: function() {
      return index_js_7.Network;
    } });
    Object.defineProperty(exports2, "EnsPlugin", { enumerable: true, get: function() {
      return index_js_7.EnsPlugin;
    } });
    Object.defineProperty(exports2, "EtherscanPlugin", { enumerable: true, get: function() {
      return index_js_7.EtherscanPlugin;
    } });
    Object.defineProperty(exports2, "FeeDataNetworkPlugin", { enumerable: true, get: function() {
      return index_js_7.FeeDataNetworkPlugin;
    } });
    Object.defineProperty(exports2, "FetchUrlFeeDataNetworkPlugin", { enumerable: true, get: function() {
      return index_js_7.FetchUrlFeeDataNetworkPlugin;
    } });
    Object.defineProperty(exports2, "GasCostPlugin", { enumerable: true, get: function() {
      return index_js_7.GasCostPlugin;
    } });
    Object.defineProperty(exports2, "NetworkPlugin", { enumerable: true, get: function() {
      return index_js_7.NetworkPlugin;
    } });
    Object.defineProperty(exports2, "MulticoinProviderPlugin", { enumerable: true, get: function() {
      return index_js_7.MulticoinProviderPlugin;
    } });
    Object.defineProperty(exports2, "SocketBlockSubscriber", { enumerable: true, get: function() {
      return index_js_7.SocketBlockSubscriber;
    } });
    Object.defineProperty(exports2, "SocketEventSubscriber", { enumerable: true, get: function() {
      return index_js_7.SocketEventSubscriber;
    } });
    Object.defineProperty(exports2, "SocketPendingSubscriber", { enumerable: true, get: function() {
      return index_js_7.SocketPendingSubscriber;
    } });
    Object.defineProperty(exports2, "SocketSubscriber", { enumerable: true, get: function() {
      return index_js_7.SocketSubscriber;
    } });
    Object.defineProperty(exports2, "UnmanagedSubscriber", { enumerable: true, get: function() {
      return index_js_7.UnmanagedSubscriber;
    } });
    Object.defineProperty(exports2, "copyRequest", { enumerable: true, get: function() {
      return index_js_7.copyRequest;
    } });
    Object.defineProperty(exports2, "showThrottleMessage", { enumerable: true, get: function() {
      return index_js_7.showThrottleMessage;
    } });
    var index_js_8 = require_transaction2();
    Object.defineProperty(exports2, "accessListify", { enumerable: true, get: function() {
      return index_js_8.accessListify;
    } });
    Object.defineProperty(exports2, "computeAddress", { enumerable: true, get: function() {
      return index_js_8.computeAddress;
    } });
    Object.defineProperty(exports2, "recoverAddress", { enumerable: true, get: function() {
      return index_js_8.recoverAddress;
    } });
    Object.defineProperty(exports2, "Transaction", { enumerable: true, get: function() {
      return index_js_8.Transaction;
    } });
    var index_js_9 = require_utils11();
    Object.defineProperty(exports2, "decodeBase58", { enumerable: true, get: function() {
      return index_js_9.decodeBase58;
    } });
    Object.defineProperty(exports2, "encodeBase58", { enumerable: true, get: function() {
      return index_js_9.encodeBase58;
    } });
    Object.defineProperty(exports2, "decodeBase64", { enumerable: true, get: function() {
      return index_js_9.decodeBase64;
    } });
    Object.defineProperty(exports2, "encodeBase64", { enumerable: true, get: function() {
      return index_js_9.encodeBase64;
    } });
    Object.defineProperty(exports2, "concat", { enumerable: true, get: function() {
      return index_js_9.concat;
    } });
    Object.defineProperty(exports2, "dataLength", { enumerable: true, get: function() {
      return index_js_9.dataLength;
    } });
    Object.defineProperty(exports2, "dataSlice", { enumerable: true, get: function() {
      return index_js_9.dataSlice;
    } });
    Object.defineProperty(exports2, "getBytes", { enumerable: true, get: function() {
      return index_js_9.getBytes;
    } });
    Object.defineProperty(exports2, "getBytesCopy", { enumerable: true, get: function() {
      return index_js_9.getBytesCopy;
    } });
    Object.defineProperty(exports2, "hexlify", { enumerable: true, get: function() {
      return index_js_9.hexlify;
    } });
    Object.defineProperty(exports2, "isHexString", { enumerable: true, get: function() {
      return index_js_9.isHexString;
    } });
    Object.defineProperty(exports2, "isBytesLike", { enumerable: true, get: function() {
      return index_js_9.isBytesLike;
    } });
    Object.defineProperty(exports2, "stripZerosLeft", { enumerable: true, get: function() {
      return index_js_9.stripZerosLeft;
    } });
    Object.defineProperty(exports2, "zeroPadBytes", { enumerable: true, get: function() {
      return index_js_9.zeroPadBytes;
    } });
    Object.defineProperty(exports2, "zeroPadValue", { enumerable: true, get: function() {
      return index_js_9.zeroPadValue;
    } });
    Object.defineProperty(exports2, "defineProperties", { enumerable: true, get: function() {
      return index_js_9.defineProperties;
    } });
    Object.defineProperty(exports2, "resolveProperties", { enumerable: true, get: function() {
      return index_js_9.resolveProperties;
    } });
    Object.defineProperty(exports2, "assert", { enumerable: true, get: function() {
      return index_js_9.assert;
    } });
    Object.defineProperty(exports2, "assertArgument", { enumerable: true, get: function() {
      return index_js_9.assertArgument;
    } });
    Object.defineProperty(exports2, "assertArgumentCount", { enumerable: true, get: function() {
      return index_js_9.assertArgumentCount;
    } });
    Object.defineProperty(exports2, "assertNormalize", { enumerable: true, get: function() {
      return index_js_9.assertNormalize;
    } });
    Object.defineProperty(exports2, "assertPrivate", { enumerable: true, get: function() {
      return index_js_9.assertPrivate;
    } });
    Object.defineProperty(exports2, "makeError", { enumerable: true, get: function() {
      return index_js_9.makeError;
    } });
    Object.defineProperty(exports2, "isCallException", { enumerable: true, get: function() {
      return index_js_9.isCallException;
    } });
    Object.defineProperty(exports2, "isError", { enumerable: true, get: function() {
      return index_js_9.isError;
    } });
    Object.defineProperty(exports2, "EventPayload", { enumerable: true, get: function() {
      return index_js_9.EventPayload;
    } });
    Object.defineProperty(exports2, "FetchRequest", { enumerable: true, get: function() {
      return index_js_9.FetchRequest;
    } });
    Object.defineProperty(exports2, "FetchResponse", { enumerable: true, get: function() {
      return index_js_9.FetchResponse;
    } });
    Object.defineProperty(exports2, "FetchCancelSignal", { enumerable: true, get: function() {
      return index_js_9.FetchCancelSignal;
    } });
    Object.defineProperty(exports2, "FixedNumber", { enumerable: true, get: function() {
      return index_js_9.FixedNumber;
    } });
    Object.defineProperty(exports2, "getBigInt", { enumerable: true, get: function() {
      return index_js_9.getBigInt;
    } });
    Object.defineProperty(exports2, "getNumber", { enumerable: true, get: function() {
      return index_js_9.getNumber;
    } });
    Object.defineProperty(exports2, "getUint", { enumerable: true, get: function() {
      return index_js_9.getUint;
    } });
    Object.defineProperty(exports2, "toBeArray", { enumerable: true, get: function() {
      return index_js_9.toBeArray;
    } });
    Object.defineProperty(exports2, "toBigInt", { enumerable: true, get: function() {
      return index_js_9.toBigInt;
    } });
    Object.defineProperty(exports2, "toBeHex", { enumerable: true, get: function() {
      return index_js_9.toBeHex;
    } });
    Object.defineProperty(exports2, "toNumber", { enumerable: true, get: function() {
      return index_js_9.toNumber;
    } });
    Object.defineProperty(exports2, "toQuantity", { enumerable: true, get: function() {
      return index_js_9.toQuantity;
    } });
    Object.defineProperty(exports2, "fromTwos", { enumerable: true, get: function() {
      return index_js_9.fromTwos;
    } });
    Object.defineProperty(exports2, "toTwos", { enumerable: true, get: function() {
      return index_js_9.toTwos;
    } });
    Object.defineProperty(exports2, "mask", { enumerable: true, get: function() {
      return index_js_9.mask;
    } });
    Object.defineProperty(exports2, "formatEther", { enumerable: true, get: function() {
      return index_js_9.formatEther;
    } });
    Object.defineProperty(exports2, "parseEther", { enumerable: true, get: function() {
      return index_js_9.parseEther;
    } });
    Object.defineProperty(exports2, "formatUnits", { enumerable: true, get: function() {
      return index_js_9.formatUnits;
    } });
    Object.defineProperty(exports2, "parseUnits", { enumerable: true, get: function() {
      return index_js_9.parseUnits;
    } });
    Object.defineProperty(exports2, "toUtf8Bytes", { enumerable: true, get: function() {
      return index_js_9.toUtf8Bytes;
    } });
    Object.defineProperty(exports2, "toUtf8CodePoints", { enumerable: true, get: function() {
      return index_js_9.toUtf8CodePoints;
    } });
    Object.defineProperty(exports2, "toUtf8String", { enumerable: true, get: function() {
      return index_js_9.toUtf8String;
    } });
    Object.defineProperty(exports2, "Utf8ErrorFuncs", { enumerable: true, get: function() {
      return index_js_9.Utf8ErrorFuncs;
    } });
    Object.defineProperty(exports2, "decodeRlp", { enumerable: true, get: function() {
      return index_js_9.decodeRlp;
    } });
    Object.defineProperty(exports2, "encodeRlp", { enumerable: true, get: function() {
      return index_js_9.encodeRlp;
    } });
    Object.defineProperty(exports2, "uuidV4", { enumerable: true, get: function() {
      return index_js_9.uuidV4;
    } });
    var index_js_10 = require_wallet2();
    Object.defineProperty(exports2, "Mnemonic", { enumerable: true, get: function() {
      return index_js_10.Mnemonic;
    } });
    Object.defineProperty(exports2, "BaseWallet", { enumerable: true, get: function() {
      return index_js_10.BaseWallet;
    } });
    Object.defineProperty(exports2, "HDNodeWallet", { enumerable: true, get: function() {
      return index_js_10.HDNodeWallet;
    } });
    Object.defineProperty(exports2, "HDNodeVoidWallet", { enumerable: true, get: function() {
      return index_js_10.HDNodeVoidWallet;
    } });
    Object.defineProperty(exports2, "Wallet", { enumerable: true, get: function() {
      return index_js_10.Wallet;
    } });
    Object.defineProperty(exports2, "defaultPath", { enumerable: true, get: function() {
      return index_js_10.defaultPath;
    } });
    Object.defineProperty(exports2, "getAccountPath", { enumerable: true, get: function() {
      return index_js_10.getAccountPath;
    } });
    Object.defineProperty(exports2, "getIndexedAccountPath", { enumerable: true, get: function() {
      return index_js_10.getIndexedAccountPath;
    } });
    Object.defineProperty(exports2, "isCrowdsaleJson", { enumerable: true, get: function() {
      return index_js_10.isCrowdsaleJson;
    } });
    Object.defineProperty(exports2, "isKeystoreJson", { enumerable: true, get: function() {
      return index_js_10.isKeystoreJson;
    } });
    Object.defineProperty(exports2, "decryptCrowdsaleJson", { enumerable: true, get: function() {
      return index_js_10.decryptCrowdsaleJson;
    } });
    Object.defineProperty(exports2, "decryptKeystoreJsonSync", { enumerable: true, get: function() {
      return index_js_10.decryptKeystoreJsonSync;
    } });
    Object.defineProperty(exports2, "decryptKeystoreJson", { enumerable: true, get: function() {
      return index_js_10.decryptKeystoreJson;
    } });
    Object.defineProperty(exports2, "encryptKeystoreJson", { enumerable: true, get: function() {
      return index_js_10.encryptKeystoreJson;
    } });
    Object.defineProperty(exports2, "encryptKeystoreJsonSync", { enumerable: true, get: function() {
      return index_js_10.encryptKeystoreJsonSync;
    } });
    var index_js_11 = require_wordlists();
    Object.defineProperty(exports2, "Wordlist", { enumerable: true, get: function() {
      return index_js_11.Wordlist;
    } });
    Object.defineProperty(exports2, "LangEn", { enumerable: true, get: function() {
      return index_js_11.LangEn;
    } });
    Object.defineProperty(exports2, "WordlistOwl", { enumerable: true, get: function() {
      return index_js_11.WordlistOwl;
    } });
    Object.defineProperty(exports2, "WordlistOwlA", { enumerable: true, get: function() {
      return index_js_11.WordlistOwlA;
    } });
    Object.defineProperty(exports2, "wordlists", { enumerable: true, get: function() {
      return index_js_11.wordlists;
    } });
  }
});

// node_modules/ethers/lib.commonjs/index.js
var require_lib6 = __commonJS({
  "node_modules/ethers/lib.commonjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ethers = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var ethers = tslib_1.__importStar(require_ethers());
    exports2.ethers = ethers;
    tslib_1.__exportStar(require_ethers(), exports2);
  }
});

// node_modules/safe-buffer/index.js
var require_safe_buffer = __commonJS({
  "node_modules/safe-buffer/index.js"(exports2, module2) {
    var buffer = require_buffer2();
    var Buffer4 = buffer.Buffer;
    function copyProps(src, dst) {
      for (var key in src) {
        dst[key] = src[key];
      }
    }
    if (Buffer4.from && Buffer4.alloc && Buffer4.allocUnsafe && Buffer4.allocUnsafeSlow) {
      module2.exports = buffer;
    } else {
      copyProps(buffer, exports2);
      exports2.Buffer = SafeBuffer;
    }
    function SafeBuffer(arg, encodingOrOffset, length) {
      return Buffer4(arg, encodingOrOffset, length);
    }
    SafeBuffer.prototype = Object.create(Buffer4.prototype);
    copyProps(Buffer4, SafeBuffer);
    SafeBuffer.from = function(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        throw new TypeError("Argument must not be a number");
      }
      return Buffer4(arg, encodingOrOffset, length);
    };
    SafeBuffer.alloc = function(size, fill, encoding) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      var buf = Buffer4(size);
      if (fill !== void 0) {
        if (typeof encoding === "string") {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }
      return buf;
    };
    SafeBuffer.allocUnsafe = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return Buffer4(size);
    };
    SafeBuffer.allocUnsafeSlow = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return buffer.SlowBuffer(size);
    };
  }
});

// node_modules/@solana/web3.js/node_modules/base-x/src/index.js
var require_src2 = __commonJS({
  "node_modules/@solana/web3.js/node_modules/base-x/src/index.js"(exports2, module2) {
    "use strict";
    var _Buffer = require_safe_buffer().Buffer;
    function base(ALPHABET) {
      if (ALPHABET.length >= 255) {
        throw new TypeError("Alphabet too long");
      }
      var BASE_MAP = new Uint8Array(256);
      for (var j = 0; j < BASE_MAP.length; j++) {
        BASE_MAP[j] = 255;
      }
      for (var i = 0; i < ALPHABET.length; i++) {
        var x = ALPHABET.charAt(i);
        var xc = x.charCodeAt(0);
        if (BASE_MAP[xc] !== 255) {
          throw new TypeError(x + " is ambiguous");
        }
        BASE_MAP[xc] = i;
      }
      var BASE = ALPHABET.length;
      var LEADER = ALPHABET.charAt(0);
      var FACTOR = Math.log(BASE) / Math.log(256);
      var iFACTOR = Math.log(256) / Math.log(BASE);
      function encode2(source) {
        if (Array.isArray(source) || source instanceof Uint8Array) {
          source = _Buffer.from(source);
        }
        if (!_Buffer.isBuffer(source)) {
          throw new TypeError("Expected Buffer");
        }
        if (source.length === 0) {
          return "";
        }
        var zeroes = 0;
        var length = 0;
        var pbegin = 0;
        var pend = source.length;
        while (pbegin !== pend && source[pbegin] === 0) {
          pbegin++;
          zeroes++;
        }
        var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
        var b58 = new Uint8Array(size);
        while (pbegin !== pend) {
          var carry = source[pbegin];
          var i2 = 0;
          for (var it1 = size - 1; (carry !== 0 || i2 < length) && it1 !== -1; it1--, i2++) {
            carry += 256 * b58[it1] >>> 0;
            b58[it1] = carry % BASE >>> 0;
            carry = carry / BASE >>> 0;
          }
          if (carry !== 0) {
            throw new Error("Non-zero carry");
          }
          length = i2;
          pbegin++;
        }
        var it2 = size - length;
        while (it2 !== size && b58[it2] === 0) {
          it2++;
        }
        var str = LEADER.repeat(zeroes);
        for (; it2 < size; ++it2) {
          str += ALPHABET.charAt(b58[it2]);
        }
        return str;
      }
      function decodeUnsafe(source) {
        if (typeof source !== "string") {
          throw new TypeError("Expected String");
        }
        if (source.length === 0) {
          return _Buffer.alloc(0);
        }
        var psz = 0;
        var zeroes = 0;
        var length = 0;
        while (source[psz] === LEADER) {
          zeroes++;
          psz++;
        }
        var size = (source.length - psz) * FACTOR + 1 >>> 0;
        var b256 = new Uint8Array(size);
        while (psz < source.length) {
          var charCode = source.charCodeAt(psz);
          if (charCode > 255) {
            return;
          }
          var carry = BASE_MAP[charCode];
          if (carry === 255) {
            return;
          }
          var i2 = 0;
          for (var it3 = size - 1; (carry !== 0 || i2 < length) && it3 !== -1; it3--, i2++) {
            carry += BASE * b256[it3] >>> 0;
            b256[it3] = carry % 256 >>> 0;
            carry = carry / 256 >>> 0;
          }
          if (carry !== 0) {
            throw new Error("Non-zero carry");
          }
          length = i2;
          psz++;
        }
        var it4 = size - length;
        while (it4 !== size && b256[it4] === 0) {
          it4++;
        }
        var vch = _Buffer.allocUnsafe(zeroes + (size - it4));
        vch.fill(0, 0, zeroes);
        var j2 = zeroes;
        while (it4 !== size) {
          vch[j2++] = b256[it4++];
        }
        return vch;
      }
      function decode2(string2) {
        var buffer = decodeUnsafe(string2);
        if (buffer) {
          return buffer;
        }
        throw new Error("Non-base" + BASE + " character");
      }
      return {
        encode: encode2,
        decodeUnsafe,
        decode: decode2
      };
    }
    module2.exports = base;
  }
});

// node_modules/@solana/web3.js/node_modules/bs58/index.js
var require_bs582 = __commonJS({
  "node_modules/@solana/web3.js/node_modules/bs58/index.js"(exports2, module2) {
    var basex = require_src2();
    var ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
    module2.exports = basex(ALPHABET);
  }
});

// node_modules/borsh/node_modules/base-x/src/index.js
var require_src3 = __commonJS({
  "node_modules/borsh/node_modules/base-x/src/index.js"(exports2, module2) {
    "use strict";
    var _Buffer = require_safe_buffer().Buffer;
    function base(ALPHABET) {
      if (ALPHABET.length >= 255) {
        throw new TypeError("Alphabet too long");
      }
      var BASE_MAP = new Uint8Array(256);
      for (var j = 0; j < BASE_MAP.length; j++) {
        BASE_MAP[j] = 255;
      }
      for (var i = 0; i < ALPHABET.length; i++) {
        var x = ALPHABET.charAt(i);
        var xc = x.charCodeAt(0);
        if (BASE_MAP[xc] !== 255) {
          throw new TypeError(x + " is ambiguous");
        }
        BASE_MAP[xc] = i;
      }
      var BASE = ALPHABET.length;
      var LEADER = ALPHABET.charAt(0);
      var FACTOR = Math.log(BASE) / Math.log(256);
      var iFACTOR = Math.log(256) / Math.log(BASE);
      function encode2(source) {
        if (Array.isArray(source) || source instanceof Uint8Array) {
          source = _Buffer.from(source);
        }
        if (!_Buffer.isBuffer(source)) {
          throw new TypeError("Expected Buffer");
        }
        if (source.length === 0) {
          return "";
        }
        var zeroes = 0;
        var length = 0;
        var pbegin = 0;
        var pend = source.length;
        while (pbegin !== pend && source[pbegin] === 0) {
          pbegin++;
          zeroes++;
        }
        var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
        var b58 = new Uint8Array(size);
        while (pbegin !== pend) {
          var carry = source[pbegin];
          var i2 = 0;
          for (var it1 = size - 1; (carry !== 0 || i2 < length) && it1 !== -1; it1--, i2++) {
            carry += 256 * b58[it1] >>> 0;
            b58[it1] = carry % BASE >>> 0;
            carry = carry / BASE >>> 0;
          }
          if (carry !== 0) {
            throw new Error("Non-zero carry");
          }
          length = i2;
          pbegin++;
        }
        var it2 = size - length;
        while (it2 !== size && b58[it2] === 0) {
          it2++;
        }
        var str = LEADER.repeat(zeroes);
        for (; it2 < size; ++it2) {
          str += ALPHABET.charAt(b58[it2]);
        }
        return str;
      }
      function decodeUnsafe(source) {
        if (typeof source !== "string") {
          throw new TypeError("Expected String");
        }
        if (source.length === 0) {
          return _Buffer.alloc(0);
        }
        var psz = 0;
        var zeroes = 0;
        var length = 0;
        while (source[psz] === LEADER) {
          zeroes++;
          psz++;
        }
        var size = (source.length - psz) * FACTOR + 1 >>> 0;
        var b256 = new Uint8Array(size);
        while (psz < source.length) {
          var charCode = source.charCodeAt(psz);
          if (charCode > 255) {
            return;
          }
          var carry = BASE_MAP[charCode];
          if (carry === 255) {
            return;
          }
          var i2 = 0;
          for (var it3 = size - 1; (carry !== 0 || i2 < length) && it3 !== -1; it3--, i2++) {
            carry += BASE * b256[it3] >>> 0;
            b256[it3] = carry % 256 >>> 0;
            carry = carry / 256 >>> 0;
          }
          if (carry !== 0) {
            throw new Error("Non-zero carry");
          }
          length = i2;
          psz++;
        }
        var it4 = size - length;
        while (it4 !== size && b256[it4] === 0) {
          it4++;
        }
        var vch = _Buffer.allocUnsafe(zeroes + (size - it4));
        vch.fill(0, 0, zeroes);
        var j2 = zeroes;
        while (it4 !== size) {
          vch[j2++] = b256[it4++];
        }
        return vch;
      }
      function decode2(string2) {
        var buffer = decodeUnsafe(string2);
        if (buffer) {
          return buffer;
        }
        throw new Error("Non-base" + BASE + " character");
      }
      return {
        encode: encode2,
        decodeUnsafe,
        decode: decode2
      };
    }
    module2.exports = base;
  }
});

// node_modules/borsh/node_modules/bs58/index.js
var require_bs583 = __commonJS({
  "node_modules/borsh/node_modules/bs58/index.js"(exports2, module2) {
    var basex = require_src3();
    var ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
    module2.exports = basex(ALPHABET);
  }
});

// node_modules/text-encoding-utf-8/src/encoding.js
var encoding_exports = {};
__export(encoding_exports, {
  TextDecoder: () => TextDecoder2,
  TextEncoder: () => TextEncoder2
});
function inRange2(a, min, max) {
  return min <= a && a <= max;
}
function ToDictionary(o) {
  if (o === void 0) return {};
  if (o === Object(o)) return o;
  throw TypeError("Could not convert argument to dictionary");
}
function stringToCodePoints(string2) {
  var s = String(string2);
  var n = s.length;
  var i = 0;
  var u = [];
  while (i < n) {
    var c = s.charCodeAt(i);
    if (c < 55296 || c > 57343) {
      u.push(c);
    } else if (56320 <= c && c <= 57343) {
      u.push(65533);
    } else if (55296 <= c && c <= 56319) {
      if (i === n - 1) {
        u.push(65533);
      } else {
        var d = string2.charCodeAt(i + 1);
        if (56320 <= d && d <= 57343) {
          var a = c & 1023;
          var b = d & 1023;
          u.push(65536 + (a << 10) + b);
          i += 1;
        } else {
          u.push(65533);
        }
      }
    }
    i += 1;
  }
  return u;
}
function codePointsToString(code_points) {
  var s = "";
  for (var i = 0; i < code_points.length; ++i) {
    var cp = code_points[i];
    if (cp <= 65535) {
      s += String.fromCharCode(cp);
    } else {
      cp -= 65536;
      s += String.fromCharCode(
        (cp >> 10) + 55296,
        (cp & 1023) + 56320
      );
    }
  }
  return s;
}
function Stream(tokens) {
  this.tokens = [].slice.call(tokens);
}
function decoderError(fatal, opt_code_point) {
  if (fatal)
    throw TypeError("Decoder error");
  return opt_code_point || 65533;
}
function Decoder() {
}
function Encoder() {
}
function TextDecoder2(encoding, options) {
  if (!(this instanceof TextDecoder2)) {
    return new TextDecoder2(encoding, options);
  }
  encoding = encoding !== void 0 ? String(encoding).toLowerCase() : DEFAULT_ENCODING;
  if (encoding !== DEFAULT_ENCODING) {
    throw new Error("Encoding not supported. Only utf-8 is supported");
  }
  options = ToDictionary(options);
  this._streaming = false;
  this._BOMseen = false;
  this._decoder = null;
  this._fatal = Boolean(options["fatal"]);
  this._ignoreBOM = Boolean(options["ignoreBOM"]);
  Object.defineProperty(this, "encoding", { value: "utf-8" });
  Object.defineProperty(this, "fatal", { value: this._fatal });
  Object.defineProperty(this, "ignoreBOM", { value: this._ignoreBOM });
}
function TextEncoder2(encoding, options) {
  if (!(this instanceof TextEncoder2))
    return new TextEncoder2(encoding, options);
  encoding = encoding !== void 0 ? String(encoding).toLowerCase() : DEFAULT_ENCODING;
  if (encoding !== DEFAULT_ENCODING) {
    throw new Error("Encoding not supported. Only utf-8 is supported");
  }
  options = ToDictionary(options);
  this._streaming = false;
  this._encoder = null;
  this._options = { fatal: Boolean(options["fatal"]) };
  Object.defineProperty(this, "encoding", { value: "utf-8" });
}
function UTF8Decoder(options) {
  var fatal = options.fatal;
  var utf8_code_point = 0, utf8_bytes_seen = 0, utf8_bytes_needed = 0, utf8_lower_boundary = 128, utf8_upper_boundary = 191;
  this.handler = function(stream, bite) {
    if (bite === end_of_stream && utf8_bytes_needed !== 0) {
      utf8_bytes_needed = 0;
      return decoderError(fatal);
    }
    if (bite === end_of_stream)
      return finished;
    if (utf8_bytes_needed === 0) {
      if (inRange2(bite, 0, 127)) {
        return bite;
      }
      if (inRange2(bite, 194, 223)) {
        utf8_bytes_needed = 1;
        utf8_code_point = bite - 192;
      } else if (inRange2(bite, 224, 239)) {
        if (bite === 224)
          utf8_lower_boundary = 160;
        if (bite === 237)
          utf8_upper_boundary = 159;
        utf8_bytes_needed = 2;
        utf8_code_point = bite - 224;
      } else if (inRange2(bite, 240, 244)) {
        if (bite === 240)
          utf8_lower_boundary = 144;
        if (bite === 244)
          utf8_upper_boundary = 143;
        utf8_bytes_needed = 3;
        utf8_code_point = bite - 240;
      } else {
        return decoderError(fatal);
      }
      utf8_code_point = utf8_code_point << 6 * utf8_bytes_needed;
      return null;
    }
    if (!inRange2(bite, utf8_lower_boundary, utf8_upper_boundary)) {
      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;
      utf8_lower_boundary = 128;
      utf8_upper_boundary = 191;
      stream.prepend(bite);
      return decoderError(fatal);
    }
    utf8_lower_boundary = 128;
    utf8_upper_boundary = 191;
    utf8_bytes_seen += 1;
    utf8_code_point += bite - 128 << 6 * (utf8_bytes_needed - utf8_bytes_seen);
    if (utf8_bytes_seen !== utf8_bytes_needed)
      return null;
    var code_point = utf8_code_point;
    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;
    return code_point;
  };
}
function UTF8Encoder(options) {
  var fatal = options.fatal;
  this.handler = function(stream, code_point) {
    if (code_point === end_of_stream)
      return finished;
    if (inRange2(code_point, 0, 127))
      return code_point;
    var count, offset2;
    if (inRange2(code_point, 128, 2047)) {
      count = 1;
      offset2 = 192;
    } else if (inRange2(code_point, 2048, 65535)) {
      count = 2;
      offset2 = 224;
    } else if (inRange2(code_point, 65536, 1114111)) {
      count = 3;
      offset2 = 240;
    }
    var bytes = [(code_point >> 6 * count) + offset2];
    while (count > 0) {
      var temp = code_point >> 6 * (count - 1);
      bytes.push(128 | temp & 63);
      count -= 1;
    }
    return bytes;
  };
}
var end_of_stream, finished, DEFAULT_ENCODING;
var init_encoding = __esm({
  "node_modules/text-encoding-utf-8/src/encoding.js"() {
    "use strict";
    end_of_stream = -1;
    Stream.prototype = {
      /**
       * @return {boolean} True if end-of-stream has been hit.
       */
      endOfStream: function() {
        return !this.tokens.length;
      },
      /**
       * When a token is read from a stream, the first token in the
       * stream must be returned and subsequently removed, and
       * end-of-stream must be returned otherwise.
       *
       * @return {number} Get the next token from the stream, or
       * end_of_stream.
       */
      read: function() {
        if (!this.tokens.length)
          return end_of_stream;
        return this.tokens.shift();
      },
      /**
       * When one or more tokens are prepended to a stream, those tokens
       * must be inserted, in given order, before the first token in the
       * stream.
       *
       * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.
       */
      prepend: function(token) {
        if (Array.isArray(token)) {
          var tokens = (
            /**@type {!Array.<number>}*/
            token
          );
          while (tokens.length)
            this.tokens.unshift(tokens.pop());
        } else {
          this.tokens.unshift(token);
        }
      },
      /**
       * When one or more tokens are pushed to a stream, those tokens
       * must be inserted, in given order, after the last token in the
       * stream.
       *
       * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.
       */
      push: function(token) {
        if (Array.isArray(token)) {
          var tokens = (
            /**@type {!Array.<number>}*/
            token
          );
          while (tokens.length)
            this.tokens.push(tokens.shift());
        } else {
          this.tokens.push(token);
        }
      }
    };
    finished = -1;
    Decoder.prototype = {
      /**
       * @param {Stream} stream The stream of bytes being decoded.
       * @param {number} bite The next byte read from the stream.
       * @return {?(number|!Array.<number>)} The next code point(s)
       *     decoded, or null if not enough data exists in the input
       *     stream to decode a complete code point, or |finished|.
       */
      handler: function(stream, bite) {
      }
    };
    Encoder.prototype = {
      /**
       * @param {Stream} stream The stream of code points being encoded.
       * @param {number} code_point Next code point read from the stream.
       * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.
       */
      handler: function(stream, code_point) {
      }
    };
    DEFAULT_ENCODING = "utf-8";
    TextDecoder2.prototype = {
      /**
       * @param {ArrayBufferView=} input The buffer of bytes to decode.
       * @param {Object=} options
       * @return {string} The decoded string.
       */
      decode: function decode(input, options) {
        var bytes;
        if (typeof input === "object" && input instanceof ArrayBuffer) {
          bytes = new Uint8Array(input);
        } else if (typeof input === "object" && "buffer" in input && input.buffer instanceof ArrayBuffer) {
          bytes = new Uint8Array(
            input.buffer,
            input.byteOffset,
            input.byteLength
          );
        } else {
          bytes = new Uint8Array(0);
        }
        options = ToDictionary(options);
        if (!this._streaming) {
          this._decoder = new UTF8Decoder({ fatal: this._fatal });
          this._BOMseen = false;
        }
        this._streaming = Boolean(options["stream"]);
        var input_stream = new Stream(bytes);
        var code_points = [];
        var result;
        while (!input_stream.endOfStream()) {
          result = this._decoder.handler(input_stream, input_stream.read());
          if (result === finished)
            break;
          if (result === null)
            continue;
          if (Array.isArray(result))
            code_points.push.apply(
              code_points,
              /**@type {!Array.<number>}*/
              result
            );
          else
            code_points.push(result);
        }
        if (!this._streaming) {
          do {
            result = this._decoder.handler(input_stream, input_stream.read());
            if (result === finished)
              break;
            if (result === null)
              continue;
            if (Array.isArray(result))
              code_points.push.apply(
                code_points,
                /**@type {!Array.<number>}*/
                result
              );
            else
              code_points.push(result);
          } while (!input_stream.endOfStream());
          this._decoder = null;
        }
        if (code_points.length) {
          if (["utf-8"].indexOf(this.encoding) !== -1 && !this._ignoreBOM && !this._BOMseen) {
            if (code_points[0] === 65279) {
              this._BOMseen = true;
              code_points.shift();
            } else {
              this._BOMseen = true;
            }
          }
        }
        return codePointsToString(code_points);
      }
    };
    TextEncoder2.prototype = {
      /**
       * @param {string=} opt_string The string to encode.
       * @param {Object=} options
       * @return {Uint8Array} Encoded bytes, as a Uint8Array.
       */
      encode: function encode(opt_string, options) {
        opt_string = opt_string ? String(opt_string) : "";
        options = ToDictionary(options);
        if (!this._streaming)
          this._encoder = new UTF8Encoder(this._options);
        this._streaming = Boolean(options["stream"]);
        var bytes = [];
        var input_stream = new Stream(stringToCodePoints(opt_string));
        var result;
        while (!input_stream.endOfStream()) {
          result = this._encoder.handler(input_stream, input_stream.read());
          if (result === finished)
            break;
          if (Array.isArray(result))
            bytes.push.apply(
              bytes,
              /**@type {!Array.<number>}*/
              result
            );
          else
            bytes.push(result);
        }
        if (!this._streaming) {
          while (true) {
            result = this._encoder.handler(input_stream, input_stream.read());
            if (result === finished)
              break;
            if (Array.isArray(result))
              bytes.push.apply(
                bytes,
                /**@type {!Array.<number>}*/
                result
              );
            else
              bytes.push(result);
          }
          this._encoder = null;
        }
        return new Uint8Array(bytes);
      }
    };
  }
});

// node_modules/borsh/lib/index.js
var require_lib7 = __commonJS({
  "node_modules/borsh/lib/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __decorate2 = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
      else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __importStar2 = exports2 && exports2.__importStar || function(mod2) {
      if (mod2 && mod2.__esModule) return mod2;
      var result = {};
      if (mod2 != null) {
        for (var k in mod2) if (k !== "default" && Object.hasOwnProperty.call(mod2, k)) __createBinding2(result, mod2, k);
      }
      __setModuleDefault2(result, mod2);
      return result;
    };
    var __importDefault2 = exports2 && exports2.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.deserializeUnchecked = exports2.deserialize = exports2.serialize = exports2.BinaryReader = exports2.BinaryWriter = exports2.BorshError = exports2.baseDecode = exports2.baseEncode = void 0;
    var bn_js_1 = __importDefault2(require_bn());
    var bs58_1 = __importDefault2(require_bs583());
    var encoding = __importStar2((init_encoding(), __toCommonJS(encoding_exports)));
    var ResolvedTextDecoder = typeof TextDecoder !== "function" ? encoding.TextDecoder : TextDecoder;
    var textDecoder = new ResolvedTextDecoder("utf-8", { fatal: true });
    function baseEncode(value) {
      if (typeof value === "string") {
        value = Buffer.from(value, "utf8");
      }
      return bs58_1.default.encode(Buffer.from(value));
    }
    exports2.baseEncode = baseEncode;
    function baseDecode(value) {
      return Buffer.from(bs58_1.default.decode(value));
    }
    exports2.baseDecode = baseDecode;
    var INITIAL_LENGTH = 1024;
    var BorshError = class extends Error {
      constructor(message) {
        super(message);
        this.fieldPath = [];
        this.originalMessage = message;
      }
      addToFieldPath(fieldName) {
        this.fieldPath.splice(0, 0, fieldName);
        this.message = this.originalMessage + ": " + this.fieldPath.join(".");
      }
    };
    exports2.BorshError = BorshError;
    var BinaryWriter = class {
      constructor() {
        this.buf = Buffer.alloc(INITIAL_LENGTH);
        this.length = 0;
      }
      maybeResize() {
        if (this.buf.length < 16 + this.length) {
          this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);
        }
      }
      writeU8(value) {
        this.maybeResize();
        this.buf.writeUInt8(value, this.length);
        this.length += 1;
      }
      writeU16(value) {
        this.maybeResize();
        this.buf.writeUInt16LE(value, this.length);
        this.length += 2;
      }
      writeU32(value) {
        this.maybeResize();
        this.buf.writeUInt32LE(value, this.length);
        this.length += 4;
      }
      writeU64(value) {
        this.maybeResize();
        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray("le", 8)));
      }
      writeU128(value) {
        this.maybeResize();
        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray("le", 16)));
      }
      writeU256(value) {
        this.maybeResize();
        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray("le", 32)));
      }
      writeU512(value) {
        this.maybeResize();
        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray("le", 64)));
      }
      writeBuffer(buffer) {
        this.buf = Buffer.concat([
          Buffer.from(this.buf.subarray(0, this.length)),
          buffer,
          Buffer.alloc(INITIAL_LENGTH)
        ]);
        this.length += buffer.length;
      }
      writeString(str) {
        this.maybeResize();
        const b = Buffer.from(str, "utf8");
        this.writeU32(b.length);
        this.writeBuffer(b);
      }
      writeFixedArray(array2) {
        this.writeBuffer(Buffer.from(array2));
      }
      writeArray(array2, fn) {
        this.maybeResize();
        this.writeU32(array2.length);
        for (const elem of array2) {
          this.maybeResize();
          fn(elem);
        }
      }
      toArray() {
        return this.buf.subarray(0, this.length);
      }
    };
    exports2.BinaryWriter = BinaryWriter;
    function handlingRangeError(target, propertyKey, propertyDescriptor) {
      const originalMethod = propertyDescriptor.value;
      propertyDescriptor.value = function(...args) {
        try {
          return originalMethod.apply(this, args);
        } catch (e) {
          if (e instanceof RangeError) {
            const code = e.code;
            if (["ERR_BUFFER_OUT_OF_BOUNDS", "ERR_OUT_OF_RANGE"].indexOf(code) >= 0) {
              throw new BorshError("Reached the end of buffer when deserializing");
            }
          }
          throw e;
        }
      };
    }
    var BinaryReader = class {
      constructor(buf) {
        this.buf = buf;
        this.offset = 0;
      }
      readU8() {
        const value = this.buf.readUInt8(this.offset);
        this.offset += 1;
        return value;
      }
      readU16() {
        const value = this.buf.readUInt16LE(this.offset);
        this.offset += 2;
        return value;
      }
      readU32() {
        const value = this.buf.readUInt32LE(this.offset);
        this.offset += 4;
        return value;
      }
      readU64() {
        const buf = this.readBuffer(8);
        return new bn_js_1.default(buf, "le");
      }
      readU128() {
        const buf = this.readBuffer(16);
        return new bn_js_1.default(buf, "le");
      }
      readU256() {
        const buf = this.readBuffer(32);
        return new bn_js_1.default(buf, "le");
      }
      readU512() {
        const buf = this.readBuffer(64);
        return new bn_js_1.default(buf, "le");
      }
      readBuffer(len) {
        if (this.offset + len > this.buf.length) {
          throw new BorshError(`Expected buffer length ${len} isn't within bounds`);
        }
        const result = this.buf.slice(this.offset, this.offset + len);
        this.offset += len;
        return result;
      }
      readString() {
        const len = this.readU32();
        const buf = this.readBuffer(len);
        try {
          return textDecoder.decode(buf);
        } catch (e) {
          throw new BorshError(`Error decoding UTF-8 string: ${e}`);
        }
      }
      readFixedArray(len) {
        return new Uint8Array(this.readBuffer(len));
      }
      readArray(fn) {
        const len = this.readU32();
        const result = Array();
        for (let i = 0; i < len; ++i) {
          result.push(fn());
        }
        return result;
      }
    };
    __decorate2([
      handlingRangeError
    ], BinaryReader.prototype, "readU8", null);
    __decorate2([
      handlingRangeError
    ], BinaryReader.prototype, "readU16", null);
    __decorate2([
      handlingRangeError
    ], BinaryReader.prototype, "readU32", null);
    __decorate2([
      handlingRangeError
    ], BinaryReader.prototype, "readU64", null);
    __decorate2([
      handlingRangeError
    ], BinaryReader.prototype, "readU128", null);
    __decorate2([
      handlingRangeError
    ], BinaryReader.prototype, "readU256", null);
    __decorate2([
      handlingRangeError
    ], BinaryReader.prototype, "readU512", null);
    __decorate2([
      handlingRangeError
    ], BinaryReader.prototype, "readString", null);
    __decorate2([
      handlingRangeError
    ], BinaryReader.prototype, "readFixedArray", null);
    __decorate2([
      handlingRangeError
    ], BinaryReader.prototype, "readArray", null);
    exports2.BinaryReader = BinaryReader;
    function capitalizeFirstLetter(string2) {
      return string2.charAt(0).toUpperCase() + string2.slice(1);
    }
    function serializeField(schema, fieldName, value, fieldType, writer) {
      try {
        if (typeof fieldType === "string") {
          writer[`write${capitalizeFirstLetter(fieldType)}`](value);
        } else if (fieldType instanceof Array) {
          if (typeof fieldType[0] === "number") {
            if (value.length !== fieldType[0]) {
              throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);
            }
            writer.writeFixedArray(value);
          } else if (fieldType.length === 2 && typeof fieldType[1] === "number") {
            if (value.length !== fieldType[1]) {
              throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);
            }
            for (let i = 0; i < fieldType[1]; i++) {
              serializeField(schema, null, value[i], fieldType[0], writer);
            }
          } else {
            writer.writeArray(value, (item) => {
              serializeField(schema, fieldName, item, fieldType[0], writer);
            });
          }
        } else if (fieldType.kind !== void 0) {
          switch (fieldType.kind) {
            case "option": {
              if (value === null || value === void 0) {
                writer.writeU8(0);
              } else {
                writer.writeU8(1);
                serializeField(schema, fieldName, value, fieldType.type, writer);
              }
              break;
            }
            case "map": {
              writer.writeU32(value.size);
              value.forEach((val, key) => {
                serializeField(schema, fieldName, key, fieldType.key, writer);
                serializeField(schema, fieldName, val, fieldType.value, writer);
              });
              break;
            }
            default:
              throw new BorshError(`FieldType ${fieldType} unrecognized`);
          }
        } else {
          serializeStruct(schema, value, writer);
        }
      } catch (error) {
        if (error instanceof BorshError) {
          error.addToFieldPath(fieldName);
        }
        throw error;
      }
    }
    function serializeStruct(schema, obj, writer) {
      if (typeof obj.borshSerialize === "function") {
        obj.borshSerialize(writer);
        return;
      }
      const structSchema = schema.get(obj.constructor);
      if (!structSchema) {
        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);
      }
      if (structSchema.kind === "struct") {
        structSchema.fields.map(([fieldName, fieldType]) => {
          serializeField(schema, fieldName, obj[fieldName], fieldType, writer);
        });
      } else if (structSchema.kind === "enum") {
        const name = obj[structSchema.field];
        for (let idx = 0; idx < structSchema.values.length; ++idx) {
          const [fieldName, fieldType] = structSchema.values[idx];
          if (fieldName === name) {
            writer.writeU8(idx);
            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);
            break;
          }
        }
      } else {
        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);
      }
    }
    function serialize2(schema, obj, Writer = BinaryWriter) {
      const writer = new Writer();
      serializeStruct(schema, obj, writer);
      return writer.toArray();
    }
    exports2.serialize = serialize2;
    function deserializeField(schema, fieldName, fieldType, reader) {
      try {
        if (typeof fieldType === "string") {
          return reader[`read${capitalizeFirstLetter(fieldType)}`]();
        }
        if (fieldType instanceof Array) {
          if (typeof fieldType[0] === "number") {
            return reader.readFixedArray(fieldType[0]);
          } else if (typeof fieldType[1] === "number") {
            const arr = [];
            for (let i = 0; i < fieldType[1]; i++) {
              arr.push(deserializeField(schema, null, fieldType[0], reader));
            }
            return arr;
          } else {
            return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));
          }
        }
        if (fieldType.kind === "option") {
          const option = reader.readU8();
          if (option) {
            return deserializeField(schema, fieldName, fieldType.type, reader);
          }
          return void 0;
        }
        if (fieldType.kind === "map") {
          let map = /* @__PURE__ */ new Map();
          const length = reader.readU32();
          for (let i = 0; i < length; i++) {
            const key = deserializeField(schema, fieldName, fieldType.key, reader);
            const val = deserializeField(schema, fieldName, fieldType.value, reader);
            map.set(key, val);
          }
          return map;
        }
        return deserializeStruct(schema, fieldType, reader);
      } catch (error) {
        if (error instanceof BorshError) {
          error.addToFieldPath(fieldName);
        }
        throw error;
      }
    }
    function deserializeStruct(schema, classType, reader) {
      if (typeof classType.borshDeserialize === "function") {
        return classType.borshDeserialize(reader);
      }
      const structSchema = schema.get(classType);
      if (!structSchema) {
        throw new BorshError(`Class ${classType.name} is missing in schema`);
      }
      if (structSchema.kind === "struct") {
        const result = {};
        for (const [fieldName, fieldType] of schema.get(classType).fields) {
          result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);
        }
        return new classType(result);
      }
      if (structSchema.kind === "enum") {
        const idx = reader.readU8();
        if (idx >= structSchema.values.length) {
          throw new BorshError(`Enum index: ${idx} is out of range`);
        }
        const [fieldName, fieldType] = structSchema.values[idx];
        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);
        return new classType({ [fieldName]: fieldValue });
      }
      throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);
    }
    function deserialize2(schema, classType, buffer, Reader = BinaryReader) {
      const reader = new Reader(buffer);
      const result = deserializeStruct(schema, classType, reader);
      if (reader.offset < buffer.length) {
        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);
      }
      return result;
    }
    exports2.deserialize = deserialize2;
    function deserializeUnchecked2(schema, classType, buffer, Reader = BinaryReader) {
      const reader = new Reader(buffer);
      return deserializeStruct(schema, classType, reader);
    }
    exports2.deserializeUnchecked = deserializeUnchecked2;
  }
});

// node_modules/@solana/buffer-layout/lib/Layout.js
var require_Layout = __commonJS({
  "node_modules/@solana/buffer-layout/lib/Layout.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.s16 = exports2.s8 = exports2.nu64be = exports2.u48be = exports2.u40be = exports2.u32be = exports2.u24be = exports2.u16be = exports2.nu64 = exports2.u48 = exports2.u40 = exports2.u32 = exports2.u24 = exports2.u16 = exports2.u8 = exports2.offset = exports2.greedy = exports2.Constant = exports2.UTF8 = exports2.CString = exports2.Blob = exports2.Boolean = exports2.BitField = exports2.BitStructure = exports2.VariantLayout = exports2.Union = exports2.UnionLayoutDiscriminator = exports2.UnionDiscriminator = exports2.Structure = exports2.Sequence = exports2.DoubleBE = exports2.Double = exports2.FloatBE = exports2.Float = exports2.NearInt64BE = exports2.NearInt64 = exports2.NearUInt64BE = exports2.NearUInt64 = exports2.IntBE = exports2.Int = exports2.UIntBE = exports2.UInt = exports2.OffsetLayout = exports2.GreedyCount = exports2.ExternalLayout = exports2.bindConstructorLayout = exports2.nameWithProperty = exports2.Layout = exports2.uint8ArrayToBuffer = exports2.checkUint8Array = void 0;
    exports2.constant = exports2.utf8 = exports2.cstr = exports2.blob = exports2.unionLayoutDiscriminator = exports2.union = exports2.seq = exports2.bits = exports2.struct = exports2.f64be = exports2.f64 = exports2.f32be = exports2.f32 = exports2.ns64be = exports2.s48be = exports2.s40be = exports2.s32be = exports2.s24be = exports2.s16be = exports2.ns64 = exports2.s48 = exports2.s40 = exports2.s32 = exports2.s24 = void 0;
    var buffer_1 = require_buffer2();
    function checkUint8Array(b) {
      if (!(b instanceof Uint8Array)) {
        throw new TypeError("b must be a Uint8Array");
      }
    }
    exports2.checkUint8Array = checkUint8Array;
    function uint8ArrayToBuffer(b) {
      checkUint8Array(b);
      return buffer_1.Buffer.from(b.buffer, b.byteOffset, b.length);
    }
    exports2.uint8ArrayToBuffer = uint8ArrayToBuffer;
    var Layout = class {
      constructor(span, property) {
        if (!Number.isInteger(span)) {
          throw new TypeError("span must be an integer");
        }
        this.span = span;
        this.property = property;
      }
      /** Function to create an Object into which decoded properties will
       * be written.
       *
       * Used only for layouts that {@link Layout#decode|decode} to Object
       * instances, which means:
       * * {@link Structure}
       * * {@link Union}
       * * {@link VariantLayout}
       * * {@link BitStructure}
       *
       * If left undefined the JavaScript representation of these layouts
       * will be Object instances.
       *
       * See {@link bindConstructorLayout}.
       */
      makeDestinationObject() {
        return {};
      }
      /**
       * Calculate the span of a specific instance of a layout.
       *
       * @param {Uint8Array} b - the buffer that contains an encoded instance.
       *
       * @param {Number} [offset] - the offset at which the encoded instance
       * starts.  If absent a zero offset is inferred.
       *
       * @return {Number} - the number of bytes covered by the layout
       * instance.  If this method is not overridden in a subclass the
       * definition-time constant {@link Layout#span|span} will be
       * returned.
       *
       * @throws {RangeError} - if the length of the value cannot be
       * determined.
       */
      getSpan(b, offset2) {
        if (0 > this.span) {
          throw new RangeError("indeterminate span");
        }
        return this.span;
      }
      /**
       * Replicate the layout using a new property.
       *
       * This function must be used to get a structurally-equivalent layout
       * with a different name since all {@link Layout} instances are
       * immutable.
       *
       * **NOTE** This is a shallow copy.  All fields except {@link
       * Layout#property|property} are strictly equal to the origin layout.
       *
       * @param {String} property - the value for {@link
       * Layout#property|property} in the replica.
       *
       * @returns {Layout} - the copy with {@link Layout#property|property}
       * set to `property`.
       */
      replicate(property) {
        const rv = Object.create(this.constructor.prototype);
        Object.assign(rv, this);
        rv.property = property;
        return rv;
      }
      /**
       * Create an object from layout properties and an array of values.
       *
       * **NOTE** This function returns `undefined` if invoked on a layout
       * that does not return its value as an Object.  Objects are
       * returned for things that are a {@link Structure}, which includes
       * {@link VariantLayout|variant layouts} if they are structures, and
       * excludes {@link Union}s.  If you want this feature for a union
       * you must use {@link Union.getVariant|getVariant} to select the
       * desired layout.
       *
       * @param {Array} values - an array of values that correspond to the
       * default order for properties.  As with {@link Layout#decode|decode}
       * layout elements that have no property name are skipped when
       * iterating over the array values.  Only the top-level properties are
       * assigned; arguments are not assigned to properties of contained
       * layouts.  Any unused values are ignored.
       *
       * @return {(Object|undefined)}
       */
      fromArray(values) {
        return void 0;
      }
    };
    exports2.Layout = Layout;
    function nameWithProperty(name, lo) {
      if (lo.property) {
        return name + "[" + lo.property + "]";
      }
      return name;
    }
    exports2.nameWithProperty = nameWithProperty;
    function bindConstructorLayout(Class, layout) {
      if ("function" !== typeof Class) {
        throw new TypeError("Class must be constructor");
      }
      if (Object.prototype.hasOwnProperty.call(Class, "layout_")) {
        throw new Error("Class is already bound to a layout");
      }
      if (!(layout && layout instanceof Layout)) {
        throw new TypeError("layout must be a Layout");
      }
      if (Object.prototype.hasOwnProperty.call(layout, "boundConstructor_")) {
        throw new Error("layout is already bound to a constructor");
      }
      Class.layout_ = layout;
      layout.boundConstructor_ = Class;
      layout.makeDestinationObject = () => new Class();
      Object.defineProperty(Class.prototype, "encode", {
        value(b, offset2) {
          return layout.encode(this, b, offset2);
        },
        writable: true
      });
      Object.defineProperty(Class, "decode", {
        value(b, offset2) {
          return layout.decode(b, offset2);
        },
        writable: true
      });
    }
    exports2.bindConstructorLayout = bindConstructorLayout;
    var ExternalLayout = class extends Layout {
      /**
       * Return `true` iff the external layout decodes to an unsigned
       * integer layout.
       *
       * In that case it can be used as the source of {@link
       * Sequence#count|Sequence counts}, {@link Blob#length|Blob lengths},
       * or as {@link UnionLayoutDiscriminator#layout|external union
       * discriminators}.
       *
       * @abstract
       */
      isCount() {
        throw new Error("ExternalLayout is abstract");
      }
    };
    exports2.ExternalLayout = ExternalLayout;
    var GreedyCount = class extends ExternalLayout {
      constructor(elementSpan = 1, property) {
        if (!Number.isInteger(elementSpan) || 0 >= elementSpan) {
          throw new TypeError("elementSpan must be a (positive) integer");
        }
        super(-1, property);
        this.elementSpan = elementSpan;
      }
      /** @override */
      isCount() {
        return true;
      }
      /** @override */
      decode(b, offset2 = 0) {
        checkUint8Array(b);
        const rem = b.length - offset2;
        return Math.floor(rem / this.elementSpan);
      }
      /** @override */
      encode(src, b, offset2) {
        return 0;
      }
    };
    exports2.GreedyCount = GreedyCount;
    var OffsetLayout = class extends ExternalLayout {
      constructor(layout, offset2 = 0, property) {
        if (!(layout instanceof Layout)) {
          throw new TypeError("layout must be a Layout");
        }
        if (!Number.isInteger(offset2)) {
          throw new TypeError("offset must be integer or undefined");
        }
        super(layout.span, property || layout.property);
        this.layout = layout;
        this.offset = offset2;
      }
      /** @override */
      isCount() {
        return this.layout instanceof UInt || this.layout instanceof UIntBE;
      }
      /** @override */
      decode(b, offset2 = 0) {
        return this.layout.decode(b, offset2 + this.offset);
      }
      /** @override */
      encode(src, b, offset2 = 0) {
        return this.layout.encode(src, b, offset2 + this.offset);
      }
    };
    exports2.OffsetLayout = OffsetLayout;
    var UInt = class extends Layout {
      constructor(span, property) {
        super(span, property);
        if (6 < this.span) {
          throw new RangeError("span must not exceed 6 bytes");
        }
      }
      /** @override */
      decode(b, offset2 = 0) {
        return uint8ArrayToBuffer(b).readUIntLE(offset2, this.span);
      }
      /** @override */
      encode(src, b, offset2 = 0) {
        uint8ArrayToBuffer(b).writeUIntLE(src, offset2, this.span);
        return this.span;
      }
    };
    exports2.UInt = UInt;
    var UIntBE = class extends Layout {
      constructor(span, property) {
        super(span, property);
        if (6 < this.span) {
          throw new RangeError("span must not exceed 6 bytes");
        }
      }
      /** @override */
      decode(b, offset2 = 0) {
        return uint8ArrayToBuffer(b).readUIntBE(offset2, this.span);
      }
      /** @override */
      encode(src, b, offset2 = 0) {
        uint8ArrayToBuffer(b).writeUIntBE(src, offset2, this.span);
        return this.span;
      }
    };
    exports2.UIntBE = UIntBE;
    var Int = class extends Layout {
      constructor(span, property) {
        super(span, property);
        if (6 < this.span) {
          throw new RangeError("span must not exceed 6 bytes");
        }
      }
      /** @override */
      decode(b, offset2 = 0) {
        return uint8ArrayToBuffer(b).readIntLE(offset2, this.span);
      }
      /** @override */
      encode(src, b, offset2 = 0) {
        uint8ArrayToBuffer(b).writeIntLE(src, offset2, this.span);
        return this.span;
      }
    };
    exports2.Int = Int;
    var IntBE = class extends Layout {
      constructor(span, property) {
        super(span, property);
        if (6 < this.span) {
          throw new RangeError("span must not exceed 6 bytes");
        }
      }
      /** @override */
      decode(b, offset2 = 0) {
        return uint8ArrayToBuffer(b).readIntBE(offset2, this.span);
      }
      /** @override */
      encode(src, b, offset2 = 0) {
        uint8ArrayToBuffer(b).writeIntBE(src, offset2, this.span);
        return this.span;
      }
    };
    exports2.IntBE = IntBE;
    var V2E32 = Math.pow(2, 32);
    function divmodInt64(src) {
      const hi32 = Math.floor(src / V2E32);
      const lo32 = src - hi32 * V2E32;
      return { hi32, lo32 };
    }
    function roundedInt64(hi32, lo32) {
      return hi32 * V2E32 + lo32;
    }
    var NearUInt64 = class extends Layout {
      constructor(property) {
        super(8, property);
      }
      /** @override */
      decode(b, offset2 = 0) {
        const buffer = uint8ArrayToBuffer(b);
        const lo32 = buffer.readUInt32LE(offset2);
        const hi32 = buffer.readUInt32LE(offset2 + 4);
        return roundedInt64(hi32, lo32);
      }
      /** @override */
      encode(src, b, offset2 = 0) {
        const split2 = divmodInt64(src);
        const buffer = uint8ArrayToBuffer(b);
        buffer.writeUInt32LE(split2.lo32, offset2);
        buffer.writeUInt32LE(split2.hi32, offset2 + 4);
        return 8;
      }
    };
    exports2.NearUInt64 = NearUInt64;
    var NearUInt64BE = class extends Layout {
      constructor(property) {
        super(8, property);
      }
      /** @override */
      decode(b, offset2 = 0) {
        const buffer = uint8ArrayToBuffer(b);
        const hi32 = buffer.readUInt32BE(offset2);
        const lo32 = buffer.readUInt32BE(offset2 + 4);
        return roundedInt64(hi32, lo32);
      }
      /** @override */
      encode(src, b, offset2 = 0) {
        const split2 = divmodInt64(src);
        const buffer = uint8ArrayToBuffer(b);
        buffer.writeUInt32BE(split2.hi32, offset2);
        buffer.writeUInt32BE(split2.lo32, offset2 + 4);
        return 8;
      }
    };
    exports2.NearUInt64BE = NearUInt64BE;
    var NearInt64 = class extends Layout {
      constructor(property) {
        super(8, property);
      }
      /** @override */
      decode(b, offset2 = 0) {
        const buffer = uint8ArrayToBuffer(b);
        const lo32 = buffer.readUInt32LE(offset2);
        const hi32 = buffer.readInt32LE(offset2 + 4);
        return roundedInt64(hi32, lo32);
      }
      /** @override */
      encode(src, b, offset2 = 0) {
        const split2 = divmodInt64(src);
        const buffer = uint8ArrayToBuffer(b);
        buffer.writeUInt32LE(split2.lo32, offset2);
        buffer.writeInt32LE(split2.hi32, offset2 + 4);
        return 8;
      }
    };
    exports2.NearInt64 = NearInt64;
    var NearInt64BE = class extends Layout {
      constructor(property) {
        super(8, property);
      }
      /** @override */
      decode(b, offset2 = 0) {
        const buffer = uint8ArrayToBuffer(b);
        const hi32 = buffer.readInt32BE(offset2);
        const lo32 = buffer.readUInt32BE(offset2 + 4);
        return roundedInt64(hi32, lo32);
      }
      /** @override */
      encode(src, b, offset2 = 0) {
        const split2 = divmodInt64(src);
        const buffer = uint8ArrayToBuffer(b);
        buffer.writeInt32BE(split2.hi32, offset2);
        buffer.writeUInt32BE(split2.lo32, offset2 + 4);
        return 8;
      }
    };
    exports2.NearInt64BE = NearInt64BE;
    var Float = class extends Layout {
      constructor(property) {
        super(4, property);
      }
      /** @override */
      decode(b, offset2 = 0) {
        return uint8ArrayToBuffer(b).readFloatLE(offset2);
      }
      /** @override */
      encode(src, b, offset2 = 0) {
        uint8ArrayToBuffer(b).writeFloatLE(src, offset2);
        return 4;
      }
    };
    exports2.Float = Float;
    var FloatBE = class extends Layout {
      constructor(property) {
        super(4, property);
      }
      /** @override */
      decode(b, offset2 = 0) {
        return uint8ArrayToBuffer(b).readFloatBE(offset2);
      }
      /** @override */
      encode(src, b, offset2 = 0) {
        uint8ArrayToBuffer(b).writeFloatBE(src, offset2);
        return 4;
      }
    };
    exports2.FloatBE = FloatBE;
    var Double = class extends Layout {
      constructor(property) {
        super(8, property);
      }
      /** @override */
      decode(b, offset2 = 0) {
        return uint8ArrayToBuffer(b).readDoubleLE(offset2);
      }
      /** @override */
      encode(src, b, offset2 = 0) {
        uint8ArrayToBuffer(b).writeDoubleLE(src, offset2);
        return 8;
      }
    };
    exports2.Double = Double;
    var DoubleBE = class extends Layout {
      constructor(property) {
        super(8, property);
      }
      /** @override */
      decode(b, offset2 = 0) {
        return uint8ArrayToBuffer(b).readDoubleBE(offset2);
      }
      /** @override */
      encode(src, b, offset2 = 0) {
        uint8ArrayToBuffer(b).writeDoubleBE(src, offset2);
        return 8;
      }
    };
    exports2.DoubleBE = DoubleBE;
    var Sequence = class extends Layout {
      constructor(elementLayout, count, property) {
        if (!(elementLayout instanceof Layout)) {
          throw new TypeError("elementLayout must be a Layout");
        }
        if (!(count instanceof ExternalLayout && count.isCount() || Number.isInteger(count) && 0 <= count)) {
          throw new TypeError("count must be non-negative integer or an unsigned integer ExternalLayout");
        }
        let span = -1;
        if (!(count instanceof ExternalLayout) && 0 < elementLayout.span) {
          span = count * elementLayout.span;
        }
        super(span, property);
        this.elementLayout = elementLayout;
        this.count = count;
      }
      /** @override */
      getSpan(b, offset2 = 0) {
        if (0 <= this.span) {
          return this.span;
        }
        let span = 0;
        let count = this.count;
        if (count instanceof ExternalLayout) {
          count = count.decode(b, offset2);
        }
        if (0 < this.elementLayout.span) {
          span = count * this.elementLayout.span;
        } else {
          let idx = 0;
          while (idx < count) {
            span += this.elementLayout.getSpan(b, offset2 + span);
            ++idx;
          }
        }
        return span;
      }
      /** @override */
      decode(b, offset2 = 0) {
        const rv = [];
        let i = 0;
        let count = this.count;
        if (count instanceof ExternalLayout) {
          count = count.decode(b, offset2);
        }
        while (i < count) {
          rv.push(this.elementLayout.decode(b, offset2));
          offset2 += this.elementLayout.getSpan(b, offset2);
          i += 1;
        }
        return rv;
      }
      /** Implement {@link Layout#encode|encode} for {@link Sequence}.
       *
       * **NOTE** If `src` is shorter than {@link Sequence#count|count} then
       * the unused space in the buffer is left unchanged.  If `src` is
       * longer than {@link Sequence#count|count} the unneeded elements are
       * ignored.
       *
       * **NOTE** If {@link Layout#count|count} is an instance of {@link
       * ExternalLayout} then the length of `src` will be encoded as the
       * count after `src` is encoded. */
      encode(src, b, offset2 = 0) {
        const elo = this.elementLayout;
        const span = src.reduce((span2, v) => {
          return span2 + elo.encode(v, b, offset2 + span2);
        }, 0);
        if (this.count instanceof ExternalLayout) {
          this.count.encode(src.length, b, offset2);
        }
        return span;
      }
    };
    exports2.Sequence = Sequence;
    var Structure = class extends Layout {
      constructor(fields, property, decodePrefixes) {
        if (!(Array.isArray(fields) && fields.reduce((acc, v) => acc && v instanceof Layout, true))) {
          throw new TypeError("fields must be array of Layout instances");
        }
        if ("boolean" === typeof property && void 0 === decodePrefixes) {
          decodePrefixes = property;
          property = void 0;
        }
        for (const fd of fields) {
          if (0 > fd.span && void 0 === fd.property) {
            throw new Error("fields cannot contain unnamed variable-length layout");
          }
        }
        let span = -1;
        try {
          span = fields.reduce((span2, fd) => span2 + fd.getSpan(), 0);
        } catch (e) {
        }
        super(span, property);
        this.fields = fields;
        this.decodePrefixes = !!decodePrefixes;
      }
      /** @override */
      getSpan(b, offset2 = 0) {
        if (0 <= this.span) {
          return this.span;
        }
        let span = 0;
        try {
          span = this.fields.reduce((span2, fd) => {
            const fsp = fd.getSpan(b, offset2);
            offset2 += fsp;
            return span2 + fsp;
          }, 0);
        } catch (e) {
          throw new RangeError("indeterminate span");
        }
        return span;
      }
      /** @override */
      decode(b, offset2 = 0) {
        checkUint8Array(b);
        const dest = this.makeDestinationObject();
        for (const fd of this.fields) {
          if (void 0 !== fd.property) {
            dest[fd.property] = fd.decode(b, offset2);
          }
          offset2 += fd.getSpan(b, offset2);
          if (this.decodePrefixes && b.length === offset2) {
            break;
          }
        }
        return dest;
      }
      /** Implement {@link Layout#encode|encode} for {@link Structure}.
       *
       * If `src` is missing a property for a member with a defined {@link
       * Layout#property|property} the corresponding region of the buffer is
       * left unmodified. */
      encode(src, b, offset2 = 0) {
        const firstOffset = offset2;
        let lastOffset = 0;
        let lastWrote = 0;
        for (const fd of this.fields) {
          let span = fd.span;
          lastWrote = 0 < span ? span : 0;
          if (void 0 !== fd.property) {
            const fv = src[fd.property];
            if (void 0 !== fv) {
              lastWrote = fd.encode(fv, b, offset2);
              if (0 > span) {
                span = fd.getSpan(b, offset2);
              }
            }
          }
          lastOffset = offset2;
          offset2 += span;
        }
        return lastOffset + lastWrote - firstOffset;
      }
      /** @override */
      fromArray(values) {
        const dest = this.makeDestinationObject();
        for (const fd of this.fields) {
          if (void 0 !== fd.property && 0 < values.length) {
            dest[fd.property] = values.shift();
          }
        }
        return dest;
      }
      /**
       * Get access to the layout of a given property.
       *
       * @param {String} property - the structure member of interest.
       *
       * @return {Layout} - the layout associated with `property`, or
       * undefined if there is no such property.
       */
      layoutFor(property) {
        if ("string" !== typeof property) {
          throw new TypeError("property must be string");
        }
        for (const fd of this.fields) {
          if (fd.property === property) {
            return fd;
          }
        }
        return void 0;
      }
      /**
       * Get the offset of a structure member.
       *
       * @param {String} property - the structure member of interest.
       *
       * @return {Number} - the offset in bytes to the start of `property`
       * within the structure, or undefined if `property` is not a field
       * within the structure.  If the property is a member but follows a
       * variable-length structure member a negative number will be
       * returned.
       */
      offsetOf(property) {
        if ("string" !== typeof property) {
          throw new TypeError("property must be string");
        }
        let offset2 = 0;
        for (const fd of this.fields) {
          if (fd.property === property) {
            return offset2;
          }
          if (0 > fd.span) {
            offset2 = -1;
          } else if (0 <= offset2) {
            offset2 += fd.span;
          }
        }
        return void 0;
      }
    };
    exports2.Structure = Structure;
    var UnionDiscriminator = class {
      constructor(property) {
        this.property = property;
      }
      /** Analog to {@link Layout#decode|Layout decode} for union discriminators.
       *
       * The implementation of this method need not reference the buffer if
       * variant information is available through other means. */
      decode(b, offset2) {
        throw new Error("UnionDiscriminator is abstract");
      }
      /** Analog to {@link Layout#decode|Layout encode} for union discriminators.
       *
       * The implementation of this method need not store the value if
       * variant information is maintained through other means. */
      encode(src, b, offset2) {
        throw new Error("UnionDiscriminator is abstract");
      }
    };
    exports2.UnionDiscriminator = UnionDiscriminator;
    var UnionLayoutDiscriminator = class extends UnionDiscriminator {
      constructor(layout, property) {
        if (!(layout instanceof ExternalLayout && layout.isCount())) {
          throw new TypeError("layout must be an unsigned integer ExternalLayout");
        }
        super(property || layout.property || "variant");
        this.layout = layout;
      }
      /** Delegate decoding to {@link UnionLayoutDiscriminator#layout|layout}. */
      decode(b, offset2) {
        return this.layout.decode(b, offset2);
      }
      /** Delegate encoding to {@link UnionLayoutDiscriminator#layout|layout}. */
      encode(src, b, offset2) {
        return this.layout.encode(src, b, offset2);
      }
    };
    exports2.UnionLayoutDiscriminator = UnionLayoutDiscriminator;
    var Union = class extends Layout {
      constructor(discr, defaultLayout, property) {
        let discriminator;
        if (discr instanceof UInt || discr instanceof UIntBE) {
          discriminator = new UnionLayoutDiscriminator(new OffsetLayout(discr));
        } else if (discr instanceof ExternalLayout && discr.isCount()) {
          discriminator = new UnionLayoutDiscriminator(discr);
        } else if (!(discr instanceof UnionDiscriminator)) {
          throw new TypeError("discr must be a UnionDiscriminator or an unsigned integer layout");
        } else {
          discriminator = discr;
        }
        if (void 0 === defaultLayout) {
          defaultLayout = null;
        }
        if (!(null === defaultLayout || defaultLayout instanceof Layout)) {
          throw new TypeError("defaultLayout must be null or a Layout");
        }
        if (null !== defaultLayout) {
          if (0 > defaultLayout.span) {
            throw new Error("defaultLayout must have constant span");
          }
          if (void 0 === defaultLayout.property) {
            defaultLayout = defaultLayout.replicate("content");
          }
        }
        let span = -1;
        if (defaultLayout) {
          span = defaultLayout.span;
          if (0 <= span && (discr instanceof UInt || discr instanceof UIntBE)) {
            span += discriminator.layout.span;
          }
        }
        super(span, property);
        this.discriminator = discriminator;
        this.usesPrefixDiscriminator = discr instanceof UInt || discr instanceof UIntBE;
        this.defaultLayout = defaultLayout;
        this.registry = {};
        let boundGetSourceVariant = this.defaultGetSourceVariant.bind(this);
        this.getSourceVariant = function(src) {
          return boundGetSourceVariant(src);
        };
        this.configGetSourceVariant = function(gsv) {
          boundGetSourceVariant = gsv.bind(this);
        };
      }
      /** @override */
      getSpan(b, offset2 = 0) {
        if (0 <= this.span) {
          return this.span;
        }
        const vlo = this.getVariant(b, offset2);
        if (!vlo) {
          throw new Error("unable to determine span for unrecognized variant");
        }
        return vlo.getSpan(b, offset2);
      }
      /**
       * Method to infer a registered Union variant compatible with `src`.
       *
       * The first satisfied rule in the following sequence defines the
       * return value:
       * * If `src` has properties matching the Union discriminator and
       *   the default layout, `undefined` is returned regardless of the
       *   value of the discriminator property (this ensures the default
       *   layout will be used);
       * * If `src` has a property matching the Union discriminator, the
       *   value of the discriminator identifies a registered variant, and
       *   either (a) the variant has no layout, or (b) `src` has the
       *   variant's property, then the variant is returned (because the
       *   source satisfies the constraints of the variant it identifies);
       * * If `src` does not have a property matching the Union
       *   discriminator, but does have a property matching a registered
       *   variant, then the variant is returned (because the source
       *   matches a variant without an explicit conflict);
       * * An error is thrown (because we either can't identify a variant,
       *   or we were explicitly told the variant but can't satisfy it).
       *
       * @param {Object} src - an object presumed to be compatible with
       * the content of the Union.
       *
       * @return {(undefined|VariantLayout)} - as described above.
       *
       * @throws {Error} - if `src` cannot be associated with a default or
       * registered variant.
       */
      defaultGetSourceVariant(src) {
        if (Object.prototype.hasOwnProperty.call(src, this.discriminator.property)) {
          if (this.defaultLayout && this.defaultLayout.property && Object.prototype.hasOwnProperty.call(src, this.defaultLayout.property)) {
            return void 0;
          }
          const vlo = this.registry[src[this.discriminator.property]];
          if (vlo && (!vlo.layout || vlo.property && Object.prototype.hasOwnProperty.call(src, vlo.property))) {
            return vlo;
          }
        } else {
          for (const tag in this.registry) {
            const vlo = this.registry[tag];
            if (vlo.property && Object.prototype.hasOwnProperty.call(src, vlo.property)) {
              return vlo;
            }
          }
        }
        throw new Error("unable to infer src variant");
      }
      /** Implement {@link Layout#decode|decode} for {@link Union}.
       *
       * If the variant is {@link Union#addVariant|registered} the return
       * value is an instance of that variant, with no explicit
       * discriminator.  Otherwise the {@link Union#defaultLayout|default
       * layout} is used to decode the content. */
      decode(b, offset2 = 0) {
        let dest;
        const dlo = this.discriminator;
        const discr = dlo.decode(b, offset2);
        const clo = this.registry[discr];
        if (void 0 === clo) {
          const defaultLayout = this.defaultLayout;
          let contentOffset = 0;
          if (this.usesPrefixDiscriminator) {
            contentOffset = dlo.layout.span;
          }
          dest = this.makeDestinationObject();
          dest[dlo.property] = discr;
          dest[defaultLayout.property] = defaultLayout.decode(b, offset2 + contentOffset);
        } else {
          dest = clo.decode(b, offset2);
        }
        return dest;
      }
      /** Implement {@link Layout#encode|encode} for {@link Union}.
       *
       * This API assumes the `src` object is consistent with the union's
       * {@link Union#defaultLayout|default layout}.  To encode variants
       * use the appropriate variant-specific {@link VariantLayout#encode}
       * method. */
      encode(src, b, offset2 = 0) {
        const vlo = this.getSourceVariant(src);
        if (void 0 === vlo) {
          const dlo = this.discriminator;
          const clo = this.defaultLayout;
          let contentOffset = 0;
          if (this.usesPrefixDiscriminator) {
            contentOffset = dlo.layout.span;
          }
          dlo.encode(src[dlo.property], b, offset2);
          return contentOffset + clo.encode(src[clo.property], b, offset2 + contentOffset);
        }
        return vlo.encode(src, b, offset2);
      }
      /** Register a new variant structure within a union.  The newly
       * created variant is returned.
       *
       * @param {Number} variant - initializer for {@link
       * VariantLayout#variant|variant}.
       *
       * @param {Layout} layout - initializer for {@link
       * VariantLayout#layout|layout}.
       *
       * @param {String} property - initializer for {@link
       * Layout#property|property}.
       *
       * @return {VariantLayout} */
      addVariant(variant, layout, property) {
        const rv = new VariantLayout(this, variant, layout, property);
        this.registry[variant] = rv;
        return rv;
      }
      /**
       * Get the layout associated with a registered variant.
       *
       * If `vb` does not produce a registered variant the function returns
       * `undefined`.
       *
       * @param {(Number|Uint8Array)} vb - either the variant number, or a
       * buffer from which the discriminator is to be read.
       *
       * @param {Number} offset - offset into `vb` for the start of the
       * union.  Used only when `vb` is an instance of {Uint8Array}.
       *
       * @return {({VariantLayout}|undefined)}
       */
      getVariant(vb, offset2 = 0) {
        let variant;
        if (vb instanceof Uint8Array) {
          variant = this.discriminator.decode(vb, offset2);
        } else {
          variant = vb;
        }
        return this.registry[variant];
      }
    };
    exports2.Union = Union;
    var VariantLayout = class extends Layout {
      constructor(union2, variant, layout, property) {
        if (!(union2 instanceof Union)) {
          throw new TypeError("union must be a Union");
        }
        if (!Number.isInteger(variant) || 0 > variant) {
          throw new TypeError("variant must be a (non-negative) integer");
        }
        if ("string" === typeof layout && void 0 === property) {
          property = layout;
          layout = null;
        }
        if (layout) {
          if (!(layout instanceof Layout)) {
            throw new TypeError("layout must be a Layout");
          }
          if (null !== union2.defaultLayout && 0 <= layout.span && layout.span > union2.defaultLayout.span) {
            throw new Error("variant span exceeds span of containing union");
          }
          if ("string" !== typeof property) {
            throw new TypeError("variant must have a String property");
          }
        }
        let span = union2.span;
        if (0 > union2.span) {
          span = layout ? layout.span : 0;
          if (0 <= span && union2.usesPrefixDiscriminator) {
            span += union2.discriminator.layout.span;
          }
        }
        super(span, property);
        this.union = union2;
        this.variant = variant;
        this.layout = layout || null;
      }
      /** @override */
      getSpan(b, offset2 = 0) {
        if (0 <= this.span) {
          return this.span;
        }
        let contentOffset = 0;
        if (this.union.usesPrefixDiscriminator) {
          contentOffset = this.union.discriminator.layout.span;
        }
        let span = 0;
        if (this.layout) {
          span = this.layout.getSpan(b, offset2 + contentOffset);
        }
        return contentOffset + span;
      }
      /** @override */
      decode(b, offset2 = 0) {
        const dest = this.makeDestinationObject();
        if (this !== this.union.getVariant(b, offset2)) {
          throw new Error("variant mismatch");
        }
        let contentOffset = 0;
        if (this.union.usesPrefixDiscriminator) {
          contentOffset = this.union.discriminator.layout.span;
        }
        if (this.layout) {
          dest[this.property] = this.layout.decode(b, offset2 + contentOffset);
        } else if (this.property) {
          dest[this.property] = true;
        } else if (this.union.usesPrefixDiscriminator) {
          dest[this.union.discriminator.property] = this.variant;
        }
        return dest;
      }
      /** @override */
      encode(src, b, offset2 = 0) {
        let contentOffset = 0;
        if (this.union.usesPrefixDiscriminator) {
          contentOffset = this.union.discriminator.layout.span;
        }
        if (this.layout && !Object.prototype.hasOwnProperty.call(src, this.property)) {
          throw new TypeError("variant lacks property " + this.property);
        }
        this.union.discriminator.encode(this.variant, b, offset2);
        let span = contentOffset;
        if (this.layout) {
          this.layout.encode(src[this.property], b, offset2 + contentOffset);
          span += this.layout.getSpan(b, offset2 + contentOffset);
          if (0 <= this.union.span && span > this.union.span) {
            throw new Error("encoded variant overruns containing union");
          }
        }
        return span;
      }
      /** Delegate {@link Layout#fromArray|fromArray} to {@link
       * VariantLayout#layout|layout}. */
      fromArray(values) {
        if (this.layout) {
          return this.layout.fromArray(values);
        }
        return void 0;
      }
    };
    exports2.VariantLayout = VariantLayout;
    function fixBitwiseResult(v) {
      if (0 > v) {
        v += 4294967296;
      }
      return v;
    }
    var BitStructure = class extends Layout {
      constructor(word, msb, property) {
        if (!(word instanceof UInt || word instanceof UIntBE)) {
          throw new TypeError("word must be a UInt or UIntBE layout");
        }
        if ("string" === typeof msb && void 0 === property) {
          property = msb;
          msb = false;
        }
        if (4 < word.span) {
          throw new RangeError("word cannot exceed 32 bits");
        }
        super(word.span, property);
        this.word = word;
        this.msb = !!msb;
        this.fields = [];
        let value = 0;
        this._packedSetValue = function(v) {
          value = fixBitwiseResult(v);
          return this;
        };
        this._packedGetValue = function() {
          return value;
        };
      }
      /** @override */
      decode(b, offset2 = 0) {
        const dest = this.makeDestinationObject();
        const value = this.word.decode(b, offset2);
        this._packedSetValue(value);
        for (const fd of this.fields) {
          if (void 0 !== fd.property) {
            dest[fd.property] = fd.decode(b);
          }
        }
        return dest;
      }
      /** Implement {@link Layout#encode|encode} for {@link BitStructure}.
       *
       * If `src` is missing a property for a member with a defined {@link
       * Layout#property|property} the corresponding region of the packed
       * value is left unmodified.  Unused bits are also left unmodified. */
      encode(src, b, offset2 = 0) {
        const value = this.word.decode(b, offset2);
        this._packedSetValue(value);
        for (const fd of this.fields) {
          if (void 0 !== fd.property) {
            const fv = src[fd.property];
            if (void 0 !== fv) {
              fd.encode(fv);
            }
          }
        }
        return this.word.encode(this._packedGetValue(), b, offset2);
      }
      /** Register a new bitfield with a containing bit structure.  The
       * resulting bitfield is returned.
       *
       * @param {Number} bits - initializer for {@link BitField#bits|bits}.
       *
       * @param {string} property - initializer for {@link
       * Layout#property|property}.
       *
       * @return {BitField} */
      addField(bits, property) {
        const bf = new BitField(this, bits, property);
        this.fields.push(bf);
        return bf;
      }
      /** As with {@link BitStructure#addField|addField} for single-bit
       * fields with `boolean` value representation.
       *
       * @param {string} property - initializer for {@link
       * Layout#property|property}.
       *
       * @return {Boolean} */
      // `Boolean` conflicts with the native primitive type
      // eslint-disable-next-line @typescript-eslint/ban-types
      addBoolean(property) {
        const bf = new Boolean2(this, property);
        this.fields.push(bf);
        return bf;
      }
      /**
       * Get access to the bit field for a given property.
       *
       * @param {String} property - the bit field of interest.
       *
       * @return {BitField} - the field associated with `property`, or
       * undefined if there is no such property.
       */
      fieldFor(property) {
        if ("string" !== typeof property) {
          throw new TypeError("property must be string");
        }
        for (const fd of this.fields) {
          if (fd.property === property) {
            return fd;
          }
        }
        return void 0;
      }
    };
    exports2.BitStructure = BitStructure;
    var BitField = class {
      constructor(container, bits, property) {
        if (!(container instanceof BitStructure)) {
          throw new TypeError("container must be a BitStructure");
        }
        if (!Number.isInteger(bits) || 0 >= bits) {
          throw new TypeError("bits must be positive integer");
        }
        const totalBits = 8 * container.span;
        const usedBits = container.fields.reduce((sum, fd) => sum + fd.bits, 0);
        if (bits + usedBits > totalBits) {
          throw new Error("bits too long for span remainder (" + (totalBits - usedBits) + " of " + totalBits + " remain)");
        }
        this.container = container;
        this.bits = bits;
        this.valueMask = (1 << bits) - 1;
        if (32 === bits) {
          this.valueMask = 4294967295;
        }
        this.start = usedBits;
        if (this.container.msb) {
          this.start = totalBits - usedBits - bits;
        }
        this.wordMask = fixBitwiseResult(this.valueMask << this.start);
        this.property = property;
      }
      /** Store a value into the corresponding subsequence of the containing
       * bit field. */
      decode(b, offset2) {
        const word = this.container._packedGetValue();
        const wordValue = fixBitwiseResult(word & this.wordMask);
        const value = wordValue >>> this.start;
        return value;
      }
      /** Store a value into the corresponding subsequence of the containing
       * bit field.
       *
       * **NOTE** This is not a specialization of {@link
       * Layout#encode|Layout.encode} and there is no return value. */
      encode(value) {
        if ("number" !== typeof value || !Number.isInteger(value) || value !== fixBitwiseResult(value & this.valueMask)) {
          throw new TypeError(nameWithProperty("BitField.encode", this) + " value must be integer not exceeding " + this.valueMask);
        }
        const word = this.container._packedGetValue();
        const wordValue = fixBitwiseResult(value << this.start);
        this.container._packedSetValue(fixBitwiseResult(word & ~this.wordMask) | wordValue);
      }
    };
    exports2.BitField = BitField;
    var Boolean2 = class extends BitField {
      constructor(container, property) {
        super(container, 1, property);
      }
      /** Override {@link BitField#decode|decode} for {@link Boolean|Boolean}.
       *
       * @returns {boolean} */
      decode(b, offset2) {
        return !!super.decode(b, offset2);
      }
      /** @override */
      encode(value) {
        if ("boolean" === typeof value) {
          value = +value;
        }
        super.encode(value);
      }
    };
    exports2.Boolean = Boolean2;
    var Blob2 = class extends Layout {
      constructor(length, property) {
        if (!(length instanceof ExternalLayout && length.isCount() || Number.isInteger(length) && 0 <= length)) {
          throw new TypeError("length must be positive integer or an unsigned integer ExternalLayout");
        }
        let span = -1;
        if (!(length instanceof ExternalLayout)) {
          span = length;
        }
        super(span, property);
        this.length = length;
      }
      /** @override */
      getSpan(b, offset2) {
        let span = this.span;
        if (0 > span) {
          span = this.length.decode(b, offset2);
        }
        return span;
      }
      /** @override */
      decode(b, offset2 = 0) {
        let span = this.span;
        if (0 > span) {
          span = this.length.decode(b, offset2);
        }
        return uint8ArrayToBuffer(b).slice(offset2, offset2 + span);
      }
      /** Implement {@link Layout#encode|encode} for {@link Blob}.
       *
       * **NOTE** If {@link Layout#count|count} is an instance of {@link
       * ExternalLayout} then the length of `src` will be encoded as the
       * count after `src` is encoded. */
      encode(src, b, offset2) {
        let span = this.length;
        if (this.length instanceof ExternalLayout) {
          span = src.length;
        }
        if (!(src instanceof Uint8Array && span === src.length)) {
          throw new TypeError(nameWithProperty("Blob.encode", this) + " requires (length " + span + ") Uint8Array as src");
        }
        if (offset2 + span > b.length) {
          throw new RangeError("encoding overruns Uint8Array");
        }
        const srcBuffer = uint8ArrayToBuffer(src);
        uint8ArrayToBuffer(b).write(srcBuffer.toString("hex"), offset2, span, "hex");
        if (this.length instanceof ExternalLayout) {
          this.length.encode(span, b, offset2);
        }
        return span;
      }
    };
    exports2.Blob = Blob2;
    var CString = class extends Layout {
      constructor(property) {
        super(-1, property);
      }
      /** @override */
      getSpan(b, offset2 = 0) {
        checkUint8Array(b);
        let idx = offset2;
        while (idx < b.length && 0 !== b[idx]) {
          idx += 1;
        }
        return 1 + idx - offset2;
      }
      /** @override */
      decode(b, offset2 = 0) {
        const span = this.getSpan(b, offset2);
        return uint8ArrayToBuffer(b).slice(offset2, offset2 + span - 1).toString("utf-8");
      }
      /** @override */
      encode(src, b, offset2 = 0) {
        if ("string" !== typeof src) {
          src = String(src);
        }
        const srcb = buffer_1.Buffer.from(src, "utf8");
        const span = srcb.length;
        if (offset2 + span > b.length) {
          throw new RangeError("encoding overruns Buffer");
        }
        const buffer = uint8ArrayToBuffer(b);
        srcb.copy(buffer, offset2);
        buffer[offset2 + span] = 0;
        return span + 1;
      }
    };
    exports2.CString = CString;
    var UTF8 = class extends Layout {
      constructor(maxSpan, property) {
        if ("string" === typeof maxSpan && void 0 === property) {
          property = maxSpan;
          maxSpan = void 0;
        }
        if (void 0 === maxSpan) {
          maxSpan = -1;
        } else if (!Number.isInteger(maxSpan)) {
          throw new TypeError("maxSpan must be an integer");
        }
        super(-1, property);
        this.maxSpan = maxSpan;
      }
      /** @override */
      getSpan(b, offset2 = 0) {
        checkUint8Array(b);
        return b.length - offset2;
      }
      /** @override */
      decode(b, offset2 = 0) {
        const span = this.getSpan(b, offset2);
        if (0 <= this.maxSpan && this.maxSpan < span) {
          throw new RangeError("text length exceeds maxSpan");
        }
        return uint8ArrayToBuffer(b).slice(offset2, offset2 + span).toString("utf-8");
      }
      /** @override */
      encode(src, b, offset2 = 0) {
        if ("string" !== typeof src) {
          src = String(src);
        }
        const srcb = buffer_1.Buffer.from(src, "utf8");
        const span = srcb.length;
        if (0 <= this.maxSpan && this.maxSpan < span) {
          throw new RangeError("text length exceeds maxSpan");
        }
        if (offset2 + span > b.length) {
          throw new RangeError("encoding overruns Buffer");
        }
        srcb.copy(uint8ArrayToBuffer(b), offset2);
        return span;
      }
    };
    exports2.UTF8 = UTF8;
    var Constant = class extends Layout {
      constructor(value, property) {
        super(0, property);
        this.value = value;
      }
      /** @override */
      decode(b, offset2) {
        return this.value;
      }
      /** @override */
      encode(src, b, offset2) {
        return 0;
      }
    };
    exports2.Constant = Constant;
    exports2.greedy = (elementSpan, property) => new GreedyCount(elementSpan, property);
    exports2.offset = (layout, offset2, property) => new OffsetLayout(layout, offset2, property);
    exports2.u8 = (property) => new UInt(1, property);
    exports2.u16 = (property) => new UInt(2, property);
    exports2.u24 = (property) => new UInt(3, property);
    exports2.u32 = (property) => new UInt(4, property);
    exports2.u40 = (property) => new UInt(5, property);
    exports2.u48 = (property) => new UInt(6, property);
    exports2.nu64 = (property) => new NearUInt64(property);
    exports2.u16be = (property) => new UIntBE(2, property);
    exports2.u24be = (property) => new UIntBE(3, property);
    exports2.u32be = (property) => new UIntBE(4, property);
    exports2.u40be = (property) => new UIntBE(5, property);
    exports2.u48be = (property) => new UIntBE(6, property);
    exports2.nu64be = (property) => new NearUInt64BE(property);
    exports2.s8 = (property) => new Int(1, property);
    exports2.s16 = (property) => new Int(2, property);
    exports2.s24 = (property) => new Int(3, property);
    exports2.s32 = (property) => new Int(4, property);
    exports2.s40 = (property) => new Int(5, property);
    exports2.s48 = (property) => new Int(6, property);
    exports2.ns64 = (property) => new NearInt64(property);
    exports2.s16be = (property) => new IntBE(2, property);
    exports2.s24be = (property) => new IntBE(3, property);
    exports2.s32be = (property) => new IntBE(4, property);
    exports2.s40be = (property) => new IntBE(5, property);
    exports2.s48be = (property) => new IntBE(6, property);
    exports2.ns64be = (property) => new NearInt64BE(property);
    exports2.f32 = (property) => new Float(property);
    exports2.f32be = (property) => new FloatBE(property);
    exports2.f64 = (property) => new Double(property);
    exports2.f64be = (property) => new DoubleBE(property);
    exports2.struct = (fields, property, decodePrefixes) => new Structure(fields, property, decodePrefixes);
    exports2.bits = (word, msb, property) => new BitStructure(word, msb, property);
    exports2.seq = (elementLayout, count, property) => new Sequence(elementLayout, count, property);
    exports2.union = (discr, defaultLayout, property) => new Union(discr, defaultLayout, property);
    exports2.unionLayoutDiscriminator = (layout, property) => new UnionLayoutDiscriminator(layout, property);
    exports2.blob = (length, property) => new Blob2(length, property);
    exports2.cstr = (property) => new CString(property);
    exports2.utf8 = (maxSpan, property) => new UTF8(maxSpan, property);
    exports2.constant = (value, property) => new Constant(value, property);
  }
});

// node_modules/@solana/errors/dist/index.browser.mjs
function getHumanReadableErrorMessage(code, context = {}) {
  const messageFormatString = SolanaErrorMessages[code];
  if (messageFormatString.length === 0) {
    return "";
  }
  let state;
  function commitStateUpTo(endIndex) {
    if (state[TYPE] === 2) {
      const variableName = messageFormatString.slice(state[START_INDEX] + 1, endIndex);
      fragments.push(
        variableName in context ? (
          // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
          `${context[variableName]}`
        ) : `$${variableName}`
      );
    } else if (state[TYPE] === 1) {
      fragments.push(messageFormatString.slice(state[START_INDEX], endIndex));
    }
  }
  const fragments = [];
  messageFormatString.split("").forEach((char, ii) => {
    if (ii === 0) {
      state = {
        [START_INDEX]: 0,
        [TYPE]: messageFormatString[0] === "\\" ? 0 : messageFormatString[0] === "$" ? 2 : 1
        /* Text */
      };
      return;
    }
    let nextState;
    switch (state[TYPE]) {
      case 0:
        nextState = {
          [START_INDEX]: ii,
          [TYPE]: 1
          /* Text */
        };
        break;
      case 1:
        if (char === "\\") {
          nextState = {
            [START_INDEX]: ii,
            [TYPE]: 0
            /* EscapeSequence */
          };
        } else if (char === "$") {
          nextState = {
            [START_INDEX]: ii,
            [TYPE]: 2
            /* Variable */
          };
        }
        break;
      case 2:
        if (char === "\\") {
          nextState = {
            [START_INDEX]: ii,
            [TYPE]: 0
            /* EscapeSequence */
          };
        } else if (char === "$") {
          nextState = {
            [START_INDEX]: ii,
            [TYPE]: 2
            /* Variable */
          };
        } else if (!char.match(/\w/)) {
          nextState = {
            [START_INDEX]: ii,
            [TYPE]: 1
            /* Text */
          };
        }
        break;
    }
    if (nextState) {
      if (state !== nextState) {
        commitStateUpTo(ii);
      }
      state = nextState;
    }
  });
  commitStateUpTo();
  return fragments.join("");
}
function getErrorMessage(code, context = {}) {
  if (true) {
    return getHumanReadableErrorMessage(code, context);
  } else {
    let decodingAdviceMessage = `Solana error #${code}; Decode this error by running \`npx @solana/errors decode -- ${code}`;
    if (Object.keys(context).length) {
      decodingAdviceMessage += ` '${encodeContextObject(context)}'`;
    }
    return `${decodingAdviceMessage}\``;
  }
}
var SOLANA_ERROR__BLOCK_HEIGHT_EXCEEDED, SOLANA_ERROR__INVALID_NONCE, SOLANA_ERROR__NONCE_ACCOUNT_NOT_FOUND, SOLANA_ERROR__BLOCKHASH_STRING_LENGTH_OUT_OF_RANGE, SOLANA_ERROR__INVALID_BLOCKHASH_BYTE_LENGTH, SOLANA_ERROR__LAMPORTS_OUT_OF_RANGE, SOLANA_ERROR__MALFORMED_BIGINT_STRING, SOLANA_ERROR__MALFORMED_NUMBER_STRING, SOLANA_ERROR__TIMESTAMP_OUT_OF_RANGE, SOLANA_ERROR__MALFORMED_JSON_RPC_ERROR, SOLANA_ERROR__JSON_RPC__PARSE_ERROR, SOLANA_ERROR__JSON_RPC__INTERNAL_ERROR, SOLANA_ERROR__JSON_RPC__INVALID_PARAMS, SOLANA_ERROR__JSON_RPC__METHOD_NOT_FOUND, SOLANA_ERROR__JSON_RPC__INVALID_REQUEST, SOLANA_ERROR__JSON_RPC__SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED, SOLANA_ERROR__JSON_RPC__SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION, SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET, SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH, SOLANA_ERROR__JSON_RPC__SCAN_ERROR, SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE, SOLANA_ERROR__JSON_RPC__SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX, SOLANA_ERROR__JSON_RPC__SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED, SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NO_SNAPSHOT, SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SLOT_SKIPPED, SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE, SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NODE_UNHEALTHY, SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_NOT_AVAILABLE, SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE, SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE, SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_CLEANED_UP, SOLANA_ERROR__ADDRESSES__INVALID_BYTE_LENGTH, SOLANA_ERROR__ADDRESSES__STRING_LENGTH_OUT_OF_RANGE, SOLANA_ERROR__ADDRESSES__INVALID_BASE58_ENCODED_ADDRESS, SOLANA_ERROR__ADDRESSES__INVALID_ED25519_PUBLIC_KEY, SOLANA_ERROR__ADDRESSES__MALFORMED_PDA, SOLANA_ERROR__ADDRESSES__PDA_BUMP_SEED_OUT_OF_RANGE, SOLANA_ERROR__ADDRESSES__MAX_NUMBER_OF_PDA_SEEDS_EXCEEDED, SOLANA_ERROR__ADDRESSES__MAX_PDA_SEED_LENGTH_EXCEEDED, SOLANA_ERROR__ADDRESSES__INVALID_SEEDS_POINT_ON_CURVE, SOLANA_ERROR__ADDRESSES__FAILED_TO_FIND_VIABLE_PDA_BUMP_SEED, SOLANA_ERROR__ADDRESSES__PDA_ENDS_WITH_PDA_MARKER, SOLANA_ERROR__ACCOUNTS__ACCOUNT_NOT_FOUND, SOLANA_ERROR__ACCOUNTS__ONE_OR_MORE_ACCOUNTS_NOT_FOUND, SOLANA_ERROR__ACCOUNTS__FAILED_TO_DECODE_ACCOUNT, SOLANA_ERROR__ACCOUNTS__EXPECTED_DECODED_ACCOUNT, SOLANA_ERROR__ACCOUNTS__EXPECTED_ALL_ACCOUNTS_TO_BE_DECODED, SOLANA_ERROR__SUBTLE_CRYPTO__DISALLOWED_IN_INSECURE_CONTEXT, SOLANA_ERROR__SUBTLE_CRYPTO__DIGEST_UNIMPLEMENTED, SOLANA_ERROR__SUBTLE_CRYPTO__ED25519_ALGORITHM_UNIMPLEMENTED, SOLANA_ERROR__SUBTLE_CRYPTO__EXPORT_FUNCTION_UNIMPLEMENTED, SOLANA_ERROR__SUBTLE_CRYPTO__GENERATE_FUNCTION_UNIMPLEMENTED, SOLANA_ERROR__SUBTLE_CRYPTO__SIGN_FUNCTION_UNIMPLEMENTED, SOLANA_ERROR__SUBTLE_CRYPTO__VERIFY_FUNCTION_UNIMPLEMENTED, SOLANA_ERROR__SUBTLE_CRYPTO__CANNOT_EXPORT_NON_EXTRACTABLE_KEY, SOLANA_ERROR__CRYPTO__RANDOM_VALUES_FUNCTION_UNIMPLEMENTED, SOLANA_ERROR__KEYS__INVALID_KEY_PAIR_BYTE_LENGTH, SOLANA_ERROR__KEYS__INVALID_PRIVATE_KEY_BYTE_LENGTH, SOLANA_ERROR__KEYS__INVALID_SIGNATURE_BYTE_LENGTH, SOLANA_ERROR__KEYS__SIGNATURE_STRING_LENGTH_OUT_OF_RANGE, SOLANA_ERROR__KEYS__PUBLIC_KEY_MUST_MATCH_PRIVATE_KEY, SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_ACCOUNTS, SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_DATA, SOLANA_ERROR__INSTRUCTION__PROGRAM_ID_MISMATCH, SOLANA_ERROR__INSTRUCTION_ERROR__UNKNOWN, SOLANA_ERROR__INSTRUCTION_ERROR__GENERIC_ERROR, SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ARGUMENT, SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_INSTRUCTION_DATA, SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_DATA, SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_TOO_SMALL, SOLANA_ERROR__INSTRUCTION_ERROR__INSUFFICIENT_FUNDS, SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_PROGRAM_ID, SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_REQUIRED_SIGNATURE, SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_ALREADY_INITIALIZED, SOLANA_ERROR__INSTRUCTION_ERROR__UNINITIALIZED_ACCOUNT, SOLANA_ERROR__INSTRUCTION_ERROR__UNBALANCED_INSTRUCTION, SOLANA_ERROR__INSTRUCTION_ERROR__MODIFIED_PROGRAM_ID, SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_LAMPORT_SPEND, SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_DATA_MODIFIED, SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_LAMPORT_CHANGE, SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_DATA_MODIFIED, SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_INDEX, SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_MODIFIED, SOLANA_ERROR__INSTRUCTION_ERROR__RENT_EPOCH_MODIFIED, SOLANA_ERROR__INSTRUCTION_ERROR__NOT_ENOUGH_ACCOUNT_KEYS, SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_SIZE_CHANGED, SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_EXECUTABLE, SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_FAILED, SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_OUTSTANDING, SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_OUT_OF_SYNC, SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM, SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ERROR, SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_DATA_MODIFIED, SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_LAMPORT_CHANGE, SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_ACCOUNT_NOT_RENT_EXEMPT, SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_PROGRAM_ID, SOLANA_ERROR__INSTRUCTION_ERROR__CALL_DEPTH, SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_ACCOUNT, SOLANA_ERROR__INSTRUCTION_ERROR__REENTRANCY_NOT_ALLOWED, SOLANA_ERROR__INSTRUCTION_ERROR__MAX_SEED_LENGTH_EXCEEDED, SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_SEEDS, SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_REALLOC, SOLANA_ERROR__INSTRUCTION_ERROR__COMPUTATIONAL_BUDGET_EXCEEDED, SOLANA_ERROR__INSTRUCTION_ERROR__PRIVILEGE_ESCALATION, SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_ENVIRONMENT_SETUP_FAILURE, SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPLETE, SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPILE, SOLANA_ERROR__INSTRUCTION_ERROR__IMMUTABLE, SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_AUTHORITY, SOLANA_ERROR__INSTRUCTION_ERROR__BORSH_IO_ERROR, SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_RENT_EXEMPT, SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_OWNER, SOLANA_ERROR__INSTRUCTION_ERROR__ARITHMETIC_OVERFLOW, SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_SYSVAR, SOLANA_ERROR__INSTRUCTION_ERROR__ILLEGAL_OWNER, SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_DATA_ALLOCATIONS_EXCEEDED, SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_EXCEEDED, SOLANA_ERROR__INSTRUCTION_ERROR__MAX_INSTRUCTION_TRACE_LENGTH_EXCEEDED, SOLANA_ERROR__INSTRUCTION_ERROR__BUILTIN_PROGRAMS_MUST_CONSUME_COMPUTE_UNITS, SOLANA_ERROR__SIGNER__ADDRESS_CANNOT_HAVE_MULTIPLE_SIGNERS, SOLANA_ERROR__SIGNER__EXPECTED_KEY_PAIR_SIGNER, SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_SIGNER, SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_MODIFYING_SIGNER, SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_PARTIAL_SIGNER, SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SIGNER, SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_MODIFYING_SIGNER, SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_PARTIAL_SIGNER, SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SENDING_SIGNER, SOLANA_ERROR__SIGNER__TRANSACTION_CANNOT_HAVE_MULTIPLE_SENDING_SIGNERS, SOLANA_ERROR__SIGNER__TRANSACTION_SENDING_SIGNER_MISSING, SOLANA_ERROR__SIGNER__WALLET_MULTISIGN_UNIMPLEMENTED, SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_CANNOT_PAY_FEES, SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_MUST_NOT_BE_WRITABLE, SOLANA_ERROR__TRANSACTION__EXPECTED_BLOCKHASH_LIFETIME, SOLANA_ERROR__TRANSACTION__EXPECTED_NONCE_LIFETIME, SOLANA_ERROR__TRANSACTION__VERSION_NUMBER_OUT_OF_RANGE, SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_CONTENTS_MISSING, SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_INDEX_OUT_OF_RANGE, SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_INSTRUCTION_PROGRAM_ADDRESS_NOT_FOUND, SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_FEE_PAYER_MISSING, SOLANA_ERROR__TRANSACTION__SIGNATURES_MISSING, SOLANA_ERROR__TRANSACTION__ADDRESS_MISSING, SOLANA_ERROR__TRANSACTION__FEE_PAYER_MISSING, SOLANA_ERROR__TRANSACTION__FEE_PAYER_SIGNATURE_MISSING, SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_INSTRUCTIONS_MISSING, SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_FIRST_INSTRUCTION_MUST_BE_ADVANCE_NONCE, SOLANA_ERROR__TRANSACTION__ADDRESSES_CANNOT_SIGN_TRANSACTION, SOLANA_ERROR__TRANSACTION__CANNOT_ENCODE_WITH_EMPTY_SIGNATURES, SOLANA_ERROR__TRANSACTION__MESSAGE_SIGNATURES_MISMATCH, SOLANA_ERROR__TRANSACTION__FAILED_TO_ESTIMATE_COMPUTE_LIMIT, SOLANA_ERROR__TRANSACTION__FAILED_WHEN_SIMULATING_TO_ESTIMATE_COMPUTE_LIMIT, SOLANA_ERROR__TRANSACTION_ERROR__UNKNOWN, SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_IN_USE, SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_LOADED_TWICE, SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_NOT_FOUND, SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_ACCOUNT_NOT_FOUND, SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_FEE, SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_FOR_FEE, SOLANA_ERROR__TRANSACTION_ERROR__ALREADY_PROCESSED, SOLANA_ERROR__TRANSACTION_ERROR__BLOCKHASH_NOT_FOUND, SOLANA_ERROR__TRANSACTION_ERROR__CALL_CHAIN_TOO_DEEP, SOLANA_ERROR__TRANSACTION_ERROR__MISSING_SIGNATURE_FOR_FEE, SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_INDEX, SOLANA_ERROR__TRANSACTION_ERROR__SIGNATURE_FAILURE, SOLANA_ERROR__TRANSACTION_ERROR__INVALID_PROGRAM_FOR_EXECUTION, SOLANA_ERROR__TRANSACTION_ERROR__SANITIZE_FAILURE, SOLANA_ERROR__TRANSACTION_ERROR__CLUSTER_MAINTENANCE, SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_BORROW_OUTSTANDING, SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_BLOCK_COST_LIMIT, SOLANA_ERROR__TRANSACTION_ERROR__UNSUPPORTED_VERSION, SOLANA_ERROR__TRANSACTION_ERROR__INVALID_WRITABLE_ACCOUNT, SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_ACCOUNT_COST_LIMIT, SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_BLOCK_LIMIT, SOLANA_ERROR__TRANSACTION_ERROR__TOO_MANY_ACCOUNT_LOCKS, SOLANA_ERROR__TRANSACTION_ERROR__ADDRESS_LOOKUP_TABLE_NOT_FOUND, SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_OWNER, SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_DATA, SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_INDEX, SOLANA_ERROR__TRANSACTION_ERROR__INVALID_RENT_PAYING_ACCOUNT, SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_VOTE_COST_LIMIT, SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_TOTAL_LIMIT, SOLANA_ERROR__TRANSACTION_ERROR__DUPLICATE_INSTRUCTION, SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_RENT, SOLANA_ERROR__TRANSACTION_ERROR__MAX_LOADED_ACCOUNTS_DATA_SIZE_EXCEEDED, SOLANA_ERROR__TRANSACTION_ERROR__INVALID_LOADED_ACCOUNTS_DATA_SIZE_LIMIT, SOLANA_ERROR__TRANSACTION_ERROR__RESANITIZATION_NEEDED, SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_EXECUTION_TEMPORARILY_RESTRICTED, SOLANA_ERROR__TRANSACTION_ERROR__UNBALANCED_TRANSACTION, SOLANA_ERROR__CODECS__CANNOT_DECODE_EMPTY_BYTE_ARRAY, SOLANA_ERROR__CODECS__INVALID_BYTE_LENGTH, SOLANA_ERROR__CODECS__EXPECTED_FIXED_LENGTH, SOLANA_ERROR__CODECS__EXPECTED_VARIABLE_LENGTH, SOLANA_ERROR__CODECS__ENCODER_DECODER_SIZE_COMPATIBILITY_MISMATCH, SOLANA_ERROR__CODECS__ENCODER_DECODER_FIXED_SIZE_MISMATCH, SOLANA_ERROR__CODECS__ENCODER_DECODER_MAX_SIZE_MISMATCH, SOLANA_ERROR__CODECS__INVALID_NUMBER_OF_ITEMS, SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE, SOLANA_ERROR__CODECS__INVALID_DISCRIMINATED_UNION_VARIANT, SOLANA_ERROR__CODECS__INVALID_ENUM_VARIANT, SOLANA_ERROR__CODECS__NUMBER_OUT_OF_RANGE, SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE, SOLANA_ERROR__CODECS__EXPECTED_POSITIVE_BYTE_LENGTH, SOLANA_ERROR__CODECS__OFFSET_OUT_OF_RANGE, SOLANA_ERROR__CODECS__INVALID_LITERAL_UNION_VARIANT, SOLANA_ERROR__CODECS__LITERAL_UNION_DISCRIMINATOR_OUT_OF_RANGE, SOLANA_ERROR__CODECS__UNION_VARIANT_OUT_OF_RANGE, SOLANA_ERROR__CODECS__INVALID_CONSTANT, SOLANA_ERROR__CODECS__EXPECTED_ZERO_VALUE_TO_MATCH_ITEM_FIXED_SIZE, SOLANA_ERROR__CODECS__ENCODED_BYTES_MUST_NOT_INCLUDE_SENTINEL, SOLANA_ERROR__CODECS__SENTINEL_MISSING_IN_DECODED_BYTES, SOLANA_ERROR__CODECS__CANNOT_USE_LEXICAL_VALUES_AS_ENUM_DISCRIMINATORS, SOLANA_ERROR__RPC__INTEGER_OVERFLOW, SOLANA_ERROR__RPC__TRANSPORT_HTTP_HEADER_FORBIDDEN, SOLANA_ERROR__RPC__TRANSPORT_HTTP_ERROR, SOLANA_ERROR__RPC__API_PLAN_MISSING_FOR_RPC_METHOD, SOLANA_ERROR__RPC_SUBSCRIPTIONS__CANNOT_CREATE_SUBSCRIPTION_PLAN, SOLANA_ERROR__RPC_SUBSCRIPTIONS__EXPECTED_SERVER_SUBSCRIPTION_ID, SOLANA_ERROR__RPC_SUBSCRIPTIONS__CHANNEL_CLOSED_BEFORE_MESSAGE_BUFFERED, SOLANA_ERROR__RPC_SUBSCRIPTIONS__CHANNEL_CONNECTION_CLOSED, SOLANA_ERROR__RPC_SUBSCRIPTIONS__CHANNEL_FAILED_TO_CONNECT, SOLANA_ERROR__INVARIANT_VIOLATION__SUBSCRIPTION_ITERATOR_STATE_MISSING, SOLANA_ERROR__INVARIANT_VIOLATION__SUBSCRIPTION_ITERATOR_MUST_NOT_POLL_BEFORE_RESOLVING_EXISTING_MESSAGE_PROMISE, SOLANA_ERROR__INVARIANT_VIOLATION__CACHED_ABORTABLE_ITERABLE_CACHE_ENTRY_MISSING, SOLANA_ERROR__INVARIANT_VIOLATION__SWITCH_MUST_BE_EXHAUSTIVE, SOLANA_ERROR__INVARIANT_VIOLATION__DATA_PUBLISHER_CHANNEL_UNIMPLEMENTED, SolanaErrorMessages, START_INDEX, TYPE, SolanaError;
var init_index_browser = __esm({
  "node_modules/@solana/errors/dist/index.browser.mjs"() {
    SOLANA_ERROR__BLOCK_HEIGHT_EXCEEDED = 1;
    SOLANA_ERROR__INVALID_NONCE = 2;
    SOLANA_ERROR__NONCE_ACCOUNT_NOT_FOUND = 3;
    SOLANA_ERROR__BLOCKHASH_STRING_LENGTH_OUT_OF_RANGE = 4;
    SOLANA_ERROR__INVALID_BLOCKHASH_BYTE_LENGTH = 5;
    SOLANA_ERROR__LAMPORTS_OUT_OF_RANGE = 6;
    SOLANA_ERROR__MALFORMED_BIGINT_STRING = 7;
    SOLANA_ERROR__MALFORMED_NUMBER_STRING = 8;
    SOLANA_ERROR__TIMESTAMP_OUT_OF_RANGE = 9;
    SOLANA_ERROR__MALFORMED_JSON_RPC_ERROR = 10;
    SOLANA_ERROR__JSON_RPC__PARSE_ERROR = -32700;
    SOLANA_ERROR__JSON_RPC__INTERNAL_ERROR = -32603;
    SOLANA_ERROR__JSON_RPC__INVALID_PARAMS = -32602;
    SOLANA_ERROR__JSON_RPC__METHOD_NOT_FOUND = -32601;
    SOLANA_ERROR__JSON_RPC__INVALID_REQUEST = -32600;
    SOLANA_ERROR__JSON_RPC__SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED = -32016;
    SOLANA_ERROR__JSON_RPC__SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION = -32015;
    SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET = -32014;
    SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH = -32013;
    SOLANA_ERROR__JSON_RPC__SCAN_ERROR = -32012;
    SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE = -32011;
    SOLANA_ERROR__JSON_RPC__SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX = -32010;
    SOLANA_ERROR__JSON_RPC__SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED = -32009;
    SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NO_SNAPSHOT = -32008;
    SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SLOT_SKIPPED = -32007;
    SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE = -32006;
    SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NODE_UNHEALTHY = -32005;
    SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_NOT_AVAILABLE = -32004;
    SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE = -32003;
    SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE = -32002;
    SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_CLEANED_UP = -32001;
    SOLANA_ERROR__ADDRESSES__INVALID_BYTE_LENGTH = 28e5;
    SOLANA_ERROR__ADDRESSES__STRING_LENGTH_OUT_OF_RANGE = 2800001;
    SOLANA_ERROR__ADDRESSES__INVALID_BASE58_ENCODED_ADDRESS = 2800002;
    SOLANA_ERROR__ADDRESSES__INVALID_ED25519_PUBLIC_KEY = 2800003;
    SOLANA_ERROR__ADDRESSES__MALFORMED_PDA = 2800004;
    SOLANA_ERROR__ADDRESSES__PDA_BUMP_SEED_OUT_OF_RANGE = 2800005;
    SOLANA_ERROR__ADDRESSES__MAX_NUMBER_OF_PDA_SEEDS_EXCEEDED = 2800006;
    SOLANA_ERROR__ADDRESSES__MAX_PDA_SEED_LENGTH_EXCEEDED = 2800007;
    SOLANA_ERROR__ADDRESSES__INVALID_SEEDS_POINT_ON_CURVE = 2800008;
    SOLANA_ERROR__ADDRESSES__FAILED_TO_FIND_VIABLE_PDA_BUMP_SEED = 2800009;
    SOLANA_ERROR__ADDRESSES__PDA_ENDS_WITH_PDA_MARKER = 2800010;
    SOLANA_ERROR__ACCOUNTS__ACCOUNT_NOT_FOUND = 323e4;
    SOLANA_ERROR__ACCOUNTS__ONE_OR_MORE_ACCOUNTS_NOT_FOUND = 32300001;
    SOLANA_ERROR__ACCOUNTS__FAILED_TO_DECODE_ACCOUNT = 3230002;
    SOLANA_ERROR__ACCOUNTS__EXPECTED_DECODED_ACCOUNT = 3230003;
    SOLANA_ERROR__ACCOUNTS__EXPECTED_ALL_ACCOUNTS_TO_BE_DECODED = 3230004;
    SOLANA_ERROR__SUBTLE_CRYPTO__DISALLOWED_IN_INSECURE_CONTEXT = 361e4;
    SOLANA_ERROR__SUBTLE_CRYPTO__DIGEST_UNIMPLEMENTED = 3610001;
    SOLANA_ERROR__SUBTLE_CRYPTO__ED25519_ALGORITHM_UNIMPLEMENTED = 3610002;
    SOLANA_ERROR__SUBTLE_CRYPTO__EXPORT_FUNCTION_UNIMPLEMENTED = 3610003;
    SOLANA_ERROR__SUBTLE_CRYPTO__GENERATE_FUNCTION_UNIMPLEMENTED = 3610004;
    SOLANA_ERROR__SUBTLE_CRYPTO__SIGN_FUNCTION_UNIMPLEMENTED = 3610005;
    SOLANA_ERROR__SUBTLE_CRYPTO__VERIFY_FUNCTION_UNIMPLEMENTED = 3610006;
    SOLANA_ERROR__SUBTLE_CRYPTO__CANNOT_EXPORT_NON_EXTRACTABLE_KEY = 3610007;
    SOLANA_ERROR__CRYPTO__RANDOM_VALUES_FUNCTION_UNIMPLEMENTED = 3611e3;
    SOLANA_ERROR__KEYS__INVALID_KEY_PAIR_BYTE_LENGTH = 3704e3;
    SOLANA_ERROR__KEYS__INVALID_PRIVATE_KEY_BYTE_LENGTH = 3704001;
    SOLANA_ERROR__KEYS__INVALID_SIGNATURE_BYTE_LENGTH = 3704002;
    SOLANA_ERROR__KEYS__SIGNATURE_STRING_LENGTH_OUT_OF_RANGE = 3704003;
    SOLANA_ERROR__KEYS__PUBLIC_KEY_MUST_MATCH_PRIVATE_KEY = 3704004;
    SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_ACCOUNTS = 4128e3;
    SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_DATA = 4128001;
    SOLANA_ERROR__INSTRUCTION__PROGRAM_ID_MISMATCH = 4128002;
    SOLANA_ERROR__INSTRUCTION_ERROR__UNKNOWN = 4615e3;
    SOLANA_ERROR__INSTRUCTION_ERROR__GENERIC_ERROR = 4615001;
    SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ARGUMENT = 4615002;
    SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_INSTRUCTION_DATA = 4615003;
    SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_DATA = 4615004;
    SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_TOO_SMALL = 4615005;
    SOLANA_ERROR__INSTRUCTION_ERROR__INSUFFICIENT_FUNDS = 4615006;
    SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_PROGRAM_ID = 4615007;
    SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_REQUIRED_SIGNATURE = 4615008;
    SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_ALREADY_INITIALIZED = 4615009;
    SOLANA_ERROR__INSTRUCTION_ERROR__UNINITIALIZED_ACCOUNT = 4615010;
    SOLANA_ERROR__INSTRUCTION_ERROR__UNBALANCED_INSTRUCTION = 4615011;
    SOLANA_ERROR__INSTRUCTION_ERROR__MODIFIED_PROGRAM_ID = 4615012;
    SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_LAMPORT_SPEND = 4615013;
    SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_DATA_MODIFIED = 4615014;
    SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_LAMPORT_CHANGE = 4615015;
    SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_DATA_MODIFIED = 4615016;
    SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_INDEX = 4615017;
    SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_MODIFIED = 4615018;
    SOLANA_ERROR__INSTRUCTION_ERROR__RENT_EPOCH_MODIFIED = 4615019;
    SOLANA_ERROR__INSTRUCTION_ERROR__NOT_ENOUGH_ACCOUNT_KEYS = 4615020;
    SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_SIZE_CHANGED = 4615021;
    SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_EXECUTABLE = 4615022;
    SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_FAILED = 4615023;
    SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_OUTSTANDING = 4615024;
    SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_OUT_OF_SYNC = 4615025;
    SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM = 4615026;
    SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ERROR = 4615027;
    SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_DATA_MODIFIED = 4615028;
    SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_LAMPORT_CHANGE = 4615029;
    SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_ACCOUNT_NOT_RENT_EXEMPT = 4615030;
    SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_PROGRAM_ID = 4615031;
    SOLANA_ERROR__INSTRUCTION_ERROR__CALL_DEPTH = 4615032;
    SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_ACCOUNT = 4615033;
    SOLANA_ERROR__INSTRUCTION_ERROR__REENTRANCY_NOT_ALLOWED = 4615034;
    SOLANA_ERROR__INSTRUCTION_ERROR__MAX_SEED_LENGTH_EXCEEDED = 4615035;
    SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_SEEDS = 4615036;
    SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_REALLOC = 4615037;
    SOLANA_ERROR__INSTRUCTION_ERROR__COMPUTATIONAL_BUDGET_EXCEEDED = 4615038;
    SOLANA_ERROR__INSTRUCTION_ERROR__PRIVILEGE_ESCALATION = 4615039;
    SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_ENVIRONMENT_SETUP_FAILURE = 4615040;
    SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPLETE = 4615041;
    SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPILE = 4615042;
    SOLANA_ERROR__INSTRUCTION_ERROR__IMMUTABLE = 4615043;
    SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_AUTHORITY = 4615044;
    SOLANA_ERROR__INSTRUCTION_ERROR__BORSH_IO_ERROR = 4615045;
    SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_RENT_EXEMPT = 4615046;
    SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_OWNER = 4615047;
    SOLANA_ERROR__INSTRUCTION_ERROR__ARITHMETIC_OVERFLOW = 4615048;
    SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_SYSVAR = 4615049;
    SOLANA_ERROR__INSTRUCTION_ERROR__ILLEGAL_OWNER = 4615050;
    SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_DATA_ALLOCATIONS_EXCEEDED = 4615051;
    SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_EXCEEDED = 4615052;
    SOLANA_ERROR__INSTRUCTION_ERROR__MAX_INSTRUCTION_TRACE_LENGTH_EXCEEDED = 4615053;
    SOLANA_ERROR__INSTRUCTION_ERROR__BUILTIN_PROGRAMS_MUST_CONSUME_COMPUTE_UNITS = 4615054;
    SOLANA_ERROR__SIGNER__ADDRESS_CANNOT_HAVE_MULTIPLE_SIGNERS = 5508e3;
    SOLANA_ERROR__SIGNER__EXPECTED_KEY_PAIR_SIGNER = 5508001;
    SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_SIGNER = 5508002;
    SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_MODIFYING_SIGNER = 5508003;
    SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_PARTIAL_SIGNER = 5508004;
    SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SIGNER = 5508005;
    SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_MODIFYING_SIGNER = 5508006;
    SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_PARTIAL_SIGNER = 5508007;
    SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SENDING_SIGNER = 5508008;
    SOLANA_ERROR__SIGNER__TRANSACTION_CANNOT_HAVE_MULTIPLE_SENDING_SIGNERS = 5508009;
    SOLANA_ERROR__SIGNER__TRANSACTION_SENDING_SIGNER_MISSING = 5508010;
    SOLANA_ERROR__SIGNER__WALLET_MULTISIGN_UNIMPLEMENTED = 5508011;
    SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_CANNOT_PAY_FEES = 5663e3;
    SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_MUST_NOT_BE_WRITABLE = 5663001;
    SOLANA_ERROR__TRANSACTION__EXPECTED_BLOCKHASH_LIFETIME = 5663002;
    SOLANA_ERROR__TRANSACTION__EXPECTED_NONCE_LIFETIME = 5663003;
    SOLANA_ERROR__TRANSACTION__VERSION_NUMBER_OUT_OF_RANGE = 5663004;
    SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_CONTENTS_MISSING = 5663005;
    SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_INDEX_OUT_OF_RANGE = 5663006;
    SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_INSTRUCTION_PROGRAM_ADDRESS_NOT_FOUND = 5663007;
    SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_FEE_PAYER_MISSING = 5663008;
    SOLANA_ERROR__TRANSACTION__SIGNATURES_MISSING = 5663009;
    SOLANA_ERROR__TRANSACTION__ADDRESS_MISSING = 5663010;
    SOLANA_ERROR__TRANSACTION__FEE_PAYER_MISSING = 5663011;
    SOLANA_ERROR__TRANSACTION__FEE_PAYER_SIGNATURE_MISSING = 5663012;
    SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_INSTRUCTIONS_MISSING = 5663013;
    SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_FIRST_INSTRUCTION_MUST_BE_ADVANCE_NONCE = 5663014;
    SOLANA_ERROR__TRANSACTION__ADDRESSES_CANNOT_SIGN_TRANSACTION = 5663015;
    SOLANA_ERROR__TRANSACTION__CANNOT_ENCODE_WITH_EMPTY_SIGNATURES = 5663016;
    SOLANA_ERROR__TRANSACTION__MESSAGE_SIGNATURES_MISMATCH = 5663017;
    SOLANA_ERROR__TRANSACTION__FAILED_TO_ESTIMATE_COMPUTE_LIMIT = 5663018;
    SOLANA_ERROR__TRANSACTION__FAILED_WHEN_SIMULATING_TO_ESTIMATE_COMPUTE_LIMIT = 5663019;
    SOLANA_ERROR__TRANSACTION_ERROR__UNKNOWN = 705e4;
    SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_IN_USE = 7050001;
    SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_LOADED_TWICE = 7050002;
    SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_NOT_FOUND = 7050003;
    SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_ACCOUNT_NOT_FOUND = 7050004;
    SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_FEE = 7050005;
    SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_FOR_FEE = 7050006;
    SOLANA_ERROR__TRANSACTION_ERROR__ALREADY_PROCESSED = 7050007;
    SOLANA_ERROR__TRANSACTION_ERROR__BLOCKHASH_NOT_FOUND = 7050008;
    SOLANA_ERROR__TRANSACTION_ERROR__CALL_CHAIN_TOO_DEEP = 7050009;
    SOLANA_ERROR__TRANSACTION_ERROR__MISSING_SIGNATURE_FOR_FEE = 7050010;
    SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_INDEX = 7050011;
    SOLANA_ERROR__TRANSACTION_ERROR__SIGNATURE_FAILURE = 7050012;
    SOLANA_ERROR__TRANSACTION_ERROR__INVALID_PROGRAM_FOR_EXECUTION = 7050013;
    SOLANA_ERROR__TRANSACTION_ERROR__SANITIZE_FAILURE = 7050014;
    SOLANA_ERROR__TRANSACTION_ERROR__CLUSTER_MAINTENANCE = 7050015;
    SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_BORROW_OUTSTANDING = 7050016;
    SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_BLOCK_COST_LIMIT = 7050017;
    SOLANA_ERROR__TRANSACTION_ERROR__UNSUPPORTED_VERSION = 7050018;
    SOLANA_ERROR__TRANSACTION_ERROR__INVALID_WRITABLE_ACCOUNT = 7050019;
    SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_ACCOUNT_COST_LIMIT = 7050020;
    SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_BLOCK_LIMIT = 7050021;
    SOLANA_ERROR__TRANSACTION_ERROR__TOO_MANY_ACCOUNT_LOCKS = 7050022;
    SOLANA_ERROR__TRANSACTION_ERROR__ADDRESS_LOOKUP_TABLE_NOT_FOUND = 7050023;
    SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_OWNER = 7050024;
    SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_DATA = 7050025;
    SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_INDEX = 7050026;
    SOLANA_ERROR__TRANSACTION_ERROR__INVALID_RENT_PAYING_ACCOUNT = 7050027;
    SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_VOTE_COST_LIMIT = 7050028;
    SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_TOTAL_LIMIT = 7050029;
    SOLANA_ERROR__TRANSACTION_ERROR__DUPLICATE_INSTRUCTION = 7050030;
    SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_RENT = 7050031;
    SOLANA_ERROR__TRANSACTION_ERROR__MAX_LOADED_ACCOUNTS_DATA_SIZE_EXCEEDED = 7050032;
    SOLANA_ERROR__TRANSACTION_ERROR__INVALID_LOADED_ACCOUNTS_DATA_SIZE_LIMIT = 7050033;
    SOLANA_ERROR__TRANSACTION_ERROR__RESANITIZATION_NEEDED = 7050034;
    SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_EXECUTION_TEMPORARILY_RESTRICTED = 7050035;
    SOLANA_ERROR__TRANSACTION_ERROR__UNBALANCED_TRANSACTION = 7050036;
    SOLANA_ERROR__CODECS__CANNOT_DECODE_EMPTY_BYTE_ARRAY = 8078e3;
    SOLANA_ERROR__CODECS__INVALID_BYTE_LENGTH = 8078001;
    SOLANA_ERROR__CODECS__EXPECTED_FIXED_LENGTH = 8078002;
    SOLANA_ERROR__CODECS__EXPECTED_VARIABLE_LENGTH = 8078003;
    SOLANA_ERROR__CODECS__ENCODER_DECODER_SIZE_COMPATIBILITY_MISMATCH = 8078004;
    SOLANA_ERROR__CODECS__ENCODER_DECODER_FIXED_SIZE_MISMATCH = 8078005;
    SOLANA_ERROR__CODECS__ENCODER_DECODER_MAX_SIZE_MISMATCH = 8078006;
    SOLANA_ERROR__CODECS__INVALID_NUMBER_OF_ITEMS = 8078007;
    SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE = 8078008;
    SOLANA_ERROR__CODECS__INVALID_DISCRIMINATED_UNION_VARIANT = 8078009;
    SOLANA_ERROR__CODECS__INVALID_ENUM_VARIANT = 8078010;
    SOLANA_ERROR__CODECS__NUMBER_OUT_OF_RANGE = 8078011;
    SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE = 8078012;
    SOLANA_ERROR__CODECS__EXPECTED_POSITIVE_BYTE_LENGTH = 8078013;
    SOLANA_ERROR__CODECS__OFFSET_OUT_OF_RANGE = 8078014;
    SOLANA_ERROR__CODECS__INVALID_LITERAL_UNION_VARIANT = 8078015;
    SOLANA_ERROR__CODECS__LITERAL_UNION_DISCRIMINATOR_OUT_OF_RANGE = 8078016;
    SOLANA_ERROR__CODECS__UNION_VARIANT_OUT_OF_RANGE = 8078017;
    SOLANA_ERROR__CODECS__INVALID_CONSTANT = 8078018;
    SOLANA_ERROR__CODECS__EXPECTED_ZERO_VALUE_TO_MATCH_ITEM_FIXED_SIZE = 8078019;
    SOLANA_ERROR__CODECS__ENCODED_BYTES_MUST_NOT_INCLUDE_SENTINEL = 8078020;
    SOLANA_ERROR__CODECS__SENTINEL_MISSING_IN_DECODED_BYTES = 8078021;
    SOLANA_ERROR__CODECS__CANNOT_USE_LEXICAL_VALUES_AS_ENUM_DISCRIMINATORS = 8078022;
    SOLANA_ERROR__RPC__INTEGER_OVERFLOW = 81e5;
    SOLANA_ERROR__RPC__TRANSPORT_HTTP_HEADER_FORBIDDEN = 8100001;
    SOLANA_ERROR__RPC__TRANSPORT_HTTP_ERROR = 8100002;
    SOLANA_ERROR__RPC__API_PLAN_MISSING_FOR_RPC_METHOD = 8100003;
    SOLANA_ERROR__RPC_SUBSCRIPTIONS__CANNOT_CREATE_SUBSCRIPTION_PLAN = 819e4;
    SOLANA_ERROR__RPC_SUBSCRIPTIONS__EXPECTED_SERVER_SUBSCRIPTION_ID = 8190001;
    SOLANA_ERROR__RPC_SUBSCRIPTIONS__CHANNEL_CLOSED_BEFORE_MESSAGE_BUFFERED = 8190002;
    SOLANA_ERROR__RPC_SUBSCRIPTIONS__CHANNEL_CONNECTION_CLOSED = 8190003;
    SOLANA_ERROR__RPC_SUBSCRIPTIONS__CHANNEL_FAILED_TO_CONNECT = 8190004;
    SOLANA_ERROR__INVARIANT_VIOLATION__SUBSCRIPTION_ITERATOR_STATE_MISSING = 99e5;
    SOLANA_ERROR__INVARIANT_VIOLATION__SUBSCRIPTION_ITERATOR_MUST_NOT_POLL_BEFORE_RESOLVING_EXISTING_MESSAGE_PROMISE = 9900001;
    SOLANA_ERROR__INVARIANT_VIOLATION__CACHED_ABORTABLE_ITERABLE_CACHE_ENTRY_MISSING = 9900002;
    SOLANA_ERROR__INVARIANT_VIOLATION__SWITCH_MUST_BE_EXHAUSTIVE = 9900003;
    SOLANA_ERROR__INVARIANT_VIOLATION__DATA_PUBLISHER_CHANNEL_UNIMPLEMENTED = 9900004;
    SolanaErrorMessages = {
      [SOLANA_ERROR__ACCOUNTS__ACCOUNT_NOT_FOUND]: "Account not found at address: $address",
      [SOLANA_ERROR__ACCOUNTS__EXPECTED_ALL_ACCOUNTS_TO_BE_DECODED]: "Not all accounts were decoded. Encoded accounts found at addresses: $addresses.",
      [SOLANA_ERROR__ACCOUNTS__EXPECTED_DECODED_ACCOUNT]: "Expected decoded account at address: $address",
      [SOLANA_ERROR__ACCOUNTS__FAILED_TO_DECODE_ACCOUNT]: "Failed to decode account data at address: $address",
      [SOLANA_ERROR__ACCOUNTS__ONE_OR_MORE_ACCOUNTS_NOT_FOUND]: "Accounts not found at addresses: $addresses",
      [SOLANA_ERROR__ADDRESSES__FAILED_TO_FIND_VIABLE_PDA_BUMP_SEED]: "Unable to find a viable program address bump seed.",
      [SOLANA_ERROR__ADDRESSES__INVALID_BASE58_ENCODED_ADDRESS]: "$putativeAddress is not a base58-encoded address.",
      [SOLANA_ERROR__ADDRESSES__INVALID_BYTE_LENGTH]: "Expected base58 encoded address to decode to a byte array of length 32. Actual length: $actualLength.",
      [SOLANA_ERROR__ADDRESSES__INVALID_ED25519_PUBLIC_KEY]: "The `CryptoKey` must be an `Ed25519` public key.",
      [SOLANA_ERROR__ADDRESSES__INVALID_SEEDS_POINT_ON_CURVE]: "Invalid seeds; point must fall off the Ed25519 curve.",
      [SOLANA_ERROR__ADDRESSES__MALFORMED_PDA]: "Expected given program derived address to have the following format: [Address, ProgramDerivedAddressBump].",
      [SOLANA_ERROR__ADDRESSES__MAX_NUMBER_OF_PDA_SEEDS_EXCEEDED]: "A maximum of $maxSeeds seeds, including the bump seed, may be supplied when creating an address. Received: $actual.",
      [SOLANA_ERROR__ADDRESSES__MAX_PDA_SEED_LENGTH_EXCEEDED]: "The seed at index $index with length $actual exceeds the maximum length of $maxSeedLength bytes.",
      [SOLANA_ERROR__ADDRESSES__PDA_BUMP_SEED_OUT_OF_RANGE]: "Expected program derived address bump to be in the range [0, 255], got: $bump.",
      [SOLANA_ERROR__ADDRESSES__PDA_ENDS_WITH_PDA_MARKER]: "Program address cannot end with PDA marker.",
      [SOLANA_ERROR__ADDRESSES__STRING_LENGTH_OUT_OF_RANGE]: "Expected base58-encoded address string of length in the range [32, 44]. Actual length: $actualLength.",
      [SOLANA_ERROR__BLOCKHASH_STRING_LENGTH_OUT_OF_RANGE]: "Expected base58-encoded blockash string of length in the range [32, 44]. Actual length: $actualLength.",
      [SOLANA_ERROR__BLOCK_HEIGHT_EXCEEDED]: "The network has progressed past the last block for which this transaction could have been committed.",
      [SOLANA_ERROR__CODECS__CANNOT_DECODE_EMPTY_BYTE_ARRAY]: "Codec [$codecDescription] cannot decode empty byte arrays.",
      [SOLANA_ERROR__CODECS__CANNOT_USE_LEXICAL_VALUES_AS_ENUM_DISCRIMINATORS]: "Enum codec cannot use lexical values [$stringValues] as discriminators. Either remove all lexical values or set `useValuesAsDiscriminators` to `false`.",
      [SOLANA_ERROR__CODECS__ENCODED_BYTES_MUST_NOT_INCLUDE_SENTINEL]: "Sentinel [$hexSentinel] must not be present in encoded bytes [$hexEncodedBytes].",
      [SOLANA_ERROR__CODECS__ENCODER_DECODER_FIXED_SIZE_MISMATCH]: "Encoder and decoder must have the same fixed size, got [$encoderFixedSize] and [$decoderFixedSize].",
      [SOLANA_ERROR__CODECS__ENCODER_DECODER_MAX_SIZE_MISMATCH]: "Encoder and decoder must have the same max size, got [$encoderMaxSize] and [$decoderMaxSize].",
      [SOLANA_ERROR__CODECS__ENCODER_DECODER_SIZE_COMPATIBILITY_MISMATCH]: "Encoder and decoder must either both be fixed-size or variable-size.",
      [SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE]: "Enum discriminator out of range. Expected a number in [$formattedValidDiscriminators], got $discriminator.",
      [SOLANA_ERROR__CODECS__EXPECTED_FIXED_LENGTH]: "Expected a fixed-size codec, got a variable-size one.",
      [SOLANA_ERROR__CODECS__EXPECTED_POSITIVE_BYTE_LENGTH]: "Codec [$codecDescription] expected a positive byte length, got $bytesLength.",
      [SOLANA_ERROR__CODECS__EXPECTED_VARIABLE_LENGTH]: "Expected a variable-size codec, got a fixed-size one.",
      [SOLANA_ERROR__CODECS__EXPECTED_ZERO_VALUE_TO_MATCH_ITEM_FIXED_SIZE]: "Codec [$codecDescription] expected zero-value [$hexZeroValue] to have the same size as the provided fixed-size item [$expectedSize bytes].",
      [SOLANA_ERROR__CODECS__INVALID_BYTE_LENGTH]: "Codec [$codecDescription] expected $expected bytes, got $bytesLength.",
      [SOLANA_ERROR__CODECS__INVALID_CONSTANT]: "Expected byte array constant [$hexConstant] to be present in data [$hexData] at offset [$offset].",
      [SOLANA_ERROR__CODECS__INVALID_DISCRIMINATED_UNION_VARIANT]: "Invalid discriminated union variant. Expected one of [$variants], got $value.",
      [SOLANA_ERROR__CODECS__INVALID_ENUM_VARIANT]: "Invalid enum variant. Expected one of [$stringValues] or a number in [$formattedNumericalValues], got $variant.",
      [SOLANA_ERROR__CODECS__INVALID_LITERAL_UNION_VARIANT]: "Invalid literal union variant. Expected one of [$variants], got $value.",
      [SOLANA_ERROR__CODECS__INVALID_NUMBER_OF_ITEMS]: "Expected [$codecDescription] to have $expected items, got $actual.",
      [SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE]: "Invalid value $value for base $base with alphabet $alphabet.",
      [SOLANA_ERROR__CODECS__LITERAL_UNION_DISCRIMINATOR_OUT_OF_RANGE]: "Literal union discriminator out of range. Expected a number between $minRange and $maxRange, got $discriminator.",
      [SOLANA_ERROR__CODECS__NUMBER_OUT_OF_RANGE]: "Codec [$codecDescription] expected number to be in the range [$min, $max], got $value.",
      [SOLANA_ERROR__CODECS__OFFSET_OUT_OF_RANGE]: "Codec [$codecDescription] expected offset to be in the range [0, $bytesLength], got $offset.",
      [SOLANA_ERROR__CODECS__SENTINEL_MISSING_IN_DECODED_BYTES]: "Expected sentinel [$hexSentinel] to be present in decoded bytes [$hexDecodedBytes].",
      [SOLANA_ERROR__CODECS__UNION_VARIANT_OUT_OF_RANGE]: "Union variant out of range. Expected an index between $minRange and $maxRange, got $variant.",
      [SOLANA_ERROR__CRYPTO__RANDOM_VALUES_FUNCTION_UNIMPLEMENTED]: "No random values implementation could be found.",
      [SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_ALREADY_INITIALIZED]: "instruction requires an uninitialized account",
      [SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_FAILED]: "instruction tries to borrow reference for an account which is already borrowed",
      [SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_OUTSTANDING]: "instruction left account with an outstanding borrowed reference",
      [SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_SIZE_CHANGED]: "program other than the account's owner changed the size of the account data",
      [SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_TOO_SMALL]: "account data too small for instruction",
      [SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_EXECUTABLE]: "instruction expected an executable account",
      [SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_RENT_EXEMPT]: "An account does not have enough lamports to be rent-exempt",
      [SOLANA_ERROR__INSTRUCTION_ERROR__ARITHMETIC_OVERFLOW]: "Program arithmetic overflowed",
      [SOLANA_ERROR__INSTRUCTION_ERROR__BORSH_IO_ERROR]: "Failed to serialize or deserialize account data: $encodedData",
      [SOLANA_ERROR__INSTRUCTION_ERROR__BUILTIN_PROGRAMS_MUST_CONSUME_COMPUTE_UNITS]: "Builtin programs must consume compute units",
      [SOLANA_ERROR__INSTRUCTION_ERROR__CALL_DEPTH]: "Cross-program invocation call depth too deep",
      [SOLANA_ERROR__INSTRUCTION_ERROR__COMPUTATIONAL_BUDGET_EXCEEDED]: "Computational budget exceeded",
      [SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM]: "custom program error: #$code",
      [SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_INDEX]: "instruction contains duplicate accounts",
      [SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_OUT_OF_SYNC]: "instruction modifications of multiply-passed account differ",
      [SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_ACCOUNT_NOT_RENT_EXEMPT]: "executable accounts must be rent exempt",
      [SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_DATA_MODIFIED]: "instruction changed executable accounts data",
      [SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_LAMPORT_CHANGE]: "instruction changed the balance of an executable account",
      [SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_MODIFIED]: "instruction changed executable bit of an account",
      [SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_DATA_MODIFIED]: "instruction modified data of an account it does not own",
      [SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_LAMPORT_SPEND]: "instruction spent from the balance of an account it does not own",
      [SOLANA_ERROR__INSTRUCTION_ERROR__GENERIC_ERROR]: "generic instruction error",
      [SOLANA_ERROR__INSTRUCTION_ERROR__ILLEGAL_OWNER]: "Provided owner is not allowed",
      [SOLANA_ERROR__INSTRUCTION_ERROR__IMMUTABLE]: "Account is immutable",
      [SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_AUTHORITY]: "Incorrect authority provided",
      [SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_PROGRAM_ID]: "incorrect program id for instruction",
      [SOLANA_ERROR__INSTRUCTION_ERROR__INSUFFICIENT_FUNDS]: "insufficient funds for instruction",
      [SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_DATA]: "invalid account data for instruction",
      [SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_OWNER]: "Invalid account owner",
      [SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ARGUMENT]: "invalid program argument",
      [SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ERROR]: "program returned invalid error code",
      [SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_INSTRUCTION_DATA]: "invalid instruction data",
      [SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_REALLOC]: "Failed to reallocate account data",
      [SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_SEEDS]: "Provided seeds do not result in a valid address",
      [SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_DATA_ALLOCATIONS_EXCEEDED]: "Accounts data allocations exceeded the maximum allowed per transaction",
      [SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_EXCEEDED]: "Max accounts exceeded",
      [SOLANA_ERROR__INSTRUCTION_ERROR__MAX_INSTRUCTION_TRACE_LENGTH_EXCEEDED]: "Max instruction trace length exceeded",
      [SOLANA_ERROR__INSTRUCTION_ERROR__MAX_SEED_LENGTH_EXCEEDED]: "Length of the seed is too long for address generation",
      [SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_ACCOUNT]: "An account required by the instruction is missing",
      [SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_REQUIRED_SIGNATURE]: "missing required signature for instruction",
      [SOLANA_ERROR__INSTRUCTION_ERROR__MODIFIED_PROGRAM_ID]: "instruction illegally modified the program id of an account",
      [SOLANA_ERROR__INSTRUCTION_ERROR__NOT_ENOUGH_ACCOUNT_KEYS]: "insufficient account keys for instruction",
      [SOLANA_ERROR__INSTRUCTION_ERROR__PRIVILEGE_ESCALATION]: "Cross-program invocation with unauthorized signer or writable account",
      [SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_ENVIRONMENT_SETUP_FAILURE]: "Failed to create program execution environment",
      [SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPILE]: "Program failed to compile",
      [SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPLETE]: "Program failed to complete",
      [SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_DATA_MODIFIED]: "instruction modified data of a read-only account",
      [SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_LAMPORT_CHANGE]: "instruction changed the balance of a read-only account",
      [SOLANA_ERROR__INSTRUCTION_ERROR__REENTRANCY_NOT_ALLOWED]: "Cross-program invocation reentrancy not allowed for this instruction",
      [SOLANA_ERROR__INSTRUCTION_ERROR__RENT_EPOCH_MODIFIED]: "instruction modified rent epoch of an account",
      [SOLANA_ERROR__INSTRUCTION_ERROR__UNBALANCED_INSTRUCTION]: "sum of account balances before and after instruction do not match",
      [SOLANA_ERROR__INSTRUCTION_ERROR__UNINITIALIZED_ACCOUNT]: "instruction requires an initialized account",
      [SOLANA_ERROR__INSTRUCTION_ERROR__UNKNOWN]: "",
      [SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_PROGRAM_ID]: "Unsupported program id",
      [SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_SYSVAR]: "Unsupported sysvar",
      [SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_ACCOUNTS]: "The instruction does not have any accounts.",
      [SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_DATA]: "The instruction does not have any data.",
      [SOLANA_ERROR__INSTRUCTION__PROGRAM_ID_MISMATCH]: "Expected instruction to have progress address $expectedProgramAddress, got $actualProgramAddress.",
      [SOLANA_ERROR__INVALID_BLOCKHASH_BYTE_LENGTH]: "Expected base58 encoded blockhash to decode to a byte array of length 32. Actual length: $actualLength.",
      [SOLANA_ERROR__INVALID_NONCE]: "The nonce `$expectedNonceValue` is no longer valid. It has advanced to `$actualNonceValue`",
      [SOLANA_ERROR__INVARIANT_VIOLATION__CACHED_ABORTABLE_ITERABLE_CACHE_ENTRY_MISSING]: "Invariant violation: Found no abortable iterable cache entry for key `$cacheKey`. It should be impossible to hit this error; please file an issue at https://sola.na/web3invariant",
      [SOLANA_ERROR__INVARIANT_VIOLATION__DATA_PUBLISHER_CHANNEL_UNIMPLEMENTED]: "Invariant violation: This data publisher does not publish to the channel named `$channelName`. Supported channels include $supportedChannelNames.",
      [SOLANA_ERROR__INVARIANT_VIOLATION__SUBSCRIPTION_ITERATOR_MUST_NOT_POLL_BEFORE_RESOLVING_EXISTING_MESSAGE_PROMISE]: "Invariant violation: WebSocket message iterator state is corrupt; iterated without first resolving existing message promise. It should be impossible to hit this error; please file an issue at https://sola.na/web3invariant",
      [SOLANA_ERROR__INVARIANT_VIOLATION__SUBSCRIPTION_ITERATOR_STATE_MISSING]: "Invariant violation: WebSocket message iterator is missing state storage. It should be impossible to hit this error; please file an issue at https://sola.na/web3invariant",
      [SOLANA_ERROR__INVARIANT_VIOLATION__SWITCH_MUST_BE_EXHAUSTIVE]: "Invariant violation: Switch statement non-exhaustive. Received unexpected value `$unexpectedValue`. It should be impossible to hit this error; please file an issue at https://sola.na/web3invariant",
      [SOLANA_ERROR__JSON_RPC__INTERNAL_ERROR]: "JSON-RPC error: Internal JSON-RPC error ($__serverMessage)",
      [SOLANA_ERROR__JSON_RPC__INVALID_PARAMS]: "JSON-RPC error: Invalid method parameter(s) ($__serverMessage)",
      [SOLANA_ERROR__JSON_RPC__INVALID_REQUEST]: "JSON-RPC error: The JSON sent is not a valid `Request` object ($__serverMessage)",
      [SOLANA_ERROR__JSON_RPC__METHOD_NOT_FOUND]: "JSON-RPC error: The method does not exist / is not available ($__serverMessage)",
      [SOLANA_ERROR__JSON_RPC__PARSE_ERROR]: "JSON-RPC error: An error occurred on the server while parsing the JSON text ($__serverMessage)",
      [SOLANA_ERROR__JSON_RPC__SCAN_ERROR]: "$__serverMessage",
      [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_CLEANED_UP]: "$__serverMessage",
      [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_NOT_AVAILABLE]: "$__serverMessage",
      [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET]: "$__serverMessage",
      [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX]: "$__serverMessage",
      [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED]: "$__serverMessage",
      [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED]: "Minimum context slot has not been reached",
      [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NODE_UNHEALTHY]: "Node is unhealthy; behind by $numSlotsBehind slots",
      [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NO_SNAPSHOT]: "No snapshot",
      [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE]: "Transaction simulation failed",
      [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SLOT_SKIPPED]: "$__serverMessage",
      [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE]: "Transaction history is not available from this node",
      [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE]: "$__serverMessage",
      [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH]: "Transaction signature length mismatch",
      [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE]: "Transaction signature verification failure",
      [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION]: "$__serverMessage",
      [SOLANA_ERROR__KEYS__INVALID_KEY_PAIR_BYTE_LENGTH]: "Key pair bytes must be of length 64, got $byteLength.",
      [SOLANA_ERROR__KEYS__INVALID_PRIVATE_KEY_BYTE_LENGTH]: "Expected private key bytes with length 32. Actual length: $actualLength.",
      [SOLANA_ERROR__KEYS__INVALID_SIGNATURE_BYTE_LENGTH]: "Expected base58-encoded signature to decode to a byte array of length 64. Actual length: $actualLength.",
      [SOLANA_ERROR__KEYS__PUBLIC_KEY_MUST_MATCH_PRIVATE_KEY]: "The provided private key does not match the provided public key.",
      [SOLANA_ERROR__KEYS__SIGNATURE_STRING_LENGTH_OUT_OF_RANGE]: "Expected base58-encoded signature string of length in the range [64, 88]. Actual length: $actualLength.",
      [SOLANA_ERROR__LAMPORTS_OUT_OF_RANGE]: "Lamports value must be in the range [0, 2e64-1]",
      [SOLANA_ERROR__MALFORMED_BIGINT_STRING]: "`$value` cannot be parsed as a `BigInt`",
      [SOLANA_ERROR__MALFORMED_JSON_RPC_ERROR]: "$message",
      [SOLANA_ERROR__MALFORMED_NUMBER_STRING]: "`$value` cannot be parsed as a `Number`",
      [SOLANA_ERROR__NONCE_ACCOUNT_NOT_FOUND]: "No nonce account could be found at address `$nonceAccountAddress`",
      [SOLANA_ERROR__RPC_SUBSCRIPTIONS__CANNOT_CREATE_SUBSCRIPTION_PLAN]: "The notification name must end in 'Notifications' and the API must supply a subscription plan creator function for the notification '$notificationName'.",
      [SOLANA_ERROR__RPC_SUBSCRIPTIONS__CHANNEL_CLOSED_BEFORE_MESSAGE_BUFFERED]: "WebSocket was closed before payload could be added to the send buffer",
      [SOLANA_ERROR__RPC_SUBSCRIPTIONS__CHANNEL_CONNECTION_CLOSED]: "WebSocket connection closed",
      [SOLANA_ERROR__RPC_SUBSCRIPTIONS__CHANNEL_FAILED_TO_CONNECT]: "WebSocket failed to connect",
      [SOLANA_ERROR__RPC_SUBSCRIPTIONS__EXPECTED_SERVER_SUBSCRIPTION_ID]: "Failed to obtain a subscription id from the server",
      [SOLANA_ERROR__RPC__API_PLAN_MISSING_FOR_RPC_METHOD]: "Could not find an API plan for RPC method: `$method`",
      [SOLANA_ERROR__RPC__INTEGER_OVERFLOW]: "The $argumentLabel argument to the `$methodName` RPC method$optionalPathLabel was `$value`. This number is unsafe for use with the Solana JSON-RPC because it exceeds `Number.MAX_SAFE_INTEGER`.",
      [SOLANA_ERROR__RPC__TRANSPORT_HTTP_ERROR]: "HTTP error ($statusCode): $message",
      [SOLANA_ERROR__RPC__TRANSPORT_HTTP_HEADER_FORBIDDEN]: "HTTP header(s) forbidden: $headers. Learn more at https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name.",
      [SOLANA_ERROR__SIGNER__ADDRESS_CANNOT_HAVE_MULTIPLE_SIGNERS]: "Multiple distinct signers were identified for address `$address`. Please ensure that you are using the same signer instance for each address.",
      [SOLANA_ERROR__SIGNER__EXPECTED_KEY_PAIR_SIGNER]: "The provided value does not implement the `KeyPairSigner` interface",
      [SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_MODIFYING_SIGNER]: "The provided value does not implement the `MessageModifyingSigner` interface",
      [SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_PARTIAL_SIGNER]: "The provided value does not implement the `MessagePartialSigner` interface",
      [SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_SIGNER]: "The provided value does not implement any of the `MessageSigner` interfaces",
      [SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_MODIFYING_SIGNER]: "The provided value does not implement the `TransactionModifyingSigner` interface",
      [SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_PARTIAL_SIGNER]: "The provided value does not implement the `TransactionPartialSigner` interface",
      [SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SENDING_SIGNER]: "The provided value does not implement the `TransactionSendingSigner` interface",
      [SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SIGNER]: "The provided value does not implement any of the `TransactionSigner` interfaces",
      [SOLANA_ERROR__SIGNER__TRANSACTION_CANNOT_HAVE_MULTIPLE_SENDING_SIGNERS]: "More than one `TransactionSendingSigner` was identified.",
      [SOLANA_ERROR__SIGNER__TRANSACTION_SENDING_SIGNER_MISSING]: "No `TransactionSendingSigner` was identified. Please provide a valid `ITransactionWithSingleSendingSigner` transaction.",
      [SOLANA_ERROR__SIGNER__WALLET_MULTISIGN_UNIMPLEMENTED]: "Wallet account signers do not support signing multiple messages/transactions in a single operation",
      [SOLANA_ERROR__SUBTLE_CRYPTO__CANNOT_EXPORT_NON_EXTRACTABLE_KEY]: "Cannot export a non-extractable key.",
      [SOLANA_ERROR__SUBTLE_CRYPTO__DIGEST_UNIMPLEMENTED]: "No digest implementation could be found.",
      [SOLANA_ERROR__SUBTLE_CRYPTO__DISALLOWED_IN_INSECURE_CONTEXT]: "Cryptographic operations are only allowed in secure browser contexts. Read more here: https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts.",
      [SOLANA_ERROR__SUBTLE_CRYPTO__ED25519_ALGORITHM_UNIMPLEMENTED]: "This runtime does not support the generation of Ed25519 key pairs.\n\nInstall @solana/webcrypto-ed25519-polyfill and call its `install` function before generating keys in environments that do not support Ed25519.\n\nFor a list of runtimes that currently support Ed25519 operations, visit https://github.com/WICG/webcrypto-secure-curves/issues/20.",
      [SOLANA_ERROR__SUBTLE_CRYPTO__EXPORT_FUNCTION_UNIMPLEMENTED]: "No signature verification implementation could be found.",
      [SOLANA_ERROR__SUBTLE_CRYPTO__GENERATE_FUNCTION_UNIMPLEMENTED]: "No key generation implementation could be found.",
      [SOLANA_ERROR__SUBTLE_CRYPTO__SIGN_FUNCTION_UNIMPLEMENTED]: "No signing implementation could be found.",
      [SOLANA_ERROR__SUBTLE_CRYPTO__VERIFY_FUNCTION_UNIMPLEMENTED]: "No key export implementation could be found.",
      [SOLANA_ERROR__TIMESTAMP_OUT_OF_RANGE]: "Timestamp value must be in the range [-(2n ** 63n), (2n ** 63n) - 1]. `$value` given",
      [SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_BORROW_OUTSTANDING]: "Transaction processing left an account with an outstanding borrowed reference",
      [SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_IN_USE]: "Account in use",
      [SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_LOADED_TWICE]: "Account loaded twice",
      [SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_NOT_FOUND]: "Attempt to debit an account but found no record of a prior credit.",
      [SOLANA_ERROR__TRANSACTION_ERROR__ADDRESS_LOOKUP_TABLE_NOT_FOUND]: "Transaction loads an address table account that doesn't exist",
      [SOLANA_ERROR__TRANSACTION_ERROR__ALREADY_PROCESSED]: "This transaction has already been processed",
      [SOLANA_ERROR__TRANSACTION_ERROR__BLOCKHASH_NOT_FOUND]: "Blockhash not found",
      [SOLANA_ERROR__TRANSACTION_ERROR__CALL_CHAIN_TOO_DEEP]: "Loader call chain is too deep",
      [SOLANA_ERROR__TRANSACTION_ERROR__CLUSTER_MAINTENANCE]: "Transactions are currently disabled due to cluster maintenance",
      [SOLANA_ERROR__TRANSACTION_ERROR__DUPLICATE_INSTRUCTION]: "Transaction contains a duplicate instruction ($index) that is not allowed",
      [SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_FEE]: "Insufficient funds for fee",
      [SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_RENT]: "Transaction results in an account ($accountIndex) with insufficient funds for rent",
      [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_FOR_FEE]: "This account may not be used to pay transaction fees",
      [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_INDEX]: "Transaction contains an invalid account reference",
      [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_DATA]: "Transaction loads an address table account with invalid data",
      [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_INDEX]: "Transaction address table lookup uses an invalid index",
      [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_OWNER]: "Transaction loads an address table account with an invalid owner",
      [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_LOADED_ACCOUNTS_DATA_SIZE_LIMIT]: "LoadedAccountsDataSizeLimit set for transaction must be greater than 0.",
      [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_PROGRAM_FOR_EXECUTION]: "This program may not be used for executing instructions",
      [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_RENT_PAYING_ACCOUNT]: "Transaction leaves an account with a lower balance than rent-exempt minimum",
      [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_WRITABLE_ACCOUNT]: "Transaction loads a writable account that cannot be written",
      [SOLANA_ERROR__TRANSACTION_ERROR__MAX_LOADED_ACCOUNTS_DATA_SIZE_EXCEEDED]: "Transaction exceeded max loaded accounts data size cap",
      [SOLANA_ERROR__TRANSACTION_ERROR__MISSING_SIGNATURE_FOR_FEE]: "Transaction requires a fee but has no signature present",
      [SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_ACCOUNT_NOT_FOUND]: "Attempt to load a program that does not exist",
      [SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_EXECUTION_TEMPORARILY_RESTRICTED]: "Execution of the program referenced by account at index $accountIndex is temporarily restricted.",
      [SOLANA_ERROR__TRANSACTION_ERROR__RESANITIZATION_NEEDED]: "ResanitizationNeeded",
      [SOLANA_ERROR__TRANSACTION_ERROR__SANITIZE_FAILURE]: "Transaction failed to sanitize accounts offsets correctly",
      [SOLANA_ERROR__TRANSACTION_ERROR__SIGNATURE_FAILURE]: "Transaction did not pass signature verification",
      [SOLANA_ERROR__TRANSACTION_ERROR__TOO_MANY_ACCOUNT_LOCKS]: "Transaction locked too many accounts",
      [SOLANA_ERROR__TRANSACTION_ERROR__UNBALANCED_TRANSACTION]: "Sum of account balances before and after transaction do not match",
      [SOLANA_ERROR__TRANSACTION_ERROR__UNKNOWN]: "The transaction failed with the error `$errorName`",
      [SOLANA_ERROR__TRANSACTION_ERROR__UNSUPPORTED_VERSION]: "Transaction version is unsupported",
      [SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_BLOCK_LIMIT]: "Transaction would exceed account data limit within the block",
      [SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_TOTAL_LIMIT]: "Transaction would exceed total account data limit",
      [SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_ACCOUNT_COST_LIMIT]: "Transaction would exceed max account limit within the block",
      [SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_BLOCK_COST_LIMIT]: "Transaction would exceed max Block Cost Limit",
      [SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_VOTE_COST_LIMIT]: "Transaction would exceed max Vote Cost Limit",
      [SOLANA_ERROR__TRANSACTION__ADDRESSES_CANNOT_SIGN_TRANSACTION]: "Attempted to sign a transaction with an address that is not a signer for it",
      [SOLANA_ERROR__TRANSACTION__ADDRESS_MISSING]: "Transaction is missing an address at index: $index.",
      [SOLANA_ERROR__TRANSACTION__CANNOT_ENCODE_WITH_EMPTY_SIGNATURES]: "Transaction has no expected signers therefore it cannot be encoded",
      [SOLANA_ERROR__TRANSACTION__EXPECTED_BLOCKHASH_LIFETIME]: "Transaction does not have a blockhash lifetime",
      [SOLANA_ERROR__TRANSACTION__EXPECTED_NONCE_LIFETIME]: "Transaction is not a durable nonce transaction",
      [SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_CONTENTS_MISSING]: "Contents of these address lookup tables unknown: $lookupTableAddresses",
      [SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_INDEX_OUT_OF_RANGE]: "Lookup of address at index $highestRequestedIndex failed for lookup table `$lookupTableAddress`. Highest known index is $highestKnownIndex. The lookup table may have been extended since its contents were retrieved",
      [SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_FEE_PAYER_MISSING]: "No fee payer set in CompiledTransaction",
      [SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_INSTRUCTION_PROGRAM_ADDRESS_NOT_FOUND]: "Could not find program address at index $index",
      [SOLANA_ERROR__TRANSACTION__FAILED_TO_ESTIMATE_COMPUTE_LIMIT]: "Failed to estimate the compute unit consumption for this transaction message. This is likely because simulating the transaction failed. Inspect the `cause` property of this error to learn more",
      [SOLANA_ERROR__TRANSACTION__FAILED_WHEN_SIMULATING_TO_ESTIMATE_COMPUTE_LIMIT]: "Transaction failed when it was simulated in order to estimate the compute unit consumption. The compute unit estimate provided is for a transaction that failed when simulated and may not be representative of the compute units this transaction would consume if successful. Inspect the `cause` property of this error to learn more",
      [SOLANA_ERROR__TRANSACTION__FEE_PAYER_MISSING]: "Transaction is missing a fee payer.",
      [SOLANA_ERROR__TRANSACTION__FEE_PAYER_SIGNATURE_MISSING]: "Could not determine this transaction's signature. Make sure that the transaction has been signed by its fee payer.",
      [SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_FIRST_INSTRUCTION_MUST_BE_ADVANCE_NONCE]: "Transaction first instruction is not advance nonce account instruction.",
      [SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_INSTRUCTIONS_MISSING]: "Transaction with no instructions cannot be durable nonce transaction.",
      [SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_CANNOT_PAY_FEES]: "This transaction includes an address (`$programAddress`) which is both invoked and set as the fee payer. Program addresses may not pay fees",
      [SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_MUST_NOT_BE_WRITABLE]: "This transaction includes an address (`$programAddress`) which is both invoked and marked writable. Program addresses may not be writable",
      [SOLANA_ERROR__TRANSACTION__MESSAGE_SIGNATURES_MISMATCH]: "The transaction message expected the transaction to have $signerAddressesLength signatures, got $signaturesLength.",
      [SOLANA_ERROR__TRANSACTION__SIGNATURES_MISSING]: "Transaction is missing signatures for addresses: $addresses.",
      [SOLANA_ERROR__TRANSACTION__VERSION_NUMBER_OUT_OF_RANGE]: "Transaction version must be in the range [0, 127]. `$actualVersion` given"
    };
    START_INDEX = "i";
    TYPE = "t";
    SolanaError = class extends Error {
      constructor(...[code, contextAndErrorOptions]) {
        let context;
        let errorOptions;
        if (contextAndErrorOptions) {
          const { cause, ...contextRest } = contextAndErrorOptions;
          if (cause) {
            errorOptions = { cause };
          }
          if (Object.keys(contextRest).length > 0) {
            context = contextRest;
          }
        }
        const message = getErrorMessage(code, context);
        super(message, errorOptions);
        /**
         * Indicates the root cause of this {@link SolanaError}, if any.
         *
         * For example, a transaction error might have an instruction error as its root cause. In this
         * case, you will be able to access the instruction error on the transaction error as `cause`.
         */
        __publicField(this, "cause", this.cause);
        /**
         * Contains context that can assist in understanding or recovering from a {@link SolanaError}.
         */
        __publicField(this, "context");
        this.context = {
          __code: code,
          ...context
        };
        this.name = "SolanaError";
      }
    };
  }
});

// node_modules/@solana/codecs-core/dist/index.browser.mjs
function getEncodedSize(value, encoder) {
  return "fixedSize" in encoder ? encoder.fixedSize : encoder.getSizeFromValue(value);
}
function createEncoder(encoder) {
  return Object.freeze({
    ...encoder,
    encode: (value) => {
      const bytes = new Uint8Array(getEncodedSize(value, encoder));
      encoder.write(value, bytes, 0);
      return bytes;
    }
  });
}
function createDecoder(decoder) {
  return Object.freeze({
    ...decoder,
    decode: (bytes, offset2 = 0) => decoder.read(bytes, offset2)[0]
  });
}
function isFixedSize(codec) {
  return "fixedSize" in codec && typeof codec.fixedSize === "number";
}
function combineCodec(encoder, decoder) {
  if (isFixedSize(encoder) !== isFixedSize(decoder)) {
    throw new SolanaError(SOLANA_ERROR__CODECS__ENCODER_DECODER_SIZE_COMPATIBILITY_MISMATCH);
  }
  if (isFixedSize(encoder) && isFixedSize(decoder) && encoder.fixedSize !== decoder.fixedSize) {
    throw new SolanaError(SOLANA_ERROR__CODECS__ENCODER_DECODER_FIXED_SIZE_MISMATCH, {
      decoderFixedSize: decoder.fixedSize,
      encoderFixedSize: encoder.fixedSize
    });
  }
  if (!isFixedSize(encoder) && !isFixedSize(decoder) && encoder.maxSize !== decoder.maxSize) {
    throw new SolanaError(SOLANA_ERROR__CODECS__ENCODER_DECODER_MAX_SIZE_MISMATCH, {
      decoderMaxSize: decoder.maxSize,
      encoderMaxSize: encoder.maxSize
    });
  }
  return {
    ...decoder,
    ...encoder,
    decode: decoder.decode,
    encode: encoder.encode,
    read: decoder.read,
    write: encoder.write
  };
}
function assertByteArrayIsNotEmptyForCodec(codecDescription, bytes, offset2 = 0) {
  if (bytes.length - offset2 <= 0) {
    throw new SolanaError(SOLANA_ERROR__CODECS__CANNOT_DECODE_EMPTY_BYTE_ARRAY, {
      codecDescription
    });
  }
}
function assertByteArrayHasEnoughBytesForCodec(codecDescription, expected, bytes, offset2 = 0) {
  const bytesLength = bytes.length - offset2;
  if (bytesLength < expected) {
    throw new SolanaError(SOLANA_ERROR__CODECS__INVALID_BYTE_LENGTH, {
      bytesLength,
      codecDescription,
      expected
    });
  }
}
var init_index_browser2 = __esm({
  "node_modules/@solana/codecs-core/dist/index.browser.mjs"() {
    init_index_browser();
  }
});

// node_modules/@solana/codecs-numbers/dist/index.browser.mjs
function assertNumberIsBetweenForCodec(codecDescription, min, max, value) {
  if (value < min || value > max) {
    throw new SolanaError(SOLANA_ERROR__CODECS__NUMBER_OUT_OF_RANGE, {
      codecDescription,
      max,
      min,
      value
    });
  }
}
function isLittleEndian(config) {
  return (config == null ? void 0 : config.endian) === 1 ? false : true;
}
function numberEncoderFactory(input) {
  return createEncoder({
    fixedSize: input.size,
    write(value, bytes, offset2) {
      if (input.range) {
        assertNumberIsBetweenForCodec(input.name, input.range[0], input.range[1], value);
      }
      const arrayBuffer = new ArrayBuffer(input.size);
      input.set(new DataView(arrayBuffer), value, isLittleEndian(input.config));
      bytes.set(new Uint8Array(arrayBuffer), offset2);
      return offset2 + input.size;
    }
  });
}
function numberDecoderFactory(input) {
  return createDecoder({
    fixedSize: input.size,
    read(bytes, offset2 = 0) {
      assertByteArrayIsNotEmptyForCodec(input.name, bytes, offset2);
      assertByteArrayHasEnoughBytesForCodec(input.name, input.size, bytes, offset2);
      const view = new DataView(toArrayBuffer(bytes, offset2, input.size));
      return [input.get(view, isLittleEndian(input.config)), offset2 + input.size];
    }
  });
}
function toArrayBuffer(bytes, offset2, length) {
  const bytesOffset = bytes.byteOffset + (offset2 ?? 0);
  const bytesLength = length ?? bytes.byteLength;
  return bytes.buffer.slice(bytesOffset, bytesOffset + bytesLength);
}
var Endian, getU64Encoder, getU64Decoder, getU64Codec;
var init_index_browser3 = __esm({
  "node_modules/@solana/codecs-numbers/dist/index.browser.mjs"() {
    init_index_browser();
    init_index_browser2();
    Endian = ((Endian2) => {
      Endian2[Endian2["Little"] = 0] = "Little";
      Endian2[Endian2["Big"] = 1] = "Big";
      return Endian2;
    })(Endian || {});
    getU64Encoder = (config = {}) => numberEncoderFactory({
      config,
      name: "u64",
      range: [0n, BigInt("0xffffffffffffffff")],
      set: (view, value, le) => view.setBigUint64(0, BigInt(value), le),
      size: 8
    });
    getU64Decoder = (config = {}) => numberDecoderFactory({
      config,
      get: (view, le) => view.getBigUint64(0, le),
      name: "u64",
      size: 8
    });
    getU64Codec = (config = {}) => combineCodec(getU64Encoder(config), getU64Decoder(config));
  }
});

// node_modules/@solana/web3.js/node_modules/superstruct/dist/index.mjs
function isIterable(x) {
  return isObject(x) && typeof x[Symbol.iterator] === "function";
}
function isObject(x) {
  return typeof x === "object" && x != null;
}
function isNonArrayObject(x) {
  return isObject(x) && !Array.isArray(x);
}
function print(value) {
  if (typeof value === "symbol") {
    return value.toString();
  }
  return typeof value === "string" ? JSON.stringify(value) : `${value}`;
}
function shiftIterator(input) {
  const { done, value } = input.next();
  return done ? void 0 : value;
}
function toFailure(result, context, struct2, value) {
  if (result === true) {
    return;
  } else if (result === false) {
    result = {};
  } else if (typeof result === "string") {
    result = { message: result };
  }
  const { path, branch } = context;
  const { type: type2 } = struct2;
  const { refinement, message = `Expected a value of type \`${type2}\`${refinement ? ` with refinement \`${refinement}\`` : ""}, but received: \`${print(value)}\`` } = result;
  return {
    value,
    type: type2,
    refinement,
    key: path[path.length - 1],
    path,
    branch,
    ...result,
    message
  };
}
function* toFailures(result, context, struct2, value) {
  if (!isIterable(result)) {
    result = [result];
  }
  for (const r of result) {
    const failure = toFailure(r, context, struct2, value);
    if (failure) {
      yield failure;
    }
  }
}
function* run(value, struct2, options = {}) {
  const { path = [], branch = [value], coerce: coerce2 = false, mask: mask2 = false } = options;
  const ctx = { path, branch, mask: mask2 };
  if (coerce2) {
    value = struct2.coercer(value, ctx);
  }
  let status = "valid";
  for (const failure of struct2.validator(value, ctx)) {
    failure.explanation = options.message;
    status = "not_valid";
    yield [failure, void 0];
  }
  for (let [k, v, s] of struct2.entries(value, ctx)) {
    const ts = run(v, s, {
      path: k === void 0 ? path : [...path, k],
      branch: k === void 0 ? branch : [...branch, v],
      coerce: coerce2,
      mask: mask2,
      message: options.message
    });
    for (const t of ts) {
      if (t[0]) {
        status = t[0].refinement != null ? "not_refined" : "not_valid";
        yield [t[0], void 0];
      } else if (coerce2) {
        v = t[1];
        if (k === void 0) {
          value = v;
        } else if (value instanceof Map) {
          value.set(k, v);
        } else if (value instanceof Set) {
          value.add(v);
        } else if (isObject(value)) {
          if (v !== void 0 || k in value)
            value[k] = v;
        }
      }
    }
  }
  if (status !== "not_valid") {
    for (const failure of struct2.refiner(value, ctx)) {
      failure.explanation = options.message;
      status = "not_refined";
      yield [failure, void 0];
    }
  }
  if (status === "valid") {
    yield [void 0, value];
  }
}
function assert(value, struct2, message) {
  const result = validate(value, struct2, { message });
  if (result[0]) {
    throw result[0];
  }
}
function create(value, struct2, message) {
  const result = validate(value, struct2, { coerce: true, message });
  if (result[0]) {
    throw result[0];
  } else {
    return result[1];
  }
}
function mask(value, struct2, message) {
  const result = validate(value, struct2, { coerce: true, mask: true, message });
  if (result[0]) {
    throw result[0];
  } else {
    return result[1];
  }
}
function is(value, struct2) {
  const result = validate(value, struct2);
  return !result[0];
}
function validate(value, struct2, options = {}) {
  const tuples = run(value, struct2, options);
  const tuple2 = shiftIterator(tuples);
  if (tuple2[0]) {
    const error = new StructError(tuple2[0], function* () {
      for (const t of tuples) {
        if (t[0]) {
          yield t[0];
        }
      }
    });
    return [error, void 0];
  } else {
    const v = tuple2[1];
    return [void 0, v];
  }
}
function define2(name, validator) {
  return new Struct({ type: name, schema: null, validator });
}
function any() {
  return define2("any", () => true);
}
function array(Element) {
  return new Struct({
    type: "array",
    schema: Element,
    *entries(value) {
      if (Element && Array.isArray(value)) {
        for (const [i, v] of value.entries()) {
          yield [i, v, Element];
        }
      }
    },
    coercer(value) {
      return Array.isArray(value) ? value.slice() : value;
    },
    validator(value) {
      return Array.isArray(value) || `Expected an array value, but received: ${print(value)}`;
    }
  });
}
function boolean() {
  return define2("boolean", (value) => {
    return typeof value === "boolean";
  });
}
function instance(Class) {
  return define2("instance", (value) => {
    return value instanceof Class || `Expected a \`${Class.name}\` instance, but received: ${print(value)}`;
  });
}
function literal(constant) {
  const description = print(constant);
  const t = typeof constant;
  return new Struct({
    type: "literal",
    schema: t === "string" || t === "number" || t === "boolean" ? constant : null,
    validator(value) {
      return value === constant || `Expected the literal \`${description}\`, but received: ${print(value)}`;
    }
  });
}
function never() {
  return define2("never", () => false);
}
function nullable(struct2) {
  return new Struct({
    ...struct2,
    validator: (value, ctx) => value === null || struct2.validator(value, ctx),
    refiner: (value, ctx) => value === null || struct2.refiner(value, ctx)
  });
}
function number() {
  return define2("number", (value) => {
    return typeof value === "number" && !isNaN(value) || `Expected a number, but received: ${print(value)}`;
  });
}
function optional(struct2) {
  return new Struct({
    ...struct2,
    validator: (value, ctx) => value === void 0 || struct2.validator(value, ctx),
    refiner: (value, ctx) => value === void 0 || struct2.refiner(value, ctx)
  });
}
function record(Key, Value) {
  return new Struct({
    type: "record",
    schema: null,
    *entries(value) {
      if (isObject(value)) {
        for (const k in value) {
          const v = value[k];
          yield [k, k, Key];
          yield [k, v, Value];
        }
      }
    },
    validator(value) {
      return isNonArrayObject(value) || `Expected an object, but received: ${print(value)}`;
    },
    coercer(value) {
      return isNonArrayObject(value) ? { ...value } : value;
    }
  });
}
function string() {
  return define2("string", (value) => {
    return typeof value === "string" || `Expected a string, but received: ${print(value)}`;
  });
}
function tuple(Structs) {
  const Never = never();
  return new Struct({
    type: "tuple",
    schema: null,
    *entries(value) {
      if (Array.isArray(value)) {
        const length = Math.max(Structs.length, value.length);
        for (let i = 0; i < length; i++) {
          yield [i, value[i], Structs[i] || Never];
        }
      }
    },
    validator(value) {
      return Array.isArray(value) || `Expected an array, but received: ${print(value)}`;
    },
    coercer(value) {
      return Array.isArray(value) ? value.slice() : value;
    }
  });
}
function type(schema) {
  const keys = Object.keys(schema);
  return new Struct({
    type: "type",
    schema,
    *entries(value) {
      if (isObject(value)) {
        for (const k of keys) {
          yield [k, value[k], schema[k]];
        }
      }
    },
    validator(value) {
      return isNonArrayObject(value) || `Expected an object, but received: ${print(value)}`;
    },
    coercer(value) {
      return isNonArrayObject(value) ? { ...value } : value;
    }
  });
}
function union(Structs) {
  const description = Structs.map((s) => s.type).join(" | ");
  return new Struct({
    type: "union",
    schema: null,
    coercer(value, ctx) {
      for (const S of Structs) {
        const [error, coerced] = S.validate(value, {
          coerce: true,
          mask: ctx.mask
        });
        if (!error) {
          return coerced;
        }
      }
      return value;
    },
    validator(value, ctx) {
      const failures = [];
      for (const S of Structs) {
        const [...tuples] = run(value, S, ctx);
        const [first] = tuples;
        if (!first[0]) {
          return [];
        } else {
          for (const [failure] of tuples) {
            if (failure) {
              failures.push(failure);
            }
          }
        }
      }
      return [
        `Expected the value to satisfy a union of \`${description}\`, but received: ${print(value)}`,
        ...failures
      ];
    }
  });
}
function unknown() {
  return define2("unknown", () => true);
}
function coerce(struct2, condition, coercer) {
  return new Struct({
    ...struct2,
    coercer: (value, ctx) => {
      return is(value, condition) ? struct2.coercer(coercer(value, ctx), ctx) : struct2.coercer(value, ctx);
    }
  });
}
var StructError, Struct;
var init_dist = __esm({
  "node_modules/@solana/web3.js/node_modules/superstruct/dist/index.mjs"() {
    StructError = class extends TypeError {
      constructor(failure, failures) {
        let cached;
        const { message, explanation, ...rest } = failure;
        const { path } = failure;
        const msg = path.length === 0 ? message : `At path: ${path.join(".")} -- ${message}`;
        super(explanation ?? msg);
        if (explanation != null)
          this.cause = msg;
        Object.assign(this, rest);
        this.name = this.constructor.name;
        this.failures = () => {
          return cached ?? (cached = [failure, ...failures()]);
        };
      }
    };
    Struct = class {
      constructor(props) {
        const { type: type2, schema, validator, refiner, coercer = (value) => value, entries = function* () {
        } } = props;
        this.type = type2;
        this.schema = schema;
        this.entries = entries;
        this.coercer = coercer;
        if (validator) {
          this.validator = (value, context) => {
            const result = validator(value, context);
            return toFailures(result, context, this, value);
          };
        } else {
          this.validator = () => [];
        }
        if (refiner) {
          this.refiner = (value, context) => {
            const result = refiner(value, context);
            return toFailures(result, context, this, value);
          };
        } else {
          this.refiner = () => [];
        }
      }
      /**
       * Assert that a value passes the struct's validation, throwing if it doesn't.
       */
      assert(value, message) {
        return assert(value, this, message);
      }
      /**
       * Create a value with the struct's coercion logic, then validate it.
       */
      create(value, message) {
        return create(value, this, message);
      }
      /**
       * Check if a value passes the struct's validation.
       */
      is(value) {
        return is(value, this);
      }
      /**
       * Mask a value, coercing and validating it, but returning only the subset of
       * properties defined by the struct's schema. Masking applies recursively to
       * props of `object` structs only.
       */
      mask(value, message) {
        return mask(value, this, message);
      }
      /**
       * Validate a value with the struct's validation logic, returning a tuple
       * representing the result.
       *
       * You may optionally pass `true` for the `coerce` argument to coerce
       * the value before attempting to validate it. If you do, the result will
       * contain the coerced result when successful. Also, `mask` will turn on
       * masking of the unknown `object` props recursively if passed.
       */
      validate(value, options = {}) {
        return validate(value, this, options);
      }
    };
  }
});

// node_modules/uuid/dist/esm-browser/rng.js
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== "undefined" && typeof msCrypto.getRandomValues === "function" && msCrypto.getRandomValues.bind(msCrypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}
var getRandomValues, rnds8;
var init_rng = __esm({
  "node_modules/uuid/dist/esm-browser/rng.js"() {
    rnds8 = new Uint8Array(16);
  }
});

// node_modules/uuid/dist/esm-browser/regex.js
var regex_default;
var init_regex = __esm({
  "node_modules/uuid/dist/esm-browser/regex.js"() {
    regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
  }
});

// node_modules/uuid/dist/esm-browser/validate.js
function validate2(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default;
var init_validate = __esm({
  "node_modules/uuid/dist/esm-browser/validate.js"() {
    init_regex();
    validate_default = validate2;
  }
});

// node_modules/uuid/dist/esm-browser/stringify.js
function stringify(arr) {
  var offset2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  var uuid = (byteToHex[arr[offset2 + 0]] + byteToHex[arr[offset2 + 1]] + byteToHex[arr[offset2 + 2]] + byteToHex[arr[offset2 + 3]] + "-" + byteToHex[arr[offset2 + 4]] + byteToHex[arr[offset2 + 5]] + "-" + byteToHex[arr[offset2 + 6]] + byteToHex[arr[offset2 + 7]] + "-" + byteToHex[arr[offset2 + 8]] + byteToHex[arr[offset2 + 9]] + "-" + byteToHex[arr[offset2 + 10]] + byteToHex[arr[offset2 + 11]] + byteToHex[arr[offset2 + 12]] + byteToHex[arr[offset2 + 13]] + byteToHex[arr[offset2 + 14]] + byteToHex[arr[offset2 + 15]]).toLowerCase();
  if (!validate_default(uuid)) {
    throw TypeError("Stringified UUID is invalid");
  }
  return uuid;
}
var byteToHex, i, stringify_default;
var init_stringify = __esm({
  "node_modules/uuid/dist/esm-browser/stringify.js"() {
    init_validate();
    byteToHex = [];
    for (i = 0; i < 256; ++i) {
      byteToHex.push((i + 256).toString(16).substr(1));
    }
    stringify_default = stringify;
  }
});

// node_modules/uuid/dist/esm-browser/v1.js
function v1(options, buf, offset2) {
  var i = buf && offset2 || 0;
  var b = buf || new Array(16);
  options = options || {};
  var node = options.node || _nodeId;
  var clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
  if (node == null || clockseq == null) {
    var seedBytes = options.random || (options.rng || rng)();
    if (node == null) {
      node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }
    if (clockseq == null) {
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
    }
  }
  var msecs = options.msecs !== void 0 ? options.msecs : Date.now();
  var nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
  if (dt < 0 && options.clockseq === void 0) {
    clockseq = clockseq + 1 & 16383;
  }
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
    nsecs = 0;
  }
  if (nsecs >= 1e4) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }
  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;
  msecs += 122192928e5;
  var tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
  b[i++] = tl >>> 24 & 255;
  b[i++] = tl >>> 16 & 255;
  b[i++] = tl >>> 8 & 255;
  b[i++] = tl & 255;
  var tmh = msecs / 4294967296 * 1e4 & 268435455;
  b[i++] = tmh >>> 8 & 255;
  b[i++] = tmh & 255;
  b[i++] = tmh >>> 24 & 15 | 16;
  b[i++] = tmh >>> 16 & 255;
  b[i++] = clockseq >>> 8 | 128;
  b[i++] = clockseq & 255;
  for (var n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }
  return buf || stringify_default(b);
}
var _nodeId, _clockseq, _lastMSecs, _lastNSecs, v1_default;
var init_v1 = __esm({
  "node_modules/uuid/dist/esm-browser/v1.js"() {
    init_rng();
    init_stringify();
    _lastMSecs = 0;
    _lastNSecs = 0;
    v1_default = v1;
  }
});

// node_modules/uuid/dist/esm-browser/parse.js
function parse(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  var v;
  var arr = new Uint8Array(16);
  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 255;
  arr[2] = v >>> 8 & 255;
  arr[3] = v & 255;
  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 255;
  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 255;
  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 255;
  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
  arr[11] = v / 4294967296 & 255;
  arr[12] = v >>> 24 & 255;
  arr[13] = v >>> 16 & 255;
  arr[14] = v >>> 8 & 255;
  arr[15] = v & 255;
  return arr;
}
var parse_default;
var init_parse = __esm({
  "node_modules/uuid/dist/esm-browser/parse.js"() {
    init_validate();
    parse_default = parse;
  }
});

// node_modules/uuid/dist/esm-browser/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  var bytes = [];
  for (var i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
function v35_default(name, version2, hashfunc) {
  function generateUUID(value, namespace, buf, offset2) {
    if (typeof value === "string") {
      value = stringToBytes(value);
    }
    if (typeof namespace === "string") {
      namespace = parse_default(namespace);
    }
    if (namespace.length !== 16) {
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    }
    var bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 15 | version2;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      offset2 = offset2 || 0;
      for (var i = 0; i < 16; ++i) {
        buf[offset2 + i] = bytes[i];
      }
      return buf;
    }
    return stringify_default(bytes);
  }
  try {
    generateUUID.name = name;
  } catch (err) {
  }
  generateUUID.DNS = DNS;
  generateUUID.URL = URL2;
  return generateUUID;
}
var DNS, URL2;
var init_v35 = __esm({
  "node_modules/uuid/dist/esm-browser/v35.js"() {
    init_stringify();
    init_parse();
    DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
  }
});

// node_modules/uuid/dist/esm-browser/md5.js
function md5(bytes) {
  if (typeof bytes === "string") {
    var msg = unescape(encodeURIComponent(bytes));
    bytes = new Uint8Array(msg.length);
    for (var i = 0; i < msg.length; ++i) {
      bytes[i] = msg.charCodeAt(i);
    }
  }
  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
function md5ToHexEncodedArray(input) {
  var output = [];
  var length32 = input.length * 32;
  var hexTab = "0123456789abcdef";
  for (var i = 0; i < length32; i += 8) {
    var x = input[i >> 5] >>> i % 32 & 255;
    var hex = parseInt(hexTab.charAt(x >>> 4 & 15) + hexTab.charAt(x & 15), 16);
    output.push(hex);
  }
  return output;
}
function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
function wordsToMd5(x, len) {
  x[len >> 5] |= 128 << len % 32;
  x[getOutputLength(len) - 1] = len;
  var a = 1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d = 271733878;
  for (var i = 0; i < x.length; i += 16) {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }
  return [a, b, c, d];
}
function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }
  var length8 = input.length * 8;
  var output = new Uint32Array(getOutputLength(length8));
  for (var i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input[i / 8] & 255) << i % 32;
  }
  return output;
}
function safeAdd(x, y) {
  var lsw = (x & 65535) + (y & 65535);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 65535;
}
function bitRotateLeft(num2, cnt) {
  return num2 << cnt | num2 >>> 32 - cnt;
}
function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}
function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}
function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}
function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}
function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}
var md5_default;
var init_md5 = __esm({
  "node_modules/uuid/dist/esm-browser/md5.js"() {
    md5_default = md5;
  }
});

// node_modules/uuid/dist/esm-browser/v3.js
var v3, v3_default;
var init_v3 = __esm({
  "node_modules/uuid/dist/esm-browser/v3.js"() {
    init_v35();
    init_md5();
    v3 = v35_default("v3", 48, md5_default);
    v3_default = v3;
  }
});

// node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset2) {
  options = options || {};
  var rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset2 = offset2 || 0;
    for (var i = 0; i < 16; ++i) {
      buf[offset2 + i] = rnds[i];
    }
    return buf;
  }
  return stringify_default(rnds);
}
var v4_default;
var init_v4 = __esm({
  "node_modules/uuid/dist/esm-browser/v4.js"() {
    init_rng();
    init_stringify();
    v4_default = v4;
  }
});

// node_modules/uuid/dist/esm-browser/sha1.js
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;
    case 1:
      return x ^ y ^ z;
    case 2:
      return x & y ^ x & z ^ y & z;
    case 3:
      return x ^ y ^ z;
  }
}
function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}
function sha1(bytes) {
  var K2 = [1518500249, 1859775393, 2400959708, 3395469782];
  var H = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
  if (typeof bytes === "string") {
    var msg = unescape(encodeURIComponent(bytes));
    bytes = [];
    for (var i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    bytes = Array.prototype.slice.call(bytes);
  }
  bytes.push(128);
  var l = bytes.length / 4 + 2;
  var N = Math.ceil(l / 16);
  var M = new Array(N);
  for (var _i = 0; _i < N; ++_i) {
    var arr = new Uint32Array(16);
    for (var j = 0; j < 16; ++j) {
      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];
    }
    M[_i] = arr;
  }
  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 4294967295;
  for (var _i2 = 0; _i2 < N; ++_i2) {
    var W = new Uint32Array(80);
    for (var t = 0; t < 16; ++t) {
      W[t] = M[_i2][t];
    }
    for (var _t = 16; _t < 80; ++_t) {
      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);
    }
    var a = H[0];
    var b = H[1];
    var c = H[2];
    var d = H[3];
    var e = H[4];
    for (var _t2 = 0; _t2 < 80; ++_t2) {
      var s = Math.floor(_t2 / 20);
      var T = ROTL(a, 5) + f(s, b, c, d) + e + K2[s] + W[_t2] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }
    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }
  return [H[0] >> 24 & 255, H[0] >> 16 & 255, H[0] >> 8 & 255, H[0] & 255, H[1] >> 24 & 255, H[1] >> 16 & 255, H[1] >> 8 & 255, H[1] & 255, H[2] >> 24 & 255, H[2] >> 16 & 255, H[2] >> 8 & 255, H[2] & 255, H[3] >> 24 & 255, H[3] >> 16 & 255, H[3] >> 8 & 255, H[3] & 255, H[4] >> 24 & 255, H[4] >> 16 & 255, H[4] >> 8 & 255, H[4] & 255];
}
var sha1_default;
var init_sha1 = __esm({
  "node_modules/uuid/dist/esm-browser/sha1.js"() {
    sha1_default = sha1;
  }
});

// node_modules/uuid/dist/esm-browser/v5.js
var v5, v5_default;
var init_v5 = __esm({
  "node_modules/uuid/dist/esm-browser/v5.js"() {
    init_v35();
    init_sha1();
    v5 = v35_default("v5", 80, sha1_default);
    v5_default = v5;
  }
});

// node_modules/uuid/dist/esm-browser/nil.js
var nil_default;
var init_nil = __esm({
  "node_modules/uuid/dist/esm-browser/nil.js"() {
    nil_default = "00000000-0000-0000-0000-000000000000";
  }
});

// node_modules/uuid/dist/esm-browser/version.js
function version(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  return parseInt(uuid.substr(14, 1), 16);
}
var version_default;
var init_version = __esm({
  "node_modules/uuid/dist/esm-browser/version.js"() {
    init_validate();
    version_default = version;
  }
});

// node_modules/uuid/dist/esm-browser/index.js
var esm_browser_exports = {};
__export(esm_browser_exports, {
  NIL: () => nil_default,
  parse: () => parse_default,
  stringify: () => stringify_default,
  v1: () => v1_default,
  v3: () => v3_default,
  v4: () => v4_default,
  v5: () => v5_default,
  validate: () => validate_default,
  version: () => version_default
});
var init_esm_browser = __esm({
  "node_modules/uuid/dist/esm-browser/index.js"() {
    init_v1();
    init_v3();
    init_v4();
    init_v5();
    init_nil();
    init_version();
    init_validate();
    init_stringify();
    init_parse();
  }
});

// node_modules/jayson/lib/generateRequest.js
var require_generateRequest = __commonJS({
  "node_modules/jayson/lib/generateRequest.js"(exports2, module2) {
    "use strict";
    var uuid = (init_esm_browser(), __toCommonJS(esm_browser_exports)).v4;
    var generateRequest = function(method2, params, id, options) {
      if (typeof method2 !== "string") {
        throw new TypeError(method2 + " must be a string");
      }
      options = options || {};
      const version2 = typeof options.version === "number" ? options.version : 2;
      if (version2 !== 1 && version2 !== 2) {
        throw new TypeError(version2 + " must be 1 or 2");
      }
      const request = {
        method: method2
      };
      if (version2 === 2) {
        request.jsonrpc = "2.0";
      }
      if (params) {
        if (typeof params !== "object" && !Array.isArray(params)) {
          throw new TypeError(params + " must be an object, array or omitted");
        }
        request.params = params;
      }
      if (typeof id === "undefined") {
        const generator = typeof options.generator === "function" ? options.generator : function() {
          return uuid();
        };
        request.id = generator(request, options);
      } else if (version2 === 2 && id === null) {
        if (options.notificationIdNull) {
          request.id = null;
        }
      } else {
        request.id = id;
      }
      return request;
    };
    module2.exports = generateRequest;
  }
});

// node_modules/jayson/lib/client/browser/index.js
var require_browser2 = __commonJS({
  "node_modules/jayson/lib/client/browser/index.js"(exports2, module2) {
    "use strict";
    var uuid = (init_esm_browser(), __toCommonJS(esm_browser_exports)).v4;
    var generateRequest = require_generateRequest();
    var ClientBrowser = function(callServer, options) {
      if (!(this instanceof ClientBrowser)) {
        return new ClientBrowser(callServer, options);
      }
      if (!options) {
        options = {};
      }
      this.options = {
        reviver: typeof options.reviver !== "undefined" ? options.reviver : null,
        replacer: typeof options.replacer !== "undefined" ? options.replacer : null,
        generator: typeof options.generator !== "undefined" ? options.generator : function() {
          return uuid();
        },
        version: typeof options.version !== "undefined" ? options.version : 2,
        notificationIdNull: typeof options.notificationIdNull === "boolean" ? options.notificationIdNull : false
      };
      this.callServer = callServer;
    };
    module2.exports = ClientBrowser;
    ClientBrowser.prototype.request = function(method2, params, id, callback) {
      const self2 = this;
      let request = null;
      const isBatch = Array.isArray(method2) && typeof params === "function";
      if (this.options.version === 1 && isBatch) {
        throw new TypeError("JSON-RPC 1.0 does not support batching");
      }
      const isRaw = !isBatch && method2 && typeof method2 === "object" && typeof params === "function";
      if (isBatch || isRaw) {
        callback = params;
        request = method2;
      } else {
        if (typeof id === "function") {
          callback = id;
          id = void 0;
        }
        const hasCallback = typeof callback === "function";
        try {
          request = generateRequest(method2, params, id, {
            generator: this.options.generator,
            version: this.options.version,
            notificationIdNull: this.options.notificationIdNull
          });
        } catch (err) {
          if (hasCallback) {
            return callback(err);
          }
          throw err;
        }
        if (!hasCallback) {
          return request;
        }
      }
      let message;
      try {
        message = JSON.stringify(request, this.options.replacer);
      } catch (err) {
        return callback(err);
      }
      this.callServer(message, function(err, response) {
        self2._parseResponse(err, response, callback);
      });
      return request;
    };
    ClientBrowser.prototype._parseResponse = function(err, responseText, callback) {
      if (err) {
        callback(err);
        return;
      }
      if (!responseText) {
        return callback();
      }
      let response;
      try {
        response = JSON.parse(responseText, this.options.reviver);
      } catch (err2) {
        return callback(err2);
      }
      if (callback.length === 3) {
        if (Array.isArray(response)) {
          const isError = function(res) {
            return typeof res.error !== "undefined";
          };
          const isNotError = function(res) {
            return !isError(res);
          };
          return callback(null, response.filter(isError), response.filter(isNotError));
        } else {
          return callback(null, response.error, response.result);
        }
      }
      callback(null, response);
    };
  }
});

// node_modules/eventemitter3/index.js
var require_eventemitter3 = __commonJS({
  "node_modules/eventemitter3/index.js"(exports2, module2) {
    "use strict";
    var has = Object.prototype.hasOwnProperty;
    var prefix = "~";
    function Events() {
    }
    if (Object.create) {
      Events.prototype = /* @__PURE__ */ Object.create(null);
      if (!new Events().__proto__) prefix = false;
    }
    function EE(fn, context, once) {
      this.fn = fn;
      this.context = context;
      this.once = once || false;
    }
    function addListener(emitter, event, fn, context, once) {
      if (typeof fn !== "function") {
        throw new TypeError("The listener must be a function");
      }
      var listener = new EE(fn, context || emitter, once), evt = prefix ? prefix + event : event;
      if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
      else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
      else emitter._events[evt] = [emitter._events[evt], listener];
      return emitter;
    }
    function clearEvent(emitter, evt) {
      if (--emitter._eventsCount === 0) emitter._events = new Events();
      else delete emitter._events[evt];
    }
    function EventEmitter2() {
      this._events = new Events();
      this._eventsCount = 0;
    }
    EventEmitter2.prototype.eventNames = function eventNames() {
      var names = [], events, name;
      if (this._eventsCount === 0) return names;
      for (name in events = this._events) {
        if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
      }
      if (Object.getOwnPropertySymbols) {
        return names.concat(Object.getOwnPropertySymbols(events));
      }
      return names;
    };
    EventEmitter2.prototype.listeners = function listeners(event) {
      var evt = prefix ? prefix + event : event, handlers = this._events[evt];
      if (!handlers) return [];
      if (handlers.fn) return [handlers.fn];
      for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
        ee[i] = handlers[i].fn;
      }
      return ee;
    };
    EventEmitter2.prototype.listenerCount = function listenerCount(event) {
      var evt = prefix ? prefix + event : event, listeners = this._events[evt];
      if (!listeners) return 0;
      if (listeners.fn) return 1;
      return listeners.length;
    };
    EventEmitter2.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt]) return false;
      var listeners = this._events[evt], len = arguments.length, args, i;
      if (listeners.fn) {
        if (listeners.once) this.removeListener(event, listeners.fn, void 0, true);
        switch (len) {
          case 1:
            return listeners.fn.call(listeners.context), true;
          case 2:
            return listeners.fn.call(listeners.context, a1), true;
          case 3:
            return listeners.fn.call(listeners.context, a1, a2), true;
          case 4:
            return listeners.fn.call(listeners.context, a1, a2, a3), true;
          case 5:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
          case 6:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
        }
        for (i = 1, args = new Array(len - 1); i < len; i++) {
          args[i - 1] = arguments[i];
        }
        listeners.fn.apply(listeners.context, args);
      } else {
        var length = listeners.length, j;
        for (i = 0; i < length; i++) {
          if (listeners[i].once) this.removeListener(event, listeners[i].fn, void 0, true);
          switch (len) {
            case 1:
              listeners[i].fn.call(listeners[i].context);
              break;
            case 2:
              listeners[i].fn.call(listeners[i].context, a1);
              break;
            case 3:
              listeners[i].fn.call(listeners[i].context, a1, a2);
              break;
            case 4:
              listeners[i].fn.call(listeners[i].context, a1, a2, a3);
              break;
            default:
              if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) {
                args[j - 1] = arguments[j];
              }
              listeners[i].fn.apply(listeners[i].context, args);
          }
        }
      }
      return true;
    };
    EventEmitter2.prototype.on = function on(event, fn, context) {
      return addListener(this, event, fn, context, false);
    };
    EventEmitter2.prototype.once = function once(event, fn, context) {
      return addListener(this, event, fn, context, true);
    };
    EventEmitter2.prototype.removeListener = function removeListener(event, fn, context, once) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt]) return this;
      if (!fn) {
        clearEvent(this, evt);
        return this;
      }
      var listeners = this._events[evt];
      if (listeners.fn) {
        if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
          clearEvent(this, evt);
        }
      } else {
        for (var i = 0, events = [], length = listeners.length; i < length; i++) {
          if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
            events.push(listeners[i]);
          }
        }
        if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
        else clearEvent(this, evt);
      }
      return this;
    };
    EventEmitter2.prototype.removeAllListeners = function removeAllListeners(event) {
      var evt;
      if (event) {
        evt = prefix ? prefix + event : event;
        if (this._events[evt]) clearEvent(this, evt);
      } else {
        this._events = new Events();
        this._eventsCount = 0;
      }
      return this;
    };
    EventEmitter2.prototype.off = EventEmitter2.prototype.removeListener;
    EventEmitter2.prototype.addListener = EventEmitter2.prototype.on;
    EventEmitter2.prefixed = prefix;
    EventEmitter2.EventEmitter = EventEmitter2;
    if ("undefined" !== typeof module2) {
      module2.exports = EventEmitter2;
    }
  }
});

// node_modules/eventemitter3/index.mjs
var import_index;
var init_eventemitter3 = __esm({
  "node_modules/eventemitter3/index.mjs"() {
    import_index = __toESM(require_eventemitter3(), 1);
  }
});

// node_modules/rpc-websockets/dist/index.browser.mjs
function WebSocket2(address, options) {
  return new WebSocketBrowserImpl(address, options);
}
var import_buffer, WebSocketBrowserImpl, DefaultDataPack, CommonClient;
var init_index_browser4 = __esm({
  "node_modules/rpc-websockets/dist/index.browser.mjs"() {
    import_buffer = __toESM(require_buffer2(), 1);
    init_eventemitter3();
    WebSocketBrowserImpl = class extends import_index.default {
      /** Instantiate a WebSocket class
      * @constructor
      * @param {String} address - url to a websocket server
      * @param {(Object)} options - websocket options
      * @param {(String|Array)} protocols - a list of protocols
      * @return {WebSocketBrowserImpl} - returns a WebSocket instance
      */
      constructor(address, options, protocols) {
        super();
        __publicField(this, "socket");
        this.socket = new window.WebSocket(address, protocols);
        this.socket.onopen = () => this.emit("open");
        this.socket.onmessage = (event) => this.emit("message", event.data);
        this.socket.onerror = (error) => this.emit("error", error);
        this.socket.onclose = (event) => {
          this.emit("close", event.code, event.reason);
        };
      }
      /**
      * Sends data through a websocket connection
      * @method
      * @param {(String|Object)} data - data to be sent via websocket
      * @param {Object} optionsOrCallback - ws options
      * @param {Function} callback - a callback called once the data is sent
      * @return {Undefined}
      */
      send(data, optionsOrCallback, callback) {
        const cb = callback || optionsOrCallback;
        try {
          this.socket.send(data);
          cb();
        } catch (error) {
          cb(error);
        }
      }
      /**
      * Closes an underlying socket
      * @method
      * @param {Number} code - status code explaining why the connection is being closed
      * @param {String} reason - a description why the connection is closing
      * @return {Undefined}
      * @throws {Error}
      */
      close(code, reason) {
        this.socket.close(code, reason);
      }
      addEventListener(type2, listener, options) {
        this.socket.addEventListener(type2, listener, options);
      }
    };
    DefaultDataPack = class {
      encode(value) {
        return JSON.stringify(value);
      }
      decode(value) {
        return JSON.parse(value);
      }
    };
    CommonClient = class extends import_index.default {
      /**
      * Instantiate a Client class.
      * @constructor
      * @param {webSocketFactory} webSocketFactory - factory method for WebSocket
      * @param {String} address - url to a websocket server
      * @param {Object} options - ws options object with reconnect parameters
      * @param {Function} generate_request_id - custom generation request Id
      * @param {DataPack} dataPack - data pack contains encoder and decoder
      * @return {CommonClient}
      */
      constructor(webSocketFactory, address = "ws://localhost:8080", {
        autoconnect = true,
        reconnect = true,
        reconnect_interval = 1e3,
        max_reconnects = 5,
        ...rest_options
      } = {}, generate_request_id, dataPack) {
        super();
        __publicField(this, "address");
        __publicField(this, "rpc_id");
        __publicField(this, "queue");
        __publicField(this, "options");
        __publicField(this, "autoconnect");
        __publicField(this, "ready");
        __publicField(this, "reconnect");
        __publicField(this, "reconnect_timer_id");
        __publicField(this, "reconnect_interval");
        __publicField(this, "max_reconnects");
        __publicField(this, "rest_options");
        __publicField(this, "current_reconnects");
        __publicField(this, "generate_request_id");
        __publicField(this, "socket");
        __publicField(this, "webSocketFactory");
        __publicField(this, "dataPack");
        this.webSocketFactory = webSocketFactory;
        this.queue = {};
        this.rpc_id = 0;
        this.address = address;
        this.autoconnect = autoconnect;
        this.ready = false;
        this.reconnect = reconnect;
        this.reconnect_timer_id = void 0;
        this.reconnect_interval = reconnect_interval;
        this.max_reconnects = max_reconnects;
        this.rest_options = rest_options;
        this.current_reconnects = 0;
        this.generate_request_id = generate_request_id || (() => typeof this.rpc_id === "number" ? ++this.rpc_id : Number(this.rpc_id) + 1);
        if (!dataPack) this.dataPack = new DefaultDataPack();
        else this.dataPack = dataPack;
        if (this.autoconnect)
          this._connect(this.address, {
            autoconnect: this.autoconnect,
            reconnect: this.reconnect,
            reconnect_interval: this.reconnect_interval,
            max_reconnects: this.max_reconnects,
            ...this.rest_options
          });
      }
      /**
      * Connects to a defined server if not connected already.
      * @method
      * @return {Undefined}
      */
      connect() {
        if (this.socket) return;
        this._connect(this.address, {
          autoconnect: this.autoconnect,
          reconnect: this.reconnect,
          reconnect_interval: this.reconnect_interval,
          max_reconnects: this.max_reconnects,
          ...this.rest_options
        });
      }
      /**
      * Calls a registered RPC method on server.
      * @method
      * @param {String} method - RPC method name
      * @param {Object|Array} params - optional method parameters
      * @param {Number} timeout - RPC reply timeout value
      * @param {Object} ws_opts - options passed to ws
      * @return {Promise}
      */
      call(method2, params, timeout, ws_opts) {
        if (!ws_opts && "object" === typeof timeout) {
          ws_opts = timeout;
          timeout = null;
        }
        return new Promise((resolve, reject) => {
          if (!this.ready) return reject(new Error("socket not ready"));
          const rpc_id = this.generate_request_id(method2, params);
          const message = {
            jsonrpc: "2.0",
            method: method2,
            params: params || void 0,
            id: rpc_id
          };
          this.socket.send(this.dataPack.encode(message), ws_opts, (error) => {
            if (error) return reject(error);
            this.queue[rpc_id] = { promise: [resolve, reject] };
            if (timeout) {
              this.queue[rpc_id].timeout = setTimeout(() => {
                delete this.queue[rpc_id];
                reject(new Error("reply timeout"));
              }, timeout);
            }
          });
        });
      }
      /**
      * Logins with the other side of the connection.
      * @method
      * @param {Object} params - Login credentials object
      * @return {Promise}
      */
      async login(params) {
        const resp = await this.call("rpc.login", params);
        if (!resp) throw new Error("authentication failed");
        return resp;
      }
      /**
      * Fetches a list of client's methods registered on server.
      * @method
      * @return {Array}
      */
      async listMethods() {
        return await this.call("__listMethods");
      }
      /**
      * Sends a JSON-RPC 2.0 notification to server.
      * @method
      * @param {String} method - RPC method name
      * @param {Object} params - optional method parameters
      * @return {Promise}
      */
      notify(method2, params) {
        return new Promise((resolve, reject) => {
          if (!this.ready) return reject(new Error("socket not ready"));
          const message = {
            jsonrpc: "2.0",
            method: method2,
            params
          };
          this.socket.send(this.dataPack.encode(message), (error) => {
            if (error) return reject(error);
            resolve();
          });
        });
      }
      /**
      * Subscribes for a defined event.
      * @method
      * @param {String|Array} event - event name
      * @return {Undefined}
      * @throws {Error}
      */
      async subscribe(event) {
        if (typeof event === "string") event = [event];
        const result = await this.call("rpc.on", event);
        if (typeof event === "string" && result[event] !== "ok")
          throw new Error(
            "Failed subscribing to an event '" + event + "' with: " + result[event]
          );
        return result;
      }
      /**
      * Unsubscribes from a defined event.
      * @method
      * @param {String|Array} event - event name
      * @return {Undefined}
      * @throws {Error}
      */
      async unsubscribe(event) {
        if (typeof event === "string") event = [event];
        const result = await this.call("rpc.off", event);
        if (typeof event === "string" && result[event] !== "ok")
          throw new Error("Failed unsubscribing from an event with: " + result);
        return result;
      }
      /**
      * Closes a WebSocket connection gracefully.
      * @method
      * @param {Number} code - socket close code
      * @param {String} data - optional data to be sent before closing
      * @return {Undefined}
      */
      close(code, data) {
        this.socket.close(code || 1e3, data);
      }
      /**
      * Enable / disable automatic reconnection.
      * @method
      * @param {Boolean} reconnect - enable / disable reconnection
      * @return {Undefined}
      */
      setAutoReconnect(reconnect) {
        this.reconnect = reconnect;
      }
      /**
      * Set the interval between reconnection attempts.
      * @method
      * @param {Number} interval - reconnection interval in milliseconds
      * @return {Undefined}
      */
      setReconnectInterval(interval) {
        this.reconnect_interval = interval;
      }
      /**
      * Set the maximum number of reconnection attempts.
      * @method
      * @param {Number} max_reconnects - maximum reconnection attempts
      * @return {Undefined}
      */
      setMaxReconnects(max_reconnects) {
        this.max_reconnects = max_reconnects;
      }
      /**
      * Connection/Message handler.
      * @method
      * @private
      * @param {String} address - WebSocket API address
      * @param {Object} options - ws options object
      * @return {Undefined}
      */
      _connect(address, options) {
        clearTimeout(this.reconnect_timer_id);
        this.socket = this.webSocketFactory(address, options);
        this.socket.addEventListener("open", () => {
          this.ready = true;
          this.emit("open");
          this.current_reconnects = 0;
        });
        this.socket.addEventListener("message", ({ data: message }) => {
          if (message instanceof ArrayBuffer)
            message = import_buffer.Buffer.from(message).toString();
          try {
            message = this.dataPack.decode(message);
          } catch (error) {
            return;
          }
          if (message.notification && this.listeners(message.notification).length) {
            if (!Object.keys(message.params).length)
              return this.emit(message.notification);
            const args = [message.notification];
            if (message.params.constructor === Object) args.push(message.params);
            else
              for (let i = 0; i < message.params.length; i++)
                args.push(message.params[i]);
            return Promise.resolve().then(() => {
              this.emit.apply(this, args);
            });
          }
          if (!this.queue[message.id]) {
            if (message.method) {
              return Promise.resolve().then(() => {
                this.emit(message.method, message == null ? void 0 : message.params);
              });
            }
            return;
          }
          if ("error" in message === "result" in message)
            this.queue[message.id].promise[1](
              new Error(
                'Server response malformed. Response must include either "result" or "error", but not both.'
              )
            );
          if (this.queue[message.id].timeout)
            clearTimeout(this.queue[message.id].timeout);
          if (message.error) this.queue[message.id].promise[1](message.error);
          else this.queue[message.id].promise[0](message.result);
          delete this.queue[message.id];
        });
        this.socket.addEventListener("error", (error) => this.emit("error", error));
        this.socket.addEventListener("close", ({ code, reason }) => {
          if (this.ready)
            setTimeout(() => this.emit("close", code, reason), 0);
          this.ready = false;
          this.socket = void 0;
          if (code === 1e3) return;
          this.current_reconnects++;
          if (this.reconnect && (this.max_reconnects > this.current_reconnects || this.max_reconnects === 0))
            this.reconnect_timer_id = setTimeout(
              () => this._connect(address, options),
              this.reconnect_interval
            );
        });
      }
    };
  }
});

// node_modules/@noble/hashes/esm/sha3.js
function keccakP(s, rounds = 24) {
  const B = new Uint32Array(5 * 2);
  for (let round = 24 - rounds; round < 24; round++) {
    for (let x = 0; x < 10; x++)
      B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
    for (let x = 0; x < 10; x += 2) {
      const idx1 = (x + 8) % 10;
      const idx0 = (x + 2) % 10;
      const B0 = B[idx0];
      const B1 = B[idx0 + 1];
      const Th = rotlH(B0, B1, 1) ^ B[idx1];
      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
      for (let y = 0; y < 50; y += 10) {
        s[x + y] ^= Th;
        s[x + y + 1] ^= Tl;
      }
    }
    let curH = s[2];
    let curL = s[3];
    for (let t = 0; t < 24; t++) {
      const shift = SHA3_ROTL[t];
      const Th = rotlH(curH, curL, shift);
      const Tl = rotlL(curH, curL, shift);
      const PI = SHA3_PI[t];
      curH = s[PI];
      curL = s[PI + 1];
      s[PI] = Th;
      s[PI + 1] = Tl;
    }
    for (let y = 0; y < 50; y += 10) {
      for (let x = 0; x < 10; x++)
        B[x] = s[y + x];
      for (let x = 0; x < 10; x++)
        s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
    }
    s[0] ^= SHA3_IOTA_H[round];
    s[1] ^= SHA3_IOTA_L[round];
  }
  clean(B);
}
var _0n, _1n, _2n, _7n, _256n, _0x71n, SHA3_PI, SHA3_ROTL, _SHA3_IOTA, IOTAS, SHA3_IOTA_H, SHA3_IOTA_L, rotlH, rotlL, Keccak, gen, sha3_224, sha3_256, sha3_384, sha3_512, keccak_224, keccak_256, keccak_384, keccak_512, genShake, shake128, shake256;
var init_sha3 = __esm({
  "node_modules/@noble/hashes/esm/sha3.js"() {
    init_u64();
    init_utils();
    _0n = BigInt(0);
    _1n = BigInt(1);
    _2n = BigInt(2);
    _7n = BigInt(7);
    _256n = BigInt(256);
    _0x71n = BigInt(113);
    SHA3_PI = [];
    SHA3_ROTL = [];
    _SHA3_IOTA = [];
    for (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {
      [x, y] = [y, (2 * x + 3 * y) % 5];
      SHA3_PI.push(2 * (5 * y + x));
      SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);
      let t = _0n;
      for (let j = 0; j < 7; j++) {
        R = (R << _1n ^ (R >> _7n) * _0x71n) % _256n;
        if (R & _2n)
          t ^= _1n << (_1n << BigInt(j)) - _1n;
      }
      _SHA3_IOTA.push(t);
    }
    IOTAS = split(_SHA3_IOTA, true);
    SHA3_IOTA_H = IOTAS[0];
    SHA3_IOTA_L = IOTAS[1];
    rotlH = (h, l, s) => s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s);
    rotlL = (h, l, s) => s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s);
    Keccak = class _Keccak extends Hash {
      // NOTE: we accept arguments in bytes instead of bits here.
      constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
        super();
        this.pos = 0;
        this.posOut = 0;
        this.finished = false;
        this.destroyed = false;
        this.enableXOF = false;
        this.blockLen = blockLen;
        this.suffix = suffix;
        this.outputLen = outputLen;
        this.enableXOF = enableXOF;
        this.rounds = rounds;
        anumber(outputLen);
        if (!(0 < blockLen && blockLen < 200))
          throw new Error("only keccak-f1600 function is supported");
        this.state = new Uint8Array(200);
        this.state32 = u32(this.state);
      }
      clone() {
        return this._cloneInto();
      }
      keccak() {
        swap32IfBE(this.state32);
        keccakP(this.state32, this.rounds);
        swap32IfBE(this.state32);
        this.posOut = 0;
        this.pos = 0;
      }
      update(data) {
        aexists(this);
        data = toBytes(data);
        abytes(data);
        const { blockLen, state } = this;
        const len = data.length;
        for (let pos = 0; pos < len; ) {
          const take = Math.min(blockLen - this.pos, len - pos);
          for (let i = 0; i < take; i++)
            state[this.pos++] ^= data[pos++];
          if (this.pos === blockLen)
            this.keccak();
        }
        return this;
      }
      finish() {
        if (this.finished)
          return;
        this.finished = true;
        const { state, suffix, pos, blockLen } = this;
        state[pos] ^= suffix;
        if ((suffix & 128) !== 0 && pos === blockLen - 1)
          this.keccak();
        state[blockLen - 1] ^= 128;
        this.keccak();
      }
      writeInto(out) {
        aexists(this, false);
        abytes(out);
        this.finish();
        const bufferOut = this.state;
        const { blockLen } = this;
        for (let pos = 0, len = out.length; pos < len; ) {
          if (this.posOut >= blockLen)
            this.keccak();
          const take = Math.min(blockLen - this.posOut, len - pos);
          out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
          this.posOut += take;
          pos += take;
        }
        return out;
      }
      xofInto(out) {
        if (!this.enableXOF)
          throw new Error("XOF is not possible for this instance");
        return this.writeInto(out);
      }
      xof(bytes) {
        anumber(bytes);
        return this.xofInto(new Uint8Array(bytes));
      }
      digestInto(out) {
        aoutput(out, this);
        if (this.finished)
          throw new Error("digest() was already called");
        this.writeInto(out);
        this.destroy();
        return out;
      }
      digest() {
        return this.digestInto(new Uint8Array(this.outputLen));
      }
      destroy() {
        this.destroyed = true;
        clean(this.state);
      }
      _cloneInto(to) {
        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
        to || (to = new _Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
        to.state32.set(this.state32);
        to.pos = this.pos;
        to.posOut = this.posOut;
        to.finished = this.finished;
        to.rounds = rounds;
        to.suffix = suffix;
        to.outputLen = outputLen;
        to.enableXOF = enableXOF;
        to.destroyed = this.destroyed;
        return to;
      }
    };
    gen = (suffix, blockLen, outputLen) => createHasher(() => new Keccak(blockLen, suffix, outputLen));
    sha3_224 = (() => gen(6, 144, 224 / 8))();
    sha3_256 = (() => gen(6, 136, 256 / 8))();
    sha3_384 = (() => gen(6, 104, 384 / 8))();
    sha3_512 = (() => gen(6, 72, 512 / 8))();
    keccak_224 = (() => gen(1, 144, 224 / 8))();
    keccak_256 = (() => gen(1, 136, 256 / 8))();
    keccak_384 = (() => gen(1, 104, 384 / 8))();
    keccak_512 = (() => gen(1, 72, 512 / 8))();
    genShake = (suffix, blockLen, outputLen) => createXOFer((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));
    shake128 = (() => genShake(31, 168, 128 / 8))();
    shake256 = (() => genShake(31, 136, 256 / 8))();
  }
});

// node_modules/@noble/curves/esm/secp256k1.js
function sqrtMod(y) {
  const P = secp256k1P;
  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);
  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
  const b2 = y * y * y % P;
  const b3 = b2 * b2 * y % P;
  const b6 = pow2(b3, _3n, P) * b3 % P;
  const b9 = pow2(b6, _3n, P) * b3 % P;
  const b11 = pow2(b9, _2n2, P) * b2 % P;
  const b22 = pow2(b11, _11n, P) * b11 % P;
  const b44 = pow2(b22, _22n, P) * b22 % P;
  const b88 = pow2(b44, _44n, P) * b44 % P;
  const b176 = pow2(b88, _88n, P) * b88 % P;
  const b220 = pow2(b176, _44n, P) * b44 % P;
  const b223 = pow2(b220, _3n, P) * b3 % P;
  const t1 = pow2(b223, _23n, P) * b22 % P;
  const t2 = pow2(t1, _6n, P) * b2 % P;
  const root2 = pow2(t2, _2n2, P);
  if (!Fpk1.eql(Fpk1.sqr(root2), y))
    throw new Error("Cannot find square root");
  return root2;
}
function taggedHash(tag, ...messages) {
  let tagP = TAGGED_HASH_PREFIXES[tag];
  if (tagP === void 0) {
    const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));
    tagP = concatBytes(tagH, tagH);
    TAGGED_HASH_PREFIXES[tag] = tagP;
  }
  return sha256(concatBytes(tagP, ...messages));
}
function schnorrGetExtPubKey(priv) {
  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv);
  let p = Point.fromPrivateKey(d_);
  const scalar = p.hasEvenY() ? d_ : modN(-d_);
  return { scalar, bytes: pointToBytes(p) };
}
function lift_x(x) {
  aInRange("x", x, _1n2, secp256k1P);
  const xx = modP(x * x);
  const c = modP(xx * x + BigInt(7));
  let y = sqrtMod(c);
  if (y % _2n2 !== _0n2)
    y = modP(-y);
  const p = new Point(x, y, _1n2);
  p.assertValidity();
  return p;
}
function challenge(...args) {
  return modN(num(taggedHash("BIP0340/challenge", ...args)));
}
function schnorrGetPublicKey(privateKey) {
  return schnorrGetExtPubKey(privateKey).bytes;
}
function schnorrSign(message, privateKey, auxRand = randomBytes(32)) {
  const m = ensureBytes("message", message);
  const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey);
  const a = ensureBytes("auxRand", auxRand, 32);
  const t = numTo32b(d ^ num(taggedHash("BIP0340/aux", a)));
  const rand = taggedHash("BIP0340/nonce", t, px, m);
  const k_ = modN(num(rand));
  if (k_ === _0n2)
    throw new Error("sign failed: k is zero");
  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_);
  const e = challenge(rx, px, m);
  const sig = new Uint8Array(64);
  sig.set(rx, 0);
  sig.set(numTo32b(modN(k + e * d)), 32);
  if (!schnorrVerify(sig, m, px))
    throw new Error("sign: Invalid signature produced");
  return sig;
}
function schnorrVerify(signature2, message, publicKey2) {
  const sig = ensureBytes("signature", signature2, 64);
  const m = ensureBytes("message", message);
  const pub = ensureBytes("publicKey", publicKey2, 32);
  try {
    const P = lift_x(num(pub));
    const r = num(sig.subarray(0, 32));
    if (!inRange(r, _1n2, secp256k1P))
      return false;
    const s = num(sig.subarray(32, 64));
    if (!inRange(s, _1n2, secp256k1N))
      return false;
    const e = challenge(numTo32b(r), pointToBytes(P), m);
    const R = GmulAdd(P, s, modN(-e));
    if (!R || !R.hasEvenY() || R.toAffine().x !== r)
      return false;
    return true;
  } catch (error) {
    return false;
  }
}
var secp256k1P, secp256k1N, _1n2, _2n2, divNearest, Fpk1, secp256k1, _0n2, TAGGED_HASH_PREFIXES, pointToBytes, numTo32b, modP, modN, Point, GmulAdd, num, schnorr, isoMap, mapSWU, secp256k1_hasher, hashToCurve, encodeToCurve;
var init_secp256k1 = __esm({
  "node_modules/@noble/curves/esm/secp256k1.js"() {
    init_sha2();
    init_utils();
    init_shortw_utils();
    init_hash_to_curve();
    init_modular();
    init_utils2();
    init_weierstrass();
    secp256k1P = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f");
    secp256k1N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
    _1n2 = BigInt(1);
    _2n2 = BigInt(2);
    divNearest = (a, b) => (a + b / _2n2) / b;
    Fpk1 = Field(secp256k1P, void 0, void 0, { sqrt: sqrtMod });
    secp256k1 = createCurve({
      a: BigInt(0),
      b: BigInt(7),
      Fp: Fpk1,
      n: secp256k1N,
      Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
      Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
      h: BigInt(1),
      lowS: true,
      // Allow only low-S signatures by default in sign() and verify()
      endo: {
        // Endomorphism, see above
        beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
        splitScalar: (k) => {
          const n = secp256k1N;
          const a1 = BigInt("0x3086d221a7d46bcde86c90e49284eb15");
          const b1 = -_1n2 * BigInt("0xe4437ed6010e88286f547fa90abfe4c3");
          const a2 = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8");
          const b2 = a1;
          const POW_2_128 = BigInt("0x100000000000000000000000000000000");
          const c1 = divNearest(b2 * k, n);
          const c2 = divNearest(-b1 * k, n);
          let k1 = mod(k - c1 * a1 - c2 * a2, n);
          let k2 = mod(-c1 * b1 - c2 * b2, n);
          const k1neg = k1 > POW_2_128;
          const k2neg = k2 > POW_2_128;
          if (k1neg)
            k1 = n - k1;
          if (k2neg)
            k2 = n - k2;
          if (k1 > POW_2_128 || k2 > POW_2_128) {
            throw new Error("splitScalar: Endomorphism failed, k=" + k);
          }
          return { k1neg, k1, k2neg, k2 };
        }
      }
    }, sha256);
    _0n2 = BigInt(0);
    TAGGED_HASH_PREFIXES = {};
    pointToBytes = (point) => point.toRawBytes(true).slice(1);
    numTo32b = (n) => numberToBytesBE(n, 32);
    modP = (x) => mod(x, secp256k1P);
    modN = (x) => mod(x, secp256k1N);
    Point = secp256k1.ProjectivePoint;
    GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);
    num = bytesToNumberBE;
    schnorr = (() => ({
      getPublicKey: schnorrGetPublicKey,
      sign: schnorrSign,
      verify: schnorrVerify,
      utils: {
        randomPrivateKey: secp256k1.utils.randomPrivateKey,
        lift_x,
        pointToBytes,
        numberToBytesBE,
        bytesToNumberBE,
        taggedHash,
        mod
      }
    }))();
    isoMap = (() => isogenyMap(Fpk1, [
      // xNum
      [
        "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7",
        "0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581",
        "0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262",
        "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c"
      ],
      // xDen
      [
        "0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b",
        "0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14",
        "0x0000000000000000000000000000000000000000000000000000000000000001"
        // LAST 1
      ],
      // yNum
      [
        "0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c",
        "0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3",
        "0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931",
        "0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84"
      ],
      // yDen
      [
        "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b",
        "0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573",
        "0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f",
        "0x0000000000000000000000000000000000000000000000000000000000000001"
        // LAST 1
      ]
    ].map((i) => i.map((j) => BigInt(j)))))();
    mapSWU = (() => mapToCurveSimpleSWU(Fpk1, {
      A: BigInt("0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533"),
      B: BigInt("1771"),
      Z: Fpk1.create(BigInt("-11"))
    }))();
    secp256k1_hasher = (() => createHasher2(secp256k1.ProjectivePoint, (scalars) => {
      const { x, y } = mapSWU(Fpk1.create(scalars[0]));
      return isoMap(x, y);
    }, {
      DST: "secp256k1_XMD:SHA-256_SSWU_RO_",
      encodeDST: "secp256k1_XMD:SHA-256_SSWU_NU_",
      p: Fpk1.ORDER,
      m: 1,
      k: 128,
      expand: "xmd",
      hash: sha256
    }))();
    hashToCurve = (() => secp256k1_hasher.hashToCurve)();
    encodeToCurve = (() => secp256k1_hasher.encodeToCurve)();
  }
});

// node_modules/@solana/web3.js/lib/index.browser.esm.js
var index_browser_esm_exports = {};
__export(index_browser_esm_exports, {
  Account: () => Account,
  AddressLookupTableAccount: () => AddressLookupTableAccount,
  AddressLookupTableInstruction: () => AddressLookupTableInstruction,
  AddressLookupTableProgram: () => AddressLookupTableProgram,
  Authorized: () => Authorized,
  BLOCKHASH_CACHE_TIMEOUT_MS: () => BLOCKHASH_CACHE_TIMEOUT_MS,
  BPF_LOADER_DEPRECATED_PROGRAM_ID: () => BPF_LOADER_DEPRECATED_PROGRAM_ID,
  BPF_LOADER_PROGRAM_ID: () => BPF_LOADER_PROGRAM_ID,
  BpfLoader: () => BpfLoader,
  COMPUTE_BUDGET_INSTRUCTION_LAYOUTS: () => COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,
  ComputeBudgetInstruction: () => ComputeBudgetInstruction,
  ComputeBudgetProgram: () => ComputeBudgetProgram,
  Connection: () => Connection,
  Ed25519Program: () => Ed25519Program,
  Enum: () => Enum,
  EpochSchedule: () => EpochSchedule,
  FeeCalculatorLayout: () => FeeCalculatorLayout,
  Keypair: () => Keypair,
  LAMPORTS_PER_SOL: () => LAMPORTS_PER_SOL,
  LOOKUP_TABLE_INSTRUCTION_LAYOUTS: () => LOOKUP_TABLE_INSTRUCTION_LAYOUTS,
  Loader: () => Loader,
  Lockup: () => Lockup,
  MAX_SEED_LENGTH: () => MAX_SEED_LENGTH,
  Message: () => Message,
  MessageAccountKeys: () => MessageAccountKeys,
  MessageV0: () => MessageV0,
  NONCE_ACCOUNT_LENGTH: () => NONCE_ACCOUNT_LENGTH,
  NonceAccount: () => NonceAccount,
  PACKET_DATA_SIZE: () => PACKET_DATA_SIZE,
  PUBLIC_KEY_LENGTH: () => PUBLIC_KEY_LENGTH,
  PublicKey: () => PublicKey,
  SIGNATURE_LENGTH_IN_BYTES: () => SIGNATURE_LENGTH_IN_BYTES,
  SOLANA_SCHEMA: () => SOLANA_SCHEMA,
  STAKE_CONFIG_ID: () => STAKE_CONFIG_ID,
  STAKE_INSTRUCTION_LAYOUTS: () => STAKE_INSTRUCTION_LAYOUTS,
  SYSTEM_INSTRUCTION_LAYOUTS: () => SYSTEM_INSTRUCTION_LAYOUTS,
  SYSVAR_CLOCK_PUBKEY: () => SYSVAR_CLOCK_PUBKEY,
  SYSVAR_EPOCH_SCHEDULE_PUBKEY: () => SYSVAR_EPOCH_SCHEDULE_PUBKEY,
  SYSVAR_INSTRUCTIONS_PUBKEY: () => SYSVAR_INSTRUCTIONS_PUBKEY,
  SYSVAR_RECENT_BLOCKHASHES_PUBKEY: () => SYSVAR_RECENT_BLOCKHASHES_PUBKEY,
  SYSVAR_RENT_PUBKEY: () => SYSVAR_RENT_PUBKEY,
  SYSVAR_REWARDS_PUBKEY: () => SYSVAR_REWARDS_PUBKEY,
  SYSVAR_SLOT_HASHES_PUBKEY: () => SYSVAR_SLOT_HASHES_PUBKEY,
  SYSVAR_SLOT_HISTORY_PUBKEY: () => SYSVAR_SLOT_HISTORY_PUBKEY,
  SYSVAR_STAKE_HISTORY_PUBKEY: () => SYSVAR_STAKE_HISTORY_PUBKEY,
  Secp256k1Program: () => Secp256k1Program,
  SendTransactionError: () => SendTransactionError,
  SolanaJSONRPCError: () => SolanaJSONRPCError,
  SolanaJSONRPCErrorCode: () => SolanaJSONRPCErrorCode,
  StakeAuthorizationLayout: () => StakeAuthorizationLayout,
  StakeInstruction: () => StakeInstruction,
  StakeProgram: () => StakeProgram,
  Struct: () => Struct2,
  SystemInstruction: () => SystemInstruction,
  SystemProgram: () => SystemProgram,
  Transaction: () => Transaction,
  TransactionExpiredBlockheightExceededError: () => TransactionExpiredBlockheightExceededError,
  TransactionExpiredNonceInvalidError: () => TransactionExpiredNonceInvalidError,
  TransactionExpiredTimeoutError: () => TransactionExpiredTimeoutError,
  TransactionInstruction: () => TransactionInstruction,
  TransactionMessage: () => TransactionMessage,
  TransactionStatus: () => TransactionStatus,
  VALIDATOR_INFO_KEY: () => VALIDATOR_INFO_KEY,
  VERSION_PREFIX_MASK: () => VERSION_PREFIX_MASK,
  VOTE_PROGRAM_ID: () => VOTE_PROGRAM_ID,
  ValidatorInfo: () => ValidatorInfo,
  VersionedMessage: () => VersionedMessage,
  VersionedTransaction: () => VersionedTransaction,
  VoteAccount: () => VoteAccount,
  VoteAuthorizationLayout: () => VoteAuthorizationLayout,
  VoteInit: () => VoteInit,
  VoteInstruction: () => VoteInstruction,
  VoteProgram: () => VoteProgram,
  clusterApiUrl: () => clusterApiUrl,
  sendAndConfirmRawTransaction: () => sendAndConfirmRawTransaction,
  sendAndConfirmTransaction: () => sendAndConfirmTransaction
});
function isOnCurve(publicKey2) {
  try {
    ed25519.ExtendedPoint.fromHex(publicKey2);
    return true;
  } catch {
    return false;
  }
}
function isPublicKeyData(value) {
  return value._bn !== void 0;
}
function getAlloc(type2, fields) {
  const getItemAlloc = (item) => {
    if (item.span >= 0) {
      return item.span;
    } else if (typeof item.alloc === "function") {
      return item.alloc(fields[item.property]);
    } else if ("count" in item && "elementLayout" in item) {
      const field = fields[item.property];
      if (Array.isArray(field)) {
        return field.length * getItemAlloc(item.elementLayout);
      }
    } else if ("fields" in item) {
      return getAlloc({
        layout: item
      }, fields[item.property]);
    }
    return 0;
  };
  let alloc = 0;
  type2.layout.fields.forEach((item) => {
    alloc += getItemAlloc(item);
  });
  return alloc;
}
function decodeLength(bytes) {
  let len = 0;
  let size = 0;
  for (; ; ) {
    let elem = bytes.shift();
    len |= (elem & 127) << size * 7;
    size += 1;
    if ((elem & 128) === 0) {
      break;
    }
  }
  return len;
}
function encodeLength(bytes, len) {
  let rem_len = len;
  for (; ; ) {
    let elem = rem_len & 127;
    rem_len >>= 7;
    if (rem_len == 0) {
      bytes.push(elem);
      break;
    } else {
      elem |= 128;
      bytes.push(elem);
    }
  }
}
function assert2(condition, message) {
  if (!condition) {
    throw new Error(message || "Assertion failed");
  }
}
function guardedShift(byteArray) {
  if (byteArray.length === 0) {
    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);
  }
  return byteArray.shift();
}
function guardedSplice(byteArray, ...args) {
  const [start] = args;
  if (args.length === 2 ? start + (args[1] ?? 0) > byteArray.length : start >= byteArray.length) {
    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);
  }
  return byteArray.splice(...args);
}
async function sendAndConfirmTransaction(connection, transaction, signers, options) {
  const sendOptions = options && {
    skipPreflight: options.skipPreflight,
    preflightCommitment: options.preflightCommitment || options.commitment,
    maxRetries: options.maxRetries,
    minContextSlot: options.minContextSlot
  };
  const signature2 = await connection.sendTransaction(transaction, signers, sendOptions);
  let status;
  if (transaction.recentBlockhash != null && transaction.lastValidBlockHeight != null) {
    status = (await connection.confirmTransaction({
      abortSignal: options == null ? void 0 : options.abortSignal,
      signature: signature2,
      blockhash: transaction.recentBlockhash,
      lastValidBlockHeight: transaction.lastValidBlockHeight
    }, options && options.commitment)).value;
  } else if (transaction.minNonceContextSlot != null && transaction.nonceInfo != null) {
    const {
      nonceInstruction
    } = transaction.nonceInfo;
    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;
    status = (await connection.confirmTransaction({
      abortSignal: options == null ? void 0 : options.abortSignal,
      minContextSlot: transaction.minNonceContextSlot,
      nonceAccountPubkey,
      nonceValue: transaction.nonceInfo.nonce,
      signature: signature2
    }, options && options.commitment)).value;
  } else {
    if ((options == null ? void 0 : options.abortSignal) != null) {
      console.warn("sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.");
    }
    status = (await connection.confirmTransaction(signature2, options && options.commitment)).value;
  }
  if (status.err) {
    if (signature2 != null) {
      throw new SendTransactionError({
        action: "send",
        signature: signature2,
        transactionMessage: `Status: (${JSON.stringify(status)})`
      });
    }
    throw new Error(`Transaction ${signature2} failed (${JSON.stringify(status)})`);
  }
  return signature2;
}
function sleep(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}
function encodeData(type2, fields) {
  const allocLength = type2.layout.span >= 0 ? type2.layout.span : getAlloc(type2, fields);
  const data = import_buffer2.Buffer.alloc(allocLength);
  const layoutFields = Object.assign({
    instruction: type2.index
  }, fields);
  type2.layout.encode(layoutFields, data);
  return data;
}
function decodeData$1(type2, buffer) {
  let data;
  try {
    data = type2.layout.decode(buffer);
  } catch (err) {
    throw new Error("invalid instruction; " + err);
  }
  if (data.instruction !== type2.index) {
    throw new Error(`invalid instruction; instruction index mismatch ${data.instruction} != ${type2.index}`);
  }
  return data;
}
function u64(property) {
  const layout = (0, import_buffer_layout.blob)(8, property);
  const decode2 = layout.decode.bind(layout);
  const encode2 = layout.encode.bind(layout);
  const bigIntLayout = layout;
  const codec = getU64Codec();
  bigIntLayout.decode = (buffer, offset2) => {
    const src = decode2(buffer, offset2);
    return codec.decode(src);
  };
  bigIntLayout.encode = (bigInt, buffer, offset2) => {
    const src = codec.encode(bigInt);
    return encode2(src, buffer, offset2);
  };
  return bigIntLayout;
}
function getDefaultExportFromCjs(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
}
function requireFastStableStringify() {
  if (hasRequiredFastStableStringify) return fastStableStringify$1;
  hasRequiredFastStableStringify = 1;
  var objToString = Object.prototype.toString;
  var objKeys = Object.keys || function(obj) {
    var keys = [];
    for (var name in obj) {
      keys.push(name);
    }
    return keys;
  };
  function stringify2(val, isArrayProp) {
    var i, max, str, keys, key, propVal, toStr;
    if (val === true) {
      return "true";
    }
    if (val === false) {
      return "false";
    }
    switch (typeof val) {
      case "object":
        if (val === null) {
          return null;
        } else if (val.toJSON && typeof val.toJSON === "function") {
          return stringify2(val.toJSON(), isArrayProp);
        } else {
          toStr = objToString.call(val);
          if (toStr === "[object Array]") {
            str = "[";
            max = val.length - 1;
            for (i = 0; i < max; i++) {
              str += stringify2(val[i], true) + ",";
            }
            if (max > -1) {
              str += stringify2(val[i], true);
            }
            return str + "]";
          } else if (toStr === "[object Object]") {
            keys = objKeys(val).sort();
            max = keys.length;
            str = "";
            i = 0;
            while (i < max) {
              key = keys[i];
              propVal = stringify2(val[key], false);
              if (propVal !== void 0) {
                if (str) {
                  str += ",";
                }
                str += JSON.stringify(key) + ":" + propVal;
              }
              i++;
            }
            return "{" + str + "}";
          } else {
            return JSON.stringify(val);
          }
        }
      case "function":
      case "undefined":
        return isArrayProp ? null : void 0;
      case "string":
        return JSON.stringify(val);
      default:
        return isFinite(val) ? val : null;
    }
  }
  fastStableStringify$1 = function(val) {
    var returnVal = stringify2(val, false);
    if (returnVal !== void 0) {
      return "" + returnVal;
    }
  };
  return fastStableStringify$1;
}
function trailingZeros(n) {
  let trailingZeros2 = 0;
  while (n > 1) {
    n /= 2;
    trailingZeros2++;
  }
  return trailingZeros2;
}
function nextPowerOfTwo(n) {
  if (n === 0) return 1;
  n--;
  n |= n >> 1;
  n |= n >> 2;
  n |= n >> 4;
  n |= n >> 8;
  n |= n >> 16;
  n |= n >> 32;
  return n + 1;
}
function decodeData(type2, data) {
  let decoded;
  try {
    decoded = type2.layout.decode(data);
  } catch (err) {
    throw new Error("invalid instruction; " + err);
  }
  if (decoded.typeIndex !== type2.index) {
    throw new Error(`invalid account data; account type mismatch ${decoded.typeIndex} != ${type2.index}`);
  }
  return decoded;
}
function makeWebsocketUrl(endpoint2) {
  const matches = endpoint2.match(URL_RE);
  if (matches == null) {
    throw TypeError(`Failed to validate endpoint URL \`${endpoint2}\``);
  }
  const [
    _,
    // eslint-disable-line @typescript-eslint/no-unused-vars
    hostish,
    portWithColon,
    rest
  ] = matches;
  const protocol = endpoint2.startsWith("https:") ? "wss:" : "ws:";
  const startPort = portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);
  const websocketPort = (
    // Only shift the port by +1 as a convention for ws(s) only if given endpoint
    // is explicitly specifying the endpoint port (HTTP-based RPC), assuming
    // we're directly trying to connect to agave-validator's ws listening port.
    // When the endpoint omits the port, we're connecting to the protocol
    // default ports: http(80) or https(443) and it's assumed we're behind a reverse
    // proxy which manages WebSocket upgrade and backend port redirection.
    startPort == null ? "" : `:${startPort + 1}`
  );
  return `${protocol}//${hostish}${websocketPort}${rest}`;
}
function assertEndpointUrl(putativeUrl) {
  if (/^https?:/.test(putativeUrl) === false) {
    throw new TypeError("Endpoint URL must start with `http:` or `https:`.");
  }
  return putativeUrl;
}
function extractCommitmentFromConfig(commitmentOrConfig) {
  let commitment;
  let config;
  if (typeof commitmentOrConfig === "string") {
    commitment = commitmentOrConfig;
  } else if (commitmentOrConfig) {
    const {
      commitment: specifiedCommitment,
      ...specifiedConfig
    } = commitmentOrConfig;
    commitment = specifiedCommitment;
    config = specifiedConfig;
  }
  return {
    commitment,
    config
  };
}
function applyDefaultMemcmpEncodingToFilters(filters) {
  return filters.map((filter) => "memcmp" in filter ? {
    ...filter,
    memcmp: {
      ...filter.memcmp,
      encoding: filter.memcmp.encoding ?? "base58"
    }
  } : filter);
}
function createRpcResult(result) {
  return union([type({
    jsonrpc: literal("2.0"),
    id: string(),
    result
  }), type({
    jsonrpc: literal("2.0"),
    id: string(),
    error: type({
      code: unknown(),
      message: string(),
      data: optional(any())
    })
  })]);
}
function jsonRpcResult(schema) {
  return coerce(createRpcResult(schema), UnknownRpcResult, (value) => {
    if ("error" in value) {
      return value;
    } else {
      return {
        ...value,
        result: create(value.result, schema)
      };
    }
  });
}
function jsonRpcResultAndContext(value) {
  return jsonRpcResult(type({
    context: type({
      slot: number()
    }),
    value
  }));
}
function notificationResultAndContext(value) {
  return type({
    context: type({
      slot: number()
    }),
    value
  });
}
function versionedMessageFromResponse(version2, response) {
  if (version2 === 0) {
    return new MessageV0({
      header: response.header,
      staticAccountKeys: response.accountKeys.map((accountKey) => new PublicKey(accountKey)),
      recentBlockhash: response.recentBlockhash,
      compiledInstructions: response.instructions.map((ix) => ({
        programIdIndex: ix.programIdIndex,
        accountKeyIndexes: ix.accounts,
        data: import_bs58.default.decode(ix.data)
      })),
      addressTableLookups: response.addressTableLookups
    });
  } else {
    return new Message(response);
  }
}
function createRpcClient(url, httpHeaders, customFetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent) {
  const fetch2 = customFetch ? customFetch : fetchImpl;
  let agent;
  {
    if (httpAgent != null) {
      console.warn("You have supplied an `httpAgent` when creating a `Connection` in a browser environment.It has been ignored; `httpAgent` is only used in Node environments.");
    }
  }
  let fetchWithMiddleware;
  if (fetchMiddleware) {
    fetchWithMiddleware = async (info, init) => {
      const modifiedFetchArgs = await new Promise((resolve, reject) => {
        try {
          fetchMiddleware(info, init, (modifiedInfo, modifiedInit) => resolve([modifiedInfo, modifiedInit]));
        } catch (error) {
          reject(error);
        }
      });
      return await fetch2(...modifiedFetchArgs);
    };
  }
  const clientBrowser = new import_browser.default(async (request, callback) => {
    const options = {
      method: "POST",
      body: request,
      agent,
      headers: Object.assign({
        "Content-Type": "application/json"
      }, httpHeaders || {}, COMMON_HTTP_HEADERS)
    };
    try {
      let too_many_requests_retries = 5;
      let res;
      let waitTime = 500;
      for (; ; ) {
        if (fetchWithMiddleware) {
          res = await fetchWithMiddleware(url, options);
        } else {
          res = await fetch2(url, options);
        }
        if (res.status !== 429) {
          break;
        }
        if (disableRetryOnRateLimit === true) {
          break;
        }
        too_many_requests_retries -= 1;
        if (too_many_requests_retries === 0) {
          break;
        }
        console.error(`Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`);
        await sleep(waitTime);
        waitTime *= 2;
      }
      const text = await res.text();
      if (res.ok) {
        callback(null, text);
      } else {
        callback(new Error(`${res.status} ${res.statusText}: ${text}`));
      }
    } catch (err) {
      if (err instanceof Error) callback(err);
    }
  }, {});
  return clientBrowser;
}
function createRpcRequest(client) {
  return (method2, args) => {
    return new Promise((resolve, reject) => {
      client.request(method2, args, (err, response) => {
        if (err) {
          reject(err);
          return;
        }
        resolve(response);
      });
    });
  };
}
function createRpcBatchRequest(client) {
  return (requests) => {
    return new Promise((resolve, reject) => {
      if (requests.length === 0) resolve([]);
      const batch = requests.map((params) => {
        return client.request(params.methodName, params.args);
      });
      client.request(batch, (err, response) => {
        if (err) {
          reject(err);
          return;
        }
        resolve(response);
      });
    });
  };
}
function parseAuthorizedVoter({
  authorizedVoter,
  epoch
}) {
  return {
    epoch,
    authorizedVoter: new PublicKey(authorizedVoter)
  };
}
function parsePriorVoters({
  authorizedPubkey,
  epochOfLastAuthorizedSwitch,
  targetEpoch
}) {
  return {
    authorizedPubkey: new PublicKey(authorizedPubkey),
    epochOfLastAuthorizedSwitch,
    targetEpoch
  };
}
function getPriorVoters({
  buf,
  idx,
  isEmpty
}) {
  if (isEmpty) {
    return [];
  }
  return [...buf.slice(idx + 1).map(parsePriorVoters), ...buf.slice(0, idx).map(parsePriorVoters)];
}
function clusterApiUrl(cluster, tls) {
  const key = tls === false ? "http" : "https";
  if (!cluster) {
    return endpoint[key]["devnet"];
  }
  const url = endpoint[key][cluster];
  if (!url) {
    throw new Error(`Unknown ${key} cluster: ${cluster}`);
  }
  return url;
}
async function sendAndConfirmRawTransaction(connection, rawTransaction, confirmationStrategyOrConfirmOptions, maybeConfirmOptions) {
  let confirmationStrategy;
  let options;
  if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, "lastValidBlockHeight")) {
    confirmationStrategy = confirmationStrategyOrConfirmOptions;
    options = maybeConfirmOptions;
  } else if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, "nonceValue")) {
    confirmationStrategy = confirmationStrategyOrConfirmOptions;
    options = maybeConfirmOptions;
  } else {
    options = confirmationStrategyOrConfirmOptions;
  }
  const sendOptions = options && {
    skipPreflight: options.skipPreflight,
    preflightCommitment: options.preflightCommitment || options.commitment,
    minContextSlot: options.minContextSlot
  };
  const signature2 = await connection.sendRawTransaction(rawTransaction, sendOptions);
  const commitment = options && options.commitment;
  const confirmationPromise = confirmationStrategy ? connection.confirmTransaction(confirmationStrategy, commitment) : connection.confirmTransaction(signature2, commitment);
  const status = (await confirmationPromise).value;
  if (status.err) {
    if (signature2 != null) {
      throw new SendTransactionError({
        action: (sendOptions == null ? void 0 : sendOptions.skipPreflight) ? "send" : "simulate",
        signature: signature2,
        transactionMessage: `Status: (${JSON.stringify(status)})`
      });
    }
    throw new Error(`Raw transaction ${signature2} failed (${JSON.stringify(status)})`);
  }
  return signature2;
}
var import_buffer2, import_bn, import_bs58, import_borsh, BufferLayout, import_buffer_layout, import_browser, generatePrivateKey, generateKeypair, getPublicKey, sign, verify, toBuffer, Struct2, Enum, SOLANA_SCHEMA, _PublicKey, MAX_SEED_LENGTH, PUBLIC_KEY_LENGTH, uniquePublicKeyCounter, PublicKey, Account, BPF_LOADER_DEPRECATED_PROGRAM_ID, PACKET_DATA_SIZE, VERSION_PREFIX_MASK, SIGNATURE_LENGTH_IN_BYTES, TransactionExpiredBlockheightExceededError, TransactionExpiredTimeoutError, TransactionExpiredNonceInvalidError, MessageAccountKeys, publicKey, signature, rustString, authorized, lockup, voteInit, voteAuthorizeWithSeedArgs, CompiledKeys, END_OF_BUFFER_ERROR_MESSAGE, Message, MessageV0, VersionedMessage, TransactionStatus, DEFAULT_SIGNATURE, TransactionInstruction, Transaction, TransactionMessage, VersionedTransaction, NUM_TICKS_PER_SECOND, DEFAULT_TICKS_PER_SLOT, NUM_SLOTS_PER_SECOND, MS_PER_SLOT, SYSVAR_CLOCK_PUBKEY, SYSVAR_EPOCH_SCHEDULE_PUBKEY, SYSVAR_INSTRUCTIONS_PUBKEY, SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY, SYSVAR_REWARDS_PUBKEY, SYSVAR_SLOT_HASHES_PUBKEY, SYSVAR_SLOT_HISTORY_PUBKEY, SYSVAR_STAKE_HISTORY_PUBKEY, SendTransactionError, SolanaJSONRPCErrorCode, SolanaJSONRPCError, FeeCalculatorLayout, NonceAccountLayout, NONCE_ACCOUNT_LENGTH, NonceAccount, SystemInstruction, SYSTEM_INSTRUCTION_LAYOUTS, SystemProgram, CHUNK_SIZE, Loader, BPF_LOADER_PROGRAM_ID, BpfLoader, fastStableStringify$1, hasRequiredFastStableStringify, fastStableStringifyExports, fastStableStringify, MINIMUM_SLOT_PER_EPOCH, EpochSchedule, fetchImpl, RpcWebSocketClient, LOOKUP_TABLE_META_SIZE, AddressLookupTableAccount, LookupTableMetaLayout, URL_RE, PublicKeyFromString, RawAccountDataResult, BufferFromRawAccountData, BLOCKHASH_CACHE_TIMEOUT_MS, UnknownRpcResult, GetInflationGovernorResult, GetInflationRewardResult, GetRecentPrioritizationFeesResult, GetInflationRateResult, GetEpochInfoResult, GetEpochScheduleResult, GetLeaderScheduleResult, TransactionErrorResult, SignatureStatusResult, SignatureReceivedResult, VersionResult, ParsedInstructionStruct, PartiallyDecodedInstructionStruct, SimulatedTransactionResponseStruct, BlockProductionResponseStruct, GetInflationGovernorRpcResult, GetInflationRateRpcResult, GetRecentPrioritizationFeesRpcResult, GetEpochInfoRpcResult, GetEpochScheduleRpcResult, GetLeaderScheduleRpcResult, SlotRpcResult, GetSupplyRpcResult, TokenAmountResult, GetTokenLargestAccountsResult, GetTokenAccountsByOwner, ParsedAccountDataResult, GetParsedTokenAccountsByOwner, GetLargestAccountsRpcResult, AccountInfoResult, KeyedAccountInfoResult, ParsedOrRawAccountData, ParsedAccountInfoResult, KeyedParsedAccountInfoResult, StakeActivationResult, GetConfirmedSignaturesForAddress2RpcResult, GetSignaturesForAddressRpcResult, AccountNotificationResult, ProgramAccountInfoResult, ProgramAccountNotificationResult, SlotInfoResult, SlotNotificationResult, SlotUpdateResult, SlotUpdateNotificationResult, SignatureNotificationResult, RootNotificationResult, ContactInfoResult, VoteAccountInfoResult, GetVoteAccounts, ConfirmationStatus, SignatureStatusResponse, GetSignatureStatusesRpcResult, GetMinimumBalanceForRentExemptionRpcResult, AddressTableLookupStruct, ConfirmedTransactionResult, AnnotatedAccountKey, ConfirmedTransactionAccountsModeResult, ParsedInstructionResult, RawInstructionResult, InstructionResult, UnknownInstructionResult, ParsedOrRawInstruction, ParsedConfirmedTransactionResult, TokenBalanceResult, LoadedAddressesResult, ConfirmedTransactionMetaResult, ParsedConfirmedTransactionMetaResult, TransactionVersionStruct, RewardsResult, GetBlockRpcResult, GetNoneModeBlockRpcResult, GetAccountsModeBlockRpcResult, GetParsedBlockRpcResult, GetParsedAccountsModeBlockRpcResult, GetParsedNoneModeBlockRpcResult, GetConfirmedBlockRpcResult, GetBlockSignaturesRpcResult, GetTransactionRpcResult, GetParsedTransactionRpcResult, GetLatestBlockhashRpcResult, IsBlockhashValidRpcResult, PerfSampleResult, GetRecentPerformanceSamplesRpcResult, GetFeeCalculatorRpcResult, RequestAirdropRpcResult, SendTransactionRpcResult, LogsResult, LogsNotificationResult, COMMON_HTTP_HEADERS, Connection, Keypair, LOOKUP_TABLE_INSTRUCTION_LAYOUTS, AddressLookupTableInstruction, AddressLookupTableProgram, ComputeBudgetInstruction, COMPUTE_BUDGET_INSTRUCTION_LAYOUTS, ComputeBudgetProgram, PRIVATE_KEY_BYTES$1, PUBLIC_KEY_BYTES$1, SIGNATURE_BYTES, ED25519_INSTRUCTION_LAYOUT, Ed25519Program, ecdsaSign, publicKeyCreate, PRIVATE_KEY_BYTES, ETHEREUM_ADDRESS_BYTES, PUBLIC_KEY_BYTES, SIGNATURE_OFFSETS_SERIALIZED_SIZE, SECP256K1_INSTRUCTION_LAYOUT, Secp256k1Program, _Lockup, STAKE_CONFIG_ID, Authorized, Lockup, StakeInstruction, STAKE_INSTRUCTION_LAYOUTS, StakeAuthorizationLayout, StakeProgram, VoteInit, VoteInstruction, VOTE_INSTRUCTION_LAYOUTS, VoteAuthorizationLayout, VoteProgram, VALIDATOR_INFO_KEY, InfoString, ValidatorInfo, VOTE_PROGRAM_ID, VoteAccountLayout, VoteAccount, endpoint, LAMPORTS_PER_SOL;
var init_index_browser_esm = __esm({
  "node_modules/@solana/web3.js/lib/index.browser.esm.js"() {
    import_buffer2 = __toESM(require_buffer2());
    init_ed25519();
    import_bn = __toESM(require_bn());
    import_bs58 = __toESM(require_bs582());
    init_sha256();
    import_borsh = __toESM(require_lib7());
    BufferLayout = __toESM(require_Layout());
    import_buffer_layout = __toESM(require_Layout());
    init_index_browser3();
    init_dist();
    import_browser = __toESM(require_browser2());
    init_index_browser4();
    init_sha3();
    init_secp256k1();
    generatePrivateKey = ed25519.utils.randomPrivateKey;
    generateKeypair = () => {
      const privateScalar = ed25519.utils.randomPrivateKey();
      const publicKey2 = getPublicKey(privateScalar);
      const secretKey = new Uint8Array(64);
      secretKey.set(privateScalar);
      secretKey.set(publicKey2, 32);
      return {
        publicKey: publicKey2,
        secretKey
      };
    };
    getPublicKey = ed25519.getPublicKey;
    sign = (message, secretKey) => ed25519.sign(message, secretKey.slice(0, 32));
    verify = ed25519.verify;
    toBuffer = (arr) => {
      if (import_buffer2.Buffer.isBuffer(arr)) {
        return arr;
      } else if (arr instanceof Uint8Array) {
        return import_buffer2.Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);
      } else {
        return import_buffer2.Buffer.from(arr);
      }
    };
    Struct2 = class {
      constructor(properties) {
        Object.assign(this, properties);
      }
      encode() {
        return import_buffer2.Buffer.from((0, import_borsh.serialize)(SOLANA_SCHEMA, this));
      }
      static decode(data) {
        return (0, import_borsh.deserialize)(SOLANA_SCHEMA, this, data);
      }
      static decodeUnchecked(data) {
        return (0, import_borsh.deserializeUnchecked)(SOLANA_SCHEMA, this, data);
      }
    };
    Enum = class extends Struct2 {
      constructor(properties) {
        super(properties);
        this.enum = "";
        if (Object.keys(properties).length !== 1) {
          throw new Error("Enum can only take single value");
        }
        Object.keys(properties).map((key) => {
          this.enum = key;
        });
      }
    };
    SOLANA_SCHEMA = /* @__PURE__ */ new Map();
    MAX_SEED_LENGTH = 32;
    PUBLIC_KEY_LENGTH = 32;
    uniquePublicKeyCounter = 1;
    PublicKey = class _PublicKey2 extends Struct2 {
      /**
       * Create a new PublicKey object
       * @param value ed25519 public key as buffer or base-58 encoded string
       */
      constructor(value) {
        super({});
        this._bn = void 0;
        if (isPublicKeyData(value)) {
          this._bn = value._bn;
        } else {
          if (typeof value === "string") {
            const decoded = import_bs58.default.decode(value);
            if (decoded.length != PUBLIC_KEY_LENGTH) {
              throw new Error(`Invalid public key input`);
            }
            this._bn = new import_bn.default(decoded);
          } else {
            this._bn = new import_bn.default(value);
          }
          if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {
            throw new Error(`Invalid public key input`);
          }
        }
      }
      /**
       * Returns a unique PublicKey for tests and benchmarks using a counter
       */
      static unique() {
        const key = new _PublicKey2(uniquePublicKeyCounter);
        uniquePublicKeyCounter += 1;
        return new _PublicKey2(key.toBuffer());
      }
      /**
       * Default public key value. The base58-encoded string representation is all ones (as seen below)
       * The underlying BN number is 32 bytes that are all zeros
       */
      /**
       * Checks if two publicKeys are equal
       */
      equals(publicKey2) {
        return this._bn.eq(publicKey2._bn);
      }
      /**
       * Return the base-58 representation of the public key
       */
      toBase58() {
        return import_bs58.default.encode(this.toBytes());
      }
      toJSON() {
        return this.toBase58();
      }
      /**
       * Return the byte array representation of the public key in big endian
       */
      toBytes() {
        const buf = this.toBuffer();
        return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
      }
      /**
       * Return the Buffer representation of the public key in big endian
       */
      toBuffer() {
        const b = this._bn.toArrayLike(import_buffer2.Buffer);
        if (b.length === PUBLIC_KEY_LENGTH) {
          return b;
        }
        const zeroPad = import_buffer2.Buffer.alloc(32);
        b.copy(zeroPad, 32 - b.length);
        return zeroPad;
      }
      get [Symbol.toStringTag]() {
        return `PublicKey(${this.toString()})`;
      }
      /**
       * Return the base-58 representation of the public key
       */
      toString() {
        return this.toBase58();
      }
      /**
       * Derive a public key from another key, a seed, and a program ID.
       * The program ID will also serve as the owner of the public key, giving
       * it permission to write data to the account.
       */
      /* eslint-disable require-await */
      static async createWithSeed(fromPublicKey, seed, programId) {
        const buffer = import_buffer2.Buffer.concat([fromPublicKey.toBuffer(), import_buffer2.Buffer.from(seed), programId.toBuffer()]);
        const publicKeyBytes = sha2562(buffer);
        return new _PublicKey2(publicKeyBytes);
      }
      /**
       * Derive a program address from seeds and a program ID.
       */
      /* eslint-disable require-await */
      static createProgramAddressSync(seeds, programId) {
        let buffer = import_buffer2.Buffer.alloc(0);
        seeds.forEach(function(seed) {
          if (seed.length > MAX_SEED_LENGTH) {
            throw new TypeError(`Max seed length exceeded`);
          }
          buffer = import_buffer2.Buffer.concat([buffer, toBuffer(seed)]);
        });
        buffer = import_buffer2.Buffer.concat([buffer, programId.toBuffer(), import_buffer2.Buffer.from("ProgramDerivedAddress")]);
        const publicKeyBytes = sha2562(buffer);
        if (isOnCurve(publicKeyBytes)) {
          throw new Error(`Invalid seeds, address must fall off the curve`);
        }
        return new _PublicKey2(publicKeyBytes);
      }
      /**
       * Async version of createProgramAddressSync
       * For backwards compatibility
       *
       * @deprecated Use {@link createProgramAddressSync} instead
       */
      /* eslint-disable require-await */
      static async createProgramAddress(seeds, programId) {
        return this.createProgramAddressSync(seeds, programId);
      }
      /**
       * Find a valid program address
       *
       * Valid program addresses must fall off the ed25519 curve.  This function
       * iterates a nonce until it finds one that when combined with the seeds
       * results in a valid program address.
       */
      static findProgramAddressSync(seeds, programId) {
        let nonce = 255;
        let address;
        while (nonce != 0) {
          try {
            const seedsWithNonce = seeds.concat(import_buffer2.Buffer.from([nonce]));
            address = this.createProgramAddressSync(seedsWithNonce, programId);
          } catch (err) {
            if (err instanceof TypeError) {
              throw err;
            }
            nonce--;
            continue;
          }
          return [address, nonce];
        }
        throw new Error(`Unable to find a viable program address nonce`);
      }
      /**
       * Async version of findProgramAddressSync
       * For backwards compatibility
       *
       * @deprecated Use {@link findProgramAddressSync} instead
       */
      static async findProgramAddress(seeds, programId) {
        return this.findProgramAddressSync(seeds, programId);
      }
      /**
       * Check that a pubkey is on the ed25519 curve.
       */
      static isOnCurve(pubkeyData) {
        const pubkey = new _PublicKey2(pubkeyData);
        return isOnCurve(pubkey.toBytes());
      }
    };
    _PublicKey = PublicKey;
    PublicKey.default = new _PublicKey("11111111111111111111111111111111");
    SOLANA_SCHEMA.set(PublicKey, {
      kind: "struct",
      fields: [["_bn", "u256"]]
    });
    Account = class {
      /**
       * Create a new Account object
       *
       * If the secretKey parameter is not provided a new key pair is randomly
       * created for the account
       *
       * @param secretKey Secret key for the account
       */
      constructor(secretKey) {
        this._publicKey = void 0;
        this._secretKey = void 0;
        if (secretKey) {
          const secretKeyBuffer = toBuffer(secretKey);
          if (secretKey.length !== 64) {
            throw new Error("bad secret key size");
          }
          this._publicKey = secretKeyBuffer.slice(32, 64);
          this._secretKey = secretKeyBuffer.slice(0, 32);
        } else {
          this._secretKey = toBuffer(generatePrivateKey());
          this._publicKey = toBuffer(getPublicKey(this._secretKey));
        }
      }
      /**
       * The public key for this account
       */
      get publicKey() {
        return new PublicKey(this._publicKey);
      }
      /**
       * The **unencrypted** secret key for this account. The first 32 bytes
       * is the private scalar and the last 32 bytes is the public key.
       * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/
       */
      get secretKey() {
        return import_buffer2.Buffer.concat([this._secretKey, this._publicKey], 64);
      }
    };
    BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey("BPFLoader1111111111111111111111111111111111");
    PACKET_DATA_SIZE = 1280 - 40 - 8;
    VERSION_PREFIX_MASK = 127;
    SIGNATURE_LENGTH_IN_BYTES = 64;
    TransactionExpiredBlockheightExceededError = class extends Error {
      constructor(signature2) {
        super(`Signature ${signature2} has expired: block height exceeded.`);
        this.signature = void 0;
        this.signature = signature2;
      }
    };
    Object.defineProperty(TransactionExpiredBlockheightExceededError.prototype, "name", {
      value: "TransactionExpiredBlockheightExceededError"
    });
    TransactionExpiredTimeoutError = class extends Error {
      constructor(signature2, timeoutSeconds) {
        super(`Transaction was not confirmed in ${timeoutSeconds.toFixed(2)} seconds. It is unknown if it succeeded or failed. Check signature ${signature2} using the Solana Explorer or CLI tools.`);
        this.signature = void 0;
        this.signature = signature2;
      }
    };
    Object.defineProperty(TransactionExpiredTimeoutError.prototype, "name", {
      value: "TransactionExpiredTimeoutError"
    });
    TransactionExpiredNonceInvalidError = class extends Error {
      constructor(signature2) {
        super(`Signature ${signature2} has expired: the nonce is no longer valid.`);
        this.signature = void 0;
        this.signature = signature2;
      }
    };
    Object.defineProperty(TransactionExpiredNonceInvalidError.prototype, "name", {
      value: "TransactionExpiredNonceInvalidError"
    });
    MessageAccountKeys = class {
      constructor(staticAccountKeys, accountKeysFromLookups) {
        this.staticAccountKeys = void 0;
        this.accountKeysFromLookups = void 0;
        this.staticAccountKeys = staticAccountKeys;
        this.accountKeysFromLookups = accountKeysFromLookups;
      }
      keySegments() {
        const keySegments = [this.staticAccountKeys];
        if (this.accountKeysFromLookups) {
          keySegments.push(this.accountKeysFromLookups.writable);
          keySegments.push(this.accountKeysFromLookups.readonly);
        }
        return keySegments;
      }
      get(index) {
        for (const keySegment of this.keySegments()) {
          if (index < keySegment.length) {
            return keySegment[index];
          } else {
            index -= keySegment.length;
          }
        }
        return;
      }
      get length() {
        return this.keySegments().flat().length;
      }
      compileInstructions(instructions) {
        const U8_MAX = 255;
        if (this.length > U8_MAX + 1) {
          throw new Error("Account index overflow encountered during compilation");
        }
        const keyIndexMap = /* @__PURE__ */ new Map();
        this.keySegments().flat().forEach((key, index) => {
          keyIndexMap.set(key.toBase58(), index);
        });
        const findKeyIndex = (key) => {
          const keyIndex = keyIndexMap.get(key.toBase58());
          if (keyIndex === void 0) throw new Error("Encountered an unknown instruction account key during compilation");
          return keyIndex;
        };
        return instructions.map((instruction) => {
          return {
            programIdIndex: findKeyIndex(instruction.programId),
            accountKeyIndexes: instruction.keys.map((meta) => findKeyIndex(meta.pubkey)),
            data: instruction.data
          };
        });
      }
    };
    publicKey = (property = "publicKey") => {
      return BufferLayout.blob(32, property);
    };
    signature = (property = "signature") => {
      return BufferLayout.blob(64, property);
    };
    rustString = (property = "string") => {
      const rsl = BufferLayout.struct([BufferLayout.u32("length"), BufferLayout.u32("lengthPadding"), BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), "chars")], property);
      const _decode = rsl.decode.bind(rsl);
      const _encode = rsl.encode.bind(rsl);
      const rslShim = rsl;
      rslShim.decode = (b, offset2) => {
        const data = _decode(b, offset2);
        return data["chars"].toString();
      };
      rslShim.encode = (str, b, offset2) => {
        const data = {
          chars: import_buffer2.Buffer.from(str, "utf8")
        };
        return _encode(data, b, offset2);
      };
      rslShim.alloc = (str) => {
        return BufferLayout.u32().span + BufferLayout.u32().span + import_buffer2.Buffer.from(str, "utf8").length;
      };
      return rslShim;
    };
    authorized = (property = "authorized") => {
      return BufferLayout.struct([publicKey("staker"), publicKey("withdrawer")], property);
    };
    lockup = (property = "lockup") => {
      return BufferLayout.struct([BufferLayout.ns64("unixTimestamp"), BufferLayout.ns64("epoch"), publicKey("custodian")], property);
    };
    voteInit = (property = "voteInit") => {
      return BufferLayout.struct([publicKey("nodePubkey"), publicKey("authorizedVoter"), publicKey("authorizedWithdrawer"), BufferLayout.u8("commission")], property);
    };
    voteAuthorizeWithSeedArgs = (property = "voteAuthorizeWithSeedArgs") => {
      return BufferLayout.struct([BufferLayout.u32("voteAuthorizationType"), publicKey("currentAuthorityDerivedKeyOwnerPubkey"), rustString("currentAuthorityDerivedKeySeed"), publicKey("newAuthorized")], property);
    };
    CompiledKeys = class _CompiledKeys {
      constructor(payer, keyMetaMap) {
        this.payer = void 0;
        this.keyMetaMap = void 0;
        this.payer = payer;
        this.keyMetaMap = keyMetaMap;
      }
      static compile(instructions, payer) {
        const keyMetaMap = /* @__PURE__ */ new Map();
        const getOrInsertDefault = (pubkey) => {
          const address = pubkey.toBase58();
          let keyMeta = keyMetaMap.get(address);
          if (keyMeta === void 0) {
            keyMeta = {
              isSigner: false,
              isWritable: false,
              isInvoked: false
            };
            keyMetaMap.set(address, keyMeta);
          }
          return keyMeta;
        };
        const payerKeyMeta = getOrInsertDefault(payer);
        payerKeyMeta.isSigner = true;
        payerKeyMeta.isWritable = true;
        for (const ix of instructions) {
          getOrInsertDefault(ix.programId).isInvoked = true;
          for (const accountMeta of ix.keys) {
            const keyMeta = getOrInsertDefault(accountMeta.pubkey);
            keyMeta.isSigner || (keyMeta.isSigner = accountMeta.isSigner);
            keyMeta.isWritable || (keyMeta.isWritable = accountMeta.isWritable);
          }
        }
        return new _CompiledKeys(payer, keyMetaMap);
      }
      getMessageComponents() {
        const mapEntries = [...this.keyMetaMap.entries()];
        assert2(mapEntries.length <= 256, "Max static account keys length exceeded");
        const writableSigners = mapEntries.filter(([, meta]) => meta.isSigner && meta.isWritable);
        const readonlySigners = mapEntries.filter(([, meta]) => meta.isSigner && !meta.isWritable);
        const writableNonSigners = mapEntries.filter(([, meta]) => !meta.isSigner && meta.isWritable);
        const readonlyNonSigners = mapEntries.filter(([, meta]) => !meta.isSigner && !meta.isWritable);
        const header = {
          numRequiredSignatures: writableSigners.length + readonlySigners.length,
          numReadonlySignedAccounts: readonlySigners.length,
          numReadonlyUnsignedAccounts: readonlyNonSigners.length
        };
        {
          assert2(writableSigners.length > 0, "Expected at least one writable signer key");
          const [payerAddress] = writableSigners[0];
          assert2(payerAddress === this.payer.toBase58(), "Expected first writable signer key to be the fee payer");
        }
        const staticAccountKeys = [...writableSigners.map(([address]) => new PublicKey(address)), ...readonlySigners.map(([address]) => new PublicKey(address)), ...writableNonSigners.map(([address]) => new PublicKey(address)), ...readonlyNonSigners.map(([address]) => new PublicKey(address))];
        return [header, staticAccountKeys];
      }
      extractTableLookup(lookupTable) {
        const [writableIndexes, drainedWritableKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, (keyMeta) => !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable);
        const [readonlyIndexes, drainedReadonlyKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, (keyMeta) => !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable);
        if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {
          return;
        }
        return [{
          accountKey: lookupTable.key,
          writableIndexes,
          readonlyIndexes
        }, {
          writable: drainedWritableKeys,
          readonly: drainedReadonlyKeys
        }];
      }
      /** @internal */
      drainKeysFoundInLookupTable(lookupTableEntries, keyMetaFilter) {
        const lookupTableIndexes = new Array();
        const drainedKeys = new Array();
        for (const [address, keyMeta] of this.keyMetaMap.entries()) {
          if (keyMetaFilter(keyMeta)) {
            const key = new PublicKey(address);
            const lookupTableIndex = lookupTableEntries.findIndex((entry) => entry.equals(key));
            if (lookupTableIndex >= 0) {
              assert2(lookupTableIndex < 256, "Max lookup table index exceeded");
              lookupTableIndexes.push(lookupTableIndex);
              drainedKeys.push(key);
              this.keyMetaMap.delete(address);
            }
          }
        }
        return [lookupTableIndexes, drainedKeys];
      }
    };
    END_OF_BUFFER_ERROR_MESSAGE = "Reached end of buffer unexpectedly";
    Message = class _Message {
      constructor(args) {
        this.header = void 0;
        this.accountKeys = void 0;
        this.recentBlockhash = void 0;
        this.instructions = void 0;
        this.indexToProgramIds = /* @__PURE__ */ new Map();
        this.header = args.header;
        this.accountKeys = args.accountKeys.map((account) => new PublicKey(account));
        this.recentBlockhash = args.recentBlockhash;
        this.instructions = args.instructions;
        this.instructions.forEach((ix) => this.indexToProgramIds.set(ix.programIdIndex, this.accountKeys[ix.programIdIndex]));
      }
      get version() {
        return "legacy";
      }
      get staticAccountKeys() {
        return this.accountKeys;
      }
      get compiledInstructions() {
        return this.instructions.map((ix) => ({
          programIdIndex: ix.programIdIndex,
          accountKeyIndexes: ix.accounts,
          data: import_bs58.default.decode(ix.data)
        }));
      }
      get addressTableLookups() {
        return [];
      }
      getAccountKeys() {
        return new MessageAccountKeys(this.staticAccountKeys);
      }
      static compile(args) {
        const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);
        const [header, staticAccountKeys] = compiledKeys.getMessageComponents();
        const accountKeys = new MessageAccountKeys(staticAccountKeys);
        const instructions = accountKeys.compileInstructions(args.instructions).map((ix) => ({
          programIdIndex: ix.programIdIndex,
          accounts: ix.accountKeyIndexes,
          data: import_bs58.default.encode(ix.data)
        }));
        return new _Message({
          header,
          accountKeys: staticAccountKeys,
          recentBlockhash: args.recentBlockhash,
          instructions
        });
      }
      isAccountSigner(index) {
        return index < this.header.numRequiredSignatures;
      }
      isAccountWritable(index) {
        const numSignedAccounts = this.header.numRequiredSignatures;
        if (index >= this.header.numRequiredSignatures) {
          const unsignedAccountIndex = index - numSignedAccounts;
          const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;
          const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;
          return unsignedAccountIndex < numWritableUnsignedAccounts;
        } else {
          const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;
          return index < numWritableSignedAccounts;
        }
      }
      isProgramId(index) {
        return this.indexToProgramIds.has(index);
      }
      programIds() {
        return [...this.indexToProgramIds.values()];
      }
      nonProgramIds() {
        return this.accountKeys.filter((_, index) => !this.isProgramId(index));
      }
      serialize() {
        const numKeys = this.accountKeys.length;
        let keyCount = [];
        encodeLength(keyCount, numKeys);
        const instructions = this.instructions.map((instruction) => {
          const {
            accounts,
            programIdIndex
          } = instruction;
          const data = Array.from(import_bs58.default.decode(instruction.data));
          let keyIndicesCount = [];
          encodeLength(keyIndicesCount, accounts.length);
          let dataCount = [];
          encodeLength(dataCount, data.length);
          return {
            programIdIndex,
            keyIndicesCount: import_buffer2.Buffer.from(keyIndicesCount),
            keyIndices: accounts,
            dataLength: import_buffer2.Buffer.from(dataCount),
            data
          };
        });
        let instructionCount = [];
        encodeLength(instructionCount, instructions.length);
        let instructionBuffer = import_buffer2.Buffer.alloc(PACKET_DATA_SIZE);
        import_buffer2.Buffer.from(instructionCount).copy(instructionBuffer);
        let instructionBufferLength = instructionCount.length;
        instructions.forEach((instruction) => {
          const instructionLayout = BufferLayout.struct([BufferLayout.u8("programIdIndex"), BufferLayout.blob(instruction.keyIndicesCount.length, "keyIndicesCount"), BufferLayout.seq(BufferLayout.u8("keyIndex"), instruction.keyIndices.length, "keyIndices"), BufferLayout.blob(instruction.dataLength.length, "dataLength"), BufferLayout.seq(BufferLayout.u8("userdatum"), instruction.data.length, "data")]);
          const length2 = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);
          instructionBufferLength += length2;
        });
        instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);
        const signDataLayout = BufferLayout.struct([BufferLayout.blob(1, "numRequiredSignatures"), BufferLayout.blob(1, "numReadonlySignedAccounts"), BufferLayout.blob(1, "numReadonlyUnsignedAccounts"), BufferLayout.blob(keyCount.length, "keyCount"), BufferLayout.seq(publicKey("key"), numKeys, "keys"), publicKey("recentBlockhash")]);
        const transaction = {
          numRequiredSignatures: import_buffer2.Buffer.from([this.header.numRequiredSignatures]),
          numReadonlySignedAccounts: import_buffer2.Buffer.from([this.header.numReadonlySignedAccounts]),
          numReadonlyUnsignedAccounts: import_buffer2.Buffer.from([this.header.numReadonlyUnsignedAccounts]),
          keyCount: import_buffer2.Buffer.from(keyCount),
          keys: this.accountKeys.map((key) => toBuffer(key.toBytes())),
          recentBlockhash: import_bs58.default.decode(this.recentBlockhash)
        };
        let signData = import_buffer2.Buffer.alloc(2048);
        const length = signDataLayout.encode(transaction, signData);
        instructionBuffer.copy(signData, length);
        return signData.slice(0, length + instructionBuffer.length);
      }
      /**
       * Decode a compiled message into a Message object.
       */
      static from(buffer) {
        let byteArray = [...buffer];
        const numRequiredSignatures = guardedShift(byteArray);
        if (numRequiredSignatures !== (numRequiredSignatures & VERSION_PREFIX_MASK)) {
          throw new Error("Versioned messages must be deserialized with VersionedMessage.deserialize()");
        }
        const numReadonlySignedAccounts = guardedShift(byteArray);
        const numReadonlyUnsignedAccounts = guardedShift(byteArray);
        const accountCount = decodeLength(byteArray);
        let accountKeys = [];
        for (let i = 0; i < accountCount; i++) {
          const account = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);
          accountKeys.push(new PublicKey(import_buffer2.Buffer.from(account)));
        }
        const recentBlockhash = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);
        const instructionCount = decodeLength(byteArray);
        let instructions = [];
        for (let i = 0; i < instructionCount; i++) {
          const programIdIndex = guardedShift(byteArray);
          const accountCount2 = decodeLength(byteArray);
          const accounts = guardedSplice(byteArray, 0, accountCount2);
          const dataLength = decodeLength(byteArray);
          const dataSlice = guardedSplice(byteArray, 0, dataLength);
          const data = import_bs58.default.encode(import_buffer2.Buffer.from(dataSlice));
          instructions.push({
            programIdIndex,
            accounts,
            data
          });
        }
        const messageArgs = {
          header: {
            numRequiredSignatures,
            numReadonlySignedAccounts,
            numReadonlyUnsignedAccounts
          },
          recentBlockhash: import_bs58.default.encode(import_buffer2.Buffer.from(recentBlockhash)),
          accountKeys,
          instructions
        };
        return new _Message(messageArgs);
      }
    };
    MessageV0 = class _MessageV0 {
      constructor(args) {
        this.header = void 0;
        this.staticAccountKeys = void 0;
        this.recentBlockhash = void 0;
        this.compiledInstructions = void 0;
        this.addressTableLookups = void 0;
        this.header = args.header;
        this.staticAccountKeys = args.staticAccountKeys;
        this.recentBlockhash = args.recentBlockhash;
        this.compiledInstructions = args.compiledInstructions;
        this.addressTableLookups = args.addressTableLookups;
      }
      get version() {
        return 0;
      }
      get numAccountKeysFromLookups() {
        let count = 0;
        for (const lookup of this.addressTableLookups) {
          count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;
        }
        return count;
      }
      getAccountKeys(args) {
        let accountKeysFromLookups;
        if (args && "accountKeysFromLookups" in args && args.accountKeysFromLookups) {
          if (this.numAccountKeysFromLookups != args.accountKeysFromLookups.writable.length + args.accountKeysFromLookups.readonly.length) {
            throw new Error("Failed to get account keys because of a mismatch in the number of account keys from lookups");
          }
          accountKeysFromLookups = args.accountKeysFromLookups;
        } else if (args && "addressLookupTableAccounts" in args && args.addressLookupTableAccounts) {
          accountKeysFromLookups = this.resolveAddressTableLookups(args.addressLookupTableAccounts);
        } else if (this.addressTableLookups.length > 0) {
          throw new Error("Failed to get account keys because address table lookups were not resolved");
        }
        return new MessageAccountKeys(this.staticAccountKeys, accountKeysFromLookups);
      }
      isAccountSigner(index) {
        return index < this.header.numRequiredSignatures;
      }
      isAccountWritable(index) {
        const numSignedAccounts = this.header.numRequiredSignatures;
        const numStaticAccountKeys = this.staticAccountKeys.length;
        if (index >= numStaticAccountKeys) {
          const lookupAccountKeysIndex = index - numStaticAccountKeys;
          const numWritableLookupAccountKeys = this.addressTableLookups.reduce((count, lookup) => count + lookup.writableIndexes.length, 0);
          return lookupAccountKeysIndex < numWritableLookupAccountKeys;
        } else if (index >= this.header.numRequiredSignatures) {
          const unsignedAccountIndex = index - numSignedAccounts;
          const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;
          const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;
          return unsignedAccountIndex < numWritableUnsignedAccounts;
        } else {
          const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;
          return index < numWritableSignedAccounts;
        }
      }
      resolveAddressTableLookups(addressLookupTableAccounts) {
        const accountKeysFromLookups = {
          writable: [],
          readonly: []
        };
        for (const tableLookup of this.addressTableLookups) {
          const tableAccount = addressLookupTableAccounts.find((account) => account.key.equals(tableLookup.accountKey));
          if (!tableAccount) {
            throw new Error(`Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`);
          }
          for (const index of tableLookup.writableIndexes) {
            if (index < tableAccount.state.addresses.length) {
              accountKeysFromLookups.writable.push(tableAccount.state.addresses[index]);
            } else {
              throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);
            }
          }
          for (const index of tableLookup.readonlyIndexes) {
            if (index < tableAccount.state.addresses.length) {
              accountKeysFromLookups.readonly.push(tableAccount.state.addresses[index]);
            } else {
              throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);
            }
          }
        }
        return accountKeysFromLookups;
      }
      static compile(args) {
        const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);
        const addressTableLookups = new Array();
        const accountKeysFromLookups = {
          writable: new Array(),
          readonly: new Array()
        };
        const lookupTableAccounts = args.addressLookupTableAccounts || [];
        for (const lookupTable of lookupTableAccounts) {
          const extractResult = compiledKeys.extractTableLookup(lookupTable);
          if (extractResult !== void 0) {
            const [addressTableLookup, {
              writable,
              readonly
            }] = extractResult;
            addressTableLookups.push(addressTableLookup);
            accountKeysFromLookups.writable.push(...writable);
            accountKeysFromLookups.readonly.push(...readonly);
          }
        }
        const [header, staticAccountKeys] = compiledKeys.getMessageComponents();
        const accountKeys = new MessageAccountKeys(staticAccountKeys, accountKeysFromLookups);
        const compiledInstructions = accountKeys.compileInstructions(args.instructions);
        return new _MessageV0({
          header,
          staticAccountKeys,
          recentBlockhash: args.recentBlockhash,
          compiledInstructions,
          addressTableLookups
        });
      }
      serialize() {
        const encodedStaticAccountKeysLength = Array();
        encodeLength(encodedStaticAccountKeysLength, this.staticAccountKeys.length);
        const serializedInstructions = this.serializeInstructions();
        const encodedInstructionsLength = Array();
        encodeLength(encodedInstructionsLength, this.compiledInstructions.length);
        const serializedAddressTableLookups = this.serializeAddressTableLookups();
        const encodedAddressTableLookupsLength = Array();
        encodeLength(encodedAddressTableLookupsLength, this.addressTableLookups.length);
        const messageLayout = BufferLayout.struct([BufferLayout.u8("prefix"), BufferLayout.struct([BufferLayout.u8("numRequiredSignatures"), BufferLayout.u8("numReadonlySignedAccounts"), BufferLayout.u8("numReadonlyUnsignedAccounts")], "header"), BufferLayout.blob(encodedStaticAccountKeysLength.length, "staticAccountKeysLength"), BufferLayout.seq(publicKey(), this.staticAccountKeys.length, "staticAccountKeys"), publicKey("recentBlockhash"), BufferLayout.blob(encodedInstructionsLength.length, "instructionsLength"), BufferLayout.blob(serializedInstructions.length, "serializedInstructions"), BufferLayout.blob(encodedAddressTableLookupsLength.length, "addressTableLookupsLength"), BufferLayout.blob(serializedAddressTableLookups.length, "serializedAddressTableLookups")]);
        const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);
        const MESSAGE_VERSION_0_PREFIX = 1 << 7;
        const serializedMessageLength = messageLayout.encode({
          prefix: MESSAGE_VERSION_0_PREFIX,
          header: this.header,
          staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),
          staticAccountKeys: this.staticAccountKeys.map((key) => key.toBytes()),
          recentBlockhash: import_bs58.default.decode(this.recentBlockhash),
          instructionsLength: new Uint8Array(encodedInstructionsLength),
          serializedInstructions,
          addressTableLookupsLength: new Uint8Array(encodedAddressTableLookupsLength),
          serializedAddressTableLookups
        }, serializedMessage);
        return serializedMessage.slice(0, serializedMessageLength);
      }
      serializeInstructions() {
        let serializedLength = 0;
        const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);
        for (const instruction of this.compiledInstructions) {
          const encodedAccountKeyIndexesLength = Array();
          encodeLength(encodedAccountKeyIndexesLength, instruction.accountKeyIndexes.length);
          const encodedDataLength = Array();
          encodeLength(encodedDataLength, instruction.data.length);
          const instructionLayout = BufferLayout.struct([BufferLayout.u8("programIdIndex"), BufferLayout.blob(encodedAccountKeyIndexesLength.length, "encodedAccountKeyIndexesLength"), BufferLayout.seq(BufferLayout.u8(), instruction.accountKeyIndexes.length, "accountKeyIndexes"), BufferLayout.blob(encodedDataLength.length, "encodedDataLength"), BufferLayout.blob(instruction.data.length, "data")]);
          serializedLength += instructionLayout.encode({
            programIdIndex: instruction.programIdIndex,
            encodedAccountKeyIndexesLength: new Uint8Array(encodedAccountKeyIndexesLength),
            accountKeyIndexes: instruction.accountKeyIndexes,
            encodedDataLength: new Uint8Array(encodedDataLength),
            data: instruction.data
          }, serializedInstructions, serializedLength);
        }
        return serializedInstructions.slice(0, serializedLength);
      }
      serializeAddressTableLookups() {
        let serializedLength = 0;
        const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);
        for (const lookup of this.addressTableLookups) {
          const encodedWritableIndexesLength = Array();
          encodeLength(encodedWritableIndexesLength, lookup.writableIndexes.length);
          const encodedReadonlyIndexesLength = Array();
          encodeLength(encodedReadonlyIndexesLength, lookup.readonlyIndexes.length);
          const addressTableLookupLayout = BufferLayout.struct([publicKey("accountKey"), BufferLayout.blob(encodedWritableIndexesLength.length, "encodedWritableIndexesLength"), BufferLayout.seq(BufferLayout.u8(), lookup.writableIndexes.length, "writableIndexes"), BufferLayout.blob(encodedReadonlyIndexesLength.length, "encodedReadonlyIndexesLength"), BufferLayout.seq(BufferLayout.u8(), lookup.readonlyIndexes.length, "readonlyIndexes")]);
          serializedLength += addressTableLookupLayout.encode({
            accountKey: lookup.accountKey.toBytes(),
            encodedWritableIndexesLength: new Uint8Array(encodedWritableIndexesLength),
            writableIndexes: lookup.writableIndexes,
            encodedReadonlyIndexesLength: new Uint8Array(encodedReadonlyIndexesLength),
            readonlyIndexes: lookup.readonlyIndexes
          }, serializedAddressTableLookups, serializedLength);
        }
        return serializedAddressTableLookups.slice(0, serializedLength);
      }
      static deserialize(serializedMessage) {
        let byteArray = [...serializedMessage];
        const prefix = guardedShift(byteArray);
        const maskedPrefix = prefix & VERSION_PREFIX_MASK;
        assert2(prefix !== maskedPrefix, `Expected versioned message but received legacy message`);
        const version2 = maskedPrefix;
        assert2(version2 === 0, `Expected versioned message with version 0 but found version ${version2}`);
        const header = {
          numRequiredSignatures: guardedShift(byteArray),
          numReadonlySignedAccounts: guardedShift(byteArray),
          numReadonlyUnsignedAccounts: guardedShift(byteArray)
        };
        const staticAccountKeys = [];
        const staticAccountKeysLength = decodeLength(byteArray);
        for (let i = 0; i < staticAccountKeysLength; i++) {
          staticAccountKeys.push(new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH)));
        }
        const recentBlockhash = import_bs58.default.encode(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));
        const instructionCount = decodeLength(byteArray);
        const compiledInstructions = [];
        for (let i = 0; i < instructionCount; i++) {
          const programIdIndex = guardedShift(byteArray);
          const accountKeyIndexesLength = decodeLength(byteArray);
          const accountKeyIndexes = guardedSplice(byteArray, 0, accountKeyIndexesLength);
          const dataLength = decodeLength(byteArray);
          const data = new Uint8Array(guardedSplice(byteArray, 0, dataLength));
          compiledInstructions.push({
            programIdIndex,
            accountKeyIndexes,
            data
          });
        }
        const addressTableLookupsCount = decodeLength(byteArray);
        const addressTableLookups = [];
        for (let i = 0; i < addressTableLookupsCount; i++) {
          const accountKey = new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));
          const writableIndexesLength = decodeLength(byteArray);
          const writableIndexes = guardedSplice(byteArray, 0, writableIndexesLength);
          const readonlyIndexesLength = decodeLength(byteArray);
          const readonlyIndexes = guardedSplice(byteArray, 0, readonlyIndexesLength);
          addressTableLookups.push({
            accountKey,
            writableIndexes,
            readonlyIndexes
          });
        }
        return new _MessageV0({
          header,
          staticAccountKeys,
          recentBlockhash,
          compiledInstructions,
          addressTableLookups
        });
      }
    };
    VersionedMessage = {
      deserializeMessageVersion(serializedMessage) {
        const prefix = serializedMessage[0];
        const maskedPrefix = prefix & VERSION_PREFIX_MASK;
        if (maskedPrefix === prefix) {
          return "legacy";
        }
        return maskedPrefix;
      },
      deserialize: (serializedMessage) => {
        const version2 = VersionedMessage.deserializeMessageVersion(serializedMessage);
        if (version2 === "legacy") {
          return Message.from(serializedMessage);
        }
        if (version2 === 0) {
          return MessageV0.deserialize(serializedMessage);
        } else {
          throw new Error(`Transaction message version ${version2} deserialization is not supported`);
        }
      }
    };
    TransactionStatus = function(TransactionStatus2) {
      TransactionStatus2[TransactionStatus2["BLOCKHEIGHT_EXCEEDED"] = 0] = "BLOCKHEIGHT_EXCEEDED";
      TransactionStatus2[TransactionStatus2["PROCESSED"] = 1] = "PROCESSED";
      TransactionStatus2[TransactionStatus2["TIMED_OUT"] = 2] = "TIMED_OUT";
      TransactionStatus2[TransactionStatus2["NONCE_INVALID"] = 3] = "NONCE_INVALID";
      return TransactionStatus2;
    }({});
    DEFAULT_SIGNATURE = import_buffer2.Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);
    TransactionInstruction = class {
      constructor(opts) {
        this.keys = void 0;
        this.programId = void 0;
        this.data = import_buffer2.Buffer.alloc(0);
        this.programId = opts.programId;
        this.keys = opts.keys;
        if (opts.data) {
          this.data = opts.data;
        }
      }
      /**
       * @internal
       */
      toJSON() {
        return {
          keys: this.keys.map(({
            pubkey,
            isSigner,
            isWritable
          }) => ({
            pubkey: pubkey.toJSON(),
            isSigner,
            isWritable
          })),
          programId: this.programId.toJSON(),
          data: [...this.data]
        };
      }
    };
    Transaction = class _Transaction {
      /**
       * The first (payer) Transaction signature
       *
       * @returns {Buffer | null} Buffer of payer's signature
       */
      get signature() {
        if (this.signatures.length > 0) {
          return this.signatures[0].signature;
        }
        return null;
      }
      /**
       * The transaction fee payer
       */
      // Construct a transaction with a blockhash and lastValidBlockHeight
      // Construct a transaction using a durable nonce
      /**
       * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.
       * Please supply a `TransactionBlockhashCtor` instead.
       */
      /**
       * Construct an empty Transaction
       */
      constructor(opts) {
        this.signatures = [];
        this.feePayer = void 0;
        this.instructions = [];
        this.recentBlockhash = void 0;
        this.lastValidBlockHeight = void 0;
        this.nonceInfo = void 0;
        this.minNonceContextSlot = void 0;
        this._message = void 0;
        this._json = void 0;
        if (!opts) {
          return;
        }
        if (opts.feePayer) {
          this.feePayer = opts.feePayer;
        }
        if (opts.signatures) {
          this.signatures = opts.signatures;
        }
        if (Object.prototype.hasOwnProperty.call(opts, "nonceInfo")) {
          const {
            minContextSlot,
            nonceInfo
          } = opts;
          this.minNonceContextSlot = minContextSlot;
          this.nonceInfo = nonceInfo;
        } else if (Object.prototype.hasOwnProperty.call(opts, "lastValidBlockHeight")) {
          const {
            blockhash,
            lastValidBlockHeight
          } = opts;
          this.recentBlockhash = blockhash;
          this.lastValidBlockHeight = lastValidBlockHeight;
        } else {
          const {
            recentBlockhash,
            nonceInfo
          } = opts;
          if (nonceInfo) {
            this.nonceInfo = nonceInfo;
          }
          this.recentBlockhash = recentBlockhash;
        }
      }
      /**
       * @internal
       */
      toJSON() {
        return {
          recentBlockhash: this.recentBlockhash || null,
          feePayer: this.feePayer ? this.feePayer.toJSON() : null,
          nonceInfo: this.nonceInfo ? {
            nonce: this.nonceInfo.nonce,
            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON()
          } : null,
          instructions: this.instructions.map((instruction) => instruction.toJSON()),
          signers: this.signatures.map(({
            publicKey: publicKey2
          }) => {
            return publicKey2.toJSON();
          })
        };
      }
      /**
       * Add one or more instructions to this Transaction
       *
       * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction
       */
      add(...items) {
        if (items.length === 0) {
          throw new Error("No instructions");
        }
        items.forEach((item) => {
          if ("instructions" in item) {
            this.instructions = this.instructions.concat(item.instructions);
          } else if ("data" in item && "programId" in item && "keys" in item) {
            this.instructions.push(item);
          } else {
            this.instructions.push(new TransactionInstruction(item));
          }
        });
        return this;
      }
      /**
       * Compile transaction data
       */
      compileMessage() {
        if (this._message && JSON.stringify(this.toJSON()) === JSON.stringify(this._json)) {
          return this._message;
        }
        let recentBlockhash;
        let instructions;
        if (this.nonceInfo) {
          recentBlockhash = this.nonceInfo.nonce;
          if (this.instructions[0] != this.nonceInfo.nonceInstruction) {
            instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];
          } else {
            instructions = this.instructions;
          }
        } else {
          recentBlockhash = this.recentBlockhash;
          instructions = this.instructions;
        }
        if (!recentBlockhash) {
          throw new Error("Transaction recentBlockhash required");
        }
        if (instructions.length < 1) {
          console.warn("No instructions provided");
        }
        let feePayer;
        if (this.feePayer) {
          feePayer = this.feePayer;
        } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {
          feePayer = this.signatures[0].publicKey;
        } else {
          throw new Error("Transaction fee payer required");
        }
        for (let i = 0; i < instructions.length; i++) {
          if (instructions[i].programId === void 0) {
            throw new Error(`Transaction instruction index ${i} has undefined program id`);
          }
        }
        const programIds = [];
        const accountMetas = [];
        instructions.forEach((instruction) => {
          instruction.keys.forEach((accountMeta) => {
            accountMetas.push({
              ...accountMeta
            });
          });
          const programId = instruction.programId.toString();
          if (!programIds.includes(programId)) {
            programIds.push(programId);
          }
        });
        programIds.forEach((programId) => {
          accountMetas.push({
            pubkey: new PublicKey(programId),
            isSigner: false,
            isWritable: false
          });
        });
        const uniqueMetas = [];
        accountMetas.forEach((accountMeta) => {
          const pubkeyString = accountMeta.pubkey.toString();
          const uniqueIndex = uniqueMetas.findIndex((x) => {
            return x.pubkey.toString() === pubkeyString;
          });
          if (uniqueIndex > -1) {
            uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;
            uniqueMetas[uniqueIndex].isSigner = uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;
          } else {
            uniqueMetas.push(accountMeta);
          }
        });
        uniqueMetas.sort(function(x, y) {
          if (x.isSigner !== y.isSigner) {
            return x.isSigner ? -1 : 1;
          }
          if (x.isWritable !== y.isWritable) {
            return x.isWritable ? -1 : 1;
          }
          const options = {
            localeMatcher: "best fit",
            usage: "sort",
            sensitivity: "variant",
            ignorePunctuation: false,
            numeric: false,
            caseFirst: "lower"
          };
          return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58(), "en", options);
        });
        const feePayerIndex = uniqueMetas.findIndex((x) => {
          return x.pubkey.equals(feePayer);
        });
        if (feePayerIndex > -1) {
          const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);
          payerMeta.isSigner = true;
          payerMeta.isWritable = true;
          uniqueMetas.unshift(payerMeta);
        } else {
          uniqueMetas.unshift({
            pubkey: feePayer,
            isSigner: true,
            isWritable: true
          });
        }
        for (const signature2 of this.signatures) {
          const uniqueIndex = uniqueMetas.findIndex((x) => {
            return x.pubkey.equals(signature2.publicKey);
          });
          if (uniqueIndex > -1) {
            if (!uniqueMetas[uniqueIndex].isSigner) {
              uniqueMetas[uniqueIndex].isSigner = true;
              console.warn("Transaction references a signature that is unnecessary, only the fee payer and instruction signer accounts should sign a transaction. This behavior is deprecated and will throw an error in the next major version release.");
            }
          } else {
            throw new Error(`unknown signer: ${signature2.publicKey.toString()}`);
          }
        }
        let numRequiredSignatures = 0;
        let numReadonlySignedAccounts = 0;
        let numReadonlyUnsignedAccounts = 0;
        const signedKeys = [];
        const unsignedKeys = [];
        uniqueMetas.forEach(({
          pubkey,
          isSigner,
          isWritable
        }) => {
          if (isSigner) {
            signedKeys.push(pubkey.toString());
            numRequiredSignatures += 1;
            if (!isWritable) {
              numReadonlySignedAccounts += 1;
            }
          } else {
            unsignedKeys.push(pubkey.toString());
            if (!isWritable) {
              numReadonlyUnsignedAccounts += 1;
            }
          }
        });
        const accountKeys = signedKeys.concat(unsignedKeys);
        const compiledInstructions = instructions.map((instruction) => {
          const {
            data,
            programId
          } = instruction;
          return {
            programIdIndex: accountKeys.indexOf(programId.toString()),
            accounts: instruction.keys.map((meta) => accountKeys.indexOf(meta.pubkey.toString())),
            data: import_bs58.default.encode(data)
          };
        });
        compiledInstructions.forEach((instruction) => {
          assert2(instruction.programIdIndex >= 0);
          instruction.accounts.forEach((keyIndex) => assert2(keyIndex >= 0));
        });
        return new Message({
          header: {
            numRequiredSignatures,
            numReadonlySignedAccounts,
            numReadonlyUnsignedAccounts
          },
          accountKeys,
          recentBlockhash,
          instructions: compiledInstructions
        });
      }
      /**
       * @internal
       */
      _compile() {
        const message = this.compileMessage();
        const signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);
        if (this.signatures.length === signedKeys.length) {
          const valid = this.signatures.every((pair, index) => {
            return signedKeys[index].equals(pair.publicKey);
          });
          if (valid) return message;
        }
        this.signatures = signedKeys.map((publicKey2) => ({
          signature: null,
          publicKey: publicKey2
        }));
        return message;
      }
      /**
       * Get a buffer of the Transaction data that need to be covered by signatures
       */
      serializeMessage() {
        return this._compile().serialize();
      }
      /**
       * Get the estimated fee associated with a transaction
       *
       * @param {Connection} connection Connection to RPC Endpoint.
       *
       * @returns {Promise<number | null>} The estimated fee for the transaction
       */
      async getEstimatedFee(connection) {
        return (await connection.getFeeForMessage(this.compileMessage())).value;
      }
      /**
       * Specify the public keys which will be used to sign the Transaction.
       * The first signer will be used as the transaction fee payer account.
       *
       * Signatures can be added with either `partialSign` or `addSignature`
       *
       * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be
       * specified and it can be set in the Transaction constructor or with the
       * `feePayer` property.
       */
      setSigners(...signers) {
        if (signers.length === 0) {
          throw new Error("No signers");
        }
        const seen = /* @__PURE__ */ new Set();
        this.signatures = signers.filter((publicKey2) => {
          const key = publicKey2.toString();
          if (seen.has(key)) {
            return false;
          } else {
            seen.add(key);
            return true;
          }
        }).map((publicKey2) => ({
          signature: null,
          publicKey: publicKey2
        }));
      }
      /**
       * Sign the Transaction with the specified signers. Multiple signatures may
       * be applied to a Transaction. The first signature is considered "primary"
       * and is used identify and confirm transactions.
       *
       * If the Transaction `feePayer` is not set, the first signer will be used
       * as the transaction fee payer account.
       *
       * Transaction fields should not be modified after the first call to `sign`,
       * as doing so may invalidate the signature and cause the Transaction to be
       * rejected.
       *
       * The Transaction must be assigned a valid `recentBlockhash` before invoking this method
       *
       * @param {Array<Signer>} signers Array of signers that will sign the transaction
       */
      sign(...signers) {
        if (signers.length === 0) {
          throw new Error("No signers");
        }
        const seen = /* @__PURE__ */ new Set();
        const uniqueSigners = [];
        for (const signer of signers) {
          const key = signer.publicKey.toString();
          if (seen.has(key)) {
            continue;
          } else {
            seen.add(key);
            uniqueSigners.push(signer);
          }
        }
        this.signatures = uniqueSigners.map((signer) => ({
          signature: null,
          publicKey: signer.publicKey
        }));
        const message = this._compile();
        this._partialSign(message, ...uniqueSigners);
      }
      /**
       * Partially sign a transaction with the specified accounts. All accounts must
       * correspond to either the fee payer or a signer account in the transaction
       * instructions.
       *
       * All the caveats from the `sign` method apply to `partialSign`
       *
       * @param {Array<Signer>} signers Array of signers that will sign the transaction
       */
      partialSign(...signers) {
        if (signers.length === 0) {
          throw new Error("No signers");
        }
        const seen = /* @__PURE__ */ new Set();
        const uniqueSigners = [];
        for (const signer of signers) {
          const key = signer.publicKey.toString();
          if (seen.has(key)) {
            continue;
          } else {
            seen.add(key);
            uniqueSigners.push(signer);
          }
        }
        const message = this._compile();
        this._partialSign(message, ...uniqueSigners);
      }
      /**
       * @internal
       */
      _partialSign(message, ...signers) {
        const signData = message.serialize();
        signers.forEach((signer) => {
          const signature2 = sign(signData, signer.secretKey);
          this._addSignature(signer.publicKey, toBuffer(signature2));
        });
      }
      /**
       * Add an externally created signature to a transaction. The public key
       * must correspond to either the fee payer or a signer account in the transaction
       * instructions.
       *
       * @param {PublicKey} pubkey Public key that will be added to the transaction.
       * @param {Buffer} signature An externally created signature to add to the transaction.
       */
      addSignature(pubkey, signature2) {
        this._compile();
        this._addSignature(pubkey, signature2);
      }
      /**
       * @internal
       */
      _addSignature(pubkey, signature2) {
        assert2(signature2.length === 64);
        const index = this.signatures.findIndex((sigpair) => pubkey.equals(sigpair.publicKey));
        if (index < 0) {
          throw new Error(`unknown signer: ${pubkey.toString()}`);
        }
        this.signatures[index].signature = import_buffer2.Buffer.from(signature2);
      }
      /**
       * Verify signatures of a Transaction
       * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.
       * If no boolean is provided, we expect a fully signed Transaction by default.
       *
       * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction
       */
      verifySignatures(requireAllSignatures = true) {
        const signatureErrors = this._getMessageSignednessErrors(this.serializeMessage(), requireAllSignatures);
        return !signatureErrors;
      }
      /**
       * @internal
       */
      _getMessageSignednessErrors(message, requireAllSignatures) {
        const errors = {};
        for (const {
          signature: signature2,
          publicKey: publicKey2
        } of this.signatures) {
          if (signature2 === null) {
            if (requireAllSignatures) {
              (errors.missing || (errors.missing = [])).push(publicKey2);
            }
          } else {
            if (!verify(signature2, message, publicKey2.toBytes())) {
              (errors.invalid || (errors.invalid = [])).push(publicKey2);
            }
          }
        }
        return errors.invalid || errors.missing ? errors : void 0;
      }
      /**
       * Serialize the Transaction in the wire format.
       *
       * @param {Buffer} [config] Config of transaction.
       *
       * @returns {Buffer} Signature of transaction in wire format.
       */
      serialize(config) {
        const {
          requireAllSignatures,
          verifySignatures
        } = Object.assign({
          requireAllSignatures: true,
          verifySignatures: true
        }, config);
        const signData = this.serializeMessage();
        if (verifySignatures) {
          const sigErrors = this._getMessageSignednessErrors(signData, requireAllSignatures);
          if (sigErrors) {
            let errorMessage = "Signature verification failed.";
            if (sigErrors.invalid) {
              errorMessage += `
Invalid signature for public key${sigErrors.invalid.length === 1 ? "" : "(s)"} [\`${sigErrors.invalid.map((p) => p.toBase58()).join("`, `")}\`].`;
            }
            if (sigErrors.missing) {
              errorMessage += `
Missing signature for public key${sigErrors.missing.length === 1 ? "" : "(s)"} [\`${sigErrors.missing.map((p) => p.toBase58()).join("`, `")}\`].`;
            }
            throw new Error(errorMessage);
          }
        }
        return this._serialize(signData);
      }
      /**
       * @internal
       */
      _serialize(signData) {
        const {
          signatures
        } = this;
        const signatureCount = [];
        encodeLength(signatureCount, signatures.length);
        const transactionLength = signatureCount.length + signatures.length * 64 + signData.length;
        const wireTransaction = import_buffer2.Buffer.alloc(transactionLength);
        assert2(signatures.length < 256);
        import_buffer2.Buffer.from(signatureCount).copy(wireTransaction, 0);
        signatures.forEach(({
          signature: signature2
        }, index) => {
          if (signature2 !== null) {
            assert2(signature2.length === 64, `signature has invalid length`);
            import_buffer2.Buffer.from(signature2).copy(wireTransaction, signatureCount.length + index * 64);
          }
        });
        signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);
        assert2(wireTransaction.length <= PACKET_DATA_SIZE, `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`);
        return wireTransaction;
      }
      /**
       * Deprecated method
       * @internal
       */
      get keys() {
        assert2(this.instructions.length === 1);
        return this.instructions[0].keys.map((keyObj) => keyObj.pubkey);
      }
      /**
       * Deprecated method
       * @internal
       */
      get programId() {
        assert2(this.instructions.length === 1);
        return this.instructions[0].programId;
      }
      /**
       * Deprecated method
       * @internal
       */
      get data() {
        assert2(this.instructions.length === 1);
        return this.instructions[0].data;
      }
      /**
       * Parse a wire transaction into a Transaction object.
       *
       * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction
       *
       * @returns {Transaction} Transaction associated with the signature
       */
      static from(buffer) {
        let byteArray = [...buffer];
        const signatureCount = decodeLength(byteArray);
        let signatures = [];
        for (let i = 0; i < signatureCount; i++) {
          const signature2 = guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES);
          signatures.push(import_bs58.default.encode(import_buffer2.Buffer.from(signature2)));
        }
        return _Transaction.populate(Message.from(byteArray), signatures);
      }
      /**
       * Populate Transaction object from message and signatures
       *
       * @param {Message} message Message of transaction
       * @param {Array<string>} signatures List of signatures to assign to the transaction
       *
       * @returns {Transaction} The populated Transaction
       */
      static populate(message, signatures = []) {
        const transaction = new _Transaction();
        transaction.recentBlockhash = message.recentBlockhash;
        if (message.header.numRequiredSignatures > 0) {
          transaction.feePayer = message.accountKeys[0];
        }
        signatures.forEach((signature2, index) => {
          const sigPubkeyPair = {
            signature: signature2 == import_bs58.default.encode(DEFAULT_SIGNATURE) ? null : import_bs58.default.decode(signature2),
            publicKey: message.accountKeys[index]
          };
          transaction.signatures.push(sigPubkeyPair);
        });
        message.instructions.forEach((instruction) => {
          const keys = instruction.accounts.map((account) => {
            const pubkey = message.accountKeys[account];
            return {
              pubkey,
              isSigner: transaction.signatures.some((keyObj) => keyObj.publicKey.toString() === pubkey.toString()) || message.isAccountSigner(account),
              isWritable: message.isAccountWritable(account)
            };
          });
          transaction.instructions.push(new TransactionInstruction({
            keys,
            programId: message.accountKeys[instruction.programIdIndex],
            data: import_bs58.default.decode(instruction.data)
          }));
        });
        transaction._message = message;
        transaction._json = transaction.toJSON();
        return transaction;
      }
    };
    TransactionMessage = class _TransactionMessage {
      constructor(args) {
        this.payerKey = void 0;
        this.instructions = void 0;
        this.recentBlockhash = void 0;
        this.payerKey = args.payerKey;
        this.instructions = args.instructions;
        this.recentBlockhash = args.recentBlockhash;
      }
      static decompile(message, args) {
        const {
          header,
          compiledInstructions,
          recentBlockhash
        } = message;
        const {
          numRequiredSignatures,
          numReadonlySignedAccounts,
          numReadonlyUnsignedAccounts
        } = header;
        const numWritableSignedAccounts = numRequiredSignatures - numReadonlySignedAccounts;
        assert2(numWritableSignedAccounts > 0, "Message header is invalid");
        const numWritableUnsignedAccounts = message.staticAccountKeys.length - numRequiredSignatures - numReadonlyUnsignedAccounts;
        assert2(numWritableUnsignedAccounts >= 0, "Message header is invalid");
        const accountKeys = message.getAccountKeys(args);
        const payerKey = accountKeys.get(0);
        if (payerKey === void 0) {
          throw new Error("Failed to decompile message because no account keys were found");
        }
        const instructions = [];
        for (const compiledIx of compiledInstructions) {
          const keys = [];
          for (const keyIndex of compiledIx.accountKeyIndexes) {
            const pubkey = accountKeys.get(keyIndex);
            if (pubkey === void 0) {
              throw new Error(`Failed to find key for account key index ${keyIndex}`);
            }
            const isSigner = keyIndex < numRequiredSignatures;
            let isWritable;
            if (isSigner) {
              isWritable = keyIndex < numWritableSignedAccounts;
            } else if (keyIndex < accountKeys.staticAccountKeys.length) {
              isWritable = keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;
            } else {
              isWritable = keyIndex - accountKeys.staticAccountKeys.length < // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above
              accountKeys.accountKeysFromLookups.writable.length;
            }
            keys.push({
              pubkey,
              isSigner: keyIndex < header.numRequiredSignatures,
              isWritable
            });
          }
          const programId = accountKeys.get(compiledIx.programIdIndex);
          if (programId === void 0) {
            throw new Error(`Failed to find program id for program id index ${compiledIx.programIdIndex}`);
          }
          instructions.push(new TransactionInstruction({
            programId,
            data: toBuffer(compiledIx.data),
            keys
          }));
        }
        return new _TransactionMessage({
          payerKey,
          instructions,
          recentBlockhash
        });
      }
      compileToLegacyMessage() {
        return Message.compile({
          payerKey: this.payerKey,
          recentBlockhash: this.recentBlockhash,
          instructions: this.instructions
        });
      }
      compileToV0Message(addressLookupTableAccounts) {
        return MessageV0.compile({
          payerKey: this.payerKey,
          recentBlockhash: this.recentBlockhash,
          instructions: this.instructions,
          addressLookupTableAccounts
        });
      }
    };
    VersionedTransaction = class _VersionedTransaction {
      get version() {
        return this.message.version;
      }
      constructor(message, signatures) {
        this.signatures = void 0;
        this.message = void 0;
        if (signatures !== void 0) {
          assert2(signatures.length === message.header.numRequiredSignatures, "Expected signatures length to be equal to the number of required signatures");
          this.signatures = signatures;
        } else {
          const defaultSignatures = [];
          for (let i = 0; i < message.header.numRequiredSignatures; i++) {
            defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));
          }
          this.signatures = defaultSignatures;
        }
        this.message = message;
      }
      serialize() {
        const serializedMessage = this.message.serialize();
        const encodedSignaturesLength = Array();
        encodeLength(encodedSignaturesLength, this.signatures.length);
        const transactionLayout = BufferLayout.struct([BufferLayout.blob(encodedSignaturesLength.length, "encodedSignaturesLength"), BufferLayout.seq(signature(), this.signatures.length, "signatures"), BufferLayout.blob(serializedMessage.length, "serializedMessage")]);
        const serializedTransaction = new Uint8Array(2048);
        const serializedTransactionLength = transactionLayout.encode({
          encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),
          signatures: this.signatures,
          serializedMessage
        }, serializedTransaction);
        return serializedTransaction.slice(0, serializedTransactionLength);
      }
      static deserialize(serializedTransaction) {
        let byteArray = [...serializedTransaction];
        const signatures = [];
        const signaturesLength = decodeLength(byteArray);
        for (let i = 0; i < signaturesLength; i++) {
          signatures.push(new Uint8Array(guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES)));
        }
        const message = VersionedMessage.deserialize(new Uint8Array(byteArray));
        return new _VersionedTransaction(message, signatures);
      }
      sign(signers) {
        const messageData = this.message.serialize();
        const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);
        for (const signer of signers) {
          const signerIndex = signerPubkeys.findIndex((pubkey) => pubkey.equals(signer.publicKey));
          assert2(signerIndex >= 0, `Cannot sign with non signer key ${signer.publicKey.toBase58()}`);
          this.signatures[signerIndex] = sign(messageData, signer.secretKey);
        }
      }
      addSignature(publicKey2, signature2) {
        assert2(signature2.byteLength === 64, "Signature must be 64 bytes long");
        const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);
        const signerIndex = signerPubkeys.findIndex((pubkey) => pubkey.equals(publicKey2));
        assert2(signerIndex >= 0, `Can not add signature; \`${publicKey2.toBase58()}\` is not required to sign this transaction`);
        this.signatures[signerIndex] = signature2;
      }
    };
    NUM_TICKS_PER_SECOND = 160;
    DEFAULT_TICKS_PER_SLOT = 64;
    NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;
    MS_PER_SLOT = 1e3 / NUM_SLOTS_PER_SECOND;
    SYSVAR_CLOCK_PUBKEY = new PublicKey("SysvarC1ock11111111111111111111111111111111");
    SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey("SysvarEpochSchedu1e111111111111111111111111");
    SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey("Sysvar1nstructions1111111111111111111111111");
    SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey("SysvarRecentB1ockHashes11111111111111111111");
    SYSVAR_RENT_PUBKEY = new PublicKey("SysvarRent111111111111111111111111111111111");
    SYSVAR_REWARDS_PUBKEY = new PublicKey("SysvarRewards111111111111111111111111111111");
    SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey("SysvarS1otHashes111111111111111111111111111");
    SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey("SysvarS1otHistory11111111111111111111111111");
    SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey("SysvarStakeHistory1111111111111111111111111");
    SendTransactionError = class extends Error {
      constructor({
        action,
        signature: signature2,
        transactionMessage,
        logs
      }) {
        const maybeLogsOutput = logs ? `Logs: 
${JSON.stringify(logs.slice(-10), null, 2)}. ` : "";
        const guideText = "\nCatch the `SendTransactionError` and call `getLogs()` on it for full details.";
        let message;
        switch (action) {
          case "send":
            message = `Transaction ${signature2} resulted in an error. 
${transactionMessage}. ` + maybeLogsOutput + guideText;
            break;
          case "simulate":
            message = `Simulation failed. 
Message: ${transactionMessage}. 
` + maybeLogsOutput + guideText;
            break;
          default: {
            message = `Unknown action '${/* @__PURE__ */ ((a) => a)(action)}'`;
          }
        }
        super(message);
        this.signature = void 0;
        this.transactionMessage = void 0;
        this.transactionLogs = void 0;
        this.signature = signature2;
        this.transactionMessage = transactionMessage;
        this.transactionLogs = logs ? logs : void 0;
      }
      get transactionError() {
        return {
          message: this.transactionMessage,
          logs: Array.isArray(this.transactionLogs) ? this.transactionLogs : void 0
        };
      }
      /* @deprecated Use `await getLogs()` instead */
      get logs() {
        const cachedLogs = this.transactionLogs;
        if (cachedLogs != null && typeof cachedLogs === "object" && "then" in cachedLogs) {
          return void 0;
        }
        return cachedLogs;
      }
      async getLogs(connection) {
        if (!Array.isArray(this.transactionLogs)) {
          this.transactionLogs = new Promise((resolve, reject) => {
            connection.getTransaction(this.signature).then((tx) => {
              if (tx && tx.meta && tx.meta.logMessages) {
                const logs = tx.meta.logMessages;
                this.transactionLogs = logs;
                resolve(logs);
              } else {
                reject(new Error("Log messages not found"));
              }
            }).catch(reject);
          });
        }
        return await this.transactionLogs;
      }
    };
    SolanaJSONRPCErrorCode = {
      JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,
      JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,
      JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,
      JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,
      JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,
      JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,
      JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,
      JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,
      JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,
      JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,
      JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,
      JSON_RPC_SCAN_ERROR: -32012,
      JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,
      JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,
      JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,
      JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016
    };
    SolanaJSONRPCError = class extends Error {
      constructor({
        code,
        message,
        data
      }, customMessage) {
        super(customMessage != null ? `${customMessage}: ${message}` : message);
        this.code = void 0;
        this.data = void 0;
        this.code = code;
        this.data = data;
        this.name = "SolanaJSONRPCError";
      }
    };
    FeeCalculatorLayout = BufferLayout.nu64("lamportsPerSignature");
    NonceAccountLayout = BufferLayout.struct([BufferLayout.u32("version"), BufferLayout.u32("state"), publicKey("authorizedPubkey"), publicKey("nonce"), BufferLayout.struct([FeeCalculatorLayout], "feeCalculator")]);
    NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;
    NonceAccount = class _NonceAccount {
      /**
       * @internal
       */
      constructor(args) {
        this.authorizedPubkey = void 0;
        this.nonce = void 0;
        this.feeCalculator = void 0;
        this.authorizedPubkey = args.authorizedPubkey;
        this.nonce = args.nonce;
        this.feeCalculator = args.feeCalculator;
      }
      /**
       * Deserialize NonceAccount from the account data.
       *
       * @param buffer account data
       * @return NonceAccount
       */
      static fromAccountData(buffer) {
        const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);
        return new _NonceAccount({
          authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),
          nonce: new PublicKey(nonceAccount.nonce).toString(),
          feeCalculator: nonceAccount.feeCalculator
        });
      }
    };
    SystemInstruction = class {
      /**
       * @internal
       */
      constructor() {
      }
      /**
       * Decode a system instruction and retrieve the instruction type.
       */
      static decodeInstructionType(instruction) {
        this.checkProgramId(instruction.programId);
        const instructionTypeLayout = BufferLayout.u32("instruction");
        const typeIndex = instructionTypeLayout.decode(instruction.data);
        let type2;
        for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {
          if (layout.index == typeIndex) {
            type2 = ixType;
            break;
          }
        }
        if (!type2) {
          throw new Error("Instruction type incorrect; not a SystemInstruction");
        }
        return type2;
      }
      /**
       * Decode a create account system instruction and retrieve the instruction params.
       */
      static decodeCreateAccount(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 2);
        const {
          lamports,
          space,
          programId
        } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data);
        return {
          fromPubkey: instruction.keys[0].pubkey,
          newAccountPubkey: instruction.keys[1].pubkey,
          lamports,
          space,
          programId: new PublicKey(programId)
        };
      }
      /**
       * Decode a transfer system instruction and retrieve the instruction params.
       */
      static decodeTransfer(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 2);
        const {
          lamports
        } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data);
        return {
          fromPubkey: instruction.keys[0].pubkey,
          toPubkey: instruction.keys[1].pubkey,
          lamports
        };
      }
      /**
       * Decode a transfer with seed system instruction and retrieve the instruction params.
       */
      static decodeTransferWithSeed(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 3);
        const {
          lamports,
          seed,
          programId
        } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data);
        return {
          fromPubkey: instruction.keys[0].pubkey,
          basePubkey: instruction.keys[1].pubkey,
          toPubkey: instruction.keys[2].pubkey,
          lamports,
          seed,
          programId: new PublicKey(programId)
        };
      }
      /**
       * Decode an allocate system instruction and retrieve the instruction params.
       */
      static decodeAllocate(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 1);
        const {
          space
        } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data);
        return {
          accountPubkey: instruction.keys[0].pubkey,
          space
        };
      }
      /**
       * Decode an allocate with seed system instruction and retrieve the instruction params.
       */
      static decodeAllocateWithSeed(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 1);
        const {
          base,
          seed,
          space,
          programId
        } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data);
        return {
          accountPubkey: instruction.keys[0].pubkey,
          basePubkey: new PublicKey(base),
          seed,
          space,
          programId: new PublicKey(programId)
        };
      }
      /**
       * Decode an assign system instruction and retrieve the instruction params.
       */
      static decodeAssign(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 1);
        const {
          programId
        } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data);
        return {
          accountPubkey: instruction.keys[0].pubkey,
          programId: new PublicKey(programId)
        };
      }
      /**
       * Decode an assign with seed system instruction and retrieve the instruction params.
       */
      static decodeAssignWithSeed(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 1);
        const {
          base,
          seed,
          programId
        } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data);
        return {
          accountPubkey: instruction.keys[0].pubkey,
          basePubkey: new PublicKey(base),
          seed,
          programId: new PublicKey(programId)
        };
      }
      /**
       * Decode a create account with seed system instruction and retrieve the instruction params.
       */
      static decodeCreateWithSeed(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 2);
        const {
          base,
          seed,
          lamports,
          space,
          programId
        } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data);
        return {
          fromPubkey: instruction.keys[0].pubkey,
          newAccountPubkey: instruction.keys[1].pubkey,
          basePubkey: new PublicKey(base),
          seed,
          lamports,
          space,
          programId: new PublicKey(programId)
        };
      }
      /**
       * Decode a nonce initialize system instruction and retrieve the instruction params.
       */
      static decodeNonceInitialize(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 3);
        const {
          authorized: authorized2
        } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data);
        return {
          noncePubkey: instruction.keys[0].pubkey,
          authorizedPubkey: new PublicKey(authorized2)
        };
      }
      /**
       * Decode a nonce advance system instruction and retrieve the instruction params.
       */
      static decodeNonceAdvance(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 3);
        decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);
        return {
          noncePubkey: instruction.keys[0].pubkey,
          authorizedPubkey: instruction.keys[2].pubkey
        };
      }
      /**
       * Decode a nonce withdraw system instruction and retrieve the instruction params.
       */
      static decodeNonceWithdraw(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 5);
        const {
          lamports
        } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data);
        return {
          noncePubkey: instruction.keys[0].pubkey,
          toPubkey: instruction.keys[1].pubkey,
          authorizedPubkey: instruction.keys[4].pubkey,
          lamports
        };
      }
      /**
       * Decode a nonce authorize system instruction and retrieve the instruction params.
       */
      static decodeNonceAuthorize(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 2);
        const {
          authorized: authorized2
        } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data);
        return {
          noncePubkey: instruction.keys[0].pubkey,
          authorizedPubkey: instruction.keys[1].pubkey,
          newAuthorizedPubkey: new PublicKey(authorized2)
        };
      }
      /**
       * @internal
       */
      static checkProgramId(programId) {
        if (!programId.equals(SystemProgram.programId)) {
          throw new Error("invalid instruction; programId is not SystemProgram");
        }
      }
      /**
       * @internal
       */
      static checkKeyLength(keys, expectedLength) {
        if (keys.length < expectedLength) {
          throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);
        }
      }
    };
    SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({
      Create: {
        index: 0,
        layout: BufferLayout.struct([BufferLayout.u32("instruction"), BufferLayout.ns64("lamports"), BufferLayout.ns64("space"), publicKey("programId")])
      },
      Assign: {
        index: 1,
        layout: BufferLayout.struct([BufferLayout.u32("instruction"), publicKey("programId")])
      },
      Transfer: {
        index: 2,
        layout: BufferLayout.struct([BufferLayout.u32("instruction"), u64("lamports")])
      },
      CreateWithSeed: {
        index: 3,
        layout: BufferLayout.struct([BufferLayout.u32("instruction"), publicKey("base"), rustString("seed"), BufferLayout.ns64("lamports"), BufferLayout.ns64("space"), publicKey("programId")])
      },
      AdvanceNonceAccount: {
        index: 4,
        layout: BufferLayout.struct([BufferLayout.u32("instruction")])
      },
      WithdrawNonceAccount: {
        index: 5,
        layout: BufferLayout.struct([BufferLayout.u32("instruction"), BufferLayout.ns64("lamports")])
      },
      InitializeNonceAccount: {
        index: 6,
        layout: BufferLayout.struct([BufferLayout.u32("instruction"), publicKey("authorized")])
      },
      AuthorizeNonceAccount: {
        index: 7,
        layout: BufferLayout.struct([BufferLayout.u32("instruction"), publicKey("authorized")])
      },
      Allocate: {
        index: 8,
        layout: BufferLayout.struct([BufferLayout.u32("instruction"), BufferLayout.ns64("space")])
      },
      AllocateWithSeed: {
        index: 9,
        layout: BufferLayout.struct([BufferLayout.u32("instruction"), publicKey("base"), rustString("seed"), BufferLayout.ns64("space"), publicKey("programId")])
      },
      AssignWithSeed: {
        index: 10,
        layout: BufferLayout.struct([BufferLayout.u32("instruction"), publicKey("base"), rustString("seed"), publicKey("programId")])
      },
      TransferWithSeed: {
        index: 11,
        layout: BufferLayout.struct([BufferLayout.u32("instruction"), u64("lamports"), rustString("seed"), publicKey("programId")])
      },
      UpgradeNonceAccount: {
        index: 12,
        layout: BufferLayout.struct([BufferLayout.u32("instruction")])
      }
    });
    SystemProgram = class _SystemProgram {
      /**
       * @internal
       */
      constructor() {
      }
      /**
       * Public key that identifies the System program
       */
      /**
       * Generate a transaction instruction that creates a new account
       */
      static createAccount(params) {
        const type2 = SYSTEM_INSTRUCTION_LAYOUTS.Create;
        const data = encodeData(type2, {
          lamports: params.lamports,
          space: params.space,
          programId: toBuffer(params.programId.toBuffer())
        });
        return new TransactionInstruction({
          keys: [{
            pubkey: params.fromPubkey,
            isSigner: true,
            isWritable: true
          }, {
            pubkey: params.newAccountPubkey,
            isSigner: true,
            isWritable: true
          }],
          programId: this.programId,
          data
        });
      }
      /**
       * Generate a transaction instruction that transfers lamports from one account to another
       */
      static transfer(params) {
        let data;
        let keys;
        if ("basePubkey" in params) {
          const type2 = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;
          data = encodeData(type2, {
            lamports: BigInt(params.lamports),
            seed: params.seed,
            programId: toBuffer(params.programId.toBuffer())
          });
          keys = [{
            pubkey: params.fromPubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: params.basePubkey,
            isSigner: true,
            isWritable: false
          }, {
            pubkey: params.toPubkey,
            isSigner: false,
            isWritable: true
          }];
        } else {
          const type2 = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;
          data = encodeData(type2, {
            lamports: BigInt(params.lamports)
          });
          keys = [{
            pubkey: params.fromPubkey,
            isSigner: true,
            isWritable: true
          }, {
            pubkey: params.toPubkey,
            isSigner: false,
            isWritable: true
          }];
        }
        return new TransactionInstruction({
          keys,
          programId: this.programId,
          data
        });
      }
      /**
       * Generate a transaction instruction that assigns an account to a program
       */
      static assign(params) {
        let data;
        let keys;
        if ("basePubkey" in params) {
          const type2 = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;
          data = encodeData(type2, {
            base: toBuffer(params.basePubkey.toBuffer()),
            seed: params.seed,
            programId: toBuffer(params.programId.toBuffer())
          });
          keys = [{
            pubkey: params.accountPubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: params.basePubkey,
            isSigner: true,
            isWritable: false
          }];
        } else {
          const type2 = SYSTEM_INSTRUCTION_LAYOUTS.Assign;
          data = encodeData(type2, {
            programId: toBuffer(params.programId.toBuffer())
          });
          keys = [{
            pubkey: params.accountPubkey,
            isSigner: true,
            isWritable: true
          }];
        }
        return new TransactionInstruction({
          keys,
          programId: this.programId,
          data
        });
      }
      /**
       * Generate a transaction instruction that creates a new account at
       *   an address generated with `from`, a seed, and programId
       */
      static createAccountWithSeed(params) {
        const type2 = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;
        const data = encodeData(type2, {
          base: toBuffer(params.basePubkey.toBuffer()),
          seed: params.seed,
          lamports: params.lamports,
          space: params.space,
          programId: toBuffer(params.programId.toBuffer())
        });
        let keys = [{
          pubkey: params.fromPubkey,
          isSigner: true,
          isWritable: true
        }, {
          pubkey: params.newAccountPubkey,
          isSigner: false,
          isWritable: true
        }];
        if (!params.basePubkey.equals(params.fromPubkey)) {
          keys.push({
            pubkey: params.basePubkey,
            isSigner: true,
            isWritable: false
          });
        }
        return new TransactionInstruction({
          keys,
          programId: this.programId,
          data
        });
      }
      /**
       * Generate a transaction that creates a new Nonce account
       */
      static createNonceAccount(params) {
        const transaction = new Transaction();
        if ("basePubkey" in params && "seed" in params) {
          transaction.add(_SystemProgram.createAccountWithSeed({
            fromPubkey: params.fromPubkey,
            newAccountPubkey: params.noncePubkey,
            basePubkey: params.basePubkey,
            seed: params.seed,
            lamports: params.lamports,
            space: NONCE_ACCOUNT_LENGTH,
            programId: this.programId
          }));
        } else {
          transaction.add(_SystemProgram.createAccount({
            fromPubkey: params.fromPubkey,
            newAccountPubkey: params.noncePubkey,
            lamports: params.lamports,
            space: NONCE_ACCOUNT_LENGTH,
            programId: this.programId
          }));
        }
        const initParams = {
          noncePubkey: params.noncePubkey,
          authorizedPubkey: params.authorizedPubkey
        };
        transaction.add(this.nonceInitialize(initParams));
        return transaction;
      }
      /**
       * Generate an instruction to initialize a Nonce account
       */
      static nonceInitialize(params) {
        const type2 = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;
        const data = encodeData(type2, {
          authorized: toBuffer(params.authorizedPubkey.toBuffer())
        });
        const instructionData = {
          keys: [{
            pubkey: params.noncePubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,
            isSigner: false,
            isWritable: false
          }, {
            pubkey: SYSVAR_RENT_PUBKEY,
            isSigner: false,
            isWritable: false
          }],
          programId: this.programId,
          data
        };
        return new TransactionInstruction(instructionData);
      }
      /**
       * Generate an instruction to advance the nonce in a Nonce account
       */
      static nonceAdvance(params) {
        const type2 = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;
        const data = encodeData(type2);
        const instructionData = {
          keys: [{
            pubkey: params.noncePubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,
            isSigner: false,
            isWritable: false
          }, {
            pubkey: params.authorizedPubkey,
            isSigner: true,
            isWritable: false
          }],
          programId: this.programId,
          data
        };
        return new TransactionInstruction(instructionData);
      }
      /**
       * Generate a transaction instruction that withdraws lamports from a Nonce account
       */
      static nonceWithdraw(params) {
        const type2 = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;
        const data = encodeData(type2, {
          lamports: params.lamports
        });
        return new TransactionInstruction({
          keys: [{
            pubkey: params.noncePubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: params.toPubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,
            isSigner: false,
            isWritable: false
          }, {
            pubkey: SYSVAR_RENT_PUBKEY,
            isSigner: false,
            isWritable: false
          }, {
            pubkey: params.authorizedPubkey,
            isSigner: true,
            isWritable: false
          }],
          programId: this.programId,
          data
        });
      }
      /**
       * Generate a transaction instruction that authorizes a new PublicKey as the authority
       * on a Nonce account.
       */
      static nonceAuthorize(params) {
        const type2 = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;
        const data = encodeData(type2, {
          authorized: toBuffer(params.newAuthorizedPubkey.toBuffer())
        });
        return new TransactionInstruction({
          keys: [{
            pubkey: params.noncePubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: params.authorizedPubkey,
            isSigner: true,
            isWritable: false
          }],
          programId: this.programId,
          data
        });
      }
      /**
       * Generate a transaction instruction that allocates space in an account without funding
       */
      static allocate(params) {
        let data;
        let keys;
        if ("basePubkey" in params) {
          const type2 = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;
          data = encodeData(type2, {
            base: toBuffer(params.basePubkey.toBuffer()),
            seed: params.seed,
            space: params.space,
            programId: toBuffer(params.programId.toBuffer())
          });
          keys = [{
            pubkey: params.accountPubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: params.basePubkey,
            isSigner: true,
            isWritable: false
          }];
        } else {
          const type2 = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;
          data = encodeData(type2, {
            space: params.space
          });
          keys = [{
            pubkey: params.accountPubkey,
            isSigner: true,
            isWritable: true
          }];
        }
        return new TransactionInstruction({
          keys,
          programId: this.programId,
          data
        });
      }
    };
    SystemProgram.programId = new PublicKey("11111111111111111111111111111111");
    CHUNK_SIZE = PACKET_DATA_SIZE - 300;
    Loader = class _Loader {
      /**
       * @internal
       */
      constructor() {
      }
      /**
       * Amount of program data placed in each load Transaction
       */
      /**
       * Minimum number of signatures required to load a program not including
       * retries
       *
       * Can be used to calculate transaction fees
       */
      static getMinNumSignatures(dataLength) {
        return 2 * // Every transaction requires two signatures (payer + program)
        (Math.ceil(dataLength / _Loader.chunkSize) + 1 + // Add one for Create transaction
        1);
      }
      /**
       * Loads a generic program
       *
       * @param connection The connection to use
       * @param payer System account that pays to load the program
       * @param program Account to load the program into
       * @param programId Public key that identifies the loader
       * @param data Program octets
       * @return true if program was loaded successfully, false if program was already loaded
       */
      static async load(connection, payer, program, programId, data) {
        {
          const balanceNeeded = await connection.getMinimumBalanceForRentExemption(data.length);
          const programInfo = await connection.getAccountInfo(program.publicKey, "confirmed");
          let transaction = null;
          if (programInfo !== null) {
            if (programInfo.executable) {
              console.error("Program load failed, account is already executable");
              return false;
            }
            if (programInfo.data.length !== data.length) {
              transaction = transaction || new Transaction();
              transaction.add(SystemProgram.allocate({
                accountPubkey: program.publicKey,
                space: data.length
              }));
            }
            if (!programInfo.owner.equals(programId)) {
              transaction = transaction || new Transaction();
              transaction.add(SystemProgram.assign({
                accountPubkey: program.publicKey,
                programId
              }));
            }
            if (programInfo.lamports < balanceNeeded) {
              transaction = transaction || new Transaction();
              transaction.add(SystemProgram.transfer({
                fromPubkey: payer.publicKey,
                toPubkey: program.publicKey,
                lamports: balanceNeeded - programInfo.lamports
              }));
            }
          } else {
            transaction = new Transaction().add(SystemProgram.createAccount({
              fromPubkey: payer.publicKey,
              newAccountPubkey: program.publicKey,
              lamports: balanceNeeded > 0 ? balanceNeeded : 1,
              space: data.length,
              programId
            }));
          }
          if (transaction !== null) {
            await sendAndConfirmTransaction(connection, transaction, [payer, program], {
              commitment: "confirmed"
            });
          }
        }
        const dataLayout = BufferLayout.struct([BufferLayout.u32("instruction"), BufferLayout.u32("offset"), BufferLayout.u32("bytesLength"), BufferLayout.u32("bytesLengthPadding"), BufferLayout.seq(BufferLayout.u8("byte"), BufferLayout.offset(BufferLayout.u32(), -8), "bytes")]);
        const chunkSize = _Loader.chunkSize;
        let offset2 = 0;
        let array2 = data;
        let transactions = [];
        while (array2.length > 0) {
          const bytes = array2.slice(0, chunkSize);
          const data2 = import_buffer2.Buffer.alloc(chunkSize + 16);
          dataLayout.encode({
            instruction: 0,
            // Load instruction
            offset: offset2,
            bytes,
            bytesLength: 0,
            bytesLengthPadding: 0
          }, data2);
          const transaction = new Transaction().add({
            keys: [{
              pubkey: program.publicKey,
              isSigner: true,
              isWritable: true
            }],
            programId,
            data: data2
          });
          transactions.push(sendAndConfirmTransaction(connection, transaction, [payer, program], {
            commitment: "confirmed"
          }));
          if (connection._rpcEndpoint.includes("solana.com")) {
            const REQUESTS_PER_SECOND = 4;
            await sleep(1e3 / REQUESTS_PER_SECOND);
          }
          offset2 += chunkSize;
          array2 = array2.slice(chunkSize);
        }
        await Promise.all(transactions);
        {
          const dataLayout2 = BufferLayout.struct([BufferLayout.u32("instruction")]);
          const data2 = import_buffer2.Buffer.alloc(dataLayout2.span);
          dataLayout2.encode({
            instruction: 1
            // Finalize instruction
          }, data2);
          const transaction = new Transaction().add({
            keys: [{
              pubkey: program.publicKey,
              isSigner: true,
              isWritable: true
            }, {
              pubkey: SYSVAR_RENT_PUBKEY,
              isSigner: false,
              isWritable: false
            }],
            programId,
            data: data2
          });
          const deployCommitment = "processed";
          const finalizeSignature = await connection.sendTransaction(transaction, [payer, program], {
            preflightCommitment: deployCommitment
          });
          const {
            context,
            value
          } = await connection.confirmTransaction({
            signature: finalizeSignature,
            lastValidBlockHeight: transaction.lastValidBlockHeight,
            blockhash: transaction.recentBlockhash
          }, deployCommitment);
          if (value.err) {
            throw new Error(`Transaction ${finalizeSignature} failed (${JSON.stringify(value)})`);
          }
          while (true) {
            try {
              const currentSlot = await connection.getSlot({
                commitment: deployCommitment
              });
              if (currentSlot > context.slot) {
                break;
              }
            } catch {
            }
            await new Promise((resolve) => setTimeout(resolve, Math.round(MS_PER_SLOT / 2)));
          }
        }
        return true;
      }
    };
    Loader.chunkSize = CHUNK_SIZE;
    BPF_LOADER_PROGRAM_ID = new PublicKey("BPFLoader2111111111111111111111111111111111");
    BpfLoader = class {
      /**
       * Minimum number of signatures required to load a program not including
       * retries
       *
       * Can be used to calculate transaction fees
       */
      static getMinNumSignatures(dataLength) {
        return Loader.getMinNumSignatures(dataLength);
      }
      /**
       * Load a SBF program
       *
       * @param connection The connection to use
       * @param payer Account that will pay program loading fees
       * @param program Account to load the program into
       * @param elf The entire ELF containing the SBF program
       * @param loaderProgramId The program id of the BPF loader to use
       * @return true if program was loaded successfully, false if program was already loaded
       */
      static load(connection, payer, program, elf, loaderProgramId) {
        return Loader.load(connection, payer, program, loaderProgramId, elf);
      }
    };
    fastStableStringifyExports = requireFastStableStringify();
    fastStableStringify = getDefaultExportFromCjs(fastStableStringifyExports);
    MINIMUM_SLOT_PER_EPOCH = 32;
    EpochSchedule = class {
      constructor(slotsPerEpoch, leaderScheduleSlotOffset, warmup, firstNormalEpoch, firstNormalSlot) {
        this.slotsPerEpoch = void 0;
        this.leaderScheduleSlotOffset = void 0;
        this.warmup = void 0;
        this.firstNormalEpoch = void 0;
        this.firstNormalSlot = void 0;
        this.slotsPerEpoch = slotsPerEpoch;
        this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;
        this.warmup = warmup;
        this.firstNormalEpoch = firstNormalEpoch;
        this.firstNormalSlot = firstNormalSlot;
      }
      getEpoch(slot) {
        return this.getEpochAndSlotIndex(slot)[0];
      }
      getEpochAndSlotIndex(slot) {
        if (slot < this.firstNormalSlot) {
          const epoch = trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) - trailingZeros(MINIMUM_SLOT_PER_EPOCH) - 1;
          const epochLen = this.getSlotsInEpoch(epoch);
          const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);
          return [epoch, slotIndex];
        } else {
          const normalSlotIndex = slot - this.firstNormalSlot;
          const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);
          const epoch = this.firstNormalEpoch + normalEpochIndex;
          const slotIndex = normalSlotIndex % this.slotsPerEpoch;
          return [epoch, slotIndex];
        }
      }
      getFirstSlotInEpoch(epoch) {
        if (epoch <= this.firstNormalEpoch) {
          return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;
        } else {
          return (epoch - this.firstNormalEpoch) * this.slotsPerEpoch + this.firstNormalSlot;
        }
      }
      getLastSlotInEpoch(epoch) {
        return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;
      }
      getSlotsInEpoch(epoch) {
        if (epoch < this.firstNormalEpoch) {
          return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));
        } else {
          return this.slotsPerEpoch;
        }
      }
    };
    fetchImpl = globalThis.fetch;
    RpcWebSocketClient = class extends CommonClient {
      constructor(address, options, generate_request_id) {
        const webSocketFactory = (url) => {
          const rpc = WebSocket2(url, {
            autoconnect: true,
            max_reconnects: 5,
            reconnect: true,
            reconnect_interval: 1e3,
            ...options
          });
          if ("socket" in rpc) {
            this.underlyingSocket = rpc.socket;
          } else {
            this.underlyingSocket = rpc;
          }
          return rpc;
        };
        super(webSocketFactory, address, options, generate_request_id);
        this.underlyingSocket = void 0;
      }
      call(...args) {
        var _a;
        const readyState = (_a = this.underlyingSocket) == null ? void 0 : _a.readyState;
        if (readyState === 1) {
          return super.call(...args);
        }
        return Promise.reject(new Error("Tried to call a JSON-RPC method `" + args[0] + "` but the socket was not `CONNECTING` or `OPEN` (`readyState` was " + readyState + ")"));
      }
      notify(...args) {
        var _a;
        const readyState = (_a = this.underlyingSocket) == null ? void 0 : _a.readyState;
        if (readyState === 1) {
          return super.notify(...args);
        }
        return Promise.reject(new Error("Tried to send a JSON-RPC notification `" + args[0] + "` but the socket was not `CONNECTING` or `OPEN` (`readyState` was " + readyState + ")"));
      }
    };
    LOOKUP_TABLE_META_SIZE = 56;
    AddressLookupTableAccount = class {
      constructor(args) {
        this.key = void 0;
        this.state = void 0;
        this.key = args.key;
        this.state = args.state;
      }
      isActive() {
        const U64_MAX = BigInt("0xffffffffffffffff");
        return this.state.deactivationSlot === U64_MAX;
      }
      static deserialize(accountData) {
        const meta = decodeData(LookupTableMetaLayout, accountData);
        const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;
        assert2(serializedAddressesLen >= 0, "lookup table is invalid");
        assert2(serializedAddressesLen % 32 === 0, "lookup table is invalid");
        const numSerializedAddresses = serializedAddressesLen / 32;
        const {
          addresses: addresses2
        } = BufferLayout.struct([BufferLayout.seq(publicKey(), numSerializedAddresses, "addresses")]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));
        return {
          deactivationSlot: meta.deactivationSlot,
          lastExtendedSlot: meta.lastExtendedSlot,
          lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,
          authority: meta.authority.length !== 0 ? new PublicKey(meta.authority[0]) : void 0,
          addresses: addresses2.map((address) => new PublicKey(address))
        };
      }
    };
    LookupTableMetaLayout = {
      index: 1,
      layout: BufferLayout.struct([
        BufferLayout.u32("typeIndex"),
        u64("deactivationSlot"),
        BufferLayout.nu64("lastExtendedSlot"),
        BufferLayout.u8("lastExtendedStartIndex"),
        BufferLayout.u8(),
        // option
        BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u8(), -1), "authority")
      ])
    };
    URL_RE = /^[^:]+:\/\/([^:[]+|\[[^\]]+\])(:\d+)?(.*)/i;
    PublicKeyFromString = coerce(instance(PublicKey), string(), (value) => new PublicKey(value));
    RawAccountDataResult = tuple([string(), literal("base64")]);
    BufferFromRawAccountData = coerce(instance(import_buffer2.Buffer), RawAccountDataResult, (value) => import_buffer2.Buffer.from(value[0], "base64"));
    BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1e3;
    UnknownRpcResult = createRpcResult(unknown());
    GetInflationGovernorResult = type({
      foundation: number(),
      foundationTerm: number(),
      initial: number(),
      taper: number(),
      terminal: number()
    });
    GetInflationRewardResult = jsonRpcResult(array(nullable(type({
      epoch: number(),
      effectiveSlot: number(),
      amount: number(),
      postBalance: number(),
      commission: optional(nullable(number()))
    }))));
    GetRecentPrioritizationFeesResult = array(type({
      slot: number(),
      prioritizationFee: number()
    }));
    GetInflationRateResult = type({
      total: number(),
      validator: number(),
      foundation: number(),
      epoch: number()
    });
    GetEpochInfoResult = type({
      epoch: number(),
      slotIndex: number(),
      slotsInEpoch: number(),
      absoluteSlot: number(),
      blockHeight: optional(number()),
      transactionCount: optional(number())
    });
    GetEpochScheduleResult = type({
      slotsPerEpoch: number(),
      leaderScheduleSlotOffset: number(),
      warmup: boolean(),
      firstNormalEpoch: number(),
      firstNormalSlot: number()
    });
    GetLeaderScheduleResult = record(string(), array(number()));
    TransactionErrorResult = nullable(union([type({}), string()]));
    SignatureStatusResult = type({
      err: TransactionErrorResult
    });
    SignatureReceivedResult = literal("receivedSignature");
    VersionResult = type({
      "solana-core": string(),
      "feature-set": optional(number())
    });
    ParsedInstructionStruct = type({
      program: string(),
      programId: PublicKeyFromString,
      parsed: unknown()
    });
    PartiallyDecodedInstructionStruct = type({
      programId: PublicKeyFromString,
      accounts: array(PublicKeyFromString),
      data: string()
    });
    SimulatedTransactionResponseStruct = jsonRpcResultAndContext(type({
      err: nullable(union([type({}), string()])),
      logs: nullable(array(string())),
      accounts: optional(nullable(array(nullable(type({
        executable: boolean(),
        owner: string(),
        lamports: number(),
        data: array(string()),
        rentEpoch: optional(number())
      }))))),
      unitsConsumed: optional(number()),
      returnData: optional(nullable(type({
        programId: string(),
        data: tuple([string(), literal("base64")])
      }))),
      innerInstructions: optional(nullable(array(type({
        index: number(),
        instructions: array(union([ParsedInstructionStruct, PartiallyDecodedInstructionStruct]))
      }))))
    }));
    BlockProductionResponseStruct = jsonRpcResultAndContext(type({
      byIdentity: record(string(), array(number())),
      range: type({
        firstSlot: number(),
        lastSlot: number()
      })
    }));
    GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);
    GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);
    GetRecentPrioritizationFeesRpcResult = jsonRpcResult(GetRecentPrioritizationFeesResult);
    GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);
    GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);
    GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);
    SlotRpcResult = jsonRpcResult(number());
    GetSupplyRpcResult = jsonRpcResultAndContext(type({
      total: number(),
      circulating: number(),
      nonCirculating: number(),
      nonCirculatingAccounts: array(PublicKeyFromString)
    }));
    TokenAmountResult = type({
      amount: string(),
      uiAmount: nullable(number()),
      decimals: number(),
      uiAmountString: optional(string())
    });
    GetTokenLargestAccountsResult = jsonRpcResultAndContext(array(type({
      address: PublicKeyFromString,
      amount: string(),
      uiAmount: nullable(number()),
      decimals: number(),
      uiAmountString: optional(string())
    })));
    GetTokenAccountsByOwner = jsonRpcResultAndContext(array(type({
      pubkey: PublicKeyFromString,
      account: type({
        executable: boolean(),
        owner: PublicKeyFromString,
        lamports: number(),
        data: BufferFromRawAccountData,
        rentEpoch: number()
      })
    })));
    ParsedAccountDataResult = type({
      program: string(),
      parsed: unknown(),
      space: number()
    });
    GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(array(type({
      pubkey: PublicKeyFromString,
      account: type({
        executable: boolean(),
        owner: PublicKeyFromString,
        lamports: number(),
        data: ParsedAccountDataResult,
        rentEpoch: number()
      })
    })));
    GetLargestAccountsRpcResult = jsonRpcResultAndContext(array(type({
      lamports: number(),
      address: PublicKeyFromString
    })));
    AccountInfoResult = type({
      executable: boolean(),
      owner: PublicKeyFromString,
      lamports: number(),
      data: BufferFromRawAccountData,
      rentEpoch: number()
    });
    KeyedAccountInfoResult = type({
      pubkey: PublicKeyFromString,
      account: AccountInfoResult
    });
    ParsedOrRawAccountData = coerce(union([instance(import_buffer2.Buffer), ParsedAccountDataResult]), union([RawAccountDataResult, ParsedAccountDataResult]), (value) => {
      if (Array.isArray(value)) {
        return create(value, BufferFromRawAccountData);
      } else {
        return value;
      }
    });
    ParsedAccountInfoResult = type({
      executable: boolean(),
      owner: PublicKeyFromString,
      lamports: number(),
      data: ParsedOrRawAccountData,
      rentEpoch: number()
    });
    KeyedParsedAccountInfoResult = type({
      pubkey: PublicKeyFromString,
      account: ParsedAccountInfoResult
    });
    StakeActivationResult = type({
      state: union([literal("active"), literal("inactive"), literal("activating"), literal("deactivating")]),
      active: number(),
      inactive: number()
    });
    GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(array(type({
      signature: string(),
      slot: number(),
      err: TransactionErrorResult,
      memo: nullable(string()),
      blockTime: optional(nullable(number()))
    })));
    GetSignaturesForAddressRpcResult = jsonRpcResult(array(type({
      signature: string(),
      slot: number(),
      err: TransactionErrorResult,
      memo: nullable(string()),
      blockTime: optional(nullable(number()))
    })));
    AccountNotificationResult = type({
      subscription: number(),
      result: notificationResultAndContext(AccountInfoResult)
    });
    ProgramAccountInfoResult = type({
      pubkey: PublicKeyFromString,
      account: AccountInfoResult
    });
    ProgramAccountNotificationResult = type({
      subscription: number(),
      result: notificationResultAndContext(ProgramAccountInfoResult)
    });
    SlotInfoResult = type({
      parent: number(),
      slot: number(),
      root: number()
    });
    SlotNotificationResult = type({
      subscription: number(),
      result: SlotInfoResult
    });
    SlotUpdateResult = union([type({
      type: union([literal("firstShredReceived"), literal("completed"), literal("optimisticConfirmation"), literal("root")]),
      slot: number(),
      timestamp: number()
    }), type({
      type: literal("createdBank"),
      parent: number(),
      slot: number(),
      timestamp: number()
    }), type({
      type: literal("frozen"),
      slot: number(),
      timestamp: number(),
      stats: type({
        numTransactionEntries: number(),
        numSuccessfulTransactions: number(),
        numFailedTransactions: number(),
        maxTransactionsPerEntry: number()
      })
    }), type({
      type: literal("dead"),
      slot: number(),
      timestamp: number(),
      err: string()
    })]);
    SlotUpdateNotificationResult = type({
      subscription: number(),
      result: SlotUpdateResult
    });
    SignatureNotificationResult = type({
      subscription: number(),
      result: notificationResultAndContext(union([SignatureStatusResult, SignatureReceivedResult]))
    });
    RootNotificationResult = type({
      subscription: number(),
      result: number()
    });
    ContactInfoResult = type({
      pubkey: string(),
      gossip: nullable(string()),
      tpu: nullable(string()),
      rpc: nullable(string()),
      version: nullable(string())
    });
    VoteAccountInfoResult = type({
      votePubkey: string(),
      nodePubkey: string(),
      activatedStake: number(),
      epochVoteAccount: boolean(),
      epochCredits: array(tuple([number(), number(), number()])),
      commission: number(),
      lastVote: number(),
      rootSlot: nullable(number())
    });
    GetVoteAccounts = jsonRpcResult(type({
      current: array(VoteAccountInfoResult),
      delinquent: array(VoteAccountInfoResult)
    }));
    ConfirmationStatus = union([literal("processed"), literal("confirmed"), literal("finalized")]);
    SignatureStatusResponse = type({
      slot: number(),
      confirmations: nullable(number()),
      err: TransactionErrorResult,
      confirmationStatus: optional(ConfirmationStatus)
    });
    GetSignatureStatusesRpcResult = jsonRpcResultAndContext(array(nullable(SignatureStatusResponse)));
    GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());
    AddressTableLookupStruct = type({
      accountKey: PublicKeyFromString,
      writableIndexes: array(number()),
      readonlyIndexes: array(number())
    });
    ConfirmedTransactionResult = type({
      signatures: array(string()),
      message: type({
        accountKeys: array(string()),
        header: type({
          numRequiredSignatures: number(),
          numReadonlySignedAccounts: number(),
          numReadonlyUnsignedAccounts: number()
        }),
        instructions: array(type({
          accounts: array(number()),
          data: string(),
          programIdIndex: number()
        })),
        recentBlockhash: string(),
        addressTableLookups: optional(array(AddressTableLookupStruct))
      })
    });
    AnnotatedAccountKey = type({
      pubkey: PublicKeyFromString,
      signer: boolean(),
      writable: boolean(),
      source: optional(union([literal("transaction"), literal("lookupTable")]))
    });
    ConfirmedTransactionAccountsModeResult = type({
      accountKeys: array(AnnotatedAccountKey),
      signatures: array(string())
    });
    ParsedInstructionResult = type({
      parsed: unknown(),
      program: string(),
      programId: PublicKeyFromString
    });
    RawInstructionResult = type({
      accounts: array(PublicKeyFromString),
      data: string(),
      programId: PublicKeyFromString
    });
    InstructionResult = union([RawInstructionResult, ParsedInstructionResult]);
    UnknownInstructionResult = union([type({
      parsed: unknown(),
      program: string(),
      programId: string()
    }), type({
      accounts: array(string()),
      data: string(),
      programId: string()
    })]);
    ParsedOrRawInstruction = coerce(InstructionResult, UnknownInstructionResult, (value) => {
      if ("accounts" in value) {
        return create(value, RawInstructionResult);
      } else {
        return create(value, ParsedInstructionResult);
      }
    });
    ParsedConfirmedTransactionResult = type({
      signatures: array(string()),
      message: type({
        accountKeys: array(AnnotatedAccountKey),
        instructions: array(ParsedOrRawInstruction),
        recentBlockhash: string(),
        addressTableLookups: optional(nullable(array(AddressTableLookupStruct)))
      })
    });
    TokenBalanceResult = type({
      accountIndex: number(),
      mint: string(),
      owner: optional(string()),
      programId: optional(string()),
      uiTokenAmount: TokenAmountResult
    });
    LoadedAddressesResult = type({
      writable: array(PublicKeyFromString),
      readonly: array(PublicKeyFromString)
    });
    ConfirmedTransactionMetaResult = type({
      err: TransactionErrorResult,
      fee: number(),
      innerInstructions: optional(nullable(array(type({
        index: number(),
        instructions: array(type({
          accounts: array(number()),
          data: string(),
          programIdIndex: number()
        }))
      })))),
      preBalances: array(number()),
      postBalances: array(number()),
      logMessages: optional(nullable(array(string()))),
      preTokenBalances: optional(nullable(array(TokenBalanceResult))),
      postTokenBalances: optional(nullable(array(TokenBalanceResult))),
      loadedAddresses: optional(LoadedAddressesResult),
      computeUnitsConsumed: optional(number())
    });
    ParsedConfirmedTransactionMetaResult = type({
      err: TransactionErrorResult,
      fee: number(),
      innerInstructions: optional(nullable(array(type({
        index: number(),
        instructions: array(ParsedOrRawInstruction)
      })))),
      preBalances: array(number()),
      postBalances: array(number()),
      logMessages: optional(nullable(array(string()))),
      preTokenBalances: optional(nullable(array(TokenBalanceResult))),
      postTokenBalances: optional(nullable(array(TokenBalanceResult))),
      loadedAddresses: optional(LoadedAddressesResult),
      computeUnitsConsumed: optional(number())
    });
    TransactionVersionStruct = union([literal(0), literal("legacy")]);
    RewardsResult = type({
      pubkey: string(),
      lamports: number(),
      postBalance: nullable(number()),
      rewardType: nullable(string()),
      commission: optional(nullable(number()))
    });
    GetBlockRpcResult = jsonRpcResult(nullable(type({
      blockhash: string(),
      previousBlockhash: string(),
      parentSlot: number(),
      transactions: array(type({
        transaction: ConfirmedTransactionResult,
        meta: nullable(ConfirmedTransactionMetaResult),
        version: optional(TransactionVersionStruct)
      })),
      rewards: optional(array(RewardsResult)),
      blockTime: nullable(number()),
      blockHeight: nullable(number())
    })));
    GetNoneModeBlockRpcResult = jsonRpcResult(nullable(type({
      blockhash: string(),
      previousBlockhash: string(),
      parentSlot: number(),
      rewards: optional(array(RewardsResult)),
      blockTime: nullable(number()),
      blockHeight: nullable(number())
    })));
    GetAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({
      blockhash: string(),
      previousBlockhash: string(),
      parentSlot: number(),
      transactions: array(type({
        transaction: ConfirmedTransactionAccountsModeResult,
        meta: nullable(ConfirmedTransactionMetaResult),
        version: optional(TransactionVersionStruct)
      })),
      rewards: optional(array(RewardsResult)),
      blockTime: nullable(number()),
      blockHeight: nullable(number())
    })));
    GetParsedBlockRpcResult = jsonRpcResult(nullable(type({
      blockhash: string(),
      previousBlockhash: string(),
      parentSlot: number(),
      transactions: array(type({
        transaction: ParsedConfirmedTransactionResult,
        meta: nullable(ParsedConfirmedTransactionMetaResult),
        version: optional(TransactionVersionStruct)
      })),
      rewards: optional(array(RewardsResult)),
      blockTime: nullable(number()),
      blockHeight: nullable(number())
    })));
    GetParsedAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({
      blockhash: string(),
      previousBlockhash: string(),
      parentSlot: number(),
      transactions: array(type({
        transaction: ConfirmedTransactionAccountsModeResult,
        meta: nullable(ParsedConfirmedTransactionMetaResult),
        version: optional(TransactionVersionStruct)
      })),
      rewards: optional(array(RewardsResult)),
      blockTime: nullable(number()),
      blockHeight: nullable(number())
    })));
    GetParsedNoneModeBlockRpcResult = jsonRpcResult(nullable(type({
      blockhash: string(),
      previousBlockhash: string(),
      parentSlot: number(),
      rewards: optional(array(RewardsResult)),
      blockTime: nullable(number()),
      blockHeight: nullable(number())
    })));
    GetConfirmedBlockRpcResult = jsonRpcResult(nullable(type({
      blockhash: string(),
      previousBlockhash: string(),
      parentSlot: number(),
      transactions: array(type({
        transaction: ConfirmedTransactionResult,
        meta: nullable(ConfirmedTransactionMetaResult)
      })),
      rewards: optional(array(RewardsResult)),
      blockTime: nullable(number())
    })));
    GetBlockSignaturesRpcResult = jsonRpcResult(nullable(type({
      blockhash: string(),
      previousBlockhash: string(),
      parentSlot: number(),
      signatures: array(string()),
      blockTime: nullable(number())
    })));
    GetTransactionRpcResult = jsonRpcResult(nullable(type({
      slot: number(),
      meta: nullable(ConfirmedTransactionMetaResult),
      blockTime: optional(nullable(number())),
      transaction: ConfirmedTransactionResult,
      version: optional(TransactionVersionStruct)
    })));
    GetParsedTransactionRpcResult = jsonRpcResult(nullable(type({
      slot: number(),
      transaction: ParsedConfirmedTransactionResult,
      meta: nullable(ParsedConfirmedTransactionMetaResult),
      blockTime: optional(nullable(number())),
      version: optional(TransactionVersionStruct)
    })));
    GetLatestBlockhashRpcResult = jsonRpcResultAndContext(type({
      blockhash: string(),
      lastValidBlockHeight: number()
    }));
    IsBlockhashValidRpcResult = jsonRpcResultAndContext(boolean());
    PerfSampleResult = type({
      slot: number(),
      numTransactions: number(),
      numSlots: number(),
      samplePeriodSecs: number()
    });
    GetRecentPerformanceSamplesRpcResult = jsonRpcResult(array(PerfSampleResult));
    GetFeeCalculatorRpcResult = jsonRpcResultAndContext(nullable(type({
      feeCalculator: type({
        lamportsPerSignature: number()
      })
    })));
    RequestAirdropRpcResult = jsonRpcResult(string());
    SendTransactionRpcResult = jsonRpcResult(string());
    LogsResult = type({
      err: TransactionErrorResult,
      logs: array(string()),
      signature: string()
    });
    LogsNotificationResult = type({
      result: notificationResultAndContext(LogsResult),
      subscription: number()
    });
    COMMON_HTTP_HEADERS = {
      "solana-client": `js/${"1.0.0-maintenance"}`
    };
    Connection = class {
      /**
       * Establish a JSON RPC connection
       *
       * @param endpoint URL to the fullnode JSON RPC endpoint
       * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object
       */
      constructor(endpoint2, _commitmentOrConfig) {
        this._commitment = void 0;
        this._confirmTransactionInitialTimeout = void 0;
        this._rpcEndpoint = void 0;
        this._rpcWsEndpoint = void 0;
        this._rpcClient = void 0;
        this._rpcRequest = void 0;
        this._rpcBatchRequest = void 0;
        this._rpcWebSocket = void 0;
        this._rpcWebSocketConnected = false;
        this._rpcWebSocketHeartbeat = null;
        this._rpcWebSocketIdleTimeout = null;
        this._rpcWebSocketGeneration = 0;
        this._disableBlockhashCaching = false;
        this._pollingBlockhash = false;
        this._blockhashInfo = {
          latestBlockhash: null,
          lastFetch: 0,
          transactionSignatures: [],
          simulatedSignatures: []
        };
        this._nextClientSubscriptionId = 0;
        this._subscriptionDisposeFunctionsByClientSubscriptionId = {};
        this._subscriptionHashByClientSubscriptionId = {};
        this._subscriptionStateChangeCallbacksByHash = {};
        this._subscriptionCallbacksByServerSubscriptionId = {};
        this._subscriptionsByHash = {};
        this._subscriptionsAutoDisposedByRpc = /* @__PURE__ */ new Set();
        this.getBlockHeight = /* @__PURE__ */ (() => {
          const requestPromises = {};
          return async (commitmentOrConfig) => {
            const {
              commitment,
              config
            } = extractCommitmentFromConfig(commitmentOrConfig);
            const args = this._buildArgs([], commitment, void 0, config);
            const requestHash = fastStableStringify(args);
            requestPromises[requestHash] = requestPromises[requestHash] ?? (async () => {
              try {
                const unsafeRes = await this._rpcRequest("getBlockHeight", args);
                const res = create(unsafeRes, jsonRpcResult(number()));
                if ("error" in res) {
                  throw new SolanaJSONRPCError(res.error, "failed to get block height information");
                }
                return res.result;
              } finally {
                delete requestPromises[requestHash];
              }
            })();
            return await requestPromises[requestHash];
          };
        })();
        let wsEndpoint;
        let httpHeaders;
        let fetch2;
        let fetchMiddleware;
        let disableRetryOnRateLimit;
        let httpAgent;
        if (_commitmentOrConfig && typeof _commitmentOrConfig === "string") {
          this._commitment = _commitmentOrConfig;
        } else if (_commitmentOrConfig) {
          this._commitment = _commitmentOrConfig.commitment;
          this._confirmTransactionInitialTimeout = _commitmentOrConfig.confirmTransactionInitialTimeout;
          wsEndpoint = _commitmentOrConfig.wsEndpoint;
          httpHeaders = _commitmentOrConfig.httpHeaders;
          fetch2 = _commitmentOrConfig.fetch;
          fetchMiddleware = _commitmentOrConfig.fetchMiddleware;
          disableRetryOnRateLimit = _commitmentOrConfig.disableRetryOnRateLimit;
          httpAgent = _commitmentOrConfig.httpAgent;
        }
        this._rpcEndpoint = assertEndpointUrl(endpoint2);
        this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint2);
        this._rpcClient = createRpcClient(endpoint2, httpHeaders, fetch2, fetchMiddleware, disableRetryOnRateLimit, httpAgent);
        this._rpcRequest = createRpcRequest(this._rpcClient);
        this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);
        this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {
          autoconnect: false,
          max_reconnects: Infinity
        });
        this._rpcWebSocket.on("open", this._wsOnOpen.bind(this));
        this._rpcWebSocket.on("error", this._wsOnError.bind(this));
        this._rpcWebSocket.on("close", this._wsOnClose.bind(this));
        this._rpcWebSocket.on("accountNotification", this._wsOnAccountNotification.bind(this));
        this._rpcWebSocket.on("programNotification", this._wsOnProgramAccountNotification.bind(this));
        this._rpcWebSocket.on("slotNotification", this._wsOnSlotNotification.bind(this));
        this._rpcWebSocket.on("slotsUpdatesNotification", this._wsOnSlotUpdatesNotification.bind(this));
        this._rpcWebSocket.on("signatureNotification", this._wsOnSignatureNotification.bind(this));
        this._rpcWebSocket.on("rootNotification", this._wsOnRootNotification.bind(this));
        this._rpcWebSocket.on("logsNotification", this._wsOnLogsNotification.bind(this));
      }
      /**
       * The default commitment used for requests
       */
      get commitment() {
        return this._commitment;
      }
      /**
       * The RPC endpoint
       */
      get rpcEndpoint() {
        return this._rpcEndpoint;
      }
      /**
       * Fetch the balance for the specified public key, return with context
       */
      async getBalanceAndContext(publicKey2, commitmentOrConfig) {
        const {
          commitment,
          config
        } = extractCommitmentFromConfig(commitmentOrConfig);
        const args = this._buildArgs([publicKey2.toBase58()], commitment, void 0, config);
        const unsafeRes = await this._rpcRequest("getBalance", args);
        const res = create(unsafeRes, jsonRpcResultAndContext(number()));
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, `failed to get balance for ${publicKey2.toBase58()}`);
        }
        return res.result;
      }
      /**
       * Fetch the balance for the specified public key
       */
      async getBalance(publicKey2, commitmentOrConfig) {
        return await this.getBalanceAndContext(publicKey2, commitmentOrConfig).then((x) => x.value).catch((e) => {
          throw new Error("failed to get balance of account " + publicKey2.toBase58() + ": " + e);
        });
      }
      /**
       * Fetch the estimated production time of a block
       */
      async getBlockTime(slot) {
        const unsafeRes = await this._rpcRequest("getBlockTime", [slot]);
        const res = create(unsafeRes, jsonRpcResult(nullable(number())));
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, `failed to get block time for slot ${slot}`);
        }
        return res.result;
      }
      /**
       * Fetch the lowest slot that the node has information about in its ledger.
       * This value may increase over time if the node is configured to purge older ledger data
       */
      async getMinimumLedgerSlot() {
        const unsafeRes = await this._rpcRequest("minimumLedgerSlot", []);
        const res = create(unsafeRes, jsonRpcResult(number()));
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, "failed to get minimum ledger slot");
        }
        return res.result;
      }
      /**
       * Fetch the slot of the lowest confirmed block that has not been purged from the ledger
       */
      async getFirstAvailableBlock() {
        const unsafeRes = await this._rpcRequest("getFirstAvailableBlock", []);
        const res = create(unsafeRes, SlotRpcResult);
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, "failed to get first available block");
        }
        return res.result;
      }
      /**
       * Fetch information about the current supply
       */
      async getSupply(config) {
        let configArg = {};
        if (typeof config === "string") {
          configArg = {
            commitment: config
          };
        } else if (config) {
          configArg = {
            ...config,
            commitment: config && config.commitment || this.commitment
          };
        } else {
          configArg = {
            commitment: this.commitment
          };
        }
        const unsafeRes = await this._rpcRequest("getSupply", [configArg]);
        const res = create(unsafeRes, GetSupplyRpcResult);
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, "failed to get supply");
        }
        return res.result;
      }
      /**
       * Fetch the current supply of a token mint
       */
      async getTokenSupply(tokenMintAddress, commitment) {
        const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);
        const unsafeRes = await this._rpcRequest("getTokenSupply", args);
        const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, "failed to get token supply");
        }
        return res.result;
      }
      /**
       * Fetch the current balance of a token account
       */
      async getTokenAccountBalance(tokenAddress, commitment) {
        const args = this._buildArgs([tokenAddress.toBase58()], commitment);
        const unsafeRes = await this._rpcRequest("getTokenAccountBalance", args);
        const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, "failed to get token account balance");
        }
        return res.result;
      }
      /**
       * Fetch all the token accounts owned by the specified account
       *
       * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}
       */
      async getTokenAccountsByOwner(ownerAddress, filter, commitmentOrConfig) {
        const {
          commitment,
          config
        } = extractCommitmentFromConfig(commitmentOrConfig);
        let _args = [ownerAddress.toBase58()];
        if ("mint" in filter) {
          _args.push({
            mint: filter.mint.toBase58()
          });
        } else {
          _args.push({
            programId: filter.programId.toBase58()
          });
        }
        const args = this._buildArgs(_args, commitment, "base64", config);
        const unsafeRes = await this._rpcRequest("getTokenAccountsByOwner", args);
        const res = create(unsafeRes, GetTokenAccountsByOwner);
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);
        }
        return res.result;
      }
      /**
       * Fetch parsed token accounts owned by the specified account
       *
       * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}
       */
      async getParsedTokenAccountsByOwner(ownerAddress, filter, commitment) {
        let _args = [ownerAddress.toBase58()];
        if ("mint" in filter) {
          _args.push({
            mint: filter.mint.toBase58()
          });
        } else {
          _args.push({
            programId: filter.programId.toBase58()
          });
        }
        const args = this._buildArgs(_args, commitment, "jsonParsed");
        const unsafeRes = await this._rpcRequest("getTokenAccountsByOwner", args);
        const res = create(unsafeRes, GetParsedTokenAccountsByOwner);
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);
        }
        return res.result;
      }
      /**
       * Fetch the 20 largest accounts with their current balances
       */
      async getLargestAccounts(config) {
        const arg = {
          ...config,
          commitment: config && config.commitment || this.commitment
        };
        const args = arg.filter || arg.commitment ? [arg] : [];
        const unsafeRes = await this._rpcRequest("getLargestAccounts", args);
        const res = create(unsafeRes, GetLargestAccountsRpcResult);
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, "failed to get largest accounts");
        }
        return res.result;
      }
      /**
       * Fetch the 20 largest token accounts with their current balances
       * for a given mint.
       */
      async getTokenLargestAccounts(mintAddress, commitment) {
        const args = this._buildArgs([mintAddress.toBase58()], commitment);
        const unsafeRes = await this._rpcRequest("getTokenLargestAccounts", args);
        const res = create(unsafeRes, GetTokenLargestAccountsResult);
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, "failed to get token largest accounts");
        }
        return res.result;
      }
      /**
       * Fetch all the account info for the specified public key, return with context
       */
      async getAccountInfoAndContext(publicKey2, commitmentOrConfig) {
        const {
          commitment,
          config
        } = extractCommitmentFromConfig(commitmentOrConfig);
        const args = this._buildArgs([publicKey2.toBase58()], commitment, "base64", config);
        const unsafeRes = await this._rpcRequest("getAccountInfo", args);
        const res = create(unsafeRes, jsonRpcResultAndContext(nullable(AccountInfoResult)));
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey2.toBase58()}`);
        }
        return res.result;
      }
      /**
       * Fetch parsed account info for the specified public key
       */
      async getParsedAccountInfo(publicKey2, commitmentOrConfig) {
        const {
          commitment,
          config
        } = extractCommitmentFromConfig(commitmentOrConfig);
        const args = this._buildArgs([publicKey2.toBase58()], commitment, "jsonParsed", config);
        const unsafeRes = await this._rpcRequest("getAccountInfo", args);
        const res = create(unsafeRes, jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)));
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey2.toBase58()}`);
        }
        return res.result;
      }
      /**
       * Fetch all the account info for the specified public key
       */
      async getAccountInfo(publicKey2, commitmentOrConfig) {
        try {
          const res = await this.getAccountInfoAndContext(publicKey2, commitmentOrConfig);
          return res.value;
        } catch (e) {
          throw new Error("failed to get info about account " + publicKey2.toBase58() + ": " + e);
        }
      }
      /**
       * Fetch all the account info for multiple accounts specified by an array of public keys, return with context
       */
      async getMultipleParsedAccounts(publicKeys, rawConfig) {
        const {
          commitment,
          config
        } = extractCommitmentFromConfig(rawConfig);
        const keys = publicKeys.map((key) => key.toBase58());
        const args = this._buildArgs([keys], commitment, "jsonParsed", config);
        const unsafeRes = await this._rpcRequest("getMultipleAccounts", args);
        const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))));
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, `failed to get info for accounts ${keys}`);
        }
        return res.result;
      }
      /**
       * Fetch all the account info for multiple accounts specified by an array of public keys, return with context
       */
      async getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig) {
        const {
          commitment,
          config
        } = extractCommitmentFromConfig(commitmentOrConfig);
        const keys = publicKeys.map((key) => key.toBase58());
        const args = this._buildArgs([keys], commitment, "base64", config);
        const unsafeRes = await this._rpcRequest("getMultipleAccounts", args);
        const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(AccountInfoResult))));
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, `failed to get info for accounts ${keys}`);
        }
        return res.result;
      }
      /**
       * Fetch all the account info for multiple accounts specified by an array of public keys
       */
      async getMultipleAccountsInfo(publicKeys, commitmentOrConfig) {
        const res = await this.getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig);
        return res.value;
      }
      /**
       * Returns epoch activation information for a stake account that has been delegated
       *
       * @deprecated Deprecated since RPC v1.18; will be removed in a future version.
       */
      async getStakeActivation(publicKey2, commitmentOrConfig, epoch) {
        const {
          commitment,
          config
        } = extractCommitmentFromConfig(commitmentOrConfig);
        const args = this._buildArgs([publicKey2.toBase58()], commitment, void 0, {
          ...config,
          epoch: epoch != null ? epoch : config == null ? void 0 : config.epoch
        });
        const unsafeRes = await this._rpcRequest("getStakeActivation", args);
        const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, `failed to get Stake Activation ${publicKey2.toBase58()}`);
        }
        return res.result;
      }
      /**
       * Fetch all the accounts owned by the specified program id
       *
       * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}
       */
      // eslint-disable-next-line no-dupe-class-members
      // eslint-disable-next-line no-dupe-class-members
      async getProgramAccounts(programId, configOrCommitment) {
        const {
          commitment,
          config
        } = extractCommitmentFromConfig(configOrCommitment);
        const {
          encoding,
          ...configWithoutEncoding
        } = config || {};
        const args = this._buildArgs([programId.toBase58()], commitment, encoding || "base64", {
          ...configWithoutEncoding,
          ...configWithoutEncoding.filters ? {
            filters: applyDefaultMemcmpEncodingToFilters(configWithoutEncoding.filters)
          } : null
        });
        const unsafeRes = await this._rpcRequest("getProgramAccounts", args);
        const baseSchema = array(KeyedAccountInfoResult);
        const res = configWithoutEncoding.withContext === true ? create(unsafeRes, jsonRpcResultAndContext(baseSchema)) : create(unsafeRes, jsonRpcResult(baseSchema));
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);
        }
        return res.result;
      }
      /**
       * Fetch and parse all the accounts owned by the specified program id
       *
       * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}
       */
      async getParsedProgramAccounts(programId, configOrCommitment) {
        const {
          commitment,
          config
        } = extractCommitmentFromConfig(configOrCommitment);
        const args = this._buildArgs([programId.toBase58()], commitment, "jsonParsed", config);
        const unsafeRes = await this._rpcRequest("getProgramAccounts", args);
        const res = create(unsafeRes, jsonRpcResult(array(KeyedParsedAccountInfoResult)));
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);
        }
        return res.result;
      }
      /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */
      // eslint-disable-next-line no-dupe-class-members
      // eslint-disable-next-line no-dupe-class-members
      async confirmTransaction(strategy, commitment) {
        var _a;
        let rawSignature;
        if (typeof strategy == "string") {
          rawSignature = strategy;
        } else {
          const config = strategy;
          if ((_a = config.abortSignal) == null ? void 0 : _a.aborted) {
            return Promise.reject(config.abortSignal.reason);
          }
          rawSignature = config.signature;
        }
        let decodedSignature;
        try {
          decodedSignature = import_bs58.default.decode(rawSignature);
        } catch (err) {
          throw new Error("signature must be base58 encoded: " + rawSignature);
        }
        assert2(decodedSignature.length === 64, "signature has invalid length");
        if (typeof strategy === "string") {
          return await this.confirmTransactionUsingLegacyTimeoutStrategy({
            commitment: commitment || this.commitment,
            signature: rawSignature
          });
        } else if ("lastValidBlockHeight" in strategy) {
          return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({
            commitment: commitment || this.commitment,
            strategy
          });
        } else {
          return await this.confirmTransactionUsingDurableNonceStrategy({
            commitment: commitment || this.commitment,
            strategy
          });
        }
      }
      getCancellationPromise(signal) {
        return new Promise((_, reject) => {
          if (signal == null) {
            return;
          }
          if (signal.aborted) {
            reject(signal.reason);
          } else {
            signal.addEventListener("abort", () => {
              reject(signal.reason);
            });
          }
        });
      }
      getTransactionConfirmationPromise({
        commitment,
        signature: signature2
      }) {
        let signatureSubscriptionId;
        let disposeSignatureSubscriptionStateChangeObserver;
        let done = false;
        const confirmationPromise = new Promise((resolve, reject) => {
          try {
            signatureSubscriptionId = this.onSignature(signature2, (result, context) => {
              signatureSubscriptionId = void 0;
              const response = {
                context,
                value: result
              };
              resolve({
                __type: TransactionStatus.PROCESSED,
                response
              });
            }, commitment);
            const subscriptionSetupPromise = new Promise((resolveSubscriptionSetup) => {
              if (signatureSubscriptionId == null) {
                resolveSubscriptionSetup();
              } else {
                disposeSignatureSubscriptionStateChangeObserver = this._onSubscriptionStateChange(signatureSubscriptionId, (nextState) => {
                  if (nextState === "subscribed") {
                    resolveSubscriptionSetup();
                  }
                });
              }
            });
            (async () => {
              await subscriptionSetupPromise;
              if (done) return;
              const response = await this.getSignatureStatus(signature2);
              if (done) return;
              if (response == null) {
                return;
              }
              const {
                context,
                value
              } = response;
              if (value == null) {
                return;
              }
              if (value == null ? void 0 : value.err) {
                reject(value.err);
              } else {
                switch (commitment) {
                  case "confirmed":
                  case "single":
                  case "singleGossip": {
                    if (value.confirmationStatus === "processed") {
                      return;
                    }
                    break;
                  }
                  case "finalized":
                  case "max":
                  case "root": {
                    if (value.confirmationStatus === "processed" || value.confirmationStatus === "confirmed") {
                      return;
                    }
                    break;
                  }
                  // exhaust enums to ensure full coverage
                  case "processed":
                  case "recent":
                }
                done = true;
                resolve({
                  __type: TransactionStatus.PROCESSED,
                  response: {
                    context,
                    value
                  }
                });
              }
            })();
          } catch (err) {
            reject(err);
          }
        });
        const abortConfirmation = () => {
          if (disposeSignatureSubscriptionStateChangeObserver) {
            disposeSignatureSubscriptionStateChangeObserver();
            disposeSignatureSubscriptionStateChangeObserver = void 0;
          }
          if (signatureSubscriptionId != null) {
            this.removeSignatureListener(signatureSubscriptionId);
            signatureSubscriptionId = void 0;
          }
        };
        return {
          abortConfirmation,
          confirmationPromise
        };
      }
      async confirmTransactionUsingBlockHeightExceedanceStrategy({
        commitment,
        strategy: {
          abortSignal,
          lastValidBlockHeight,
          signature: signature2
        }
      }) {
        let done = false;
        const expiryPromise = new Promise((resolve) => {
          const checkBlockHeight = async () => {
            try {
              const blockHeight = await this.getBlockHeight(commitment);
              return blockHeight;
            } catch (_e) {
              return -1;
            }
          };
          (async () => {
            let currentBlockHeight = await checkBlockHeight();
            if (done) return;
            while (currentBlockHeight <= lastValidBlockHeight) {
              await sleep(1e3);
              if (done) return;
              currentBlockHeight = await checkBlockHeight();
              if (done) return;
            }
            resolve({
              __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED
            });
          })();
        });
        const {
          abortConfirmation,
          confirmationPromise
        } = this.getTransactionConfirmationPromise({
          commitment,
          signature: signature2
        });
        const cancellationPromise = this.getCancellationPromise(abortSignal);
        let result;
        try {
          const outcome = await Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);
          if (outcome.__type === TransactionStatus.PROCESSED) {
            result = outcome.response;
          } else {
            throw new TransactionExpiredBlockheightExceededError(signature2);
          }
        } finally {
          done = true;
          abortConfirmation();
        }
        return result;
      }
      async confirmTransactionUsingDurableNonceStrategy({
        commitment,
        strategy: {
          abortSignal,
          minContextSlot,
          nonceAccountPubkey,
          nonceValue,
          signature: signature2
        }
      }) {
        let done = false;
        const expiryPromise = new Promise((resolve) => {
          let currentNonceValue = nonceValue;
          let lastCheckedSlot = null;
          const getCurrentNonceValue = async () => {
            try {
              const {
                context,
                value: nonceAccount
              } = await this.getNonceAndContext(nonceAccountPubkey, {
                commitment,
                minContextSlot
              });
              lastCheckedSlot = context.slot;
              return nonceAccount == null ? void 0 : nonceAccount.nonce;
            } catch (e) {
              return currentNonceValue;
            }
          };
          (async () => {
            currentNonceValue = await getCurrentNonceValue();
            if (done) return;
            while (true) {
              if (nonceValue !== currentNonceValue) {
                resolve({
                  __type: TransactionStatus.NONCE_INVALID,
                  slotInWhichNonceDidAdvance: lastCheckedSlot
                });
                return;
              }
              await sleep(2e3);
              if (done) return;
              currentNonceValue = await getCurrentNonceValue();
              if (done) return;
            }
          })();
        });
        const {
          abortConfirmation,
          confirmationPromise
        } = this.getTransactionConfirmationPromise({
          commitment,
          signature: signature2
        });
        const cancellationPromise = this.getCancellationPromise(abortSignal);
        let result;
        try {
          const outcome = await Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);
          if (outcome.__type === TransactionStatus.PROCESSED) {
            result = outcome.response;
          } else {
            let signatureStatus;
            while (true) {
              const status = await this.getSignatureStatus(signature2);
              if (status == null) {
                break;
              }
              if (status.context.slot < (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)) {
                await sleep(400);
                continue;
              }
              signatureStatus = status;
              break;
            }
            if (signatureStatus == null ? void 0 : signatureStatus.value) {
              const commitmentForStatus = commitment || "finalized";
              const {
                confirmationStatus
              } = signatureStatus.value;
              switch (commitmentForStatus) {
                case "processed":
                case "recent":
                  if (confirmationStatus !== "processed" && confirmationStatus !== "confirmed" && confirmationStatus !== "finalized") {
                    throw new TransactionExpiredNonceInvalidError(signature2);
                  }
                  break;
                case "confirmed":
                case "single":
                case "singleGossip":
                  if (confirmationStatus !== "confirmed" && confirmationStatus !== "finalized") {
                    throw new TransactionExpiredNonceInvalidError(signature2);
                  }
                  break;
                case "finalized":
                case "max":
                case "root":
                  if (confirmationStatus !== "finalized") {
                    throw new TransactionExpiredNonceInvalidError(signature2);
                  }
                  break;
                default:
                  /* @__PURE__ */ ((_) => {
                  })(commitmentForStatus);
              }
              result = {
                context: signatureStatus.context,
                value: {
                  err: signatureStatus.value.err
                }
              };
            } else {
              throw new TransactionExpiredNonceInvalidError(signature2);
            }
          }
        } finally {
          done = true;
          abortConfirmation();
        }
        return result;
      }
      async confirmTransactionUsingLegacyTimeoutStrategy({
        commitment,
        signature: signature2
      }) {
        let timeoutId;
        const expiryPromise = new Promise((resolve) => {
          let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1e3;
          switch (commitment) {
            case "processed":
            case "recent":
            case "single":
            case "confirmed":
            case "singleGossip": {
              timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1e3;
              break;
            }
          }
          timeoutId = setTimeout(() => resolve({
            __type: TransactionStatus.TIMED_OUT,
            timeoutMs
          }), timeoutMs);
        });
        const {
          abortConfirmation,
          confirmationPromise
        } = this.getTransactionConfirmationPromise({
          commitment,
          signature: signature2
        });
        let result;
        try {
          const outcome = await Promise.race([confirmationPromise, expiryPromise]);
          if (outcome.__type === TransactionStatus.PROCESSED) {
            result = outcome.response;
          } else {
            throw new TransactionExpiredTimeoutError(signature2, outcome.timeoutMs / 1e3);
          }
        } finally {
          clearTimeout(timeoutId);
          abortConfirmation();
        }
        return result;
      }
      /**
       * Return the list of nodes that are currently participating in the cluster
       */
      async getClusterNodes() {
        const unsafeRes = await this._rpcRequest("getClusterNodes", []);
        const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, "failed to get cluster nodes");
        }
        return res.result;
      }
      /**
       * Return the list of nodes that are currently participating in the cluster
       */
      async getVoteAccounts(commitment) {
        const args = this._buildArgs([], commitment);
        const unsafeRes = await this._rpcRequest("getVoteAccounts", args);
        const res = create(unsafeRes, GetVoteAccounts);
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, "failed to get vote accounts");
        }
        return res.result;
      }
      /**
       * Fetch the current slot that the node is processing
       */
      async getSlot(commitmentOrConfig) {
        const {
          commitment,
          config
        } = extractCommitmentFromConfig(commitmentOrConfig);
        const args = this._buildArgs([], commitment, void 0, config);
        const unsafeRes = await this._rpcRequest("getSlot", args);
        const res = create(unsafeRes, jsonRpcResult(number()));
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, "failed to get slot");
        }
        return res.result;
      }
      /**
       * Fetch the current slot leader of the cluster
       */
      async getSlotLeader(commitmentOrConfig) {
        const {
          commitment,
          config
        } = extractCommitmentFromConfig(commitmentOrConfig);
        const args = this._buildArgs([], commitment, void 0, config);
        const unsafeRes = await this._rpcRequest("getSlotLeader", args);
        const res = create(unsafeRes, jsonRpcResult(string()));
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, "failed to get slot leader");
        }
        return res.result;
      }
      /**
       * Fetch `limit` number of slot leaders starting from `startSlot`
       *
       * @param startSlot fetch slot leaders starting from this slot
       * @param limit number of slot leaders to return
       */
      async getSlotLeaders(startSlot, limit) {
        const args = [startSlot, limit];
        const unsafeRes = await this._rpcRequest("getSlotLeaders", args);
        const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, "failed to get slot leaders");
        }
        return res.result;
      }
      /**
       * Fetch the current status of a signature
       */
      async getSignatureStatus(signature2, config) {
        const {
          context,
          value: values
        } = await this.getSignatureStatuses([signature2], config);
        assert2(values.length === 1);
        const value = values[0];
        return {
          context,
          value
        };
      }
      /**
       * Fetch the current statuses of a batch of signatures
       */
      async getSignatureStatuses(signatures, config) {
        const params = [signatures];
        if (config) {
          params.push(config);
        }
        const unsafeRes = await this._rpcRequest("getSignatureStatuses", params);
        const res = create(unsafeRes, GetSignatureStatusesRpcResult);
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, "failed to get signature status");
        }
        return res.result;
      }
      /**
       * Fetch the current transaction count of the cluster
       */
      async getTransactionCount(commitmentOrConfig) {
        const {
          commitment,
          config
        } = extractCommitmentFromConfig(commitmentOrConfig);
        const args = this._buildArgs([], commitment, void 0, config);
        const unsafeRes = await this._rpcRequest("getTransactionCount", args);
        const res = create(unsafeRes, jsonRpcResult(number()));
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, "failed to get transaction count");
        }
        return res.result;
      }
      /**
       * Fetch the current total currency supply of the cluster in lamports
       *
       * @deprecated Deprecated since RPC v1.2.8. Please use {@link getSupply} instead.
       */
      async getTotalSupply(commitment) {
        const result = await this.getSupply({
          commitment,
          excludeNonCirculatingAccountsList: true
        });
        return result.value.total;
      }
      /**
       * Fetch the cluster InflationGovernor parameters
       */
      async getInflationGovernor(commitment) {
        const args = this._buildArgs([], commitment);
        const unsafeRes = await this._rpcRequest("getInflationGovernor", args);
        const res = create(unsafeRes, GetInflationGovernorRpcResult);
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, "failed to get inflation");
        }
        return res.result;
      }
      /**
       * Fetch the inflation reward for a list of addresses for an epoch
       */
      async getInflationReward(addresses2, epoch, commitmentOrConfig) {
        const {
          commitment,
          config
        } = extractCommitmentFromConfig(commitmentOrConfig);
        const args = this._buildArgs([addresses2.map((pubkey) => pubkey.toBase58())], commitment, void 0, {
          ...config,
          epoch: epoch != null ? epoch : config == null ? void 0 : config.epoch
        });
        const unsafeRes = await this._rpcRequest("getInflationReward", args);
        const res = create(unsafeRes, GetInflationRewardResult);
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, "failed to get inflation reward");
        }
        return res.result;
      }
      /**
       * Fetch the specific inflation values for the current epoch
       */
      async getInflationRate() {
        const unsafeRes = await this._rpcRequest("getInflationRate", []);
        const res = create(unsafeRes, GetInflationRateRpcResult);
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, "failed to get inflation rate");
        }
        return res.result;
      }
      /**
       * Fetch the Epoch Info parameters
       */
      async getEpochInfo(commitmentOrConfig) {
        const {
          commitment,
          config
        } = extractCommitmentFromConfig(commitmentOrConfig);
        const args = this._buildArgs([], commitment, void 0, config);
        const unsafeRes = await this._rpcRequest("getEpochInfo", args);
        const res = create(unsafeRes, GetEpochInfoRpcResult);
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, "failed to get epoch info");
        }
        return res.result;
      }
      /**
       * Fetch the Epoch Schedule parameters
       */
      async getEpochSchedule() {
        const unsafeRes = await this._rpcRequest("getEpochSchedule", []);
        const res = create(unsafeRes, GetEpochScheduleRpcResult);
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, "failed to get epoch schedule");
        }
        const epochSchedule = res.result;
        return new EpochSchedule(epochSchedule.slotsPerEpoch, epochSchedule.leaderScheduleSlotOffset, epochSchedule.warmup, epochSchedule.firstNormalEpoch, epochSchedule.firstNormalSlot);
      }
      /**
       * Fetch the leader schedule for the current epoch
       * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}
       */
      async getLeaderSchedule() {
        const unsafeRes = await this._rpcRequest("getLeaderSchedule", []);
        const res = create(unsafeRes, GetLeaderScheduleRpcResult);
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, "failed to get leader schedule");
        }
        return res.result;
      }
      /**
       * Fetch the minimum balance needed to exempt an account of `dataLength`
       * size from rent
       */
      async getMinimumBalanceForRentExemption(dataLength, commitment) {
        const args = this._buildArgs([dataLength], commitment);
        const unsafeRes = await this._rpcRequest("getMinimumBalanceForRentExemption", args);
        const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);
        if ("error" in res) {
          console.warn("Unable to fetch minimum balance for rent exemption");
          return 0;
        }
        return res.result;
      }
      /**
       * Fetch a recent blockhash from the cluster, return with context
       * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}
       *
       * @deprecated Deprecated since RPC v1.9.0. Please use {@link getLatestBlockhash} instead.
       */
      async getRecentBlockhashAndContext(commitment) {
        const {
          context,
          value: {
            blockhash
          }
        } = await this.getLatestBlockhashAndContext(commitment);
        const feeCalculator = {
          get lamportsPerSignature() {
            throw new Error("The capability to fetch `lamportsPerSignature` using the `getRecentBlockhash` API is no longer offered by the network. Use the `getFeeForMessage` API to obtain the fee for a given message.");
          },
          toJSON() {
            return {};
          }
        };
        return {
          context,
          value: {
            blockhash,
            feeCalculator
          }
        };
      }
      /**
       * Fetch recent performance samples
       * @return {Promise<Array<PerfSample>>}
       */
      async getRecentPerformanceSamples(limit) {
        const unsafeRes = await this._rpcRequest("getRecentPerformanceSamples", limit ? [limit] : []);
        const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, "failed to get recent performance samples");
        }
        return res.result;
      }
      /**
       * Fetch the fee calculator for a recent blockhash from the cluster, return with context
       *
       * @deprecated Deprecated since RPC v1.9.0. Please use {@link getFeeForMessage} instead.
       */
      async getFeeCalculatorForBlockhash(blockhash, commitment) {
        const args = this._buildArgs([blockhash], commitment);
        const unsafeRes = await this._rpcRequest("getFeeCalculatorForBlockhash", args);
        const res = create(unsafeRes, GetFeeCalculatorRpcResult);
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, "failed to get fee calculator");
        }
        const {
          context,
          value
        } = res.result;
        return {
          context,
          value: value !== null ? value.feeCalculator : null
        };
      }
      /**
       * Fetch the fee for a message from the cluster, return with context
       */
      async getFeeForMessage(message, commitment) {
        const wireMessage = toBuffer(message.serialize()).toString("base64");
        const args = this._buildArgs([wireMessage], commitment);
        const unsafeRes = await this._rpcRequest("getFeeForMessage", args);
        const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, "failed to get fee for message");
        }
        if (res.result === null) {
          throw new Error("invalid blockhash");
        }
        return res.result;
      }
      /**
       * Fetch a list of prioritization fees from recent blocks.
       */
      async getRecentPrioritizationFees(config) {
        var _a;
        const accounts = (_a = config == null ? void 0 : config.lockedWritableAccounts) == null ? void 0 : _a.map((key) => key.toBase58());
        const args = (accounts == null ? void 0 : accounts.length) ? [accounts] : [];
        const unsafeRes = await this._rpcRequest("getRecentPrioritizationFees", args);
        const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, "failed to get recent prioritization fees");
        }
        return res.result;
      }
      /**
       * Fetch a recent blockhash from the cluster
       * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}
       *
       * @deprecated Deprecated since RPC v1.8.0. Please use {@link getLatestBlockhash} instead.
       */
      async getRecentBlockhash(commitment) {
        try {
          const res = await this.getRecentBlockhashAndContext(commitment);
          return res.value;
        } catch (e) {
          throw new Error("failed to get recent blockhash: " + e);
        }
      }
      /**
       * Fetch the latest blockhash from the cluster
       * @return {Promise<BlockhashWithExpiryBlockHeight>}
       */
      async getLatestBlockhash(commitmentOrConfig) {
        try {
          const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);
          return res.value;
        } catch (e) {
          throw new Error("failed to get recent blockhash: " + e);
        }
      }
      /**
       * Fetch the latest blockhash from the cluster
       * @return {Promise<BlockhashWithExpiryBlockHeight>}
       */
      async getLatestBlockhashAndContext(commitmentOrConfig) {
        const {
          commitment,
          config
        } = extractCommitmentFromConfig(commitmentOrConfig);
        const args = this._buildArgs([], commitment, void 0, config);
        const unsafeRes = await this._rpcRequest("getLatestBlockhash", args);
        const res = create(unsafeRes, GetLatestBlockhashRpcResult);
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, "failed to get latest blockhash");
        }
        return res.result;
      }
      /**
       * Returns whether a blockhash is still valid or not
       */
      async isBlockhashValid(blockhash, rawConfig) {
        const {
          commitment,
          config
        } = extractCommitmentFromConfig(rawConfig);
        const args = this._buildArgs([blockhash], commitment, void 0, config);
        const unsafeRes = await this._rpcRequest("isBlockhashValid", args);
        const res = create(unsafeRes, IsBlockhashValidRpcResult);
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, "failed to determine if the blockhash `" + blockhash + "`is valid");
        }
        return res.result;
      }
      /**
       * Fetch the node version
       */
      async getVersion() {
        const unsafeRes = await this._rpcRequest("getVersion", []);
        const res = create(unsafeRes, jsonRpcResult(VersionResult));
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, "failed to get version");
        }
        return res.result;
      }
      /**
       * Fetch the genesis hash
       */
      async getGenesisHash() {
        const unsafeRes = await this._rpcRequest("getGenesisHash", []);
        const res = create(unsafeRes, jsonRpcResult(string()));
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, "failed to get genesis hash");
        }
        return res.result;
      }
      /**
       * Fetch a processed block from the cluster.
       *
       * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by
       * setting the `maxSupportedTransactionVersion` property.
       */
      /**
       * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by
       * setting the `maxSupportedTransactionVersion` property.
       */
      // eslint-disable-next-line no-dupe-class-members
      /**
       * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by
       * setting the `maxSupportedTransactionVersion` property.
       */
      // eslint-disable-next-line no-dupe-class-members
      /**
       * Fetch a processed block from the cluster.
       */
      // eslint-disable-next-line no-dupe-class-members
      // eslint-disable-next-line no-dupe-class-members
      // eslint-disable-next-line no-dupe-class-members
      /**
       * Fetch a processed block from the cluster.
       */
      // eslint-disable-next-line no-dupe-class-members
      async getBlock(slot, rawConfig) {
        const {
          commitment,
          config
        } = extractCommitmentFromConfig(rawConfig);
        const args = this._buildArgsAtLeastConfirmed([slot], commitment, void 0, config);
        const unsafeRes = await this._rpcRequest("getBlock", args);
        try {
          switch (config == null ? void 0 : config.transactionDetails) {
            case "accounts": {
              const res = create(unsafeRes, GetAccountsModeBlockRpcResult);
              if ("error" in res) {
                throw res.error;
              }
              return res.result;
            }
            case "none": {
              const res = create(unsafeRes, GetNoneModeBlockRpcResult);
              if ("error" in res) {
                throw res.error;
              }
              return res.result;
            }
            default: {
              const res = create(unsafeRes, GetBlockRpcResult);
              if ("error" in res) {
                throw res.error;
              }
              const {
                result
              } = res;
              return result ? {
                ...result,
                transactions: result.transactions.map(({
                  transaction,
                  meta,
                  version: version2
                }) => ({
                  meta,
                  transaction: {
                    ...transaction,
                    message: versionedMessageFromResponse(version2, transaction.message)
                  },
                  version: version2
                }))
              } : null;
            }
          }
        } catch (e) {
          throw new SolanaJSONRPCError(e, "failed to get confirmed block");
        }
      }
      /**
       * Fetch parsed transaction details for a confirmed or finalized block
       */
      // eslint-disable-next-line no-dupe-class-members
      // eslint-disable-next-line no-dupe-class-members
      // eslint-disable-next-line no-dupe-class-members
      async getParsedBlock(slot, rawConfig) {
        const {
          commitment,
          config
        } = extractCommitmentFromConfig(rawConfig);
        const args = this._buildArgsAtLeastConfirmed([slot], commitment, "jsonParsed", config);
        const unsafeRes = await this._rpcRequest("getBlock", args);
        try {
          switch (config == null ? void 0 : config.transactionDetails) {
            case "accounts": {
              const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);
              if ("error" in res) {
                throw res.error;
              }
              return res.result;
            }
            case "none": {
              const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);
              if ("error" in res) {
                throw res.error;
              }
              return res.result;
            }
            default: {
              const res = create(unsafeRes, GetParsedBlockRpcResult);
              if ("error" in res) {
                throw res.error;
              }
              return res.result;
            }
          }
        } catch (e) {
          throw new SolanaJSONRPCError(e, "failed to get block");
        }
      }
      /*
       * Returns recent block production information from the current or previous epoch
       */
      async getBlockProduction(configOrCommitment) {
        let extra;
        let commitment;
        if (typeof configOrCommitment === "string") {
          commitment = configOrCommitment;
        } else if (configOrCommitment) {
          const {
            commitment: c,
            ...rest
          } = configOrCommitment;
          commitment = c;
          extra = rest;
        }
        const args = this._buildArgs([], commitment, "base64", extra);
        const unsafeRes = await this._rpcRequest("getBlockProduction", args);
        const res = create(unsafeRes, BlockProductionResponseStruct);
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, "failed to get block production information");
        }
        return res.result;
      }
      /**
       * Fetch a confirmed or finalized transaction from the cluster.
       *
       * @deprecated Instead, call `getTransaction` using a
       * `GetVersionedTransactionConfig` by setting the
       * `maxSupportedTransactionVersion` property.
       */
      /**
       * Fetch a confirmed or finalized transaction from the cluster.
       */
      // eslint-disable-next-line no-dupe-class-members
      /**
       * Fetch a confirmed or finalized transaction from the cluster.
       */
      // eslint-disable-next-line no-dupe-class-members
      async getTransaction(signature2, rawConfig) {
        const {
          commitment,
          config
        } = extractCommitmentFromConfig(rawConfig);
        const args = this._buildArgsAtLeastConfirmed([signature2], commitment, void 0, config);
        const unsafeRes = await this._rpcRequest("getTransaction", args);
        const res = create(unsafeRes, GetTransactionRpcResult);
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, "failed to get transaction");
        }
        const result = res.result;
        if (!result) return result;
        return {
          ...result,
          transaction: {
            ...result.transaction,
            message: versionedMessageFromResponse(result.version, result.transaction.message)
          }
        };
      }
      /**
       * Fetch parsed transaction details for a confirmed or finalized transaction
       */
      async getParsedTransaction(signature2, commitmentOrConfig) {
        const {
          commitment,
          config
        } = extractCommitmentFromConfig(commitmentOrConfig);
        const args = this._buildArgsAtLeastConfirmed([signature2], commitment, "jsonParsed", config);
        const unsafeRes = await this._rpcRequest("getTransaction", args);
        const res = create(unsafeRes, GetParsedTransactionRpcResult);
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, "failed to get transaction");
        }
        return res.result;
      }
      /**
       * Fetch parsed transaction details for a batch of confirmed transactions
       */
      async getParsedTransactions(signatures, commitmentOrConfig) {
        const {
          commitment,
          config
        } = extractCommitmentFromConfig(commitmentOrConfig);
        const batch = signatures.map((signature2) => {
          const args = this._buildArgsAtLeastConfirmed([signature2], commitment, "jsonParsed", config);
          return {
            methodName: "getTransaction",
            args
          };
        });
        const unsafeRes = await this._rpcBatchRequest(batch);
        const res = unsafeRes.map((unsafeRes2) => {
          const res2 = create(unsafeRes2, GetParsedTransactionRpcResult);
          if ("error" in res2) {
            throw new SolanaJSONRPCError(res2.error, "failed to get transactions");
          }
          return res2.result;
        });
        return res;
      }
      /**
       * Fetch transaction details for a batch of confirmed transactions.
       * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.
       *
       * @deprecated Instead, call `getTransactions` using a
       * `GetVersionedTransactionConfig` by setting the
       * `maxSupportedTransactionVersion` property.
       */
      /**
       * Fetch transaction details for a batch of confirmed transactions.
       * Similar to {@link getParsedTransactions} but returns a {@link
       * VersionedTransactionResponse}.
       */
      // eslint-disable-next-line no-dupe-class-members
      /**
       * Fetch transaction details for a batch of confirmed transactions.
       * Similar to {@link getParsedTransactions} but returns a {@link
       * VersionedTransactionResponse}.
       */
      // eslint-disable-next-line no-dupe-class-members
      async getTransactions(signatures, commitmentOrConfig) {
        const {
          commitment,
          config
        } = extractCommitmentFromConfig(commitmentOrConfig);
        const batch = signatures.map((signature2) => {
          const args = this._buildArgsAtLeastConfirmed([signature2], commitment, void 0, config);
          return {
            methodName: "getTransaction",
            args
          };
        });
        const unsafeRes = await this._rpcBatchRequest(batch);
        const res = unsafeRes.map((unsafeRes2) => {
          const res2 = create(unsafeRes2, GetTransactionRpcResult);
          if ("error" in res2) {
            throw new SolanaJSONRPCError(res2.error, "failed to get transactions");
          }
          const result = res2.result;
          if (!result) return result;
          return {
            ...result,
            transaction: {
              ...result.transaction,
              message: versionedMessageFromResponse(result.version, result.transaction.message)
            }
          };
        });
        return res;
      }
      /**
       * Fetch a list of Transactions and transaction statuses from the cluster
       * for a confirmed block.
       *
       * @deprecated Deprecated since RPC v1.7.0. Please use {@link getBlock} instead.
       */
      async getConfirmedBlock(slot, commitment) {
        const args = this._buildArgsAtLeastConfirmed([slot], commitment);
        const unsafeRes = await this._rpcRequest("getBlock", args);
        const res = create(unsafeRes, GetConfirmedBlockRpcResult);
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, "failed to get confirmed block");
        }
        const result = res.result;
        if (!result) {
          throw new Error("Confirmed block " + slot + " not found");
        }
        const block = {
          ...result,
          transactions: result.transactions.map(({
            transaction,
            meta
          }) => {
            const message = new Message(transaction.message);
            return {
              meta,
              transaction: {
                ...transaction,
                message
              }
            };
          })
        };
        return {
          ...block,
          transactions: block.transactions.map(({
            transaction,
            meta
          }) => {
            return {
              meta,
              transaction: Transaction.populate(transaction.message, transaction.signatures)
            };
          })
        };
      }
      /**
       * Fetch confirmed blocks between two slots
       */
      async getBlocks(startSlot, endSlot, commitment) {
        const args = this._buildArgsAtLeastConfirmed(endSlot !== void 0 ? [startSlot, endSlot] : [startSlot], commitment);
        const unsafeRes = await this._rpcRequest("getBlocks", args);
        const res = create(unsafeRes, jsonRpcResult(array(number())));
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, "failed to get blocks");
        }
        return res.result;
      }
      /**
       * Fetch a list of Signatures from the cluster for a block, excluding rewards
       */
      async getBlockSignatures(slot, commitment) {
        const args = this._buildArgsAtLeastConfirmed([slot], commitment, void 0, {
          transactionDetails: "signatures",
          rewards: false
        });
        const unsafeRes = await this._rpcRequest("getBlock", args);
        const res = create(unsafeRes, GetBlockSignaturesRpcResult);
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, "failed to get block");
        }
        const result = res.result;
        if (!result) {
          throw new Error("Block " + slot + " not found");
        }
        return result;
      }
      /**
       * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards
       *
       * @deprecated Deprecated since RPC v1.7.0. Please use {@link getBlockSignatures} instead.
       */
      async getConfirmedBlockSignatures(slot, commitment) {
        const args = this._buildArgsAtLeastConfirmed([slot], commitment, void 0, {
          transactionDetails: "signatures",
          rewards: false
        });
        const unsafeRes = await this._rpcRequest("getBlock", args);
        const res = create(unsafeRes, GetBlockSignaturesRpcResult);
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, "failed to get confirmed block");
        }
        const result = res.result;
        if (!result) {
          throw new Error("Confirmed block " + slot + " not found");
        }
        return result;
      }
      /**
       * Fetch a transaction details for a confirmed transaction
       *
       * @deprecated Deprecated since RPC v1.7.0. Please use {@link getTransaction} instead.
       */
      async getConfirmedTransaction(signature2, commitment) {
        const args = this._buildArgsAtLeastConfirmed([signature2], commitment);
        const unsafeRes = await this._rpcRequest("getTransaction", args);
        const res = create(unsafeRes, GetTransactionRpcResult);
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, "failed to get transaction");
        }
        const result = res.result;
        if (!result) return result;
        const message = new Message(result.transaction.message);
        const signatures = result.transaction.signatures;
        return {
          ...result,
          transaction: Transaction.populate(message, signatures)
        };
      }
      /**
       * Fetch parsed transaction details for a confirmed transaction
       *
       * @deprecated Deprecated since RPC v1.7.0. Please use {@link getParsedTransaction} instead.
       */
      async getParsedConfirmedTransaction(signature2, commitment) {
        const args = this._buildArgsAtLeastConfirmed([signature2], commitment, "jsonParsed");
        const unsafeRes = await this._rpcRequest("getTransaction", args);
        const res = create(unsafeRes, GetParsedTransactionRpcResult);
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, "failed to get confirmed transaction");
        }
        return res.result;
      }
      /**
       * Fetch parsed transaction details for a batch of confirmed transactions
       *
       * @deprecated Deprecated since RPC v1.7.0. Please use {@link getParsedTransactions} instead.
       */
      async getParsedConfirmedTransactions(signatures, commitment) {
        const batch = signatures.map((signature2) => {
          const args = this._buildArgsAtLeastConfirmed([signature2], commitment, "jsonParsed");
          return {
            methodName: "getTransaction",
            args
          };
        });
        const unsafeRes = await this._rpcBatchRequest(batch);
        const res = unsafeRes.map((unsafeRes2) => {
          const res2 = create(unsafeRes2, GetParsedTransactionRpcResult);
          if ("error" in res2) {
            throw new SolanaJSONRPCError(res2.error, "failed to get confirmed transactions");
          }
          return res2.result;
        });
        return res;
      }
      /**
       * Fetch a list of all the confirmed signatures for transactions involving an address
       * within a specified slot range. Max range allowed is 10,000 slots.
       *
       * @deprecated Deprecated since RPC v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.
       *
       * @param address queried address
       * @param startSlot start slot, inclusive
       * @param endSlot end slot, inclusive
       */
      async getConfirmedSignaturesForAddress(address, startSlot, endSlot) {
        let options = {};
        let firstAvailableBlock = await this.getFirstAvailableBlock();
        while (!("until" in options)) {
          startSlot--;
          if (startSlot <= 0 || startSlot < firstAvailableBlock) {
            break;
          }
          try {
            const block = await this.getConfirmedBlockSignatures(startSlot, "finalized");
            if (block.signatures.length > 0) {
              options.until = block.signatures[block.signatures.length - 1].toString();
            }
          } catch (err) {
            if (err instanceof Error && err.message.includes("skipped")) {
              continue;
            } else {
              throw err;
            }
          }
        }
        let highestConfirmedRoot = await this.getSlot("finalized");
        while (!("before" in options)) {
          endSlot++;
          if (endSlot > highestConfirmedRoot) {
            break;
          }
          try {
            const block = await this.getConfirmedBlockSignatures(endSlot);
            if (block.signatures.length > 0) {
              options.before = block.signatures[block.signatures.length - 1].toString();
            }
          } catch (err) {
            if (err instanceof Error && err.message.includes("skipped")) {
              continue;
            } else {
              throw err;
            }
          }
        }
        const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(address, options);
        return confirmedSignatureInfo.map((info) => info.signature);
      }
      /**
       * Returns confirmed signatures for transactions involving an
       * address backwards in time from the provided signature or most recent confirmed block
       *
       * @deprecated Deprecated since RPC v1.7.0. Please use {@link getSignaturesForAddress} instead.
       */
      async getConfirmedSignaturesForAddress2(address, options, commitment) {
        const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, void 0, options);
        const unsafeRes = await this._rpcRequest("getConfirmedSignaturesForAddress2", args);
        const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, "failed to get confirmed signatures for address");
        }
        return res.result;
      }
      /**
       * Returns confirmed signatures for transactions involving an
       * address backwards in time from the provided signature or most recent confirmed block
       *
       *
       * @param address queried address
       * @param options
       */
      async getSignaturesForAddress(address, options, commitment) {
        const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, void 0, options);
        const unsafeRes = await this._rpcRequest("getSignaturesForAddress", args);
        const res = create(unsafeRes, GetSignaturesForAddressRpcResult);
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, "failed to get signatures for address");
        }
        return res.result;
      }
      async getAddressLookupTable(accountKey, config) {
        const {
          context,
          value: accountInfo
        } = await this.getAccountInfoAndContext(accountKey, config);
        let value = null;
        if (accountInfo !== null) {
          value = new AddressLookupTableAccount({
            key: accountKey,
            state: AddressLookupTableAccount.deserialize(accountInfo.data)
          });
        }
        return {
          context,
          value
        };
      }
      /**
       * Fetch the contents of a Nonce account from the cluster, return with context
       */
      async getNonceAndContext(nonceAccount, commitmentOrConfig) {
        const {
          context,
          value: accountInfo
        } = await this.getAccountInfoAndContext(nonceAccount, commitmentOrConfig);
        let value = null;
        if (accountInfo !== null) {
          value = NonceAccount.fromAccountData(accountInfo.data);
        }
        return {
          context,
          value
        };
      }
      /**
       * Fetch the contents of a Nonce account from the cluster
       */
      async getNonce(nonceAccount, commitmentOrConfig) {
        return await this.getNonceAndContext(nonceAccount, commitmentOrConfig).then((x) => x.value).catch((e) => {
          throw new Error("failed to get nonce for account " + nonceAccount.toBase58() + ": " + e);
        });
      }
      /**
       * Request an allocation of lamports to the specified address
       *
       * ```typescript
       * import { Connection, PublicKey, LAMPORTS_PER_SOL } from "@solana/web3.js";
       *
       * (async () => {
       *   const connection = new Connection("https://api.testnet.solana.com", "confirmed");
       *   const myAddress = new PublicKey("2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM");
       *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);
       *   await connection.confirmTransaction(signature);
       * })();
       * ```
       */
      async requestAirdrop(to, lamports) {
        const unsafeRes = await this._rpcRequest("requestAirdrop", [to.toBase58(), lamports]);
        const res = create(unsafeRes, RequestAirdropRpcResult);
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, `airdrop to ${to.toBase58()} failed`);
        }
        return res.result;
      }
      /**
       * @internal
       */
      async _blockhashWithExpiryBlockHeight(disableCache) {
        if (!disableCache) {
          while (this._pollingBlockhash) {
            await sleep(100);
          }
          const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;
          const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;
          if (this._blockhashInfo.latestBlockhash !== null && !expired) {
            return this._blockhashInfo.latestBlockhash;
          }
        }
        return await this._pollNewBlockhash();
      }
      /**
       * @internal
       */
      async _pollNewBlockhash() {
        this._pollingBlockhash = true;
        try {
          const startTime = Date.now();
          const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;
          const cachedBlockhash = cachedLatestBlockhash ? cachedLatestBlockhash.blockhash : null;
          for (let i = 0; i < 50; i++) {
            const latestBlockhash = await this.getLatestBlockhash("finalized");
            if (cachedBlockhash !== latestBlockhash.blockhash) {
              this._blockhashInfo = {
                latestBlockhash,
                lastFetch: Date.now(),
                transactionSignatures: [],
                simulatedSignatures: []
              };
              return latestBlockhash;
            }
            await sleep(MS_PER_SLOT / 2);
          }
          throw new Error(`Unable to obtain a new blockhash after ${Date.now() - startTime}ms`);
        } finally {
          this._pollingBlockhash = false;
        }
      }
      /**
       * get the stake minimum delegation
       */
      async getStakeMinimumDelegation(config) {
        const {
          commitment,
          config: configArg
        } = extractCommitmentFromConfig(config);
        const args = this._buildArgs([], commitment, "base64", configArg);
        const unsafeRes = await this._rpcRequest("getStakeMinimumDelegation", args);
        const res = create(unsafeRes, jsonRpcResultAndContext(number()));
        if ("error" in res) {
          throw new SolanaJSONRPCError(res.error, `failed to get stake minimum delegation`);
        }
        return res.result;
      }
      /**
       * Simulate a transaction
       *
       * @deprecated Instead, call {@link simulateTransaction} with {@link
       * VersionedTransaction} and {@link SimulateTransactionConfig} parameters
       */
      /**
       * Simulate a transaction
       */
      // eslint-disable-next-line no-dupe-class-members
      /**
       * Simulate a transaction
       */
      // eslint-disable-next-line no-dupe-class-members
      async simulateTransaction(transactionOrMessage, configOrSigners, includeAccounts) {
        if ("message" in transactionOrMessage) {
          const versionedTx = transactionOrMessage;
          const wireTransaction2 = versionedTx.serialize();
          const encodedTransaction2 = import_buffer2.Buffer.from(wireTransaction2).toString("base64");
          if (Array.isArray(configOrSigners) || includeAccounts !== void 0) {
            throw new Error("Invalid arguments");
          }
          const config2 = configOrSigners || {};
          config2.encoding = "base64";
          if (!("commitment" in config2)) {
            config2.commitment = this.commitment;
          }
          if (configOrSigners && typeof configOrSigners === "object" && "innerInstructions" in configOrSigners) {
            config2.innerInstructions = configOrSigners.innerInstructions;
          }
          const args2 = [encodedTransaction2, config2];
          const unsafeRes2 = await this._rpcRequest("simulateTransaction", args2);
          const res2 = create(unsafeRes2, SimulatedTransactionResponseStruct);
          if ("error" in res2) {
            throw new Error("failed to simulate transaction: " + res2.error.message);
          }
          return res2.result;
        }
        let transaction;
        if (transactionOrMessage instanceof Transaction) {
          let originalTx = transactionOrMessage;
          transaction = new Transaction();
          transaction.feePayer = originalTx.feePayer;
          transaction.instructions = transactionOrMessage.instructions;
          transaction.nonceInfo = originalTx.nonceInfo;
          transaction.signatures = originalTx.signatures;
        } else {
          transaction = Transaction.populate(transactionOrMessage);
          transaction._message = transaction._json = void 0;
        }
        if (configOrSigners !== void 0 && !Array.isArray(configOrSigners)) {
          throw new Error("Invalid arguments");
        }
        const signers = configOrSigners;
        if (transaction.nonceInfo && signers) {
          transaction.sign(...signers);
        } else {
          let disableCache = this._disableBlockhashCaching;
          for (; ; ) {
            const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);
            transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;
            transaction.recentBlockhash = latestBlockhash.blockhash;
            if (!signers) break;
            transaction.sign(...signers);
            if (!transaction.signature) {
              throw new Error("!signature");
            }
            const signature2 = transaction.signature.toString("base64");
            if (!this._blockhashInfo.simulatedSignatures.includes(signature2) && !this._blockhashInfo.transactionSignatures.includes(signature2)) {
              this._blockhashInfo.simulatedSignatures.push(signature2);
              break;
            } else {
              disableCache = true;
            }
          }
        }
        const message = transaction._compile();
        const signData = message.serialize();
        const wireTransaction = transaction._serialize(signData);
        const encodedTransaction = wireTransaction.toString("base64");
        const config = {
          encoding: "base64",
          commitment: this.commitment
        };
        if (includeAccounts) {
          const addresses2 = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map((key) => key.toBase58());
          config["accounts"] = {
            encoding: "base64",
            addresses: addresses2
          };
        }
        if (signers) {
          config.sigVerify = true;
        }
        if (configOrSigners && typeof configOrSigners === "object" && "innerInstructions" in configOrSigners) {
          config.innerInstructions = configOrSigners.innerInstructions;
        }
        const args = [encodedTransaction, config];
        const unsafeRes = await this._rpcRequest("simulateTransaction", args);
        const res = create(unsafeRes, SimulatedTransactionResponseStruct);
        if ("error" in res) {
          let logs;
          if ("data" in res.error) {
            logs = res.error.data.logs;
            if (logs && Array.isArray(logs)) {
              const traceIndent = "\n    ";
              const logTrace = traceIndent + logs.join(traceIndent);
              console.error(res.error.message, logTrace);
            }
          }
          throw new SendTransactionError({
            action: "simulate",
            signature: "",
            transactionMessage: res.error.message,
            logs
          });
        }
        return res.result;
      }
      /**
       * Sign and send a transaction
       *
       * @deprecated Instead, call {@link sendTransaction} with a {@link
       * VersionedTransaction}
       */
      /**
       * Send a signed transaction
       */
      // eslint-disable-next-line no-dupe-class-members
      /**
       * Sign and send a transaction
       */
      // eslint-disable-next-line no-dupe-class-members
      async sendTransaction(transaction, signersOrOptions, options) {
        if ("version" in transaction) {
          if (signersOrOptions && Array.isArray(signersOrOptions)) {
            throw new Error("Invalid arguments");
          }
          const wireTransaction2 = transaction.serialize();
          return await this.sendRawTransaction(wireTransaction2, signersOrOptions);
        }
        if (signersOrOptions === void 0 || !Array.isArray(signersOrOptions)) {
          throw new Error("Invalid arguments");
        }
        const signers = signersOrOptions;
        if (transaction.nonceInfo) {
          transaction.sign(...signers);
        } else {
          let disableCache = this._disableBlockhashCaching;
          for (; ; ) {
            const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);
            transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;
            transaction.recentBlockhash = latestBlockhash.blockhash;
            transaction.sign(...signers);
            if (!transaction.signature) {
              throw new Error("!signature");
            }
            const signature2 = transaction.signature.toString("base64");
            if (!this._blockhashInfo.transactionSignatures.includes(signature2)) {
              this._blockhashInfo.transactionSignatures.push(signature2);
              break;
            } else {
              disableCache = true;
            }
          }
        }
        const wireTransaction = transaction.serialize();
        return await this.sendRawTransaction(wireTransaction, options);
      }
      /**
       * Send a transaction that has already been signed and serialized into the
       * wire format
       */
      async sendRawTransaction(rawTransaction, options) {
        const encodedTransaction = toBuffer(rawTransaction).toString("base64");
        const result = await this.sendEncodedTransaction(encodedTransaction, options);
        return result;
      }
      /**
       * Send a transaction that has already been signed, serialized into the
       * wire format, and encoded as a base64 string
       */
      async sendEncodedTransaction(encodedTransaction, options) {
        const config = {
          encoding: "base64"
        };
        const skipPreflight = options && options.skipPreflight;
        const preflightCommitment = skipPreflight === true ? "processed" : options && options.preflightCommitment || this.commitment;
        if (options && options.maxRetries != null) {
          config.maxRetries = options.maxRetries;
        }
        if (options && options.minContextSlot != null) {
          config.minContextSlot = options.minContextSlot;
        }
        if (skipPreflight) {
          config.skipPreflight = skipPreflight;
        }
        if (preflightCommitment) {
          config.preflightCommitment = preflightCommitment;
        }
        const args = [encodedTransaction, config];
        const unsafeRes = await this._rpcRequest("sendTransaction", args);
        const res = create(unsafeRes, SendTransactionRpcResult);
        if ("error" in res) {
          let logs = void 0;
          if ("data" in res.error) {
            logs = res.error.data.logs;
          }
          throw new SendTransactionError({
            action: skipPreflight ? "send" : "simulate",
            signature: "",
            transactionMessage: res.error.message,
            logs
          });
        }
        return res.result;
      }
      /**
       * @internal
       */
      _wsOnOpen() {
        this._rpcWebSocketConnected = true;
        this._rpcWebSocketHeartbeat = setInterval(() => {
          (async () => {
            try {
              await this._rpcWebSocket.notify("ping");
            } catch {
            }
          })();
        }, 5e3);
        this._updateSubscriptions();
      }
      /**
       * @internal
       */
      _wsOnError(err) {
        this._rpcWebSocketConnected = false;
        console.error("ws error:", err.message);
      }
      /**
       * @internal
       */
      _wsOnClose(code) {
        this._rpcWebSocketConnected = false;
        this._rpcWebSocketGeneration = (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;
        if (this._rpcWebSocketIdleTimeout) {
          clearTimeout(this._rpcWebSocketIdleTimeout);
          this._rpcWebSocketIdleTimeout = null;
        }
        if (this._rpcWebSocketHeartbeat) {
          clearInterval(this._rpcWebSocketHeartbeat);
          this._rpcWebSocketHeartbeat = null;
        }
        if (code === 1e3) {
          this._updateSubscriptions();
          return;
        }
        this._subscriptionCallbacksByServerSubscriptionId = {};
        Object.entries(this._subscriptionsByHash).forEach(([hash, subscription]) => {
          this._setSubscription(hash, {
            ...subscription,
            state: "pending"
          });
        });
      }
      /**
       * @internal
       */
      _setSubscription(hash, nextSubscription) {
        var _a;
        const prevState = (_a = this._subscriptionsByHash[hash]) == null ? void 0 : _a.state;
        this._subscriptionsByHash[hash] = nextSubscription;
        if (prevState !== nextSubscription.state) {
          const stateChangeCallbacks = this._subscriptionStateChangeCallbacksByHash[hash];
          if (stateChangeCallbacks) {
            stateChangeCallbacks.forEach((cb) => {
              try {
                cb(nextSubscription.state);
              } catch {
              }
            });
          }
        }
      }
      /**
       * @internal
       */
      _onSubscriptionStateChange(clientSubscriptionId, callback) {
        var _a;
        const hash = this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];
        if (hash == null) {
          return () => {
          };
        }
        const stateChangeCallbacks = (_a = this._subscriptionStateChangeCallbacksByHash)[hash] || (_a[hash] = /* @__PURE__ */ new Set());
        stateChangeCallbacks.add(callback);
        return () => {
          stateChangeCallbacks.delete(callback);
          if (stateChangeCallbacks.size === 0) {
            delete this._subscriptionStateChangeCallbacksByHash[hash];
          }
        };
      }
      /**
       * @internal
       */
      async _updateSubscriptions() {
        if (Object.keys(this._subscriptionsByHash).length === 0) {
          if (this._rpcWebSocketConnected) {
            this._rpcWebSocketConnected = false;
            this._rpcWebSocketIdleTimeout = setTimeout(() => {
              this._rpcWebSocketIdleTimeout = null;
              try {
                this._rpcWebSocket.close();
              } catch (err) {
                if (err instanceof Error) {
                  console.log(`Error when closing socket connection: ${err.message}`);
                }
              }
            }, 500);
          }
          return;
        }
        if (this._rpcWebSocketIdleTimeout !== null) {
          clearTimeout(this._rpcWebSocketIdleTimeout);
          this._rpcWebSocketIdleTimeout = null;
          this._rpcWebSocketConnected = true;
        }
        if (!this._rpcWebSocketConnected) {
          this._rpcWebSocket.connect();
          return;
        }
        const activeWebSocketGeneration = this._rpcWebSocketGeneration;
        const isCurrentConnectionStillActive = () => {
          return activeWebSocketGeneration === this._rpcWebSocketGeneration;
        };
        await Promise.all(
          // Don't be tempted to change this to `Object.entries`. We call
          // `_updateSubscriptions` recursively when processing the state,
          // so it's important that we look up the *current* version of
          // each subscription, every time we process a hash.
          Object.keys(this._subscriptionsByHash).map(async (hash) => {
            const subscription = this._subscriptionsByHash[hash];
            if (subscription === void 0) {
              return;
            }
            switch (subscription.state) {
              case "pending":
              case "unsubscribed":
                if (subscription.callbacks.size === 0) {
                  delete this._subscriptionsByHash[hash];
                  if (subscription.state === "unsubscribed") {
                    delete this._subscriptionCallbacksByServerSubscriptionId[subscription.serverSubscriptionId];
                  }
                  await this._updateSubscriptions();
                  return;
                }
                await (async () => {
                  const {
                    args,
                    method: method2
                  } = subscription;
                  try {
                    this._setSubscription(hash, {
                      ...subscription,
                      state: "subscribing"
                    });
                    const serverSubscriptionId = await this._rpcWebSocket.call(method2, args);
                    this._setSubscription(hash, {
                      ...subscription,
                      serverSubscriptionId,
                      state: "subscribed"
                    });
                    this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId] = subscription.callbacks;
                    await this._updateSubscriptions();
                  } catch (e) {
                    console.error(`Received ${e instanceof Error ? "" : "JSON-RPC "}error calling \`${method2}\``, {
                      args,
                      error: e
                    });
                    if (!isCurrentConnectionStillActive()) {
                      return;
                    }
                    this._setSubscription(hash, {
                      ...subscription,
                      state: "pending"
                    });
                    await this._updateSubscriptions();
                  }
                })();
                break;
              case "subscribed":
                if (subscription.callbacks.size === 0) {
                  await (async () => {
                    const {
                      serverSubscriptionId,
                      unsubscribeMethod
                    } = subscription;
                    if (this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)) {
                      this._subscriptionsAutoDisposedByRpc.delete(serverSubscriptionId);
                    } else {
                      this._setSubscription(hash, {
                        ...subscription,
                        state: "unsubscribing"
                      });
                      this._setSubscription(hash, {
                        ...subscription,
                        state: "unsubscribing"
                      });
                      try {
                        await this._rpcWebSocket.call(unsubscribeMethod, [serverSubscriptionId]);
                      } catch (e) {
                        if (e instanceof Error) {
                          console.error(`${unsubscribeMethod} error:`, e.message);
                        }
                        if (!isCurrentConnectionStillActive()) {
                          return;
                        }
                        this._setSubscription(hash, {
                          ...subscription,
                          state: "subscribed"
                        });
                        await this._updateSubscriptions();
                        return;
                      }
                    }
                    this._setSubscription(hash, {
                      ...subscription,
                      state: "unsubscribed"
                    });
                    await this._updateSubscriptions();
                  })();
                }
                break;
            }
          })
        );
      }
      /**
       * @internal
       */
      _handleServerNotification(serverSubscriptionId, callbackArgs) {
        const callbacks = this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];
        if (callbacks === void 0) {
          return;
        }
        callbacks.forEach((cb) => {
          try {
            cb(
              ...callbackArgs
            );
          } catch (e) {
            console.error(e);
          }
        });
      }
      /**
       * @internal
       */
      _wsOnAccountNotification(notification) {
        const {
          result,
          subscription
        } = create(notification, AccountNotificationResult);
        this._handleServerNotification(subscription, [result.value, result.context]);
      }
      /**
       * @internal
       */
      _makeSubscription(subscriptionConfig, args) {
        const clientSubscriptionId = this._nextClientSubscriptionId++;
        const hash = fastStableStringify([subscriptionConfig.method, args]);
        const existingSubscription = this._subscriptionsByHash[hash];
        if (existingSubscription === void 0) {
          this._subscriptionsByHash[hash] = {
            ...subscriptionConfig,
            args,
            callbacks: /* @__PURE__ */ new Set([subscriptionConfig.callback]),
            state: "pending"
          };
        } else {
          existingSubscription.callbacks.add(subscriptionConfig.callback);
        }
        this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;
        this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId] = async () => {
          delete this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];
          delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];
          const subscription = this._subscriptionsByHash[hash];
          assert2(subscription !== void 0, `Could not find a \`Subscription\` when tearing down client subscription #${clientSubscriptionId}`);
          subscription.callbacks.delete(subscriptionConfig.callback);
          await this._updateSubscriptions();
        };
        this._updateSubscriptions();
        return clientSubscriptionId;
      }
      /**
       * Register a callback to be invoked whenever the specified account changes
       *
       * @param publicKey Public key of the account to monitor
       * @param callback Function to invoke whenever the account is changed
       * @param config
       * @return subscription id
       */
      /** @deprecated Instead, pass in an {@link AccountSubscriptionConfig} */
      // eslint-disable-next-line no-dupe-class-members
      // eslint-disable-next-line no-dupe-class-members
      onAccountChange(publicKey2, callback, commitmentOrConfig) {
        const {
          commitment,
          config
        } = extractCommitmentFromConfig(commitmentOrConfig);
        const args = this._buildArgs(
          [publicKey2.toBase58()],
          commitment || this._commitment || "finalized",
          // Apply connection/server default.
          "base64",
          config
        );
        return this._makeSubscription({
          callback,
          method: "accountSubscribe",
          unsubscribeMethod: "accountUnsubscribe"
        }, args);
      }
      /**
       * Deregister an account notification callback
       *
       * @param clientSubscriptionId client subscription id to deregister
       */
      async removeAccountChangeListener(clientSubscriptionId) {
        await this._unsubscribeClientSubscription(clientSubscriptionId, "account change");
      }
      /**
       * @internal
       */
      _wsOnProgramAccountNotification(notification) {
        const {
          result,
          subscription
        } = create(notification, ProgramAccountNotificationResult);
        this._handleServerNotification(subscription, [{
          accountId: result.value.pubkey,
          accountInfo: result.value.account
        }, result.context]);
      }
      /**
       * Register a callback to be invoked whenever accounts owned by the
       * specified program change
       *
       * @param programId Public key of the program to monitor
       * @param callback Function to invoke whenever the account is changed
       * @param config
       * @return subscription id
       */
      /** @deprecated Instead, pass in a {@link ProgramAccountSubscriptionConfig} */
      // eslint-disable-next-line no-dupe-class-members
      // eslint-disable-next-line no-dupe-class-members
      onProgramAccountChange(programId, callback, commitmentOrConfig, maybeFilters) {
        const {
          commitment,
          config
        } = extractCommitmentFromConfig(commitmentOrConfig);
        const args = this._buildArgs(
          [programId.toBase58()],
          commitment || this._commitment || "finalized",
          // Apply connection/server default.
          "base64",
          config ? config : maybeFilters ? {
            filters: applyDefaultMemcmpEncodingToFilters(maybeFilters)
          } : void 0
          /* extra */
        );
        return this._makeSubscription({
          callback,
          method: "programSubscribe",
          unsubscribeMethod: "programUnsubscribe"
        }, args);
      }
      /**
       * Deregister an account notification callback
       *
       * @param clientSubscriptionId client subscription id to deregister
       */
      async removeProgramAccountChangeListener(clientSubscriptionId) {
        await this._unsubscribeClientSubscription(clientSubscriptionId, "program account change");
      }
      /**
       * Registers a callback to be invoked whenever logs are emitted.
       */
      onLogs(filter, callback, commitment) {
        const args = this._buildArgs(
          [typeof filter === "object" ? {
            mentions: [filter.toString()]
          } : filter],
          commitment || this._commitment || "finalized"
          // Apply connection/server default.
        );
        return this._makeSubscription({
          callback,
          method: "logsSubscribe",
          unsubscribeMethod: "logsUnsubscribe"
        }, args);
      }
      /**
       * Deregister a logs callback.
       *
       * @param clientSubscriptionId client subscription id to deregister.
       */
      async removeOnLogsListener(clientSubscriptionId) {
        await this._unsubscribeClientSubscription(clientSubscriptionId, "logs");
      }
      /**
       * @internal
       */
      _wsOnLogsNotification(notification) {
        const {
          result,
          subscription
        } = create(notification, LogsNotificationResult);
        this._handleServerNotification(subscription, [result.value, result.context]);
      }
      /**
       * @internal
       */
      _wsOnSlotNotification(notification) {
        const {
          result,
          subscription
        } = create(notification, SlotNotificationResult);
        this._handleServerNotification(subscription, [result]);
      }
      /**
       * Register a callback to be invoked upon slot changes
       *
       * @param callback Function to invoke whenever the slot changes
       * @return subscription id
       */
      onSlotChange(callback) {
        return this._makeSubscription(
          {
            callback,
            method: "slotSubscribe",
            unsubscribeMethod: "slotUnsubscribe"
          },
          []
          /* args */
        );
      }
      /**
       * Deregister a slot notification callback
       *
       * @param clientSubscriptionId client subscription id to deregister
       */
      async removeSlotChangeListener(clientSubscriptionId) {
        await this._unsubscribeClientSubscription(clientSubscriptionId, "slot change");
      }
      /**
       * @internal
       */
      _wsOnSlotUpdatesNotification(notification) {
        const {
          result,
          subscription
        } = create(notification, SlotUpdateNotificationResult);
        this._handleServerNotification(subscription, [result]);
      }
      /**
       * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s
       * may be useful to track live progress of a cluster.
       *
       * @param callback Function to invoke whenever the slot updates
       * @return subscription id
       */
      onSlotUpdate(callback) {
        return this._makeSubscription(
          {
            callback,
            method: "slotsUpdatesSubscribe",
            unsubscribeMethod: "slotsUpdatesUnsubscribe"
          },
          []
          /* args */
        );
      }
      /**
       * Deregister a slot update notification callback
       *
       * @param clientSubscriptionId client subscription id to deregister
       */
      async removeSlotUpdateListener(clientSubscriptionId) {
        await this._unsubscribeClientSubscription(clientSubscriptionId, "slot update");
      }
      /**
       * @internal
       */
      async _unsubscribeClientSubscription(clientSubscriptionId, subscriptionName) {
        const dispose = this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];
        if (dispose) {
          await dispose();
        } else {
          console.warn(`Ignored unsubscribe request because an active subscription with id \`${clientSubscriptionId}\` for '${subscriptionName}' events could not be found.`);
        }
      }
      _buildArgs(args, override, encoding, extra) {
        const commitment = override || this._commitment;
        if (commitment || encoding || extra) {
          let options = {};
          if (encoding) {
            options.encoding = encoding;
          }
          if (commitment) {
            options.commitment = commitment;
          }
          if (extra) {
            options = Object.assign(options, extra);
          }
          args.push(options);
        }
        return args;
      }
      /**
       * @internal
       */
      _buildArgsAtLeastConfirmed(args, override, encoding, extra) {
        const commitment = override || this._commitment;
        if (commitment && !["confirmed", "finalized"].includes(commitment)) {
          throw new Error("Using Connection with default commitment: `" + this._commitment + "`, but method requires at least `confirmed`");
        }
        return this._buildArgs(args, override, encoding, extra);
      }
      /**
       * @internal
       */
      _wsOnSignatureNotification(notification) {
        const {
          result,
          subscription
        } = create(notification, SignatureNotificationResult);
        if (result.value !== "receivedSignature") {
          this._subscriptionsAutoDisposedByRpc.add(subscription);
        }
        this._handleServerNotification(subscription, result.value === "receivedSignature" ? [{
          type: "received"
        }, result.context] : [{
          type: "status",
          result: result.value
        }, result.context]);
      }
      /**
       * Register a callback to be invoked upon signature updates
       *
       * @param signature Transaction signature string in base 58
       * @param callback Function to invoke on signature notifications
       * @param commitment Specify the commitment level signature must reach before notification
       * @return subscription id
       */
      onSignature(signature2, callback, commitment) {
        const args = this._buildArgs(
          [signature2],
          commitment || this._commitment || "finalized"
          // Apply connection/server default.
        );
        const clientSubscriptionId = this._makeSubscription({
          callback: (notification, context) => {
            if (notification.type === "status") {
              callback(notification.result, context);
              try {
                this.removeSignatureListener(clientSubscriptionId);
              } catch (_err) {
              }
            }
          },
          method: "signatureSubscribe",
          unsubscribeMethod: "signatureUnsubscribe"
        }, args);
        return clientSubscriptionId;
      }
      /**
       * Register a callback to be invoked when a transaction is
       * received and/or processed.
       *
       * @param signature Transaction signature string in base 58
       * @param callback Function to invoke on signature notifications
       * @param options Enable received notifications and set the commitment
       *   level that signature must reach before notification
       * @return subscription id
       */
      onSignatureWithOptions(signature2, callback, options) {
        const {
          commitment,
          ...extra
        } = {
          ...options,
          commitment: options && options.commitment || this._commitment || "finalized"
          // Apply connection/server default.
        };
        const args = this._buildArgs([signature2], commitment, void 0, extra);
        const clientSubscriptionId = this._makeSubscription({
          callback: (notification, context) => {
            callback(notification, context);
            try {
              this.removeSignatureListener(clientSubscriptionId);
            } catch (_err) {
            }
          },
          method: "signatureSubscribe",
          unsubscribeMethod: "signatureUnsubscribe"
        }, args);
        return clientSubscriptionId;
      }
      /**
       * Deregister a signature notification callback
       *
       * @param clientSubscriptionId client subscription id to deregister
       */
      async removeSignatureListener(clientSubscriptionId) {
        await this._unsubscribeClientSubscription(clientSubscriptionId, "signature result");
      }
      /**
       * @internal
       */
      _wsOnRootNotification(notification) {
        const {
          result,
          subscription
        } = create(notification, RootNotificationResult);
        this._handleServerNotification(subscription, [result]);
      }
      /**
       * Register a callback to be invoked upon root changes
       *
       * @param callback Function to invoke whenever the root changes
       * @return subscription id
       */
      onRootChange(callback) {
        return this._makeSubscription(
          {
            callback,
            method: "rootSubscribe",
            unsubscribeMethod: "rootUnsubscribe"
          },
          []
          /* args */
        );
      }
      /**
       * Deregister a root notification callback
       *
       * @param clientSubscriptionId client subscription id to deregister
       */
      async removeRootChangeListener(clientSubscriptionId) {
        await this._unsubscribeClientSubscription(clientSubscriptionId, "root change");
      }
    };
    Keypair = class _Keypair {
      /**
       * Create a new keypair instance.
       * Generate random keypair if no {@link Ed25519Keypair} is provided.
       *
       * @param {Ed25519Keypair} keypair ed25519 keypair
       */
      constructor(keypair) {
        this._keypair = void 0;
        this._keypair = keypair ?? generateKeypair();
      }
      /**
       * Generate a new random keypair
       *
       * @returns {Keypair} Keypair
       */
      static generate() {
        return new _Keypair(generateKeypair());
      }
      /**
       * Create a keypair from a raw secret key byte array.
       *
       * This method should only be used to recreate a keypair from a previously
       * generated secret key. Generating keypairs from a random seed should be done
       * with the {@link Keypair.fromSeed} method.
       *
       * @throws error if the provided secret key is invalid and validation is not skipped.
       *
       * @param secretKey secret key byte array
       * @param options skip secret key validation
       *
       * @returns {Keypair} Keypair
       */
      static fromSecretKey(secretKey, options) {
        if (secretKey.byteLength !== 64) {
          throw new Error("bad secret key size");
        }
        const publicKey2 = secretKey.slice(32, 64);
        if (!options || !options.skipValidation) {
          const privateScalar = secretKey.slice(0, 32);
          const computedPublicKey = getPublicKey(privateScalar);
          for (let ii = 0; ii < 32; ii++) {
            if (publicKey2[ii] !== computedPublicKey[ii]) {
              throw new Error("provided secretKey is invalid");
            }
          }
        }
        return new _Keypair({
          publicKey: publicKey2,
          secretKey
        });
      }
      /**
       * Generate a keypair from a 32 byte seed.
       *
       * @param seed seed byte array
       *
       * @returns {Keypair} Keypair
       */
      static fromSeed(seed) {
        const publicKey2 = getPublicKey(seed);
        const secretKey = new Uint8Array(64);
        secretKey.set(seed);
        secretKey.set(publicKey2, 32);
        return new _Keypair({
          publicKey: publicKey2,
          secretKey
        });
      }
      /**
       * The public key for this keypair
       *
       * @returns {PublicKey} PublicKey
       */
      get publicKey() {
        return new PublicKey(this._keypair.publicKey);
      }
      /**
       * The raw secret key for this keypair
       * @returns {Uint8Array} Secret key in an array of Uint8 bytes
       */
      get secretKey() {
        return new Uint8Array(this._keypair.secretKey);
      }
    };
    LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({
      CreateLookupTable: {
        index: 0,
        layout: BufferLayout.struct([BufferLayout.u32("instruction"), u64("recentSlot"), BufferLayout.u8("bumpSeed")])
      },
      FreezeLookupTable: {
        index: 1,
        layout: BufferLayout.struct([BufferLayout.u32("instruction")])
      },
      ExtendLookupTable: {
        index: 2,
        layout: BufferLayout.struct([BufferLayout.u32("instruction"), u64(), BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u32(), -8), "addresses")])
      },
      DeactivateLookupTable: {
        index: 3,
        layout: BufferLayout.struct([BufferLayout.u32("instruction")])
      },
      CloseLookupTable: {
        index: 4,
        layout: BufferLayout.struct([BufferLayout.u32("instruction")])
      }
    });
    AddressLookupTableInstruction = class {
      /**
       * @internal
       */
      constructor() {
      }
      static decodeInstructionType(instruction) {
        this.checkProgramId(instruction.programId);
        const instructionTypeLayout = BufferLayout.u32("instruction");
        const index = instructionTypeLayout.decode(instruction.data);
        let type2;
        for (const [layoutType, layout] of Object.entries(LOOKUP_TABLE_INSTRUCTION_LAYOUTS)) {
          if (layout.index == index) {
            type2 = layoutType;
            break;
          }
        }
        if (!type2) {
          throw new Error("Invalid Instruction. Should be a LookupTable Instruction");
        }
        return type2;
      }
      static decodeCreateLookupTable(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeysLength(instruction.keys, 4);
        const {
          recentSlot
        } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable, instruction.data);
        return {
          authority: instruction.keys[1].pubkey,
          payer: instruction.keys[2].pubkey,
          recentSlot: Number(recentSlot)
        };
      }
      static decodeExtendLookupTable(instruction) {
        this.checkProgramId(instruction.programId);
        if (instruction.keys.length < 2) {
          throw new Error(`invalid instruction; found ${instruction.keys.length} keys, expected at least 2`);
        }
        const {
          addresses: addresses2
        } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable, instruction.data);
        return {
          lookupTable: instruction.keys[0].pubkey,
          authority: instruction.keys[1].pubkey,
          payer: instruction.keys.length > 2 ? instruction.keys[2].pubkey : void 0,
          addresses: addresses2.map((buffer) => new PublicKey(buffer))
        };
      }
      static decodeCloseLookupTable(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeysLength(instruction.keys, 3);
        return {
          lookupTable: instruction.keys[0].pubkey,
          authority: instruction.keys[1].pubkey,
          recipient: instruction.keys[2].pubkey
        };
      }
      static decodeFreezeLookupTable(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeysLength(instruction.keys, 2);
        return {
          lookupTable: instruction.keys[0].pubkey,
          authority: instruction.keys[1].pubkey
        };
      }
      static decodeDeactivateLookupTable(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeysLength(instruction.keys, 2);
        return {
          lookupTable: instruction.keys[0].pubkey,
          authority: instruction.keys[1].pubkey
        };
      }
      /**
       * @internal
       */
      static checkProgramId(programId) {
        if (!programId.equals(AddressLookupTableProgram.programId)) {
          throw new Error("invalid instruction; programId is not AddressLookupTable Program");
        }
      }
      /**
       * @internal
       */
      static checkKeysLength(keys, expectedLength) {
        if (keys.length < expectedLength) {
          throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);
        }
      }
    };
    AddressLookupTableProgram = class {
      /**
       * @internal
       */
      constructor() {
      }
      static createLookupTable(params) {
        const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync([params.authority.toBuffer(), getU64Encoder().encode(params.recentSlot)], this.programId);
        const type2 = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;
        const data = encodeData(type2, {
          recentSlot: BigInt(params.recentSlot),
          bumpSeed
        });
        const keys = [{
          pubkey: lookupTableAddress,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: params.authority,
          isSigner: true,
          isWritable: false
        }, {
          pubkey: params.payer,
          isSigner: true,
          isWritable: true
        }, {
          pubkey: SystemProgram.programId,
          isSigner: false,
          isWritable: false
        }];
        return [new TransactionInstruction({
          programId: this.programId,
          keys,
          data
        }), lookupTableAddress];
      }
      static freezeLookupTable(params) {
        const type2 = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;
        const data = encodeData(type2);
        const keys = [{
          pubkey: params.lookupTable,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: params.authority,
          isSigner: true,
          isWritable: false
        }];
        return new TransactionInstruction({
          programId: this.programId,
          keys,
          data
        });
      }
      static extendLookupTable(params) {
        const type2 = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;
        const data = encodeData(type2, {
          addresses: params.addresses.map((addr) => addr.toBytes())
        });
        const keys = [{
          pubkey: params.lookupTable,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: params.authority,
          isSigner: true,
          isWritable: false
        }];
        if (params.payer) {
          keys.push({
            pubkey: params.payer,
            isSigner: true,
            isWritable: true
          }, {
            pubkey: SystemProgram.programId,
            isSigner: false,
            isWritable: false
          });
        }
        return new TransactionInstruction({
          programId: this.programId,
          keys,
          data
        });
      }
      static deactivateLookupTable(params) {
        const type2 = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;
        const data = encodeData(type2);
        const keys = [{
          pubkey: params.lookupTable,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: params.authority,
          isSigner: true,
          isWritable: false
        }];
        return new TransactionInstruction({
          programId: this.programId,
          keys,
          data
        });
      }
      static closeLookupTable(params) {
        const type2 = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;
        const data = encodeData(type2);
        const keys = [{
          pubkey: params.lookupTable,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: params.authority,
          isSigner: true,
          isWritable: false
        }, {
          pubkey: params.recipient,
          isSigner: false,
          isWritable: true
        }];
        return new TransactionInstruction({
          programId: this.programId,
          keys,
          data
        });
      }
    };
    AddressLookupTableProgram.programId = new PublicKey("AddressLookupTab1e1111111111111111111111111");
    ComputeBudgetInstruction = class {
      /**
       * @internal
       */
      constructor() {
      }
      /**
       * Decode a compute budget instruction and retrieve the instruction type.
       */
      static decodeInstructionType(instruction) {
        this.checkProgramId(instruction.programId);
        const instructionTypeLayout = BufferLayout.u8("instruction");
        const typeIndex = instructionTypeLayout.decode(instruction.data);
        let type2;
        for (const [ixType, layout] of Object.entries(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS)) {
          if (layout.index == typeIndex) {
            type2 = ixType;
            break;
          }
        }
        if (!type2) {
          throw new Error("Instruction type incorrect; not a ComputeBudgetInstruction");
        }
        return type2;
      }
      /**
       * Decode request units compute budget instruction and retrieve the instruction params.
       */
      static decodeRequestUnits(instruction) {
        this.checkProgramId(instruction.programId);
        const {
          units,
          additionalFee
        } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits, instruction.data);
        return {
          units,
          additionalFee
        };
      }
      /**
       * Decode request heap frame compute budget instruction and retrieve the instruction params.
       */
      static decodeRequestHeapFrame(instruction) {
        this.checkProgramId(instruction.programId);
        const {
          bytes
        } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame, instruction.data);
        return {
          bytes
        };
      }
      /**
       * Decode set compute unit limit compute budget instruction and retrieve the instruction params.
       */
      static decodeSetComputeUnitLimit(instruction) {
        this.checkProgramId(instruction.programId);
        const {
          units
        } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit, instruction.data);
        return {
          units
        };
      }
      /**
       * Decode set compute unit price compute budget instruction and retrieve the instruction params.
       */
      static decodeSetComputeUnitPrice(instruction) {
        this.checkProgramId(instruction.programId);
        const {
          microLamports
        } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice, instruction.data);
        return {
          microLamports
        };
      }
      /**
       * @internal
       */
      static checkProgramId(programId) {
        if (!programId.equals(ComputeBudgetProgram.programId)) {
          throw new Error("invalid instruction; programId is not ComputeBudgetProgram");
        }
      }
    };
    COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze({
      RequestUnits: {
        index: 0,
        layout: BufferLayout.struct([BufferLayout.u8("instruction"), BufferLayout.u32("units"), BufferLayout.u32("additionalFee")])
      },
      RequestHeapFrame: {
        index: 1,
        layout: BufferLayout.struct([BufferLayout.u8("instruction"), BufferLayout.u32("bytes")])
      },
      SetComputeUnitLimit: {
        index: 2,
        layout: BufferLayout.struct([BufferLayout.u8("instruction"), BufferLayout.u32("units")])
      },
      SetComputeUnitPrice: {
        index: 3,
        layout: BufferLayout.struct([BufferLayout.u8("instruction"), u64("microLamports")])
      }
    });
    ComputeBudgetProgram = class {
      /**
       * @internal
       */
      constructor() {
      }
      /**
       * Public key that identifies the Compute Budget program
       */
      /**
       * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}
       */
      static requestUnits(params) {
        const type2 = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;
        const data = encodeData(type2, params);
        return new TransactionInstruction({
          keys: [],
          programId: this.programId,
          data
        });
      }
      static requestHeapFrame(params) {
        const type2 = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;
        const data = encodeData(type2, params);
        return new TransactionInstruction({
          keys: [],
          programId: this.programId,
          data
        });
      }
      static setComputeUnitLimit(params) {
        const type2 = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;
        const data = encodeData(type2, params);
        return new TransactionInstruction({
          keys: [],
          programId: this.programId,
          data
        });
      }
      static setComputeUnitPrice(params) {
        const type2 = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;
        const data = encodeData(type2, {
          microLamports: BigInt(params.microLamports)
        });
        return new TransactionInstruction({
          keys: [],
          programId: this.programId,
          data
        });
      }
    };
    ComputeBudgetProgram.programId = new PublicKey("ComputeBudget111111111111111111111111111111");
    PRIVATE_KEY_BYTES$1 = 64;
    PUBLIC_KEY_BYTES$1 = 32;
    SIGNATURE_BYTES = 64;
    ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8("numSignatures"), BufferLayout.u8("padding"), BufferLayout.u16("signatureOffset"), BufferLayout.u16("signatureInstructionIndex"), BufferLayout.u16("publicKeyOffset"), BufferLayout.u16("publicKeyInstructionIndex"), BufferLayout.u16("messageDataOffset"), BufferLayout.u16("messageDataSize"), BufferLayout.u16("messageInstructionIndex")]);
    Ed25519Program = class _Ed25519Program {
      /**
       * @internal
       */
      constructor() {
      }
      /**
       * Public key that identifies the ed25519 program
       */
      /**
       * Create an ed25519 instruction with a public key and signature. The
       * public key must be a buffer that is 32 bytes long, and the signature
       * must be a buffer of 64 bytes.
       */
      static createInstructionWithPublicKey(params) {
        const {
          publicKey: publicKey2,
          message,
          signature: signature2,
          instructionIndex
        } = params;
        assert2(publicKey2.length === PUBLIC_KEY_BYTES$1, `Public Key must be ${PUBLIC_KEY_BYTES$1} bytes but received ${publicKey2.length} bytes`);
        assert2(signature2.length === SIGNATURE_BYTES, `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature2.length} bytes`);
        const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;
        const signatureOffset = publicKeyOffset + publicKey2.length;
        const messageDataOffset = signatureOffset + signature2.length;
        const numSignatures = 1;
        const instructionData = import_buffer2.Buffer.alloc(messageDataOffset + message.length);
        const index = instructionIndex == null ? 65535 : instructionIndex;
        ED25519_INSTRUCTION_LAYOUT.encode({
          numSignatures,
          padding: 0,
          signatureOffset,
          signatureInstructionIndex: index,
          publicKeyOffset,
          publicKeyInstructionIndex: index,
          messageDataOffset,
          messageDataSize: message.length,
          messageInstructionIndex: index
        }, instructionData);
        instructionData.fill(publicKey2, publicKeyOffset);
        instructionData.fill(signature2, signatureOffset);
        instructionData.fill(message, messageDataOffset);
        return new TransactionInstruction({
          keys: [],
          programId: _Ed25519Program.programId,
          data: instructionData
        });
      }
      /**
       * Create an ed25519 instruction with a private key. The private key
       * must be a buffer that is 64 bytes long.
       */
      static createInstructionWithPrivateKey(params) {
        const {
          privateKey,
          message,
          instructionIndex
        } = params;
        assert2(privateKey.length === PRIVATE_KEY_BYTES$1, `Private key must be ${PRIVATE_KEY_BYTES$1} bytes but received ${privateKey.length} bytes`);
        try {
          const keypair = Keypair.fromSecretKey(privateKey);
          const publicKey2 = keypair.publicKey.toBytes();
          const signature2 = sign(message, keypair.secretKey);
          return this.createInstructionWithPublicKey({
            publicKey: publicKey2,
            message,
            signature: signature2,
            instructionIndex
          });
        } catch (error) {
          throw new Error(`Error creating instruction; ${error}`);
        }
      }
    };
    Ed25519Program.programId = new PublicKey("Ed25519SigVerify111111111111111111111111111");
    ecdsaSign = (msgHash, privKey) => {
      const signature2 = secp256k1.sign(msgHash, privKey);
      return [signature2.toCompactRawBytes(), signature2.recovery];
    };
    secp256k1.utils.isValidPrivateKey;
    publicKeyCreate = secp256k1.getPublicKey;
    PRIVATE_KEY_BYTES = 32;
    ETHEREUM_ADDRESS_BYTES = 20;
    PUBLIC_KEY_BYTES = 64;
    SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;
    SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8("numSignatures"), BufferLayout.u16("signatureOffset"), BufferLayout.u8("signatureInstructionIndex"), BufferLayout.u16("ethAddressOffset"), BufferLayout.u8("ethAddressInstructionIndex"), BufferLayout.u16("messageDataOffset"), BufferLayout.u16("messageDataSize"), BufferLayout.u8("messageInstructionIndex"), BufferLayout.blob(20, "ethAddress"), BufferLayout.blob(64, "signature"), BufferLayout.u8("recoveryId")]);
    Secp256k1Program = class _Secp256k1Program {
      /**
       * @internal
       */
      constructor() {
      }
      /**
       * Public key that identifies the secp256k1 program
       */
      /**
       * Construct an Ethereum address from a secp256k1 public key buffer.
       * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer
       */
      static publicKeyToEthAddress(publicKey2) {
        assert2(publicKey2.length === PUBLIC_KEY_BYTES, `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey2.length} bytes`);
        try {
          return import_buffer2.Buffer.from(keccak_256(toBuffer(publicKey2))).slice(-ETHEREUM_ADDRESS_BYTES);
        } catch (error) {
          throw new Error(`Error constructing Ethereum address: ${error}`);
        }
      }
      /**
       * Create an secp256k1 instruction with a public key. The public key
       * must be a buffer that is 64 bytes long.
       */
      static createInstructionWithPublicKey(params) {
        const {
          publicKey: publicKey2,
          message,
          signature: signature2,
          recoveryId,
          instructionIndex
        } = params;
        return _Secp256k1Program.createInstructionWithEthAddress({
          ethAddress: _Secp256k1Program.publicKeyToEthAddress(publicKey2),
          message,
          signature: signature2,
          recoveryId,
          instructionIndex
        });
      }
      /**
       * Create an secp256k1 instruction with an Ethereum address. The address
       * must be a hex string or a buffer that is 20 bytes long.
       */
      static createInstructionWithEthAddress(params) {
        const {
          ethAddress: rawAddress,
          message,
          signature: signature2,
          recoveryId,
          instructionIndex = 0
        } = params;
        let ethAddress;
        if (typeof rawAddress === "string") {
          if (rawAddress.startsWith("0x")) {
            ethAddress = import_buffer2.Buffer.from(rawAddress.substr(2), "hex");
          } else {
            ethAddress = import_buffer2.Buffer.from(rawAddress, "hex");
          }
        } else {
          ethAddress = rawAddress;
        }
        assert2(ethAddress.length === ETHEREUM_ADDRESS_BYTES, `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`);
        const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;
        const ethAddressOffset = dataStart;
        const signatureOffset = dataStart + ethAddress.length;
        const messageDataOffset = signatureOffset + signature2.length + 1;
        const numSignatures = 1;
        const instructionData = import_buffer2.Buffer.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);
        SECP256K1_INSTRUCTION_LAYOUT.encode({
          numSignatures,
          signatureOffset,
          signatureInstructionIndex: instructionIndex,
          ethAddressOffset,
          ethAddressInstructionIndex: instructionIndex,
          messageDataOffset,
          messageDataSize: message.length,
          messageInstructionIndex: instructionIndex,
          signature: toBuffer(signature2),
          ethAddress: toBuffer(ethAddress),
          recoveryId
        }, instructionData);
        instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);
        return new TransactionInstruction({
          keys: [],
          programId: _Secp256k1Program.programId,
          data: instructionData
        });
      }
      /**
       * Create an secp256k1 instruction with a private key. The private key
       * must be a buffer that is 32 bytes long.
       */
      static createInstructionWithPrivateKey(params) {
        const {
          privateKey: pkey,
          message,
          instructionIndex
        } = params;
        assert2(pkey.length === PRIVATE_KEY_BYTES, `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`);
        try {
          const privateKey = toBuffer(pkey);
          const publicKey2 = publicKeyCreate(
            privateKey,
            false
            /* isCompressed */
          ).slice(1);
          const messageHash = import_buffer2.Buffer.from(keccak_256(toBuffer(message)));
          const [signature2, recoveryId] = ecdsaSign(messageHash, privateKey);
          return this.createInstructionWithPublicKey({
            publicKey: publicKey2,
            message,
            signature: signature2,
            recoveryId,
            instructionIndex
          });
        } catch (error) {
          throw new Error(`Error creating instruction; ${error}`);
        }
      }
    };
    Secp256k1Program.programId = new PublicKey("KeccakSecp256k11111111111111111111111111111");
    STAKE_CONFIG_ID = new PublicKey("StakeConfig11111111111111111111111111111111");
    Authorized = class {
      /**
       * Create a new Authorized object
       * @param staker the stake authority
       * @param withdrawer the withdraw authority
       */
      constructor(staker, withdrawer) {
        this.staker = void 0;
        this.withdrawer = void 0;
        this.staker = staker;
        this.withdrawer = withdrawer;
      }
    };
    Lockup = class {
      /**
       * Create a new Lockup object
       */
      constructor(unixTimestamp, epoch, custodian) {
        this.unixTimestamp = void 0;
        this.epoch = void 0;
        this.custodian = void 0;
        this.unixTimestamp = unixTimestamp;
        this.epoch = epoch;
        this.custodian = custodian;
      }
      /**
       * Default, inactive Lockup value
       */
    };
    _Lockup = Lockup;
    Lockup.default = new _Lockup(0, 0, PublicKey.default);
    StakeInstruction = class {
      /**
       * @internal
       */
      constructor() {
      }
      /**
       * Decode a stake instruction and retrieve the instruction type.
       */
      static decodeInstructionType(instruction) {
        this.checkProgramId(instruction.programId);
        const instructionTypeLayout = BufferLayout.u32("instruction");
        const typeIndex = instructionTypeLayout.decode(instruction.data);
        let type2;
        for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {
          if (layout.index == typeIndex) {
            type2 = ixType;
            break;
          }
        }
        if (!type2) {
          throw new Error("Instruction type incorrect; not a StakeInstruction");
        }
        return type2;
      }
      /**
       * Decode a initialize stake instruction and retrieve the instruction params.
       */
      static decodeInitialize(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 2);
        const {
          authorized: authorized2,
          lockup: lockup2
        } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Initialize, instruction.data);
        return {
          stakePubkey: instruction.keys[0].pubkey,
          authorized: new Authorized(new PublicKey(authorized2.staker), new PublicKey(authorized2.withdrawer)),
          lockup: new Lockup(lockup2.unixTimestamp, lockup2.epoch, new PublicKey(lockup2.custodian))
        };
      }
      /**
       * Decode a delegate stake instruction and retrieve the instruction params.
       */
      static decodeDelegate(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 6);
        decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);
        return {
          stakePubkey: instruction.keys[0].pubkey,
          votePubkey: instruction.keys[1].pubkey,
          authorizedPubkey: instruction.keys[5].pubkey
        };
      }
      /**
       * Decode an authorize stake instruction and retrieve the instruction params.
       */
      static decodeAuthorize(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 3);
        const {
          newAuthorized,
          stakeAuthorizationType
        } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);
        const o = {
          stakePubkey: instruction.keys[0].pubkey,
          authorizedPubkey: instruction.keys[2].pubkey,
          newAuthorizedPubkey: new PublicKey(newAuthorized),
          stakeAuthorizationType: {
            index: stakeAuthorizationType
          }
        };
        if (instruction.keys.length > 3) {
          o.custodianPubkey = instruction.keys[3].pubkey;
        }
        return o;
      }
      /**
       * Decode an authorize-with-seed stake instruction and retrieve the instruction params.
       */
      static decodeAuthorizeWithSeed(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 2);
        const {
          newAuthorized,
          stakeAuthorizationType,
          authoritySeed,
          authorityOwner
        } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);
        const o = {
          stakePubkey: instruction.keys[0].pubkey,
          authorityBase: instruction.keys[1].pubkey,
          authoritySeed,
          authorityOwner: new PublicKey(authorityOwner),
          newAuthorizedPubkey: new PublicKey(newAuthorized),
          stakeAuthorizationType: {
            index: stakeAuthorizationType
          }
        };
        if (instruction.keys.length > 3) {
          o.custodianPubkey = instruction.keys[3].pubkey;
        }
        return o;
      }
      /**
       * Decode a split stake instruction and retrieve the instruction params.
       */
      static decodeSplit(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 3);
        const {
          lamports
        } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Split, instruction.data);
        return {
          stakePubkey: instruction.keys[0].pubkey,
          splitStakePubkey: instruction.keys[1].pubkey,
          authorizedPubkey: instruction.keys[2].pubkey,
          lamports
        };
      }
      /**
       * Decode a merge stake instruction and retrieve the instruction params.
       */
      static decodeMerge(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 3);
        decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);
        return {
          stakePubkey: instruction.keys[0].pubkey,
          sourceStakePubKey: instruction.keys[1].pubkey,
          authorizedPubkey: instruction.keys[4].pubkey
        };
      }
      /**
       * Decode a withdraw stake instruction and retrieve the instruction params.
       */
      static decodeWithdraw(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 5);
        const {
          lamports
        } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);
        const o = {
          stakePubkey: instruction.keys[0].pubkey,
          toPubkey: instruction.keys[1].pubkey,
          authorizedPubkey: instruction.keys[4].pubkey,
          lamports
        };
        if (instruction.keys.length > 5) {
          o.custodianPubkey = instruction.keys[5].pubkey;
        }
        return o;
      }
      /**
       * Decode a deactivate stake instruction and retrieve the instruction params.
       */
      static decodeDeactivate(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 3);
        decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);
        return {
          stakePubkey: instruction.keys[0].pubkey,
          authorizedPubkey: instruction.keys[2].pubkey
        };
      }
      /**
       * @internal
       */
      static checkProgramId(programId) {
        if (!programId.equals(StakeProgram.programId)) {
          throw new Error("invalid instruction; programId is not StakeProgram");
        }
      }
      /**
       * @internal
       */
      static checkKeyLength(keys, expectedLength) {
        if (keys.length < expectedLength) {
          throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);
        }
      }
    };
    STAKE_INSTRUCTION_LAYOUTS = Object.freeze({
      Initialize: {
        index: 0,
        layout: BufferLayout.struct([BufferLayout.u32("instruction"), authorized(), lockup()])
      },
      Authorize: {
        index: 1,
        layout: BufferLayout.struct([BufferLayout.u32("instruction"), publicKey("newAuthorized"), BufferLayout.u32("stakeAuthorizationType")])
      },
      Delegate: {
        index: 2,
        layout: BufferLayout.struct([BufferLayout.u32("instruction")])
      },
      Split: {
        index: 3,
        layout: BufferLayout.struct([BufferLayout.u32("instruction"), BufferLayout.ns64("lamports")])
      },
      Withdraw: {
        index: 4,
        layout: BufferLayout.struct([BufferLayout.u32("instruction"), BufferLayout.ns64("lamports")])
      },
      Deactivate: {
        index: 5,
        layout: BufferLayout.struct([BufferLayout.u32("instruction")])
      },
      Merge: {
        index: 7,
        layout: BufferLayout.struct([BufferLayout.u32("instruction")])
      },
      AuthorizeWithSeed: {
        index: 8,
        layout: BufferLayout.struct([BufferLayout.u32("instruction"), publicKey("newAuthorized"), BufferLayout.u32("stakeAuthorizationType"), rustString("authoritySeed"), publicKey("authorityOwner")])
      }
    });
    StakeAuthorizationLayout = Object.freeze({
      Staker: {
        index: 0
      },
      Withdrawer: {
        index: 1
      }
    });
    StakeProgram = class {
      /**
       * @internal
       */
      constructor() {
      }
      /**
       * Public key that identifies the Stake program
       */
      /**
       * Generate an Initialize instruction to add to a Stake Create transaction
       */
      static initialize(params) {
        const {
          stakePubkey,
          authorized: authorized2,
          lockup: maybeLockup
        } = params;
        const lockup2 = maybeLockup || Lockup.default;
        const type2 = STAKE_INSTRUCTION_LAYOUTS.Initialize;
        const data = encodeData(type2, {
          authorized: {
            staker: toBuffer(authorized2.staker.toBuffer()),
            withdrawer: toBuffer(authorized2.withdrawer.toBuffer())
          },
          lockup: {
            unixTimestamp: lockup2.unixTimestamp,
            epoch: lockup2.epoch,
            custodian: toBuffer(lockup2.custodian.toBuffer())
          }
        });
        const instructionData = {
          keys: [{
            pubkey: stakePubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: SYSVAR_RENT_PUBKEY,
            isSigner: false,
            isWritable: false
          }],
          programId: this.programId,
          data
        };
        return new TransactionInstruction(instructionData);
      }
      /**
       * Generate a Transaction that creates a new Stake account at
       *   an address generated with `from`, a seed, and the Stake programId
       */
      static createAccountWithSeed(params) {
        const transaction = new Transaction();
        transaction.add(SystemProgram.createAccountWithSeed({
          fromPubkey: params.fromPubkey,
          newAccountPubkey: params.stakePubkey,
          basePubkey: params.basePubkey,
          seed: params.seed,
          lamports: params.lamports,
          space: this.space,
          programId: this.programId
        }));
        const {
          stakePubkey,
          authorized: authorized2,
          lockup: lockup2
        } = params;
        return transaction.add(this.initialize({
          stakePubkey,
          authorized: authorized2,
          lockup: lockup2
        }));
      }
      /**
       * Generate a Transaction that creates a new Stake account
       */
      static createAccount(params) {
        const transaction = new Transaction();
        transaction.add(SystemProgram.createAccount({
          fromPubkey: params.fromPubkey,
          newAccountPubkey: params.stakePubkey,
          lamports: params.lamports,
          space: this.space,
          programId: this.programId
        }));
        const {
          stakePubkey,
          authorized: authorized2,
          lockup: lockup2
        } = params;
        return transaction.add(this.initialize({
          stakePubkey,
          authorized: authorized2,
          lockup: lockup2
        }));
      }
      /**
       * Generate a Transaction that delegates Stake tokens to a validator
       * Vote PublicKey. This transaction can also be used to redelegate Stake
       * to a new validator Vote PublicKey.
       */
      static delegate(params) {
        const {
          stakePubkey,
          authorizedPubkey,
          votePubkey
        } = params;
        const type2 = STAKE_INSTRUCTION_LAYOUTS.Delegate;
        const data = encodeData(type2);
        return new Transaction().add({
          keys: [{
            pubkey: stakePubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: votePubkey,
            isSigner: false,
            isWritable: false
          }, {
            pubkey: SYSVAR_CLOCK_PUBKEY,
            isSigner: false,
            isWritable: false
          }, {
            pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,
            isSigner: false,
            isWritable: false
          }, {
            pubkey: STAKE_CONFIG_ID,
            isSigner: false,
            isWritable: false
          }, {
            pubkey: authorizedPubkey,
            isSigner: true,
            isWritable: false
          }],
          programId: this.programId,
          data
        });
      }
      /**
       * Generate a Transaction that authorizes a new PublicKey as Staker
       * or Withdrawer on the Stake account.
       */
      static authorize(params) {
        const {
          stakePubkey,
          authorizedPubkey,
          newAuthorizedPubkey,
          stakeAuthorizationType,
          custodianPubkey
        } = params;
        const type2 = STAKE_INSTRUCTION_LAYOUTS.Authorize;
        const data = encodeData(type2, {
          newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),
          stakeAuthorizationType: stakeAuthorizationType.index
        });
        const keys = [{
          pubkey: stakePubkey,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: SYSVAR_CLOCK_PUBKEY,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: authorizedPubkey,
          isSigner: true,
          isWritable: false
        }];
        if (custodianPubkey) {
          keys.push({
            pubkey: custodianPubkey,
            isSigner: true,
            isWritable: false
          });
        }
        return new Transaction().add({
          keys,
          programId: this.programId,
          data
        });
      }
      /**
       * Generate a Transaction that authorizes a new PublicKey as Staker
       * or Withdrawer on the Stake account.
       */
      static authorizeWithSeed(params) {
        const {
          stakePubkey,
          authorityBase,
          authoritySeed,
          authorityOwner,
          newAuthorizedPubkey,
          stakeAuthorizationType,
          custodianPubkey
        } = params;
        const type2 = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;
        const data = encodeData(type2, {
          newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),
          stakeAuthorizationType: stakeAuthorizationType.index,
          authoritySeed,
          authorityOwner: toBuffer(authorityOwner.toBuffer())
        });
        const keys = [{
          pubkey: stakePubkey,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: authorityBase,
          isSigner: true,
          isWritable: false
        }, {
          pubkey: SYSVAR_CLOCK_PUBKEY,
          isSigner: false,
          isWritable: false
        }];
        if (custodianPubkey) {
          keys.push({
            pubkey: custodianPubkey,
            isSigner: true,
            isWritable: false
          });
        }
        return new Transaction().add({
          keys,
          programId: this.programId,
          data
        });
      }
      /**
       * @internal
       */
      static splitInstruction(params) {
        const {
          stakePubkey,
          authorizedPubkey,
          splitStakePubkey,
          lamports
        } = params;
        const type2 = STAKE_INSTRUCTION_LAYOUTS.Split;
        const data = encodeData(type2, {
          lamports
        });
        return new TransactionInstruction({
          keys: [{
            pubkey: stakePubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: splitStakePubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: authorizedPubkey,
            isSigner: true,
            isWritable: false
          }],
          programId: this.programId,
          data
        });
      }
      /**
       * Generate a Transaction that splits Stake tokens into another stake account
       */
      static split(params, rentExemptReserve) {
        const transaction = new Transaction();
        transaction.add(SystemProgram.createAccount({
          fromPubkey: params.authorizedPubkey,
          newAccountPubkey: params.splitStakePubkey,
          lamports: rentExemptReserve,
          space: this.space,
          programId: this.programId
        }));
        return transaction.add(this.splitInstruction(params));
      }
      /**
       * Generate a Transaction that splits Stake tokens into another account
       * derived from a base public key and seed
       */
      static splitWithSeed(params, rentExemptReserve) {
        const {
          stakePubkey,
          authorizedPubkey,
          splitStakePubkey,
          basePubkey,
          seed,
          lamports
        } = params;
        const transaction = new Transaction();
        transaction.add(SystemProgram.allocate({
          accountPubkey: splitStakePubkey,
          basePubkey,
          seed,
          space: this.space,
          programId: this.programId
        }));
        if (rentExemptReserve && rentExemptReserve > 0) {
          transaction.add(SystemProgram.transfer({
            fromPubkey: params.authorizedPubkey,
            toPubkey: splitStakePubkey,
            lamports: rentExemptReserve
          }));
        }
        return transaction.add(this.splitInstruction({
          stakePubkey,
          authorizedPubkey,
          splitStakePubkey,
          lamports
        }));
      }
      /**
       * Generate a Transaction that merges Stake accounts.
       */
      static merge(params) {
        const {
          stakePubkey,
          sourceStakePubKey,
          authorizedPubkey
        } = params;
        const type2 = STAKE_INSTRUCTION_LAYOUTS.Merge;
        const data = encodeData(type2);
        return new Transaction().add({
          keys: [{
            pubkey: stakePubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: sourceStakePubKey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: SYSVAR_CLOCK_PUBKEY,
            isSigner: false,
            isWritable: false
          }, {
            pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,
            isSigner: false,
            isWritable: false
          }, {
            pubkey: authorizedPubkey,
            isSigner: true,
            isWritable: false
          }],
          programId: this.programId,
          data
        });
      }
      /**
       * Generate a Transaction that withdraws deactivated Stake tokens.
       */
      static withdraw(params) {
        const {
          stakePubkey,
          authorizedPubkey,
          toPubkey,
          lamports,
          custodianPubkey
        } = params;
        const type2 = STAKE_INSTRUCTION_LAYOUTS.Withdraw;
        const data = encodeData(type2, {
          lamports
        });
        const keys = [{
          pubkey: stakePubkey,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: toPubkey,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: SYSVAR_CLOCK_PUBKEY,
          isSigner: false,
          isWritable: false
        }, {
          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,
          isSigner: false,
          isWritable: false
        }, {
          pubkey: authorizedPubkey,
          isSigner: true,
          isWritable: false
        }];
        if (custodianPubkey) {
          keys.push({
            pubkey: custodianPubkey,
            isSigner: true,
            isWritable: false
          });
        }
        return new Transaction().add({
          keys,
          programId: this.programId,
          data
        });
      }
      /**
       * Generate a Transaction that deactivates Stake tokens.
       */
      static deactivate(params) {
        const {
          stakePubkey,
          authorizedPubkey
        } = params;
        const type2 = STAKE_INSTRUCTION_LAYOUTS.Deactivate;
        const data = encodeData(type2);
        return new Transaction().add({
          keys: [{
            pubkey: stakePubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: SYSVAR_CLOCK_PUBKEY,
            isSigner: false,
            isWritable: false
          }, {
            pubkey: authorizedPubkey,
            isSigner: true,
            isWritable: false
          }],
          programId: this.programId,
          data
        });
      }
    };
    StakeProgram.programId = new PublicKey("Stake11111111111111111111111111111111111111");
    StakeProgram.space = 200;
    VoteInit = class {
      /** [0, 100] */
      constructor(nodePubkey, authorizedVoter, authorizedWithdrawer, commission) {
        this.nodePubkey = void 0;
        this.authorizedVoter = void 0;
        this.authorizedWithdrawer = void 0;
        this.commission = void 0;
        this.nodePubkey = nodePubkey;
        this.authorizedVoter = authorizedVoter;
        this.authorizedWithdrawer = authorizedWithdrawer;
        this.commission = commission;
      }
    };
    VoteInstruction = class {
      /**
       * @internal
       */
      constructor() {
      }
      /**
       * Decode a vote instruction and retrieve the instruction type.
       */
      static decodeInstructionType(instruction) {
        this.checkProgramId(instruction.programId);
        const instructionTypeLayout = BufferLayout.u32("instruction");
        const typeIndex = instructionTypeLayout.decode(instruction.data);
        let type2;
        for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {
          if (layout.index == typeIndex) {
            type2 = ixType;
            break;
          }
        }
        if (!type2) {
          throw new Error("Instruction type incorrect; not a VoteInstruction");
        }
        return type2;
      }
      /**
       * Decode an initialize vote instruction and retrieve the instruction params.
       */
      static decodeInitializeAccount(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 4);
        const {
          voteInit: voteInit2
        } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.InitializeAccount, instruction.data);
        return {
          votePubkey: instruction.keys[0].pubkey,
          nodePubkey: instruction.keys[3].pubkey,
          voteInit: new VoteInit(new PublicKey(voteInit2.nodePubkey), new PublicKey(voteInit2.authorizedVoter), new PublicKey(voteInit2.authorizedWithdrawer), voteInit2.commission)
        };
      }
      /**
       * Decode an authorize instruction and retrieve the instruction params.
       */
      static decodeAuthorize(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 3);
        const {
          newAuthorized,
          voteAuthorizationType
        } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);
        return {
          votePubkey: instruction.keys[0].pubkey,
          authorizedPubkey: instruction.keys[2].pubkey,
          newAuthorizedPubkey: new PublicKey(newAuthorized),
          voteAuthorizationType: {
            index: voteAuthorizationType
          }
        };
      }
      /**
       * Decode an authorize instruction and retrieve the instruction params.
       */
      static decodeAuthorizeWithSeed(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 3);
        const {
          voteAuthorizeWithSeedArgs: {
            currentAuthorityDerivedKeyOwnerPubkey,
            currentAuthorityDerivedKeySeed,
            newAuthorized,
            voteAuthorizationType
          }
        } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);
        return {
          currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,
          currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(currentAuthorityDerivedKeyOwnerPubkey),
          currentAuthorityDerivedKeySeed,
          newAuthorizedPubkey: new PublicKey(newAuthorized),
          voteAuthorizationType: {
            index: voteAuthorizationType
          },
          votePubkey: instruction.keys[0].pubkey
        };
      }
      /**
       * Decode a withdraw instruction and retrieve the instruction params.
       */
      static decodeWithdraw(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 3);
        const {
          lamports
        } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);
        return {
          votePubkey: instruction.keys[0].pubkey,
          authorizedWithdrawerPubkey: instruction.keys[2].pubkey,
          lamports,
          toPubkey: instruction.keys[1].pubkey
        };
      }
      /**
       * @internal
       */
      static checkProgramId(programId) {
        if (!programId.equals(VoteProgram.programId)) {
          throw new Error("invalid instruction; programId is not VoteProgram");
        }
      }
      /**
       * @internal
       */
      static checkKeyLength(keys, expectedLength) {
        if (keys.length < expectedLength) {
          throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);
        }
      }
    };
    VOTE_INSTRUCTION_LAYOUTS = Object.freeze({
      InitializeAccount: {
        index: 0,
        layout: BufferLayout.struct([BufferLayout.u32("instruction"), voteInit()])
      },
      Authorize: {
        index: 1,
        layout: BufferLayout.struct([BufferLayout.u32("instruction"), publicKey("newAuthorized"), BufferLayout.u32("voteAuthorizationType")])
      },
      Withdraw: {
        index: 3,
        layout: BufferLayout.struct([BufferLayout.u32("instruction"), BufferLayout.ns64("lamports")])
      },
      UpdateValidatorIdentity: {
        index: 4,
        layout: BufferLayout.struct([BufferLayout.u32("instruction")])
      },
      AuthorizeWithSeed: {
        index: 10,
        layout: BufferLayout.struct([BufferLayout.u32("instruction"), voteAuthorizeWithSeedArgs()])
      }
    });
    VoteAuthorizationLayout = Object.freeze({
      Voter: {
        index: 0
      },
      Withdrawer: {
        index: 1
      }
    });
    VoteProgram = class _VoteProgram {
      /**
       * @internal
       */
      constructor() {
      }
      /**
       * Public key that identifies the Vote program
       */
      /**
       * Generate an Initialize instruction.
       */
      static initializeAccount(params) {
        const {
          votePubkey,
          nodePubkey,
          voteInit: voteInit2
        } = params;
        const type2 = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;
        const data = encodeData(type2, {
          voteInit: {
            nodePubkey: toBuffer(voteInit2.nodePubkey.toBuffer()),
            authorizedVoter: toBuffer(voteInit2.authorizedVoter.toBuffer()),
            authorizedWithdrawer: toBuffer(voteInit2.authorizedWithdrawer.toBuffer()),
            commission: voteInit2.commission
          }
        });
        const instructionData = {
          keys: [{
            pubkey: votePubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: SYSVAR_RENT_PUBKEY,
            isSigner: false,
            isWritable: false
          }, {
            pubkey: SYSVAR_CLOCK_PUBKEY,
            isSigner: false,
            isWritable: false
          }, {
            pubkey: nodePubkey,
            isSigner: true,
            isWritable: false
          }],
          programId: this.programId,
          data
        };
        return new TransactionInstruction(instructionData);
      }
      /**
       * Generate a transaction that creates a new Vote account.
       */
      static createAccount(params) {
        const transaction = new Transaction();
        transaction.add(SystemProgram.createAccount({
          fromPubkey: params.fromPubkey,
          newAccountPubkey: params.votePubkey,
          lamports: params.lamports,
          space: this.space,
          programId: this.programId
        }));
        return transaction.add(this.initializeAccount({
          votePubkey: params.votePubkey,
          nodePubkey: params.voteInit.nodePubkey,
          voteInit: params.voteInit
        }));
      }
      /**
       * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.
       */
      static authorize(params) {
        const {
          votePubkey,
          authorizedPubkey,
          newAuthorizedPubkey,
          voteAuthorizationType
        } = params;
        const type2 = VOTE_INSTRUCTION_LAYOUTS.Authorize;
        const data = encodeData(type2, {
          newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),
          voteAuthorizationType: voteAuthorizationType.index
        });
        const keys = [{
          pubkey: votePubkey,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: SYSVAR_CLOCK_PUBKEY,
          isSigner: false,
          isWritable: false
        }, {
          pubkey: authorizedPubkey,
          isSigner: true,
          isWritable: false
        }];
        return new Transaction().add({
          keys,
          programId: this.programId,
          data
        });
      }
      /**
       * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account
       * where the current Voter or Withdrawer authority is a derived key.
       */
      static authorizeWithSeed(params) {
        const {
          currentAuthorityDerivedKeyBasePubkey,
          currentAuthorityDerivedKeyOwnerPubkey,
          currentAuthorityDerivedKeySeed,
          newAuthorizedPubkey,
          voteAuthorizationType,
          votePubkey
        } = params;
        const type2 = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;
        const data = encodeData(type2, {
          voteAuthorizeWithSeedArgs: {
            currentAuthorityDerivedKeyOwnerPubkey: toBuffer(currentAuthorityDerivedKeyOwnerPubkey.toBuffer()),
            currentAuthorityDerivedKeySeed,
            newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),
            voteAuthorizationType: voteAuthorizationType.index
          }
        });
        const keys = [{
          pubkey: votePubkey,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: SYSVAR_CLOCK_PUBKEY,
          isSigner: false,
          isWritable: false
        }, {
          pubkey: currentAuthorityDerivedKeyBasePubkey,
          isSigner: true,
          isWritable: false
        }];
        return new Transaction().add({
          keys,
          programId: this.programId,
          data
        });
      }
      /**
       * Generate a transaction to withdraw from a Vote account.
       */
      static withdraw(params) {
        const {
          votePubkey,
          authorizedWithdrawerPubkey,
          lamports,
          toPubkey
        } = params;
        const type2 = VOTE_INSTRUCTION_LAYOUTS.Withdraw;
        const data = encodeData(type2, {
          lamports
        });
        const keys = [{
          pubkey: votePubkey,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: toPubkey,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: authorizedWithdrawerPubkey,
          isSigner: true,
          isWritable: false
        }];
        return new Transaction().add({
          keys,
          programId: this.programId,
          data
        });
      }
      /**
       * Generate a transaction to withdraw safely from a Vote account.
       *
       * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`
       * checks that the withdraw amount will not exceed the specified balance while leaving enough left
       * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the
       * `withdraw` method directly.
       */
      static safeWithdraw(params, currentVoteAccountBalance, rentExemptMinimum) {
        if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {
          throw new Error("Withdraw will leave vote account with insufficient funds.");
        }
        return _VoteProgram.withdraw(params);
      }
      /**
       * Generate a transaction to update the validator identity (node pubkey) of a Vote account.
       */
      static updateValidatorIdentity(params) {
        const {
          votePubkey,
          authorizedWithdrawerPubkey,
          nodePubkey
        } = params;
        const type2 = VOTE_INSTRUCTION_LAYOUTS.UpdateValidatorIdentity;
        const data = encodeData(type2);
        const keys = [{
          pubkey: votePubkey,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: nodePubkey,
          isSigner: true,
          isWritable: false
        }, {
          pubkey: authorizedWithdrawerPubkey,
          isSigner: true,
          isWritable: false
        }];
        return new Transaction().add({
          keys,
          programId: this.programId,
          data
        });
      }
    };
    VoteProgram.programId = new PublicKey("Vote111111111111111111111111111111111111111");
    VoteProgram.space = 3762;
    VALIDATOR_INFO_KEY = new PublicKey("Va1idator1nfo111111111111111111111111111111");
    InfoString = type({
      name: string(),
      website: optional(string()),
      details: optional(string()),
      iconUrl: optional(string()),
      keybaseUsername: optional(string())
    });
    ValidatorInfo = class _ValidatorInfo {
      /**
       * Construct a valid ValidatorInfo
       *
       * @param key validator public key
       * @param info validator information
       */
      constructor(key, info) {
        this.key = void 0;
        this.info = void 0;
        this.key = key;
        this.info = info;
      }
      /**
       * Deserialize ValidatorInfo from the config account data. Exactly two config
       * keys are required in the data.
       *
       * @param buffer config account data
       * @return null if info was not found
       */
      static fromConfigData(buffer) {
        let byteArray = [...buffer];
        const configKeyCount = decodeLength(byteArray);
        if (configKeyCount !== 2) return null;
        const configKeys = [];
        for (let i = 0; i < 2; i++) {
          const publicKey2 = new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));
          const isSigner = guardedShift(byteArray) === 1;
          configKeys.push({
            publicKey: publicKey2,
            isSigner
          });
        }
        if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {
          if (configKeys[1].isSigner) {
            const rawInfo = rustString().decode(import_buffer2.Buffer.from(byteArray));
            const info = JSON.parse(rawInfo);
            assert(info, InfoString);
            return new _ValidatorInfo(configKeys[1].publicKey, info);
          }
        }
        return null;
      }
    };
    VOTE_PROGRAM_ID = new PublicKey("Vote111111111111111111111111111111111111111");
    VoteAccountLayout = BufferLayout.struct([
      publicKey("nodePubkey"),
      publicKey("authorizedWithdrawer"),
      BufferLayout.u8("commission"),
      BufferLayout.nu64(),
      // votes.length
      BufferLayout.seq(BufferLayout.struct([BufferLayout.nu64("slot"), BufferLayout.u32("confirmationCount")]), BufferLayout.offset(BufferLayout.u32(), -8), "votes"),
      BufferLayout.u8("rootSlotValid"),
      BufferLayout.nu64("rootSlot"),
      BufferLayout.nu64(),
      // authorizedVoters.length
      BufferLayout.seq(BufferLayout.struct([BufferLayout.nu64("epoch"), publicKey("authorizedVoter")]), BufferLayout.offset(BufferLayout.u32(), -8), "authorizedVoters"),
      BufferLayout.struct([BufferLayout.seq(BufferLayout.struct([publicKey("authorizedPubkey"), BufferLayout.nu64("epochOfLastAuthorizedSwitch"), BufferLayout.nu64("targetEpoch")]), 32, "buf"), BufferLayout.nu64("idx"), BufferLayout.u8("isEmpty")], "priorVoters"),
      BufferLayout.nu64(),
      // epochCredits.length
      BufferLayout.seq(BufferLayout.struct([BufferLayout.nu64("epoch"), BufferLayout.nu64("credits"), BufferLayout.nu64("prevCredits")]), BufferLayout.offset(BufferLayout.u32(), -8), "epochCredits"),
      BufferLayout.struct([BufferLayout.nu64("slot"), BufferLayout.nu64("timestamp")], "lastTimestamp")
    ]);
    VoteAccount = class _VoteAccount {
      /**
       * @internal
       */
      constructor(args) {
        this.nodePubkey = void 0;
        this.authorizedWithdrawer = void 0;
        this.commission = void 0;
        this.rootSlot = void 0;
        this.votes = void 0;
        this.authorizedVoters = void 0;
        this.priorVoters = void 0;
        this.epochCredits = void 0;
        this.lastTimestamp = void 0;
        this.nodePubkey = args.nodePubkey;
        this.authorizedWithdrawer = args.authorizedWithdrawer;
        this.commission = args.commission;
        this.rootSlot = args.rootSlot;
        this.votes = args.votes;
        this.authorizedVoters = args.authorizedVoters;
        this.priorVoters = args.priorVoters;
        this.epochCredits = args.epochCredits;
        this.lastTimestamp = args.lastTimestamp;
      }
      /**
       * Deserialize VoteAccount from the account data.
       *
       * @param buffer account data
       * @return VoteAccount
       */
      static fromAccountData(buffer) {
        const versionOffset = 4;
        const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);
        let rootSlot = va.rootSlot;
        if (!va.rootSlotValid) {
          rootSlot = null;
        }
        return new _VoteAccount({
          nodePubkey: new PublicKey(va.nodePubkey),
          authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),
          commission: va.commission,
          votes: va.votes,
          rootSlot,
          authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),
          priorVoters: getPriorVoters(va.priorVoters),
          epochCredits: va.epochCredits,
          lastTimestamp: va.lastTimestamp
        });
      }
    };
    endpoint = {
      http: {
        devnet: "http://api.devnet.solana.com",
        testnet: "http://api.testnet.solana.com",
        "mainnet-beta": "http://api.mainnet-beta.solana.com/"
      },
      https: {
        devnet: "https://api.devnet.solana.com",
        testnet: "https://api.testnet.solana.com",
        "mainnet-beta": "https://api.mainnet-beta.solana.com/"
      }
    };
    LAMPORTS_PER_SOL = 1e9;
  }
});

// node_modules/js-sha3/src/sha3.js
var require_sha33 = __commonJS({
  "node_modules/js-sha3/src/sha3.js"(exports2, module2) {
    (function() {
      "use strict";
      var INPUT_ERROR = "input is invalid type";
      var FINALIZE_ERROR = "finalize already called";
      var WINDOW2 = typeof window === "object";
      var root2 = WINDOW2 ? window : {};
      if (root2.JS_SHA3_NO_WINDOW) {
        WINDOW2 = false;
      }
      var WEB_WORKER2 = !WINDOW2 && typeof self === "object";
      var NODE_JS2 = !root2.JS_SHA3_NO_NODE_JS && typeof process === "object" && process.versions && process.versions.node;
      if (NODE_JS2) {
        root2 = global;
      } else if (WEB_WORKER2) {
        root2 = self;
      }
      var COMMON_JS2 = !root2.JS_SHA3_NO_COMMON_JS && typeof module2 === "object" && module2.exports;
      var AMD2 = typeof define === "function" && define.amd;
      var ARRAY_BUFFER2 = !root2.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== "undefined";
      var HEX_CHARS2 = "0123456789abcdef".split("");
      var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
      var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
      var KECCAK_PADDING = [1, 256, 65536, 16777216];
      var PADDING = [6, 1536, 393216, 100663296];
      var SHIFT2 = [0, 8, 16, 24];
      var RC = [
        1,
        0,
        32898,
        0,
        32906,
        2147483648,
        2147516416,
        2147483648,
        32907,
        0,
        2147483649,
        0,
        2147516545,
        2147483648,
        32777,
        2147483648,
        138,
        0,
        136,
        0,
        2147516425,
        0,
        2147483658,
        0,
        2147516555,
        0,
        139,
        2147483648,
        32905,
        2147483648,
        32771,
        2147483648,
        32770,
        2147483648,
        128,
        2147483648,
        32778,
        0,
        2147483658,
        2147483648,
        2147516545,
        2147483648,
        32896,
        2147483648,
        2147483649,
        0,
        2147516424,
        2147483648
      ];
      var BITS = [224, 256, 384, 512];
      var SHAKE_BITS = [128, 256];
      var OUTPUT_TYPES2 = ["hex", "buffer", "arrayBuffer", "array", "digest"];
      var CSHAKE_BYTEPAD = {
        "128": 168,
        "256": 136
      };
      if (root2.JS_SHA3_NO_NODE_JS || !Array.isArray) {
        Array.isArray = function(obj) {
          return Object.prototype.toString.call(obj) === "[object Array]";
        };
      }
      if (ARRAY_BUFFER2 && (root2.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
        ArrayBuffer.isView = function(obj) {
          return typeof obj === "object" && obj.buffer && obj.buffer.constructor === ArrayBuffer;
        };
      }
      var createOutputMethod2 = function(bits2, padding, outputType) {
        return function(message) {
          return new Keccak2(bits2, padding, bits2).update(message)[outputType]();
        };
      };
      var createShakeOutputMethod = function(bits2, padding, outputType) {
        return function(message, outputBits) {
          return new Keccak2(bits2, padding, outputBits).update(message)[outputType]();
        };
      };
      var createCshakeOutputMethod = function(bits2, padding, outputType) {
        return function(message, outputBits, n, s) {
          return methods["cshake" + bits2].update(message, outputBits, n, s)[outputType]();
        };
      };
      var createKmacOutputMethod = function(bits2, padding, outputType) {
        return function(key, message, outputBits, s) {
          return methods["kmac" + bits2].update(key, message, outputBits, s)[outputType]();
        };
      };
      var createOutputMethods = function(method2, createMethod3, bits2, padding) {
        for (var i2 = 0; i2 < OUTPUT_TYPES2.length; ++i2) {
          var type2 = OUTPUT_TYPES2[i2];
          method2[type2] = createMethod3(bits2, padding, type2);
        }
        return method2;
      };
      var createMethod2 = function(bits2, padding) {
        var method2 = createOutputMethod2(bits2, padding, "hex");
        method2.create = function() {
          return new Keccak2(bits2, padding, bits2);
        };
        method2.update = function(message) {
          return method2.create().update(message);
        };
        return createOutputMethods(method2, createOutputMethod2, bits2, padding);
      };
      var createShakeMethod = function(bits2, padding) {
        var method2 = createShakeOutputMethod(bits2, padding, "hex");
        method2.create = function(outputBits) {
          return new Keccak2(bits2, padding, outputBits);
        };
        method2.update = function(message, outputBits) {
          return method2.create(outputBits).update(message);
        };
        return createOutputMethods(method2, createShakeOutputMethod, bits2, padding);
      };
      var createCshakeMethod = function(bits2, padding) {
        var w = CSHAKE_BYTEPAD[bits2];
        var method2 = createCshakeOutputMethod(bits2, padding, "hex");
        method2.create = function(outputBits, n, s) {
          if (!n && !s) {
            return methods["shake" + bits2].create(outputBits);
          } else {
            return new Keccak2(bits2, padding, outputBits).bytepad([n, s], w);
          }
        };
        method2.update = function(message, outputBits, n, s) {
          return method2.create(outputBits, n, s).update(message);
        };
        return createOutputMethods(method2, createCshakeOutputMethod, bits2, padding);
      };
      var createKmacMethod = function(bits2, padding) {
        var w = CSHAKE_BYTEPAD[bits2];
        var method2 = createKmacOutputMethod(bits2, padding, "hex");
        method2.create = function(key, outputBits, s) {
          return new Kmac(bits2, padding, outputBits).bytepad(["KMAC", s], w).bytepad([key], w);
        };
        method2.update = function(key, message, outputBits, s) {
          return method2.create(key, outputBits, s).update(message);
        };
        return createOutputMethods(method2, createKmacOutputMethod, bits2, padding);
      };
      var algorithms = [
        { name: "keccak", padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod2 },
        { name: "sha3", padding: PADDING, bits: BITS, createMethod: createMethod2 },
        { name: "shake", padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
        { name: "cshake", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
        { name: "kmac", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
      ];
      var methods = {}, methodNames = [];
      for (var i = 0; i < algorithms.length; ++i) {
        var algorithm2 = algorithms[i];
        var bits = algorithm2.bits;
        for (var j = 0; j < bits.length; ++j) {
          var methodName = algorithm2.name + "_" + bits[j];
          methodNames.push(methodName);
          methods[methodName] = algorithm2.createMethod(bits[j], algorithm2.padding);
          if (algorithm2.name !== "sha3") {
            var newMethodName = algorithm2.name + bits[j];
            methodNames.push(newMethodName);
            methods[newMethodName] = methods[methodName];
          }
        }
      }
      function Keccak2(bits2, padding, outputBits) {
        this.blocks = [];
        this.s = [];
        this.padding = padding;
        this.outputBits = outputBits;
        this.reset = true;
        this.finalized = false;
        this.block = 0;
        this.start = 0;
        this.blockCount = 1600 - (bits2 << 1) >> 5;
        this.byteCount = this.blockCount << 2;
        this.outputBlocks = outputBits >> 5;
        this.extraBytes = (outputBits & 31) >> 3;
        for (var i2 = 0; i2 < 50; ++i2) {
          this.s[i2] = 0;
        }
      }
      Keccak2.prototype.update = function(message) {
        if (this.finalized) {
          throw new Error(FINALIZE_ERROR);
        }
        var notString, type2 = typeof message;
        if (type2 !== "string") {
          if (type2 === "object") {
            if (message === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER2 && message.constructor === ArrayBuffer) {
              message = new Uint8Array(message);
            } else if (!Array.isArray(message)) {
              if (!ARRAY_BUFFER2 || !ArrayBuffer.isView(message)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var blocks2 = this.blocks, byteCount = this.byteCount, length = message.length, blockCount = this.blockCount, index = 0, s = this.s, i2, code;
        while (index < length) {
          if (this.reset) {
            this.reset = false;
            blocks2[0] = this.block;
            for (i2 = 1; i2 < blockCount + 1; ++i2) {
              blocks2[i2] = 0;
            }
          }
          if (notString) {
            for (i2 = this.start; index < length && i2 < byteCount; ++index) {
              blocks2[i2 >> 2] |= message[index] << SHIFT2[i2++ & 3];
            }
          } else {
            for (i2 = this.start; index < length && i2 < byteCount; ++index) {
              code = message.charCodeAt(index);
              if (code < 128) {
                blocks2[i2 >> 2] |= code << SHIFT2[i2++ & 3];
              } else if (code < 2048) {
                blocks2[i2 >> 2] |= (192 | code >> 6) << SHIFT2[i2++ & 3];
                blocks2[i2 >> 2] |= (128 | code & 63) << SHIFT2[i2++ & 3];
              } else if (code < 55296 || code >= 57344) {
                blocks2[i2 >> 2] |= (224 | code >> 12) << SHIFT2[i2++ & 3];
                blocks2[i2 >> 2] |= (128 | code >> 6 & 63) << SHIFT2[i2++ & 3];
                blocks2[i2 >> 2] |= (128 | code & 63) << SHIFT2[i2++ & 3];
              } else {
                code = 65536 + ((code & 1023) << 10 | message.charCodeAt(++index) & 1023);
                blocks2[i2 >> 2] |= (240 | code >> 18) << SHIFT2[i2++ & 3];
                blocks2[i2 >> 2] |= (128 | code >> 12 & 63) << SHIFT2[i2++ & 3];
                blocks2[i2 >> 2] |= (128 | code >> 6 & 63) << SHIFT2[i2++ & 3];
                blocks2[i2 >> 2] |= (128 | code & 63) << SHIFT2[i2++ & 3];
              }
            }
          }
          this.lastByteIndex = i2;
          if (i2 >= byteCount) {
            this.start = i2 - byteCount;
            this.block = blocks2[blockCount];
            for (i2 = 0; i2 < blockCount; ++i2) {
              s[i2] ^= blocks2[i2];
            }
            f2(s);
            this.reset = true;
          } else {
            this.start = i2;
          }
        }
        return this;
      };
      Keccak2.prototype.encode = function(x, right) {
        var o = x & 255, n = 1;
        var bytes = [o];
        x = x >> 8;
        o = x & 255;
        while (o > 0) {
          bytes.unshift(o);
          x = x >> 8;
          o = x & 255;
          ++n;
        }
        if (right) {
          bytes.push(n);
        } else {
          bytes.unshift(n);
        }
        this.update(bytes);
        return bytes.length;
      };
      Keccak2.prototype.encodeString = function(str) {
        var notString, type2 = typeof str;
        if (type2 !== "string") {
          if (type2 === "object") {
            if (str === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER2 && str.constructor === ArrayBuffer) {
              str = new Uint8Array(str);
            } else if (!Array.isArray(str)) {
              if (!ARRAY_BUFFER2 || !ArrayBuffer.isView(str)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var bytes = 0, length = str.length;
        if (notString) {
          bytes = length;
        } else {
          for (var i2 = 0; i2 < str.length; ++i2) {
            var code = str.charCodeAt(i2);
            if (code < 128) {
              bytes += 1;
            } else if (code < 2048) {
              bytes += 2;
            } else if (code < 55296 || code >= 57344) {
              bytes += 3;
            } else {
              code = 65536 + ((code & 1023) << 10 | str.charCodeAt(++i2) & 1023);
              bytes += 4;
            }
          }
        }
        bytes += this.encode(bytes * 8);
        this.update(str);
        return bytes;
      };
      Keccak2.prototype.bytepad = function(strs, w) {
        var bytes = this.encode(w);
        for (var i2 = 0; i2 < strs.length; ++i2) {
          bytes += this.encodeString(strs[i2]);
        }
        var paddingBytes = w - bytes % w;
        var zeros = [];
        zeros.length = paddingBytes;
        this.update(zeros);
        return this;
      };
      Keccak2.prototype.finalize = function() {
        if (this.finalized) {
          return;
        }
        this.finalized = true;
        var blocks2 = this.blocks, i2 = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
        blocks2[i2 >> 2] |= this.padding[i2 & 3];
        if (this.lastByteIndex === this.byteCount) {
          blocks2[0] = blocks2[blockCount];
          for (i2 = 1; i2 < blockCount + 1; ++i2) {
            blocks2[i2] = 0;
          }
        }
        blocks2[blockCount - 1] |= 2147483648;
        for (i2 = 0; i2 < blockCount; ++i2) {
          s[i2] ^= blocks2[i2];
        }
        f2(s);
      };
      Keccak2.prototype.toString = Keccak2.prototype.hex = function() {
        this.finalize();
        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;
        var hex = "", block;
        while (j2 < outputBlocks) {
          for (i2 = 0; i2 < blockCount && j2 < outputBlocks; ++i2, ++j2) {
            block = s[i2];
            hex += HEX_CHARS2[block >> 4 & 15] + HEX_CHARS2[block & 15] + HEX_CHARS2[block >> 12 & 15] + HEX_CHARS2[block >> 8 & 15] + HEX_CHARS2[block >> 20 & 15] + HEX_CHARS2[block >> 16 & 15] + HEX_CHARS2[block >> 28 & 15] + HEX_CHARS2[block >> 24 & 15];
          }
          if (j2 % blockCount === 0) {
            f2(s);
            i2 = 0;
          }
        }
        if (extraBytes) {
          block = s[i2];
          hex += HEX_CHARS2[block >> 4 & 15] + HEX_CHARS2[block & 15];
          if (extraBytes > 1) {
            hex += HEX_CHARS2[block >> 12 & 15] + HEX_CHARS2[block >> 8 & 15];
          }
          if (extraBytes > 2) {
            hex += HEX_CHARS2[block >> 20 & 15] + HEX_CHARS2[block >> 16 & 15];
          }
        }
        return hex;
      };
      Keccak2.prototype.arrayBuffer = function() {
        this.finalize();
        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;
        var bytes = this.outputBits >> 3;
        var buffer;
        if (extraBytes) {
          buffer = new ArrayBuffer(outputBlocks + 1 << 2);
        } else {
          buffer = new ArrayBuffer(bytes);
        }
        var array2 = new Uint32Array(buffer);
        while (j2 < outputBlocks) {
          for (i2 = 0; i2 < blockCount && j2 < outputBlocks; ++i2, ++j2) {
            array2[j2] = s[i2];
          }
          if (j2 % blockCount === 0) {
            f2(s);
          }
        }
        if (extraBytes) {
          array2[i2] = s[i2];
          buffer = buffer.slice(0, bytes);
        }
        return buffer;
      };
      Keccak2.prototype.buffer = Keccak2.prototype.arrayBuffer;
      Keccak2.prototype.digest = Keccak2.prototype.array = function() {
        this.finalize();
        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;
        var array2 = [], offset2, block;
        while (j2 < outputBlocks) {
          for (i2 = 0; i2 < blockCount && j2 < outputBlocks; ++i2, ++j2) {
            offset2 = j2 << 2;
            block = s[i2];
            array2[offset2] = block & 255;
            array2[offset2 + 1] = block >> 8 & 255;
            array2[offset2 + 2] = block >> 16 & 255;
            array2[offset2 + 3] = block >> 24 & 255;
          }
          if (j2 % blockCount === 0) {
            f2(s);
          }
        }
        if (extraBytes) {
          offset2 = j2 << 2;
          block = s[i2];
          array2[offset2] = block & 255;
          if (extraBytes > 1) {
            array2[offset2 + 1] = block >> 8 & 255;
          }
          if (extraBytes > 2) {
            array2[offset2 + 2] = block >> 16 & 255;
          }
        }
        return array2;
      };
      function Kmac(bits2, padding, outputBits) {
        Keccak2.call(this, bits2, padding, outputBits);
      }
      Kmac.prototype = new Keccak2();
      Kmac.prototype.finalize = function() {
        this.encode(this.outputBits, true);
        return Keccak2.prototype.finalize.call(this);
      };
      var f2 = function(s) {
        var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
        for (n = 0; n < 48; n += 2) {
          c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
          c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
          c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
          c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
          c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
          c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
          c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
          c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
          c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
          c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];
          h = c8 ^ (c2 << 1 | c3 >>> 31);
          l = c9 ^ (c3 << 1 | c2 >>> 31);
          s[0] ^= h;
          s[1] ^= l;
          s[10] ^= h;
          s[11] ^= l;
          s[20] ^= h;
          s[21] ^= l;
          s[30] ^= h;
          s[31] ^= l;
          s[40] ^= h;
          s[41] ^= l;
          h = c0 ^ (c4 << 1 | c5 >>> 31);
          l = c1 ^ (c5 << 1 | c4 >>> 31);
          s[2] ^= h;
          s[3] ^= l;
          s[12] ^= h;
          s[13] ^= l;
          s[22] ^= h;
          s[23] ^= l;
          s[32] ^= h;
          s[33] ^= l;
          s[42] ^= h;
          s[43] ^= l;
          h = c2 ^ (c6 << 1 | c7 >>> 31);
          l = c3 ^ (c7 << 1 | c6 >>> 31);
          s[4] ^= h;
          s[5] ^= l;
          s[14] ^= h;
          s[15] ^= l;
          s[24] ^= h;
          s[25] ^= l;
          s[34] ^= h;
          s[35] ^= l;
          s[44] ^= h;
          s[45] ^= l;
          h = c4 ^ (c8 << 1 | c9 >>> 31);
          l = c5 ^ (c9 << 1 | c8 >>> 31);
          s[6] ^= h;
          s[7] ^= l;
          s[16] ^= h;
          s[17] ^= l;
          s[26] ^= h;
          s[27] ^= l;
          s[36] ^= h;
          s[37] ^= l;
          s[46] ^= h;
          s[47] ^= l;
          h = c6 ^ (c0 << 1 | c1 >>> 31);
          l = c7 ^ (c1 << 1 | c0 >>> 31);
          s[8] ^= h;
          s[9] ^= l;
          s[18] ^= h;
          s[19] ^= l;
          s[28] ^= h;
          s[29] ^= l;
          s[38] ^= h;
          s[39] ^= l;
          s[48] ^= h;
          s[49] ^= l;
          b0 = s[0];
          b1 = s[1];
          b32 = s[11] << 4 | s[10] >>> 28;
          b33 = s[10] << 4 | s[11] >>> 28;
          b14 = s[20] << 3 | s[21] >>> 29;
          b15 = s[21] << 3 | s[20] >>> 29;
          b46 = s[31] << 9 | s[30] >>> 23;
          b47 = s[30] << 9 | s[31] >>> 23;
          b28 = s[40] << 18 | s[41] >>> 14;
          b29 = s[41] << 18 | s[40] >>> 14;
          b20 = s[2] << 1 | s[3] >>> 31;
          b21 = s[3] << 1 | s[2] >>> 31;
          b2 = s[13] << 12 | s[12] >>> 20;
          b3 = s[12] << 12 | s[13] >>> 20;
          b34 = s[22] << 10 | s[23] >>> 22;
          b35 = s[23] << 10 | s[22] >>> 22;
          b16 = s[33] << 13 | s[32] >>> 19;
          b17 = s[32] << 13 | s[33] >>> 19;
          b48 = s[42] << 2 | s[43] >>> 30;
          b49 = s[43] << 2 | s[42] >>> 30;
          b40 = s[5] << 30 | s[4] >>> 2;
          b41 = s[4] << 30 | s[5] >>> 2;
          b22 = s[14] << 6 | s[15] >>> 26;
          b23 = s[15] << 6 | s[14] >>> 26;
          b4 = s[25] << 11 | s[24] >>> 21;
          b5 = s[24] << 11 | s[25] >>> 21;
          b36 = s[34] << 15 | s[35] >>> 17;
          b37 = s[35] << 15 | s[34] >>> 17;
          b18 = s[45] << 29 | s[44] >>> 3;
          b19 = s[44] << 29 | s[45] >>> 3;
          b10 = s[6] << 28 | s[7] >>> 4;
          b11 = s[7] << 28 | s[6] >>> 4;
          b42 = s[17] << 23 | s[16] >>> 9;
          b43 = s[16] << 23 | s[17] >>> 9;
          b24 = s[26] << 25 | s[27] >>> 7;
          b25 = s[27] << 25 | s[26] >>> 7;
          b6 = s[36] << 21 | s[37] >>> 11;
          b7 = s[37] << 21 | s[36] >>> 11;
          b38 = s[47] << 24 | s[46] >>> 8;
          b39 = s[46] << 24 | s[47] >>> 8;
          b30 = s[8] << 27 | s[9] >>> 5;
          b31 = s[9] << 27 | s[8] >>> 5;
          b12 = s[18] << 20 | s[19] >>> 12;
          b13 = s[19] << 20 | s[18] >>> 12;
          b44 = s[29] << 7 | s[28] >>> 25;
          b45 = s[28] << 7 | s[29] >>> 25;
          b26 = s[38] << 8 | s[39] >>> 24;
          b27 = s[39] << 8 | s[38] >>> 24;
          b8 = s[48] << 14 | s[49] >>> 18;
          b9 = s[49] << 14 | s[48] >>> 18;
          s[0] = b0 ^ ~b2 & b4;
          s[1] = b1 ^ ~b3 & b5;
          s[10] = b10 ^ ~b12 & b14;
          s[11] = b11 ^ ~b13 & b15;
          s[20] = b20 ^ ~b22 & b24;
          s[21] = b21 ^ ~b23 & b25;
          s[30] = b30 ^ ~b32 & b34;
          s[31] = b31 ^ ~b33 & b35;
          s[40] = b40 ^ ~b42 & b44;
          s[41] = b41 ^ ~b43 & b45;
          s[2] = b2 ^ ~b4 & b6;
          s[3] = b3 ^ ~b5 & b7;
          s[12] = b12 ^ ~b14 & b16;
          s[13] = b13 ^ ~b15 & b17;
          s[22] = b22 ^ ~b24 & b26;
          s[23] = b23 ^ ~b25 & b27;
          s[32] = b32 ^ ~b34 & b36;
          s[33] = b33 ^ ~b35 & b37;
          s[42] = b42 ^ ~b44 & b46;
          s[43] = b43 ^ ~b45 & b47;
          s[4] = b4 ^ ~b6 & b8;
          s[5] = b5 ^ ~b7 & b9;
          s[14] = b14 ^ ~b16 & b18;
          s[15] = b15 ^ ~b17 & b19;
          s[24] = b24 ^ ~b26 & b28;
          s[25] = b25 ^ ~b27 & b29;
          s[34] = b34 ^ ~b36 & b38;
          s[35] = b35 ^ ~b37 & b39;
          s[44] = b44 ^ ~b46 & b48;
          s[45] = b45 ^ ~b47 & b49;
          s[6] = b6 ^ ~b8 & b0;
          s[7] = b7 ^ ~b9 & b1;
          s[16] = b16 ^ ~b18 & b10;
          s[17] = b17 ^ ~b19 & b11;
          s[26] = b26 ^ ~b28 & b20;
          s[27] = b27 ^ ~b29 & b21;
          s[36] = b36 ^ ~b38 & b30;
          s[37] = b37 ^ ~b39 & b31;
          s[46] = b46 ^ ~b48 & b40;
          s[47] = b47 ^ ~b49 & b41;
          s[8] = b8 ^ ~b0 & b2;
          s[9] = b9 ^ ~b1 & b3;
          s[18] = b18 ^ ~b10 & b12;
          s[19] = b19 ^ ~b11 & b13;
          s[28] = b28 ^ ~b20 & b22;
          s[29] = b29 ^ ~b21 & b23;
          s[38] = b38 ^ ~b30 & b32;
          s[39] = b39 ^ ~b31 & b33;
          s[48] = b48 ^ ~b40 & b42;
          s[49] = b49 ^ ~b41 & b43;
          s[0] ^= RC[n];
          s[1] ^= RC[n + 1];
        }
      };
      if (COMMON_JS2) {
        module2.exports = methods;
      } else {
        for (i = 0; i < methodNames.length; ++i) {
          root2[methodNames[i]] = methods[methodNames[i]];
        }
        if (AMD2) {
          define(function() {
            return methods;
          });
        }
      }
    })();
  }
});

// node_modules/js-sha256/src/sha256.js
var require_sha2564 = __commonJS({
  "node_modules/js-sha256/src/sha256.js"(exports, module) {
    (function() {
      "use strict";
      var ERROR = "input is invalid type";
      var WINDOW = typeof window === "object";
      var root = WINDOW ? window : {};
      if (root.JS_SHA256_NO_WINDOW) {
        WINDOW = false;
      }
      var WEB_WORKER = !WINDOW && typeof self === "object";
      var NODE_JS = !root.JS_SHA256_NO_NODE_JS && typeof process === "object" && process.versions && process.versions.node;
      if (NODE_JS) {
        root = global;
      } else if (WEB_WORKER) {
        root = self;
      }
      var COMMON_JS = !root.JS_SHA256_NO_COMMON_JS && typeof module === "object" && module.exports;
      var AMD = typeof define === "function" && define.amd;
      var ARRAY_BUFFER = !root.JS_SHA256_NO_ARRAY_BUFFER && typeof ArrayBuffer !== "undefined";
      var HEX_CHARS = "0123456789abcdef".split("");
      var EXTRA = [-2147483648, 8388608, 32768, 128];
      var SHIFT = [24, 16, 8, 0];
      var K = [
        1116352408,
        1899447441,
        3049323471,
        3921009573,
        961987163,
        1508970993,
        2453635748,
        2870763221,
        3624381080,
        310598401,
        607225278,
        1426881987,
        1925078388,
        2162078206,
        2614888103,
        3248222580,
        3835390401,
        4022224774,
        264347078,
        604807628,
        770255983,
        1249150122,
        1555081692,
        1996064986,
        2554220882,
        2821834349,
        2952996808,
        3210313671,
        3336571891,
        3584528711,
        113926993,
        338241895,
        666307205,
        773529912,
        1294757372,
        1396182291,
        1695183700,
        1986661051,
        2177026350,
        2456956037,
        2730485921,
        2820302411,
        3259730800,
        3345764771,
        3516065817,
        3600352804,
        4094571909,
        275423344,
        430227734,
        506948616,
        659060556,
        883997877,
        958139571,
        1322822218,
        1537002063,
        1747873779,
        1955562222,
        2024104815,
        2227730452,
        2361852424,
        2428436474,
        2756734187,
        3204031479,
        3329325298
      ];
      var OUTPUT_TYPES = ["hex", "array", "digest", "arrayBuffer"];
      var blocks = [];
      if (root.JS_SHA256_NO_NODE_JS || !Array.isArray) {
        Array.isArray = function(obj) {
          return Object.prototype.toString.call(obj) === "[object Array]";
        };
      }
      if (ARRAY_BUFFER && (root.JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
        ArrayBuffer.isView = function(obj) {
          return typeof obj === "object" && obj.buffer && obj.buffer.constructor === ArrayBuffer;
        };
      }
      var createOutputMethod = function(outputType, is2242) {
        return function(message) {
          return new Sha256(is2242, true).update(message)[outputType]();
        };
      };
      var createMethod = function(is2242) {
        var method2 = createOutputMethod("hex", is2242);
        if (NODE_JS) {
          method2 = nodeWrap(method2, is2242);
        }
        method2.create = function() {
          return new Sha256(is2242);
        };
        method2.update = function(message) {
          return method2.create().update(message);
        };
        for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
          var type2 = OUTPUT_TYPES[i];
          method2[type2] = createOutputMethod(type2, is2242);
        }
        return method2;
      };
      var nodeWrap = function(method, is224) {
        var crypto = eval("require('crypto')");
        var Buffer = eval("require('buffer').Buffer");
        var algorithm = is224 ? "sha224" : "sha256";
        var nodeMethod = function(message) {
          if (typeof message === "string") {
            return crypto.createHash(algorithm).update(message, "utf8").digest("hex");
          } else {
            if (message === null || message === void 0) {
              throw new Error(ERROR);
            } else if (message.constructor === ArrayBuffer) {
              message = new Uint8Array(message);
            }
          }
          if (Array.isArray(message) || ArrayBuffer.isView(message) || message.constructor === Buffer) {
            return crypto.createHash(algorithm).update(new Buffer(message)).digest("hex");
          } else {
            return method(message);
          }
        };
        return nodeMethod;
      };
      var createHmacOutputMethod = function(outputType, is2242) {
        return function(key, message) {
          return new HmacSha256(key, is2242, true).update(message)[outputType]();
        };
      };
      var createHmacMethod = function(is2242) {
        var method2 = createHmacOutputMethod("hex", is2242);
        method2.create = function(key) {
          return new HmacSha256(key, is2242);
        };
        method2.update = function(key, message) {
          return method2.create(key).update(message);
        };
        for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
          var type2 = OUTPUT_TYPES[i];
          method2[type2] = createHmacOutputMethod(type2, is2242);
        }
        return method2;
      };
      function Sha256(is2242, sharedMemory) {
        if (sharedMemory) {
          blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
          this.blocks = blocks;
        } else {
          this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        }
        if (is2242) {
          this.h0 = 3238371032;
          this.h1 = 914150663;
          this.h2 = 812702999;
          this.h3 = 4144912697;
          this.h4 = 4290775857;
          this.h5 = 1750603025;
          this.h6 = 1694076839;
          this.h7 = 3204075428;
        } else {
          this.h0 = 1779033703;
          this.h1 = 3144134277;
          this.h2 = 1013904242;
          this.h3 = 2773480762;
          this.h4 = 1359893119;
          this.h5 = 2600822924;
          this.h6 = 528734635;
          this.h7 = 1541459225;
        }
        this.block = this.start = this.bytes = this.hBytes = 0;
        this.finalized = this.hashed = false;
        this.first = true;
        this.is224 = is2242;
      }
      Sha256.prototype.update = function(message) {
        if (this.finalized) {
          return;
        }
        var notString, type2 = typeof message;
        if (type2 !== "string") {
          if (type2 === "object") {
            if (message === null) {
              throw new Error(ERROR);
            } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
              message = new Uint8Array(message);
            } else if (!Array.isArray(message)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
                throw new Error(ERROR);
              }
            }
          } else {
            throw new Error(ERROR);
          }
          notString = true;
        }
        var code, index = 0, i, length = message.length, blocks2 = this.blocks;
        while (index < length) {
          if (this.hashed) {
            this.hashed = false;
            blocks2[0] = this.block;
            blocks2[16] = blocks2[1] = blocks2[2] = blocks2[3] = blocks2[4] = blocks2[5] = blocks2[6] = blocks2[7] = blocks2[8] = blocks2[9] = blocks2[10] = blocks2[11] = blocks2[12] = blocks2[13] = blocks2[14] = blocks2[15] = 0;
          }
          if (notString) {
            for (i = this.start; index < length && i < 64; ++index) {
              blocks2[i >> 2] |= message[index] << SHIFT[i++ & 3];
            }
          } else {
            for (i = this.start; index < length && i < 64; ++index) {
              code = message.charCodeAt(index);
              if (code < 128) {
                blocks2[i >> 2] |= code << SHIFT[i++ & 3];
              } else if (code < 2048) {
                blocks2[i >> 2] |= (192 | code >> 6) << SHIFT[i++ & 3];
                blocks2[i >> 2] |= (128 | code & 63) << SHIFT[i++ & 3];
              } else if (code < 55296 || code >= 57344) {
                blocks2[i >> 2] |= (224 | code >> 12) << SHIFT[i++ & 3];
                blocks2[i >> 2] |= (128 | code >> 6 & 63) << SHIFT[i++ & 3];
                blocks2[i >> 2] |= (128 | code & 63) << SHIFT[i++ & 3];
              } else {
                code = 65536 + ((code & 1023) << 10 | message.charCodeAt(++index) & 1023);
                blocks2[i >> 2] |= (240 | code >> 18) << SHIFT[i++ & 3];
                blocks2[i >> 2] |= (128 | code >> 12 & 63) << SHIFT[i++ & 3];
                blocks2[i >> 2] |= (128 | code >> 6 & 63) << SHIFT[i++ & 3];
                blocks2[i >> 2] |= (128 | code & 63) << SHIFT[i++ & 3];
              }
            }
          }
          this.lastByteIndex = i;
          this.bytes += i - this.start;
          if (i >= 64) {
            this.block = blocks2[16];
            this.start = i - 64;
            this.hash();
            this.hashed = true;
          } else {
            this.start = i;
          }
        }
        if (this.bytes > 4294967295) {
          this.hBytes += this.bytes / 4294967296 << 0;
          this.bytes = this.bytes % 4294967296;
        }
        return this;
      };
      Sha256.prototype.finalize = function() {
        if (this.finalized) {
          return;
        }
        this.finalized = true;
        var blocks2 = this.blocks, i = this.lastByteIndex;
        blocks2[16] = this.block;
        blocks2[i >> 2] |= EXTRA[i & 3];
        this.block = blocks2[16];
        if (i >= 56) {
          if (!this.hashed) {
            this.hash();
          }
          blocks2[0] = this.block;
          blocks2[16] = blocks2[1] = blocks2[2] = blocks2[3] = blocks2[4] = blocks2[5] = blocks2[6] = blocks2[7] = blocks2[8] = blocks2[9] = blocks2[10] = blocks2[11] = blocks2[12] = blocks2[13] = blocks2[14] = blocks2[15] = 0;
        }
        blocks2[14] = this.hBytes << 3 | this.bytes >>> 29;
        blocks2[15] = this.bytes << 3;
        this.hash();
      };
      Sha256.prototype.hash = function() {
        var a = this.h0, b = this.h1, c = this.h2, d = this.h3, e = this.h4, f2 = this.h5, g = this.h6, h = this.h7, blocks2 = this.blocks, j, s0, s1, maj, t1, t2, ch, ab, da, cd, bc;
        for (j = 16; j < 64; ++j) {
          t1 = blocks2[j - 15];
          s0 = (t1 >>> 7 | t1 << 25) ^ (t1 >>> 18 | t1 << 14) ^ t1 >>> 3;
          t1 = blocks2[j - 2];
          s1 = (t1 >>> 17 | t1 << 15) ^ (t1 >>> 19 | t1 << 13) ^ t1 >>> 10;
          blocks2[j] = blocks2[j - 16] + s0 + blocks2[j - 7] + s1 << 0;
        }
        bc = b & c;
        for (j = 0; j < 64; j += 4) {
          if (this.first) {
            if (this.is224) {
              ab = 300032;
              t1 = blocks2[0] - 1413257819;
              h = t1 - 150054599 << 0;
              d = t1 + 24177077 << 0;
            } else {
              ab = 704751109;
              t1 = blocks2[0] - 210244248;
              h = t1 - 1521486534 << 0;
              d = t1 + 143694565 << 0;
            }
            this.first = false;
          } else {
            s0 = (a >>> 2 | a << 30) ^ (a >>> 13 | a << 19) ^ (a >>> 22 | a << 10);
            s1 = (e >>> 6 | e << 26) ^ (e >>> 11 | e << 21) ^ (e >>> 25 | e << 7);
            ab = a & b;
            maj = ab ^ a & c ^ bc;
            ch = e & f2 ^ ~e & g;
            t1 = h + s1 + ch + K[j] + blocks2[j];
            t2 = s0 + maj;
            h = d + t1 << 0;
            d = t1 + t2 << 0;
          }
          s0 = (d >>> 2 | d << 30) ^ (d >>> 13 | d << 19) ^ (d >>> 22 | d << 10);
          s1 = (h >>> 6 | h << 26) ^ (h >>> 11 | h << 21) ^ (h >>> 25 | h << 7);
          da = d & a;
          maj = da ^ d & b ^ ab;
          ch = h & e ^ ~h & f2;
          t1 = g + s1 + ch + K[j + 1] + blocks2[j + 1];
          t2 = s0 + maj;
          g = c + t1 << 0;
          c = t1 + t2 << 0;
          s0 = (c >>> 2 | c << 30) ^ (c >>> 13 | c << 19) ^ (c >>> 22 | c << 10);
          s1 = (g >>> 6 | g << 26) ^ (g >>> 11 | g << 21) ^ (g >>> 25 | g << 7);
          cd = c & d;
          maj = cd ^ c & a ^ da;
          ch = g & h ^ ~g & e;
          t1 = f2 + s1 + ch + K[j + 2] + blocks2[j + 2];
          t2 = s0 + maj;
          f2 = b + t1 << 0;
          b = t1 + t2 << 0;
          s0 = (b >>> 2 | b << 30) ^ (b >>> 13 | b << 19) ^ (b >>> 22 | b << 10);
          s1 = (f2 >>> 6 | f2 << 26) ^ (f2 >>> 11 | f2 << 21) ^ (f2 >>> 25 | f2 << 7);
          bc = b & c;
          maj = bc ^ b & d ^ cd;
          ch = f2 & g ^ ~f2 & h;
          t1 = e + s1 + ch + K[j + 3] + blocks2[j + 3];
          t2 = s0 + maj;
          e = a + t1 << 0;
          a = t1 + t2 << 0;
        }
        this.h0 = this.h0 + a << 0;
        this.h1 = this.h1 + b << 0;
        this.h2 = this.h2 + c << 0;
        this.h3 = this.h3 + d << 0;
        this.h4 = this.h4 + e << 0;
        this.h5 = this.h5 + f2 << 0;
        this.h6 = this.h6 + g << 0;
        this.h7 = this.h7 + h << 0;
      };
      Sha256.prototype.hex = function() {
        this.finalize();
        var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5, h6 = this.h6, h7 = this.h7;
        var hex = HEX_CHARS[h0 >> 28 & 15] + HEX_CHARS[h0 >> 24 & 15] + HEX_CHARS[h0 >> 20 & 15] + HEX_CHARS[h0 >> 16 & 15] + HEX_CHARS[h0 >> 12 & 15] + HEX_CHARS[h0 >> 8 & 15] + HEX_CHARS[h0 >> 4 & 15] + HEX_CHARS[h0 & 15] + HEX_CHARS[h1 >> 28 & 15] + HEX_CHARS[h1 >> 24 & 15] + HEX_CHARS[h1 >> 20 & 15] + HEX_CHARS[h1 >> 16 & 15] + HEX_CHARS[h1 >> 12 & 15] + HEX_CHARS[h1 >> 8 & 15] + HEX_CHARS[h1 >> 4 & 15] + HEX_CHARS[h1 & 15] + HEX_CHARS[h2 >> 28 & 15] + HEX_CHARS[h2 >> 24 & 15] + HEX_CHARS[h2 >> 20 & 15] + HEX_CHARS[h2 >> 16 & 15] + HEX_CHARS[h2 >> 12 & 15] + HEX_CHARS[h2 >> 8 & 15] + HEX_CHARS[h2 >> 4 & 15] + HEX_CHARS[h2 & 15] + HEX_CHARS[h3 >> 28 & 15] + HEX_CHARS[h3 >> 24 & 15] + HEX_CHARS[h3 >> 20 & 15] + HEX_CHARS[h3 >> 16 & 15] + HEX_CHARS[h3 >> 12 & 15] + HEX_CHARS[h3 >> 8 & 15] + HEX_CHARS[h3 >> 4 & 15] + HEX_CHARS[h3 & 15] + HEX_CHARS[h4 >> 28 & 15] + HEX_CHARS[h4 >> 24 & 15] + HEX_CHARS[h4 >> 20 & 15] + HEX_CHARS[h4 >> 16 & 15] + HEX_CHARS[h4 >> 12 & 15] + HEX_CHARS[h4 >> 8 & 15] + HEX_CHARS[h4 >> 4 & 15] + HEX_CHARS[h4 & 15] + HEX_CHARS[h5 >> 28 & 15] + HEX_CHARS[h5 >> 24 & 15] + HEX_CHARS[h5 >> 20 & 15] + HEX_CHARS[h5 >> 16 & 15] + HEX_CHARS[h5 >> 12 & 15] + HEX_CHARS[h5 >> 8 & 15] + HEX_CHARS[h5 >> 4 & 15] + HEX_CHARS[h5 & 15] + HEX_CHARS[h6 >> 28 & 15] + HEX_CHARS[h6 >> 24 & 15] + HEX_CHARS[h6 >> 20 & 15] + HEX_CHARS[h6 >> 16 & 15] + HEX_CHARS[h6 >> 12 & 15] + HEX_CHARS[h6 >> 8 & 15] + HEX_CHARS[h6 >> 4 & 15] + HEX_CHARS[h6 & 15];
        if (!this.is224) {
          hex += HEX_CHARS[h7 >> 28 & 15] + HEX_CHARS[h7 >> 24 & 15] + HEX_CHARS[h7 >> 20 & 15] + HEX_CHARS[h7 >> 16 & 15] + HEX_CHARS[h7 >> 12 & 15] + HEX_CHARS[h7 >> 8 & 15] + HEX_CHARS[h7 >> 4 & 15] + HEX_CHARS[h7 & 15];
        }
        return hex;
      };
      Sha256.prototype.toString = Sha256.prototype.hex;
      Sha256.prototype.digest = function() {
        this.finalize();
        var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5, h6 = this.h6, h7 = this.h7;
        var arr = [
          h0 >> 24 & 255,
          h0 >> 16 & 255,
          h0 >> 8 & 255,
          h0 & 255,
          h1 >> 24 & 255,
          h1 >> 16 & 255,
          h1 >> 8 & 255,
          h1 & 255,
          h2 >> 24 & 255,
          h2 >> 16 & 255,
          h2 >> 8 & 255,
          h2 & 255,
          h3 >> 24 & 255,
          h3 >> 16 & 255,
          h3 >> 8 & 255,
          h3 & 255,
          h4 >> 24 & 255,
          h4 >> 16 & 255,
          h4 >> 8 & 255,
          h4 & 255,
          h5 >> 24 & 255,
          h5 >> 16 & 255,
          h5 >> 8 & 255,
          h5 & 255,
          h6 >> 24 & 255,
          h6 >> 16 & 255,
          h6 >> 8 & 255,
          h6 & 255
        ];
        if (!this.is224) {
          arr.push(h7 >> 24 & 255, h7 >> 16 & 255, h7 >> 8 & 255, h7 & 255);
        }
        return arr;
      };
      Sha256.prototype.array = Sha256.prototype.digest;
      Sha256.prototype.arrayBuffer = function() {
        this.finalize();
        var buffer = new ArrayBuffer(this.is224 ? 28 : 32);
        var dataView = new DataView(buffer);
        dataView.setUint32(0, this.h0);
        dataView.setUint32(4, this.h1);
        dataView.setUint32(8, this.h2);
        dataView.setUint32(12, this.h3);
        dataView.setUint32(16, this.h4);
        dataView.setUint32(20, this.h5);
        dataView.setUint32(24, this.h6);
        if (!this.is224) {
          dataView.setUint32(28, this.h7);
        }
        return buffer;
      };
      function HmacSha256(key, is2242, sharedMemory) {
        var i, type2 = typeof key;
        if (type2 === "string") {
          var bytes = [], length = key.length, index = 0, code;
          for (i = 0; i < length; ++i) {
            code = key.charCodeAt(i);
            if (code < 128) {
              bytes[index++] = code;
            } else if (code < 2048) {
              bytes[index++] = 192 | code >> 6;
              bytes[index++] = 128 | code & 63;
            } else if (code < 55296 || code >= 57344) {
              bytes[index++] = 224 | code >> 12;
              bytes[index++] = 128 | code >> 6 & 63;
              bytes[index++] = 128 | code & 63;
            } else {
              code = 65536 + ((code & 1023) << 10 | key.charCodeAt(++i) & 1023);
              bytes[index++] = 240 | code >> 18;
              bytes[index++] = 128 | code >> 12 & 63;
              bytes[index++] = 128 | code >> 6 & 63;
              bytes[index++] = 128 | code & 63;
            }
          }
          key = bytes;
        } else {
          if (type2 === "object") {
            if (key === null) {
              throw new Error(ERROR);
            } else if (ARRAY_BUFFER && key.constructor === ArrayBuffer) {
              key = new Uint8Array(key);
            } else if (!Array.isArray(key)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(key)) {
                throw new Error(ERROR);
              }
            }
          } else {
            throw new Error(ERROR);
          }
        }
        if (key.length > 64) {
          key = new Sha256(is2242, true).update(key).array();
        }
        var oKeyPad = [], iKeyPad = [];
        for (i = 0; i < 64; ++i) {
          var b = key[i] || 0;
          oKeyPad[i] = 92 ^ b;
          iKeyPad[i] = 54 ^ b;
        }
        Sha256.call(this, is2242, sharedMemory);
        this.update(iKeyPad);
        this.oKeyPad = oKeyPad;
        this.inner = true;
        this.sharedMemory = sharedMemory;
      }
      HmacSha256.prototype = new Sha256();
      HmacSha256.prototype.finalize = function() {
        Sha256.prototype.finalize.call(this);
        if (this.inner) {
          this.inner = false;
          var innerHash = this.array();
          Sha256.call(this, this.is224, this.sharedMemory);
          this.update(this.oKeyPad);
          this.update(innerHash);
          Sha256.prototype.finalize.call(this);
        }
      };
      var exports = createMethod();
      exports.sha256 = exports;
      exports.sha224 = createMethod(true);
      exports.sha256.hmac = createHmacMethod();
      exports.sha224.hmac = createHmacMethod(true);
      if (COMMON_JS) {
        module.exports = exports;
      } else {
        root.sha256 = exports.sha256;
        root.sha224 = exports.sha224;
        if (AMD) {
          define(function() {
            return exports;
          });
        }
      }
    })();
  }
});

// node_modules/base-x/src/cjs/index.cjs
var require_cjs4 = __commonJS({
  "node_modules/base-x/src/cjs/index.cjs"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function base(ALPHABET) {
      if (ALPHABET.length >= 255) {
        throw new TypeError("Alphabet too long");
      }
      const BASE_MAP = new Uint8Array(256);
      for (let j = 0; j < BASE_MAP.length; j++) {
        BASE_MAP[j] = 255;
      }
      for (let i = 0; i < ALPHABET.length; i++) {
        const x = ALPHABET.charAt(i);
        const xc = x.charCodeAt(0);
        if (BASE_MAP[xc] !== 255) {
          throw new TypeError(x + " is ambiguous");
        }
        BASE_MAP[xc] = i;
      }
      const BASE = ALPHABET.length;
      const LEADER = ALPHABET.charAt(0);
      const FACTOR = Math.log(BASE) / Math.log(256);
      const iFACTOR = Math.log(256) / Math.log(BASE);
      function encode2(source) {
        if (source instanceof Uint8Array) {
        } else if (ArrayBuffer.isView(source)) {
          source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
        } else if (Array.isArray(source)) {
          source = Uint8Array.from(source);
        }
        if (!(source instanceof Uint8Array)) {
          throw new TypeError("Expected Uint8Array");
        }
        if (source.length === 0) {
          return "";
        }
        let zeroes = 0;
        let length = 0;
        let pbegin = 0;
        const pend = source.length;
        while (pbegin !== pend && source[pbegin] === 0) {
          pbegin++;
          zeroes++;
        }
        const size = (pend - pbegin) * iFACTOR + 1 >>> 0;
        const b58 = new Uint8Array(size);
        while (pbegin !== pend) {
          let carry = source[pbegin];
          let i = 0;
          for (let it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {
            carry += 256 * b58[it1] >>> 0;
            b58[it1] = carry % BASE >>> 0;
            carry = carry / BASE >>> 0;
          }
          if (carry !== 0) {
            throw new Error("Non-zero carry");
          }
          length = i;
          pbegin++;
        }
        let it2 = size - length;
        while (it2 !== size && b58[it2] === 0) {
          it2++;
        }
        let str = LEADER.repeat(zeroes);
        for (; it2 < size; ++it2) {
          str += ALPHABET.charAt(b58[it2]);
        }
        return str;
      }
      function decodeUnsafe(source) {
        if (typeof source !== "string") {
          throw new TypeError("Expected String");
        }
        if (source.length === 0) {
          return new Uint8Array();
        }
        let psz = 0;
        let zeroes = 0;
        let length = 0;
        while (source[psz] === LEADER) {
          zeroes++;
          psz++;
        }
        const size = (source.length - psz) * FACTOR + 1 >>> 0;
        const b256 = new Uint8Array(size);
        while (psz < source.length) {
          const charCode = source.charCodeAt(psz);
          if (charCode > 255) {
            return;
          }
          let carry = BASE_MAP[charCode];
          if (carry === 255) {
            return;
          }
          let i = 0;
          for (let it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {
            carry += BASE * b256[it3] >>> 0;
            b256[it3] = carry % 256 >>> 0;
            carry = carry / 256 >>> 0;
          }
          if (carry !== 0) {
            throw new Error("Non-zero carry");
          }
          length = i;
          psz++;
        }
        let it4 = size - length;
        while (it4 !== size && b256[it4] === 0) {
          it4++;
        }
        const vch = new Uint8Array(zeroes + (size - it4));
        let j = zeroes;
        while (it4 !== size) {
          vch[j++] = b256[it4++];
        }
        return vch;
      }
      function decode2(string2) {
        const buffer = decodeUnsafe(string2);
        if (buffer) {
          return buffer;
        }
        throw new Error("Non-base" + BASE + " character");
      }
      return {
        encode: encode2,
        decodeUnsafe,
        decode: decode2
      };
    }
    exports2.default = base;
  }
});

// node_modules/bs58/src/cjs/index.cjs
var require_cjs5 = __commonJS({
  "node_modules/bs58/src/cjs/index.cjs"(exports2) {
    "use strict";
    var __importDefault2 = exports2 && exports2.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var base_x_1 = __importDefault2(require_cjs4());
    var ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
    exports2.default = (0, base_x_1.default)(ALPHABET);
  }
});

// node_modules/@mayanfinance/swap-sdk/dist/index.js
var require_dist3 = __commonJS({
  "node_modules/@mayanfinance/swap-sdk/dist/index.js"(exports2, module2) {
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod2, isNodeMode, target) => (target = mod2 != null ? __create(__getProtoOf(mod2)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod2 || !mod2.__esModule ? __defProp(target, "default", { value: mod2, enumerable: true }) : target,
      mod2
    ));
    var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var src_exports = {};
    __export2(src_exports, {
      MCTP_INIT_ORDER_PAYLOAD_ID: () => MCTP_INIT_ORDER_PAYLOAD_ID,
      MCTP_PAYLOAD_TYPE_CUSTOM_PAYLOAD: () => MCTP_PAYLOAD_TYPE_CUSTOM_PAYLOAD,
      MCTP_PAYLOAD_TYPE_DEFAULT: () => MCTP_PAYLOAD_TYPE_DEFAULT,
      ZeroPermit: () => ZeroPermit,
      addBridgeLockedFeeMoveCalls: () => addBridgeLockedFeeMoveCalls,
      addBridgeWithFeeMoveCalls: () => addBridgeWithFeeMoveCalls,
      addInitOrderMoveCalls: () => addInitOrderMoveCalls,
      addresses: () => addresses_default,
      assertArgumentIsImmutable: () => assertArgumentIsImmutable,
      broadcastJitoBundleId: () => broadcastJitoBundleId,
      checkSdkVersionSupport: () => checkSdkVersionSupport,
      confirmJitoBundleId: () => confirmJitoBundleId,
      createApproveInstruction: () => createApproveInstruction,
      createAssociatedTokenAccountInstruction: () => createAssociatedTokenAccountInstruction,
      createCloseAccountInstruction: () => createCloseAccountInstruction,
      createInitializeRandomTokenAccountInstructions: () => createInitializeRandomTokenAccountInstructions,
      createMctpFromSolanaInstructions: () => createMctpFromSolanaInstructions,
      createMctpFromSuiMoveCalls: () => createMctpFromSuiMoveCalls,
      createSplTransferInstruction: () => createSplTransferInstruction,
      createSwapFromSolanaInstructions: () => createSwapFromSolanaInstructions,
      createSwapFromSuiMoveCalls: () => createSwapFromSuiMoveCalls,
      createSwiftFromSolanaInstructions: () => createSwiftFromSolanaInstructions,
      createSwiftOrderHash: () => createSwiftOrderHash,
      createSyncNativeInstruction: () => createSyncNativeInstruction,
      createTransferAllAndCloseInstruction: () => createTransferAllAndCloseInstruction,
      decentralizeClientSwapInstructions: () => decentralizeClientSwapInstructions,
      decideRelayer: () => decideRelayer,
      deserializeInstructionInfo: () => deserializeInstructionInfo,
      estimateQuoteRequiredGas: () => estimateQuoteRequiredGas,
      estimateQuoteRequiredGasAprox: () => estimateQuoteRequiredGasAprox,
      fetchAllCoins: () => fetchAllCoins,
      fetchAllTokenList: () => fetchAllTokenList,
      fetchMayanSuiPackageId: () => fetchMayanSuiPackageId,
      fetchQuote: () => fetchQuote,
      fetchTokenList: () => fetchTokenList,
      generateFetchQuoteUrl: () => generateFetchQuoteUrl,
      getAddressLookupTableAccounts: () => getAddressLookupTableAccounts,
      getAmountOfFractionalAmount: () => getAmountOfFractionalAmount,
      getAnchorInstructionData: () => getAnchorInstructionData,
      getAssociatedTokenAddress: () => getAssociatedTokenAddress,
      getCurrentChainTime: () => getCurrentChainTime,
      getDisplayAmount: () => getDisplayAmount,
      getEvmChainIdByName: () => getEvmChainIdByName,
      getGasDecimal: () => getGasDecimal,
      getGasDecimalsInSolana: () => getGasDecimalsInSolana,
      getJitoTipTransfer: () => getJitoTipTransfer,
      getMctpFromEvmTxPayload: () => getMctpFromEvmTxPayload,
      getQuoteSuitableReferrerAddress: () => getQuoteSuitableReferrerAddress,
      getSafeU64Blob: () => getSafeU64Blob,
      getSdkVersion: () => getSdkVersion,
      getSuggestedRelayer: () => getSuggestedRelayer,
      getSwapFromEvmTxPayload: () => getSwapFromEvmTxPayload,
      getSwapSolana: () => getSwapSolana,
      getSwapSui: () => getSwapSui,
      getWormholeChainIdById: () => getWormholeChainIdById,
      getWormholeChainIdByName: () => getWormholeChainIdByName,
      hexToUint8Array: () => hexToUint8Array,
      isValidAptosType: () => isValidAptosType,
      nativeAddressToHexString: () => nativeAddressToHexString,
      sendJitoBundle: () => sendJitoBundle,
      solMint: () => solMint,
      submitSwiftEvmSwap: () => submitSwiftEvmSwap,
      submitSwiftSolanaSwap: () => submitSwiftSolanaSwap,
      submitTransactionWithRetry: () => submitTransactionWithRetry,
      swapFromEvm: () => swapFromEvm,
      swapFromSolana: () => swapFromSolana,
      unwrapSol: () => unwrapSol,
      validateJupSwap: () => validateJupSwap,
      wait: () => wait,
      wrapSol: () => wrapSol
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_cross_fetch = __toESM2(require_browser_ponyfill());
    var addresses_default = {
      "MAYAN_FORWARDER_CONTRACT": "0x337685fdaB40D39bd02028545a4FfA7D287cC3E2",
      "MAYAN_PROGRAM_ID": "FC4eXxkyrMPTjiYUpp4EAnkmwMbQyZ6NDCh1kfLn6vsf",
      "AUCTION_PROGRAM_ID": "8QJmxZcEzwuYmCPy6XqgN2sHcYCcFq6AEfBMJZZuLo5a",
      "MCTP_PROGRAM_ID": "dkpZqrxHFrhziEMQ931GLtfy11nFkCsfMftH9u6QwBU",
      "SWIFT_PROGRAM_ID": "BLZRi6frs4X4DNLw56V4EXai1b6QVESN1BhHBTYM9VcY",
      "FEE_MANAGER_PROGRAM_ID": "5VtQHnhs2pfVEr68qQsbTRwKh4JV5GTu9mBHgHFxpHeQ",
      "WORMHOLE_PROGRAM_ID": "worm2ZoG2kUd4vFXhvjh93UUH596ayRfgQ2MgjNMTth",
      "CCTP_CORE_PROGRAM_ID": "CCTPmbSD7gX1bxKPAmg77w8oFzNFpaQiQUWD43TKaecd",
      "CCTP_TOKEN_PROGRAM_ID": "CCTPiPYPc6AsJuwueEnWgSgucamXDZwBd53dQ11YiKX3",
      "TOKEN_PROGRAM_ID": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
      "TOKEN_2022_PROGRAM_ID": "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb",
      "ASSOCIATED_TOKEN_PROGRAM_ID": "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL",
      "SPL_UTILS_PROGRAM_ID": "B96dV3Luxzo6SokJx3xt8i5y8Mb7HRR6Eec8hCjJDT69",
      "LOOKUP_TABLE": "75X8YgJPcadksw6Ag3qsYUfi1bsFwDoCKYtqPPqdydAG",
      "SUI_MCTP_STATE": "0xb787fe0f7530b4fd2162fa0cc92f4f6c5a97c54b4c5c55eb04ab29f4b803ac9c",
      "SUI_MCTP_FEE_MANAGER_STATE": "0xa1b4a96ce93d36dd0bbce0adc39533a07d2f32928918c80cd6fe7868320978f2",
      "SUI_CCTP_CORE_PACKAGE_ID": "0x08d87d37ba49e785dde270a83f8e979605b03dc552b5548f26fdf2f49bf7ed1b",
      "SUI_CCTP_CORE_STATE": "0xf68268c3d9b1df3215f2439400c1c4ea08ac4ef4bb7d6f3ca6a2a239e17510af",
      "SUI_CCTP_TOKEN_PACKAGE_ID": "0x2aa6c5d56376c371f88a6cc42e852824994993cb9bab8d3e6450cbe3cb32b94e",
      "SUI_CCTP_TOKEN_STATE": "0x45993eecc0382f37419864992c12faee2238f5cfe22b98ad3bf455baf65c8a2f",
      "SUI_WORMHOLE_PACKAGE_ID": "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a",
      "SUI_WORMHOLE_STATE": "0xaeab97f96cf9877fee2883315d459552b2b921edc16d7ceac6eab944dd88919c",
      "SUI_LOGGER_PACKAGE_ID": "0x05680e9030c147b413a489f7891273acc221d49bd061c433e5771bc170fc37ac",
      "EXPLORER_URL": "https://explorer-api.mayan.finance/v3",
      "PRICE_URL": "https://price-api.mayan.finance/v3",
      "RELAYER_URL": "https://relayer-api.mayan.finance/v3"
    };
    var import_ethers = require_lib6();
    var import_web3 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var import_buffer3 = require_buffer2();
    var sha3 = __toESM2(require_sha33());
    var sha3_2562 = sha3.sha3_256;
    var isValidAptosType = (str) => /^(0x)?[0-9a-fA-F]+::\w+::\w+$/.test(str);
    function nativeAddressToHexString(address, wChainId) {
      if (wChainId === 1) {
        return (0, import_ethers.zeroPadValue)(new import_web3.PublicKey(address).toBytes(), 32);
      } else if (wChainId === chains.ethereum || wChainId === chains.bsc || wChainId === chains.polygon || wChainId === chains.avalanche || wChainId === chains.arbitrum || wChainId === chains.optimism || wChainId === chains.base || wChainId === chains.unichain) {
        return (0, import_ethers.zeroPadValue)(address, 32);
      } else if (wChainId === chains.aptos && isValidAptosType(address)) {
        return `0x${sha3_2562(address)}`;
      } else if (wChainId === chains.sui) {
        let addressStr = address.startsWith("0x") ? address.substring(2) : address;
        if (import_buffer3.Buffer.from(addressStr, "hex").length !== 32) {
          throw new Error("Invalid sui address: " + address);
        }
        return (0, import_ethers.zeroPadValue)(address, 32);
      } else {
        console.log(`Unsupported chain id: ${wChainId}`, address);
        throw new Error("Unsupported token chain");
      }
    }
    function hexToUint8Array(input) {
      return new Uint8Array(
        import_buffer3.Buffer.from(
          input.startsWith("0x") ? input.substring(2) : input,
          "hex"
        )
      );
    }
    function getAssociatedTokenAddress(mint, owner, allowOwnerOffCurve = false, programId = new import_web3.PublicKey(addresses_default.TOKEN_PROGRAM_ID), associatedTokenProgramId = new import_web3.PublicKey(addresses_default.ASSOCIATED_TOKEN_PROGRAM_ID)) {
      if (!allowOwnerOffCurve && !import_web3.PublicKey.isOnCurve(owner.toBuffer())) {
        throw new Error("TokenOwnerOffCurveError");
      }
      const [address] = import_web3.PublicKey.findProgramAddressSync(
        [owner.toBuffer(), programId.toBuffer(), mint.toBuffer()],
        associatedTokenProgramId
      );
      return address;
    }
    function getAmountOfFractionalAmount(amount, decimals) {
      if (amount === null || amount === void 0) {
        throw new Error("getAmountOfFractionalAmount: Amount is null or undefined");
      }
      if (typeof amount !== "string" && typeof amount !== "number") {
        throw new Error("getAmountOfFractionalAmount: Amount is not a string or number");
      }
      if (typeof amount === "string" && amount.length === 0) {
        throw new Error("getAmountOfFractionalAmount: Amount is empty");
      }
      if (!Number.isFinite(Number(amount))) {
        throw new Error("getAmountOfFractionalAmount: Amount is not a number");
      }
      const cutFactor = Math.min(8, Number(decimals));
      const numStr = Number(amount).toFixed(cutFactor + 1);
      const reg = new RegExp(`^-?\\d+(?:\\.\\d{0,${cutFactor}})?`);
      const matchResult = numStr.match(reg);
      if (!matchResult) {
        throw new Error("getAmountOfFractionalAmount: fixedAmount is null");
      }
      const fixedAmount = matchResult[0];
      return (0, import_ethers.parseUnits)(fixedAmount, Number(decimals));
    }
    function getDisplayAmount(inputAmount, decimals) {
      return Number((0, import_ethers.formatUnits)(inputAmount, decimals));
    }
    var chains = {
      solana: 1,
      ethereum: 2,
      bsc: 4,
      polygon: 5,
      avalanche: 6,
      arbitrum: 23,
      optimism: 24,
      base: 30,
      aptos: 22,
      sui: 21,
      unichain: 44
    };
    function getWormholeChainIdByName(chain) {
      return chains[chain];
    }
    var evmChainIdMap = {
      [1]: 2,
      [56]: 4,
      [137]: 5,
      [43114]: 6,
      [42161]: 23,
      [10]: 24,
      [8453]: 30,
      [130]: 44
    };
    function getEvmChainIdByName(chain) {
      const wormholeChainId = chains[chain];
      const evmIds = Object.keys(evmChainIdMap);
      for (const evmId of evmIds) {
        if (evmChainIdMap[evmId] === wormholeChainId) {
          return Number(evmId);
        }
      }
      throw new Error(`Unsupported chain: ${chain}`);
    }
    function getWormholeChainIdById(chainId) {
      return evmChainIdMap[chainId];
    }
    var sdkVersion = [10, 3, 0];
    function getSdkVersion() {
      return sdkVersion.join("_");
    }
    function checkSdkVersionSupport(minimumVersion) {
      if (sdkVersion[0] < minimumVersion[0]) {
        return false;
      }
      if (sdkVersion[0] > minimumVersion[0]) {
        return true;
      }
      if (sdkVersion[1] < minimumVersion[1]) {
        return false;
      }
      if (sdkVersion[1] > minimumVersion[1]) {
        return true;
      }
      if (sdkVersion[2] >= minimumVersion[2]) {
        return true;
      }
      return false;
    }
    function getGasDecimal(chain) {
      if (chain === "solana") {
        return 9;
      }
      return 18;
    }
    function getGasDecimalsInSolana(chain) {
      if (chain === "solana") {
        return 9;
      }
      return 8;
    }
    var MAX_U64 = BigInt(2) ** BigInt(64) - BigInt(1);
    function getSafeU64Blob(value) {
      if (value < BigInt(0) || value > MAX_U64) {
        throw new Error(`Invalid u64: ${value}`);
      }
      const buf = import_buffer3.Buffer.alloc(8);
      buf.writeBigUInt64LE(value);
      return buf;
    }
    var ZeroPermit = {
      value: BigInt(0),
      deadline: 0,
      v: 0,
      r: `0x${import_web3.SystemProgram.programId.toBuffer().toString("hex")}`,
      s: `0x${import_web3.SystemProgram.programId.toBuffer().toString("hex")}`
    };
    function wait(time) {
      return new Promise((resolve) => {
        setTimeout(() => {
          resolve();
        }, time);
      });
    }
    function getQuoteSuitableReferrerAddress(quote, referrerAddresses) {
      if (!quote || !referrerAddresses) {
        return null;
      }
      if (quote.type === "WH") {
        return (referrerAddresses == null ? void 0 : referrerAddresses.solana) || null;
      }
      if (quote.type === "MCTP" || quote.type === "SWIFT") {
        if (quote.toChain === "solana") {
          return (referrerAddresses == null ? void 0 : referrerAddresses.solana) || null;
        }
        if (quote.toChain === "sui") {
          return (referrerAddresses == null ? void 0 : referrerAddresses.sui) || null;
        }
        return (referrerAddresses == null ? void 0 : referrerAddresses.evm) || null;
      }
      return null;
    }
    var MCTP_PAYLOAD_TYPE_DEFAULT = 1;
    var MCTP_PAYLOAD_TYPE_CUSTOM_PAYLOAD = 2;
    var MCTP_INIT_ORDER_PAYLOAD_ID = 1;
    function toQueryString(params) {
      return Object.entries(params).filter(([_, value]) => value !== void 0 && value !== null && !Array.isArray(value)).map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`).join("&");
    }
    async function check5xxError(res) {
      if (res.status.toString().startsWith("5")) {
        let error;
        try {
          const err = await res.json();
          if (((err == null ? void 0 : err.code) || (err == null ? void 0 : err.statusCode)) && ((err == null ? void 0 : err.message) || (err == null ? void 0 : err.msg))) {
            error = {
              code: (err == null ? void 0 : err.code) || (err == null ? void 0 : err.statusCode),
              message: (err == null ? void 0 : err.message) || (err == null ? void 0 : err.msg)
            };
          }
        } catch (err) {
          error = new Error("Internal server error");
        }
        throw error;
      }
    }
    async function fetchAllTokenList(tokenStandards) {
      const query = tokenStandards ? `?standard=${tokenStandards.join(",")}` : "";
      const res = await (0, import_cross_fetch.default)(`${addresses_default.PRICE_URL}/tokens${query}`, {
        method: "GET",
        redirect: "follow"
      });
      await check5xxError(res);
      if (res.status === 200) {
        const result = await res.json();
        return result;
      }
      throw new Error("Cannot fetch Mayan tokens!");
    }
    async function fetchTokenList(chain, nonPortal = false, tokenStandards) {
      const queryParams = {
        chain,
        nonPortal,
        standard: tokenStandards ? tokenStandards == null ? void 0 : tokenStandards.join(",") : void 0
      };
      const res = await (0, import_cross_fetch.default)(`${addresses_default.PRICE_URL}/tokens?${toQueryString(queryParams)}`);
      await check5xxError(res);
      if (res.status === 200) {
        const result = await res.json();
        return result[chain];
      }
      throw new Error("Cannot fetch Mayan tokens!");
    }
    function generateFetchQuoteUrl(params, quoteOptions = {
      wormhole: true,
      swift: true,
      mctp: true,
      shuttle: true,
      gasless: false,
      onlyDirect: false
    }) {
      const { gasDrop, referrerBps } = params;
      let slippageBps = params.slippageBps;
      if (slippageBps !== "auto" && !Number.isFinite(slippageBps)) {
        slippageBps = params.slippage * 100;
      }
      const _quoteOptions = {
        wormhole: quoteOptions.wormhole !== false,
        // default to true
        swift: quoteOptions.swift !== false,
        // default to true
        mctp: quoteOptions.mctp !== false,
        // default to true
        shuttle: quoteOptions.shuttle === true,
        // default to false
        gasless: quoteOptions.gasless === true,
        // default to false
        onlyDirect: quoteOptions.onlyDirect === true
        // default to false
      };
      const queryParams = {
        ..._quoteOptions,
        solanaProgram: addresses_default.MAYAN_PROGRAM_ID,
        forwarderAddress: addresses_default.MAYAN_FORWARDER_CONTRACT,
        amountIn: !params.amountIn64 && Number.isFinite(params.amount) ? params.amount : void 0,
        amountIn64: params.amountIn64,
        fromToken: params.fromToken,
        fromChain: params.fromChain,
        toToken: params.toToken,
        toChain: params.toChain,
        slippageBps,
        referrer: params.referrer,
        referrerBps: Number.isFinite(referrerBps) ? referrerBps : void 0,
        gasDrop: Number.isFinite(gasDrop) ? gasDrop : void 0,
        sdkVersion: getSdkVersion()
      };
      const baseUrl = `${addresses_default.PRICE_URL}/quote?`;
      const queryString = toQueryString(queryParams);
      return baseUrl + queryString;
    }
    async function fetchQuote(params, quoteOptions = {
      swift: true,
      mctp: true,
      gasless: false,
      onlyDirect: false
    }) {
      const url = generateFetchQuoteUrl(params, quoteOptions);
      const res = await (0, import_cross_fetch.default)(url, {
        method: "GET",
        redirect: "follow"
      });
      await check5xxError(res);
      const result = await res.json();
      if (res.status !== 200 && res.status !== 201) {
        throw {
          code: (result == null ? void 0 : result.code) || 0,
          message: (result == null ? void 0 : result.msg) || (result == null ? void 0 : result.message) || "Route not found",
          data: result == null ? void 0 : result.data
        };
      }
      if (!checkSdkVersionSupport(result.minimumSdkVersion)) {
        throw {
          code: 9999,
          message: "Swap SDK is outdated!"
        };
      }
      return result.quotes;
    }
    async function getCurrentChainTime(chain) {
      const res = await (0, import_cross_fetch.default)(`${addresses_default.PRICE_URL}/clock/${chain}`, {
        method: "GET",
        redirect: "follow"
      });
      await check5xxError(res);
      const result = await res.json();
      if (res.status !== 200 && res.status !== 201) {
        throw result;
      }
      return result.clock;
    }
    async function getSuggestedRelayer() {
      const res = await (0, import_cross_fetch.default)(`${addresses_default.RELAYER_URL}/active-relayers?solanaProgram=${addresses_default.MAYAN_PROGRAM_ID}`, {
        method: "GET",
        redirect: "follow"
      });
      await check5xxError(res);
      const result = await res.json();
      if (res.status !== 200 && res.status !== 201) {
        throw result;
      }
      return result.suggested;
    }
    async function getSwapSolana(params) {
      const query = toQueryString({
        ...params,
        sdkVersion: getSdkVersion()
      });
      const res = await (0, import_cross_fetch.default)(`${addresses_default.PRICE_URL}/get-swap/solana?${query}`, {
        method: "GET",
        redirect: "follow"
      });
      await check5xxError(res);
      const result = await res.json();
      if (res.status !== 200 && res.status !== 201) {
        throw result;
      }
      return result;
    }
    async function getSwapSui(params) {
      const requestBody = JSON.stringify({
        ...params,
        sdkVersion: getSdkVersion()
      });
      const requestUrl = `${addresses_default.PRICE_URL}/get-swap/sui`;
      const res = await (0, import_cross_fetch.default)(requestUrl, {
        method: "POST",
        redirect: "follow",
        body: requestBody,
        headers: {
          "Content-Type": "application/json"
        }
      });
      await check5xxError(res);
      const result = await res.json();
      if (res.status !== 200 && res.status !== 201) {
        throw result;
      }
      return result;
    }
    async function submitSwiftEvmSwap(params, signature2) {
      const res = await (0, import_cross_fetch.default)(`${addresses_default.EXPLORER_URL}/submit/evm`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          ...params,
          signature: signature2
        }, (_key, value) => {
          if (typeof value === "bigint") {
            return value.toString();
          }
          return value;
        })
      });
      await check5xxError(res);
    }
    async function submitSwiftSolanaSwap(signedTx) {
      const res = await (0, import_cross_fetch.default)(`${addresses_default.EXPLORER_URL}/submit/solana`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          signedTx
        })
      });
      await check5xxError(res);
      const result = await res.json();
      if (res.status !== 200 && res.status !== 201) {
        throw result;
      }
      return result;
    }
    var import_ethers7 = require_lib6();
    var import_web310 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var MayanSwapArtifact_default = {
      "_format": "hh-sol-artifact-1",
      "contractName": "MayanSwap",
      "sourceName": "src/MayanSwap.sol",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_tokenBridge",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_weth",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "uint16",
              "name": "emitterChainId",
              "type": "uint16"
            },
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "emitterAddress",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "uint64",
              "name": "sequence",
              "type": "uint64"
            }
          ],
          "name": "Redeemed",
          "type": "event"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newGuardian",
              "type": "address"
            }
          ],
          "name": "changeGuardian",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "claimGuardian",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "payloadId",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "tokenAddr",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint16",
                  "name": "tokenChainId",
                  "type": "uint16"
                },
                {
                  "internalType": "bytes32",
                  "name": "destAddr",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint16",
                  "name": "destChainId",
                  "type": "uint16"
                },
                {
                  "internalType": "bytes32",
                  "name": "sourceAddr",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint16",
                  "name": "sourceChainId",
                  "type": "uint16"
                },
                {
                  "internalType": "uint64",
                  "name": "sequence",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "amountOutMin",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "deadline",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "swapFee",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "redeemFee",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "refundFee",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "auctionAddr",
                  "type": "bytes32"
                },
                {
                  "internalType": "bool",
                  "name": "unwrapRedeem",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "unwrapRefund",
                  "type": "bool"
                }
              ],
              "internalType": "struct MayanStructs.Swap",
              "name": "s",
              "type": "tuple"
            }
          ],
          "name": "encodeSwap",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "encoded",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getWeth",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "isPaused",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "encoded",
              "type": "bytes"
            }
          ],
          "name": "parseRedeemPayload",
          "outputs": [
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "payloadId",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "recipient",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "relayerFee",
                  "type": "uint64"
                },
                {
                  "internalType": "bool",
                  "name": "unwrap",
                  "type": "bool"
                },
                {
                  "internalType": "uint64",
                  "name": "gasDrop",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes",
                  "name": "customPayload",
                  "type": "bytes"
                }
              ],
              "internalType": "struct MayanStructs.Redeem",
              "name": "r",
              "type": "tuple"
            }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "encodedVm",
              "type": "bytes"
            }
          ],
          "name": "redeem",
          "outputs": [],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "encodedVm",
              "type": "bytes"
            }
          ],
          "name": "redeemAndUnwrap",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bool",
              "name": "_pause",
              "type": "bool"
            }
          ],
          "name": "setPause",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "swapFee",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "redeemFee",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "refundFee",
                  "type": "uint64"
                }
              ],
              "internalType": "struct MayanSwap.RelayerFees",
              "name": "relayerFees",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "mayanAddr",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint16",
                  "name": "mayanChainId",
                  "type": "uint16"
                },
                {
                  "internalType": "bytes32",
                  "name": "auctionAddr",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "destAddr",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint16",
                  "name": "destChainId",
                  "type": "uint16"
                },
                {
                  "internalType": "bytes32",
                  "name": "referrer",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "refundAddr",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct MayanSwap.Recepient",
              "name": "recipient",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "tokenOutAddr",
              "type": "bytes32"
            },
            {
              "internalType": "uint16",
              "name": "tokenOutChainId",
              "type": "uint16"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "transferDeadline",
                  "type": "uint256"
                },
                {
                  "internalType": "uint64",
                  "name": "swapDeadline",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "amountOutMin",
                  "type": "uint64"
                },
                {
                  "internalType": "bool",
                  "name": "unwrap",
                  "type": "bool"
                },
                {
                  "internalType": "uint64",
                  "name": "gasDrop",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes",
                  "name": "customPayload",
                  "type": "bytes"
                }
              ],
              "internalType": "struct MayanSwap.Criteria",
              "name": "criteria",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            }
          ],
          "name": "swap",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "sequence",
              "type": "uint64"
            }
          ],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            }
          ],
          "name": "sweepEth",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            }
          ],
          "name": "sweepToken",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "swapFee",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "redeemFee",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "refundFee",
                  "type": "uint64"
                }
              ],
              "internalType": "struct MayanSwap.RelayerFees",
              "name": "relayerFees",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "mayanAddr",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint16",
                  "name": "mayanChainId",
                  "type": "uint16"
                },
                {
                  "internalType": "bytes32",
                  "name": "auctionAddr",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "destAddr",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint16",
                  "name": "destChainId",
                  "type": "uint16"
                },
                {
                  "internalType": "bytes32",
                  "name": "referrer",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "refundAddr",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct MayanSwap.Recepient",
              "name": "recipient",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "tokenOutAddr",
              "type": "bytes32"
            },
            {
              "internalType": "uint16",
              "name": "tokenOutChainId",
              "type": "uint16"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "transferDeadline",
                  "type": "uint256"
                },
                {
                  "internalType": "uint64",
                  "name": "swapDeadline",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "amountOutMin",
                  "type": "uint64"
                },
                {
                  "internalType": "bool",
                  "name": "unwrap",
                  "type": "bool"
                },
                {
                  "internalType": "uint64",
                  "name": "gasDrop",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes",
                  "name": "customPayload",
                  "type": "bytes"
                }
              ],
              "internalType": "struct MayanSwap.Criteria",
              "name": "criteria",
              "type": "tuple"
            }
          ],
          "name": "wrapAndSwapETH",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "sequence",
              "type": "uint64"
            }
          ],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "stateMutability": "payable",
          "type": "receive"
        }
      ]
    };
    var MayanForwarderArtifact_default = {
      "_format": "hh-sol-artifact-1",
      "contractName": "MayanForwarder",
      "sourceName": "src/MayanForwarder.sol",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_guardian",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "_swapProtocols",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "_mayanProtocols",
              "type": "address[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "name": "UnsupportedProtocol",
          "type": "error"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "mayanProtocol",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "bytes",
              "name": "protocolData",
              "type": "bytes"
            }
          ],
          "name": "ForwardedERC20",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "mayanProtocol",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "bytes",
              "name": "protocolData",
              "type": "bytes"
            }
          ],
          "name": "ForwardedEth",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "SwapAndForwarded",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "swapProtocol",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "middleToken",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "middleAmount",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "mayanProtocol",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "bytes",
              "name": "mayanData",
              "type": "bytes"
            }
          ],
          "name": "SwapAndForwardedERC20",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "swapProtocol",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "middleToken",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "middleAmount",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "mayanProtocol",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "bytes",
              "name": "mayanData",
              "type": "bytes"
            }
          ],
          "name": "SwapAndForwardedEth",
          "type": "event"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newGuardian",
              "type": "address"
            }
          ],
          "name": "changeGuardian",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "claimGuardian",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct MayanForwarder.PermitParams",
              "name": "permitParams",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "mayanProtocol",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "protocolData",
              "type": "bytes"
            }
          ],
          "name": "forwardERC20",
          "outputs": [],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "mayanProtocol",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "protocolData",
              "type": "bytes"
            }
          ],
          "name": "forwardEth",
          "outputs": [],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "guardian",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "mayanProtocols",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "nextGuardian",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            }
          ],
          "name": "rescueEth",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            }
          ],
          "name": "rescueToken",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "mayanProtocol",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "enabled",
              "type": "bool"
            }
          ],
          "name": "setMayanProtocol",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "swapProtocol",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "enabled",
              "type": "bool"
            }
          ],
          "name": "setSwapProtocol",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct MayanForwarder.PermitParams",
              "name": "permitParams",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "swapProtocol",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "swapData",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "middleToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minMiddleAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "mayanProtocol",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "mayanData",
              "type": "bytes"
            }
          ],
          "name": "swapAndForwardERC20",
          "outputs": [],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "swapProtocol",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "swapData",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "middleToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minMiddleAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "mayanProtocol",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "mayanData",
              "type": "bytes"
            }
          ],
          "name": "swapAndForwardEth",
          "outputs": [],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "swapProtocols",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ],
      "linkReferences": {},
      "deployedLinkReferences": {}
    };
    var import_buffer10 = require_buffer2();
    var import_ethers2 = require_lib6();
    var import_web33 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var MayanCircleArtifact_default = {
      _format: "hh-sol-artifact-1",
      contractName: "MayanCircle",
      sourceName: "src/MayanCircle.sol",
      abi: [
        {
          inputs: [
            {
              internalType: "address",
              name: "_cctpTokenMessenger",
              type: "address"
            },
            {
              internalType: "address",
              name: "_wormhole",
              type: "address"
            },
            {
              internalType: "address",
              name: "_feeManager",
              type: "address"
            },
            {
              internalType: "uint16",
              name: "_auctionChainId",
              type: "uint16"
            },
            {
              internalType: "bytes32",
              name: "_auctionAddr",
              type: "bytes32"
            },
            {
              internalType: "uint8",
              name: "_consistencyLevel",
              type: "uint8"
            }
          ],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          inputs: [],
          name: "CallerAlreadySet",
          type: "error"
        },
        {
          inputs: [],
          name: "CallerNotSet",
          type: "error"
        },
        {
          inputs: [],
          name: "CctpReceiveFailed",
          type: "error"
        },
        {
          inputs: [],
          name: "DeadlineViolation",
          type: "error"
        },
        {
          inputs: [],
          name: "DomainAlreadySet",
          type: "error"
        },
        {
          inputs: [],
          name: "DomainNotSet",
          type: "error"
        },
        {
          inputs: [],
          name: "EmitterAlreadySet",
          type: "error"
        },
        {
          inputs: [],
          name: "EthTransferFailed",
          type: "error"
        },
        {
          inputs: [],
          name: "InvalidAction",
          type: "error"
        },
        {
          inputs: [],
          name: "InvalidAddress",
          type: "error"
        },
        {
          inputs: [],
          name: "InvalidAmountOut",
          type: "error"
        },
        {
          inputs: [],
          name: "InvalidCaller",
          type: "error"
        },
        {
          inputs: [],
          name: "InvalidDestAddr",
          type: "error"
        },
        {
          inputs: [],
          name: "InvalidDomain",
          type: "error"
        },
        {
          inputs: [],
          name: "InvalidEmitter",
          type: "error"
        },
        {
          inputs: [],
          name: "InvalidGasDrop",
          type: "error"
        },
        {
          inputs: [],
          name: "InvalidMintRecipient",
          type: "error"
        },
        {
          inputs: [],
          name: "InvalidNonce",
          type: "error"
        },
        {
          inputs: [],
          name: "InvalidOrder",
          type: "error"
        },
        {
          inputs: [],
          name: "InvalidPayload",
          type: "error"
        },
        {
          inputs: [],
          name: "InvalidProtocolFee",
          type: "error"
        },
        {
          inputs: [],
          name: "InvalidRedeemFee",
          type: "error"
        },
        {
          inputs: [],
          name: "InvalidReferrerFee",
          type: "error"
        },
        {
          inputs: [],
          name: "MintRecipientAlreadySet",
          type: "error"
        },
        {
          inputs: [],
          name: "MintRecipientNotSet",
          type: "error"
        },
        {
          inputs: [],
          name: "Paused",
          type: "error"
        },
        {
          inputs: [],
          name: "Unauthorized",
          type: "error"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint32",
              name: "sourceDomain",
              type: "uint32"
            },
            {
              indexed: false,
              internalType: "uint64",
              name: "sourceNonce",
              type: "uint64"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "amount",
              type: "uint256"
            }
          ],
          name: "OrderFulfilled",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint32",
              name: "sourceDomain",
              type: "uint32"
            },
            {
              indexed: false,
              internalType: "uint64",
              name: "sourceNonce",
              type: "uint64"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "amount",
              type: "uint256"
            }
          ],
          name: "OrderRefunded",
          type: "event"
        },
        {
          inputs: [],
          name: "auctionAddr",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "auctionChainId",
          outputs: [
            {
              internalType: "uint16",
              name: "",
              type: "uint16"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "tokenIn",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "amountIn",
              type: "uint256"
            },
            {
              internalType: "uint64",
              name: "redeemFee",
              type: "uint64"
            },
            {
              internalType: "uint64",
              name: "gasDrop",
              type: "uint64"
            },
            {
              internalType: "bytes32",
              name: "destAddr",
              type: "bytes32"
            },
            {
              internalType: "uint32",
              name: "destDomain",
              type: "uint32"
            },
            {
              internalType: "uint8",
              name: "payloadType",
              type: "uint8"
            },
            {
              internalType: "bytes",
              name: "customPayload",
              type: "bytes"
            }
          ],
          name: "bridgeWithFee",
          outputs: [
            {
              internalType: "uint64",
              name: "sequence",
              type: "uint64"
            }
          ],
          stateMutability: "payable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "tokenIn",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "amountIn",
              type: "uint256"
            },
            {
              internalType: "uint64",
              name: "gasDrop",
              type: "uint64"
            },
            {
              internalType: "uint256",
              name: "redeemFee",
              type: "uint256"
            },
            {
              internalType: "uint32",
              name: "destDomain",
              type: "uint32"
            },
            {
              internalType: "bytes32",
              name: "destAddr",
              type: "bytes32"
            }
          ],
          name: "bridgeWithLockedFee",
          outputs: [
            {
              internalType: "uint64",
              name: "cctpNonce",
              type: "uint64"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "cctpTokenMessenger",
          outputs: [
            {
              internalType: "contract ITokenMessenger",
              name: "",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint16",
              name: "",
              type: "uint16"
            }
          ],
          name: "chainIdToEmitter",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "newGuardian",
              type: "address"
            }
          ],
          name: "changeGuardian",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "claimGuardian",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "consistencyLevel",
          outputs: [
            {
              internalType: "uint8",
              name: "",
              type: "uint8"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              components: [
                {
                  internalType: "address",
                  name: "tokenIn",
                  type: "address"
                },
                {
                  internalType: "uint256",
                  name: "amountIn",
                  type: "uint256"
                },
                {
                  internalType: "uint64",
                  name: "gasDrop",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "destAddr",
                  type: "bytes32"
                },
                {
                  internalType: "uint16",
                  name: "destChain",
                  type: "uint16"
                },
                {
                  internalType: "bytes32",
                  name: "tokenOut",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "minAmountOut",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "deadline",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "redeemFee",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "referrerAddr",
                  type: "bytes32"
                },
                {
                  internalType: "uint8",
                  name: "referrerBps",
                  type: "uint8"
                }
              ],
              internalType: "struct MayanCircle.OrderParams",
              name: "params",
              type: "tuple"
            }
          ],
          name: "createOrder",
          outputs: [
            {
              internalType: "uint64",
              name: "sequence",
              type: "uint64"
            }
          ],
          stateMutability: "payable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint32",
              name: "",
              type: "uint32"
            }
          ],
          name: "domainToCaller",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "feeManager",
          outputs: [
            {
              internalType: "contract IFeeManager",
              name: "",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint64",
              name: "",
              type: "uint64"
            }
          ],
          name: "feeStorage",
          outputs: [
            {
              internalType: "bytes32",
              name: "destAddr",
              type: "bytes32"
            },
            {
              internalType: "uint64",
              name: "gasDrop",
              type: "uint64"
            },
            {
              internalType: "address",
              name: "token",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "redeemFee",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "cctpMsg",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "cctpSigs",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "encodedVm",
              type: "bytes"
            },
            {
              components: [
                {
                  internalType: "bytes32",
                  name: "destAddr",
                  type: "bytes32"
                },
                {
                  internalType: "uint16",
                  name: "destChainId",
                  type: "uint16"
                },
                {
                  internalType: "bytes32",
                  name: "tokenOut",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "promisedAmount",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "gasDrop",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "redeemFee",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "deadline",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "referrerAddr",
                  type: "bytes32"
                },
                {
                  internalType: "uint8",
                  name: "referrerBps",
                  type: "uint8"
                },
                {
                  internalType: "uint8",
                  name: "protocolBps",
                  type: "uint8"
                },
                {
                  internalType: "bytes32",
                  name: "driver",
                  type: "bytes32"
                }
              ],
              internalType: "struct MayanCircle.FulfillParams",
              name: "params",
              type: "tuple"
            },
            {
              internalType: "address",
              name: "swapProtocol",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "swapData",
              type: "bytes"
            }
          ],
          name: "fulfillOrder",
          outputs: [],
          stateMutability: "payable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint16",
              name: "chainId",
              type: "uint16"
            }
          ],
          name: "getDomain",
          outputs: [
            {
              internalType: "uint32",
              name: "domain",
              type: "uint32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "guardian",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "isPaused",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          name: "keyToMintRecipient",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "localDomain",
          outputs: [
            {
              internalType: "uint32",
              name: "",
              type: "uint32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "paused",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "cctpMsg",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "cctpSigs",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "encodedVm",
              type: "bytes"
            },
            {
              components: [
                {
                  internalType: "uint8",
                  name: "payloadType",
                  type: "uint8"
                },
                {
                  internalType: "bytes32",
                  name: "destAddr",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "gasDrop",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "redeemFee",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "burnAmount",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "burnToken",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "customPayload",
                  type: "bytes32"
                }
              ],
              internalType: "struct MayanCircle.BridgeWithFeeParams",
              name: "bridgeParams",
              type: "tuple"
            }
          ],
          name: "redeemWithFee",
          outputs: [],
          stateMutability: "payable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "cctpMsg",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "cctpSigs",
              type: "bytes"
            },
            {
              internalType: "bytes32",
              name: "unlockerAddr",
              type: "bytes32"
            }
          ],
          name: "redeemWithLockedFee",
          outputs: [
            {
              internalType: "uint64",
              name: "sequence",
              type: "uint64"
            }
          ],
          stateMutability: "payable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint32",
              name: "cctpNonce",
              type: "uint32"
            },
            {
              internalType: "uint32",
              name: "cctpDomain",
              type: "uint32"
            },
            {
              internalType: "bytes32",
              name: "destAddr",
              type: "bytes32"
            },
            {
              internalType: "bytes32",
              name: "unlockerAddr",
              type: "bytes32"
            }
          ],
          name: "refineFee",
          outputs: [
            {
              internalType: "uint64",
              name: "sequence",
              type: "uint64"
            }
          ],
          stateMutability: "payable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "encodedVm",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "cctpMsg",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "cctpSigs",
              type: "bytes"
            },
            {
              components: [
                {
                  internalType: "address",
                  name: "tokenIn",
                  type: "address"
                },
                {
                  internalType: "uint256",
                  name: "amountIn",
                  type: "uint256"
                },
                {
                  internalType: "uint64",
                  name: "gasDrop",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "destAddr",
                  type: "bytes32"
                },
                {
                  internalType: "uint16",
                  name: "destChain",
                  type: "uint16"
                },
                {
                  internalType: "bytes32",
                  name: "tokenOut",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "minAmountOut",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "deadline",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "redeemFee",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "referrerAddr",
                  type: "bytes32"
                },
                {
                  internalType: "uint8",
                  name: "referrerBps",
                  type: "uint8"
                }
              ],
              internalType: "struct MayanCircle.OrderParams",
              name: "orderParams",
              type: "tuple"
            },
            {
              components: [
                {
                  internalType: "bytes32",
                  name: "trader",
                  type: "bytes32"
                },
                {
                  internalType: "uint16",
                  name: "sourceChainId",
                  type: "uint16"
                },
                {
                  internalType: "uint8",
                  name: "protocolBps",
                  type: "uint8"
                }
              ],
              internalType: "struct MayanCircle.ExtraParams",
              name: "extraParams",
              type: "tuple"
            }
          ],
          name: "refund",
          outputs: [],
          stateMutability: "payable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256"
            },
            {
              internalType: "address payable",
              name: "to",
              type: "address"
            }
          ],
          name: "rescueEth",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "token",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "to",
              type: "address"
            }
          ],
          name: "rescueToken",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint8",
              name: "_consistencyLevel",
              type: "uint8"
            }
          ],
          name: "setConsistencyLevel",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint16",
              name: "chainId",
              type: "uint16"
            },
            {
              internalType: "uint32",
              name: "domain",
              type: "uint32"
            }
          ],
          name: "setDomain",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint32",
              name: "domain",
              type: "uint32"
            },
            {
              internalType: "bytes32",
              name: "caller",
              type: "bytes32"
            }
          ],
          name: "setDomainCaller",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint16",
              name: "chainId",
              type: "uint16"
            },
            {
              internalType: "bytes32",
              name: "emitter",
              type: "bytes32"
            }
          ],
          name: "setEmitter",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_feeManager",
              type: "address"
            }
          ],
          name: "setFeeManager",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint32",
              name: "destDomain",
              type: "uint32"
            },
            {
              internalType: "address",
              name: "tokenIn",
              type: "address"
            },
            {
              internalType: "bytes32",
              name: "mintRecipient",
              type: "bytes32"
            }
          ],
          name: "setMintRecipient",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bool",
              name: "_pause",
              type: "bool"
            }
          ],
          name: "setPause",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "encodedVm",
              type: "bytes"
            },
            {
              components: [
                {
                  internalType: "uint8",
                  name: "action",
                  type: "uint8"
                },
                {
                  internalType: "uint8",
                  name: "payloadType",
                  type: "uint8"
                },
                {
                  internalType: "uint64",
                  name: "cctpNonce",
                  type: "uint64"
                },
                {
                  internalType: "uint32",
                  name: "cctpDomain",
                  type: "uint32"
                },
                {
                  internalType: "bytes32",
                  name: "unlockerAddr",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "gasDrop",
                  type: "uint64"
                }
              ],
              internalType: "struct MayanCircle.UnlockFeeMsg",
              name: "unlockMsg",
              type: "tuple"
            }
          ],
          name: "unlockFee",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "encodedVm1",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "encodedVm2",
              type: "bytes"
            },
            {
              components: [
                {
                  internalType: "uint8",
                  name: "action",
                  type: "uint8"
                },
                {
                  internalType: "uint8",
                  name: "payloadType",
                  type: "uint8"
                },
                {
                  internalType: "uint64",
                  name: "cctpNonce",
                  type: "uint64"
                },
                {
                  internalType: "uint32",
                  name: "cctpDomain",
                  type: "uint32"
                },
                {
                  internalType: "bytes32",
                  name: "unlockerAddr",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "gasDrop",
                  type: "uint64"
                }
              ],
              internalType: "struct MayanCircle.UnlockFeeMsg",
              name: "unlockMsg",
              type: "tuple"
            },
            {
              components: [
                {
                  internalType: "uint8",
                  name: "action",
                  type: "uint8"
                },
                {
                  internalType: "uint8",
                  name: "payloadType",
                  type: "uint8"
                },
                {
                  internalType: "uint64",
                  name: "cctpNonce",
                  type: "uint64"
                },
                {
                  internalType: "uint32",
                  name: "cctpDomain",
                  type: "uint32"
                },
                {
                  internalType: "bytes32",
                  name: "unlockerAddr",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "gasDrop",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "destAddr",
                  type: "bytes32"
                }
              ],
              internalType: "struct MayanCircle.UnlockRefinedFeeMsg",
              name: "refinedMsg",
              type: "tuple"
            }
          ],
          name: "unlockFeeRefined",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "wormhole",
          outputs: [
            {
              internalType: "contract IWormhole",
              name: "",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          stateMutability: "payable",
          type: "receive"
        }
      ],
      linkReferences: {},
      deployedLinkReferences: {}
    };
    var import_buffer32 = require_buffer2();
    var import_web32 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var import_buffer22 = require_buffer2();
    var CCTP_TOKEN_DECIMALS = 6;
    function getCCTPDomain(chain) {
      switch (chain) {
        case "ethereum":
          return 0;
        case "avalanche":
          return 1;
        case "optimism":
          return 2;
        case "arbitrum":
          return 3;
        case "solana":
          return 5;
        case "base":
          return 6;
        case "polygon":
          return 7;
        case "sui":
          return 8;
        case "unichain":
          return 10;
        default:
          throw new Error("unsupported chain for cctp");
      }
    }
    function getCCTPBridgePDAs(mint, destinationChain) {
      const cctpCoreProgramId = new import_web32.PublicKey(addresses_default.CCTP_CORE_PROGRAM_ID);
      const cctpTokenProgramId = new import_web32.PublicKey(addresses_default.CCTP_TOKEN_PROGRAM_ID);
      const [messageTransmitter] = import_web32.PublicKey.findProgramAddressSync(
        [import_buffer22.Buffer.from("message_transmitter")],
        cctpCoreProgramId
      );
      const [senderAuthority] = import_web32.PublicKey.findProgramAddressSync(
        [import_buffer22.Buffer.from("sender_authority")],
        cctpTokenProgramId
      );
      const [localToken] = import_web32.PublicKey.findProgramAddressSync(
        [import_buffer22.Buffer.from("local_token"), mint.toBytes()],
        cctpTokenProgramId
      );
      const [tokenMessenger] = import_web32.PublicKey.findProgramAddressSync(
        [import_buffer22.Buffer.from("token_messenger")],
        cctpTokenProgramId
      );
      const [tokenMinter] = import_web32.PublicKey.findProgramAddressSync(
        [import_buffer22.Buffer.from("token_minter")],
        cctpTokenProgramId
      );
      const destinationDomain = getCCTPDomain(destinationChain);
      const [remoteTokenMessengerKey] = import_web32.PublicKey.findProgramAddressSync(
        [import_buffer22.Buffer.from("remote_token_messenger"), import_buffer22.Buffer.from(destinationDomain.toString())],
        cctpTokenProgramId
      );
      const [eventAuthCore] = import_web32.PublicKey.findProgramAddressSync(
        [import_buffer22.Buffer.from("__event_authority")],
        cctpCoreProgramId
      );
      const [eventAuthToken] = import_web32.PublicKey.findProgramAddressSync(
        [import_buffer22.Buffer.from("__event_authority")],
        cctpTokenProgramId
      );
      return {
        messageTransmitter,
        senderAuthority,
        remoteTokenMessengerKey,
        tokenMessenger,
        tokenMinter,
        eventAuthToken,
        eventAuthCore,
        localToken
      };
    }
    function getEvmMctpBridgeParams(quote, destinationAddress, signerChainId, customPayload) {
      const signerWormholeChainId = getWormholeChainIdById(Number(signerChainId));
      const sourceChainId = getWormholeChainIdByName(quote.fromChain);
      const destChainId = getWormholeChainIdByName(quote.toChain);
      if (sourceChainId !== signerWormholeChainId) {
        throw new Error(`Signer chain id(${Number(signerChainId)}) and quote from chain are not same! ${sourceChainId} !== ${signerWormholeChainId}`);
      }
      const lockFee = quote.cheaperChain === quote.fromChain;
      if (lockFee && !!customPayload) {
        throw new Error("Bridge lock fee cannot have custom payload");
      }
      const destinationAddressHex = nativeAddressToHexString(destinationAddress, destChainId);
      const redeemFee = getAmountOfFractionalAmount(quote.redeemRelayerFee, CCTP_TOKEN_DECIMALS);
      const gasDrop = getAmountOfFractionalAmount(quote.gasDrop, Math.min(getGasDecimal(quote.toChain), 8));
      const amountIn = BigInt(quote.effectiveAmountIn64);
      const destDomain = getCCTPDomain(quote.toChain);
      if (!quote.mctpMayanContract) {
        throw new Error("MCTP contract address is missing");
      }
      const contractAddress = quote.mctpMayanContract;
      if (quote.toChain === "solana" && lockFee) {
        throw new Error("Cannot lock fee for transfer to solana");
      }
      let bridgeFee = getAmountOfFractionalAmount(
        quote.bridgeFee,
        getGasDecimal(quote.fromChain)
      );
      if (lockFee) {
        bridgeFee = BigInt(0);
      }
      return {
        lockFee,
        tokenIn: quote.mctpInputContract,
        amountIn,
        redeemFee,
        gasDrop,
        destAddr: destinationAddressHex,
        destDomain,
        payloadType: customPayload ? MCTP_PAYLOAD_TYPE_CUSTOM_PAYLOAD : MCTP_PAYLOAD_TYPE_DEFAULT,
        customPayload: customPayload ? `0x${import_buffer32.Buffer.from(customPayload).toString("hex")}` : "0x",
        bridgeFee,
        contractAddress
      };
    }
    function getEvmMctpBridgeTxPayload(quote, destinationAddress, signerChainId, payload) {
      const params = getEvmMctpBridgeParams(
        quote,
        destinationAddress,
        signerChainId,
        payload
      );
      const {
        contractAddress,
        tokenIn,
        amountIn,
        destAddr,
        lockFee,
        redeemFee,
        gasDrop,
        destDomain,
        customPayload,
        payloadType,
        bridgeFee
      } = params;
      const mctpContract = new import_ethers2.Contract(contractAddress, MayanCircleArtifact_default.abi);
      let data;
      let value;
      if (lockFee) {
        data = mctpContract.interface.encodeFunctionData(
          "bridgeWithLockedFee",
          [tokenIn, amountIn, gasDrop, redeemFee, destDomain, destAddr]
        );
      } else {
        data = mctpContract.interface.encodeFunctionData(
          "bridgeWithFee",
          [tokenIn, amountIn, redeemFee, gasDrop, destAddr, destDomain, payloadType, customPayload]
        );
      }
      value = (0, import_ethers2.toBeHex)(bridgeFee);
      return {
        to: contractAddress,
        data,
        value,
        _params: params
      };
    }
    function getEvmMctpCreateOrderParams(quote, destinationAddress, referrerAddress, signerChainId) {
      const signerWormholeChainId = getWormholeChainIdById(Number(signerChainId));
      const sourceChainId = getWormholeChainIdByName(quote.fromChain);
      const destChainId = getWormholeChainIdByName(quote.toChain);
      if (sourceChainId !== signerWormholeChainId) {
        throw new Error(`Signer chain id(${Number(signerChainId)}) and quote from chain are not same! ${sourceChainId} !== ${signerWormholeChainId}`);
      }
      if (!quote.mctpMayanContract) {
        throw new Error("MCTP contract address is missing");
      }
      const contractAddress = quote.mctpMayanContract;
      const destinationAddressHex = nativeAddressToHexString(destinationAddress, destChainId);
      let referrerHex;
      if (referrerAddress) {
        referrerHex = nativeAddressToHexString(
          referrerAddress,
          destChainId
        );
      } else {
        referrerHex = nativeAddressToHexString(
          import_web33.SystemProgram.programId.toString(),
          getWormholeChainIdByName("solana")
        );
      }
      const redeemFee = getAmountOfFractionalAmount(quote.redeemRelayerFee, CCTP_TOKEN_DECIMALS);
      const gasDrop = getAmountOfFractionalAmount(quote.gasDrop, Math.min(getGasDecimal(quote.toChain), 8));
      let amountIn = BigInt(quote.effectiveAmountIn64);
      const minAmountOut = getAmountOfFractionalAmount(
        quote.minAmountOut,
        Math.min(8, quote.toToken.decimals)
      );
      const deadline = BigInt(quote.deadline64);
      const tokenOut = quote.toToken.contract === import_ethers2.ZeroAddress ? nativeAddressToHexString(import_web33.SystemProgram.programId.toString(), getWormholeChainIdByName("solana")) : nativeAddressToHexString(
        quote.toChain === "sui" ? quote.toToken.verifiedAddress : quote.toToken.contract,
        quote.toToken.wChainId
      );
      return {
        params: {
          tokenIn: quote.mctpInputContract,
          amountIn,
          gasDrop,
          destAddr: destinationAddressHex,
          destChain: destChainId,
          tokenOut,
          minAmountOut,
          deadline,
          redeemFee,
          referrerAddr: referrerHex,
          referrerBps: quote.referrerBps || 0
        },
        bridgeFee: getAmountOfFractionalAmount(quote.bridgeFee, getGasDecimal(quote.fromChain)),
        contractAddress
      };
    }
    function getEvmMctpCreateOrderTxPayload(quote, destinationAddress, referrerAddress, signerChainId) {
      const orderParams = getEvmMctpCreateOrderParams(
        quote,
        destinationAddress,
        referrerAddress,
        signerChainId
      );
      const {
        contractAddress,
        params,
        bridgeFee
      } = orderParams;
      const mctpContract = new import_ethers2.Contract(contractAddress, MayanCircleArtifact_default.abi);
      const data = mctpContract.interface.encodeFunctionData(
        "createOrder",
        [params]
      );
      const value = (0, import_ethers2.toBeHex)(bridgeFee);
      return {
        to: contractAddress,
        data,
        value,
        _params: orderParams
      };
    }
    function getMctpFromEvmTxPayload(quote, destinationAddress, referrerAddress, signerChainId, permit, payload) {
      if (quote.type !== "MCTP") {
        throw new Error("Quote type is not MCTP");
      }
      if (!Number.isFinite(Number(signerChainId))) {
        throw new Error("Invalid signer chain id");
      }
      signerChainId = Number(signerChainId);
      const _permit = permit || ZeroPermit;
      const forwarder = new import_ethers2.Contract(addresses_default.MAYAN_FORWARDER_CONTRACT, MayanForwarderArtifact_default.abi);
      const bridgeFee = getAmountOfFractionalAmount(
        quote.bridgeFee,
        getGasDecimal(quote.fromChain)
      );
      let value = (0, import_ethers2.toBeHex)(bridgeFee);
      if (quote.fromToken.contract === quote.mctpInputContract) {
        if (quote.hasAuction) {
          if (!Number(quote.deadline64)) {
            throw new Error("MCTP order requires timeout");
          }
          const mctpPayloadIx = getEvmMctpCreateOrderTxPayload(
            quote,
            destinationAddress,
            referrerAddress,
            signerChainId
          );
          const forwarderMethod = "forwardERC20";
          const forwarderParams = [
            quote.fromToken.contract,
            mctpPayloadIx._params.params.amountIn,
            _permit,
            mctpPayloadIx._params.contractAddress,
            mctpPayloadIx.data
          ];
          const data = forwarder.interface.encodeFunctionData(forwarderMethod, forwarderParams);
          return {
            data,
            to: addresses_default.MAYAN_FORWARDER_CONTRACT,
            value: (0, import_ethers2.toBeHex)(value),
            chainId: signerChainId,
            _forwarder: {
              method: forwarderMethod,
              params: forwarderParams
            }
          };
        } else {
          const mctpPayloadIx = getEvmMctpBridgeTxPayload(
            quote,
            destinationAddress,
            signerChainId,
            payload
          );
          const forwarderMethod = "forwardERC20";
          const forwarderParams = [
            quote.fromToken.contract,
            mctpPayloadIx._params.amountIn,
            _permit,
            mctpPayloadIx._params.contractAddress,
            mctpPayloadIx.data
          ];
          const data = forwarder.interface.encodeFunctionData(forwarderMethod, forwarderParams);
          return {
            data,
            to: addresses_default.MAYAN_FORWARDER_CONTRACT,
            value: (0, import_ethers2.toBeHex)(value),
            chainId: signerChainId,
            _forwarder: {
              method: forwarderMethod,
              params: forwarderParams
            }
          };
        }
      } else {
        const { minMiddleAmount, evmSwapRouterAddress, evmSwapRouterCalldata } = quote;
        if (!minMiddleAmount || !evmSwapRouterAddress || !evmSwapRouterCalldata) {
          throw new Error("MCTP swap requires middle amount, router address and calldata");
        }
        if (quote.hasAuction) {
          if (!Number(quote.deadline64)) {
            throw new Error("MCTP order requires timeout");
          }
          const mctpPayloadIx = getEvmMctpCreateOrderTxPayload(
            quote,
            destinationAddress,
            referrerAddress,
            signerChainId
          );
          const minMiddleAmount2 = getAmountOfFractionalAmount(quote.minMiddleAmount, CCTP_TOKEN_DECIMALS);
          if (quote.fromToken.contract === import_ethers2.ZeroAddress) {
            let amountIn = mctpPayloadIx._params.params.amountIn;
            if (amountIn <= bridgeFee) {
              throw new Error("Amount in is less than bridge fee");
            }
            if (bridgeFee !== BigInt(0)) {
              amountIn -= bridgeFee;
            }
            value = (0, import_ethers2.toBeHex)(mctpPayloadIx._params.params.amountIn);
            const forwarderMethod = "swapAndForwardEth";
            const forwarderParams = [
              amountIn,
              evmSwapRouterAddress,
              evmSwapRouterCalldata,
              quote.mctpInputContract,
              minMiddleAmount2,
              mctpPayloadIx._params.contractAddress,
              mctpPayloadIx.data
            ];
            const data = forwarder.interface.encodeFunctionData(forwarderMethod, forwarderParams);
            return {
              data,
              to: addresses_default.MAYAN_FORWARDER_CONTRACT,
              value: (0, import_ethers2.toBeHex)(value),
              chainId: signerChainId,
              _forwarder: {
                method: forwarderMethod,
                params: forwarderParams
              }
            };
          } else {
            const forwarderMethod = "swapAndForwardERC20";
            const forwarderParams = [
              quote.fromToken.contract,
              mctpPayloadIx._params.params.amountIn,
              _permit,
              evmSwapRouterAddress,
              evmSwapRouterCalldata,
              quote.mctpInputContract,
              minMiddleAmount2,
              mctpPayloadIx._params.contractAddress,
              mctpPayloadIx.data
            ];
            const data = forwarder.interface.encodeFunctionData(forwarderMethod, forwarderParams);
            return {
              data,
              to: addresses_default.MAYAN_FORWARDER_CONTRACT,
              value: (0, import_ethers2.toBeHex)(value),
              chainId: signerChainId,
              _forwarder: {
                method: forwarderMethod,
                params: forwarderParams
              }
            };
          }
        } else {
          const mctpPayloadIx = getEvmMctpBridgeTxPayload(
            quote,
            destinationAddress,
            signerChainId,
            payload
          );
          const minMiddleAmount2 = getAmountOfFractionalAmount(quote.minMiddleAmount, CCTP_TOKEN_DECIMALS);
          if (quote.fromToken.contract === import_ethers2.ZeroAddress) {
            let amountIn = mctpPayloadIx._params.amountIn;
            if (amountIn <= bridgeFee) {
              throw new Error("Amount in is less than bridge fee");
            }
            if (bridgeFee !== BigInt(0)) {
              amountIn -= bridgeFee;
            }
            value = (0, import_ethers2.toBeHex)(mctpPayloadIx._params.amountIn);
            const forwarderMethod = "swapAndForwardEth";
            const forwarderParams = [
              amountIn,
              evmSwapRouterAddress,
              evmSwapRouterCalldata,
              quote.mctpInputContract,
              minMiddleAmount2,
              mctpPayloadIx._params.contractAddress,
              mctpPayloadIx.data
            ];
            const data = forwarder.interface.encodeFunctionData(forwarderMethod, forwarderParams);
            return {
              data,
              to: addresses_default.MAYAN_FORWARDER_CONTRACT,
              value: (0, import_ethers2.toBeHex)(value),
              chainId: signerChainId,
              _forwarder: {
                method: forwarderMethod,
                params: forwarderParams
              }
            };
          } else {
            const forwarderMethod = "swapAndForwardERC20";
            const forwarderParams = [
              quote.fromToken.contract,
              mctpPayloadIx._params.amountIn,
              _permit,
              evmSwapRouterAddress,
              evmSwapRouterCalldata,
              quote.mctpInputContract,
              minMiddleAmount2,
              mctpPayloadIx._params.contractAddress,
              mctpPayloadIx.data
            ];
            const data = forwarder.interface.encodeFunctionData(forwarderMethod, forwarderParams);
            return {
              data,
              to: addresses_default.MAYAN_FORWARDER_CONTRACT,
              value: (0, import_ethers2.toBeHex)(value),
              chainId: signerChainId,
              _forwarder: {
                method: forwarderMethod,
                params: forwarderParams
              }
            };
          }
        }
      }
    }
    var import_ethers5 = require_lib6();
    var import_web39 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var MayanSwiftArtifact_default = {
      "_format": "hh-sol-artifact-1",
      "contractName": "MayanSwift",
      "sourceName": "src/MayanSwift.sol",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_wormhole",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_feeManager",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "_auctionChainId",
              "type": "uint16"
            },
            {
              "internalType": "bytes32",
              "name": "_auctionAddr",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "_solanaEmitter",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "_consistencyLevel",
              "type": "uint8"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "name": "DeadlineViolation",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "DuplicateOrder",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "FeesTooHigh",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "InvalidAction",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "InvalidAmount",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "InvalidAuctionMode",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "InvalidBpsFee",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "InvalidContractSignature",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "InvalidDestChain",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "InvalidEmitterAddress",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "InvalidEmitterChain",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "InvalidEvmAddr",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "InvalidGasDrop",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "InvalidOrderHash",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "InvalidOrderStatus",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "InvalidSignature",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "InvalidSignatureLength",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "InvalidSigner",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "InvalidSrcChain",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "InvalidWormholeFee",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "OrderNotExists",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "Paused",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "SmallAmountIn",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "Unauthorized",
          "type": "error"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "bytes32",
              "name": "key",
              "type": "bytes32"
            },
            {
              "indexed": false,
              "internalType": "uint64",
              "name": "sequence",
              "type": "uint64"
            }
          ],
          "name": "OrderCanceled",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "bytes32",
              "name": "key",
              "type": "bytes32"
            }
          ],
          "name": "OrderCreated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "bytes32",
              "name": "key",
              "type": "bytes32"
            },
            {
              "indexed": false,
              "internalType": "uint64",
              "name": "sequence",
              "type": "uint64"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "netAmount",
              "type": "uint256"
            }
          ],
          "name": "OrderFulfilled",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "bytes32",
              "name": "key",
              "type": "bytes32"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "netAmount",
              "type": "uint256"
            }
          ],
          "name": "OrderRefunded",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "bytes32",
              "name": "key",
              "type": "bytes32"
            }
          ],
          "name": "OrderUnlocked",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "auctionAddr",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "auctionChainId",
          "outputs": [
            {
              "internalType": "uint16",
              "name": "",
              "type": "uint16"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "tokenIn",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "trader",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "tokenOut",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "minAmountOut",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "gasDrop",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "cancelFee",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "refundFee",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "deadline",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "destAddr",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint16",
                  "name": "destChainId",
                  "type": "uint16"
                },
                {
                  "internalType": "bytes32",
                  "name": "referrerAddr",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint8",
                  "name": "referrerBps",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "auctionMode",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "random",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct MayanSwift.OrderParams",
              "name": "params",
              "type": "tuple"
            },
            {
              "internalType": "uint16",
              "name": "srcChainId",
              "type": "uint16"
            },
            {
              "internalType": "uint8",
              "name": "protocolBps",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "canceler",
              "type": "bytes32"
            }
          ],
          "name": "cancelOrder",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "sequence",
              "type": "uint64"
            }
          ],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newGuardian",
              "type": "address"
            }
          ],
          "name": "changeGuardian",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "claimGuardian",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "consistencyLevel",
          "outputs": [
            {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "trader",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "tokenOut",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "minAmountOut",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "gasDrop",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "cancelFee",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "refundFee",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "deadline",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "destAddr",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint16",
                  "name": "destChainId",
                  "type": "uint16"
                },
                {
                  "internalType": "bytes32",
                  "name": "referrerAddr",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint8",
                  "name": "referrerBps",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "auctionMode",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "random",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct MayanSwift.OrderParams",
              "name": "params",
              "type": "tuple"
            }
          ],
          "name": "createOrderWithEth",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "orderHash",
              "type": "bytes32"
            }
          ],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "trader",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "tokenOut",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "minAmountOut",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "gasDrop",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "cancelFee",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "refundFee",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "deadline",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "destAddr",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint16",
                  "name": "destChainId",
                  "type": "uint16"
                },
                {
                  "internalType": "bytes32",
                  "name": "referrerAddr",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint8",
                  "name": "referrerBps",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "auctionMode",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "random",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct MayanSwift.OrderParams",
              "name": "params",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "signedOrderHash",
              "type": "bytes"
            }
          ],
          "name": "createOrderWithSig",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "orderHash",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "trader",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "tokenOut",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "minAmountOut",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "gasDrop",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "cancelFee",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "refundFee",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "deadline",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "destAddr",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint16",
                  "name": "destChainId",
                  "type": "uint16"
                },
                {
                  "internalType": "bytes32",
                  "name": "referrerAddr",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint8",
                  "name": "referrerBps",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "auctionMode",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "random",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct MayanSwift.OrderParams",
              "name": "params",
              "type": "tuple"
            }
          ],
          "name": "createOrderWithToken",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "orderHash",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "feeManager",
          "outputs": [
            {
              "internalType": "contract IFeeManager",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "fulfillAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "encodedVm",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "recepient",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "batch",
              "type": "bool"
            }
          ],
          "name": "fulfillOrder",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "sequence",
              "type": "uint64"
            }
          ],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "fulfillAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "orderHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint16",
              "name": "srcChainId",
              "type": "uint16"
            },
            {
              "internalType": "bytes32",
              "name": "tokenIn",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "protocolBps",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "trader",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "tokenOut",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "minAmountOut",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "gasDrop",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "cancelFee",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "refundFee",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "deadline",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "destAddr",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint16",
                  "name": "destChainId",
                  "type": "uint16"
                },
                {
                  "internalType": "bytes32",
                  "name": "referrerAddr",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint8",
                  "name": "referrerBps",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "auctionMode",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "random",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct MayanSwift.OrderParams",
              "name": "params",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "recepient",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "batch",
              "type": "bool"
            }
          ],
          "name": "fulfillSimple",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "sequence",
              "type": "uint64"
            }
          ],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "guardian",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "nextGuardian",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "name": "orders",
          "outputs": [
            {
              "internalType": "enum MayanSwift.Status",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint64",
              "name": "amountIn",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "destChainId",
              "type": "uint16"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "encoded",
              "type": "bytes"
            }
          ],
          "name": "parseFulfillPayload",
          "outputs": [
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "action",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "orderHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint16",
                  "name": "destChainId",
                  "type": "uint16"
                },
                {
                  "internalType": "bytes32",
                  "name": "destAddr",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "driver",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "tokenOut",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "promisedAmount",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "gasDrop",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "deadline",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "referrerAddr",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint8",
                  "name": "referrerBps",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "protocolBps",
                  "type": "uint8"
                },
                {
                  "internalType": "uint16",
                  "name": "srcChainId",
                  "type": "uint16"
                },
                {
                  "internalType": "bytes32",
                  "name": "tokenIn",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct MayanSwift.FulfillMsg",
              "name": "fulfillMsg",
              "type": "tuple"
            }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "encoded",
              "type": "bytes"
            }
          ],
          "name": "parseRefundPayload",
          "outputs": [
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "action",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "orderHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint16",
                  "name": "srcChainId",
                  "type": "uint16"
                },
                {
                  "internalType": "bytes32",
                  "name": "tokenIn",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "recipient",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "canceler",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "cancelFee",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "refundFee",
                  "type": "uint64"
                }
              ],
              "internalType": "struct MayanSwift.RefundMsg",
              "name": "refundMsg",
              "type": "tuple"
            }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "encoded",
              "type": "bytes"
            }
          ],
          "name": "parseUnlockPayload",
          "outputs": [
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "action",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "orderHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint16",
                  "name": "srcChainId",
                  "type": "uint16"
                },
                {
                  "internalType": "bytes32",
                  "name": "tokenIn",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "recipient",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct MayanSwift.UnlockMsg",
              "name": "unlockMsg",
              "type": "tuple"
            }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "paused",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32[]",
              "name": "orderHashes",
              "type": "bytes32[]"
            }
          ],
          "name": "postBatch",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "sequence",
              "type": "uint64"
            }
          ],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "encodedVm",
              "type": "bytes"
            }
          ],
          "name": "refundOrder",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "_consistencyLevel",
              "type": "uint8"
            }
          ],
          "name": "setConsistencyLevel",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_feeManager",
              "type": "address"
            }
          ],
          "name": "setFeeManager",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bool",
              "name": "_pause",
              "type": "bool"
            }
          ],
          "name": "setPause",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "solanaEmitter",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "encodedVm",
              "type": "bytes"
            }
          ],
          "name": "unlockBatch",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "name": "unlockMsgs",
          "outputs": [
            {
              "internalType": "uint8",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "orderHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint16",
              "name": "srcChainId",
              "type": "uint16"
            },
            {
              "internalType": "bytes32",
              "name": "tokenIn",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "recipient",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "encodedVm",
              "type": "bytes"
            }
          ],
          "name": "unlockSingle",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "wormhole",
          "outputs": [
            {
              "internalType": "contract IWormhole",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "stateMutability": "payable",
          "type": "receive"
        }
      ],
      "linkReferences": {},
      "deployedLinkReferences": {}
    };
    var import_web34 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var import_buffer4 = require_buffer2();
    var import_buffer_layout2 = require_Layout();
    var import_js_sha256 = require_sha2564();
    var import_bs582 = __toESM2(require_cjs5());
    var cachedConnections = {};
    function getConnection(rpcUrl) {
      cachedConnections[rpcUrl] ?? (cachedConnections[rpcUrl] = new import_web34.Connection(rpcUrl));
      return new import_web34.Connection(rpcUrl);
    }
    async function submitTransactionWithRetry({
      trx,
      connection,
      errorChance,
      extraRpcs,
      options,
      rate = 8
    }) {
      let signature2 = null;
      let errorNumber = 0;
      const connections = [connection].concat(extraRpcs.map(getConnection));
      for (let i = 0; i < rate; i++) {
        if (signature2) {
          try {
            const status = await Promise.any(connections.map((c) => c.getSignatureStatus(signature2)));
            if (status && status.value) {
              if (status.value.err) {
                if (errorNumber >= errorChance) {
                  return {
                    signature: signature2,
                    serializedTrx: trx
                  };
                }
                errorNumber++;
              } else if (status.value.confirmationStatus === "confirmed") {
                return {
                  signature: signature2,
                  serializedTrx: trx
                };
              }
            }
          } catch (err) {
            console.error(err);
          }
        }
        const sendRequests = connections.map((c) => c.sendRawTransaction(trx, options));
        if (!signature2) {
          try {
            signature2 = await Promise.any(sendRequests);
          } catch (err) {
            console.error("Transaction not submitted, remaining attempts:", rate - i - 1, err);
          }
        }
        await wait(1e3);
      }
      if (!signature2) {
        throw new Error("Failed to send transaction");
      }
      return {
        signature: signature2,
        serializedTrx: trx
      };
    }
    function createAssociatedTokenAccountInstruction(payer, associatedToken, owner, mint, programId = new import_web34.PublicKey(addresses_default.TOKEN_PROGRAM_ID), associatedTokenProgramId = new import_web34.PublicKey(addresses_default.ASSOCIATED_TOKEN_PROGRAM_ID)) {
      const keys = [
        { pubkey: payer, isSigner: true, isWritable: true },
        { pubkey: associatedToken, isSigner: false, isWritable: true },
        { pubkey: owner, isSigner: false, isWritable: false },
        { pubkey: mint, isSigner: false, isWritable: false },
        { pubkey: import_web34.SystemProgram.programId, isSigner: false, isWritable: false },
        { pubkey: programId, isSigner: false, isWritable: false },
        { pubkey: import_web34.SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false }
      ];
      return new import_web34.TransactionInstruction({
        keys,
        programId: associatedTokenProgramId,
        data: import_buffer4.Buffer.alloc(0)
      });
    }
    var TOKEN_ACCOUNT_LEN = 165;
    async function createInitializeRandomTokenAccountInstructions(connection, payer, mint, owner, keyPair, programId = new import_web34.PublicKey(addresses_default.TOKEN_PROGRAM_ID)) {
      const instructions = [];
      const rentLamports = await connection.getMinimumBalanceForRentExemption(TOKEN_ACCOUNT_LEN);
      instructions.push(import_web34.SystemProgram.createAccount({
        fromPubkey: payer,
        newAccountPubkey: keyPair.publicKey,
        lamports: rentLamports,
        space: TOKEN_ACCOUNT_LEN,
        programId
      }));
      instructions.push(new import_web34.TransactionInstruction({
        keys: [
          { pubkey: keyPair.publicKey, isWritable: true, isSigner: false },
          { pubkey: mint, isWritable: false, isSigner: false },
          { pubkey: owner, isWritable: false, isSigner: false },
          { pubkey: import_web34.SYSVAR_RENT_PUBKEY, isWritable: false, isSigner: false }
        ],
        programId,
        data: import_buffer4.Buffer.from([1])
      }));
      return instructions;
    }
    var ApproveInstructionData = (0, import_buffer_layout2.struct)([
      (0, import_buffer_layout2.u8)("instruction"),
      (0, import_buffer_layout2.blob)(8, "amount")
    ]);
    function createApproveInstruction(account, delegate, owner, amount, programId = new import_web34.PublicKey(addresses_default.TOKEN_PROGRAM_ID)) {
      const keys = [
        { pubkey: account, isSigner: false, isWritable: true },
        { pubkey: delegate, isSigner: false, isWritable: false },
        { pubkey: owner, isSigner: true, isWritable: false }
      ];
      const data = import_buffer4.Buffer.alloc(ApproveInstructionData.span);
      ApproveInstructionData.encode(
        {
          instruction: 4,
          amount: getSafeU64Blob(amount)
        },
        data
      );
      return new import_web34.TransactionInstruction({ keys, programId, data });
    }
    var SyncNativeInstructionData = (0, import_buffer_layout2.struct)([(0, import_buffer_layout2.u8)("instruction")]);
    function createSyncNativeInstruction(account) {
      const keys = [{ pubkey: account, isSigner: false, isWritable: true }];
      const data = import_buffer4.Buffer.alloc(SyncNativeInstructionData.span);
      SyncNativeInstructionData.encode({ instruction: 17 }, data);
      return new import_web34.TransactionInstruction({
        keys,
        programId: new import_web34.PublicKey(addresses_default.TOKEN_PROGRAM_ID),
        data
      });
    }
    var CloseAccountInstructionData = (0, import_buffer_layout2.struct)([
      (0, import_buffer_layout2.u8)("instruction")
    ]);
    function createCloseAccountInstruction(account, destination, owner, programId = new import_web34.PublicKey(addresses_default.TOKEN_PROGRAM_ID)) {
      const keys = [
        { pubkey: account, isSigner: false, isWritable: true },
        { pubkey: destination, isSigner: false, isWritable: true },
        { pubkey: owner, isSigner: true, isWritable: false }
      ];
      const data = import_buffer4.Buffer.alloc(CloseAccountInstructionData.span);
      CloseAccountInstructionData.encode(
        {
          instruction: 9
        },
        data
      );
      return new import_web34.TransactionInstruction({ keys, programId, data });
    }
    var SplTransferInstructionData = (0, import_buffer_layout2.struct)([
      (0, import_buffer_layout2.u8)("instruction"),
      (0, import_buffer_layout2.blob)(8, "amount")
    ]);
    function createSplTransferInstruction(source, destination, owner, amount, programId = new import_web34.PublicKey(addresses_default.TOKEN_PROGRAM_ID)) {
      const keys = [
        { pubkey: source, isSigner: false, isWritable: true },
        { pubkey: destination, isSigner: false, isWritable: true },
        { pubkey: owner, isSigner: true, isWritable: false }
      ];
      const data = import_buffer4.Buffer.alloc(SplTransferInstructionData.span);
      SplTransferInstructionData.encode(
        {
          instruction: 3,
          amount: getSafeU64Blob(amount)
        },
        data
      );
      return new import_web34.TransactionInstruction({ keys, programId, data });
    }
    var solMint = new import_web34.PublicKey("So11111111111111111111111111111111111111112");
    async function wrapSol(owner, amount, signTransaction, connection) {
      const solanaConnection = connection ?? new import_web34.Connection("https://rpc.ankr.com/solana");
      const toAccount = getAssociatedTokenAddress(solMint, owner, false);
      const {
        blockhash,
        lastValidBlockHeight
      } = await solanaConnection.getLatestBlockhash();
      const trx = new import_web34.Transaction({
        feePayer: owner,
        blockhash,
        lastValidBlockHeight
      });
      const toAccountData = await solanaConnection.getAccountInfo(toAccount, "finalized");
      if (!toAccountData || toAccountData.data.length === 0) {
        trx.add(createAssociatedTokenAccountInstruction(
          owner,
          toAccount,
          owner,
          solMint
        ));
      }
      trx.add(import_web34.SystemProgram.transfer({
        fromPubkey: owner,
        toPubkey: toAccount,
        lamports: getAmountOfFractionalAmount(amount, 9)
      }));
      trx.add(createSyncNativeInstruction(toAccount));
      const signedTrx = await signTransaction(trx);
      return await submitTransactionWithRetry({
        trx: signedTrx.serialize(),
        connection: solanaConnection,
        errorChance: 1,
        extraRpcs: []
      });
    }
    async function unwrapSol(owner, amount, signTransaction, connection) {
      const solanaConnection = connection ?? new import_web34.Connection("https://rpc.ankr.com/solana");
      const fromAccount = getAssociatedTokenAddress(solMint, owner, false);
      const delegate = import_web34.Keypair.generate();
      const {
        blockhash,
        lastValidBlockHeight
      } = await solanaConnection.getLatestBlockhash();
      const trx = new import_web34.Transaction({
        feePayer: owner,
        blockhash,
        lastValidBlockHeight
      });
      const toAccount = getAssociatedTokenAddress(
        solMint,
        delegate.publicKey,
        false
      );
      trx.add(createAssociatedTokenAccountInstruction(
        owner,
        toAccount,
        delegate.publicKey,
        solMint
      ));
      trx.add(createSplTransferInstruction(
        fromAccount,
        toAccount,
        owner,
        getAmountOfFractionalAmount(amount, 9)
      ));
      trx.add(createCloseAccountInstruction(
        toAccount,
        owner,
        delegate.publicKey
      ));
      trx.partialSign(delegate);
      const signedTrx = await signTransaction(trx);
      return await submitTransactionWithRetry({
        trx: signedTrx.serialize(),
        connection: solanaConnection,
        errorChance: 1,
        extraRpcs: []
      });
    }
    function deserializeInstructionInfo(instruction) {
      return new import_web34.TransactionInstruction({
        programId: new import_web34.PublicKey(instruction.programId),
        keys: instruction.accounts.map((key) => ({
          pubkey: new import_web34.PublicKey(key.pubkey),
          isSigner: key.isSigner,
          isWritable: key.isWritable
        })),
        data: import_buffer4.Buffer.from(instruction.data, "base64")
      });
    }
    async function getAddressLookupTableAccounts(keys, connection) {
      const addressLookupTableAccountInfos = await connection.getMultipleAccountsInfo(
        keys.map((key) => new import_web34.PublicKey(key))
      );
      return addressLookupTableAccountInfos.reduce((acc, accountInfo, index) => {
        const addressLookupTableAddress = keys[index];
        if (accountInfo) {
          const addressLookupTableAccount = new import_web34.AddressLookupTableAccount({
            key: new import_web34.PublicKey(addressLookupTableAddress),
            state: import_web34.AddressLookupTableAccount.deserialize(accountInfo.data)
          });
          acc.push(addressLookupTableAccount);
        }
        return acc;
      }, new Array());
    }
    function decentralizeClientSwapInstructions(params, connection) {
      const swapInstruction = deserializeInstructionInfo(params.swapInstruction);
      const cleanupInstruction = params.cleanupInstruction ? deserializeInstructionInfo(params.cleanupInstruction) : null;
      const computeBudgetInstructions = params.computeBudgetInstructions ? params.computeBudgetInstructions.map(deserializeInstructionInfo) : [];
      const setupInstructions = params.setupInstructions ? params.setupInstructions.map(deserializeInstructionInfo) : [];
      return {
        swapInstruction,
        cleanupInstruction,
        computeBudgetInstructions,
        setupInstructions,
        addressLookupTableAddresses: params.addressLookupTableAddresses
      };
    }
    function getAnchorInstructionData(name) {
      let preimage = `global:${name}`;
      return import_buffer4.Buffer.from(import_js_sha256.sha256.digest(preimage)).subarray(0, 8);
    }
    async function decideRelayer() {
      let relayer;
      try {
        const suggestedRelayer = await getSuggestedRelayer();
        relayer = new import_web34.PublicKey(suggestedRelayer);
      } catch (err) {
        console.log("Relayer not found, using system program");
        relayer = import_web34.SystemProgram.programId;
      }
      return relayer;
    }
    function getJitoTipTransfer(swapper, blockhash, lastValidBlockHeight, options) {
      const jitoAccount = options.jitoAccount || "Cw8CFyM9FkoMi7K7Crf6HNQqf4uEMzpKw6QNghXLvLkY";
      return new import_web34.Transaction({
        feePayer: new import_web34.PublicKey(swapper),
        blockhash,
        lastValidBlockHeight
      }).add(import_web34.SystemProgram.transfer({
        fromPubkey: new import_web34.PublicKey(swapper),
        toPubkey: new import_web34.PublicKey(jitoAccount),
        lamports: options.tipLamports
      }));
    }
    async function sendJitoBundle(singedTrxs, options, forceToBeSubmitted = false) {
      try {
        let signedTrxs = [];
        for (let trx of singedTrxs) {
          signedTrxs.push(trx.serialize());
        }
        const bundle = {
          jsonrpc: "2.0",
          id: 1,
          method: "sendBundle",
          params: [signedTrxs.map((trx) => import_bs582.default.encode(trx))]
        };
        const res = await fetch(options.jitoSendUrl || "https://mainnet.block-engine.jito.wtf/api/v1/bundles", {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify(bundle)
        });
        if (res.status !== 200 && res.status !== 201) {
          throw new Error("Send Jito bundle failed");
        } else {
          const result = await res.json();
          return result.result;
        }
      } catch (err) {
        console.error("Send Jito bundle failed", err);
        if (forceToBeSubmitted) {
          throw err;
        }
      }
    }
    async function getJitoBundleStatuses(bundleIds, jitoApiUrl) {
      const maxRetries = 5;
      let attempt = 0;
      while (attempt < maxRetries) {
        try {
          const response = await fetch(jitoApiUrl, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              jsonrpc: "2.0",
              id: 1,
              method: "getBundleStatuses",
              params: [bundleIds]
            })
          });
          if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
          }
          const data = await response.json();
          if (data.error) {
            throw new Error(`Error getting bundle statuses: ${JSON.stringify(data.error, null, 2)}`);
          }
          return data.result;
        } catch (error) {
          attempt++;
          await wait(400);
          if (attempt >= maxRetries) {
            throw new Error(`Failed to fetch bundle statuses after ${maxRetries} attempts: ${error.message}`);
          }
        }
      }
    }
    async function confirmJitoBundleId(bundleId, options, lastValidBlockHeight, mayanTxSignature, connection) {
      var _a;
      const timeout = 30 * 3e3;
      const startTime = Date.now();
      while (Date.now() - startTime < timeout && await connection.getBlockHeight() <= lastValidBlockHeight) {
        await wait(350);
        const bundleStatuses = await getJitoBundleStatuses(
          [bundleId],
          options.jitoSendUrl || "https://mainnet.block-engine.jito.wtf/api/v1/bundles"
        );
        if (bundleStatuses && bundleStatuses.value && bundleStatuses.value.length > 0 && bundleStatuses.value[0]) {
          console.log("===>", bundleStatuses.value[0]);
          const status = bundleStatuses.value[0].confirmation_status;
          if (status === "confirmed" || status === "finalized") {
            const tx = await connection.getSignatureStatus(mayanTxSignature);
            if (!tx || !tx.value) {
              continue;
            }
            if ((_a = tx.value) == null ? void 0 : _a.err) {
              throw new Error(`Bundle failed with error: ${tx.value.err}`);
            }
            return;
          }
        }
      }
      throw new Error("Bundle not confirmed, timeout");
    }
    async function broadcastJitoBundleId(bundleId) {
      try {
        await fetch("https://explorer-api.mayan.finance/v3/submit/jito-bundle", {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({ bundleId })
        });
      } catch {
      }
    }
    function validateJupCleanupInstruction(instruction) {
      if (!instruction) {
        return;
      }
      if (!instruction.programId.equals(new import_web34.PublicKey(addresses_default.TOKEN_PROGRAM_ID)) && !instruction.programId.equals(new import_web34.PublicKey(addresses_default.TOKEN_2022_PROGRAM_ID))) {
        throw new Error("Invalid cleanup instruction:: programId");
      }
      if (Uint8Array.from(instruction.data).length !== 1) {
        throw new Error("Invalid cleanup instruction:: data");
      }
      if (Uint8Array.from(instruction.data)[0] !== 9) {
        throw new Error("Invalid cleanup instruction:: data");
      }
    }
    function validateJupSetupInstructions(instructions, owner) {
      if (instructions.length < 1) {
        return;
      }
      if (instructions.length > 6) {
        throw new Error("Invalid setup instruction:: too many instructions");
      }
      instructions.forEach((instruction) => {
        if (!instruction.programId.equals(new import_web34.PublicKey(addresses_default.ASSOCIATED_TOKEN_PROGRAM_ID)) && !instruction.programId.equals(import_web34.SystemProgram.programId) && !instruction.programId.equals(new import_web34.PublicKey(addresses_default.TOKEN_PROGRAM_ID)) && !instruction.programId.equals(new import_web34.PublicKey(addresses_default.TOKEN_2022_PROGRAM_ID))) {
          throw new Error("Invalid setup instruction:: programId");
        }
        if (instruction.programId.equals(new import_web34.PublicKey(addresses_default.ASSOCIATED_TOKEN_PROGRAM_ID))) {
          if (Uint8Array.from(instruction.data).length === 1) {
            if (Uint8Array.from(instruction.data)[0] !== 1) {
              throw new Error("Invalid setup instruction:: data");
            }
          } else if (Uint8Array.from(instruction.data).length !== 0) {
            throw new Error("Invalid setup instruction:: data");
          }
        } else if (instruction.programId.equals(import_web34.SystemProgram.programId)) {
          if (!owner) {
            throw new Error("Invalid setup instruction:: unknown transfer");
          }
          const wSolAccount = getAssociatedTokenAddress(solMint, owner, true);
          if (instruction.data.readUint32LE() !== 2) {
            throw new Error("Invalid setup instruction:: invalid system program instruction");
          }
          if (!instruction.keys[1].pubkey.equals(wSolAccount)) {
            throw new Error("Invalid setup instruction:: invalid wrap transfer dest");
          }
        } else {
          if (instruction.data.toString("base64") !== "EQ==") {
            throw new Error("Invalid setup instruction:: invalid token program instruction");
          }
        }
      });
    }
    function validateJupSwapInstruction(instruction, validDestAccount) {
      if (!instruction.programId.equals(new import_web34.PublicKey("JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4"))) {
        throw new Error("Invalid swap instruction:: programId");
      }
      if (instruction.data.subarray(0, 8).toString("hex") === getAnchorInstructionData("shared_accounts_route").toString("hex")) {
        if (!instruction.keys[6].pubkey.equals(validDestAccount)) {
          throw new Error(`Invalid swap instruction shared_accounts_route:: dest account`);
        }
      } else if (instruction.data.subarray(0, 8).toString("hex") === getAnchorInstructionData("route").toString("hex")) {
        if (!instruction.keys[4].pubkey.equals(validDestAccount)) {
          throw new Error("Invalid swap instruction route:: dest account");
        }
      } else {
        throw new Error("Invalid swap instruction:: ix id");
      }
    }
    function validateJupComputeBudgetInstructions(instructions) {
      instructions.forEach((instruction) => {
        if (!instruction.programId.equals(import_web34.ComputeBudgetProgram.programId)) {
          throw new Error("Invalid compute budget instruction:: programId");
        }
        if (Uint8Array.from(instruction.data)[0] === 3 && instruction.data.readBigUInt64LE(1) > 100000000n) {
          throw new Error("Invalid compute budget instruction:: to high tx fee");
        }
      });
    }
    function validateJupSwap(swap, validDestAccount, validWrapOwner) {
      validateJupComputeBudgetInstructions(swap.computeBudgetInstructions);
      validateJupSetupInstructions(swap.setupInstructions, validWrapOwner);
      validateJupSwapInstruction(swap.swapInstruction, validDestAccount);
      validateJupCleanupInstruction(swap.cleanupInstruction);
    }
    function createTransferAllAndCloseInstruction(owner, mint, tokenAccount, transferDestination, closeDestination, tokenProgramId = new import_web34.PublicKey("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")) {
      return new import_web34.TransactionInstruction({
        keys: [
          { pubkey: owner, isSigner: true, isWritable: false },
          { pubkey: tokenAccount, isSigner: false, isWritable: true },
          { pubkey: transferDestination, isSigner: false, isWritable: true },
          { pubkey: mint, isSigner: false, isWritable: false },
          { pubkey: closeDestination, isSigner: false, isWritable: true },
          { pubkey: tokenProgramId, isSigner: false, isWritable: false }
        ],
        programId: new import_web34.PublicKey("B96dV3Luxzo6SokJx3xt8i5y8Mb7HRR6Eec8hCjJDT69"),
        data: getAnchorInstructionData("transfer_all_and_close")
      });
    }
    var import_web38 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var import_buffer_layout4 = require_Layout();
    var import_buffer8 = require_buffer2();
    var import_ethers4 = require_lib6();
    var import_web36 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var import_buffer_layout22 = require_Layout();
    var import_buffer6 = require_buffer2();
    var import_web35 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var import_buffer5 = require_buffer2();
    function getWormholePDAs(supplierProgram) {
      const wormholeProgramId = new import_web35.PublicKey(addresses_default.WORMHOLE_PROGRAM_ID);
      const programId = new import_web35.PublicKey(supplierProgram);
      const [bridgeConfig] = import_web35.PublicKey.findProgramAddressSync(
        [import_buffer5.Buffer.from("Bridge")],
        wormholeProgramId
      );
      const [emitter] = import_web35.PublicKey.findProgramAddressSync(
        [import_buffer5.Buffer.from("emitter")],
        programId
      );
      const [sequenceKey] = import_web35.PublicKey.findProgramAddressSync(
        [import_buffer5.Buffer.from("Sequence"), emitter.toBuffer()],
        wormholeProgramId
      );
      const [feeCollector] = import_web35.PublicKey.findProgramAddressSync(
        [import_buffer5.Buffer.from("fee_collector")],
        wormholeProgramId
      );
      return {
        bridgeConfig,
        sequenceKey,
        feeCollector,
        emitter
      };
    }
    var MCTPBridgeWithFeeLayout = (0, import_buffer_layout22.struct)([
      (0, import_buffer_layout22.blob)(8, "instruction")
    ]);
    function createMctpBridgeWithFeeInstruction(ledger, toChain, mintAddress, relayerAddress, feeSolana) {
      const wormholeProgramId = new import_web36.PublicKey(addresses_default.WORMHOLE_PROGRAM_ID);
      const TOKEN_PROGRAM_ID = new import_web36.PublicKey(addresses_default.TOKEN_PROGRAM_ID);
      const cctpCoreProgramId = new import_web36.PublicKey(addresses_default.CCTP_CORE_PROGRAM_ID);
      const cctpTokenProgramId = new import_web36.PublicKey(addresses_default.CCTP_TOKEN_PROGRAM_ID);
      const mctpProgram = new import_web36.PublicKey(addresses_default.MCTP_PROGRAM_ID);
      const relayer = new import_web36.PublicKey(relayerAddress);
      const mint = new import_web36.PublicKey(mintAddress);
      const ledgerAccount = getAssociatedTokenAddress(
        mint,
        ledger,
        true
      );
      let relayerAccount;
      if (feeSolana && feeSolana > BigInt(0)) {
        relayerAccount = getAssociatedTokenAddress(mint, relayer, false);
      } else {
        relayerAccount = new import_web36.PublicKey(addresses_default.MCTP_PROGRAM_ID);
      }
      const cctpBridgePdas = getCCTPBridgePDAs(mint, toChain);
      const wormholePDAs = getWormholePDAs(addresses_default.MCTP_PROGRAM_ID);
      const cctpMessage = import_web36.Keypair.generate();
      const wormholeMessage = import_web36.Keypair.generate();
      const accounts = [
        { pubkey: ledger, isWritable: true, isSigner: false },
        { pubkey: ledgerAccount, isWritable: true, isSigner: false },
        { pubkey: relayer, isWritable: true, isSigner: true },
        { pubkey: relayerAccount, isWritable: true, isSigner: false },
        { pubkey: mint, isWritable: true, isSigner: false },
        { pubkey: cctpBridgePdas.senderAuthority, isWritable: false, isSigner: false },
        { pubkey: cctpBridgePdas.tokenMessenger, isWritable: false, isSigner: false },
        { pubkey: cctpBridgePdas.remoteTokenMessengerKey, isWritable: false, isSigner: false },
        { pubkey: cctpBridgePdas.tokenMinter, isWritable: false, isSigner: false },
        { pubkey: cctpBridgePdas.localToken, isWritable: true, isSigner: false },
        { pubkey: cctpBridgePdas.eventAuthToken, isWritable: false, isSigner: false },
        { pubkey: cctpBridgePdas.messageTransmitter, isWritable: true, isSigner: false },
        { pubkey: cctpMessage.publicKey, isWritable: true, isSigner: true },
        { pubkey: cctpTokenProgramId, isWritable: false, isSigner: false },
        { pubkey: cctpCoreProgramId, isWritable: false, isSigner: false },
        { pubkey: wormholePDAs.emitter, isWritable: false, isSigner: false },
        { pubkey: wormholePDAs.bridgeConfig, isWritable: true, isSigner: false },
        { pubkey: wormholePDAs.sequenceKey, isWritable: true, isSigner: false },
        { pubkey: wormholePDAs.feeCollector, isWritable: true, isSigner: false },
        { pubkey: wormholeMessage.publicKey, isWritable: true, isSigner: true },
        { pubkey: wormholeProgramId, isWritable: false, isSigner: false },
        { pubkey: import_web36.SYSVAR_CLOCK_PUBKEY, isWritable: false, isSigner: false },
        { pubkey: import_web36.SYSVAR_RENT_PUBKEY, isWritable: false, isSigner: false },
        { pubkey: TOKEN_PROGRAM_ID, isWritable: false, isSigner: false },
        { pubkey: import_web36.SystemProgram.programId, isWritable: false, isSigner: false }
      ];
      const data = import_buffer6.Buffer.alloc(MCTPBridgeWithFeeLayout.span);
      MCTPBridgeWithFeeLayout.encode(
        {
          instruction: getAnchorInstructionData("bridge_with_fee")
        },
        data
      );
      const bridgeIns = new import_web36.TransactionInstruction({
        keys: accounts,
        data,
        programId: mctpProgram
      });
      return { instruction: bridgeIns, signers: [cctpMessage, wormholeMessage] };
    }
    var MctpBridgeLockFeeLayout = (0, import_buffer_layout22.struct)([
      (0, import_buffer_layout22.blob)(8, "instruction")
    ]);
    function createMctpBridgeLockFeeInstruction(ledger, toChain, mintAddress, relayerAddress, feeSolana) {
      const instructions = [];
      const TOKEN_PROGRAM_ID = new import_web36.PublicKey(addresses_default.TOKEN_PROGRAM_ID);
      const ASSOCIATED_TOKEN_PROGRAM_ID = new import_web36.PublicKey(addresses_default.ASSOCIATED_TOKEN_PROGRAM_ID);
      const cctpCoreProgramId = new import_web36.PublicKey(addresses_default.CCTP_CORE_PROGRAM_ID);
      const cctpTokenProgramId = new import_web36.PublicKey(addresses_default.CCTP_TOKEN_PROGRAM_ID);
      const mctpProgram = new import_web36.PublicKey(addresses_default.MCTP_PROGRAM_ID);
      const relayer = new import_web36.PublicKey(relayerAddress);
      const mint = new import_web36.PublicKey(mintAddress);
      const ledgerAccount = getAssociatedTokenAddress(
        mint,
        ledger,
        true
      );
      const cctpBridgePdas = getCCTPBridgePDAs(mint, toChain);
      const cctpMessage = import_web36.Keypair.generate();
      const [feeState] = import_web36.PublicKey.findProgramAddressSync(
        [import_buffer6.Buffer.from("LOCKED_FEE"), mint.toBuffer(), cctpMessage.publicKey.toBytes()],
        mctpProgram
      );
      let relayerAccount;
      if (feeSolana && feeSolana > BigInt(0)) {
        relayerAccount = getAssociatedTokenAddress(mint, relayer, false);
      } else {
        relayerAccount = new import_web36.PublicKey(addresses_default.MCTP_PROGRAM_ID);
      }
      const feeStateAccount = getAssociatedTokenAddress(
        mint,
        feeState,
        true
      );
      instructions.push(createAssociatedTokenAccountInstruction(
        relayer,
        feeStateAccount,
        feeState,
        mint
      ));
      const accounts = [
        { pubkey: ledger, isWritable: true, isSigner: false },
        { pubkey: ledgerAccount, isWritable: true, isSigner: false },
        { pubkey: relayer, isWritable: true, isSigner: true },
        { pubkey: relayerAccount, isWritable: true, isSigner: false },
        { pubkey: feeState, isWritable: true, isSigner: false },
        { pubkey: feeStateAccount, isWritable: true, isSigner: false },
        { pubkey: mint, isWritable: true, isSigner: false },
        { pubkey: cctpBridgePdas.senderAuthority, isWritable: false, isSigner: false },
        { pubkey: cctpBridgePdas.tokenMessenger, isWritable: false, isSigner: false },
        { pubkey: cctpBridgePdas.remoteTokenMessengerKey, isWritable: false, isSigner: false },
        { pubkey: cctpBridgePdas.tokenMinter, isWritable: false, isSigner: false },
        { pubkey: cctpBridgePdas.localToken, isWritable: true, isSigner: false },
        { pubkey: cctpBridgePdas.eventAuthToken, isWritable: false, isSigner: false },
        { pubkey: cctpBridgePdas.messageTransmitter, isWritable: true, isSigner: false },
        { pubkey: cctpMessage.publicKey, isWritable: true, isSigner: true },
        { pubkey: cctpTokenProgramId, isWritable: false, isSigner: false },
        { pubkey: cctpCoreProgramId, isWritable: false, isSigner: false },
        { pubkey: TOKEN_PROGRAM_ID, isWritable: false, isSigner: false },
        { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isWritable: false, isSigner: false },
        { pubkey: import_web36.SystemProgram.programId, isWritable: false, isSigner: false }
      ];
      const data = import_buffer6.Buffer.alloc(MctpBridgeLockFeeLayout.span);
      MctpBridgeLockFeeLayout.encode(
        {
          instruction: getAnchorInstructionData("bridge_locked_fee")
        },
        data
      );
      const bridgeIns = new import_web36.TransactionInstruction({
        keys: accounts,
        data,
        programId: mctpProgram
      });
      instructions.push(bridgeIns);
      return { instructions, signer: cctpMessage };
    }
    var MctpInitSwapLayout = (0, import_buffer_layout22.struct)([
      (0, import_buffer_layout22.blob)(8, "instruction")
    ]);
    function createMctpInitSwapInstruction(ledger, toChain, mintAddress, relayerAddress, feeSolana) {
      const TOKEN_PROGRAM_ID = new import_web36.PublicKey(addresses_default.TOKEN_PROGRAM_ID);
      const cctpCoreProgramId = new import_web36.PublicKey(addresses_default.CCTP_CORE_PROGRAM_ID);
      const cctpTokenProgramId = new import_web36.PublicKey(addresses_default.CCTP_TOKEN_PROGRAM_ID);
      const mctpProgram = new import_web36.PublicKey(addresses_default.MCTP_PROGRAM_ID);
      const relayer = new import_web36.PublicKey(relayerAddress);
      const mint = new import_web36.PublicKey(mintAddress);
      const ledgerAccount = getAssociatedTokenAddress(
        mint,
        ledger,
        true
      );
      const cctpBridgePdas = getCCTPBridgePDAs(mint, toChain);
      const cctpMessage = import_web36.Keypair.generate();
      const [swapState] = import_web36.PublicKey.findProgramAddressSync(
        [import_buffer6.Buffer.from("ORDER_SOLANA_SOURCE"), ledger.toBuffer()],
        mctpProgram
      );
      let relayerAccount;
      if (feeSolana && feeSolana > BigInt(0)) {
        relayerAccount = getAssociatedTokenAddress(mint, relayer, false);
      } else {
        relayerAccount = new import_web36.PublicKey(addresses_default.MCTP_PROGRAM_ID);
      }
      const accounts = [
        { pubkey: ledger, isWritable: false, isSigner: false },
        { pubkey: ledgerAccount, isWritable: true, isSigner: false },
        { pubkey: relayer, isWritable: true, isSigner: true },
        { pubkey: relayerAccount, isWritable: true, isSigner: false },
        { pubkey: mint, isWritable: true, isSigner: false },
        { pubkey: swapState, isWritable: true, isSigner: false },
        { pubkey: cctpBridgePdas.senderAuthority, isWritable: false, isSigner: false },
        { pubkey: cctpBridgePdas.tokenMessenger, isWritable: false, isSigner: false },
        { pubkey: cctpBridgePdas.remoteTokenMessengerKey, isWritable: false, isSigner: false },
        { pubkey: cctpBridgePdas.tokenMinter, isWritable: false, isSigner: false },
        { pubkey: cctpBridgePdas.localToken, isWritable: true, isSigner: false },
        { pubkey: cctpBridgePdas.eventAuthToken, isWritable: false, isSigner: false },
        { pubkey: cctpBridgePdas.messageTransmitter, isWritable: true, isSigner: false },
        { pubkey: cctpMessage.publicKey, isWritable: true, isSigner: true },
        { pubkey: cctpTokenProgramId, isWritable: false, isSigner: false },
        { pubkey: cctpCoreProgramId, isWritable: false, isSigner: false },
        { pubkey: new import_web36.PublicKey(addresses_default.FEE_MANAGER_PROGRAM_ID), isWritable: false, isSigner: false },
        { pubkey: TOKEN_PROGRAM_ID, isWritable: false, isSigner: false },
        { pubkey: import_web36.SystemProgram.programId, isWritable: false, isSigner: false }
      ];
      const data = import_buffer6.Buffer.alloc(MctpInitSwapLayout.span);
      MctpInitSwapLayout.encode(
        {
          instruction: getAnchorInstructionData("create_order")
        },
        data
      );
      const initSwapIns = new import_web36.TransactionInstruction({
        keys: accounts,
        data,
        programId: mctpProgram
      });
      return { instruction: initSwapIns, signer: cctpMessage };
    }
    var MctpBridgeLedgerLayout = (0, import_buffer_layout22.struct)([
      (0, import_buffer_layout22.blob)(8, "instruction"),
      (0, import_buffer_layout22.blob)(32, "destAddress"),
      (0, import_buffer_layout22.blob)(8, "amountInMin"),
      (0, import_buffer_layout22.blob)(8, "gasDrop"),
      (0, import_buffer_layout22.blob)(8, "feeRedeem"),
      (0, import_buffer_layout22.blob)(8, "feeSolana"),
      (0, import_buffer_layout22.u16)("destinationChain"),
      (0, import_buffer_layout22.blob)(32, "keyRnd"),
      (0, import_buffer_layout22.u8)("mode")
    ]);
    function createMctpBridgeLedgerInstruction(params) {
      if (params.mode !== "WITH_FEE" && params.mode !== "LOCK_FEE") {
        throw new Error("Invalid mode: " + params.mode);
      }
      const user = new import_web36.PublicKey(params.swapperAddress);
      const mint = new import_web36.PublicKey(params.mintAddress);
      const ledgerAccount = getAssociatedTokenAddress(mint, params.ledger, true);
      const destinationChainId = getWormholeChainIdByName(params.toChain);
      const destAddress = import_buffer6.Buffer.from(
        hexToUint8Array(
          nativeAddressToHexString(params.destinationAddress, destinationChainId)
        )
      );
      const amountInMin = getSafeU64Blob(params.amountInMin64);
      const gasDrop = getSafeU64Blob(
        getAmountOfFractionalAmount(params.gasDrop, Math.min(getGasDecimal(params.toChain), 8))
      );
      const feeRedeem = getSafeU64Blob(
        getAmountOfFractionalAmount(params.feeRedeem, CCTP_TOKEN_DECIMALS)
      );
      const feeSolana = getSafeU64Blob(params.feeSolana);
      const refAddress = params.referrerAddress ? import_buffer6.Buffer.from(hexToUint8Array(
        nativeAddressToHexString(params.referrerAddress, destinationChainId)
      )) : import_web36.SystemProgram.programId.toBuffer();
      const accounts = [
        { pubkey: user, isWritable: true, isSigner: true },
        { pubkey: params.ledger, isWritable: true, isSigner: false },
        { pubkey: ledgerAccount, isWritable: false, isSigner: false },
        { pubkey: params.customPayload || new import_web36.PublicKey(addresses_default.MCTP_PROGRAM_ID), isWritable: false, isSigner: false },
        { pubkey: mint, isWritable: false, isSigner: false },
        { pubkey: import_web36.SystemProgram.programId, isWritable: false, isSigner: false },
        { pubkey: new import_web36.PublicKey(refAddress), isWritable: false, isSigner: false }
      ];
      const data = import_buffer6.Buffer.alloc(MctpBridgeLedgerLayout.span);
      MctpBridgeLedgerLayout.encode(
        {
          instruction: getAnchorInstructionData("init_bridge_ledger"),
          destAddress,
          amountInMin,
          gasDrop,
          feeRedeem,
          feeSolana,
          destinationChain: destinationChainId,
          keyRnd: params.randomKey.toBuffer(),
          mode: params.mode === "WITH_FEE" ? 1 : 2
        },
        data
      );
      return new import_web36.TransactionInstruction({
        keys: accounts,
        data,
        programId: new import_web36.PublicKey(addresses_default.MCTP_PROGRAM_ID)
      });
    }
    var MctpSwapLedgerLayout = (0, import_buffer_layout22.struct)([
      (0, import_buffer_layout22.blob)(8, "instruction"),
      (0, import_buffer_layout22.blob)(32, "destAddress"),
      (0, import_buffer_layout22.blob)(8, "amountInMin"),
      (0, import_buffer_layout22.blob)(8, "gasDrop"),
      (0, import_buffer_layout22.blob)(8, "feeRedeem"),
      (0, import_buffer_layout22.blob)(8, "feeSolana"),
      (0, import_buffer_layout22.u16)("destinationChain"),
      (0, import_buffer_layout22.blob)(32, "keyRnd"),
      (0, import_buffer_layout22.u8)("mode"),
      (0, import_buffer_layout22.blob)(32, "tokenOut"),
      (0, import_buffer_layout22.blob)(8, "amountOutMin"),
      (0, import_buffer_layout22.blob)(8, "deadline"),
      (0, import_buffer_layout22.blob)(32, "refAddress"),
      (0, import_buffer_layout22.u8)("feeRateRef")
    ]);
    function createMctpSwapLedgerInstruction(params) {
      const user = new import_web36.PublicKey(params.swapperAddress);
      const mint = new import_web36.PublicKey(params.mintAddress);
      const ledgerAccount = getAssociatedTokenAddress(mint, params.ledger, true);
      const destinationChainId = getWormholeChainIdByName(params.toChain);
      const destAddress = import_buffer6.Buffer.from(
        hexToUint8Array(
          nativeAddressToHexString(params.destinationAddress, destinationChainId)
        )
      );
      const amountInMin = getSafeU64Blob(params.amountInMin64);
      const gasDrop = getSafeU64Blob(
        getAmountOfFractionalAmount(params.gasDrop, Math.min(getGasDecimal(params.toChain), 8))
      );
      const feeRedeem = getSafeU64Blob(
        getAmountOfFractionalAmount(params.feeRedeem, CCTP_TOKEN_DECIMALS)
      );
      const feeSolana = getSafeU64Blob(params.feeSolana);
      const tokenOut = import_buffer6.Buffer.from(hexToUint8Array(
        nativeAddressToHexString(params.tokenOut, destinationChainId)
      ));
      const refAddress = params.referrerAddress ? import_buffer6.Buffer.from(hexToUint8Array(
        nativeAddressToHexString(params.referrerAddress, destinationChainId)
      )) : import_web36.SystemProgram.programId.toBuffer();
      const amountOutMin = getSafeU64Blob(
        getAmountOfFractionalAmount(params.amountOutMin, Math.min(8, params.tokenOutDecimals))
      );
      const deadline = getSafeU64Blob(params.deadline);
      const accounts = [
        { pubkey: user, isWritable: true, isSigner: true },
        { pubkey: params.ledger, isWritable: true, isSigner: false },
        { pubkey: ledgerAccount, isWritable: false, isSigner: false },
        { pubkey: mint, isWritable: false, isSigner: false },
        { pubkey: import_web36.SystemProgram.programId, isWritable: false, isSigner: false }
      ];
      const data = import_buffer6.Buffer.alloc(MctpSwapLedgerLayout.span);
      MctpSwapLedgerLayout.encode(
        {
          instruction: getAnchorInstructionData("init_order_ledger"),
          destAddress,
          amountInMin,
          gasDrop,
          feeRedeem,
          feeSolana,
          destinationChain: destinationChainId,
          keyRnd: params.randomKey.toBuffer(),
          mode: 3,
          tokenOut,
          refAddress,
          amountOutMin,
          deadline,
          feeRateRef: params.feeRateRef
        },
        data
      );
      return new import_web36.TransactionInstruction({
        keys: accounts,
        data,
        programId: new import_web36.PublicKey(addresses_default.MCTP_PROGRAM_ID)
      });
    }
    async function createMctpFromSolanaInstructions(quote, swapperAddress, destinationAddress, referrerAddress, connection, options = {}) {
      const forceSkipCctpInstructions = (options == null ? void 0 : options.forceSkipCctpInstructions) || false;
      const allowSwapperOffCurve = (options == null ? void 0 : options.allowSwapperOffCurve) || false;
      if (quote.toChain === "solana") {
        throw new Error("Unsupported destination chain: " + quote.toChain);
      }
      let _lookupTablesAddress = [];
      let instructions = [];
      let signers = [];
      let lookupTables = [];
      let _swapAddressLookupTables = [];
      let swapInstructions = [];
      let createSwapTpmTokenAccountInstructions = [];
      const tmpSwapTokenAccount = import_web36.Keypair.generate();
      let swapMessageV0Params = null;
      _lookupTablesAddress.push(addresses_default.LOOKUP_TABLE);
      const mctpProgram = new import_web36.PublicKey(addresses_default.MCTP_PROGRAM_ID);
      const user = new import_web36.PublicKey(swapperAddress);
      const randomKey = import_web36.Keypair.generate();
      const deadline = quote.deadline64 ? BigInt(quote.deadline64) : BigInt(0);
      if (quote.hasAuction && !Number(quote.deadline64)) {
        throw new Error("Swap mode requires a timeout");
      }
      const ledgerSeedPrefix = quote.hasAuction ? "LEDGER_ORDER" : "LEDGER_BRIDGE";
      const [ledger] = import_web36.PublicKey.findProgramAddressSync(
        [import_buffer6.Buffer.from(ledgerSeedPrefix), user.toBytes(), randomKey.publicKey.toBytes()],
        mctpProgram
      );
      const ledgerAccount = getAssociatedTokenAddress(
        new import_web36.PublicKey(quote.mctpInputContract),
        ledger,
        true
      );
      const mode = quote.cheaperChain === "solana" ? "LOCK_FEE" : "WITH_FEE";
      const tokenOut = quote.toChain === "sui" ? quote.toToken.verifiedAddress : quote.toToken.contract;
      if (quote.fromToken.contract === quote.mctpInputContract) {
        const feeSolana = forceSkipCctpInstructions ? BigInt(quote.solanaRelayerFee64) : BigInt(0);
        if (quote.suggestedPriorityFee > 0) {
          instructions.push(import_web36.ComputeBudgetProgram.setComputeUnitPrice({
            microLamports: quote.suggestedPriorityFee
          }));
        }
        instructions.push(
          createAssociatedTokenAccountInstruction(user, ledgerAccount, ledger, new import_web36.PublicKey(quote.mctpInputContract))
        );
        instructions.push(
          createSplTransferInstruction(
            getAssociatedTokenAddress(
              new import_web36.PublicKey(quote.mctpInputContract),
              user,
              allowSwapperOffCurve
            ),
            ledgerAccount,
            user,
            BigInt(quote.effectiveAmountIn64)
          )
        );
        if (quote.hasAuction) {
          instructions.push(createMctpSwapLedgerInstruction({
            ledger,
            swapperAddress,
            mintAddress: quote.mctpInputContract,
            randomKey: randomKey.publicKey,
            toChain: quote.toChain,
            destinationAddress,
            feeSolana,
            feeRedeem: quote.redeemRelayerFee,
            gasDrop: quote.gasDrop,
            amountInMin64: BigInt(quote.effectiveAmountIn64),
            tokenOut,
            tokenOutDecimals: quote.toToken.decimals,
            referrerAddress,
            amountOutMin: quote.minAmountOut,
            deadline,
            feeRateRef: quote.referrerBps
          }));
          if (!forceSkipCctpInstructions) {
            const {
              instruction: _instruction,
              signer: _signer
            } = createMctpInitSwapInstruction(
              ledger,
              quote.toChain,
              quote.mctpInputContract,
              swapperAddress,
              feeSolana
            );
            instructions.push(_instruction);
            signers.push(_signer);
          }
        } else {
          instructions.push(createMctpBridgeLedgerInstruction({
            ledger,
            swapperAddress,
            mintAddress: quote.mctpInputContract,
            randomKey: randomKey.publicKey,
            toChain: quote.toChain,
            destinationAddress,
            feeSolana,
            feeRedeem: quote.redeemRelayerFee,
            gasDrop: quote.gasDrop,
            amountInMin64: BigInt(quote.effectiveAmountIn64),
            mode,
            referrerAddress
          }));
          if (!forceSkipCctpInstructions) {
            if (mode === "WITH_FEE") {
              const {
                instruction: _instruction,
                signers: _signers
              } = createMctpBridgeWithFeeInstruction(
                ledger,
                quote.toChain,
                quote.mctpInputContract,
                swapperAddress,
                feeSolana
              );
              instructions.push(_instruction);
              signers.push(..._signers);
            } else {
              const {
                instructions: _instructions,
                signer: _signer
              } = createMctpBridgeLockFeeInstruction(
                ledger,
                quote.toChain,
                quote.mctpInputContract,
                swapperAddress,
                feeSolana
              );
              instructions.push(..._instructions);
              signers.push(_signer);
            }
          }
        }
      } else {
        const clientSwapRaw = await getSwapSolana({
          minMiddleAmount: quote.minMiddleAmount,
          middleToken: quote.mctpInputContract,
          userWallet: swapperAddress,
          userLedger: ledger.toString(),
          slippageBps: quote.slippageBps,
          fromToken: quote.fromToken.contract,
          amountIn64: quote.effectiveAmountIn64,
          depositMode: quote.hasAuction ? "SWAP" : mode,
          fillMaxAccounts: (options == null ? void 0 : options.separateSwapTx) || false,
          tpmTokenAccount: (options == null ? void 0 : options.separateSwapTx) ? tmpSwapTokenAccount.publicKey.toString() : null
        });
        const clientSwap = decentralizeClientSwapInstructions(clientSwapRaw, connection);
        if ((options == null ? void 0 : options.separateSwapTx) && clientSwapRaw.maxAccountsFilled) {
          validateJupSwap(clientSwap, tmpSwapTokenAccount.publicKey, user);
          createSwapTpmTokenAccountInstructions = await createInitializeRandomTokenAccountInstructions(
            connection,
            user,
            new import_web36.PublicKey(quote.mctpInputContract),
            user,
            tmpSwapTokenAccount
          );
          swapInstructions.push(...clientSwap.computeBudgetInstructions);
          if (clientSwap.setupInstructions) {
            swapInstructions.push(...clientSwap.setupInstructions);
          }
          swapInstructions.push(clientSwap.swapInstruction);
          if (clientSwap.cleanupInstruction) {
            swapInstructions.push(clientSwap.cleanupInstruction);
          }
          _swapAddressLookupTables.push(...clientSwap.addressLookupTableAddresses);
          instructions.push(createAssociatedTokenAccountInstruction(
            user,
            ledgerAccount,
            ledger,
            new import_web36.PublicKey(quote.mctpInputContract)
          ));
          instructions.push(createTransferAllAndCloseInstruction(
            user,
            new import_web36.PublicKey(quote.mctpInputContract),
            tmpSwapTokenAccount.publicKey,
            ledgerAccount,
            user
          ));
        } else {
          validateJupSwap(clientSwap, ledgerAccount, user);
          instructions.push(...clientSwap.computeBudgetInstructions);
          if (clientSwap.setupInstructions) {
            instructions.push(...clientSwap.setupInstructions);
          }
          instructions.push(clientSwap.swapInstruction);
          if (clientSwap.cleanupInstruction) {
            instructions.push(clientSwap.cleanupInstruction);
          }
          _lookupTablesAddress.push(...clientSwap.addressLookupTableAddresses);
        }
        const feeSolana = swapInstructions.length > 0 ? BigInt(0) : BigInt(quote.solanaRelayerFee64);
        if (quote.hasAuction) {
          instructions.push(createMctpSwapLedgerInstruction({
            ledger,
            swapperAddress,
            mintAddress: quote.mctpInputContract,
            randomKey: randomKey.publicKey,
            toChain: quote.toChain,
            destinationAddress,
            feeSolana,
            feeRedeem: quote.redeemRelayerFee,
            gasDrop: quote.gasDrop,
            amountInMin64: getAmountOfFractionalAmount(quote.minMiddleAmount, CCTP_TOKEN_DECIMALS),
            tokenOut,
            tokenOutDecimals: quote.toToken.decimals,
            referrerAddress,
            amountOutMin: quote.minAmountOut,
            deadline,
            feeRateRef: quote.referrerBps
          }));
          if (swapInstructions.length > 0) {
            const {
              instruction: _instruction,
              signer: _signer
            } = createMctpInitSwapInstruction(
              ledger,
              quote.toChain,
              quote.mctpInputContract,
              swapperAddress,
              feeSolana
            );
            instructions.push(_instruction);
            signers.push(_signer);
          }
        } else {
          instructions.push(createMctpBridgeLedgerInstruction({
            ledger,
            swapperAddress,
            mintAddress: quote.mctpInputContract,
            randomKey: randomKey.publicKey,
            toChain: quote.toChain,
            destinationAddress,
            feeSolana,
            feeRedeem: quote.redeemRelayerFee,
            gasDrop: quote.gasDrop,
            amountInMin64: getAmountOfFractionalAmount(quote.minMiddleAmount, CCTP_TOKEN_DECIMALS),
            mode,
            referrerAddress
          }));
          if (swapInstructions.length > 0) {
            if (mode === "WITH_FEE") {
              const {
                instruction: _instruction,
                signers: _signers
              } = createMctpBridgeWithFeeInstruction(
                ledger,
                quote.toChain,
                quote.mctpInputContract,
                swapperAddress,
                feeSolana
              );
              instructions.push(_instruction);
              signers.push(..._signers);
            } else {
              const {
                instructions: _instructions,
                signer: _signer
              } = createMctpBridgeLockFeeInstruction(
                ledger,
                quote.toChain,
                quote.mctpInputContract,
                swapperAddress,
                feeSolana
              );
              instructions.push(..._instructions);
              signers.push(_signer);
            }
          }
        }
      }
      const totalLookupTables = await getAddressLookupTableAccounts(_lookupTablesAddress.concat(_swapAddressLookupTables), connection);
      lookupTables = totalLookupTables.slice(0, _lookupTablesAddress.length);
      if (swapInstructions.length > 0) {
        const swapLookupTables = totalLookupTables.slice(_lookupTablesAddress.length);
        swapMessageV0Params = {
          messageV0: {
            payerKey: user,
            instructions: swapInstructions,
            addressLookupTableAccounts: swapLookupTables
          },
          createTmpTokenAccountIxs: createSwapTpmTokenAccountInstructions,
          tmpTokenAccount: tmpSwapTokenAccount
        };
      }
      return { instructions, signers, lookupTables, swapMessageV0Params };
    }
    var import_web37 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var import_buffer_layout3 = require_Layout();
    var import_buffer7 = require_buffer2();
    var import_ethers3 = require_lib6();
    function createSwiftOrderHash(quote, swapperAddress, destinationAddress, referrerAddress, randomKeyHex) {
      const orderDataSize = 239;
      const data = import_buffer7.Buffer.alloc(orderDataSize);
      let offset2 = 0;
      const sourceChainId = getWormholeChainIdByName(quote.fromChain);
      const trader = import_buffer7.Buffer.from(hexToUint8Array(nativeAddressToHexString(swapperAddress, sourceChainId)));
      data.set(trader, 0);
      offset2 += 32;
      data.writeUInt16BE(sourceChainId, offset2);
      offset2 += 2;
      const _tokenIn = quote.swiftInputContract === import_ethers3.ZeroAddress ? nativeAddressToHexString(import_web37.SystemProgram.programId.toString(), getWormholeChainIdByName("solana")) : nativeAddressToHexString(quote.swiftInputContract, sourceChainId);
      const tokenIn = import_buffer7.Buffer.from(hexToUint8Array(_tokenIn));
      data.set(tokenIn, offset2);
      offset2 += 32;
      const destinationChainId = getWormholeChainIdByName(quote.toChain);
      const destAddress = import_buffer7.Buffer.from(hexToUint8Array(nativeAddressToHexString(destinationAddress, destinationChainId)));
      data.set(destAddress, offset2);
      offset2 += 32;
      data.writeUInt16BE(destinationChainId, offset2);
      offset2 += 2;
      const _tokenOut = quote.toToken.contract === import_ethers3.ZeroAddress ? nativeAddressToHexString(import_web37.SystemProgram.programId.toString(), getWormholeChainIdByName("solana")) : nativeAddressToHexString(quote.toToken.contract, destinationChainId);
      const tokenOut = import_buffer7.Buffer.from(hexToUint8Array(_tokenOut));
      data.set(tokenOut, offset2);
      offset2 += 32;
      data.writeBigUInt64BE(getAmountOfFractionalAmount(quote.minAmountOut, Math.min(quote.toToken.decimals, 8)), offset2);
      offset2 += 8;
      data.writeBigUInt64BE(getAmountOfFractionalAmount(quote.gasDrop, Math.min(getGasDecimal(quote.toChain), 8)), offset2);
      offset2 += 8;
      data.writeBigUInt64BE(BigInt(quote.cancelRelayerFee64), offset2);
      offset2 += 8;
      data.writeBigUInt64BE(BigInt(quote.refundRelayerFee64), offset2);
      offset2 += 8;
      data.writeBigUInt64BE(BigInt(quote.deadline64), offset2);
      offset2 += 8;
      const refAddress = referrerAddress ? import_buffer7.Buffer.from(hexToUint8Array(nativeAddressToHexString(referrerAddress, destinationChainId))) : import_web37.SystemProgram.programId.toBuffer();
      data.set(refAddress, offset2);
      offset2 += 32;
      data.writeUInt8(quote.referrerBps, offset2);
      offset2 += 1;
      const feeRateMayan = quote.protocolBps;
      data.writeUInt8(feeRateMayan, offset2);
      offset2 += 1;
      data.writeUInt8(quote.swiftAuctionMode, offset2);
      offset2 += 1;
      const _randomKey = import_buffer7.Buffer.from(hexToUint8Array(randomKeyHex));
      data.set(_randomKey, offset2);
      offset2 += 32;
      if (offset2 !== orderDataSize) {
        throw new Error(`Invalid order data size: ${offset2}`);
      }
      const hash = import_ethers3.ethers.keccak256(data);
      return import_buffer7.Buffer.from(hexToUint8Array(hash));
    }
    var InitSwiftLayout = (0, import_buffer_layout3.struct)([
      (0, import_buffer_layout3.blob)(8, "instruction"),
      (0, import_buffer_layout3.blob)(8, "amountInMin"),
      (0, import_buffer_layout3.u8)("nativeInput"),
      (0, import_buffer_layout3.blob)(8, "feeSubmit"),
      (0, import_buffer_layout3.blob)(32, "destAddress"),
      (0, import_buffer_layout3.u16)("destinationChain"),
      (0, import_buffer_layout3.blob)(32, "tokenOut"),
      (0, import_buffer_layout3.blob)(8, "amountOutMin"),
      (0, import_buffer_layout3.blob)(8, "gasDrop"),
      (0, import_buffer_layout3.blob)(8, "feeCancel"),
      (0, import_buffer_layout3.blob)(8, "feeRefund"),
      (0, import_buffer_layout3.blob)(8, "deadline"),
      (0, import_buffer_layout3.blob)(32, "refAddress"),
      (0, import_buffer_layout3.u8)("feeRateRef"),
      (0, import_buffer_layout3.u8)("feeRateMayan"),
      (0, import_buffer_layout3.u8)("auctionMode"),
      (0, import_buffer_layout3.blob)(32, "randomKey")
    ]);
    function createSwiftInitInstruction(params) {
      const { quote } = params;
      const mint = quote.swiftInputContract === import_ethers3.ZeroAddress ? solMint : new import_web37.PublicKey(quote.swiftInputContract);
      const destinationChainId = getWormholeChainIdByName(quote.toChain);
      if (destinationChainId !== quote.toToken.wChainId) {
        throw new Error(`Destination chain ID mismatch: ${destinationChainId} != ${quote.toToken.wChainId}`);
      }
      const accounts = [
        { pubkey: params.trader, isWritable: false, isSigner: true },
        { pubkey: params.relayer, isWritable: true, isSigner: true },
        { pubkey: params.state, isWritable: true, isSigner: false },
        { pubkey: params.stateAccount, isWritable: true, isSigner: false },
        { pubkey: params.relayerAccount, isWritable: true, isSigner: false },
        { pubkey: mint, isWritable: false, isSigner: false },
        { pubkey: new import_web37.PublicKey(addresses_default.FEE_MANAGER_PROGRAM_ID), isWritable: false, isSigner: false },
        { pubkey: new import_web37.PublicKey(addresses_default.TOKEN_PROGRAM_ID), isWritable: false, isSigner: false },
        { pubkey: import_web37.SystemProgram.programId, isWritable: false, isSigner: false }
      ];
      const data = import_buffer7.Buffer.alloc(InitSwiftLayout.span);
      const refAddress = params.referrerAddress ? import_buffer7.Buffer.from(hexToUint8Array(nativeAddressToHexString(params.referrerAddress, destinationChainId))) : import_web37.SystemProgram.programId.toBuffer();
      const minMiddleAmount = quote.fromToken.contract === quote.swiftInputContract ? BigInt(quote.effectiveAmountIn64) : getAmountOfFractionalAmount(quote.minMiddleAmount, quote.swiftInputDecimals);
      InitSwiftLayout.encode({
        instruction: getAnchorInstructionData("init_order"),
        amountInMin: getSafeU64Blob(minMiddleAmount),
        nativeInput: quote.swiftInputContract === import_ethers3.ZeroAddress ? 1 : 0,
        feeSubmit: getSafeU64Blob(BigInt(quote.submitRelayerFee64)),
        destAddress: import_buffer7.Buffer.from(hexToUint8Array(nativeAddressToHexString(params.destinationAddress, destinationChainId))),
        destinationChain: destinationChainId,
        tokenOut: import_buffer7.Buffer.from(hexToUint8Array(nativeAddressToHexString(quote.toToken.contract, destinationChainId))),
        amountOutMin: getSafeU64Blob(getAmountOfFractionalAmount(quote.minAmountOut, Math.min(quote.toToken.decimals, 8))),
        gasDrop: getSafeU64Blob(getAmountOfFractionalAmount(quote.gasDrop, Math.min(getGasDecimal(quote.toChain), 8))),
        feeCancel: getSafeU64Blob(BigInt(quote.cancelRelayerFee64)),
        feeRefund: getSafeU64Blob(BigInt(quote.refundRelayerFee64)),
        deadline: getSafeU64Blob(params.deadline),
        refAddress,
        feeRateRef: quote.referrerBps,
        feeRateMayan: quote.protocolBps,
        auctionMode: quote.swiftAuctionMode,
        randomKey: params.randomKey.toBuffer()
      }, data);
      return new import_web37.TransactionInstruction({
        keys: accounts,
        data,
        programId: new import_web37.PublicKey(addresses_default.SWIFT_PROGRAM_ID)
      });
    }
    async function createSwiftFromSolanaInstructions(quote, swapperAddress, destinationAddress, referrerAddress, connection, options = {}) {
      if (quote.type !== "SWIFT") {
        throw new Error("Unsupported quote type for Swift: " + quote.type);
      }
      if (quote.toChain === "solana") {
        throw new Error("Unsupported destination chain: " + quote.toChain);
      }
      const allowSwapperOffCurve = options.allowSwapperOffCurve || false;
      let instructions = [];
      let lookupTables = [];
      let _lookupTablesAddress = [];
      _lookupTablesAddress.push(addresses_default.LOOKUP_TABLE);
      let _swapAddressLookupTables = [];
      let swapInstructions = [];
      let createSwapTpmTokenAccountInstructions = [];
      const tmpSwapTokenAccount = import_web37.Keypair.generate();
      let swapMessageV0Params = null;
      const swiftProgram = new import_web37.PublicKey(addresses_default.SWIFT_PROGRAM_ID);
      const trader = new import_web37.PublicKey(swapperAddress);
      const randomKey = import_web37.Keypair.generate();
      if (!Number(quote.deadline64)) {
        throw new Error("Swift mode requires a timeout");
      }
      const deadline = BigInt(quote.deadline64);
      const hash = createSwiftOrderHash(
        quote,
        swapperAddress,
        destinationAddress,
        referrerAddress,
        randomKey.publicKey.toBuffer().toString("hex")
      );
      const [state] = import_web37.PublicKey.findProgramAddressSync(
        [import_buffer7.Buffer.from("STATE_SOURCE"), hash],
        swiftProgram
      );
      const swiftInputMint = quote.swiftInputContract === import_ethers3.ZeroAddress ? solMint : new import_web37.PublicKey(quote.swiftInputContract);
      const stateAccount = getAssociatedTokenAddress(
        swiftInputMint,
        state,
        true
      );
      const relayer = quote.gasless ? new import_web37.PublicKey(quote.relayer) : trader;
      const relayerAccount = getAssociatedTokenAddress(swiftInputMint, relayer, false);
      if (quote.fromToken.contract === quote.swiftInputContract) {
        if (quote.suggestedPriorityFee > 0) {
          instructions.push(import_web37.ComputeBudgetProgram.setComputeUnitPrice({
            microLamports: quote.suggestedPriorityFee
          }));
        }
        instructions.push(
          createAssociatedTokenAccountInstruction(relayer, stateAccount, state, swiftInputMint)
        );
        if (quote.swiftInputContract === import_ethers3.ZeroAddress) {
          instructions.push(
            import_web37.SystemProgram.transfer({
              fromPubkey: trader,
              toPubkey: stateAccount,
              lamports: BigInt(quote.effectiveAmountIn64)
            }),
            createSyncNativeInstruction(stateAccount)
          );
        } else {
          instructions.push(
            createSplTransferInstruction(
              getAssociatedTokenAddress(
                swiftInputMint,
                trader,
                allowSwapperOffCurve
              ),
              stateAccount,
              trader,
              BigInt(quote.effectiveAmountIn64)
            )
          );
        }
      } else {
        const clientSwapRaw = await getSwapSolana({
          minMiddleAmount: quote.minMiddleAmount,
          middleToken: quote.swiftInputContract,
          userWallet: swapperAddress,
          slippageBps: quote.slippageBps,
          fromToken: quote.fromToken.contract,
          amountIn64: quote.effectiveAmountIn64,
          depositMode: quote.gasless ? "SWIFT_GASLESS" : "SWIFT",
          orderHash: `0x${hash.toString("hex")}`,
          fillMaxAccounts: (options == null ? void 0 : options.separateSwapTx) || false,
          tpmTokenAccount: (options == null ? void 0 : options.separateSwapTx) ? tmpSwapTokenAccount.publicKey.toString() : null
        });
        const clientSwap = decentralizeClientSwapInstructions(clientSwapRaw, connection);
        if ((options == null ? void 0 : options.separateSwapTx) && clientSwapRaw.maxAccountsFilled) {
          validateJupSwap(clientSwap, tmpSwapTokenAccount.publicKey, trader);
          createSwapTpmTokenAccountInstructions = await createInitializeRandomTokenAccountInstructions(
            connection,
            relayer,
            swiftInputMint,
            trader,
            tmpSwapTokenAccount
          );
          swapInstructions.push(...clientSwap.computeBudgetInstructions);
          if (clientSwap.setupInstructions) {
            swapInstructions.push(...clientSwap.setupInstructions);
          }
          swapInstructions.push(clientSwap.swapInstruction);
          if (clientSwap.cleanupInstruction) {
            swapInstructions.push(clientSwap.cleanupInstruction);
          }
          _swapAddressLookupTables.push(...clientSwap.addressLookupTableAddresses);
          instructions.push(createAssociatedTokenAccountInstruction(relayer, stateAccount, state, swiftInputMint));
          instructions.push(createTransferAllAndCloseInstruction(
            trader,
            swiftInputMint,
            tmpSwapTokenAccount.publicKey,
            stateAccount,
            relayer
          ));
        } else {
          instructions.push(...clientSwap.computeBudgetInstructions);
          if (clientSwap.setupInstructions) {
            instructions.push(...clientSwap.setupInstructions);
          }
          instructions.push(clientSwap.swapInstruction);
          if (clientSwap.cleanupInstruction) {
            instructions.push(clientSwap.cleanupInstruction);
          }
          _lookupTablesAddress.push(...clientSwap.addressLookupTableAddresses);
        }
      }
      instructions.push(createSwiftInitInstruction({
        quote,
        state,
        trader,
        stateAccount,
        randomKey: randomKey.publicKey,
        relayerAccount,
        relayer,
        destinationAddress,
        deadline,
        referrerAddress
      }));
      const totalLookupTables = await getAddressLookupTableAccounts(_lookupTablesAddress.concat(_swapAddressLookupTables), connection);
      lookupTables = totalLookupTables.slice(0, _lookupTablesAddress.length);
      if (swapInstructions.length > 0) {
        const swapLookupTables = totalLookupTables.slice(_lookupTablesAddress.length);
        swapMessageV0Params = {
          messageV0: {
            payerKey: relayer,
            instructions: swapInstructions,
            addressLookupTableAccounts: swapLookupTables
          },
          createTmpTokenAccountIxs: createSwapTpmTokenAccountInstructions,
          tmpTokenAccount: tmpSwapTokenAccount
        };
      }
      return { instructions, signers: [], lookupTables, swapMessageV0Params };
    }
    var import_bs5822 = __toESM2(require_cjs5());
    var STATE_SIZE = 420;
    var SwapLayout = (0, import_buffer_layout4.struct)([
      (0, import_buffer_layout4.u8)("instruction"),
      (0, import_buffer_layout4.u8)("stateNonce"),
      (0, import_buffer_layout4.blob)(8, "amount"),
      (0, import_buffer_layout4.blob)(8, "minAmountOut"),
      (0, import_buffer_layout4.blob)(8, "deadline"),
      (0, import_buffer_layout4.blob)(8, "feeSwap"),
      (0, import_buffer_layout4.blob)(8, "feeReturn"),
      (0, import_buffer_layout4.blob)(8, "feeCancel"),
      (0, import_buffer_layout4.blob)(8, "gasDrop"),
      (0, import_buffer_layout4.u16)("destinationChain"),
      (0, import_buffer_layout4.blob)(32, "destinationAddress"),
      (0, import_buffer_layout4.u8)("unwrapRedeem"),
      (0, import_buffer_layout4.u8)("unwrapRefund"),
      (0, import_buffer_layout4.u8)("mayanFeeNonce"),
      (0, import_buffer_layout4.u8)("referrerFeeNonce")
    ]);
    async function createSwapFromSolanaInstructions(quote, swapperWalletAddress, destinationAddress, referrerAddresses, connection, options = {}) {
      const referrerAddress = getQuoteSuitableReferrerAddress(quote, referrerAddresses);
      if (quote.type === "MCTP") {
        return createMctpFromSolanaInstructions(quote, swapperWalletAddress, destinationAddress, referrerAddress, connection, options);
      }
      if (quote.type === "SWIFT") {
        return createSwiftFromSolanaInstructions(quote, swapperWalletAddress, destinationAddress, referrerAddress, connection, options);
      }
      let instructions = [];
      const solanaConnection = connection ?? new import_web38.Connection("https://rpc.ankr.com/solana");
      const mayanProgram = new import_web38.PublicKey(addresses_default.MAYAN_PROGRAM_ID);
      const tokenProgram = new import_web38.PublicKey(addresses_default.TOKEN_PROGRAM_ID);
      const swapper = new import_web38.PublicKey(swapperWalletAddress);
      const auctionAddr = new import_web38.PublicKey(addresses_default.AUCTION_PROGRAM_ID);
      if (quote.suggestedPriorityFee > 0) {
        instructions.push(import_web38.ComputeBudgetProgram.setComputeUnitPrice({
          microLamports: quote.suggestedPriorityFee
        }));
      }
      let referrerAddr;
      if (referrerAddress) {
        referrerAddr = new import_web38.PublicKey(referrerAddress);
      } else {
        referrerAddr = import_web38.SystemProgram.programId;
      }
      const [mayanFee, mayanFeeNonce] = import_web38.PublicKey.findProgramAddressSync(
        [import_buffer8.Buffer.from("MAYANFEE")],
        mayanProgram
      );
      const [referrerFee, referrerFeeNonce] = import_web38.PublicKey.findProgramAddressSync(
        [
          import_buffer8.Buffer.from("REFERRERFEE"),
          referrerAddr.toBuffer()
        ],
        mayanProgram
      );
      const msg1 = import_web38.Keypair.generate();
      const msg2 = import_web38.Keypair.generate();
      const [state, stateNonce] = import_web38.PublicKey.findProgramAddressSync(
        [
          import_buffer8.Buffer.from("V2STATE"),
          import_buffer8.Buffer.from(msg1.publicKey.toBytes()),
          import_buffer8.Buffer.from(msg2.publicKey.toBytes())
        ],
        mayanProgram
      );
      const fromMint = new import_web38.PublicKey(quote.fromToken.mint);
      const toMint = new import_web38.PublicKey(quote.toToken.mint);
      const fromAccount = getAssociatedTokenAddress(fromMint, swapper);
      const toAccount = getAssociatedTokenAddress(fromMint, state, true);
      const [
        [fromAccountData, toAccountData],
        stateRent,
        relayer
      ] = await Promise.all([
        solanaConnection.getMultipleAccountsInfo([fromAccount, toAccount], "finalized"),
        solanaConnection.getMinimumBalanceForRentExemption(STATE_SIZE),
        decideRelayer()
      ]);
      if (!fromAccountData || fromAccountData.data.length === 0) {
        instructions.push(createAssociatedTokenAccountInstruction(
          swapper,
          fromAccount,
          swapper,
          fromMint
        ));
      }
      if (!toAccountData || toAccountData.data.length === 0) {
        instructions.push(createAssociatedTokenAccountInstruction(
          swapper,
          toAccount,
          state,
          fromMint
        ));
      }
      if (quote.fromToken.contract === import_ethers4.ZeroAddress) {
        instructions.push(import_web38.SystemProgram.transfer({
          fromPubkey: swapper,
          toPubkey: fromAccount,
          lamports: BigInt(quote.effectiveAmountIn64)
        }));
        instructions.push(createSyncNativeInstruction(fromAccount));
      }
      const amount = BigInt(quote.effectiveAmountIn64);
      const delegate = import_web38.Keypair.generate();
      instructions.push(createApproveInstruction(
        fromAccount,
        delegate.publicKey,
        swapper,
        amount
      ));
      instructions.push(import_web38.SystemProgram.transfer({
        fromPubkey: swapper,
        toPubkey: delegate.publicKey,
        lamports: stateRent
      }));
      const swapKeys = [
        { pubkey: delegate.publicKey, isWritable: false, isSigner: true },
        { pubkey: msg1.publicKey, isWritable: false, isSigner: true },
        { pubkey: msg2.publicKey, isWritable: false, isSigner: true },
        { pubkey: state, isWritable: true, isSigner: false },
        { pubkey: fromAccount, isWritable: true, isSigner: false },
        { pubkey: swapper, isWritable: false, isSigner: false },
        { pubkey: toAccount, isWritable: true, isSigner: false },
        { pubkey: fromMint, isWritable: false, isSigner: false },
        { pubkey: toMint, isWritable: false, isSigner: false },
        { pubkey: auctionAddr, isWritable: false, isSigner: false },
        { pubkey: referrerAddr, isWritable: false, isSigner: false },
        { pubkey: mayanFee, isWritable: false, isSigner: false },
        { pubkey: referrerFee, isWritable: false, isSigner: false },
        { pubkey: delegate.publicKey, isWritable: true, isSigner: true },
        { pubkey: relayer, isWritable: false, isSigner: false },
        { pubkey: import_web38.SYSVAR_CLOCK_PUBKEY, isWritable: false, isSigner: false },
        { pubkey: import_web38.SYSVAR_RENT_PUBKEY, isWritable: false, isSigner: false },
        { pubkey: tokenProgram, isWritable: false, isSigner: false },
        { pubkey: import_web38.SystemProgram.programId, isWritable: false, isSigner: false }
      ];
      const destinationChainId = getWormholeChainIdByName(quote.toChain);
      if (destinationChainId === 1) {
        const destinationAccount = await solanaConnection.getAccountInfo(new import_web38.PublicKey(destinationAddress));
        if (destinationAccount && destinationAccount.owner && destinationAccount.owner.equals(tokenProgram)) {
          throw new Error(
            "Destination address is not about token account. It should be a owner address"
          );
        }
      }
      const destAddress = import_buffer8.Buffer.from(
        hexToUint8Array(
          nativeAddressToHexString(destinationAddress, destinationChainId)
        )
      );
      const minAmountOut = getAmountOfFractionalAmount(
        quote.minAmountOut,
        quote.mintDecimals.to
      );
      const feeSwap = getAmountOfFractionalAmount(
        quote.swapRelayerFee,
        quote.mintDecimals.from
      );
      const feeReturn = getAmountOfFractionalAmount(
        quote.redeemRelayerFee,
        quote.mintDecimals.to
      );
      const feeCancel = getAmountOfFractionalAmount(
        quote.refundRelayerFee,
        quote.mintDecimals.from
      );
      const gasDrop = getAmountOfFractionalAmount(
        quote.gasDrop,
        getGasDecimalsInSolana(quote.toChain)
      );
      const unwrapRedeem = quote.toToken.contract === import_ethers4.ZeroAddress;
      const unwrapRefund = quote.fromToken.contract === import_ethers4.ZeroAddress;
      if (!Number(quote.deadline64)) {
        throw new Error("Deadline is not valid");
      }
      const deadline = BigInt(quote.deadline64);
      const swapData = import_buffer8.Buffer.alloc(SwapLayout.span);
      const swapFields = {
        instruction: 101,
        stateNonce,
        amount: getSafeU64Blob(amount),
        minAmountOut: getSafeU64Blob(minAmountOut),
        deadline: getSafeU64Blob(deadline),
        feeSwap: getSafeU64Blob(feeSwap),
        feeReturn: getSafeU64Blob(feeReturn),
        feeCancel: getSafeU64Blob(feeCancel),
        gasDrop: getSafeU64Blob(gasDrop),
        destinationChain: destinationChainId,
        destinationAddress: destAddress,
        unwrapRedeem: unwrapRedeem ? 1 : 0,
        unwrapRefund: unwrapRefund ? 1 : 0,
        mayanFeeNonce,
        referrerFeeNonce
      };
      SwapLayout.encode(swapFields, swapData);
      const swapInstruction = new import_web38.TransactionInstruction({
        keys: swapKeys,
        data: swapData,
        programId: mayanProgram
      });
      instructions.push(swapInstruction);
      return {
        instructions,
        signers: [delegate, msg1, msg2],
        lookupTables: [],
        swapMessageV0Params: null
      };
    }
    async function swapFromSolana(quote, swapperWalletAddress, destinationAddress, referrerAddresses, signTransaction, connection, extraRpcs, sendOptions, jitoOptions, instructionOptions) {
      var _a;
      const solanaConnection = connection ?? new import_web38.Connection("https://rpc.ankr.com/solana");
      const jitoEnabled = !!(!quote.gasless && jitoOptions && jitoOptions.tipLamports > 0 && jitoOptions.signAllTransactions);
      const {
        instructions,
        signers,
        lookupTables,
        swapMessageV0Params
      } = await createSwapFromSolanaInstructions(
        quote,
        swapperWalletAddress,
        destinationAddress,
        referrerAddresses,
        connection,
        {
          allowSwapperOffCurve: instructionOptions == null ? void 0 : instructionOptions.allowSwapperOffCurve,
          forceSkipCctpInstructions: instructionOptions == null ? void 0 : instructionOptions.forceSkipCctpInstructions,
          separateSwapTx: jitoEnabled && (jitoOptions == null ? void 0 : jitoOptions.separateSwapTx)
        }
      );
      const swapper = new import_web38.PublicKey(swapperWalletAddress);
      const feePayer = quote.gasless ? new import_web38.PublicKey(quote.relayer) : swapper;
      const { blockhash, lastValidBlockHeight } = await connection.getLatestBlockhash();
      const message = import_web38.MessageV0.compile({
        instructions,
        payerKey: feePayer,
        recentBlockhash: blockhash,
        addressLookupTableAccounts: lookupTables
      });
      const transaction = new import_web38.VersionedTransaction(message);
      transaction.sign(signers);
      let signedTrx;
      if (jitoEnabled) {
        const allTransactions = [];
        if (swapMessageV0Params) {
          const createTmpTokenAccount = new import_web38.Transaction({
            feePayer: swapper,
            blockhash,
            lastValidBlockHeight
          }).add(...swapMessageV0Params.createTmpTokenAccountIxs);
          createTmpTokenAccount.partialSign(swapMessageV0Params.tmpTokenAccount);
          allTransactions.push(createTmpTokenAccount);
          const swapMessage = import_web38.MessageV0.compile({
            ...swapMessageV0Params.messageV0,
            recentBlockhash: blockhash
          });
          allTransactions.push(new import_web38.VersionedTransaction(swapMessage));
        }
        const jitoTipTransfer = getJitoTipTransfer(swapperWalletAddress, blockhash, lastValidBlockHeight, jitoOptions);
        allTransactions.push(transaction);
        allTransactions.push(jitoTipTransfer);
        const signedTrxs = await jitoOptions.signAllTransactions(allTransactions);
        signedTrx = signedTrxs[signedTrxs.length - 2];
        let mayanTxHash = null;
        if (signedTrx instanceof import_web38.Transaction && ((_a = signedTrx == null ? void 0 : signedTrx.signatures[0]) == null ? void 0 : _a.publicKey)) {
          mayanTxHash = import_bs5822.default.encode(Uint8Array.from(signedTrx.signatures[0].signature));
        } else if (signedTrx instanceof import_web38.VersionedTransaction && (signedTrx == null ? void 0 : signedTrx.signatures[0])) {
          mayanTxHash = import_bs5822.default.encode(Uint8Array.from(signedTrx.signatures[0]));
        }
        if (mayanTxHash === null) {
          throw new Error("Failed to get mayan tx hash");
        }
        if (swapMessageV0Params) {
          const jitoBundleId = await sendJitoBundle(signedTrxs, jitoOptions, true);
          await confirmJitoBundleId(jitoBundleId, jitoOptions, lastValidBlockHeight, mayanTxHash, connection);
          broadcastJitoBundleId(jitoBundleId);
          return {
            signature: mayanTxHash,
            serializedTrx: null
          };
        } else {
          sendJitoBundle(signedTrxs, jitoOptions).then(() => {
            console.log("Jito bundle sent");
          }).catch(() => {
          });
        }
      } else {
        signedTrx = await signTransaction(transaction);
      }
      if (quote.gasless) {
        const serializedTrx = import_buffer8.Buffer.from(signedTrx.serialize()).toString("base64");
        const { orderHash } = await submitSwiftSolanaSwap(serializedTrx);
        return { signature: orderHash, serializedTrx: null };
      }
      return await submitTransactionWithRetry({
        trx: signedTrx.serialize(),
        connection: solanaConnection,
        extraRpcs: extraRpcs ?? [],
        errorChance: 2,
        options: sendOptions
      });
    }
    function getEvmSwiftParams(quote, swapperAddress, destinationAddress, referrerAddress, signerChainId) {
      const signerWormholeChainId = getWormholeChainIdById(Number(signerChainId));
      const sourceChainId = getWormholeChainIdByName(quote.fromChain);
      const destChainId = getWormholeChainIdByName(quote.toChain);
      if (sourceChainId !== signerWormholeChainId) {
        throw new Error(`Signer chain id(${Number(signerChainId)}) and quote from chain are not same! ${sourceChainId} !== ${signerWormholeChainId}`);
      }
      if (!quote.swiftMayanContract) {
        throw new Error("SWIFT contract address is missing");
      }
      if (quote.toToken.wChainId !== destChainId) {
        throw new Error(`Destination chain ID mismatch: ${destChainId} != ${quote.toToken.wChainId}`);
      }
      const contractAddress = quote.swiftMayanContract;
      if (!Number(quote.deadline64)) {
        throw new Error("Swift order requires timeout");
      }
      const deadline = BigInt(quote.deadline64);
      const tokenIn = quote.swiftInputContract;
      const amountIn = BigInt(quote.effectiveAmountIn64);
      let referrerHex;
      if (referrerAddress) {
        referrerHex = nativeAddressToHexString(
          referrerAddress,
          destChainId
        );
      } else {
        referrerHex = nativeAddressToHexString(
          import_web39.SystemProgram.programId.toString(),
          1
        );
      }
      const random = nativeAddressToHexString(import_web39.Keypair.generate().publicKey.toString(), 1);
      const tokenOut = quote.toToken.contract === import_ethers5.ZeroAddress ? nativeAddressToHexString(import_web39.SystemProgram.programId.toString(), 1) : nativeAddressToHexString(quote.toToken.contract, destChainId);
      const minAmountOut = getAmountOfFractionalAmount(
        quote.minAmountOut,
        Math.min(8, quote.toToken.decimals)
      );
      const gasDrop = getAmountOfFractionalAmount(
        quote.gasDrop,
        Math.min(8, getGasDecimal(quote.toChain))
      );
      const destinationAddressHex = nativeAddressToHexString(destinationAddress, destChainId);
      const orderParams = {
        trader: nativeAddressToHexString(swapperAddress, sourceChainId),
        tokenOut,
        minAmountOut,
        gasDrop,
        cancelFee: BigInt(quote.cancelRelayerFee64),
        refundFee: BigInt(quote.refundRelayerFee64),
        deadline,
        destAddr: destinationAddressHex,
        destChainId,
        referrerAddr: referrerHex,
        referrerBps: quote.referrerBps || 0,
        auctionMode: quote.swiftAuctionMode,
        random
      };
      return {
        contractAddress,
        tokenIn,
        amountIn,
        order: orderParams
      };
    }
    function getSwiftFromEvmTxPayload(quote, swapperAddress, destinationAddress, referrerAddress, signerChainId, permit) {
      if (quote.type !== "SWIFT") {
        throw new Error("Quote type is not SWIFT");
      }
      if (!Number.isFinite(Number(signerChainId))) {
        throw new Error("Invalid signer chain id");
      }
      if (!Number(quote.deadline64)) {
        throw new Error("Swift order requires timeout");
      }
      signerChainId = Number(signerChainId);
      const _permit = permit || ZeroPermit;
      const forwarder = new import_ethers5.Contract(addresses_default.MAYAN_FORWARDER_CONTRACT, MayanForwarderArtifact_default.abi);
      const {
        tokenIn: swiftTokenIn,
        amountIn,
        order,
        contractAddress: swiftContractAddress
      } = getEvmSwiftParams(quote, swapperAddress, destinationAddress, referrerAddress, signerChainId);
      let swiftCallData;
      const swiftContract = new import_ethers5.Contract(swiftContractAddress, MayanSwiftArtifact_default.abi);
      if (quote.swiftInputContract === import_ethers5.ZeroAddress) {
        swiftCallData = swiftContract.interface.encodeFunctionData(
          "createOrderWithEth",
          [order]
        );
      } else {
        swiftCallData = swiftContract.interface.encodeFunctionData(
          "createOrderWithToken",
          [swiftTokenIn, amountIn, order]
        );
      }
      let forwarderMethod;
      let forwarderParams;
      let value;
      if (quote.fromToken.contract === quote.swiftInputContract) {
        if (quote.fromToken.contract === import_ethers5.ZeroAddress) {
          forwarderMethod = "forwardEth";
          forwarderParams = [swiftContractAddress, swiftCallData];
          value = (0, import_ethers5.toBeHex)(amountIn);
        } else {
          forwarderMethod = "forwardERC20";
          forwarderParams = [swiftTokenIn, amountIn, _permit, swiftContractAddress, swiftCallData];
          value = (0, import_ethers5.toBeHex)(0);
        }
      } else {
        const { evmSwapRouterAddress, evmSwapRouterCalldata } = quote;
        if (!quote.minMiddleAmount || !evmSwapRouterAddress || !evmSwapRouterCalldata) {
          throw new Error("Swift swap requires middle amount, router address and calldata");
        }
        const tokenIn = quote.fromToken.contract;
        const minMiddleAmount = getAmountOfFractionalAmount(quote.minMiddleAmount, quote.swiftInputDecimals);
        if (quote.fromToken.contract === import_ethers5.ZeroAddress) {
          forwarderMethod = "swapAndForwardEth";
          forwarderParams = [
            amountIn,
            evmSwapRouterAddress,
            evmSwapRouterCalldata,
            quote.swiftInputContract,
            minMiddleAmount,
            swiftContractAddress,
            swiftCallData
          ];
          value = (0, import_ethers5.toBeHex)(amountIn);
        } else {
          forwarderMethod = "swapAndForwardERC20";
          forwarderParams = [
            tokenIn,
            amountIn,
            _permit,
            evmSwapRouterAddress,
            evmSwapRouterCalldata,
            quote.swiftInputContract,
            minMiddleAmount,
            swiftContractAddress,
            swiftCallData
          ];
          value = (0, import_ethers5.toBeHex)(0);
        }
      }
      const data = forwarder.interface.encodeFunctionData(forwarderMethod, forwarderParams);
      return {
        data,
        to: addresses_default.MAYAN_FORWARDER_CONTRACT,
        value,
        chainId: signerChainId,
        _forwarder: {
          method: forwarderMethod,
          params: forwarderParams
        }
      };
    }
    function getSwiftOrderTypeData(quote, orderHash, signerChainId) {
      if (!Number.isFinite(Number(signerChainId))) {
        throw new Error("Invalid signer chain id");
      }
      const totalAmountIn = BigInt(quote.effectiveAmountIn64);
      const submitFee = BigInt(quote.submitRelayerFee64);
      return {
        domain: {
          name: "Mayan Swift",
          chainId: Number(signerChainId),
          verifyingContract: quote.swiftMayanContract
        },
        types: {
          CreateOrder: [
            { name: "OrderId", type: "bytes32" },
            { name: "InputAmount", type: "uint256" },
            { name: "SubmissionFee", type: "uint256" }
          ]
        },
        value: {
          OrderId: orderHash,
          InputAmount: totalAmountIn - submitFee,
          SubmissionFee: submitFee
        }
      };
    }
    function getSwiftFromEvmGasLessParams(quote, swapperAddress, destinationAddress, referrerAddress, signerChainId, permit) {
      if (quote.type !== "SWIFT") {
        throw new Error("Quote type is not SWIFT");
      }
      if (!quote.gasless) {
        throw new Error("Quote does not support gasless");
      }
      if (!Number.isFinite(Number(signerChainId))) {
        throw new Error("Invalid signer chain id");
      }
      if (!Number(quote.deadline64)) {
        throw new Error("Swift order requires timeout");
      }
      if (quote.fromToken.contract !== quote.swiftInputContract) {
        throw new Error("Swift gasless order creation does not support source swap");
      }
      const {
        tokenIn,
        amountIn,
        order
      } = getEvmSwiftParams(
        quote,
        swapperAddress,
        destinationAddress,
        referrerAddress,
        Number(signerChainId)
      );
      const sourceChainId = getWormholeChainIdByName(quote.fromChain);
      const orderHashBuf = createSwiftOrderHash(quote, swapperAddress, destinationAddress, referrerAddress, order.random);
      const orderHash = `0x${orderHashBuf.toString("hex")}`;
      const orderTypedData = getSwiftOrderTypeData(quote, orderHash, signerChainId);
      return {
        permitParams: permit,
        orderParams: {
          ...order,
          sourceChainId,
          amountIn,
          tokenIn,
          submissionFee: BigInt(quote.submitRelayerFee64)
        },
        orderHash,
        orderTypedData
      };
    }
    var import_ethers6 = require_lib6();
    var import_buffer9 = require_buffer2();
    var ShuttleArtifact_default = {
      abi: [
        {
          type: "function",
          name: "batchMaxApprove",
          inputs: [{ name: "approvals", type: "bytes", internalType: "bytes" }],
          outputs: [],
          stateMutability: "nonpayable"
        },
        {
          type: "function",
          name: "initiate",
          inputs: [
            { name: "recipient", type: "bytes32", internalType: "bytes32" },
            {
              name: "overrideAmountIn",
              type: "uint256",
              internalType: "uint256"
            },
            { name: "targetChain", type: "uint16", internalType: "uint16" },
            {
              name: "params",
              type: "bytes",
              internalType: "bytes"
            }
          ],
          outputs: [{ name: "", type: "bytes", internalType: "bytes" }],
          stateMutability: "payable"
        },
        {
          type: "error",
          name: "ChainNotSupported",
          inputs: [{ name: "chain", type: "uint16", internalType: "uint16" }]
        },
        {
          type: "error",
          name: "DeadlineExpired",
          inputs: [
            { name: "blocktime", type: "uint256", internalType: "uint256" },
            {
              name: "deadline",
              type: "uint256",
              internalType: "uint256"
            }
          ]
        },
        { type: "error", name: "EthTransferFailed", inputs: [] },
        {
          type: "error",
          name: "ExceedsMaxGasDropoff",
          inputs: [
            { name: "requested", type: "uint256", internalType: "uint256" },
            {
              name: "maximum",
              type: "uint256",
              internalType: "uint256"
            }
          ]
        },
        {
          type: "error",
          name: "ExceedsMaxRelayingFee",
          inputs: [
            { name: "fee", type: "uint256", internalType: "uint256" },
            {
              name: "maximum",
              type: "uint256",
              internalType: "uint256"
            }
          ]
        },
        {
          type: "error",
          name: "InsufficientInputAmount",
          inputs: [
            { name: "input", type: "uint256", internalType: "uint256" },
            {
              name: "minimum",
              type: "uint256",
              internalType: "uint256"
            }
          ]
        },
        {
          type: "error",
          name: "InvalidAddress",
          inputs: [{ name: "addr", type: "bytes32", internalType: "bytes32" }]
        },
        {
          type: "error",
          name: "InvalidBoolVal",
          inputs: [{ name: "val", type: "uint8", internalType: "uint8" }]
        },
        {
          type: "error",
          name: "InvalidOverrideAmount",
          inputs: [
            { name: "received", type: "uint256", internalType: "uint256" },
            {
              name: "maximum",
              type: "uint256",
              internalType: "uint256"
            }
          ]
        },
        {
          type: "error",
          name: "InvalidSwapType",
          inputs: [{ name: "swapType", type: "uint256", internalType: "uint256" }]
        },
        {
          type: "error",
          name: "InvalidSwapTypeForChain",
          inputs: [
            { name: "chain", type: "uint16", internalType: "uint16" },
            {
              name: "swapType",
              type: "uint256",
              internalType: "uint256"
            }
          ]
        },
        {
          type: "error",
          name: "LengthMismatch",
          inputs: [
            { name: "encodedLength", type: "uint256", internalType: "uint256" },
            {
              name: "expectedLength",
              type: "uint256",
              internalType: "uint256"
            }
          ]
        },
        { type: "error", name: "RelayingDisabledForChain", inputs: [] }
      ]
    };
    var shuttleConstants = {
      FAST_MODE_FLAG: 1,
      RELAY_REDEEM_MODE: 2,
      EXACT_IN_FLAG: 1,
      USDC_INPUT_TOKEN_TYPE: 0,
      PRE_APPROVED_ACQUIRE_MODE: 0,
      OUTPUT_USDC_MODE: 0,
      OUTPUT_NATIVE_MODE: 1,
      OUTPUT_OTHER_MODE: 2
    };
    function writeBigIntTo16BytesBuffer(value) {
      const maxUint128 = (1n << 128n) - 1n;
      if (value < 0n || value > maxUint128) {
        throw new RangeError("Value must fit in an unsigned 128-bit integer (0 <= value < 2^128)");
      }
      const buffer = import_buffer9.Buffer.alloc(16);
      for (let i = 15; i >= 0; i--) {
        buffer[i] = Number(value & 0xFFn);
        value >>= 8n;
      }
      return buffer;
    }
    function getShuttleParams(quote, destinationAddress, signerChainId) {
      const { shuttleParams } = quote;
      if (!shuttleParams) {
        throw new Error("Swap layer params are missing in quote response");
      }
      const signerWormholeChainId = getWormholeChainIdById(Number(signerChainId));
      const sourceChainId = getWormholeChainIdByName(quote.fromChain);
      const destChainId = getWormholeChainIdByName(quote.toChain);
      if (sourceChainId !== signerWormholeChainId) {
        throw new Error(`Signer chain id(${Number(signerChainId)}) and quote from chain are not same! ${sourceChainId} !== ${signerWormholeChainId}`);
      }
      let bytes = [];
      bytes.push(shuttleConstants.FAST_MODE_FLAG);
      const maxLLFeeBuffer8Bytes = import_buffer9.Buffer.alloc(8);
      maxLLFeeBuffer8Bytes.writeBigUInt64BE(BigInt(shuttleParams.maxLLFee));
      const maxLLFeeBytes = maxLLFeeBuffer8Bytes.subarray(2);
      bytes.push(...maxLLFeeBytes);
      const deadLineBuffer = import_buffer9.Buffer.alloc(4);
      deadLineBuffer.writeUInt32BE(shuttleParams.fastTransferDeadline);
      bytes.push(...deadLineBuffer);
      bytes.push(shuttleConstants.RELAY_REDEEM_MODE);
      const gasDrop = getAmountOfFractionalAmount(
        quote.gasDrop,
        Math.min(6, getGasDecimal(quote.toChain))
      );
      const gasDropBuffer8Bytes = import_buffer9.Buffer.alloc(8);
      gasDropBuffer8Bytes.writeBigUInt64BE(gasDrop);
      const gasDropBytes = gasDropBuffer8Bytes.subarray(4);
      bytes.push(...gasDropBytes);
      const maxRelayerFeeBuffer8Bytes = import_buffer9.Buffer.alloc(8);
      maxRelayerFeeBuffer8Bytes.writeBigUInt64BE(BigInt(shuttleParams.maxRelayingFee));
      const maxRelayerFeeBytes = maxRelayerFeeBuffer8Bytes.subarray(2);
      bytes.push(...maxRelayerFeeBytes);
      bytes.push(shuttleConstants.EXACT_IN_FLAG);
      bytes.push(shuttleConstants.USDC_INPUT_TOKEN_TYPE);
      const amountIn = BigInt(quote.effectiveAmountIn64);
      if (quote.fromToken.contract === quote.shuttleInputContract) {
        bytes.push(...Array(8).fill(0));
        const amountInBuffer = import_buffer9.Buffer.alloc(8);
        amountInBuffer.writeBigUInt64BE(amountIn);
        bytes.push(...amountInBuffer);
      } else {
        bytes.push(...Array(16).fill(0));
      }
      bytes.push(shuttleConstants.PRE_APPROVED_ACQUIRE_MODE);
      if (shuttleParams.hasDestSwap) {
        if (quote.toToken.contract === import_ethers6.ZeroAddress) {
          bytes.push(shuttleConstants.OUTPUT_NATIVE_MODE);
        } else {
          bytes.push(shuttleConstants.OUTPUT_OTHER_MODE);
          const tokenOut = import_buffer9.Buffer.from(nativeAddressToHexString(quote.toToken.contract, destChainId).slice(2), "hex");
          bytes.push(...tokenOut);
        }
        const swapDeadlineBuffer = import_buffer9.Buffer.alloc(4);
        swapDeadlineBuffer.writeUInt32BE(Number(BigInt(quote.deadline64)));
        bytes.push(...swapDeadlineBuffer);
        const minAmountOut = getAmountOfFractionalAmount(quote.minAmountOut, quote.toToken.decimals);
        if (quote.toChain === "solana") {
          bytes.push(...Array(8).fill(0));
          const minAmountOutBuffer = import_buffer9.Buffer.alloc(8);
          minAmountOutBuffer.writeBigUInt64BE(minAmountOut);
          bytes.push(...minAmountOutBuffer);
        } else {
          const minAmountOutBuffer = writeBigIntTo16BytesBuffer(minAmountOut);
          bytes.push(...minAmountOutBuffer);
        }
        const swapPath = import_buffer9.Buffer.from(shuttleParams.path.slice(2), "hex");
        bytes.push(...swapPath);
      } else {
        bytes.push(shuttleConstants.OUTPUT_USDC_MODE);
      }
      const destinationAddressHex = nativeAddressToHexString(destinationAddress, destChainId);
      return {
        destAddr: destinationAddressHex,
        destChainId,
        serializedParams: `0x${import_buffer9.Buffer.from(bytes).toString("hex")}`,
        contractAddress: quote.shuttleContract,
        amountIn,
        bridgeFee: getAmountOfFractionalAmount(quote.bridgeFee, getGasDecimal(quote.fromChain))
      };
    }
    function getShuttleFromEvmTxPayload(quote, destinationAddress, signerChainId, permit) {
      if (quote.type !== "SHUTTLE") {
        throw new Error("Quote type is not SHUTTLE");
      }
      if (!Number.isFinite(Number(signerChainId))) {
        throw new Error("Invalid signer chain id");
      }
      signerChainId = Number(signerChainId);
      const _permit = permit || ZeroPermit;
      const forwarder = new import_ethers6.Contract(addresses_default.MAYAN_FORWARDER_CONTRACT, MayanForwarderArtifact_default.abi);
      const {
        destAddr,
        destChainId,
        serializedParams,
        contractAddress: shuttleContractAddress,
        amountIn,
        bridgeFee
      } = getShuttleParams(quote, destinationAddress, signerChainId);
      let shuttleCallData;
      const shuttleContract = new import_ethers6.Contract(shuttleContractAddress, ShuttleArtifact_default.abi);
      shuttleCallData = shuttleContract.interface.encodeFunctionData(
        "initiate",
        [destAddr, amountIn, destChainId, serializedParams]
      );
      let forwarderMethod;
      let forwarderParams;
      let value;
      if (quote.fromToken.contract === quote.shuttleInputContract) {
        forwarderMethod = "forwardERC20";
        forwarderParams = [quote.shuttleInputContract, amountIn, _permit, shuttleContractAddress, shuttleCallData];
        value = (0, import_ethers6.toBeHex)(bridgeFee);
      } else {
        const { evmSwapRouterAddress, evmSwapRouterCalldata } = quote;
        if (!quote.minMiddleAmount || !evmSwapRouterAddress || !evmSwapRouterCalldata) {
          throw new Error("Shuttle source chain swap requires middle amount, router address and calldata");
        }
        const tokenIn = quote.fromToken.contract;
        const minMiddleAmount = getAmountOfFractionalAmount(quote.minMiddleAmount, quote.shuttleInputDecimals);
        if (quote.fromToken.contract === import_ethers6.ZeroAddress) {
          forwarderMethod = "swapAndForwardEth";
          forwarderParams = [
            amountIn,
            evmSwapRouterAddress,
            evmSwapRouterCalldata,
            quote.shuttleInputContract,
            minMiddleAmount,
            shuttleContractAddress,
            shuttleCallData
          ];
          value = (0, import_ethers6.toBeHex)(amountIn);
        } else {
          forwarderMethod = "swapAndForwardERC20";
          forwarderParams = [
            tokenIn,
            amountIn,
            _permit,
            evmSwapRouterAddress,
            evmSwapRouterCalldata,
            quote.shuttleInputContract,
            minMiddleAmount,
            shuttleContractAddress,
            shuttleCallData
          ];
          value = (0, import_ethers6.toBeHex)(bridgeFee);
        }
      }
      const data = forwarder.interface.encodeFunctionData(forwarderMethod, forwarderParams);
      return {
        data,
        to: addresses_default.MAYAN_FORWARDER_CONTRACT,
        value,
        chainId: signerChainId,
        _forwarder: {
          method: forwarderMethod,
          params: forwarderParams
        }
      };
    }
    function getEvmSwapParams(quote, destinationAddress, referrerAddress, signerAddress, signerChainId, payload) {
      const mayanProgram = new import_web310.PublicKey(addresses_default.MAYAN_PROGRAM_ID);
      const [mayanMainAccount] = import_web310.PublicKey.findProgramAddressSync(
        [import_buffer10.Buffer.from("MAIN")],
        mayanProgram
      );
      const recipient = getAssociatedTokenAddress(
        new import_web310.PublicKey(quote.fromToken.mint),
        mayanMainAccount,
        true
      );
      const amountIn = BigInt(quote.effectiveAmountIn64);
      const recipientHex = nativeAddressToHexString(recipient.toString(), 1);
      const auctionHex = nativeAddressToHexString(
        addresses_default.AUCTION_PROGRAM_ID,
        1
      );
      let referrerHex;
      if (referrerAddress) {
        referrerHex = nativeAddressToHexString(
          referrerAddress,
          1
        );
      } else {
        referrerHex = nativeAddressToHexString(
          import_web310.SystemProgram.programId.toString(),
          1
        );
      }
      const signerWormholeChainId = getWormholeChainIdById(Number(signerChainId));
      const fromChainId = getWormholeChainIdByName(quote.fromChain);
      const destinationChainId = getWormholeChainIdByName(quote.toChain);
      if (fromChainId !== signerWormholeChainId) {
        throw new Error(`Signer chain id(${Number(signerChainId)}) and quote from chain are not same! ${fromChainId} !== ${signerWormholeChainId}`);
      }
      const contractAddress = quote.whMayanContract;
      const recipientStruct = {
        mayanAddr: recipientHex,
        mayanChainId: 1,
        destAddr: nativeAddressToHexString(destinationAddress, destinationChainId),
        destChainId: destinationChainId,
        auctionAddr: auctionHex,
        referrer: referrerHex,
        refundAddr: nativeAddressToHexString(signerAddress, signerWormholeChainId)
      };
      const unwrapRedeem = quote.toToken.contract === import_ethers7.ZeroAddress;
      const criteria = {
        transferDeadline: BigInt(quote.deadline64),
        swapDeadline: BigInt(quote.deadline64),
        amountOutMin: getAmountOfFractionalAmount(
          quote.minAmountOut,
          Math.min(8, quote.toToken.decimals)
        ),
        gasDrop: getAmountOfFractionalAmount(
          quote.gasDrop,
          Math.min(8, getGasDecimal(quote.toChain))
        ),
        unwrap: unwrapRedeem,
        customPayload: payload ? `0x${import_buffer10.Buffer.from(payload).toString("hex")}` : "0x"
      };
      const contractRelayerFees = {
        swapFee: getAmountOfFractionalAmount(
          quote.swapRelayerFee,
          Math.min(8, quote.fromToken.decimals)
        ),
        redeemFee: getAmountOfFractionalAmount(
          quote.redeemRelayerFee,
          Math.min(8, quote.toToken.decimals)
        ),
        refundFee: getAmountOfFractionalAmount(
          quote.refundRelayerFee,
          Math.min(8, quote.fromToken.decimals)
        )
      };
      const tokenOut = nativeAddressToHexString(
        quote.toToken.realOriginContractAddress,
        quote.toToken.realOriginChainId
      );
      const bridgeFee = getAmountOfFractionalAmount(
        quote.bridgeFee,
        18
      );
      return {
        amountIn,
        tokenIn: quote.fromToken.contract,
        tokenOut,
        tokenOutWChainId: quote.toToken.realOriginChainId,
        criteria,
        recipient: recipientStruct,
        relayerFees: contractRelayerFees,
        contractAddress,
        bridgeFee
      };
    }
    function getSwapFromEvmTxPayload(quote, swapperAddress, destinationAddress, referrerAddresses, signerAddress, signerChainId, payload, permit) {
      const signerWormholeChainId = getWormholeChainIdById(Number(signerChainId));
      const fromChainId = getWormholeChainIdByName(quote.fromChain);
      if (fromChainId !== signerWormholeChainId) {
        throw new Error(`Signer chain id(${Number(signerChainId)}) and quote from chain are not same! ${fromChainId} !== ${signerWormholeChainId}`);
      }
      const referrerAddress = getQuoteSuitableReferrerAddress(quote, referrerAddresses);
      if (quote.type === "MCTP") {
        return getMctpFromEvmTxPayload(quote, destinationAddress, referrerAddress, signerChainId, permit, payload);
      }
      if (quote.type === "SWIFT") {
        return getSwiftFromEvmTxPayload(quote, swapperAddress, destinationAddress, referrerAddress, signerChainId, permit);
      }
      if (quote.type === "SHUTTLE") {
        return getShuttleFromEvmTxPayload(quote, destinationAddress, signerChainId, permit);
      }
      if (quote.type != "WH") {
        throw new Error("Unsupported quote type");
      }
      if (!Number(quote.deadline64)) {
        throw new Error("WH mode requires a timeout");
      }
      const {
        relayerFees,
        recipient,
        tokenOut,
        tokenOutWChainId,
        criteria,
        tokenIn,
        amountIn,
        contractAddress,
        bridgeFee
      } = getEvmSwapParams(
        quote,
        destinationAddress,
        referrerAddress,
        signerAddress,
        signerChainId,
        payload
      );
      const forwarderContract = new import_ethers7.Contract(addresses_default.MAYAN_FORWARDER_CONTRACT, MayanForwarderArtifact_default.abi);
      const mayanSwap = new import_ethers7.Contract(contractAddress, MayanSwapArtifact_default.abi);
      let forwarderMethod;
      let forwarderParams;
      let value;
      const _permit = permit || ZeroPermit;
      if (tokenIn === import_ethers7.ZeroAddress) {
        const mayanCallData = mayanSwap.interface.encodeFunctionData(
          "wrapAndSwapETH",
          [relayerFees, recipient, tokenOut, tokenOutWChainId, criteria]
        );
        forwarderMethod = "forwardEth";
        forwarderParams = [contractAddress, mayanCallData];
        value = (0, import_ethers7.toBeHex)(amountIn);
      } else {
        const mayanCallData = mayanSwap.interface.encodeFunctionData(
          "swap",
          [
            relayerFees,
            recipient,
            tokenOut,
            tokenOutWChainId,
            criteria,
            tokenIn,
            amountIn
          ]
        );
        forwarderMethod = "forwardERC20";
        forwarderParams = [tokenIn, amountIn, _permit, contractAddress, mayanCallData];
        value = (0, import_ethers7.toBeHex)(bridgeFee);
      }
      const data = forwarderContract.interface.encodeFunctionData(forwarderMethod, forwarderParams);
      return {
        to: addresses_default.MAYAN_FORWARDER_CONTRACT,
        data,
        value,
        chainId: signerChainId,
        _forwarder: {
          method: forwarderMethod,
          params: forwarderParams
        }
      };
    }
    async function swapFromEvm(quote, swapperAddress, destinationAddress, referrerAddresses, signer, permit, overrides, payload) {
      if (!signer.provider) {
        throw new Error("No provider found for signer");
      }
      const signerAddress = await signer.getAddress();
      if (signerAddress.toLowerCase() !== swapperAddress.toLowerCase()) {
        throw new Error("Signer address does not match swapper address");
      }
      const signerChainId = Number((await signer.provider.getNetwork()).chainId);
      if (quote.type === "SWIFT" && quote.gasless) {
        const referrerAddress = getQuoteSuitableReferrerAddress(quote, referrerAddresses);
        const gasLessParams = getSwiftFromEvmGasLessParams(
          quote,
          swapperAddress,
          destinationAddress,
          referrerAddress,
          signerChainId,
          permit
        );
        const signedOrderHash = await signer.signTypedData(
          gasLessParams.orderTypedData.domain,
          gasLessParams.orderTypedData.types,
          gasLessParams.orderTypedData.value
        );
        await submitSwiftEvmSwap(gasLessParams, signedOrderHash);
        return gasLessParams.orderHash;
      }
      const transactionRequest = getSwapFromEvmTxPayload(
        quote,
        swapperAddress,
        destinationAddress,
        referrerAddresses,
        signerAddress,
        signerChainId,
        payload,
        permit
      );
      delete transactionRequest._forwarder;
      if (overrides == null ? void 0 : overrides.gasPrice) {
        transactionRequest.gasPrice = overrides.gasPrice;
      }
      if (overrides == null ? void 0 : overrides.maxFeePerGas) {
        transactionRequest.maxFeePerGas = overrides.maxFeePerGas;
      }
      if (overrides == null ? void 0 : overrides.maxPriorityFeePerGas) {
        transactionRequest.maxPriorityFeePerGas = overrides.maxPriorityFeePerGas;
      }
      if (overrides == null ? void 0 : overrides.gasLimit) {
        transactionRequest.gasLimit = overrides.gasLimit;
      } else {
        const estimatedGas = await signer.estimateGas(transactionRequest);
        transactionRequest.gasLimit = String(BigInt(String(estimatedGas)) * BigInt(110) / BigInt(100));
      }
      transactionRequest.chainId = getEvmChainIdByName(quote.fromChain);
      return signer.sendTransaction(transactionRequest);
    }
    async function estimateQuoteRequiredGas(quote, swapperAddress, signer, permit, payload) {
      const signerAddress = await signer.getAddress();
      const sampleDestinationAddress = quote.toChain === "solana" ? "ENsytooJVSZyNHbxvueUeX8Am8gcNqPivVVE8USCBiy5" : "0x1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a";
      const signerChainId = Number((await signer.provider.getNetwork()).chainId);
      if (quote.type === "SWIFT" && quote.gasless) {
        return BigInt(0);
      }
      const transactionRequest = getSwapFromEvmTxPayload(
        quote,
        swapperAddress,
        sampleDestinationAddress,
        null,
        signerAddress,
        signerChainId,
        payload,
        permit
      );
      delete transactionRequest._forwarder;
      let baseGas = await signer.estimateGas(transactionRequest);
      baseGas = BigInt(String(baseGas));
      if (quote.type === "MCTP" || quote.type === "SWIFT") {
        return baseGas * BigInt(110) / BigInt(100);
      }
      return baseGas;
    }
    async function estimateQuoteRequiredGasAprox(quote, provider, permit, payload) {
      var _a;
      const signerAddress = "0x1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a";
      const sampleDestinationAddress = quote.toChain === "solana" ? "ENsytooJVSZyNHbxvueUeX8Am8gcNqPivVVE8USCBiy5" : "0x1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a";
      const signerChainId = (_a = quote == null ? void 0 : quote.fromToken) == null ? void 0 : _a.chainId;
      if (quote.type === "SWIFT" && quote.gasless) {
        return BigInt(0);
      }
      const transactionRequest = getSwapFromEvmTxPayload(
        quote,
        signerAddress,
        sampleDestinationAddress,
        null,
        signerAddress,
        signerChainId,
        payload,
        permit
      );
      delete transactionRequest._forwarder;
      return provider.estimateGas(transactionRequest);
    }
    async function assertArgumentIsImmutable(params, suiClient) {
      var _a;
      let argTypes;
      try {
        argTypes = await suiClient.getMoveFunctionArgTypes({
          package: params.package,
          module: params.module,
          function: params.function
        });
      } catch (error) {
        throw new Error(
          `Failed to fetch ${params.package}::${params.module}::${params.function} ArgTypes`
        );
      }
      if (argTypes) {
        if (argTypes[params.argumentIndex] !== "Pure" && //@ts-ignore
        ((_a = argTypes[params.argumentIndex]) == null ? void 0 : _a.Object) !== "ByImmutableReference") {
          throw new Error(
            `Argument ${params.argumentIndex} of ${params.module}::${params.function} is not immutable`
          );
        }
      } else {
        throw new Error(
          `Failed to fetch package::${params.module}::${params.function} ArgTypes`
        );
      }
    }
    async function fetchAllCoins(inputs, suiClient) {
      let allCoinData = [];
      let currentSum = BigInt(0);
      let cursor = void 0;
      do {
        const paginatedCoins = await suiClient.getCoins({
          ...inputs,
          owner: inputs.walletAddress,
          cursor
        });
        const coinData = paginatedCoins.data.filter(
          (data) => BigInt(data.balance) > BigInt(0)
        );
        allCoinData = [...allCoinData, ...coinData];
        coinData.forEach((coin) => {
          currentSum += BigInt(coin.balance);
        });
        if (paginatedCoins.data.length === 0 || !paginatedCoins.hasNextPage || !paginatedCoins.nextCursor || currentSum >= inputs.coinAmount)
          return {
            coins: allCoinData.sort(
              (b, a) => Number(BigInt(b.coinObjectId) - BigInt(a.coinObjectId))
            ),
            sum: currentSum
          };
        cursor = paginatedCoins.nextCursor;
      } while (true);
    }
    async function fetchMayanSuiPackageId(stateObjectId, suiClient) {
      var _a, _b, _c;
      let object;
      try {
        object = await suiClient.getObject({
          id: stateObjectId,
          options: {
            showContent: true
          }
        });
      } catch (err) {
        throw new Error(`Failed to fetch Mayan Sui package ID: 

 ${err}`);
      }
      if ((_c = (_b = (_a = object.data) == null ? void 0 : _a.content) == null ? void 0 : _b.fields) == null ? void 0 : _c.latest_package_id) {
        return object.data.content.fields.latest_package_id;
      }
      throw new Error("latest_package_id not found in Mayan Sui state object");
    }
    var import_transactions = require_transactions();
    var import_utils13 = require_utils6();
    var import_web311 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var import_ethers8 = require_lib6();
    async function createMctpFromSuiMoveCalls(quote, swapperAddress, destinationAddress, referrerAddress, payload, suiClient, options) {
      const [mctpPackageId, feeManagerPackageId] = await Promise.all([
        fetchMayanSuiPackageId(addresses_default.SUI_MCTP_STATE, suiClient),
        quote.hasAuction ? fetchMayanSuiPackageId(addresses_default.SUI_MCTP_FEE_MANAGER_STATE, suiClient) : null
      ]);
      const amountInMin = getAmountOfFractionalAmount(
        quote.minMiddleAmount,
        CCTP_TOKEN_DECIMALS
      );
      let tx;
      let inputCoin;
      let whFeeCoin;
      if (quote.fromToken.contract === quote.mctpInputContract) {
        tx = (options == null ? void 0 : options.builtTransaction) ?? new import_transactions.Transaction();
        inputCoin = await resolveInputCoin(
          amountInMin,
          swapperAddress,
          quote.mctpInputContract,
          suiClient,
          tx,
          options == null ? void 0 : options.inputCoin
        );
      } else {
        const {
          tx: serializedTx,
          outCoin,
          whFeeCoin: suiSplitViaSwap
        } = await getSwapSui({
          amountIn64: quote.effectiveAmountIn64,
          inputCoinType: quote.fromToken.contract,
          middleCoinType: quote.mctpInputContract,
          userWallet: swapperAddress,
          withWhFee: quote.hasAuction || quote.cheaperChain !== "sui",
          referrerAddress,
          inputCoin: options == null ? void 0 : options.inputCoin,
          transaction: (options == null ? void 0 : options.builtTransaction) ? await options.builtTransaction.toJSON() : void 0
        });
        tx = import_transactions.Transaction.from(serializedTx);
        inputCoin = outCoin;
        whFeeCoin = suiSplitViaSwap ? { result: suiSplitViaSwap } : null;
      }
      if (quote.hasAuction) {
        await addInitOrderMoveCalls(
          quote,
          swapperAddress,
          destinationAddress,
          referrerAddress,
          mctpPackageId,
          feeManagerPackageId,
          suiClient,
          {
            inputCoin: { result: inputCoin },
            whFeeCoin,
            builtTransaction: tx
          }
        );
      } else {
        if (quote.cheaperChain === "sui") {
          await addBridgeLockedFeeMoveCalls(
            quote,
            swapperAddress,
            destinationAddress,
            mctpPackageId,
            suiClient,
            {
              inputCoin: { result: inputCoin },
              whFeeCoin,
              builtTransaction: tx
            }
          );
        } else {
          await addBridgeWithFeeMoveCalls(
            quote,
            swapperAddress,
            destinationAddress,
            mctpPackageId,
            payload,
            suiClient,
            {
              inputCoin: { result: inputCoin },
              whFeeCoin,
              builtTransaction: tx
            }
          );
        }
      }
      const amountIn = BigInt(quote.effectiveAmountIn64);
      const _payload = payload ? Uint8Array.from(payload) : Uint8Array.from([]);
      tx.moveCall({
        package: mctpPackageId,
        module: "init_order",
        function: "log_initialize_mctp",
        typeArguments: [quote.fromToken.contract],
        arguments: [
          tx.pure.u64(amountIn),
          tx.object(quote.fromToken.verifiedAddress),
          tx.pure.vector("u8", _payload)
        ]
      });
      try {
        let referrerHex;
        if (referrerAddress) {
          referrerHex = nativeAddressToHexString(referrerAddress, getWormholeChainIdByName(quote.toChain));
        } else {
          referrerHex = nativeAddressToHexString(
            import_web311.SystemProgram.programId.toString(),
            getWormholeChainIdByName("solana")
          );
        }
        tx.moveCall({
          package: addresses_default.SUI_LOGGER_PACKAGE_ID,
          module: "referrer_logger",
          function: "log_referrer",
          arguments: [
            tx.pure.address(referrerHex),
            tx.pure.u8(quote.referrerBps || 0)
          ]
        });
      } catch (err) {
        console.error("Failed to log referrer", err);
      }
      return tx;
    }
    async function addBridgeWithFeeMoveCalls(quote, swapperAddress, destinationAddress, mctpPackageId, payload, suiClient, options) {
      const destChainId = getWormholeChainIdByName(quote.toChain);
      const tx = (options == null ? void 0 : options.builtTransaction) ?? new import_transactions.Transaction();
      const amountInMin = getAmountOfFractionalAmount(
        quote.minMiddleAmount,
        CCTP_TOKEN_DECIMALS
      );
      const inputCoin = await resolveInputCoin(
        amountInMin,
        swapperAddress,
        quote.mctpInputContract,
        suiClient,
        tx,
        options == null ? void 0 : options.inputCoin
      );
      const payloadType = payload ? MCTP_PAYLOAD_TYPE_CUSTOM_PAYLOAD : MCTP_PAYLOAD_TYPE_DEFAULT;
      const addrDest = nativeAddressToHexString(destinationAddress, destChainId);
      const domainDest = getCCTPDomain(quote.toChain);
      const gasDrop = getAmountOfFractionalAmount(
        quote.gasDrop,
        Math.min(getGasDecimal(quote.toChain), 8)
      );
      const redeemFee = getAmountOfFractionalAmount(
        quote.redeemRelayerFee,
        CCTP_TOKEN_DECIMALS
      );
      const _payload = payload ? Uint8Array.from(payload) : Uint8Array.from([]);
      const [bridgeWithFeeTicket] = tx.moveCall({
        package: mctpPackageId,
        module: "bridge_with_fee",
        function: "prepare_bridge_with_fee",
        typeArguments: [quote.mctpInputContract],
        arguments: [
          tx.pure.u8(payloadType),
          inputCoin,
          tx.pure.u64(amountInMin),
          tx.pure.address(addrDest),
          tx.pure.u32(domainDest),
          tx.pure.u64(gasDrop),
          tx.pure.u64(redeemFee),
          tx.pure.vector("u8", _payload)
        ]
      });
      const [burnRequest, depositTicket] = tx.moveCall({
        package: mctpPackageId,
        module: "bridge_with_fee",
        function: "bridge_with_fee",
        typeArguments: [quote.mctpInputContract],
        arguments: [
          tx.object(addresses_default.SUI_MCTP_STATE),
          tx.object(addresses_default.SUI_CCTP_CORE_STATE),
          tx.object(quote.mctpVerifiedInputAddress),
          bridgeWithFeeTicket
        ]
      });
      const [_burnMessage, cctpMessage] = tx.moveCall({
        package: addresses_default.SUI_CCTP_TOKEN_PACKAGE_ID,
        module: "deposit_for_burn",
        function: "deposit_for_burn_with_caller_with_package_auth",
        typeArguments: [
          quote.mctpInputContract,
          `${mctpPackageId}::bridge_with_fee::CircleAuth`
        ],
        arguments: [
          depositTicket,
          tx.object(addresses_default.SUI_CCTP_TOKEN_STATE),
          tx.object(addresses_default.SUI_CCTP_CORE_STATE),
          tx.object("0x403"),
          tx.object(quote.mctpInputTreasury)
        ]
      });
      const [wormholeMessage] = tx.moveCall({
        package: mctpPackageId,
        module: "bridge_with_fee",
        function: "publish_bridge_with_fee",
        arguments: [tx.object(addresses_default.SUI_MCTP_STATE), burnRequest, cctpMessage]
      });
      await addPublishWormholeMessage(
        tx,
        wormholeMessage,
        suiClient,
        BigInt(quote.bridgeFee),
        swapperAddress,
        options == null ? void 0 : options.whFeeCoin
      );
      return tx;
    }
    async function addBridgeLockedFeeMoveCalls(quote, swapperAddress, destinationAddress, mctpPackageId, suiClient, options) {
      const destChainId = getWormholeChainIdByName(quote.toChain);
      const tx = (options == null ? void 0 : options.builtTransaction) ?? new import_transactions.Transaction();
      const amountInMin = getAmountOfFractionalAmount(
        quote.minMiddleAmount,
        CCTP_TOKEN_DECIMALS
      );
      const inputCoin = await resolveInputCoin(
        amountInMin,
        swapperAddress,
        quote.mctpInputContract,
        suiClient,
        tx,
        options == null ? void 0 : options.inputCoin
      );
      const addrDest = nativeAddressToHexString(destinationAddress, destChainId);
      const domainDest = getCCTPDomain(quote.toChain);
      const gasDrop = getAmountOfFractionalAmount(
        quote.gasDrop,
        Math.min(getGasDecimal(quote.toChain), 8)
      );
      const redeemFee = getAmountOfFractionalAmount(
        quote.redeemRelayerFee,
        CCTP_TOKEN_DECIMALS
      );
      const [bridgeLockedFeeTicket] = tx.moveCall({
        package: mctpPackageId,
        module: "bridge_locked_fee",
        function: "prepare_bridge_locked_fee",
        typeArguments: [quote.mctpInputContract],
        arguments: [
          inputCoin,
          tx.pure.u64(amountInMin),
          tx.pure.address(addrDest),
          tx.pure.u32(domainDest),
          tx.pure.u64(gasDrop),
          tx.pure.u64(redeemFee)
        ]
      });
      const [burnRequest, depositTicket] = tx.moveCall({
        package: mctpPackageId,
        module: "bridge_locked_fee",
        function: "bridge_locked_fee",
        typeArguments: [quote.mctpInputContract],
        arguments: [
          tx.object(addresses_default.SUI_MCTP_STATE),
          tx.object(addresses_default.SUI_CCTP_CORE_STATE),
          tx.object(quote.mctpVerifiedInputAddress),
          bridgeLockedFeeTicket
        ]
      });
      const [_burnMessage, cctpMessage] = tx.moveCall({
        package: addresses_default.SUI_CCTP_TOKEN_PACKAGE_ID,
        module: "deposit_for_burn",
        function: "deposit_for_burn_with_caller_with_package_auth",
        typeArguments: [
          quote.mctpInputContract,
          `${mctpPackageId}::bridge_locked_fee::CircleAuth`
        ],
        arguments: [
          depositTicket,
          tx.object(addresses_default.SUI_CCTP_TOKEN_STATE),
          tx.object(addresses_default.SUI_CCTP_CORE_STATE),
          tx.object("0x403"),
          tx.object(quote.mctpInputTreasury)
        ]
      });
      tx.moveCall({
        package: mctpPackageId,
        module: "bridge_locked_fee",
        function: "store_bridge_locked_fee",
        typeArguments: [quote.mctpInputContract],
        arguments: [
          tx.object(addresses_default.SUI_MCTP_STATE),
          tx.object(quote.mctpVerifiedInputAddress),
          burnRequest,
          cctpMessage
        ]
      });
      return tx;
    }
    async function addInitOrderMoveCalls(quote, swapperAddress, destinationAddress, referrerAddress, mctpPackageId, feeManagerPackageId, suiClient, options) {
      const destChainId = getWormholeChainIdByName(quote.toChain);
      const tx = (options == null ? void 0 : options.builtTransaction) ?? new import_transactions.Transaction();
      const amountInMin = getAmountOfFractionalAmount(
        quote.minMiddleAmount,
        CCTP_TOKEN_DECIMALS
      );
      const [inputCoin] = await Promise.all([
        resolveInputCoin(
          amountInMin,
          swapperAddress,
          quote.mctpInputContract,
          suiClient,
          tx,
          options == null ? void 0 : options.inputCoin
        ),
        assertArgumentIsImmutable(
          {
            package: feeManagerPackageId,
            module: "calculate_mctp_fee",
            function: "prepare_calc_mctp_fee",
            argumentIndex: 3
          },
          suiClient
        )
      ]);
      const tokenOut = quote.toToken.contract === import_ethers8.ZeroAddress ? nativeAddressToHexString(import_web311.SystemProgram.programId.toString(), getWormholeChainIdByName("solana")) : nativeAddressToHexString(quote.toToken.contract, quote.toToken.wChainId);
      const amountOutMin = getAmountOfFractionalAmount(
        quote.minAmountOut,
        Math.min(8, quote.toToken.decimals)
      );
      const addrDest = nativeAddressToHexString(destinationAddress, destChainId);
      const domainDest = getCCTPDomain(quote.toChain);
      const gasDrop = getAmountOfFractionalAmount(
        quote.gasDrop,
        Math.min(getGasDecimal(quote.toChain), 8)
      );
      const redeemFee = getAmountOfFractionalAmount(
        quote.redeemRelayerFee,
        CCTP_TOKEN_DECIMALS
      );
      const deadline = BigInt(quote.deadline64);
      let referrerHex;
      if (referrerAddress) {
        referrerHex = nativeAddressToHexString(referrerAddress, destChainId);
      } else {
        referrerHex = nativeAddressToHexString(
          import_web311.SystemProgram.programId.toString(),
          getWormholeChainIdByName("solana")
        );
      }
      const commonArguments = [
        tx.object(quote.mctpVerifiedInputAddress),
        tx.pure.u8(MCTP_INIT_ORDER_PAYLOAD_ID),
        tx.pure.address(swapperAddress),
        inputCoin,
        tx.pure.address(addrDest),
        tx.pure.u16(destChainId),
        tx.pure.address(tokenOut),
        tx.pure.u64(amountOutMin),
        tx.pure.u64(gasDrop),
        tx.pure.u64(redeemFee),
        tx.pure.u64(deadline),
        tx.pure.address(referrerHex),
        tx.pure.u8(quote.referrerBps)
      ];
      const [feeManagerInitOrderParamsTicket] = tx.moveCall({
        package: feeManagerPackageId,
        module: "calculate_mctp_fee",
        function: "prepare_calc_mctp_fee",
        typeArguments: [quote.mctpInputContract],
        arguments: commonArguments
      });
      const [feeManagerInitOrderParams] = tx.moveCall({
        package: feeManagerPackageId,
        module: "calculate_mctp_fee",
        function: "calculate_mctp_fee",
        arguments: [
          tx.object(addresses_default.SUI_MCTP_FEE_MANAGER_STATE),
          feeManagerInitOrderParamsTicket
        ]
      });
      const [initOrderTicket] = tx.moveCall({
        package: mctpPackageId,
        module: "init_order",
        function: "prepare_initialize_order",
        typeArguments: [quote.mctpInputContract],
        arguments: [
          ...commonArguments.slice(1),
          tx.pure.u32(domainDest),
          tx.pure.u64(amountInMin)
        ]
      });
      const [burnRequest, depositTicket] = tx.moveCall({
        package: mctpPackageId,
        module: "init_order",
        function: "initialize_order",
        typeArguments: [quote.mctpInputContract],
        arguments: [
          tx.object(addresses_default.SUI_MCTP_STATE),
          tx.object(addresses_default.SUI_CCTP_CORE_STATE),
          tx.object(quote.mctpVerifiedInputAddress),
          initOrderTicket,
          feeManagerInitOrderParams
        ]
      });
      const [_burnMessage, cctpMessage] = tx.moveCall({
        package: addresses_default.SUI_CCTP_TOKEN_PACKAGE_ID,
        module: "deposit_for_burn",
        function: "deposit_for_burn_with_caller_with_package_auth",
        typeArguments: [
          quote.mctpInputContract,
          `${mctpPackageId}::init_order::CircleAuth`
        ],
        arguments: [
          depositTicket,
          tx.object(addresses_default.SUI_CCTP_TOKEN_STATE),
          tx.object(addresses_default.SUI_CCTP_CORE_STATE),
          tx.object("0x403"),
          tx.object(quote.mctpInputTreasury)
        ]
      });
      const [wormholeMessage] = tx.moveCall({
        package: mctpPackageId,
        module: "init_order",
        function: "publish_init_order",
        arguments: [tx.object(addresses_default.SUI_MCTP_STATE), burnRequest, cctpMessage]
      });
      await addPublishWormholeMessage(
        tx,
        wormholeMessage,
        suiClient,
        BigInt(quote.bridgeFee),
        swapperAddress,
        options == null ? void 0 : options.whFeeCoin
      );
      return tx;
    }
    async function addPublishWormholeMessage(tx, messageTicket, suiClient, bridgeFee, feePayer, suiCoin) {
      let gasCoin;
      if (suiCoin == null ? void 0 : suiCoin.result) {
        gasCoin = suiCoin.result;
      } else if (suiCoin == null ? void 0 : suiCoin.objectId) {
        gasCoin = tx.object(suiCoin.objectId);
      } else {
        if (bridgeFee > BigInt(0)) {
          const { coins, sum } = await fetchAllCoins(
            {
              walletAddress: feePayer,
              coinType: import_utils13.SUI_TYPE_ARG,
              coinAmount: bridgeFee
            },
            suiClient
          );
          if (sum < bridgeFee) {
            throw new Error(`Insufficient funds to pay Wormhole message fee`);
          }
          if (coins.length > 1) {
            tx.mergeCoins(
              coins[0].coinObjectId,
              coins.slice(1).map((c) => c.coinObjectId)
            );
          }
          const [spitedCoin] = tx.splitCoins(coins[0].coinObjectId, [bridgeFee]);
          gasCoin = spitedCoin;
        } else {
          const [zeroSui] = tx.splitCoins(tx.gas, [tx.pure.u64(0)]);
          gasCoin = zeroSui;
        }
      }
      tx.moveCall({
        package: addresses_default.SUI_WORMHOLE_PACKAGE_ID,
        module: "publish_message",
        function: "publish_message",
        arguments: [
          tx.object(addresses_default.SUI_WORMHOLE_STATE),
          gasCoin,
          messageTicket,
          tx.object(import_utils13.SUI_CLOCK_OBJECT_ID)
        ]
      });
      return tx;
    }
    async function resolveInputCoin(amount, owner, coinType, suiClient, tx, preparedCoin) {
      let inputCoin;
      if (preparedCoin == null ? void 0 : preparedCoin.result) {
        inputCoin = preparedCoin.result;
      } else if (preparedCoin == null ? void 0 : preparedCoin.objectId) {
        inputCoin = tx.object(preparedCoin.objectId);
      } else {
        const { coins, sum } = await fetchAllCoins(
          {
            walletAddress: owner,
            coinType,
            coinAmount: amount
          },
          suiClient
        );
        if (sum < amount) {
          throw new Error(
            `Insufficient funds to create Coin ${coinType} with amount ${amount}`
          );
        }
        if (coins.length > 1) {
          tx.mergeCoins(
            coins[0].coinObjectId,
            coins.slice(1).map((c) => c.coinObjectId)
          );
        }
        const [spitedCoin] = tx.splitCoins(coins[0].coinObjectId, [amount]);
        inputCoin = spitedCoin;
      }
      return inputCoin;
    }
    async function createSwapFromSuiMoveCalls(quote, swapperWalletAddress, destinationAddress, referrerAddresses, payload, suiClient, options) {
      const referrerAddress = getQuoteSuitableReferrerAddress(
        quote,
        referrerAddresses
      );
      if (quote.type === "MCTP") {
        return createMctpFromSuiMoveCalls(
          quote,
          swapperWalletAddress,
          destinationAddress,
          referrerAddress,
          payload,
          suiClient,
          options
        );
      } else {
        throw new Error("Unsupported quote type from Sui chain");
      }
    }
  }
});

// node_modules/navi-sdk/dist/libs/Bridge/providers/mayan.js
var require_mayan = __commonJS({
  "node_modules/navi-sdk/dist/libs/Bridge/providers/mayan.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.swap = swap;
    var swap_sdk_1 = require_dist3();
    var ethers_1 = require_lib6();
    var ERC20_ABI = [
      "function allowance(address owner, address spender) view returns (uint256)",
      "function approve(address spender, uint256 amount) returns (bool)",
      "function balanceOf(address account) view returns (uint256)"
    ];
    var BridgeChain;
    (function(BridgeChain2) {
      BridgeChain2[BridgeChain2["SUI"] = 1999] = "SUI";
      BridgeChain2[BridgeChain2["SOLANA"] = 0] = "SOLANA";
    })(BridgeChain || (BridgeChain = {}));
    function swap(route, fromAddress, toAddress, walletConnection, referrerAddresses) {
      return __awaiter2(this, void 0, void 0, function* () {
        if (!route) {
          throw new Error("No route found");
        }
        const mayanQuote = route.info_for_bridge;
        let hash;
        if (route.from_token.chainId === BridgeChain.SUI) {
          if (!walletConnection.sui) {
            throw new Error("Sui wallet connection not found");
          }
          const client = walletConnection.sui.provider;
          const swapTrx = yield (0, swap_sdk_1.createSwapFromSuiMoveCalls)(mayanQuote, fromAddress, toAddress, referrerAddresses, null, client);
          const connection = walletConnection.sui;
          const signed = yield connection.signTransaction({ transaction: swapTrx });
          const resp = yield client.executeTransactionBlock({
            transactionBlock: signed.bytes,
            signature: [signed.signature],
            options: {
              showEffects: true,
              showEvents: true,
              showBalanceChanges: true
            }
          });
          hash = resp.digest;
          yield client.waitForTransaction({
            digest: hash
          });
        } else if (route.from_token.chainId === BridgeChain.SOLANA) {
          if (!walletConnection.solana) {
            throw new Error("Solana wallet connection not found");
          }
          const connection = walletConnection.solana;
          const swapTrx = yield (0, swap_sdk_1.swapFromSolana)(mayanQuote, fromAddress, toAddress, referrerAddresses, connection.signTransaction, connection.connection, connection.extraRpcs, connection.sendOptions, connection.jitoOptions);
          hash = swapTrx.signature;
        } else {
          if (!walletConnection.evm) {
            throw new Error("EVM wallet connection not found");
          }
          const connection = walletConnection.evm;
          const fromToken = mayanQuote.fromToken;
          if (fromToken.standard === "erc20") {
            const erc20Contract = new ethers_1.Contract(fromToken.realOriginContractAddress || fromToken.contract, ERC20_ABI, connection.signer);
            const currentAllowance = yield erc20Contract.allowance(fromAddress, swap_sdk_1.addresses.MAYAN_FORWARDER_CONTRACT);
            const REQUIRED_ALLOWANCE = (0, ethers_1.parseUnits)(String(mayanQuote.effectiveAmountIn), fromToken.decimals);
            if (currentAllowance < REQUIRED_ALLOWANCE) {
              const approveTrx = yield erc20Contract.approve(swap_sdk_1.addresses.MAYAN_FORWARDER_CONTRACT, REQUIRED_ALLOWANCE);
              const receiptApprove = yield approveTrx.wait();
              if (!receiptApprove) {
                throw new Error("Failed to approve allowance");
              }
            }
          }
          const swapTrx = yield (0, swap_sdk_1.swapFromEvm)(mayanQuote, fromAddress, toAddress, referrerAddresses, connection.signer, connection.permit, connection.overrides, null);
          hash = typeof swapTrx === "string" ? swapTrx : swapTrx.hash;
          yield connection.waitForTransaction({
            hash,
            confirmations: 3
          });
        }
        yield new Promise((resolve) => {
          setTimeout(() => {
            resolve(true);
          }, 2e3);
        });
        return hash;
      });
    }
  }
});

// node_modules/navi-sdk/dist/libs/Bridge/config.js
var require_config2 = __commonJS({
  "node_modules/navi-sdk/dist/libs/Bridge/config.js"(exports2) {
    "use strict";
    var __importDefault2 = exports2 && exports2.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.apiInstance = exports2.BridgeConfig = void 0;
    exports2.config = config;
    var axios_1 = __importDefault2(require_axios());
    exports2.BridgeConfig = {
      baseUrl: "https://open-aggregator-api.naviprotocol.io",
      apiKey: ""
    };
    exports2.apiInstance = axios_1.default.create({
      baseURL: exports2.BridgeConfig.baseUrl,
      timeout: 3e4
    });
    function config(newConfig) {
      Object.assign(exports2.BridgeConfig, newConfig);
      exports2.apiInstance.defaults.baseURL = exports2.BridgeConfig.baseUrl;
      if (exports2.BridgeConfig.apiKey) {
        exports2.apiInstance.defaults.headers.common["x-navi-token"] = exports2.BridgeConfig.apiKey;
      } else {
        delete exports2.apiInstance.defaults.headers.common["x-navi-token"];
      }
    }
  }
});

// node_modules/navi-sdk/dist/libs/Bridge/index.js
var require_Bridge = __commonJS({
  "node_modules/navi-sdk/dist/libs/Bridge/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports2 && exports2.__importStar || /* @__PURE__ */ function() {
      var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys(o);
      };
      return function(mod2) {
        if (mod2 && mod2.__esModule) return mod2;
        var result = {};
        if (mod2 != null) {
          for (var k = ownKeys(mod2), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding2(result, mod2, k[i]);
        }
        __setModuleDefault2(result, mod2);
        return result;
      };
    }();
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.config = void 0;
    exports2.getSupportChains = getSupportChains;
    exports2.getSupportTokens = getSupportTokens;
    exports2.searchSupportTokens = searchSupportTokens;
    exports2.getQuote = getQuote;
    exports2.getTransaction = getTransaction;
    exports2.getWalletTransactions = getWalletTransactions;
    exports2.swap = swap;
    var mayan = __importStar2(require_mayan());
    var config_1 = require_config2();
    Object.defineProperty(exports2, "config", { enumerable: true, get: function() {
      return config_1.config;
    } });
    function getSupportChains() {
      return __awaiter2(this, void 0, void 0, function* () {
        const res = yield config_1.apiInstance.get("/chains/list");
        return res.data.data.chains;
      });
    }
    function getSupportTokens(chainId_1) {
      return __awaiter2(this, arguments, void 0, function* (chainId, page = 1, pageSize = 100) {
        const res = yield config_1.apiInstance.get("/coins/support-token-list", {
          params: {
            chain: chainId,
            page,
            pageSize,
            scene: "bridge"
          }
        });
        return res.data.data.list;
      });
    }
    function searchSupportTokens(chainId, keyword) {
      return __awaiter2(this, void 0, void 0, function* () {
        const res = yield config_1.apiInstance.get("/coins/search", {
          params: {
            chain: chainId,
            keyword,
            page: 1,
            pageSize: 30,
            scene: "bridge"
          }
        });
        return res.data.data.list;
      });
    }
    function getQuote(from, to, amount, options) {
      return __awaiter2(this, void 0, void 0, function* () {
        const res = yield config_1.apiInstance.get("/bridge-swap/find_routes", {
          params: {
            from: from.address,
            to: to.address,
            fromChain: from.chainId,
            toChain: to.chainId,
            amount,
            slippageBps: options === null || options === void 0 ? void 0 : options.slippageBps,
            referrerBps: options === null || options === void 0 ? void 0 : options.referrerBps
          }
        });
        const rtn = res.data.data;
        rtn.routes.forEach((router) => {
          if (router.from_token.chain) {
            router.from_token.chainId = parseInt(router.from_token.chain);
          }
          if (router.to_token.chain) {
            router.to_token.chainId = parseInt(router.to_token.chain);
          }
        });
        return rtn;
      });
    }
    function getTransaction(hash) {
      return __awaiter2(this, void 0, void 0, function* () {
        const res = yield config_1.apiInstance.get(`/bridge-swap/transaction/${hash}`);
        return res.data.data.transaction;
      });
    }
    function getWalletTransactions(address_1) {
      return __awaiter2(this, arguments, void 0, function* (address, page = 1, limit = 10) {
        const res = yield config_1.apiInstance.get(`/bridge-swap/transactions/list`, {
          params: {
            address,
            page,
            limit
          }
        });
        return res.data.data;
      });
    }
    function swap(quote, fromAddress, toAddress, walletConnection, referrerAddresses) {
      return __awaiter2(this, void 0, void 0, function* () {
        const startAt = (/* @__PURE__ */ new Date()).toISOString();
        const hash = yield mayan.swap(quote, fromAddress, toAddress, walletConnection, referrerAddresses);
        const endAt = (/* @__PURE__ */ new Date()).toISOString();
        const sourceToken = {
          address: quote.from_token.address,
          symbol: quote.from_token.symbol,
          decimals: quote.from_token.decimals
        };
        const destToken = {
          address: quote.to_token.address,
          symbol: quote.to_token.symbol,
          decimals: quote.to_token.decimals
        };
        return {
          id: hash,
          status: "processing",
          lastUpdateAt: endAt,
          sourceChainId: quote.from_token.chainId,
          destChainId: quote.to_token.chainId,
          walletSourceAddress: fromAddress,
          walletDestAddress: toAddress,
          totalFeeAmount: quote.total_fee,
          sourceToken: quote.from_token,
          destToken: quote.to_token,
          bridgeFromAmount: quote.amount_in,
          bridgeToAmount: quote.amount_out,
          bridgeStartAt: startAt,
          bridgeEndAt: endAt,
          bridgeFeeAmount: "0",
          bridgeSourceTxHash: hash,
          bridgeDestTxHash: "",
          bridgeRefundTxHash: "",
          bridgeStatus: "processing",
          bridgeProvider: "mayan",
          bridgeFromToken: sourceToken,
          bridgeToToken: destToken,
          hasSwap: false
        };
      });
    }
  }
});

// node_modules/navi-sdk/dist/index.js
var require_dist4 = __commonJS({
  "node_modules/navi-sdk/dist/index.js"(exports2) {
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p)) __createBinding2(exports3, m, p);
    };
    var __importStar2 = exports2 && exports2.__importStar || /* @__PURE__ */ function() {
      var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys(o);
      };
      return function(mod2) {
        if (mod2 && mod2.__esModule) return mod2;
        var result = {};
        if (mod2 != null) {
          for (var k = ownKeys(mod2), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding2(result, mod2, k[i]);
        }
        __setModuleDefault2(result, mod2);
        return result;
      };
    }();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Bridge = void 0;
    __exportStar2(require_naviSDK(), exports2);
    __exportStar2(require_AccountManager(), exports2);
    __exportStar2(require_Aggregator(), exports2);
    __exportStar2(require_PoolInfo(), exports2);
    __exportStar2(require_PTB(), exports2);
    __exportStar2(require_CallFunctions(), exports2);
    __exportStar2(require_Coins(), exports2);
    __exportStar2(require_types3(), exports2);
    __exportStar2(require_address(), exports2);
    exports2.Bridge = __importStar2(require_Bridge());
  }
});
export default require_dist4();
/*! Bundled license information:

@noble/hashes/utils.js:
@noble/hashes/utils.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/abstract/utils.js:
@noble/curves/abstract/modular.js:
@noble/curves/abstract/curve.js:
@noble/curves/abstract/edwards.js:
@noble/curves/abstract/montgomery.js:
@noble/curves/ed25519.js:
@noble/curves/abstract/weierstrass.js:
@noble/curves/_shortw_utils.js:
@noble/curves/nist.js:
@noble/curves/abstract/utils.js:
@noble/curves/abstract/modular.js:
@noble/curves/abstract/curve.js:
@noble/curves/abstract/weierstrass.js:
@noble/curves/_shortw_utils.js:
@noble/curves/secp256k1.js:
@noble/curves/esm/secp256k1.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@scure/base/lib/index.js:
  (*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@scure/bip39/index.js:
  (*! scure-bip39 - MIT License (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com) *)

axios/dist/browser/axios.cjs:
  (*! Axios v1.9.0 Copyright (c) 2025 Matt Zabriskie and contributors *)

@babel/runtime/helpers/regeneratorRuntime.js:
  (*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE *)

ieee754/index.js:
  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)

buffer/index.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)

crypto-js/ripemd160.js:
  (** @preserve
  	(c) 2012 by Cédric Mesnil. All rights reserved.
  
  	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
  
  	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
  	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
  
  	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  	*)

crypto-js/mode-ctr-gladman.js:
  (** @preserve
   * Counter block mode compatible with  Dr Brian Gladman fileenc.c
   * derived from CryptoJS.mode.CTR
   * Jan Hruby jhruby.web@gmail.com
   *)

assert/build/internal/util/comparisons.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
   * @license  MIT
   *)

aes-js/lib.commonjs/aes.js:
  (*! MIT License. Copyright 2015-2022 Richard Moore <me@ricmoo.com>. See LICENSE.txt. *)

safe-buffer/index.js:
  (*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)

@solana/buffer-layout/lib/Layout.js:
  (**
   * Support for translating between Uint8Array instances and JavaScript
   * native types.
   *
   * {@link module:Layout~Layout|Layout} is the basis of a class
   * hierarchy that associates property names with sequences of encoded
   * bytes.
   *
   * Layouts are supported for these scalar (numeric) types:
   * * {@link module:Layout~UInt|Unsigned integers in little-endian
   *   format} with {@link module:Layout.u8|8-bit}, {@link
   *   module:Layout.u16|16-bit}, {@link module:Layout.u24|24-bit},
   *   {@link module:Layout.u32|32-bit}, {@link
   *   module:Layout.u40|40-bit}, and {@link module:Layout.u48|48-bit}
   *   representation ranges;
   * * {@link module:Layout~UIntBE|Unsigned integers in big-endian
   *   format} with {@link module:Layout.u16be|16-bit}, {@link
   *   module:Layout.u24be|24-bit}, {@link module:Layout.u32be|32-bit},
   *   {@link module:Layout.u40be|40-bit}, and {@link
   *   module:Layout.u48be|48-bit} representation ranges;
   * * {@link module:Layout~Int|Signed integers in little-endian
   *   format} with {@link module:Layout.s8|8-bit}, {@link
   *   module:Layout.s16|16-bit}, {@link module:Layout.s24|24-bit},
   *   {@link module:Layout.s32|32-bit}, {@link
   *   module:Layout.s40|40-bit}, and {@link module:Layout.s48|48-bit}
   *   representation ranges;
   * * {@link module:Layout~IntBE|Signed integers in big-endian format}
   *   with {@link module:Layout.s16be|16-bit}, {@link
   *   module:Layout.s24be|24-bit}, {@link module:Layout.s32be|32-bit},
   *   {@link module:Layout.s40be|40-bit}, and {@link
   *   module:Layout.s48be|48-bit} representation ranges;
   * * 64-bit integral values that decode to an exact (if magnitude is
   *   less than 2^53) or nearby integral Number in {@link
   *   module:Layout.nu64|unsigned little-endian}, {@link
   *   module:Layout.nu64be|unsigned big-endian}, {@link
   *   module:Layout.ns64|signed little-endian}, and {@link
   *   module:Layout.ns64be|unsigned big-endian} encodings;
   * * 32-bit floating point values with {@link
   *   module:Layout.f32|little-endian} and {@link
   *   module:Layout.f32be|big-endian} representations;
   * * 64-bit floating point values with {@link
   *   module:Layout.f64|little-endian} and {@link
   *   module:Layout.f64be|big-endian} representations;
   * * {@link module:Layout.const|Constants} that take no space in the
   *   encoded expression.
   *
   * and for these aggregate types:
   * * {@link module:Layout.seq|Sequence}s of instances of a {@link
   *   module:Layout~Layout|Layout}, with JavaScript representation as
   *   an Array and constant or data-dependent {@link
   *   module:Layout~Sequence#count|length};
   * * {@link module:Layout.struct|Structure}s that aggregate a
   *   heterogeneous sequence of {@link module:Layout~Layout|Layout}
   *   instances, with JavaScript representation as an Object;
   * * {@link module:Layout.union|Union}s that support multiple {@link
   *   module:Layout~VariantLayout|variant layouts} over a fixed
   *   (padded) or variable (not padded) span of bytes, using an
   *   unsigned integer at the start of the data or a separate {@link
   *   module:Layout.unionLayoutDiscriminator|layout element} to
   *   determine which layout to use when interpreting the buffer
   *   contents;
   * * {@link module:Layout.bits|BitStructure}s that contain a sequence
   *   of individual {@link
   *   module:Layout~BitStructure#addField|BitField}s packed into an 8,
   *   16, 24, or 32-bit unsigned integer starting at the least- or
   *   most-significant bit;
   * * {@link module:Layout.cstr|C strings} of varying length;
   * * {@link module:Layout.blob|Blobs} of fixed- or variable-{@link
   *   module:Layout~Blob#length|length} raw data.
   *
   * All {@link module:Layout~Layout|Layout} instances are immutable
   * after construction, to prevent internal state from becoming
   * inconsistent.
   *
   * @local Layout
   * @local ExternalLayout
   * @local GreedyCount
   * @local OffsetLayout
   * @local UInt
   * @local UIntBE
   * @local Int
   * @local IntBE
   * @local NearUInt64
   * @local NearUInt64BE
   * @local NearInt64
   * @local NearInt64BE
   * @local Float
   * @local FloatBE
   * @local Double
   * @local DoubleBE
   * @local Sequence
   * @local Structure
   * @local UnionDiscriminator
   * @local UnionLayoutDiscriminator
   * @local Union
   * @local VariantLayout
   * @local BitStructure
   * @local BitField
   * @local Boolean
   * @local Blob
   * @local CString
   * @local Constant
   * @local bindConstructorLayout
   * @module Layout
   * @license MIT
   * @author Peter A. Bigot
   * @see {@link https://github.com/pabigot/buffer-layout|buffer-layout on GitHub}
   *)

js-sha3/src/sha3.js:
  (**
   * [js-sha3]{@link https://github.com/emn178/js-sha3}
   *
   * @version 0.8.0
   * @author Chen, Yi-Cyuan [emn178@gmail.com]
   * @copyright Chen, Yi-Cyuan 2015-2018
   * @license MIT
   *)

js-sha256/src/sha256.js:
  (**
   * [js-sha256]{@link https://github.com/emn178/js-sha256}
   *
   * @version 0.9.0
   * @author Chen, Yi-Cyuan [emn178@gmail.com]
   * @copyright Chen, Yi-Cyuan 2014-2017
   * @license MIT
   *)
*/
//# sourceMappingURL=navi-sdk.js.map
